
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 98 7e 00 00       	call   c0007eb8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f5 c3 01 00       	call   c001c41a <_init>
c0000025:	c3                   	ret    
c0000026:	bb b6 ce 01 c0       	mov    ebx,0xc001ceb6
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c0 ce 01 c0    	cmp    ebx,0xc001cec0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 f9 01 c0       	mov    eax,0xc001f978
c0000049:	3d 78 f9 01 c0       	cmp    eax,0xc001f978
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 f9 01 c0       	push   0xc001f978
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 f9 01 c0       	mov    eax,0xc001f978
c0000075:	2d 78 f9 01 c0       	sub    eax,0xc001f978
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 f9 01 c0       	push   0xc001f978
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a0 fb 01 c0 00 	cmp    BYTE PTR ds:0xc001fba0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c8 ce 01 c0       	mov    ebx,0xc001cec8
c00000bb:	81 eb c4 ce 01 c0    	sub    ebx,0xc001cec4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c4 ce 01 c0       	mov    esi,0xc001cec4
c00000ca:	a1 a4 fb 01 c0       	mov    eax,ds:0xc001fba4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 a4 fb 01 c0       	mov    ds:0xc001fba4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 a4 fb 01 c0       	mov    eax,ds:0xc001fba4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 f9 01 c0       	push   0xc001f978
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a0 fb 01 c0 01 	mov    BYTE PTR ds:0xc001fba0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 a8 fb 01 c0       	push   0xc001fba8
c000012c:	68 78 f9 01 c0       	push   0xc001f978
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 ec 2e 01 00       	call   c00131bc <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 0c a6 00 00       	call   c000a8f4 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 ca 2e 01 00       	call   c00131bc <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 9b 33 01 00       	call   c00136ac <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 ea 39 01 00       	call   c0013d04 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 a0 09 02 c0 	lgdtd  ds:0xc00209a0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 86 6b 00 00       	jmp    c0006f28 <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 c0 fb 01 c0       	mov    ds:0xc001fbc0,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 c0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbc0,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d c0 fb 01 c0    	mov    ebx,DWORD PTR ds:0xc001fbc0
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 e0 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe3120],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 e0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3120],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 e0 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe3120],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 e0 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3120],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 e0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3120],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d e0 fb 01 c0    	mov    ecx,DWORD PTR ds:0xc001fbe0
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d e0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbe0,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 e4 fb 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe041c]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 e4 fb 01 c0 	mov    DWORD PTR [eax*4-0x3ffe041c],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d e0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbe0,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 0c fc 01 c0    	cmp    DWORD PTR ds:0xc001fc0c,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d 1c fc 01 c0    	mov    ecx,DWORD PTR ds:0xc001fc1c
c0000d5d:	c7 42 0c 14 fc 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fc14
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 1c fc 01 c0    	mov    DWORD PTR ds:0xc001fc1c,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 0c fc 01 c0    	mov    DWORD PTR ds:0xc001fc0c,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 e0 fb 01 c0 02 	test   BYTE PTR ds:0xc001fbe0,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 e0 fb 01 c0       	mov    eax,0xc001fbe0
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 f6 6e 00 00       	call   c0007d34 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 38 6e 00 00       	call   c0007d34 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 22 6e 00 00       	call   c0007d34 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 fe 6d 00 00       	call   c0007d34 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d e0 fb 01 c0    	mov    edi,DWORD PTR ds:0xc001fbe0
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 e0 fb 01 c0       	mov    eax,0xc001fbe0
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 e4 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe041c]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 e4 fb 01 c0 	mov    DWORD PTR [edx*4-0x3ffe041c],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 14 fc 01 c0 	lea    edx,[eax*8-0x3ffe03ec]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 e0 fb 01 c0       	mov    eax,0xc001fbe0
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d 20 fc 01 c0    	mov    ebx,DWORD PTR ds:0xc001fc20
c00010df:	81 fb 14 fc 01 c0    	cmp    ebx,0xc001fc14
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d 14 fc 01 c0       	cmp    eax,0xc001fc14
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d 10 fc 01 c0    	cmp    DWORD PTR ds:0xc001fc10,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 1c fc 01 c0       	mov    ds:0xc001fc1c,eax
c000111b:	a3 20 fc 01 c0       	mov    ds:0xc001fc20,eax
c0001120:	a3 10 fc 01 c0       	mov    ds:0xc001fc10,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 14 fc 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fc14
c000112e:	c7 40 0c 14 fc 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fc14
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 20 fc 01 c0       	mov    ds:0xc001fc20,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 14 fc 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fc14
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 d8 fb 01 c0 	lea    ebp,[edx*4-0x3ffe0428]
c000117f:	8b 14 95 e0 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0420]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 e0 fb 01 c0 	lea    ecx,[edx*4-0x3ffe0420]
c000119a:	8b 14 95 e0 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0420]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd 14 ff 01 c0 	or     DWORD PTR [edi*4-0x3ffe00ec],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 14 fc 01 c0 	lea    eax,[eax*8-0x3ffe03ec]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d 1c fc 01 c0    	mov    DWORD PTR ds:0xc001fc1c,ecx
c0001254:	89 0d 20 fc 01 c0    	mov    DWORD PTR ds:0xc001fc20,ecx
c000125a:	c7 41 08 14 fc 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fc14
c0001261:	c7 41 0c 14 fc 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fc14
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd 0c fc 01 c0 	lea    edx,[ecx*8-0x3ffe03f4]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d 14 ff 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe00ec]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d 14 ff 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe00ec]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 0c fc 01 c0 	lea    edx,[eax*4-0x3ffe03f4]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d 14 ff 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe00ec],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d 1c fc 01 c0    	mov    DWORD PTR ds:0xc001fc1c,edi
c0001327:	89 3d 20 fc 01 c0    	mov    DWORD PTR ds:0xc001fc20,edi
c000132d:	c7 47 08 14 fc 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fc14
c0001334:	c7 47 0c 14 fc 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fc14
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d 10 fc 01 c0    	mov    DWORD PTR ds:0xc001fc10,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 0c fc 01 c0       	mov    eax,ds:0xc001fc0c
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d 0c fc 01 c0    	mov    DWORD PTR ds:0xc001fc0c,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba e0 fb 01 c0       	mov    edx,0xc001fbe0
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d e0 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fbe0,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 e0 fb 01 c0       	mov    eax,0xc001fbe0
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d 34 ff 01 c0    	mov    ebx,DWORD PTR ds:0xc001ff34
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 34 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ff34,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d 34 ff 01 c0    	mov    DWORD PTR ds:0xc001ff34,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 0c fc 01 c0    	cmp    DWORD PTR ds:0xc001fc0c,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d 0c fc 01 c0    	mov    DWORD PTR ds:0xc001fc0c,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d e0 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fbe0,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 e0 fb 01 c0       	mov    eax,0xc001fbe0
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 3c ff 01 c0    	push   DWORD PTR ds:0xc001ff3c
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d e0 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fbe0,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 e0 fb 01 c0       	mov    eax,0xc001fbe0
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 3c ff 01 c0       	mov    eax,ds:0xc001ff3c
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 e0 fb 01 c0       	mov    eax,0xc001fbe0
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d 0c fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc0c,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 e0 fb 01 c0       	mov    eax,0xc001fbe0
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 0c fc 01 c0       	mov    eax,ds:0xc001fc0c
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 e4 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe041c]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 14 fc 01 c0       	mov    eax,0xc001fc14
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d 0c ff 01 c0       	cmp    eax,0xc001ff0c
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 48 ff 01 c0       	mov    eax,ds:0xc001ff48
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 30 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff30
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 44 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff44
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 54 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff54
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 e0 fb 01 c0       	mov    eax,0xc001fbe0
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 e4 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe301c]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 e0 fb 01 c0       	mov    eax,ds:0xc001fbe0
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 e0 fb 01 c0       	mov    ds:0xc001fbe0,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d 24 ff 01 c0    	mov    DWORD PTR ds:0xc001ff24,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d 28 ff 01 c0    	mov    DWORD PTR ds:0xc001ff28,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d 2c ff 01 c0    	mov    DWORD PTR ds:0xc001ff2c,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 34 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ff34,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 a0 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc060]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 8a 53 01 00       	jmp    c0017094 <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 a0 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc060]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 b8 53 01 00       	jmp    c00170d8 <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 a0 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc060]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 dd 53 01 00       	jmp    c001711c <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 40 d1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2ec0]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 40 d1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2ec0]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba 44 ef 01 c0       	mov    edx,0xc001ef44
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba fc cf 01 c0       	mov    edx,0xc001cffc
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 80 ff 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0080]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 60 ff 01 c0    	mov    ax,ds:0xc001ff60
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 60 ff 01 c0    	mov    ds:0xc001ff60,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 02 d0 01 c0       	mov    eax,0xc001d002
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad c0 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2f40]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 0b d0 01 c0       	mov    eax,0xc001d00b
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 40 d1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2ec0]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 80 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0080]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 80 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0080],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 90 d0 01 c0       	mov    eax,0xc001d090
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 80 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0080]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb 80 d0 01 c0       	mov    ebx,0xc001d080
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba 60 d0 01 c0       	mov    edx,0xc001d060
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba 70 d0 01 c0       	mov    edx,0xc001d070
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba 12 d0 01 c0       	mov    edx,0xc001d012
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba 1e d0 01 c0       	mov    edx,0xc001d01e
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba 32 d0 01 c0       	mov    edx,0xc001d032
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 c2 23 00 00       	call   c0007e5d <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 ba 23 00 00       	call   c0007e6d <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c 60 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d460
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 60 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d460
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 60 d2 01 c0       	mov    eax,0xc001d260
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 a0 d1 01 c0       	mov    eax,0xc001d1a0
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 60 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2ea0]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <utf2ucs>:
c0005d64:	57                   	push   edi
c0005d65:	56                   	push   esi
c0005d66:	53                   	push   ebx
c0005d67:	89 d7                	mov    edi,edx
c0005d69:	47                   	inc    edi
c0005d6a:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0005d6d:	0f be cb             	movsx  ecx,bl
c0005d70:	89 ce                	mov    esi,ecx
c0005d72:	c1 fe 08             	sar    esi,0x8
c0005d75:	89 f2                	mov    edx,esi
c0005d77:	88 10                	mov    BYTE PTR [eax],dl
c0005d79:	83 c0 02             	add    eax,0x2
c0005d7c:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005d7f:	85 c9                	test   ecx,ecx
c0005d81:	75 e6                	jne    c0005d69 <utf2ucs+0x5>
c0005d83:	5b                   	pop    ebx
c0005d84:	5e                   	pop    esi
c0005d85:	5f                   	pop    edi
c0005d86:	c3                   	ret    

c0005d87 <ucs2utfn>:
c0005d87:	57                   	push   edi
c0005d88:	56                   	push   esi
c0005d89:	53                   	push   ebx
c0005d8a:	89 cb                	mov    ebx,ecx
c0005d8c:	d1 eb                	shr    ebx,1
c0005d8e:	83 f9 01             	cmp    ecx,0x1
c0005d91:	76 17                	jbe    c0005daa <ucs2utfn+0x23>
c0005d93:	8d 7b ff             	lea    edi,[ebx-0x1]
c0005d96:	0f be 32             	movsx  esi,BYTE PTR [edx]
c0005d99:	c1 e6 08             	shl    esi,0x8
c0005d9c:	8d 4a 02             	lea    ecx,[edx+0x2]
c0005d9f:	0f be 52 01          	movsx  edx,BYTE PTR [edx+0x1]
c0005da3:	09 f2                	or     edx,esi
c0005da5:	83 fa 3b             	cmp    edx,0x3b
c0005da8:	75 40                	jne    c0005dea <ucs2utfn+0x63>
c0005daa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	c3                   	ret    
c0005db1:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0005db7:	7f 3d                	jg     c0005df6 <ucs2utfn+0x6f>
c0005db9:	89 d6                	mov    esi,edx
c0005dbb:	c1 fe 06             	sar    esi,0x6
c0005dbe:	83 ce c0             	or     esi,0xffffffc0
c0005dc1:	89 f3                	mov    ebx,esi
c0005dc3:	88 18                	mov    BYTE PTR [eax],bl
c0005dc5:	83 e2 3f             	and    edx,0x3f
c0005dc8:	83 ca 80             	or     edx,0xffffff80
c0005dcb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005dce:	8d 40 02             	lea    eax,[eax+0x2]
c0005dd1:	85 ff                	test   edi,edi
c0005dd3:	74 d5                	je     c0005daa <ucs2utfn+0x23>
c0005dd5:	4f                   	dec    edi
c0005dd6:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0005dd9:	c1 e2 08             	shl    edx,0x8
c0005ddc:	83 c1 02             	add    ecx,0x2
c0005ddf:	0f be 71 ff          	movsx  esi,BYTE PTR [ecx-0x1]
c0005de3:	09 f2                	or     edx,esi
c0005de5:	83 fa 3b             	cmp    edx,0x3b
c0005de8:	74 c0                	je     c0005daa <ucs2utfn+0x23>
c0005dea:	83 fa 7f             	cmp    edx,0x7f
c0005ded:	7f c2                	jg     c0005db1 <ucs2utfn+0x2a>
c0005def:	88 10                	mov    BYTE PTR [eax],dl
c0005df1:	8d 40 01             	lea    eax,[eax+0x1]
c0005df4:	eb db                	jmp    c0005dd1 <ucs2utfn+0x4a>
c0005df6:	89 d6                	mov    esi,edx
c0005df8:	c1 fe 0c             	sar    esi,0xc
c0005dfb:	83 ce e0             	or     esi,0xffffffe0
c0005dfe:	89 f3                	mov    ebx,esi
c0005e00:	88 18                	mov    BYTE PTR [eax],bl
c0005e02:	89 d6                	mov    esi,edx
c0005e04:	c1 fe 06             	sar    esi,0x6
c0005e07:	83 e6 3f             	and    esi,0x3f
c0005e0a:	83 ce 80             	or     esi,0xffffff80
c0005e0d:	89 f3                	mov    ebx,esi
c0005e0f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005e12:	83 e2 3f             	and    edx,0x3f
c0005e15:	83 ca 80             	or     edx,0xffffff80
c0005e18:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005e1b:	8d 40 03             	lea    eax,[eax+0x3]
c0005e1e:	eb b1                	jmp    c0005dd1 <ucs2utfn+0x4a>

c0005e20 <isjoliet>:
c0005e20:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e23:	74 06                	je     c0005e2b <isjoliet+0xb>
c0005e25:	b8 00 00 00 00       	mov    eax,0x0
c0005e2a:	c3                   	ret    
c0005e2b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e2f:	74 06                	je     c0005e37 <isjoliet+0x17>
c0005e31:	b8 00 00 00 00       	mov    eax,0x0
c0005e36:	c3                   	ret    
c0005e37:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e3a:	3c 43                	cmp    al,0x43
c0005e3c:	74 0f                	je     c0005e4d <isjoliet+0x2d>
c0005e3e:	3c 45                	cmp    al,0x45
c0005e40:	74 11                	je     c0005e53 <isjoliet+0x33>
c0005e42:	3c 40                	cmp    al,0x40
c0005e44:	0f 94 c0             	sete   al
c0005e47:	25 ff 00 00 00       	and    eax,0xff
c0005e4c:	c3                   	ret    
c0005e4d:	b8 02 00 00 00       	mov    eax,0x2
c0005e52:	c3                   	ret    
c0005e53:	b8 03 00 00 00       	mov    eax,0x3
c0005e58:	c3                   	ret    

c0005e59 <htohl_32>:
c0005e59:	31 d2                	xor    edx,edx
c0005e5b:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0005e5e:	c1 e2 08             	shl    edx,0x8
c0005e61:	31 c9                	xor    ecx,ecx
c0005e63:	8a 48 02             	mov    cl,BYTE PTR [eax+0x2]
c0005e66:	c1 e1 10             	shl    ecx,0x10
c0005e69:	09 ca                	or     edx,ecx
c0005e6b:	31 c9                	xor    ecx,ecx
c0005e6d:	8a 08                	mov    cl,BYTE PTR [eax]
c0005e6f:	09 ca                	or     edx,ecx
c0005e71:	31 c9                	xor    ecx,ecx
c0005e73:	8a 48 03             	mov    cl,BYTE PTR [eax+0x3]
c0005e76:	89 c8                	mov    eax,ecx
c0005e78:	c1 e0 18             	shl    eax,0x18
c0005e7b:	09 d0                	or     eax,edx
c0005e7d:	c3                   	ret    

c0005e7e <iso_733>:
c0005e7e:	e8 d6 ff ff ff       	call   c0005e59 <htohl_32>
c0005e83:	c3                   	ret    

c0005e84 <bclear_cache>:
c0005e84:	b8 00 00 00 00       	mov    eax,0x0
c0005e89:	8b 14 85 00 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0500]
c0005e90:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e96:	8b 14 85 60 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04a0]
c0005e9d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005ea3:	40                   	inc    eax
c0005ea4:	83 f8 10             	cmp    eax,0x10
c0005ea7:	75 e0                	jne    c0005e89 <bclear_cache+0x5>
c0005ea9:	c3                   	ret    

c0005eaa <bgrad_cache>:
c0005eaa:	83 fa 0e             	cmp    edx,0xe
c0005ead:	77 1c                	ja     c0005ecb <bgrad_cache+0x21>
c0005eaf:	56                   	push   esi
c0005eb0:	53                   	push   ebx
c0005eb1:	8d 14 90             	lea    edx,[eax+edx*4]
c0005eb4:	8b 32                	mov    esi,DWORD PTR [edx]
c0005eb6:	8d 58 3c             	lea    ebx,[eax+0x3c]
c0005eb9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0005ebc:	89 0a                	mov    DWORD PTR [edx],ecx
c0005ebe:	83 c2 04             	add    edx,0x4
c0005ec1:	39 da                	cmp    edx,ebx
c0005ec3:	75 f4                	jne    c0005eb9 <bgrad_cache+0xf>
c0005ec5:	89 70 3c             	mov    DWORD PTR [eax+0x3c],esi
c0005ec8:	5b                   	pop    ebx
c0005ec9:	5e                   	pop    esi
c0005eca:	c3                   	ret    
c0005ecb:	c3                   	ret    

c0005ecc <bclear>:
c0005ecc:	e8 b3 ff ff ff       	call   c0005e84 <bclear_cache>
c0005ed1:	c3                   	ret    

c0005ed2 <iso_break_all>:
c0005ed2:	b8 b0 00 02 c0       	mov    eax,0xc00200b0
c0005ed7:	ba f0 09 02 c0       	mov    edx,0xc00209f0
c0005edc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0005ee2:	05 94 00 00 00       	add    eax,0x94
c0005ee7:	39 d0                	cmp    eax,edx
c0005ee9:	75 f1                	jne    c0005edc <iso_break_all+0xa>
c0005eeb:	c3                   	ret    

c0005eec <ucscompare>:
c0005eec:	55                   	push   ebp
c0005eed:	57                   	push   edi
c0005eee:	56                   	push   esi
c0005eef:	53                   	push   ebx
c0005ef0:	83 ec 1c             	sub    esp,0x1c
c0005ef3:	89 d7                	mov    edi,edx
c0005ef5:	85 c9                	test   ecx,ecx
c0005ef7:	0f 8e ab 00 00 00    	jle    c0005fa8 <ucscompare+0xbc>
c0005efd:	89 c5                	mov    ebp,eax
c0005eff:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0005f02:	c1 e0 08             	shl    eax,0x8
c0005f05:	0f be 55 01          	movsx  edx,BYTE PTR [ebp+0x1]
c0005f09:	09 d0                	or     eax,edx
c0005f0b:	0f be 37             	movsx  esi,BYTE PTR [edi]
c0005f0e:	c1 e6 08             	shl    esi,0x8
c0005f11:	0f be 57 01          	movsx  edx,BYTE PTR [edi+0x1]
c0005f15:	09 d6                	or     esi,edx
c0005f17:	83 f8 3b             	cmp    eax,0x3b
c0005f1a:	0f 84 92 00 00 00    	je     c0005fb2 <ucscompare+0xc6>
c0005f20:	49                   	dec    ecx
c0005f21:	83 e1 fe             	and    ecx,0xfffffffe
c0005f24:	83 c1 02             	add    ecx,0x2
c0005f27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f2b:	bb 00 00 00 00       	mov    ebx,0x0
c0005f30:	83 ec 0c             	sub    esp,0xc
c0005f33:	50                   	push   eax
c0005f34:	e8 b7 a9 ff ff       	call   c00008f0 <tolower>
c0005f39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005f40:	e8 ab a9 ff ff       	call   c00008f0 <tolower>
c0005f45:	83 c4 10             	add    esp,0x10
c0005f48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0005f4c:	75 6e                	jne    c0005fbc <ucscompare+0xd0>
c0005f4e:	83 c3 02             	add    ebx,0x2
c0005f51:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0005f55:	74 26                	je     c0005f7d <ucscompare+0x91>
c0005f57:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005f5c:	c1 e0 08             	shl    eax,0x8
c0005f5f:	0f be 54 1d 01       	movsx  edx,BYTE PTR [ebp+ebx*1+0x1]
c0005f64:	09 d0                	or     eax,edx
c0005f66:	0f be 34 1f          	movsx  esi,BYTE PTR [edi+ebx*1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	0f be 54 1f 01       	movsx  edx,BYTE PTR [edi+ebx*1+0x1]
c0005f72:	09 d6                	or     esi,edx
c0005f74:	83 f8 3b             	cmp    eax,0x3b
c0005f77:	75 b7                	jne    c0005f30 <ucscompare+0x44>
c0005f79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0005f7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f81:	0f be 04 0f          	movsx  eax,BYTE PTR [edi+ecx*1]
c0005f85:	c1 e0 08             	shl    eax,0x8
c0005f88:	0f be 54 0f 01       	movsx  edx,BYTE PTR [edi+ecx*1+0x1]
c0005f8d:	09 d0                	or     eax,edx
c0005f8f:	83 f8 2f             	cmp    eax,0x2f
c0005f92:	74 2f                	je     c0005fc3 <ucscompare+0xd7>
c0005f94:	85 c0                	test   eax,eax
c0005f96:	0f 95 c0             	setne  al
c0005f99:	25 ff 00 00 00       	and    eax,0xff
c0005f9e:	f7 d8                	neg    eax
c0005fa0:	83 c4 1c             	add    esp,0x1c
c0005fa3:	5b                   	pop    ebx
c0005fa4:	5e                   	pop    esi
c0005fa5:	5f                   	pop    edi
c0005fa6:	5d                   	pop    ebp
c0005fa7:	c3                   	ret    
c0005fa8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fb0:	eb cb                	jmp    c0005f7d <ucscompare+0x91>
c0005fb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fba:	eb c1                	jmp    c0005f7d <ucscompare+0x91>
c0005fbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0005fc1:	eb dd                	jmp    c0005fa0 <ucscompare+0xb4>
c0005fc3:	b8 00 00 00 00       	mov    eax,0x0
c0005fc8:	eb d6                	jmp    c0005fa0 <ucscompare+0xb4>

c0005fca <fncompare>:
c0005fca:	55                   	push   ebp
c0005fcb:	57                   	push   edi
c0005fcc:	56                   	push   esi
c0005fcd:	53                   	push   ebx
c0005fce:	83 ec 1c             	sub    esp,0x1c
c0005fd1:	89 cd                	mov    ebp,ecx
c0005fd3:	85 d2                	test   edx,edx
c0005fd5:	7e 71                	jle    c0006048 <fncompare+0x7e>
c0005fd7:	89 c7                	mov    edi,eax
c0005fd9:	89 d6                	mov    esi,edx
c0005fdb:	8a 00                	mov    al,BYTE PTR [eax]
c0005fdd:	3c 3b                	cmp    al,0x3b
c0005fdf:	74 6e                	je     c000604f <fncompare+0x85>
c0005fe1:	bb 00 00 00 00       	mov    ebx,0x0
c0005fe6:	eb 32                	jmp    c000601a <fncompare+0x50>
c0005fe8:	83 ec 0c             	sub    esp,0xc
c0005feb:	0f be c0             	movsx  eax,al
c0005fee:	50                   	push   eax
c0005fef:	e8 fc a8 ff ff       	call   c00008f0 <tolower>
c0005ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ff8:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005ffd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006000:	e8 eb a8 ff ff       	call   c00008f0 <tolower>
c0006005:	83 c4 10             	add    esp,0x10
c0006008:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000600c:	75 48                	jne    c0006056 <fncompare+0x8c>
c000600e:	43                   	inc    ebx
c000600f:	39 de                	cmp    esi,ebx
c0006011:	74 19                	je     c000602c <fncompare+0x62>
c0006013:	8a 04 1f             	mov    al,BYTE PTR [edi+ebx*1]
c0006016:	3c 3b                	cmp    al,0x3b
c0006018:	74 12                	je     c000602c <fncompare+0x62>
c000601a:	3c 2e                	cmp    al,0x2e
c000601c:	75 ca                	jne    c0005fe8 <fncompare+0x1e>
c000601e:	8d 56 ff             	lea    edx,[esi-0x1]
c0006021:	39 da                	cmp    edx,ebx
c0006023:	74 07                	je     c000602c <fncompare+0x62>
c0006025:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000602a:	75 bc                	jne    c0005fe8 <fncompare+0x1e>
c000602c:	8a 44 1d 00          	mov    al,BYTE PTR [ebp+ebx*1+0x0]
c0006030:	3c 2f                	cmp    al,0x2f
c0006032:	74 29                	je     c000605d <fncompare+0x93>
c0006034:	84 c0                	test   al,al
c0006036:	0f 95 c0             	setne  al
c0006039:	25 ff 00 00 00       	and    eax,0xff
c000603e:	f7 d8                	neg    eax
c0006040:	83 c4 1c             	add    esp,0x1c
c0006043:	5b                   	pop    ebx
c0006044:	5e                   	pop    esi
c0006045:	5f                   	pop    edi
c0006046:	5d                   	pop    ebp
c0006047:	c3                   	ret    
c0006048:	bb 00 00 00 00       	mov    ebx,0x0
c000604d:	eb dd                	jmp    c000602c <fncompare+0x62>
c000604f:	bb 00 00 00 00       	mov    ebx,0x0
c0006054:	eb d6                	jmp    c000602c <fncompare+0x62>
c0006056:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000605b:	eb e3                	jmp    c0006040 <fncompare+0x76>
c000605d:	b8 00 00 00 00       	mov    eax,0x0
c0006062:	eb dc                	jmp    c0006040 <fncompare+0x76>

c0006064 <isoReadDiscSector>:
c0006064:	83 ec 0c             	sub    esp,0xc
c0006067:	0f be 05 40 fb 01 c0 	movsx  eax,BYTE PTR ds:0xc001fb40
c000606e:	50                   	push   eax
c000606f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000607b:	e8 f0 18 01 00       	call   c0017970 <isoReadDiscSectorHelper>
c0006080:	83 c4 1c             	add    esp,0x1c
c0006083:	c3                   	ret    

c0006084 <bread_cache>:
c0006084:	55                   	push   ebp
c0006085:	57                   	push   edi
c0006086:	56                   	push   esi
c0006087:	53                   	push   ebx
c0006088:	83 ec 0c             	sub    esp,0xc
c000608b:	89 c6                	mov    esi,eax
c000608d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006090:	3b 10                	cmp    edx,DWORD PTR [eax]
c0006092:	74 6a                	je     c00060fe <bread_cache+0x7a>
c0006094:	89 d7                	mov    edi,edx
c0006096:	ba 0e 00 00 00       	mov    edx,0xe
c000609b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000609e:	39 38                	cmp    DWORD PTR [eax],edi
c00060a0:	74 61                	je     c0006103 <bread_cache+0x7f>
c00060a2:	4a                   	dec    edx
c00060a3:	83 fa ff             	cmp    edx,0xffffffff
c00060a6:	75 f3                	jne    c000609b <bread_cache+0x17>
c00060a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00060aa:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ad:	74 69                	je     c0006118 <bread_cache+0x94>
c00060af:	bb 01 00 00 00       	mov    ebx,0x1
c00060b4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00060b7:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ba:	74 0b                	je     c00060c7 <bread_cache+0x43>
c00060bc:	43                   	inc    ebx
c00060bd:	83 fb 10             	cmp    ebx,0x10
c00060c0:	75 f2                	jne    c00060b4 <bread_cache+0x30>
c00060c2:	bb 00 00 00 00       	mov    ebx,0x0
c00060c7:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060ca:	83 ec 04             	sub    esp,0x4
c00060cd:	6a 01                	push   0x1
c00060cf:	57                   	push   edi
c00060d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060d3:	83 c0 04             	add    eax,0x4
c00060d6:	50                   	push   eax
c00060d7:	e8 88 ff ff ff       	call   c0006064 <isoReadDiscSector>
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	85 c0                	test   eax,eax
c00060e1:	78 2e                	js     c0006111 <bread_cache+0x8d>
c00060e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060e6:	89 38                	mov    DWORD PTR [eax],edi
c00060e8:	89 da                	mov    edx,ebx
c00060ea:	89 f0                	mov    eax,esi
c00060ec:	e8 b9 fd ff ff       	call   c0005eaa <bgrad_cache>
c00060f1:	b8 0f 00 00 00       	mov    eax,0xf
c00060f6:	83 c4 0c             	add    esp,0xc
c00060f9:	5b                   	pop    ebx
c00060fa:	5e                   	pop    esi
c00060fb:	5f                   	pop    edi
c00060fc:	5d                   	pop    ebp
c00060fd:	c3                   	ret    
c00060fe:	ba 0f 00 00 00       	mov    edx,0xf
c0006103:	89 f0                	mov    eax,esi
c0006105:	e8 a0 fd ff ff       	call   c0005eaa <bgrad_cache>
c000610a:	b8 0f 00 00 00       	mov    eax,0xf
c000610f:	eb e5                	jmp    c00060f6 <bread_cache+0x72>
c0006111:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006116:	eb de                	jmp    c00060f6 <bread_cache+0x72>
c0006118:	bb 00 00 00 00       	mov    ebx,0x0
c000611d:	eb a8                	jmp    c00060c7 <bread_cache+0x43>

c000611f <biread>:
c000611f:	83 ec 0c             	sub    esp,0xc
c0006122:	89 c2                	mov    edx,eax
c0006124:	b8 60 fb 01 c0       	mov    eax,0xc001fb60
c0006129:	e8 56 ff ff ff       	call   c0006084 <bread_cache>
c000612e:	83 c4 0c             	add    esp,0xc
c0006131:	c3                   	ret    

c0006132 <bdread>:
c0006132:	83 ec 0c             	sub    esp,0xc
c0006135:	89 c2                	mov    edx,eax
c0006137:	b8 00 fb 01 c0       	mov    eax,0xc001fb00
c000613c:	e8 43 ff ff ff       	call   c0006084 <bread_cache>
c0006141:	83 c4 0c             	add    esp,0xc
c0006144:	c3                   	ret    

c0006145 <strnicmp>:
c0006145:	55                   	push   ebp
c0006146:	57                   	push   edi
c0006147:	56                   	push   esi
c0006148:	53                   	push   ebx
c0006149:	83 ec 0c             	sub    esp,0xc
c000614c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006150:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006154:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006158:	85 ff                	test   edi,edi
c000615a:	74 51                	je     c00061ad <strnicmp+0x68>
c000615c:	8a 03                	mov    al,BYTE PTR [ebx]
c000615e:	84 c0                	test   al,al
c0006160:	74 52                	je     c00061b4 <strnicmp+0x6f>
c0006162:	8a 16                	mov    dl,BYTE PTR [esi]
c0006164:	84 d2                	test   dl,dl
c0006166:	74 53                	je     c00061bb <strnicmp+0x76>
c0006168:	01 df                	add    edi,ebx
c000616a:	eb 32                	jmp    c000619e <strnicmp+0x59>
c000616c:	83 ec 0c             	sub    esp,0xc
c000616f:	0f be c0             	movsx  eax,al
c0006172:	50                   	push   eax
c0006173:	e8 78 a7 ff ff       	call   c00008f0 <tolower>
c0006178:	89 c5                	mov    ebp,eax
c000617a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000617d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006180:	e8 6b a7 ff ff       	call   c00008f0 <tolower>
c0006185:	43                   	inc    ebx
c0006186:	46                   	inc    esi
c0006187:	83 c4 10             	add    esp,0x10
c000618a:	29 c5                	sub    ebp,eax
c000618c:	75 39                	jne    c00061c7 <strnicmp+0x82>
c000618e:	39 fb                	cmp    ebx,edi
c0006190:	74 30                	je     c00061c2 <strnicmp+0x7d>
c0006192:	8a 03                	mov    al,BYTE PTR [ebx]
c0006194:	84 c0                	test   al,al
c0006196:	74 39                	je     c00061d1 <strnicmp+0x8c>
c0006198:	8a 16                	mov    dl,BYTE PTR [esi]
c000619a:	84 d2                	test   dl,dl
c000619c:	74 08                	je     c00061a6 <strnicmp+0x61>
c000619e:	38 d0                	cmp    al,dl
c00061a0:	75 ca                	jne    c000616c <strnicmp+0x27>
c00061a2:	43                   	inc    ebx
c00061a3:	46                   	inc    esi
c00061a4:	eb e8                	jmp    c000618e <strnicmp+0x49>
c00061a6:	bd 00 00 00 00       	mov    ebp,0x0
c00061ab:	eb 1a                	jmp    c00061c7 <strnicmp+0x82>
c00061ad:	bd 00 00 00 00       	mov    ebp,0x0
c00061b2:	eb 13                	jmp    c00061c7 <strnicmp+0x82>
c00061b4:	bd 00 00 00 00       	mov    ebp,0x0
c00061b9:	eb 0c                	jmp    c00061c7 <strnicmp+0x82>
c00061bb:	bd 00 00 00 00       	mov    ebp,0x0
c00061c0:	eb 05                	jmp    c00061c7 <strnicmp+0x82>
c00061c2:	bd 00 00 00 00       	mov    ebp,0x0
c00061c7:	89 e8                	mov    eax,ebp
c00061c9:	83 c4 0c             	add    esp,0xc
c00061cc:	5b                   	pop    ebx
c00061cd:	5e                   	pop    esi
c00061ce:	5f                   	pop    edi
c00061cf:	5d                   	pop    ebp
c00061d0:	c3                   	ret    
c00061d1:	bd 00 00 00 00       	mov    ebp,0x0
c00061d6:	eb ef                	jmp    c00061c7 <strnicmp+0x82>

c00061d8 <find_object>:
c00061d8:	55                   	push   ebp
c00061d9:	57                   	push   edi
c00061da:	56                   	push   esi
c00061db:	53                   	push   ebx
c00061dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061e6:	89 d3                	mov    ebx,edx
c00061e8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00061ec:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c00061f3:	83 3d 94 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020994,0x0
c00061fa:	75 14                	jne    c0006210 <find_object+0x38>
c00061fc:	85 f6                	test   esi,esi
c00061fe:	0f 8e f0 01 00 00    	jle    c00063f4 <find_object+0x21c>
c0006204:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000620b:	e9 9f 01 00 00       	jmp    c00063af <find_object+0x1d7>
c0006210:	89 c2                	mov    edx,eax
c0006212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006216:	e8 49 fb ff ff       	call   c0005d64 <utf2ucs>
c000621b:	eb df                	jmp    c00061fc <find_object+0x24>
c000621d:	31 d2                	xor    edx,edx
c000621f:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c0006222:	89 c6                	mov    esi,eax
c0006224:	81 e6 ff 00 00 00    	and    esi,0xff
c000622a:	29 d6                	sub    esi,edx
c000622c:	8d 5c 15 21          	lea    ebx,[ebp+edx*1+0x21]
c0006230:	f6 45 20 01          	test   BYTE PTR [ebp+0x20],0x1
c0006234:	74 3d                	je     c0006273 <find_object+0x9b>
c0006236:	83 ee 21             	sub    esi,0x21
c0006239:	83 fe 03             	cmp    esi,0x3
c000623c:	7e 08                	jle    c0006246 <find_object+0x6e>
c000623e:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c0006241:	48                   	dec    eax
c0006242:	3c 01                	cmp    al,0x1
c0006244:	76 69                	jbe    c00062af <find_object+0xd7>
c0006246:	31 d2                	xor    edx,edx
c0006248:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c000624b:	8d 45 21             	lea    eax,[ebp+0x21]
c000624e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006252:	e8 73 fd ff ff       	call   c0005fca <fncompare>
c0006257:	85 c0                	test   eax,eax
c0006259:	0f 85 b1 00 00 00    	jne    c0006310 <find_object+0x138>
c000625f:	31 c0                	xor    eax,eax
c0006261:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c0006264:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006268:	0f 85 a2 00 00 00    	jne    c0006310 <find_object+0x138>
c000626e:	e9 02 01 00 00       	jmp    c0006375 <find_object+0x19d>
c0006273:	43                   	inc    ebx
c0006274:	83 ee 22             	sub    esi,0x22
c0006277:	eb c0                	jmp    c0006239 <find_object+0x61>
c0006279:	0f be 7b 02          	movsx  edi,BYTE PTR [ebx+0x2]
c000627d:	83 ef 05             	sub    edi,0x5
c0006280:	83 ec 04             	sub    esp,0x4
c0006283:	57                   	push   edi
c0006284:	8d 43 05             	lea    eax,[ebx+0x5]
c0006287:	50                   	push   eax
c0006288:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000628c:	50                   	push   eax
c000628d:	e8 be a3 ff ff       	call   c0000650 <strncpy>
c0006292:	c6 44 3c 30 00       	mov    BYTE PTR [esp+edi*1+0x30],0x0
c0006297:	83 c4 10             	add    esp,0x10
c000629a:	0f be 43 02          	movsx  eax,BYTE PTR [ebx+0x2]
c000629e:	29 c6                	sub    esi,eax
c00062a0:	01 c3                	add    ebx,eax
c00062a2:	83 fe 03             	cmp    esi,0x3
c00062a5:	7e 21                	jle    c00062c8 <find_object+0xf0>
c00062a7:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c00062aa:	48                   	dec    eax
c00062ab:	3c 01                	cmp    al,0x1
c00062ad:	77 19                	ja     c00062c8 <find_object+0xf0>
c00062af:	83 ec 04             	sub    esp,0x4
c00062b2:	6a 02                	push   0x2
c00062b4:	68 60 d5 01 c0       	push   0xc001d560
c00062b9:	53                   	push   ebx
c00062ba:	e8 c1 a4 ff ff       	call   c0000780 <strncmp>
c00062bf:	83 c4 10             	add    esp,0x10
c00062c2:	85 c0                	test   eax,eax
c00062c4:	75 d4                	jne    c000629a <find_object+0xc2>
c00062c6:	eb b1                	jmp    c0006279 <find_object+0xa1>
c00062c8:	85 ff                	test   edi,edi
c00062ca:	0f 8e 76 ff ff ff    	jle    c0006246 <find_object+0x6e>
c00062d0:	83 ec 08             	sub    esp,0x8
c00062d3:	6a 2f                	push   0x2f
c00062d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00062d9:	57                   	push   edi
c00062da:	e8 71 a4 ff ff       	call   c0000750 <strchr>
c00062df:	83 c4 10             	add    esp,0x10
c00062e2:	85 c0                	test   eax,eax
c00062e4:	0f 84 98 00 00 00    	je     c0006382 <find_object+0x1aa>
c00062ea:	29 f8                	sub    eax,edi
c00062ec:	83 ec 04             	sub    esp,0x4
c00062ef:	50                   	push   eax
c00062f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062f4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062f8:	50                   	push   eax
c00062f9:	e8 47 fe ff ff       	call   c0006145 <strnicmp>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	85 c0                	test   eax,eax
c0006303:	75 0b                	jne    c0006310 <find_object+0x138>
c0006305:	31 c0                	xor    eax,eax
c0006307:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000630a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000630e:	74 65                	je     c0006375 <find_object+0x19d>
c0006310:	31 c0                	xor    eax,eax
c0006312:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006315:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006319:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000631d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006323:	7f 71                	jg     c0006396 <find_object+0x1be>
c0006325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006329:	39 c1                	cmp    ecx,eax
c000632b:	7d 69                	jge    c0006396 <find_object+0x1be>
c000632d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006331:	8b 04 85 60 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe04a0]
c0006338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000633c:	8d 6c 10 04          	lea    ebp,[eax+edx*1+0x4]
c0006340:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006343:	84 c0                	test   al,al
c0006345:	74 4f                	je     c0006396 <find_object+0x1be>
c0006347:	8b 3d 94 09 02 c0    	mov    edi,DWORD PTR ds:0xc0020994
c000634d:	85 ff                	test   edi,edi
c000634f:	0f 84 c8 fe ff ff    	je     c000621d <find_object+0x45>
c0006355:	31 c9                	xor    ecx,ecx
c0006357:	8a 4d 20             	mov    cl,BYTE PTR [ebp+0x20]
c000635a:	8d 45 21             	lea    eax,[ebp+0x21]
c000635d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006361:	e8 86 fb ff ff       	call   c0005eec <ucscompare>
c0006366:	85 c0                	test   eax,eax
c0006368:	75 a6                	jne    c0006310 <find_object+0x138>
c000636a:	31 c0                	xor    eax,eax
c000636c:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000636f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0006373:	75 9b                	jne    c0006310 <find_object+0x138>
c0006375:	89 e8                	mov    eax,ebp
c0006377:	81 c4 2c 01 00 00    	add    esp,0x12c
c000637d:	5b                   	pop    ebx
c000637e:	5e                   	pop    esi
c000637f:	5f                   	pop    edi
c0006380:	5d                   	pop    ebp
c0006381:	c3                   	ret    
c0006382:	83 ec 0c             	sub    esp,0xc
c0006385:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006389:	e8 d2 a1 ff ff       	call   c0000560 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	e9 56 ff ff ff       	jmp    c00062ec <find_object+0x114>
c0006396:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000639a:	81 ac 24 40 01 00 00 00 08 00 00 	sub    DWORD PTR [esp+0x140],0x800
c00063a5:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00063ad:	7e 3e                	jle    c00063ed <find_object+0x215>
c00063af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063b3:	e8 67 fd ff ff       	call   c000611f <biread>
c00063b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063bc:	85 c0                	test   eax,eax
c00063be:	78 3e                	js     c00063fe <find_object+0x226>
c00063c0:	8b 94 24 40 01 00 00 	mov    edx,DWORD PTR [esp+0x140]
c00063c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00063cb:	85 d2                	test   edx,edx
c00063cd:	7e c7                	jle    c0006396 <find_object+0x1be>
c00063cf:	8b 04 85 60 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe04a0]
c00063d6:	8d 68 04             	lea    ebp,[eax+0x4]
c00063d9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00063dc:	84 c0                	test   al,al
c00063de:	74 b6                	je     c0006396 <find_object+0x1be>
c00063e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063e8:	e9 5a ff ff ff       	jmp    c0006347 <find_object+0x16f>
c00063ed:	bd 00 00 00 00       	mov    ebp,0x0
c00063f2:	eb 81                	jmp    c0006375 <find_object+0x19d>
c00063f4:	bd 00 00 00 00       	mov    ebp,0x0
c00063f9:	e9 77 ff ff ff       	jmp    c0006375 <find_object+0x19d>
c00063fe:	bd 00 00 00 00       	mov    ebp,0x0
c0006403:	e9 6d ff ff ff       	jmp    c0006375 <find_object+0x19d>

c0006408 <find_object_path>:
c0006408:	55                   	push   ebp
c0006409:	57                   	push   edi
c000640a:	56                   	push   esi
c000640b:	53                   	push   ebx
c000640c:	83 ec 1c             	sub    esp,0x1c
c000640f:	89 c6                	mov    esi,eax
c0006411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006415:	89 cf                	mov    edi,ecx
c0006417:	eb 03                	jmp    c000641c <find_object_path+0x14>
c0006419:	8d 73 01             	lea    esi,[ebx+0x1]
c000641c:	83 ec 08             	sub    esp,0x8
c000641f:	6a 2f                	push   0x2f
c0006421:	56                   	push   esi
c0006422:	e8 29 a3 ff ff       	call   c0000750 <strchr>
c0006427:	89 c3                	mov    ebx,eax
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	74 33                	je     c0006463 <find_object_path+0x5b>
c0006430:	39 de                	cmp    esi,ebx
c0006432:	74 e5                	je     c0006419 <find_object_path+0x11>
c0006434:	8d 47 0a             	lea    eax,[edi+0xa]
c0006437:	e8 42 fa ff ff       	call   c0005e7e <iso_733>
c000643c:	89 c5                	mov    ebp,eax
c000643e:	8d 47 02             	lea    eax,[edi+0x2]
c0006441:	e8 38 fa ff ff       	call   c0005e7e <iso_733>
c0006446:	83 ec 0c             	sub    esp,0xc
c0006449:	55                   	push   ebp
c000644a:	89 c1                	mov    ecx,eax
c000644c:	ba 01 00 00 00       	mov    edx,0x1
c0006451:	89 f0                	mov    eax,esi
c0006453:	e8 80 fd ff ff       	call   c00061d8 <find_object>
c0006458:	89 c7                	mov    edi,eax
c000645a:	83 c4 10             	add    esp,0x10
c000645d:	85 c0                	test   eax,eax
c000645f:	75 b8                	jne    c0006419 <find_object_path+0x11>
c0006461:	eb 0e                	jmp    c0006471 <find_object_path+0x69>
c0006463:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006466:	75 11                	jne    c0006479 <find_object_path+0x71>
c0006468:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000646d:	74 32                	je     c00064a1 <find_object_path+0x99>
c000646f:	89 f8                	mov    eax,edi
c0006471:	83 c4 1c             	add    esp,0x1c
c0006474:	5b                   	pop    ebx
c0006475:	5e                   	pop    esi
c0006476:	5f                   	pop    edi
c0006477:	5d                   	pop    ebp
c0006478:	c3                   	ret    
c0006479:	8d 47 0a             	lea    eax,[edi+0xa]
c000647c:	e8 fd f9 ff ff       	call   c0005e7e <iso_733>
c0006481:	89 c3                	mov    ebx,eax
c0006483:	8d 47 02             	lea    eax,[edi+0x2]
c0006486:	e8 f3 f9 ff ff       	call   c0005e7e <iso_733>
c000648b:	83 ec 0c             	sub    esp,0xc
c000648e:	53                   	push   ebx
c000648f:	89 c1                	mov    ecx,eax
c0006491:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006495:	89 f0                	mov    eax,esi
c0006497:	e8 3c fd ff ff       	call   c00061d8 <find_object>
c000649c:	83 c4 10             	add    esp,0x10
c000649f:	eb d0                	jmp    c0006471 <find_object_path+0x69>
c00064a1:	b8 00 00 00 00       	mov    eax,0x0
c00064a6:	eb c9                	jmp    c0006471 <find_object_path+0x69>

c00064a8 <stricmp>:
c00064a8:	55                   	push   ebp
c00064a9:	57                   	push   edi
c00064aa:	56                   	push   esi
c00064ab:	53                   	push   ebx
c00064ac:	83 ec 0c             	sub    esp,0xc
c00064af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00064b3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00064b7:	46                   	inc    esi
c00064b8:	47                   	inc    edi
c00064b9:	0f b6 6f ff          	movzx  ebp,BYTE PTR [edi-0x1]
c00064bd:	81 e5 ff 00 00 00    	and    ebp,0xff
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	31 c0                	xor    eax,eax
c00064c8:	8a 46 ff             	mov    al,BYTE PTR [esi-0x1]
c00064cb:	50                   	push   eax
c00064cc:	e8 ff a3 ff ff       	call   c00008d0 <toupper>
c00064d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064d4:	e8 17 a4 ff ff       	call   c00008f0 <tolower>
c00064d9:	89 c3                	mov    ebx,eax
c00064db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00064de:	e8 ed a3 ff ff       	call   c00008d0 <toupper>
c00064e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e6:	e8 05 a4 ff ff       	call   c00008f0 <tolower>
c00064eb:	83 c4 10             	add    esp,0x10
c00064ee:	39 c3                	cmp    ebx,eax
c00064f0:	75 04                	jne    c00064f6 <stricmp+0x4e>
c00064f2:	85 db                	test   ebx,ebx
c00064f4:	75 c1                	jne    c00064b7 <stricmp+0xf>
c00064f6:	29 c3                	sub    ebx,eax
c00064f8:	89 d8                	mov    eax,ebx
c00064fa:	83 c4 0c             	add    esp,0xc
c00064fd:	5b                   	pop    ebx
c00064fe:	5e                   	pop    esi
c00064ff:	5f                   	pop    edi
c0006500:	5d                   	pop    ebp
c0006501:	c3                   	ret    

c0006502 <iso_open>:
c0006502:	55                   	push   ebp
c0006503:	57                   	push   edi
c0006504:	56                   	push   esi
c0006505:	53                   	push   ebx
c0006506:	83 ec 0c             	sub    esp,0xc
c0006509:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000650e:	0f 95 c0             	setne  al
c0006511:	25 ff 00 00 00       	and    eax,0xff
c0006516:	89 c7                	mov    edi,eax
c0006518:	b9 60 09 02 c0       	mov    ecx,0xc0020960
c000651d:	89 c2                	mov    edx,eax
c000651f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006523:	e8 e0 fe ff ff       	call   c0006408 <find_object_path>
c0006528:	85 c0                	test   eax,eax
c000652a:	0f 84 93 00 00 00    	je     c00065c3 <iso_open+0xc1>
c0006530:	89 c6                	mov    esi,eax
c0006532:	83 3d 20 00 02 c0 00 	cmp    DWORD PTR ds:0xc0020020,0x0
c0006539:	0f 84 92 00 00 00    	je     c00065d1 <iso_open+0xcf>
c000653f:	ba b4 00 02 c0       	mov    edx,0xc00200b4
c0006544:	bb 01 00 00 00       	mov    ebx,0x1
c0006549:	83 3a 00             	cmp    DWORD PTR [edx],0x0
c000654c:	74 13                	je     c0006561 <iso_open+0x5f>
c000654e:	43                   	inc    ebx
c000654f:	81 c2 94 00 00 00    	add    edx,0x94
c0006555:	83 fb 10             	cmp    ebx,0x10
c0006558:	75 ef                	jne    c0006549 <iso_open+0x47>
c000655a:	bb ff ff ff ff       	mov    ebx,0xffffffff
c000655f:	eb 58                	jmp    c00065b9 <iso_open+0xb7>
c0006561:	8d 04 db             	lea    eax,[ebx+ebx*8]
c0006564:	8d 04 83             	lea    eax,[ebx+eax*4]
c0006567:	c7 04 85 20 00 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdffe0],0xffffffff
c0006572:	83 fb 0f             	cmp    ebx,0xf
c0006575:	7f 53                	jg     c00065ca <iso_open+0xc8>
c0006577:	8d 46 02             	lea    eax,[esi+0x2]
c000657a:	e8 ff f8 ff ff       	call   c0005e7e <iso_733>
c000657f:	8d 14 db             	lea    edx,[ebx+ebx*8]
c0006582:	8d 14 93             	lea    edx,[ebx+edx*4]
c0006585:	c1 e2 02             	shl    edx,0x2
c0006588:	8d aa 20 00 02 c0    	lea    ebp,[edx-0x3ffdffe0]
c000658e:	89 82 20 00 02 c0    	mov    DWORD PTR [edx-0x3ffdffe0],eax
c0006594:	89 ba 24 00 02 c0    	mov    DWORD PTR [edx-0x3ffdffdc],edi
c000659a:	c7 82 28 00 02 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffdffd8],0x0
c00065a4:	8d 46 0a             	lea    eax,[esi+0xa]
c00065a7:	e8 d2 f8 ff ff       	call   c0005e7e <iso_733>
c00065ac:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00065af:	c7 85 90 00 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x90],0x0
c00065b9:	89 d8                	mov    eax,ebx
c00065bb:	83 c4 0c             	add    esp,0xc
c00065be:	5b                   	pop    ebx
c00065bf:	5e                   	pop    esi
c00065c0:	5f                   	pop    edi
c00065c1:	5d                   	pop    ebp
c00065c2:	c3                   	ret    
c00065c3:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065c8:	eb ef                	jmp    c00065b9 <iso_open+0xb7>
c00065ca:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065cf:	eb e8                	jmp    c00065b9 <iso_open+0xb7>
c00065d1:	c7 05 20 00 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0020020,0xffffffff
c00065db:	bb 00 00 00 00       	mov    ebx,0x0
c00065e0:	eb 95                	jmp    c0006577 <iso_open+0x75>

c00065e2 <iso_close>:
c00065e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065e6:	83 f8 0f             	cmp    eax,0xf
c00065e9:	7f 11                	jg     c00065fc <iso_close+0x1a>
c00065eb:	8d 14 c0             	lea    edx,[eax+eax*8]
c00065ee:	8d 04 90             	lea    eax,[eax+edx*4]
c00065f1:	c7 04 85 20 00 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffdffe0],0x0
c00065fc:	e8 83 f8 ff ff       	call   c0005e84 <bclear_cache>
c0006601:	c3                   	ret    

c0006602 <iso_read>:
c0006602:	55                   	push   ebp
c0006603:	57                   	push   edi
c0006604:	56                   	push   esi
c0006605:	53                   	push   ebx
c0006606:	83 ec 1c             	sub    esp,0x1c
c0006609:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000660d:	83 fd 0f             	cmp    ebp,0xf
c0006610:	0f 8f ba 01 00 00    	jg     c00067d0 <iso_read+0x1ce>
c0006616:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c000661a:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000661e:	83 3c 85 20 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffe0],0x0
c0006626:	0f 84 b0 01 00 00    	je     c00067dc <iso_read+0x1da>
c000662c:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006630:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006634:	8b 04 85 b0 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff50]
c000663b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000663f:	85 c0                	test   eax,eax
c0006641:	0f 85 a1 01 00 00    	jne    c00067e8 <iso_read+0x1e6>
c0006647:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000664c:	0f 84 71 01 00 00    	je     c00067c3 <iso_read+0x1c1>
c0006652:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006656:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000665a:	8d 14 85 20 00 02 c0 	lea    edx,[eax*4-0x3ffdffe0]
c0006661:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0006664:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0006667:	29 c2                	sub    edx,eax
c0006669:	89 d1                	mov    ecx,edx
c000666b:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000666f:	76 04                	jbe    c0006675 <iso_read+0x73>
c0006671:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006675:	85 c9                	test   ecx,ecx
c0006677:	0f 84 42 01 00 00    	je     c00067bf <iso_read+0x1bd>
c000667d:	8d 1c ed 00 00 00 00 	lea    ebx,[ebp*8+0x0]
c0006684:	e9 b7 00 00 00       	jmp    c0006740 <iso_read+0x13e>
c0006689:	8d 91 ff 07 00 00    	lea    edx,[ecx+0x7ff]
c000668f:	e9 e9 00 00 00       	jmp    c000677d <iso_read+0x17b>
c0006694:	ba 20 00 00 00       	mov    edx,0x20
c0006699:	e9 e2 00 00 00       	jmp    c0006780 <iso_read+0x17e>
c000669e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00066a2:	39 ca                	cmp    edx,ecx
c00066a4:	7e 04                	jle    c00066aa <iso_read+0xa8>
c00066a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00066aa:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c00066ad:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c00066b1:	c1 e8 0b             	shr    eax,0xb
c00066b4:	03 04 95 20 00 02 c0 	add    eax,DWORD PTR [edx*4-0x3ffdffe0]
c00066bb:	e8 72 fa ff ff       	call   c0006132 <bdread>
c00066c0:	85 c0                	test   eax,eax
c00066c2:	0f 88 2c 01 00 00    	js     c00067f4 <iso_read+0x1f2>
c00066c8:	8b 14 85 00 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0500]
c00066cf:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066d2:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066d6:	8b 04 85 28 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffd8]
c00066dd:	25 ff 07 00 00       	and    eax,0x7ff
c00066e2:	8d 74 02 04          	lea    esi,[edx+eax*1+0x4]
c00066e6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00066ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066f0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00066f4:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c00066f8:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066fb:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066ff:	8d 14 85 20 00 02 c0 	lea    edx,[eax*4-0x3ffdffe0]
c0006706:	89 f8                	mov    eax,edi
c0006708:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
c000670b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000670e:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0006712:	29 7c 24 38          	sub    DWORD PTR [esp+0x38],edi
c0006716:	0f 84 a7 00 00 00    	je     c00067c3 <iso_read+0x1c1>
c000671c:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000671f:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006723:	8b 14 95 2c 00 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdffd4]
c000672a:	29 c2                	sub    edx,eax
c000672c:	89 d1                	mov    ecx,edx
c000672e:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c0006732:	76 04                	jbe    c0006738 <iso_read+0x136>
c0006734:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006738:	85 c9                	test   ecx,ecx
c000673a:	0f 84 83 00 00 00    	je     c00067c3 <iso_read+0x1c1>
c0006740:	89 c6                	mov    esi,eax
c0006742:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006748:	ba 00 08 00 00       	mov    edx,0x800
c000674d:	29 f2                	sub    edx,esi
c000674f:	81 fa 00 08 00 00    	cmp    edx,0x800
c0006755:	0f 85 43 ff ff ff    	jne    c000669e <iso_read+0x9c>
c000675b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006761:	0f 8e 37 ff ff ff    	jle    c000669e <iso_read+0x9c>
c0006767:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000676d:	0f 8f 21 ff ff ff    	jg     c0006694 <iso_read+0x92>
c0006773:	89 ca                	mov    edx,ecx
c0006775:	85 c9                	test   ecx,ecx
c0006777:	0f 88 0c ff ff ff    	js     c0006689 <iso_read+0x87>
c000677d:	c1 fa 0b             	sar    edx,0xb
c0006780:	89 d6                	mov    esi,edx
c0006782:	c1 e6 0b             	shl    esi,0xb
c0006785:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006789:	83 ec 04             	sub    esp,0x4
c000678c:	52                   	push   edx
c000678d:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c0006790:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006794:	c1 e8 0b             	shr    eax,0xb
c0006797:	03 04 95 20 00 02 c0 	add    eax,DWORD PTR [edx*4-0x3ffdffe0]
c000679e:	50                   	push   eax
c000679f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00067a3:	e8 bc f8 ff ff       	call   c0006064 <isoReadDiscSector>
c00067a8:	83 c4 10             	add    esp,0x10
c00067ab:	85 c0                	test   eax,eax
c00067ad:	0f 8f 3d ff ff ff    	jg     c00066f0 <iso_read+0xee>
c00067b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067bd:	eb 09                	jmp    c00067c8 <iso_read+0x1c6>
c00067bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00067c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00067c7:	99                   	cdq    
c00067c8:	83 c4 1c             	add    esp,0x1c
c00067cb:	5b                   	pop    ebx
c00067cc:	5e                   	pop    esi
c00067cd:	5f                   	pop    edi
c00067ce:	5d                   	pop    ebp
c00067cf:	c3                   	ret    
c00067d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067da:	eb ec                	jmp    c00067c8 <iso_read+0x1c6>
c00067dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067e6:	eb e0                	jmp    c00067c8 <iso_read+0x1c6>
c00067e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067f2:	eb d4                	jmp    c00067c8 <iso_read+0x1c6>
c00067f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067fe:	eb c8                	jmp    c00067c8 <iso_read+0x1c6>

c0006800 <iso_seek>:
c0006800:	53                   	push   ebx
c0006801:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006805:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006809:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000680d:	83 f8 0f             	cmp    eax,0xf
c0006810:	0f 8f a4 00 00 00    	jg     c00068ba <iso_seek+0xba>
c0006816:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006819:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000681c:	83 3c 9d 20 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdffe0],0x0
c0006824:	0f 84 9c 00 00 00    	je     c00068c6 <iso_seek+0xc6>
c000682a:	8d 1c c0             	lea    ebx,[eax+eax*8]
c000682d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0006830:	83 3c 9d b0 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdff50],0x0
c0006838:	0f 85 94 00 00 00    	jne    c00068d2 <iso_seek+0xd2>
c000683e:	83 fa 01             	cmp    edx,0x1
c0006841:	74 53                	je     c0006896 <iso_seek+0x96>
c0006843:	83 fa 02             	cmp    edx,0x2
c0006846:	74 5d                	je     c00068a5 <iso_seek+0xa5>
c0006848:	85 d2                	test   edx,edx
c000684a:	74 0c                	je     c0006858 <iso_seek+0x58>
c000684c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006851:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006856:	eb 3c                	jmp    c0006894 <iso_seek+0x94>
c0006858:	89 0c 9d 28 00 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdffd8],ecx
c000685f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006862:	8d 14 90             	lea    edx,[eax+edx*4]
c0006865:	8b 0c 95 2c 00 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdffd4]
c000686c:	39 0c 95 28 00 02 c0 	cmp    DWORD PTR [edx*4-0x3ffdffd8],ecx
c0006873:	76 0d                	jbe    c0006882 <iso_seek+0x82>
c0006875:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006878:	8d 14 90             	lea    edx,[eax+edx*4]
c000687b:	89 0c 95 28 00 02 c0 	mov    DWORD PTR [edx*4-0x3ffdffd8],ecx
c0006882:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006885:	8d 04 90             	lea    eax,[eax+edx*4]
c0006888:	8b 04 85 28 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffd8]
c000688f:	ba 00 00 00 00       	mov    edx,0x0
c0006894:	5b                   	pop    ebx
c0006895:	c3                   	ret    
c0006896:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006899:	8d 14 90             	lea    edx,[eax+edx*4]
c000689c:	01 0c 95 28 00 02 c0 	add    DWORD PTR [edx*4-0x3ffdffd8],ecx
c00068a3:	eb ba                	jmp    c000685f <iso_seek+0x5f>
c00068a5:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068a8:	8d 14 90             	lea    edx,[eax+edx*4]
c00068ab:	8d 14 95 20 00 02 c0 	lea    edx,[edx*4-0x3ffdffe0]
c00068b2:	03 4a 0c             	add    ecx,DWORD PTR [edx+0xc]
c00068b5:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068b8:	eb a5                	jmp    c000685f <iso_seek+0x5f>
c00068ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068c4:	eb ce                	jmp    c0006894 <iso_seek+0x94>
c00068c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068d0:	eb c2                	jmp    c0006894 <iso_seek+0x94>
c00068d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068dc:	eb b6                	jmp    c0006894 <iso_seek+0x94>

c00068de <iso_tell>:
c00068de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068e2:	83 f8 0f             	cmp    eax,0xf
c00068e5:	7f 33                	jg     c000691a <iso_tell+0x3c>
c00068e7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068ea:	8d 14 90             	lea    edx,[eax+edx*4]
c00068ed:	83 3c 95 20 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffe0],0x0
c00068f5:	74 2e                	je     c0006925 <iso_tell+0x47>
c00068f7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068fa:	8d 14 90             	lea    edx,[eax+edx*4]
c00068fd:	83 3c 95 b0 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdff50],0x0
c0006905:	75 29                	jne    c0006930 <iso_tell+0x52>
c0006907:	8d 14 c0             	lea    edx,[eax+eax*8]
c000690a:	8d 04 90             	lea    eax,[eax+edx*4]
c000690d:	8b 04 85 28 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffd8]
c0006914:	ba 00 00 00 00       	mov    edx,0x0
c0006919:	c3                   	ret    
c000691a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000691f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006924:	c3                   	ret    
c0006925:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000692a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000692f:	c3                   	ret    
c0006930:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006935:	ba ff ff ff ff       	mov    edx,0xffffffff
c000693a:	c3                   	ret    

c000693b <iso_total>:
c000693b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000693f:	83 f8 0f             	cmp    eax,0xf
c0006942:	7f 2e                	jg     c0006972 <iso_total+0x37>
c0006944:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006947:	8d 14 90             	lea    edx,[eax+edx*4]
c000694a:	83 3c 95 20 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffe0],0x0
c0006952:	74 24                	je     c0006978 <iso_total+0x3d>
c0006954:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006957:	8d 14 90             	lea    edx,[eax+edx*4]
c000695a:	83 3c 95 b0 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdff50],0x0
c0006962:	75 1a                	jne    c000697e <iso_total+0x43>
c0006964:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006967:	8d 04 90             	lea    eax,[eax+edx*4]
c000696a:	8b 04 85 2c 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffd4]
c0006971:	c3                   	ret    
c0006972:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006977:	c3                   	ret    
c0006978:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000697d:	c3                   	ret    
c000697e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006983:	c3                   	ret    

c0006984 <fn_postprocess>:
c0006984:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006988:	8a 01                	mov    al,BYTE PTR [ecx]
c000698a:	84 c0                	test   al,al
c000698c:	74 25                	je     c00069b3 <fn_postprocess+0x2f>
c000698e:	3c 3b                	cmp    al,0x3b
c0006990:	74 21                	je     c00069b3 <fn_postprocess+0x2f>
c0006992:	89 c8                	mov    eax,ecx
c0006994:	40                   	inc    eax
c0006995:	8a 10                	mov    dl,BYTE PTR [eax]
c0006997:	84 d2                	test   dl,dl
c0006999:	74 05                	je     c00069a0 <fn_postprocess+0x1c>
c000699b:	80 fa 3b             	cmp    dl,0x3b
c000699e:	75 f4                	jne    c0006994 <fn_postprocess+0x10>
c00069a0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069a3:	39 c1                	cmp    ecx,eax
c00069a5:	73 06                	jae    c00069ad <fn_postprocess+0x29>
c00069a7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069ab:	74 01                	je     c00069ae <fn_postprocess+0x2a>
c00069ad:	c3                   	ret    
c00069ae:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b2:	c3                   	ret    
c00069b3:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00069b6:	eb f5                	jmp    c00069ad <fn_postprocess+0x29>

c00069b8 <iso_readdir>:
c00069b8:	55                   	push   ebp
c00069b9:	57                   	push   edi
c00069ba:	56                   	push   esi
c00069bb:	53                   	push   ebx
c00069bc:	83 ec 1c             	sub    esp,0x1c
c00069bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00069c3:	83 fe 0f             	cmp    esi,0xf
c00069c6:	0f 8f 7a 02 00 00    	jg     c0006c46 <iso_readdir+0x28e>
c00069cc:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069cf:	8d 04 86             	lea    eax,[esi+eax*4]
c00069d2:	83 3c 85 20 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffe0],0x0
c00069da:	0f 84 70 02 00 00    	je     c0006c50 <iso_readdir+0x298>
c00069e0:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069e3:	8d 04 86             	lea    eax,[esi+eax*4]
c00069e6:	83 3c 85 24 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffdc],0x0
c00069ee:	0f 84 66 02 00 00    	je     c0006c5a <iso_readdir+0x2a2>
c00069f4:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069f7:	8d 04 86             	lea    eax,[esi+eax*4]
c00069fa:	83 3c 85 b0 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdff50],0x0
c0006a02:	0f 85 5c 02 00 00    	jne    c0006c64 <iso_readdir+0x2ac>
c0006a08:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006a0b:	8d 14 86             	lea    edx,[esi+eax*4]
c0006a0e:	8b 04 95 28 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdffd8]
c0006a15:	8b 0c 95 2c 00 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdffd4]
c0006a1c:	39 c8                	cmp    eax,ecx
c0006a1e:	73 57                	jae    c0006a77 <iso_readdir+0xbf>
c0006a20:	8d 14 f6             	lea    edx,[esi+esi*8]
c0006a23:	8d 3c 96             	lea    edi,[esi+edx*4]
c0006a26:	c1 e7 02             	shl    edi,0x2
c0006a29:	c1 e8 0b             	shr    eax,0xb
c0006a2c:	03 87 20 00 02 c0    	add    eax,DWORD PTR [edi-0x3ffdffe0]
c0006a32:	e8 e8 f6 ff ff       	call   c000611f <biread>
c0006a37:	85 c0                	test   eax,eax
c0006a39:	0f 88 2f 02 00 00    	js     c0006c6e <iso_readdir+0x2b6>
c0006a3f:	8b 14 85 60 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04a0]
c0006a46:	83 c2 04             	add    edx,0x4
c0006a49:	8b 87 28 00 02 c0    	mov    eax,DWORD PTR [edi-0x3ffdffd8]
c0006a4f:	89 c3                	mov    ebx,eax
c0006a51:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0006a57:	01 d3                	add    ebx,edx
c0006a59:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006a5b:	84 c9                	test   cl,cl
c0006a5d:	75 22                	jne    c0006a81 <iso_readdir+0xc9>
c0006a5f:	25 00 f8 ff ff       	and    eax,0xfffff800
c0006a64:	05 00 08 00 00       	add    eax,0x800
c0006a69:	89 87 28 00 02 c0    	mov    DWORD PTR [edi-0x3ffdffd8],eax
c0006a6f:	3b 87 2c 00 02 c0    	cmp    eax,DWORD PTR [edi-0x3ffdffd4]
c0006a75:	72 b2                	jb     c0006a29 <iso_readdir+0x71>
c0006a77:	b8 00 00 00 00       	mov    eax,0x0
c0006a7c:	e9 83 00 00 00       	jmp    c0006b04 <iso_readdir+0x14c>
c0006a81:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006a84:	8d 3c be             	lea    edi,[esi+edi*4]
c0006a87:	3b 04 bd 2c 00 02 c0 	cmp    eax,DWORD PTR [edi*4-0x3ffdffd4]
c0006a8e:	0f 83 e4 01 00 00    	jae    c0006c78 <iso_readdir+0x2c0>
c0006a94:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006a98:	75 06                	jne    c0006aa0 <iso_readdir+0xe8>
c0006a9a:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006a9e:	74 6c                	je     c0006b0c <iso_readdir+0x154>
c0006aa0:	83 3d 94 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020994,0x0
c0006aa7:	0f 84 9d 00 00 00    	je     c0006b4a <iso_readdir+0x192>
c0006aad:	31 c9                	xor    ecx,ecx
c0006aaf:	8a 4b 20             	mov    cl,BYTE PTR [ebx+0x20]
c0006ab2:	8d 53 21             	lea    edx,[ebx+0x21]
c0006ab5:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006ab8:	8d 04 86             	lea    eax,[esi+eax*4]
c0006abb:	8d 04 85 38 00 02 c0 	lea    eax,[eax*4-0x3ffdffc8]
c0006ac2:	e8 c0 f2 ff ff       	call   c0005d87 <ucs2utfn>
c0006ac7:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006acb:	0f 85 66 01 00 00    	jne    c0006c37 <iso_readdir+0x27f>
c0006ad1:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006ad4:	e8 a5 f3 ff ff       	call   c0005e7e <iso_733>
c0006ad9:	ba 00 00 00 00       	mov    edx,0x0
c0006ade:	8d 0c f6             	lea    ecx,[esi+esi*8]
c0006ae1:	c1 e1 02             	shl    ecx,0x2
c0006ae4:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0006ae7:	8d 3c bd 20 00 02 c0 	lea    edi,[edi*4-0x3ffdffe0]
c0006aee:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0006af1:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0006af4:	31 c0                	xor    eax,eax
c0006af6:	8a 03                	mov    al,BYTE PTR [ebx]
c0006af8:	01 47 08             	add    DWORD PTR [edi+0x8],eax
c0006afb:	01 ce                	add    esi,ecx
c0006afd:	8d 04 b5 30 00 02 c0 	lea    eax,[esi*4-0x3ffdffd0]
c0006b04:	83 c4 1c             	add    esp,0x1c
c0006b07:	5b                   	pop    ebx
c0006b08:	5e                   	pop    esi
c0006b09:	5f                   	pop    edi
c0006b0a:	5d                   	pop    ebp
c0006b0b:	c3                   	ret    
c0006b0c:	81 e1 ff 00 00 00    	and    ecx,0xff
c0006b12:	01 c8                	add    eax,ecx
c0006b14:	8d 3c bd 20 00 02 c0 	lea    edi,[edi*4-0x3ffdffe0]
c0006b1b:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b1e:	89 c1                	mov    ecx,eax
c0006b20:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006b26:	31 db                	xor    ebx,ebx
c0006b28:	8a 1c 0a             	mov    bl,BYTE PTR [edx+ecx*1]
c0006b2b:	89 d9                	mov    ecx,ebx
c0006b2d:	01 c8                	add    eax,ecx
c0006b2f:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b32:	25 ff 07 00 00       	and    eax,0x7ff
c0006b37:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0006b3a:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006b3d:	0f 85 5d ff ff ff    	jne    c0006aa0 <iso_readdir+0xe8>
c0006b43:	b8 00 00 00 00       	mov    eax,0x0
c0006b48:	eb ba                	jmp    c0006b04 <iso_readdir+0x14c>
c0006b4a:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006b4d:	c1 e7 02             	shl    edi,0x2
c0006b50:	8d 04 37             	lea    eax,[edi+esi*1]
c0006b53:	8d 2c 85 38 00 02 c0 	lea    ebp,[eax*4-0x3ffdffc8]
c0006b5a:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0006b5e:	83 ec 04             	sub    esp,0x4
c0006b61:	31 c0                	xor    eax,eax
c0006b63:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b66:	50                   	push   eax
c0006b67:	8d 43 21             	lea    eax,[ebx+0x21]
c0006b6a:	50                   	push   eax
c0006b6b:	55                   	push   ebp
c0006b6c:	e8 df 9a ff ff       	call   c0000650 <strncpy>
c0006b71:	31 c0                	xor    eax,eax
c0006b73:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b76:	01 f7                	add    edi,esi
c0006b78:	c6 84 b8 38 00 02 c0 00 	mov    BYTE PTR [eax+edi*4-0x3ffdffc8],0x0
c0006b80:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b83:	e8 fc fd ff ff       	call   c0006984 <fn_postprocess>
c0006b88:	31 c0                	xor    eax,eax
c0006b8a:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b8d:	0f b6 2b             	movzx  ebp,BYTE PTR [ebx]
c0006b90:	81 e5 ff 00 00 00    	and    ebp,0xff
c0006b96:	29 c5                	sub    ebp,eax
c0006b98:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006b9c:	83 c4 10             	add    esp,0x10
c0006b9f:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006ba3:	74 25                	je     c0006bca <iso_readdir+0x212>
c0006ba5:	83 ed 21             	sub    ebp,0x21
c0006ba8:	83 fd 03             	cmp    ebp,0x3
c0006bab:	0f 8e 16 ff ff ff    	jle    c0006ac7 <iso_readdir+0x10f>
c0006bb1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006bb4:	48                   	dec    eax
c0006bb5:	3c 01                	cmp    al,0x1
c0006bb7:	0f 87 0a ff ff ff    	ja     c0006ac7 <iso_readdir+0x10f>
c0006bbd:	8d 04 f5 00 00 00 00 	lea    eax,[esi*8+0x0]
c0006bc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bc8:	eb 23                	jmp    c0006bed <iso_readdir+0x235>
c0006bca:	47                   	inc    edi
c0006bcb:	83 ed 22             	sub    ebp,0x22
c0006bce:	eb d8                	jmp    c0006ba8 <iso_readdir+0x1f0>
c0006bd0:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bd4:	29 c5                	sub    ebp,eax
c0006bd6:	01 c7                	add    edi,eax
c0006bd8:	83 fd 03             	cmp    ebp,0x3
c0006bdb:	0f 8e e6 fe ff ff    	jle    c0006ac7 <iso_readdir+0x10f>
c0006be1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006be4:	48                   	dec    eax
c0006be5:	3c 01                	cmp    al,0x1
c0006be7:	0f 87 da fe ff ff    	ja     c0006ac7 <iso_readdir+0x10f>
c0006bed:	83 ec 04             	sub    esp,0x4
c0006bf0:	6a 02                	push   0x2
c0006bf2:	68 60 d5 01 c0       	push   0xc001d560
c0006bf7:	57                   	push   edi
c0006bf8:	e8 83 9b ff ff       	call   c0000780 <strncmp>
c0006bfd:	83 c4 10             	add    esp,0x10
c0006c00:	85 c0                	test   eax,eax
c0006c02:	75 cc                	jne    c0006bd0 <iso_readdir+0x218>
c0006c04:	83 ec 04             	sub    esp,0x4
c0006c07:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c0b:	83 e8 05             	sub    eax,0x5
c0006c0e:	50                   	push   eax
c0006c0f:	8d 47 05             	lea    eax,[edi+0x5]
c0006c12:	50                   	push   eax
c0006c13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006c17:	e8 34 9a ff ff       	call   c0000650 <strncpy>
c0006c1c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006c24:	8d 14 31             	lea    edx,[ecx+esi*1]
c0006c27:	8d 14 96             	lea    edx,[esi+edx*4]
c0006c2a:	c6 84 90 33 00 02 c0 00 	mov    BYTE PTR [eax+edx*4-0x3ffdffcd],0x0
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	eb 99                	jmp    c0006bd0 <iso_readdir+0x218>
c0006c37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006c3c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006c41:	e9 98 fe ff ff       	jmp    c0006ade <iso_readdir+0x126>
c0006c46:	b8 00 00 00 00       	mov    eax,0x0
c0006c4b:	e9 b4 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c50:	b8 00 00 00 00       	mov    eax,0x0
c0006c55:	e9 aa fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c5a:	b8 00 00 00 00       	mov    eax,0x0
c0006c5f:	e9 a0 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c64:	b8 00 00 00 00       	mov    eax,0x0
c0006c69:	e9 96 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c6e:	b8 00 00 00 00       	mov    eax,0x0
c0006c73:	e9 8c fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c78:	b8 00 00 00 00       	mov    eax,0x0
c0006c7d:	e9 82 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>

c0006c82 <iso_reset>:
c0006c82:	e8 4b f2 ff ff       	call   c0005ed2 <iso_break_all>
c0006c87:	e8 40 f2 ff ff       	call   c0005ecc <bclear>
c0006c8c:	b8 00 00 00 00       	mov    eax,0x0
c0006c91:	c3                   	ret    

c0006c92 <init_percd>:
c0006c92:	57                   	push   edi
c0006c93:	56                   	push   esi
c0006c94:	53                   	push   ebx
c0006c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c99:	a2 40 fb 01 c0       	mov    ds:0xc001fb40,al
c0006c9e:	e8 df ff ff ff       	call   c0006c82 <iso_reset>
c0006ca3:	c7 05 94 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020994,0x0
c0006cad:	bb 01 00 00 00       	mov    ebx,0x1
c0006cb2:	eb 06                	jmp    c0006cba <init_percd+0x28>
c0006cb4:	43                   	inc    ebx
c0006cb5:	83 fb 04             	cmp    ebx,0x4
c0006cb8:	74 53                	je     c0006d0d <init_percd+0x7b>
c0006cba:	a1 8c 09 02 c0       	mov    eax,ds:0xc002098c
c0006cbf:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006cc3:	e8 57 f4 ff ff       	call   c000611f <biread>
c0006cc8:	89 c6                	mov    esi,eax
c0006cca:	85 c0                	test   eax,eax
c0006ccc:	0f 88 c1 00 00 00    	js     c0006d93 <init_percd+0x101>
c0006cd2:	83 ec 04             	sub    esp,0x4
c0006cd5:	6a 06                	push   0x6
c0006cd7:	68 63 d5 01 c0       	push   0xc001d563
c0006cdc:	8b 04 85 60 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe04a0]
c0006ce3:	83 c0 04             	add    eax,0x4
c0006ce6:	50                   	push   eax
c0006ce7:	e8 c4 96 ff ff       	call   c00003b0 <memcmp>
c0006cec:	83 c4 10             	add    esp,0x10
c0006cef:	85 c0                	test   eax,eax
c0006cf1:	75 c1                	jne    c0006cb4 <init_percd+0x22>
c0006cf3:	8b 04 b5 60 fb 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe04a0]
c0006cfa:	83 c0 5c             	add    eax,0x5c
c0006cfd:	e8 1e f1 ff ff       	call   c0005e20 <isjoliet>
c0006d02:	a3 94 09 02 c0       	mov    ds:0xc0020994,eax
c0006d07:	85 c0                	test   eax,eax
c0006d09:	74 a9                	je     c0006cb4 <init_percd+0x22>
c0006d0b:	eb 09                	jmp    c0006d16 <init_percd+0x84>
c0006d0d:	83 3d 94 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020994,0x0
c0006d14:	74 42                	je     c0006d58 <init_percd+0xc6>
c0006d16:	8b 34 b5 60 fb 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe04a0]
c0006d1d:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d23:	bf 60 09 02 c0       	mov    edi,0xc0020960
c0006d28:	b9 22 00 00 00       	mov    ecx,0x22
c0006d2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d2f:	b8 62 09 02 c0       	mov    eax,0xc0020962
c0006d34:	e8 45 f1 ff ff       	call   c0005e7e <iso_733>
c0006d39:	a3 88 09 02 c0       	mov    ds:0xc0020988,eax
c0006d3e:	b8 6a 09 02 c0       	mov    eax,0xc002096a
c0006d43:	e8 36 f1 ff ff       	call   c0005e7e <iso_733>
c0006d48:	a3 84 09 02 c0       	mov    ds:0xc0020984,eax
c0006d4d:	bb 00 00 00 00       	mov    ebx,0x0
c0006d52:	89 d8                	mov    eax,ebx
c0006d54:	5b                   	pop    ebx
c0006d55:	5e                   	pop    esi
c0006d56:	5f                   	pop    edi
c0006d57:	c3                   	ret    
c0006d58:	a1 8c 09 02 c0       	mov    eax,ds:0xc002098c
c0006d5d:	83 c0 10             	add    eax,0x10
c0006d60:	e8 ba f3 ff ff       	call   c000611f <biread>
c0006d65:	89 c6                	mov    esi,eax
c0006d67:	85 c0                	test   eax,eax
c0006d69:	78 e7                	js     c0006d52 <init_percd+0xc0>
c0006d6b:	83 ec 04             	sub    esp,0x4
c0006d6e:	6a 06                	push   0x6
c0006d70:	68 6a d5 01 c0       	push   0xc001d56a
c0006d75:	8b 04 85 60 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe04a0]
c0006d7c:	83 c0 04             	add    eax,0x4
c0006d7f:	50                   	push   eax
c0006d80:	e8 2b 96 ff ff       	call   c00003b0 <memcmp>
c0006d85:	83 c4 10             	add    esp,0x10
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 8a                	je     c0006d16 <init_percd+0x84>
c0006d8c:	bb ff ff ff ff       	mov    ebx,0xffffffff
c0006d91:	eb bf                	jmp    c0006d52 <init_percd+0xc0>
c0006d93:	89 c3                	mov    ebx,eax
c0006d95:	eb bb                	jmp    c0006d52 <init_percd+0xc0>

c0006d97 <iso_ioctl>:
c0006d97:	e8 e6 fe ff ff       	call   c0006c82 <iso_reset>
c0006d9c:	b8 00 00 00 00       	mov    eax,0x0
c0006da1:	c3                   	ret    

c0006da2 <fs_iso9660_init>:
c0006da2:	53                   	push   ebx
c0006da3:	83 ec 0c             	sub    esp,0xc
c0006da6:	68 40 09 00 00       	push   0x940
c0006dab:	6a 00                	push   0x0
c0006dad:	68 20 00 02 c0       	push   0xc0020020
c0006db2:	e8 39 97 ff ff       	call   c00004f0 <memset>
c0006db7:	c7 05 20 00 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0020020,0xffffffff
c0006dc1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dc8:	e8 90 10 00 00       	call   c0007e5d <malloc>
c0006dcd:	a3 90 09 02 c0       	mov    ds:0xc0020990,eax
c0006dd2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dd9:	e8 7f 10 00 00       	call   c0007e5d <malloc>
c0006dde:	a3 00 00 02 c0       	mov    ds:0xc0020000,eax
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	bb 00 00 00 00       	mov    ebx,0x0
c0006deb:	83 ec 0c             	sub    esp,0xc
c0006dee:	68 04 08 00 00       	push   0x804
c0006df3:	e8 65 10 00 00       	call   c0007e5d <malloc>
c0006df8:	89 04 9d 60 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe04a0],eax
c0006dff:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e05:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006e0c:	e8 4c 10 00 00       	call   c0007e5d <malloc>
c0006e11:	89 04 9d 00 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0500],eax
c0006e18:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e1e:	43                   	inc    ebx
c0006e1f:	83 c4 10             	add    esp,0x10
c0006e22:	83 fb 10             	cmp    ebx,0x10
c0006e25:	75 c4                	jne    c0006deb <fs_iso9660_init+0x49>
c0006e27:	b8 00 00 00 00       	mov    eax,0x0
c0006e2c:	83 c4 08             	add    esp,0x8
c0006e2f:	5b                   	pop    ebx
c0006e30:	c3                   	ret    

c0006e31 <fs_iso9660_shutdown>:
c0006e31:	53                   	push   ebx
c0006e32:	83 ec 08             	sub    esp,0x8
c0006e35:	bb 00 00 00 00       	mov    ebx,0x0
c0006e3a:	83 ec 0c             	sub    esp,0xc
c0006e3d:	ff 34 9d 60 fb 01 c0 	push   DWORD PTR [ebx*4-0x3ffe04a0]
c0006e44:	e8 24 10 00 00       	call   c0007e6d <free>
c0006e49:	83 c4 04             	add    esp,0x4
c0006e4c:	ff 34 9d 00 fb 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0500]
c0006e53:	e8 15 10 00 00       	call   c0007e6d <free>
c0006e58:	43                   	inc    ebx
c0006e59:	83 c4 10             	add    esp,0x10
c0006e5c:	83 fb 10             	cmp    ebx,0x10
c0006e5f:	75 d9                	jne    c0006e3a <fs_iso9660_shutdown+0x9>
c0006e61:	a1 90 09 02 c0       	mov    eax,ds:0xc0020990
c0006e66:	85 c0                	test   eax,eax
c0006e68:	74 0c                	je     c0006e76 <fs_iso9660_shutdown+0x45>
c0006e6a:	83 ec 0c             	sub    esp,0xc
c0006e6d:	50                   	push   eax
c0006e6e:	e8 fa 0f 00 00       	call   c0007e6d <free>
c0006e73:	83 c4 10             	add    esp,0x10
c0006e76:	a1 00 00 02 c0       	mov    eax,ds:0xc0020000
c0006e7b:	85 c0                	test   eax,eax
c0006e7d:	74 0c                	je     c0006e8b <fs_iso9660_shutdown+0x5a>
c0006e7f:	83 ec 0c             	sub    esp,0xc
c0006e82:	50                   	push   eax
c0006e83:	e8 e5 0f 00 00       	call   c0007e6d <free>
c0006e88:	83 c4 10             	add    esp,0x10
c0006e8b:	c7 05 00 00 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020000,0x0
c0006e95:	c7 05 90 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020990,0x0
c0006e9f:	b8 00 00 00 00       	mov    eax,0x0
c0006ea4:	83 c4 08             	add    esp,0x8
c0006ea7:	5b                   	pop    ebx
c0006ea8:	c3                   	ret    

c0006ea9 <CPU::current()>:
c0006ea9:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c0006eae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0006eb4:	c3                   	ret    

c0006eb5 <operator new(unsigned long)>:
c0006eb5:	e9 a3 0f 00 00       	jmp    c0007e5d <malloc>

c0006eba <operator delete(void*)>:
c0006eba:	e9 be 0f 00 00       	jmp    c0007e7d <rfree>

c0006ebf <disableIRQs()>:
c0006ebf:	fa                   	cli    
c0006ec0:	c3                   	ret    

c0006ec1 <enableIRQs()>:
c0006ec1:	fb                   	sti    
c0006ec2:	c3                   	ret    

c0006ec3 <lockScheduler()>:
c0006ec3:	fa                   	cli    
c0006ec4:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0006eca:	c3                   	ret    

c0006ecb <unlockScheduler()>:
c0006ecb:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0006ed0:	48                   	dec    eax
c0006ed1:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0006ed6:	75 01                	jne    c0006ed9 <unlockScheduler()+0xe>
c0006ed8:	fb                   	sti    
c0006ed9:	c3                   	ret    

c0006eda <lockStuff()>:
c0006eda:	fa                   	cli    
c0006edb:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0006ee1:	ff 05 44 3e 02 c0    	inc    DWORD PTR ds:0xc0023e44
c0006ee7:	c3                   	ret    

c0006ee8 <unlockStuff()>:
c0006ee8:	83 ec 0c             	sub    esp,0xc
c0006eeb:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c0006ef0:	48                   	dec    eax
c0006ef1:	a3 44 3e 02 c0       	mov    ds:0xc0023e44,eax
c0006ef6:	75 18                	jne    c0006f10 <unlockStuff()+0x28>
c0006ef8:	83 3d 40 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e40,0x0
c0006eff:	74 0f                	je     c0006f10 <unlockStuff()+0x28>
c0006f01:	c7 05 40 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e40,0x0
c0006f0b:	e8 0c ca 00 00       	call   c001391c <schedule()>
c0006f10:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0006f15:	48                   	dec    eax
c0006f16:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0006f1b:	75 01                	jne    c0006f1e <unlockStuff()+0x36>
c0006f1d:	fb                   	sti    
c0006f1e:	83 c4 0c             	add    esp,0xc
c0006f21:	c3                   	ret    

c0006f22 <Virt::getAKernelVAS()>:
c0006f22:	a1 90 0a 02 c0       	mov    eax,ds:0xc0020a90
c0006f27:	c3                   	ret    

c0006f28 <__not_memcpy>:
c0006f28:	57                   	push   edi
c0006f29:	56                   	push   esi
c0006f2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006f32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006f36:	89 c7                	mov    edi,eax
c0006f38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006f3a:	5e                   	pop    esi
c0006f3b:	5f                   	pop    edi
c0006f3c:	c3                   	ret    
c0006f3d:	66 90                	xchg   ax,ax
c0006f3f:	90                   	nop

c0006f40 <Krnl::resolveCompatibilitySymbol(char*)>:
c0006f40:	83 ec 0c             	sub    esp,0xc
c0006f43:	83 ec 08             	sub    esp,0x8
c0006f46:	68 71 d5 01 c0       	push   0xc001d571
c0006f4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f4f:	e8 ac 97 ff ff       	call   c0000700 <strcmp>
c0006f54:	83 c4 10             	add    esp,0x10
c0006f57:	85 c0                	test   eax,eax
c0006f59:	0f 94 c0             	sete   al
c0006f5c:	84 c0                	test   al,al
c0006f5e:	74 0c                	je     c0006f6c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0006f60:	b8 98 09 02 c0       	mov    eax,0xc0020998
c0006f65:	e9 ea 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f6a:	66 90                	xchg   ax,ax
c0006f6c:	83 ec 08             	sub    esp,0x8
c0006f6f:	68 7a d5 01 c0       	push   0xc001d57a
c0006f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f78:	e8 83 97 ff ff       	call   c0000700 <strcmp>
c0006f7d:	83 c4 10             	add    esp,0x10
c0006f80:	85 c0                	test   eax,eax
c0006f82:	0f 94 c0             	sete   al
c0006f85:	84 c0                	test   al,al
c0006f87:	74 0b                	je     c0006f94 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0006f89:	b8 00 c2 01 c0       	mov    eax,0xc001c200
c0006f8e:	e9 c1 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f93:	90                   	nop
c0006f94:	83 ec 08             	sub    esp,0x8
c0006f97:	68 84 d5 01 c0       	push   0xc001d584
c0006f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fa0:	e8 5b 97 ff ff       	call   c0000700 <strcmp>
c0006fa5:	83 c4 10             	add    esp,0x10
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	0f 94 c0             	sete   al
c0006fad:	84 c0                	test   al,al
c0006faf:	74 0b                	je     c0006fbc <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0006fb1:	b8 34 bf 01 c0       	mov    eax,0xc001bf34
c0006fb6:	e9 99 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fbb:	90                   	nop
c0006fbc:	83 ec 08             	sub    esp,0x8
c0006fbf:	68 8d d5 01 c0       	push   0xc001d58d
c0006fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fc8:	e8 33 97 ff ff       	call   c0000700 <strcmp>
c0006fcd:	83 c4 10             	add    esp,0x10
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	0f 94 c0             	sete   al
c0006fd5:	84 c0                	test   al,al
c0006fd7:	74 07                	je     c0006fe0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0006fd9:	b8 00 c3 01 c0       	mov    eax,0xc001c300
c0006fde:	eb 74                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fe0:	83 ec 08             	sub    esp,0x8
c0006fe3:	68 97 d5 01 c0       	push   0xc001d597
c0006fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fec:	e8 0f 97 ff ff       	call   c0000700 <strcmp>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	85 c0                	test   eax,eax
c0006ff6:	0f 94 c0             	sete   al
c0006ff9:	84 c0                	test   al,al
c0006ffb:	74 07                	je     c0007004 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0006ffd:	b8 80 c0 01 c0       	mov    eax,0xc001c080
c0007002:	eb 50                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007004:	83 ec 08             	sub    esp,0x8
c0007007:	68 a0 d5 01 c0       	push   0xc001d5a0
c000700c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007010:	e8 eb 96 ff ff       	call   c0000700 <strcmp>
c0007015:	83 c4 10             	add    esp,0x10
c0007018:	85 c0                	test   eax,eax
c000701a:	0f 94 c0             	sete   al
c000701d:	84 c0                	test   al,al
c000701f:	74 07                	je     c0007028 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0007021:	b8 9c 09 02 c0       	mov    eax,0xc002099c
c0007026:	eb 2c                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007028:	83 ec 08             	sub    esp,0x8
c000702b:	68 ad d5 01 c0       	push   0xc001d5ad
c0007030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007034:	e8 c7 96 ff ff       	call   c0000700 <strcmp>
c0007039:	83 c4 10             	add    esp,0x10
c000703c:	85 c0                	test   eax,eax
c000703e:	0f 94 c0             	sete   al
c0007041:	84 c0                	test   al,al
c0007043:	74 07                	je     c000704c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0007045:	b8 9d 09 02 c0       	mov    eax,0xc002099d
c000704a:	eb 08                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000704c:	b8 00 00 00 00       	mov    eax,0x0
c0007051:	8d 76 00             	lea    esi,[esi+0x0]
c0007054:	83 c4 0c             	add    esp,0xc
c0007057:	c3                   	ret    

c0007058 <Computer::close(int, int, void*)>:
c0007058:	57                   	push   edi
c0007059:	56                   	push   esi
c000705a:	53                   	push   ebx
c000705b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000705f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007063:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007067:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c000706d:	83 ec 0c             	sub    esp,0xc
c0007070:	50                   	push   eax
c0007071:	e8 dc 4f 00 00       	call   c000c052 <Device::closeAll()>
c0007076:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c000707c:	83 c4 10             	add    esp,0x10
c000707f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007081:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0007085:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000708d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007091:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007095:	5b                   	pop    ebx
c0007096:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0007099:	5e                   	pop    esi
c000709a:	5f                   	pop    edi
c000709b:	ff e0                	jmp    eax

c000709d <Krnl::firstTask()>:
c000709d:	53                   	push   ebx
c000709e:	83 ec 14             	sub    esp,0x14
c00070a1:	fb                   	sti    
c00070a2:	68 ba d5 01 c0       	push   0xc001d5ba
c00070a7:	e8 33 90 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c00070ac:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00070b3:	e8 a5 0d 00 00       	call   c0007e5d <malloc>
c00070b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00070bf:	89 c3                	mov    ebx,eax
c00070c1:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c00070c6:	50                   	push   eax
c00070c7:	68 d3 d5 01 c0       	push   0xc001d5d3
c00070cc:	6a 01                	push   0x1
c00070ce:	53                   	push   ebx
c00070cf:	e8 1c c4 00 00       	call   c00134f0 <Process::Process(bool, char const*, Process*, char**)>
c00070d4:	83 c4 20             	add    esp,0x20
c00070d7:	68 ff 00 00 00       	push   0xff
c00070dc:	6a 00                	push   0x0
c00070de:	68 b3 78 00 c0       	push   0xc00078b3
c00070e3:	53                   	push   ebx
c00070e4:	e8 13 c6 00 00       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c00070e9:	8b 15 70 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e70
c00070ef:	6a 7a                	push   0x7a
c00070f1:	6a 00                	push   0x0
c00070f3:	68 50 41 01 c0       	push   0xc0014150
c00070f8:	52                   	push   edx
c00070f9:	e8 fe c5 00 00       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c00070fe:	83 c4 14             	add    esp,0x14
c0007101:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0007106:	68 d0 d6 01 c0       	push   0xc001d6d0
c000710b:	c6 05 9d 09 02 c0 01 	mov    BYTE PTR ds:0xc002099d,0x1
c0007112:	e8 c8 8f 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c0007117:	e8 13 d4 00 00       	call   c001452f <Vm::initialise8086()>
c000711c:	e8 75 3d 00 00       	call   c000ae96 <Fs::initVFS()>
c0007121:	c7 04 24 e0 d5 01 c0 	mov    DWORD PTR [esp],0xc001d5e0
c0007128:	e8 b2 8f 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c000712d:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c0007132:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007138:	8b 10                	mov    edx,DWORD PTR [eax]
c000713a:	6a 00                	push   0x0
c000713c:	6a 00                	push   0x0
c000713e:	6a 00                	push   0x0
c0007140:	50                   	push   eax
c0007141:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007144:	83 c4 14             	add    esp,0x14
c0007147:	68 d0 d6 01 c0       	push   0xc001d6d0
c000714c:	e8 8e 8f 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c0007151:	e8 ba a2 00 00       	call   c0011410 <KeLoadSystemCalls()>
c0007156:	e8 5f 94 00 00       	call   c00105ba <Krnl::loadSystemEnv()>
c000715b:	e8 28 96 00 00       	call   c0010788 <Krnl::setupPowerManager()>
c0007160:	83 c4 0c             	add    esp,0xc
c0007163:	6a 3a                	push   0x3a
c0007165:	68 fa d5 01 c0       	push   0xc001d5fa
c000716a:	68 03 d6 01 c0       	push   0xc001d603
c000716f:	e8 6a a9 00 00       	call   c0011ade <Reg::readIntWithDefault(char*, char*, int)>
c0007174:	89 04 24             	mov    DWORD PTR [esp],eax
c0007177:	e8 28 48 00 00       	call   c000b9a4 <User::loadClockSettings(int)>
c000717c:	c7 04 24 f4 d6 01 c0 	mov    DWORD PTR [esp],0xc001d6f4
c0007183:	e8 57 8f 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c0007188:	59                   	pop    ecx
c0007189:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000718e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0007194:	53                   	push   ebx
c0007195:	e8 b6 4e 00 00       	call   c000c050 <Device::loadDriversForAll()>
c000719a:	c7 04 24 0b d6 01 c0 	mov    DWORD PTR [esp],0xc001d60b
c00071a1:	e8 39 8f 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c00071a6:	58                   	pop    eax
c00071a7:	8b 1d 98 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020998
c00071ad:	5a                   	pop    edx
c00071ae:	6a 01                	push   0x1
c00071b0:	68 1c d6 01 c0       	push   0xc001d61c
c00071b5:	e8 70 bd 00 00       	call   c0012f2a <Thr::loadDLL(char const*, bool)>
c00071ba:	59                   	pop    ecx
c00071bb:	5a                   	pop    edx
c00071bc:	53                   	push   ebx
c00071bd:	50                   	push   eax
c00071be:	e8 98 bf 00 00       	call   c001315b <Thr::executeDLL(unsigned long, void*)>
c00071c3:	83 c4 10             	add    esp,0x10
c00071c6:	83 ec 0c             	sub    esp,0xc
c00071c9:	6a 02                	push   0x2
c00071cb:	e8 48 c9 00 00       	call   c0013b18 <blockTask(TaskState)>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	eb f1                	jmp    c00071c6 <Krnl::firstTask()+0x129>
c00071d5:	90                   	nop

c00071d6 <Computer::Computer()>:
c00071d6:	83 ec 0c             	sub    esp,0xc
c00071d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dd:	83 ec 08             	sub    esp,0x8
c00071e0:	68 38 d6 01 c0       	push   0xc001d638
c00071e5:	50                   	push   eax
c00071e6:	e8 e1 4e 00 00       	call   c000c0cc <Device::Device(char const*)>
c00071eb:	83 c4 10             	add    esp,0x10
c00071ee:	ba 40 d7 01 c0       	mov    edx,0xc001d740
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	89 10                	mov    DWORD PTR [eax],edx
c00071f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0007207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000720b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0007215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007219:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000721f:	83 ca 04             	or     edx,0x4
c0007222:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0007228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000722c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007232:	31 d2                	xor    edx,edx
c0007234:	88 c2                	mov    dl,al
c0007236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000723a:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0007241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007245:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000724b:	31 d2                	xor    edx,edx
c000724d:	88 c2                	mov    dl,al
c000724f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007253:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0007258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000725c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007262:	8d 50 01             	lea    edx,[eax+0x1]
c0007265:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007269:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000726f:	31 d2                	xor    edx,edx
c0007271:	88 c2                	mov    dl,al
c0007273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007277:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000727b:	83 e1 3f             	and    ecx,0x3f
c000727e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0007282:	90                   	nop
c0007283:	83 c4 0c             	add    esp,0xc
c0007286:	c3                   	ret    
c0007287:	90                   	nop

c0007288 <Computer::setBootMessage(char const*)>:
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::detectFeatures()>:
c000728a:	55                   	push   ebp
c000728b:	57                   	push   edi
c000728c:	56                   	push   esi
c000728d:	53                   	push   ebx
c000728e:	83 ec 1c             	sub    esp,0x1c
c0007291:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007295:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c000729f:	e8 75 8f ff ff       	call   c0000219 <detectCPUID>
c00072a4:	85 c0                	test   eax,eax
c00072a6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072ac:	0f 95 c2             	setne  dl
c00072af:	83 e0 fd             	and    eax,0xfffffffd
c00072b2:	01 d2                	add    edx,edx
c00072b4:	09 d0                	or     eax,edx
c00072b6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072bc:	a8 02                	test   al,0x2
c00072be:	75 46                	jne    c0007306 <Computer::detectFeatures()+0x7c>
c00072c0:	f6 05 b1 09 02 c0 04 	test   BYTE PTR ds:0xc00209b1,0x4
c00072c7:	74 07                	je     c00072d0 <Computer::detectFeatures()+0x46>
c00072c9:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c00072d0:	e8 f1 4b 01 00       	call   c001bec6 <x87Detect>
c00072d5:	83 e0 01             	and    eax,0x1
c00072d8:	c1 e0 04             	shl    eax,0x4
c00072db:	88 c2                	mov    dl,al
c00072dd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072e3:	83 e0 ef             	and    eax,0xffffffef
c00072e6:	09 d0                	or     eax,edx
c00072e8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072ee:	a8 10                	test   al,0x10
c00072f0:	0f 85 2a 01 00 00    	jne    c0007420 <Computer::detectFeatures()+0x196>
c00072f6:	84 c0                	test   al,al
c00072f8:	0f 88 45 01 00 00    	js     c0007443 <Computer::detectFeatures()+0x1b9>
c00072fe:	83 c4 1c             	add    esp,0x1c
c0007301:	5b                   	pop    ebx
c0007302:	5e                   	pop    esi
c0007303:	5f                   	pop    edi
c0007304:	5d                   	pop    ebp
c0007305:	c3                   	ret    
c0007306:	83 ec 0c             	sub    esp,0xc
c0007309:	6a 20                	push   0x20
c000730b:	e8 fc 82 00 00       	call   c000f60c <CPU::cpuidCheckEDX(unsigned int)>
c0007310:	83 e0 01             	and    eax,0x1
c0007313:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000731a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007320:	83 e0 f7             	and    eax,0xfffffff7
c0007323:	09 d0                	or     eax,edx
c0007325:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000732b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0007332:	e8 d5 82 00 00       	call   c000f60c <CPU::cpuidCheckEDX(unsigned int)>
c0007337:	83 e0 01             	and    eax,0x1
c000733a:	88 c2                	mov    dl,al
c000733c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007342:	83 e0 fe             	and    eax,0xfffffffe
c0007345:	09 d0                	or     eax,edx
c0007347:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000734d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0007354:	e8 b3 82 00 00       	call   c000f60c <CPU::cpuidCheckEDX(unsigned int)>
c0007359:	c1 e0 07             	shl    eax,0x7
c000735c:	88 c2                	mov    dl,al
c000735e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007364:	83 e0 7f             	and    eax,0x7f
c0007367:	09 d0                	or     eax,edx
c0007369:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000736f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0007376:	e8 91 82 00 00       	call   c000f60c <CPU::cpuidCheckEDX(unsigned int)>
c000737b:	83 c4 10             	add    esp,0x10
c000737e:	83 e0 01             	and    eax,0x1
c0007381:	c1 e0 05             	shl    eax,0x5
c0007384:	88 c2                	mov    dl,al
c0007386:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000738c:	83 e0 df             	and    eax,0xffffffdf
c000738f:	09 d0                	or     eax,edx
c0007391:	f7 05 b0 09 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00209b0,0x401
c000739b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073a1:	0f 84 c2 00 00 00    	je     c0007469 <Computer::detectFeatures()+0x1df>
c00073a7:	83 e0 fe             	and    eax,0xfffffffe
c00073aa:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073b0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00073b6:	88 c2                	mov    dl,al
c00073b8:	83 e2 09             	and    edx,0x9
c00073bb:	fe ca                	dec    dl
c00073bd:	75 09                	jne    c00073c8 <Computer::detectFeatures()+0x13e>
c00073bf:	83 e0 fe             	and    eax,0xfffffffe
c00073c2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073c8:	83 ec 0c             	sub    esp,0xc
c00073cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00073cf:	50                   	push   eax
c00073d0:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00073d4:	55                   	push   ebp
c00073d5:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00073d9:	57                   	push   edi
c00073da:	8d 74 24 18          	lea    esi,[esp+0x18]
c00073de:	56                   	push   esi
c00073df:	68 00 00 00 80       	push   0x80000000
c00073e4:	e8 9f 81 00 00       	call   c000f588 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00073e9:	83 c4 20             	add    esp,0x20
c00073ec:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00073f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00073f7:	0f 86 c3 fe ff ff    	jbe    c00072c0 <Computer::detectFeatures()+0x36>
c00073fd:	83 ec 0c             	sub    esp,0xc
c0007400:	50                   	push   eax
c0007401:	55                   	push   ebp
c0007402:	57                   	push   edi
c0007403:	56                   	push   esi
c0007404:	68 01 00 00 80       	push   0x80000001
c0007409:	e8 7a 81 00 00       	call   c000f588 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000740e:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	e9 a0 fe ff ff       	jmp    c00072c0 <Computer::detectFeatures()+0x36>
c0007420:	e8 5b 4a 01 00       	call   c001be80 <absolutelyNoChanceInHell>
c0007425:	88 c2                	mov    dl,al
c0007427:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000742d:	c1 e2 07             	shl    edx,0x7
c0007430:	83 e0 7f             	and    eax,0x7f
c0007433:	09 d0                	or     eax,edx
c0007435:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000743b:	84 c0                	test   al,al
c000743d:	0f 89 bb fe ff ff    	jns    c00072fe <Computer::detectFeatures()+0x74>
c0007443:	e8 b8 47 01 00       	call   c001bc00 <avxDetect>
c0007448:	83 e0 01             	and    eax,0x1
c000744b:	c1 e0 05             	shl    eax,0x5
c000744e:	88 c2                	mov    dl,al
c0007450:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007456:	83 e0 df             	and    eax,0xffffffdf
c0007459:	09 d0                	or     eax,edx
c000745b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007461:	83 c4 1c             	add    esp,0x1c
c0007464:	5b                   	pop    ebx
c0007465:	5e                   	pop    esi
c0007466:	5f                   	pop    edi
c0007467:	5d                   	pop    ebp
c0007468:	c3                   	ret    
c0007469:	83 ec 0c             	sub    esp,0xc
c000746c:	68 00 02 00 00       	push   0x200
c0007471:	e8 96 81 00 00       	call   c000f60c <CPU::cpuidCheckEDX(unsigned int)>
c0007476:	83 c4 10             	add    esp,0x10
c0007479:	83 e0 01             	and    eax,0x1
c000747c:	88 c2                	mov    dl,al
c000747e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007484:	83 e0 fe             	and    eax,0xfffffffe
c0007487:	09 d0                	or     eax,edx
c0007489:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000748f:	e9 1c ff ff ff       	jmp    c00073b0 <Computer::detectFeatures()+0x126>

c0007494 <Computer::displayFeatures()>:
c0007494:	c3                   	ret    
c0007495:	90                   	nop

c0007496 <Computer::rdmsr(unsigned int)>:
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074a4:	74 0a                	je     c00074b0 <Computer::rdmsr(unsigned int)+0x1a>
c00074a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074aa:	0f 32                	rdmsr  
c00074ac:	83 c4 0c             	add    esp,0xc
c00074af:	c3                   	ret    
c00074b0:	83 ec 0c             	sub    esp,0xc
c00074b3:	68 41 d6 01 c0       	push   0xc001d641
c00074b8:	e8 06 92 00 00       	call   c00106c3 <KePanic(char const*)>
c00074bd:	83 c4 10             	add    esp,0x10
c00074c0:	eb e4                	jmp    c00074a6 <Computer::rdmsr(unsigned int)+0x10>

c00074c2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	52                   	push   edx
c00074c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00074cd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00074d1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074d8:	74 0e                	je     c00074e8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00074da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074de:	89 f0                	mov    eax,esi
c00074e0:	89 fa                	mov    edx,edi
c00074e2:	0f 30                	wrmsr  
c00074e4:	58                   	pop    eax
c00074e5:	5e                   	pop    esi
c00074e6:	5f                   	pop    edi
c00074e7:	c3                   	ret    
c00074e8:	83 ec 0c             	sub    esp,0xc
c00074eb:	68 47 d6 01 c0       	push   0xc001d647
c00074f0:	e8 ce 91 00 00       	call   c00106c3 <KePanic(char const*)>
c00074f5:	83 c4 10             	add    esp,0x10
c00074f8:	eb e0                	jmp    c00074da <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00074fa <Computer::shutdown()>:
c00074fa:	83 ec 0c             	sub    esp,0xc
c00074fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007501:	8b 10                	mov    edx,DWORD PTR [eax]
c0007503:	6a 00                	push   0x0
c0007505:	6a 00                	push   0x0
c0007507:	6a 00                	push   0x0
c0007509:	50                   	push   eax
c000750a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000750d:	83 c4 1c             	add    esp,0x1c
c0007510:	c3                   	ret    
c0007511:	90                   	nop

c0007512 <Computer::restart()>:
c0007512:	83 ec 0c             	sub    esp,0xc
c0007515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007519:	8b 10                	mov    edx,DWORD PTR [eax]
c000751b:	6a 00                	push   0x0
c000751d:	6a 00                	push   0x0
c000751f:	6a 01                	push   0x1
c0007521:	50                   	push   eax
c0007522:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007525:	83 c4 1c             	add    esp,0x1c
c0007528:	c3                   	ret    
c0007529:	90                   	nop

c000752a <Computer::sleep()>:
c000752a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000752e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007534:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007538:	e9 47 7b 00 00       	jmp    c000f084 <ACPI::sleep()>
c000753d:	90                   	nop

c000753e <Computer::nmiEnabled()>:
c000753e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007542:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007548:	c3                   	ret    
c0007549:	90                   	nop

c000754a <Computer::readCMOS(unsigned char)>:
c000754a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000754e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007555:	19 c0                	sbb    eax,eax
c0007557:	83 e0 80             	and    eax,0xffffff80
c000755a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000755e:	e6 70                	out    0x70,al
c0007560:	e4 71                	in     al,0x71
c0007562:	c3                   	ret    
c0007563:	90                   	nop

c0007564 <Computer::enableNMI(bool)>:
c0007564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000756c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007572:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000757a:	eb ce                	jmp    c000754a <Computer::readCMOS(unsigned char)>

c000757c <Computer::open(int, int, void*)>:
c000757c:	56                   	push   esi
c000757d:	53                   	push   ebx
c000757e:	83 ec 10             	sub    esp,0x10
c0007581:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007585:	f6 05 b0 09 02 c0 04 	test   BYTE PTR ds:0xc00209b0,0x4
c000758c:	68 4d d6 01 c0       	push   0xc001d64d
c0007591:	0f 94 05 20 f7 01 c0 	sete   BYTE PTR ds:0xc001f720
c0007598:	e8 42 8b 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c000759d:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00075a4:	e8 b4 08 00 00       	call   c0007e5d <malloc>
c00075a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ac:	89 c6                	mov    esi,eax
c00075ae:	e8 69 76 00 00       	call   c000ec1c <ACPI::ACPI()>
c00075b3:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00075b9:	58                   	pop    eax
c00075ba:	5a                   	pop    edx
c00075bb:	56                   	push   esi
c00075bc:	53                   	push   ebx
c00075bd:	e8 72 49 00 00       	call   c000bf34 <Device::addChild(Device*)>
c00075c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075c5:	e8 c0 fc ff ff       	call   c000728a <Computer::detectFeatures()>
c00075ca:	59                   	pop    ecx
c00075cb:	5e                   	pop    esi
c00075cc:	6a 01                	push   0x1
c00075ce:	53                   	push   ebx
c00075cf:	e8 90 ff ff ff       	call   c0007564 <Computer::enableNMI(bool)>
c00075d4:	c7 04 24 65 d6 01 c0 	mov    DWORD PTR [esp],0xc001d665
c00075db:	e8 ff 8a 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c00075e0:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00075e7:	e8 71 08 00 00       	call   c0007e5d <malloc>
c00075ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ef:	89 c6                	mov    esi,eax
c00075f1:	e8 ce 80 00 00       	call   c000f6c4 <CPU::CPU()>
c00075f6:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00075fc:	58                   	pop    eax
c00075fd:	5a                   	pop    edx
c00075fe:	56                   	push   esi
c00075ff:	53                   	push   ebx
c0007600:	e8 2f 49 00 00       	call   c000bf34 <Device::addChild(Device*)>
c0007605:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000760b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000760f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007611:	51                   	push   ecx
c0007612:	6a 00                	push   0x0
c0007614:	6a 00                	push   0x0
c0007616:	50                   	push   eax
c0007617:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000761a:	83 c4 14             	add    esp,0x14
c000761d:	68 14 d7 01 c0       	push   0xc001d714
c0007622:	e8 b8 8a 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c0007627:	e8 3a e0 00 00       	call   c0015666 <HalInitialiseCoprocessor()>
c000762c:	c7 04 24 7f d6 01 c0 	mov    DWORD PTR [esp],0xc001d67f
c0007633:	e8 a7 8a 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c0007638:	c7 04 24 9d 70 00 c0 	mov    DWORD PTR [esp],0xc000709d
c000763f:	e8 d0 c1 00 00       	call   c0013814 <setupMultitasking(void (*)())>
c0007644:	83 c4 14             	add    esp,0x14
c0007647:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000764c:	5b                   	pop    ebx
c000764d:	5e                   	pop    esi
c000764e:	c3                   	ret    
c000764f:	90                   	nop

c0007650 <Computer::disableNMI()>:
c0007650:	6a 00                	push   0x0
c0007652:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007656:	50                   	push   eax
c0007657:	e8 08 ff ff ff       	call   c0007564 <Computer::enableNMI(bool)>
c000765c:	5a                   	pop    edx
c000765d:	59                   	pop    ecx
c000765e:	c3                   	ret    
c000765f:	90                   	nop

c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007664:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000766b:	19 c0                	sbb    eax,eax
c000766d:	83 e0 80             	and    eax,0xffffff80
c0007670:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007674:	e6 70                	out    0x70,al
c0007676:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000767a:	e6 71                	out    0x71,al
c000767c:	c3                   	ret    
c000767d:	90                   	nop

c000767e <Computer::handleNMI()>:
c000767e:	56                   	push   esi
c000767f:	53                   	push   ebx
c0007680:	83 ec 10             	sub    esp,0x10
c0007683:	e4 92                	in     al,0x92
c0007685:	89 c6                	mov    esi,eax
c0007687:	e4 61                	in     al,0x61
c0007689:	68 9a d6 01 c0       	push   0xc001d69a
c000768e:	88 c3                	mov    bl,al
c0007690:	e8 5f 34 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0007695:	83 c4 10             	add    esp,0x10
c0007698:	83 e6 10             	and    esi,0x10
c000769b:	75 0d                	jne    c00076aa <Computer::handleNMI()+0x2c>
c000769d:	f6 c3 40             	test   bl,0x40
c00076a0:	75 1d                	jne    c00076bf <Computer::handleNMI()+0x41>
c00076a2:	84 db                	test   bl,bl
c00076a4:	78 2d                	js     c00076d3 <Computer::handleNMI()+0x55>
c00076a6:	58                   	pop    eax
c00076a7:	5b                   	pop    ebx
c00076a8:	5e                   	pop    esi
c00076a9:	c3                   	ret    
c00076aa:	83 ec 0c             	sub    esp,0xc
c00076ad:	68 ab d6 01 c0       	push   0xc001d6ab
c00076b2:	e8 0c 90 00 00       	call   c00106c3 <KePanic(char const*)>
c00076b7:	83 c4 10             	add    esp,0x10
c00076ba:	f6 c3 40             	test   bl,0x40
c00076bd:	74 e3                	je     c00076a2 <Computer::handleNMI()+0x24>
c00076bf:	83 ec 0c             	sub    esp,0xc
c00076c2:	68 b8 d6 01 c0       	push   0xc001d6b8
c00076c7:	e8 f7 8f 00 00       	call   c00106c3 <KePanic(char const*)>
c00076cc:	83 c4 10             	add    esp,0x10
c00076cf:	84 db                	test   bl,bl
c00076d1:	79 d3                	jns    c00076a6 <Computer::handleNMI()+0x28>
c00076d3:	c7 44 24 10 c2 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d6c2
c00076db:	5a                   	pop    edx
c00076dc:	5b                   	pop    ebx
c00076dd:	5e                   	pop    esi
c00076de:	e9 e0 8f 00 00       	jmp    c00106c3 <KePanic(char const*)>
c00076e3:	90                   	nop

c00076e4 <GDTEntry::setBase(unsigned int)>:
c00076e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076ec:	89 c1                	mov    ecx,eax
c00076ee:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00076f2:	c1 e9 10             	shr    ecx,0x10
c00076f5:	c1 e8 18             	shr    eax,0x18
c00076f8:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00076fb:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00076fe:	c3                   	ret    
c00076ff:	90                   	nop

c0007700 <GDTEntry::setLimit(unsigned int)>:
c0007700:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007708:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000770b:	66 89 01             	mov    WORD PTR [ecx],ax
c000770e:	83 e2 f0             	and    edx,0xfffffff0
c0007711:	c1 e8 10             	shr    eax,0x10
c0007714:	83 e0 0f             	and    eax,0xf
c0007717:	09 d0                	or     eax,edx
c0007719:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000771c:	c3                   	ret    
c000771d:	90                   	nop

c000771e <GDT::GDT()>:
c000771e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007722:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000772c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007732:	90                   	nop
c0007733:	c3                   	ret    

c0007734 <GDT::addEntry(GDTEntry)>:
c0007734:	53                   	push   ebx
c0007735:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007739:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000773d:	8b 02                	mov    eax,DWORD PTR [edx]
c000773f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007743:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007747:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000774b:	8d 48 01             	lea    ecx,[eax+0x1]
c000774e:	c1 e0 03             	shl    eax,0x3
c0007751:	89 0a                	mov    DWORD PTR [edx],ecx
c0007753:	5b                   	pop    ebx
c0007754:	c3                   	ret    
c0007755:	90                   	nop

c0007756 <GDT::getNumberOfEntries()>:
c0007756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000775a:	8b 00                	mov    eax,DWORD PTR [eax]
c000775c:	c3                   	ret    
c000775d:	90                   	nop

c000775e <GDT::flush()>:
c000775e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007762:	8b 10                	mov    edx,DWORD PTR [eax]
c0007764:	83 c0 04             	add    eax,0x4
c0007767:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000776e:	a3 a2 09 02 c0       	mov    ds:0xc00209a2,eax
c0007773:	66 89 15 a0 09 02 c0 	mov    WORD PTR ds:0xc00209a0,dx
c000777a:	e9 fe 8b ff ff       	jmp    c000037d <loadGDT>
c000777f:	90                   	nop

c0007780 <GDT::setup()>:
c0007780:	57                   	push   edi
c0007781:	56                   	push   esi
c0007782:	53                   	push   ebx
c0007783:	83 ec 30             	sub    esp,0x30
c0007786:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000778a:	6a 00                	push   0x0
c000778c:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007790:	56                   	push   esi
c0007791:	e8 4e ff ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0007796:	6a 00                	push   0x0
c0007798:	56                   	push   esi
c0007799:	e8 62 ff ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c000779e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00077a6:	6a 00                	push   0x0
c00077a8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00077ac:	56                   	push   esi
c00077ad:	e8 32 ff ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c00077b2:	68 ff ff ff 00       	push   0xffffff
c00077b7:	56                   	push   esi
c00077b8:	e8 43 ff ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c00077bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00077c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00077c5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00077c9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00077cd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00077d2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00077d7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00077db:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00077df:	89 f8                	mov    eax,edi
c00077e1:	89 fa                	mov    edx,edi
c00077e3:	80 e4 f7             	and    ah,0xf7
c00077e6:	80 ce 60             	or     dh,0x60
c00077e9:	89 c7                	mov    edi,eax
c00077eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00077ef:	80 cc 60             	or     ah,0x60
c00077f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00077f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00077fa:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007802:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007806:	83 c4 20             	add    esp,0x20
c0007809:	6a 00                	push   0x0
c000780b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000780f:	50                   	push   eax
c0007810:	e8 cf fe ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0007815:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007819:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000781d:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007822:	6a 00                	push   0x0
c0007824:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007828:	50                   	push   eax
c0007829:	e8 b6 fe ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c000782e:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007833:	83 c4 0c             	add    esp,0xc
c0007836:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783e:	53                   	push   ebx
c000783f:	e8 f0 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007844:	83 c4 0c             	add    esp,0xc
c0007847:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000784b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000784f:	53                   	push   ebx
c0007850:	e8 df fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007855:	83 c4 0c             	add    esp,0xc
c0007858:	57                   	push   edi
c0007859:	56                   	push   esi
c000785a:	53                   	push   ebx
c000785b:	e8 d4 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007860:	83 c4 0c             	add    esp,0xc
c0007863:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007867:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000786b:	53                   	push   ebx
c000786c:	e8 c3 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007871:	83 c4 0c             	add    esp,0xc
c0007874:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007878:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000787c:	53                   	push   ebx
c000787d:	e8 b2 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007882:	83 c4 0c             	add    esp,0xc
c0007885:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007889:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788d:	53                   	push   ebx
c000788e:	e8 a1 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007893:	83 c4 0c             	add    esp,0xc
c0007896:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000789a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000789e:	53                   	push   ebx
c000789f:	e8 90 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c00078a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078a7:	e8 b2 fe ff ff       	call   c000775e <GDT::flush()>
c00078ac:	83 c4 40             	add    esp,0x40
c00078af:	5b                   	pop    ebx
c00078b0:	5e                   	pop    esi
c00078b1:	5f                   	pop    edi
c00078b2:	c3                   	ret    

c00078b3 <idleFunction(void*)>:
c00078b3:	83 ec 0c             	sub    esp,0xc
c00078b6:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c00078bb:	48                   	dec    eax
c00078bc:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c00078c1:	75 01                	jne    c00078c4 <idleFunction(void*)+0x11>
c00078c3:	fb                   	sti    
c00078c4:	e8 77 da 00 00       	call   c0015340 <HalSystemIdle()>
c00078c9:	e8 b4 4b 01 00       	call   c001c482 <idleCommon()>
c00078ce:	eb f4                	jmp    c00078c4 <idleFunction(void*)+0x11>

c00078d0 <IDTEntry::IDTEntry(bool)>:
c00078d0:	83 ec 04             	sub    esp,0x4
c00078d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078d7:	88 04 24             	mov    BYTE PTR [esp],al
c00078da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078de:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00078e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078e8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00078ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078f3:	83 e2 f0             	and    edx,0xfffffff0
c00078f6:	83 ca 0e             	or     edx,0xe
c00078f9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00078fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007900:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007903:	83 e2 ef             	and    edx,0xffffffef
c0007906:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007909:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000790d:	74 05                	je     c0007914 <IDTEntry::IDTEntry(bool)+0x44>
c000790f:	b2 03                	mov    dl,0x3
c0007911:	eb 05                	jmp    c0007918 <IDTEntry::IDTEntry(bool)+0x48>
c0007913:	90                   	nop
c0007914:	b2 00                	mov    dl,0x0
c0007916:	66 90                	xchg   ax,ax
c0007918:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000791c:	83 e2 03             	and    edx,0x3
c000791f:	88 d1                	mov    cl,dl
c0007921:	c1 e1 05             	shl    ecx,0x5
c0007924:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007927:	83 e2 9f             	and    edx,0xffffff9f
c000792a:	09 ca                	or     edx,ecx
c000792c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000792f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007933:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007936:	83 ca 80             	or     edx,0xffffff80
c0007939:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000793c:	90                   	nop
c000793d:	83 c4 04             	add    esp,0x4
c0007940:	c3                   	ret    
c0007941:	90                   	nop

c0007942 <IDTEntry::setOffset(unsigned int)>:
c0007942:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007946:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000794a:	66 89 02             	mov    WORD PTR [edx],ax
c000794d:	c1 e8 10             	shr    eax,0x10
c0007950:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007954:	c3                   	ret    
c0007955:	90                   	nop
c0007956:	66 90                	xchg   ax,ax

c0007958 <IDT::IDT()>:
c0007958:	90                   	nop
c0007959:	c3                   	ret    

c000795a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000795a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000795e:	83 c0 30             	add    eax,0x30
c0007961:	c3                   	ret    

c0007962 <IDT::addEntry(IDTEntry, int)>:
c0007962:	53                   	push   ebx
c0007963:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007967:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000796b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000796f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007973:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0007976:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000797a:	5b                   	pop    ebx
c000797b:	c3                   	ret    

c000797c <IDT::addEntry(int, void (*)(), bool)>:
c000797c:	53                   	push   ebx
c000797d:	83 ec 10             	sub    esp,0x10
c0007980:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007985:	50                   	push   eax
c0007986:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000798a:	53                   	push   ebx
c000798b:	e8 40 ff ff ff       	call   c00078d0 <IDTEntry::IDTEntry(bool)>
c0007990:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007994:	53                   	push   ebx
c0007995:	e8 a8 ff ff ff       	call   c0007942 <IDTEntry::setOffset(unsigned int)>
c000799a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000799e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00079aa:	e8 b3 ff ff ff       	call   c0007962 <IDT::addEntry(IDTEntry, int)>
c00079af:	83 c4 30             	add    esp,0x30
c00079b2:	5b                   	pop    ebx
c00079b3:	c3                   	ret    

c00079b4 <IDT::flush()>:
c00079b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079b8:	66 c7 05 a8 09 02 c0 ff 07 	mov    WORD PTR ds:0xc00209a8,0x7ff
c00079c1:	a3 aa 09 02 c0       	mov    ds:0xc00209aa,eax
c00079c6:	0f 01 1d a8 09 02 c0 	lidtd  ds:0xc00209a8
c00079cd:	c3                   	ret    

c00079ce <IDT::setup()>:
c00079ce:	57                   	push   edi
c00079cf:	56                   	push   esi
c00079d0:	53                   	push   ebx
c00079d1:	83 ec 10             	sub    esp,0x10
c00079d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00079d8:	6a 00                	push   0x0
c00079da:	68 90 bc 01 c0       	push   0xc001bc90
c00079df:	6a 00                	push   0x0
c00079e1:	53                   	push   ebx
c00079e2:	e8 95 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c00079e7:	6a 00                	push   0x0
c00079e9:	68 a0 bc 01 c0       	push   0xc001bca0
c00079ee:	6a 01                	push   0x1
c00079f0:	53                   	push   ebx
c00079f1:	e8 86 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c00079f6:	83 c4 20             	add    esp,0x20
c00079f9:	6a 00                	push   0x0
c00079fb:	68 aa bc 01 c0       	push   0xc001bcaa
c0007a00:	6a 02                	push   0x2
c0007a02:	53                   	push   ebx
c0007a03:	e8 74 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a08:	6a 00                	push   0x0
c0007a0a:	68 b4 bc 01 c0       	push   0xc001bcb4
c0007a0f:	6a 03                	push   0x3
c0007a11:	53                   	push   ebx
c0007a12:	e8 65 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a17:	83 c4 20             	add    esp,0x20
c0007a1a:	6a 00                	push   0x0
c0007a1c:	68 be bc 01 c0       	push   0xc001bcbe
c0007a21:	6a 04                	push   0x4
c0007a23:	53                   	push   ebx
c0007a24:	e8 53 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a29:	6a 00                	push   0x0
c0007a2b:	68 c8 bc 01 c0       	push   0xc001bcc8
c0007a30:	6a 05                	push   0x5
c0007a32:	53                   	push   ebx
c0007a33:	e8 44 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a38:	83 c4 20             	add    esp,0x20
c0007a3b:	6a 00                	push   0x0
c0007a3d:	68 d2 bc 01 c0       	push   0xc001bcd2
c0007a42:	6a 06                	push   0x6
c0007a44:	53                   	push   ebx
c0007a45:	e8 32 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a4a:	6a 00                	push   0x0
c0007a4c:	68 dc bc 01 c0       	push   0xc001bcdc
c0007a51:	6a 07                	push   0x7
c0007a53:	53                   	push   ebx
c0007a54:	e8 23 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a59:	83 c4 20             	add    esp,0x20
c0007a5c:	6a 00                	push   0x0
c0007a5e:	68 e6 bc 01 c0       	push   0xc001bce6
c0007a63:	6a 08                	push   0x8
c0007a65:	53                   	push   ebx
c0007a66:	e8 11 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a6b:	6a 00                	push   0x0
c0007a6d:	68 ee bc 01 c0       	push   0xc001bcee
c0007a72:	6a 09                	push   0x9
c0007a74:	53                   	push   ebx
c0007a75:	e8 02 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a7a:	83 c4 20             	add    esp,0x20
c0007a7d:	6a 00                	push   0x0
c0007a7f:	68 f8 bc 01 c0       	push   0xc001bcf8
c0007a84:	6a 0a                	push   0xa
c0007a86:	53                   	push   ebx
c0007a87:	e8 f0 fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a8c:	6a 00                	push   0x0
c0007a8e:	68 00 bd 01 c0       	push   0xc001bd00
c0007a93:	6a 0b                	push   0xb
c0007a95:	53                   	push   ebx
c0007a96:	e8 e1 fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a9b:	83 c4 20             	add    esp,0x20
c0007a9e:	6a 00                	push   0x0
c0007aa0:	68 08 bd 01 c0       	push   0xc001bd08
c0007aa5:	6a 0c                	push   0xc
c0007aa7:	53                   	push   ebx
c0007aa8:	e8 cf fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007aad:	6a 00                	push   0x0
c0007aaf:	68 10 bd 01 c0       	push   0xc001bd10
c0007ab4:	6a 0d                	push   0xd
c0007ab6:	53                   	push   ebx
c0007ab7:	e8 c0 fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007abc:	83 c4 20             	add    esp,0x20
c0007abf:	6a 00                	push   0x0
c0007ac1:	68 18 bd 01 c0       	push   0xc001bd18
c0007ac6:	6a 0e                	push   0xe
c0007ac8:	53                   	push   ebx
c0007ac9:	e8 ae fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007ace:	6a 00                	push   0x0
c0007ad0:	68 20 bd 01 c0       	push   0xc001bd20
c0007ad5:	6a 0f                	push   0xf
c0007ad7:	53                   	push   ebx
c0007ad8:	e8 9f fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	6a 00                	push   0x0
c0007ae2:	68 2a bd 01 c0       	push   0xc001bd2a
c0007ae7:	6a 10                	push   0x10
c0007ae9:	53                   	push   ebx
c0007aea:	e8 8d fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007aef:	6a 00                	push   0x0
c0007af1:	68 34 bd 01 c0       	push   0xc001bd34
c0007af6:	6a 11                	push   0x11
c0007af8:	53                   	push   ebx
c0007af9:	e8 7e fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007afe:	83 c4 20             	add    esp,0x20
c0007b01:	6a 00                	push   0x0
c0007b03:	68 3e bd 01 c0       	push   0xc001bd3e
c0007b08:	6a 12                	push   0x12
c0007b0a:	53                   	push   ebx
c0007b0b:	e8 6c fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b10:	6a 01                	push   0x1
c0007b12:	68 d8 bd 01 c0       	push   0xc001bdd8
c0007b17:	6a 60                	push   0x60
c0007b19:	53                   	push   ebx
c0007b1a:	e8 5d fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b1f:	83 c4 20             	add    esp,0x20
c0007b22:	6a 00                	push   0x0
c0007b24:	68 df bd 01 c0       	push   0xc001bddf
c0007b29:	6a 20                	push   0x20
c0007b2b:	53                   	push   ebx
c0007b2c:	e8 4b fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b31:	6a 00                	push   0x0
c0007b33:	68 ca bd 01 c0       	push   0xc001bdca
c0007b38:	6a 21                	push   0x21
c0007b3a:	53                   	push   ebx
c0007b3b:	e8 3c fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b40:	83 c4 20             	add    esp,0x20
c0007b43:	6a 00                	push   0x0
c0007b45:	68 d1 bd 01 c0       	push   0xc001bdd1
c0007b4a:	6a 22                	push   0x22
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 2a fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b52:	6a 00                	push   0x0
c0007b54:	68 48 bd 01 c0       	push   0xc001bd48
c0007b59:	6a 23                	push   0x23
c0007b5b:	53                   	push   ebx
c0007b5c:	e8 1b fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b61:	83 c4 20             	add    esp,0x20
c0007b64:	6a 00                	push   0x0
c0007b66:	68 52 bd 01 c0       	push   0xc001bd52
c0007b6b:	6a 24                	push   0x24
c0007b6d:	53                   	push   ebx
c0007b6e:	e8 09 fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b73:	6a 00                	push   0x0
c0007b75:	68 5c bd 01 c0       	push   0xc001bd5c
c0007b7a:	6a 25                	push   0x25
c0007b7c:	53                   	push   ebx
c0007b7d:	e8 fa fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b82:	83 c4 20             	add    esp,0x20
c0007b85:	6a 00                	push   0x0
c0007b87:	68 66 bd 01 c0       	push   0xc001bd66
c0007b8c:	6a 26                	push   0x26
c0007b8e:	53                   	push   ebx
c0007b8f:	e8 e8 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b94:	6a 00                	push   0x0
c0007b96:	68 70 bd 01 c0       	push   0xc001bd70
c0007b9b:	6a 27                	push   0x27
c0007b9d:	53                   	push   ebx
c0007b9e:	e8 d9 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007ba3:	83 c4 20             	add    esp,0x20
c0007ba6:	6a 00                	push   0x0
c0007ba8:	68 7a bd 01 c0       	push   0xc001bd7a
c0007bad:	6a 28                	push   0x28
c0007baf:	53                   	push   ebx
c0007bb0:	e8 c7 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007bb5:	6a 00                	push   0x0
c0007bb7:	68 84 bd 01 c0       	push   0xc001bd84
c0007bbc:	6a 29                	push   0x29
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 b8 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007bc4:	83 c4 20             	add    esp,0x20
c0007bc7:	6a 00                	push   0x0
c0007bc9:	68 8e bd 01 c0       	push   0xc001bd8e
c0007bce:	6a 2a                	push   0x2a
c0007bd0:	53                   	push   ebx
c0007bd1:	e8 a6 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007bd6:	6a 00                	push   0x0
c0007bd8:	68 98 bd 01 c0       	push   0xc001bd98
c0007bdd:	6a 2b                	push   0x2b
c0007bdf:	53                   	push   ebx
c0007be0:	e8 97 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007be5:	83 c4 20             	add    esp,0x20
c0007be8:	6a 00                	push   0x0
c0007bea:	68 a2 bd 01 c0       	push   0xc001bda2
c0007bef:	6a 2c                	push   0x2c
c0007bf1:	53                   	push   ebx
c0007bf2:	e8 85 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007bf7:	6a 00                	push   0x0
c0007bf9:	68 ac bd 01 c0       	push   0xc001bdac
c0007bfe:	6a 2d                	push   0x2d
c0007c00:	53                   	push   ebx
c0007c01:	e8 76 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c06:	83 c4 20             	add    esp,0x20
c0007c09:	6a 00                	push   0x0
c0007c0b:	68 b6 bd 01 c0       	push   0xc001bdb6
c0007c10:	6a 2e                	push   0x2e
c0007c12:	53                   	push   ebx
c0007c13:	e8 64 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c18:	6a 00                	push   0x0
c0007c1a:	68 c0 bd 01 c0       	push   0xc001bdc0
c0007c1f:	6a 2f                	push   0x2f
c0007c21:	53                   	push   ebx
c0007c22:	e8 55 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c27:	83 c4 20             	add    esp,0x20
c0007c2a:	6a 00                	push   0x0
c0007c2c:	68 16 be 01 c0       	push   0xc001be16
c0007c31:	6a 30                	push   0x30
c0007c33:	53                   	push   ebx
c0007c34:	e8 43 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c39:	6a 00                	push   0x0
c0007c3b:	68 20 be 01 c0       	push   0xc001be20
c0007c40:	6a 31                	push   0x31
c0007c42:	53                   	push   ebx
c0007c43:	e8 34 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c48:	83 c4 20             	add    esp,0x20
c0007c4b:	6a 00                	push   0x0
c0007c4d:	68 2a be 01 c0       	push   0xc001be2a
c0007c52:	6a 32                	push   0x32
c0007c54:	53                   	push   ebx
c0007c55:	e8 22 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c5a:	6a 00                	push   0x0
c0007c5c:	68 34 be 01 c0       	push   0xc001be34
c0007c61:	6a 33                	push   0x33
c0007c63:	53                   	push   ebx
c0007c64:	e8 13 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c69:	83 c4 20             	add    esp,0x20
c0007c6c:	6a 00                	push   0x0
c0007c6e:	68 3e be 01 c0       	push   0xc001be3e
c0007c73:	6a 34                	push   0x34
c0007c75:	53                   	push   ebx
c0007c76:	e8 01 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c7b:	6a 00                	push   0x0
c0007c7d:	68 48 be 01 c0       	push   0xc001be48
c0007c82:	6a 35                	push   0x35
c0007c84:	53                   	push   ebx
c0007c85:	e8 f2 fc ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c8a:	83 c4 20             	add    esp,0x20
c0007c8d:	6a 00                	push   0x0
c0007c8f:	68 52 be 01 c0       	push   0xc001be52
c0007c94:	6a 36                	push   0x36
c0007c96:	53                   	push   ebx
c0007c97:	e8 e0 fc ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c9c:	6a 00                	push   0x0
c0007c9e:	68 5c be 01 c0       	push   0xc001be5c
c0007ca3:	6a 37                	push   0x37
c0007ca5:	53                   	push   ebx
c0007ca6:	e8 d1 fc ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007cab:	83 c4 1c             	add    esp,0x1c
c0007cae:	6a 03                	push   0x3
c0007cb0:	6a 02                	push   0x2
c0007cb2:	ff 35 90 0a 02 c0    	push   DWORD PTR ds:0xc0020a90
c0007cb8:	e8 7d 23 00 00       	call   c000a03a <VAS::allocatePages(int, int)>
c0007cbd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007cc4:	89 c6                	mov    esi,eax
c0007cc6:	e8 92 01 00 00       	call   c0007e5d <malloc>
c0007ccb:	81 c6 00 20 00 00    	add    esi,0x2000
c0007cd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cd4:	89 c7                	mov    edi,eax
c0007cd6:	e8 09 15 00 00       	call   c00091e4 <TSS::TSS()>
c0007cdb:	83 c4 0c             	add    esp,0xc
c0007cde:	68 e6 bc 01 c0       	push   0xc001bce6
c0007ce3:	56                   	push   esi
c0007ce4:	57                   	push   edi
c0007ce5:	e8 3e 15 00 00       	call   c0009228 <TSS::setup(unsigned long, unsigned long)>
c0007cea:	89 c6                	mov    esi,eax
c0007cec:	58                   	pop    eax
c0007ced:	5a                   	pop    edx
c0007cee:	6a 00                	push   0x0
c0007cf0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007cf4:	50                   	push   eax
c0007cf5:	e8 d6 fb ff ff       	call   c00078d0 <IDTEntry::IDTEntry(bool)>
c0007cfa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007cfe:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007d03:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007d0a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007d10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d14:	80 ce 05             	or     dh,0x5
c0007d17:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007d1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d22:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007d25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d28:	e8 87 fc ff ff       	call   c00079b4 <IDT::flush()>
c0007d2d:	83 c4 20             	add    esp,0x20
c0007d30:	5b                   	pop    ebx
c0007d31:	5e                   	pop    esi
c0007d32:	5f                   	pop    edi
c0007d33:	c3                   	ret    

c0007d34 <sbrk>:
c0007d34:	55                   	push   ebp
c0007d35:	57                   	push   edi
c0007d36:	56                   	push   esi
c0007d37:	53                   	push   ebx
c0007d38:	83 ec 1c             	sub    esp,0x1c
c0007d3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007d3f:	85 c0                	test   eax,eax
c0007d41:	74 5f                	je     c0007da2 <sbrk+0x6e>
c0007d43:	78 64                	js     c0007da9 <sbrk+0x75>
c0007d45:	8b 15 18 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f718
c0007d4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007d4f:	05 ff 0f 00 00       	add    eax,0xfff
c0007d54:	89 c5                	mov    ebp,eax
c0007d56:	78 69                	js     c0007dc1 <sbrk+0x8d>
c0007d58:	c1 fd 0c             	sar    ebp,0xc
c0007d5b:	bb 00 00 00 00       	mov    ebx,0x0
c0007d60:	8b 35 90 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020a90
c0007d66:	8b 3d 18 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f718
c0007d6c:	e8 c4 03 00 00       	call   c0008135 <Phys::allocatePage()>
c0007d71:	68 01 04 00 00       	push   0x401
c0007d76:	57                   	push   edi
c0007d77:	50                   	push   eax
c0007d78:	56                   	push   esi
c0007d79:	e8 b8 21 00 00       	call   c0009f36 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007d7e:	81 05 18 f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f718,0x1000
c0007d88:	43                   	inc    ebx
c0007d89:	83 c4 10             	add    esp,0x10
c0007d8c:	39 dd                	cmp    ebp,ebx
c0007d8e:	75 d0                	jne    c0007d60 <sbrk+0x2c>
c0007d90:	0f 20 d8             	mov    eax,cr3
c0007d93:	0f 22 d8             	mov    cr3,eax
c0007d96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d9a:	83 c4 1c             	add    esp,0x1c
c0007d9d:	5b                   	pop    ebx
c0007d9e:	5e                   	pop    esi
c0007d9f:	5f                   	pop    edi
c0007da0:	5d                   	pop    ebp
c0007da1:	c3                   	ret    
c0007da2:	a1 18 f7 01 c0       	mov    eax,ds:0xc001f718
c0007da7:	eb f1                	jmp    c0007d9a <sbrk+0x66>
c0007da9:	83 ec 08             	sub    esp,0x8
c0007dac:	50                   	push   eax
c0007dad:	68 64 d7 01 c0       	push   0xc001d764
c0007db2:	e8 3d 2d 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007dbf:	eb d9                	jmp    c0007d9a <sbrk+0x66>
c0007dc1:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007dc7:	eb 8f                	jmp    c0007d58 <sbrk+0x24>

c0007dc9 <mmap>:
c0007dc9:	83 ec 18             	sub    esp,0x18
c0007dcc:	68 94 d7 01 c0       	push   0xc001d794
c0007dd1:	e8 ed 88 00 00       	call   c00106c3 <KePanic(char const*)>
c0007dd6:	b8 00 00 00 00       	mov    eax,0x0
c0007ddb:	83 c4 1c             	add    esp,0x1c
c0007dde:	c3                   	ret    

c0007ddf <munmap>:
c0007ddf:	83 ec 18             	sub    esp,0x18
c0007de2:	68 99 d7 01 c0       	push   0xc001d799
c0007de7:	e8 d7 88 00 00       	call   c00106c3 <KePanic(char const*)>
c0007dec:	b8 00 00 00 00       	mov    eax,0x0
c0007df1:	83 c4 1c             	add    esp,0x1c
c0007df4:	c3                   	ret    

c0007df5 <liballoc_lock()>:
c0007df5:	fa                   	cli    
c0007df6:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0007dfc:	b8 00 00 00 00       	mov    eax,0x0
c0007e01:	c3                   	ret    

c0007e02 <liballoc_unlock()>:
c0007e02:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0007e07:	48                   	dec    eax
c0007e08:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0007e0d:	75 01                	jne    c0007e10 <liballoc_unlock()+0xe>
c0007e0f:	fb                   	sti    
c0007e10:	b8 00 00 00 00       	mov    eax,0x0
c0007e15:	c3                   	ret    

c0007e16 <liballoc_alloc(int)>:
c0007e16:	83 ec 10             	sub    esp,0x10
c0007e19:	6a 01                	push   0x1
c0007e1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e1f:	ff 35 90 0a 02 c0    	push   DWORD PTR ds:0xc0020a90
c0007e25:	e8 10 22 00 00       	call   c000a03a <VAS::allocatePages(int, int)>
c0007e2a:	83 c4 1c             	add    esp,0x1c
c0007e2d:	c3                   	ret    

c0007e2e <liballoc_free(void*, int)>:
c0007e2e:	83 ec 14             	sub    esp,0x14
c0007e31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e35:	ff 35 90 0a 02 c0    	push   DWORD PTR ds:0xc0020a90
c0007e3b:	e8 b6 1e 00 00       	call   c0009cf6 <VAS::freeAllocatedPages(unsigned long)>
c0007e40:	b8 00 00 00 00       	mov    eax,0x0
c0007e45:	83 c4 1c             	add    esp,0x1c
c0007e48:	c3                   	ret    

c0007e49 <realloc>:
c0007e49:	83 ec 14             	sub    esp,0x14
c0007e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e54:	e8 f8 96 ff ff       	call   c0001551 <dlrealloc>
c0007e59:	83 c4 1c             	add    esp,0x1c
c0007e5c:	c3                   	ret    

c0007e5d <malloc>:
c0007e5d:	83 ec 18             	sub    esp,0x18
c0007e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e64:	e8 ab 91 ff ff       	call   c0001014 <dlmalloc>
c0007e69:	83 c4 1c             	add    esp,0x1c
c0007e6c:	c3                   	ret    

c0007e6d <free>:
c0007e6d:	83 ec 18             	sub    esp,0x18
c0007e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e74:	e8 40 8e ff ff       	call   c0000cb9 <dlfree>
c0007e79:	83 c4 1c             	add    esp,0x1c
c0007e7c:	c3                   	ret    

c0007e7d <rfree>:
c0007e7d:	83 ec 18             	sub    esp,0x18
c0007e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e84:	e8 30 8e ff ff       	call   c0000cb9 <dlfree>
c0007e89:	83 c4 1c             	add    esp,0x1c
c0007e8c:	c3                   	ret    

c0007e8d <calloc>:
c0007e8d:	56                   	push   esi
c0007e8e:	53                   	push   ebx
c0007e8f:	83 ec 10             	sub    esp,0x10
c0007e92:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007e96:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007e9b:	53                   	push   ebx
c0007e9c:	e8 bc ff ff ff       	call   c0007e5d <malloc>
c0007ea1:	89 c6                	mov    esi,eax
c0007ea3:	83 c4 0c             	add    esp,0xc
c0007ea6:	53                   	push   ebx
c0007ea7:	6a 00                	push   0x0
c0007ea9:	50                   	push   eax
c0007eaa:	e8 41 86 ff ff       	call   c00004f0 <memset>
c0007eaf:	89 f0                	mov    eax,esi
c0007eb1:	83 c4 14             	add    esp,0x14
c0007eb4:	5b                   	pop    ebx
c0007eb5:	5e                   	pop    esi
c0007eb6:	c3                   	ret    

c0007eb7 <Krnl::setBootMessage(char const*)>:
c0007eb7:	c3                   	ret    

c0007eb8 <kernel_main>:
c0007eb8:	57                   	push   edi
c0007eb9:	bf f9 03 00 00       	mov    edi,0x3f9
c0007ebe:	56                   	push   esi
c0007ebf:	89 fa                	mov    edx,edi
c0007ec1:	53                   	push   ebx
c0007ec2:	31 f6                	xor    esi,esi
c0007ec4:	83 ec 2c             	sub    esp,0x2c
c0007ec7:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007ecc:	a3 b0 09 02 c0       	mov    ds:0xc00209b0,eax
c0007ed1:	89 f0                	mov    eax,esi
c0007ed3:	ee                   	out    dx,al
c0007ed4:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007ed9:	b0 80                	mov    al,0x80
c0007edb:	89 da                	mov    edx,ebx
c0007edd:	ee                   	out    dx,al
c0007ede:	b1 03                	mov    cl,0x3
c0007ee0:	ba f8 03 00 00       	mov    edx,0x3f8
c0007ee5:	88 c8                	mov    al,cl
c0007ee7:	ee                   	out    dx,al
c0007ee8:	89 f0                	mov    eax,esi
c0007eea:	89 fa                	mov    edx,edi
c0007eec:	ee                   	out    dx,al
c0007eed:	88 c8                	mov    al,cl
c0007eef:	89 da                	mov    edx,ebx
c0007ef1:	ee                   	out    dx,al
c0007ef2:	b0 c7                	mov    al,0xc7
c0007ef4:	ba fa 03 00 00       	mov    edx,0x3fa
c0007ef9:	ee                   	out    dx,al
c0007efa:	b0 0b                	mov    al,0xb
c0007efc:	ba fc 03 00 00       	mov    edx,0x3fc
c0007f01:	ee                   	out    dx,al
c0007f02:	68 a0 d7 01 c0       	push   0xc001d7a0
c0007f07:	e8 e8 2b 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0007f0c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007f11:	05 ff 0f 00 00       	add    eax,0xfff
c0007f16:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1e:	e8 64 03 00 00       	call   c0008287 <Phys::physicalMemorySetup(unsigned int)>
c0007f23:	e8 38 1b 00 00       	call   c0009a60 <Virt::virtualMemorySetup()>
c0007f28:	58                   	pop    eax
c0007f29:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007f2d:	53                   	push   ebx
c0007f2e:	e8 e9 1b 00 00       	call   c0009b1c <VAS::VAS()>
c0007f33:	89 1d 90 0a 02 c0    	mov    DWORD PTR ds:0xc0020a90,ebx
c0007f39:	e8 e2 80 ff ff       	call   c0000020 <callGlobalConstructors>
c0007f3e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007f45:	e8 13 ff ff ff       	call   c0007e5d <malloc>
c0007f4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f4d:	89 c6                	mov    esi,eax
c0007f4f:	e8 82 f2 ff ff       	call   c00071d6 <Computer::Computer()>
c0007f54:	6a 00                	push   0x0
c0007f56:	89 35 98 09 02 c0    	mov    DWORD PTR ds:0xc0020998,esi
c0007f5c:	6a 00                	push   0x0
c0007f5e:	6a 00                	push   0x0
c0007f60:	56                   	push   esi
c0007f61:	e8 16 f6 ff ff       	call   c000757c <Computer::open(int, int, void*)>
c0007f66:	83 c4 14             	add    esp,0x14
c0007f69:	53                   	push   ebx
c0007f6a:	e8 63 1e 00 00       	call   c0009dd2 <VAS::~VAS()>
c0007f6f:	83 c4 30             	add    esp,0x30
c0007f72:	5b                   	pop    ebx
c0007f73:	5e                   	pop    esi
c0007f74:	5f                   	pop    edi
c0007f75:	c3                   	ret    

c0007f76 <Phys::allocateDMA(unsigned long)>:
c0007f76:	55                   	push   ebp
c0007f77:	31 ed                	xor    ebp,ebp
c0007f79:	57                   	push   edi
c0007f7a:	56                   	push   esi
c0007f7b:	53                   	push   ebx
c0007f7c:	31 db                	xor    ebx,ebx
c0007f7e:	83 ec 1c             	sub    esp,0x1c
c0007f81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007f85:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007f8d:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007f93:	31 c0                	xor    eax,eax
c0007f95:	c1 ef 0c             	shr    edi,0xc
c0007f98:	eb 19                	jmp    c0007fb3 <Phys::allocateDMA(unsigned long)+0x3d>
c0007f9a:	85 c0                	test   eax,eax
c0007f9c:	75 06                	jne    c0007fa4 <Phys::allocateDMA(unsigned long)+0x2e>
c0007f9e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fa2:	89 dd                	mov    ebp,ebx
c0007fa4:	8d 70 01             	lea    esi,[eax+0x1]
c0007fa7:	39 f7                	cmp    edi,esi
c0007fa9:	74 33                	je     c0007fde <Phys::allocateDMA(unsigned long)+0x68>
c0007fab:	89 f0                	mov    eax,esi
c0007fad:	43                   	inc    ebx
c0007fae:	83 fb 0f             	cmp    ebx,0xf
c0007fb1:	7f 11                	jg     c0007fc4 <Phys::allocateDMA(unsigned long)+0x4e>
c0007fb3:	80 bb cc 09 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf634],0x0
c0007fba:	74 de                	je     c0007f9a <Phys::allocateDMA(unsigned long)+0x24>
c0007fbc:	31 c0                	xor    eax,eax
c0007fbe:	43                   	inc    ebx
c0007fbf:	83 fb 0f             	cmp    ebx,0xf
c0007fc2:	7e ef                	jle    c0007fb3 <Phys::allocateDMA(unsigned long)+0x3d>
c0007fc4:	83 ec 0c             	sub    esp,0xc
c0007fc7:	68 b8 d7 01 c0       	push   0xc001d7b8
c0007fcc:	e8 f2 86 00 00       	call   c00106c3 <KePanic(char const*)>
c0007fd1:	83 c4 10             	add    esp,0x10
c0007fd4:	31 c0                	xor    eax,eax
c0007fd6:	83 c4 1c             	add    esp,0x1c
c0007fd9:	5b                   	pop    ebx
c0007fda:	5e                   	pop    esi
c0007fdb:	5f                   	pop    edi
c0007fdc:	5d                   	pop    ebp
c0007fdd:	c3                   	ret    
c0007fde:	89 e9                	mov    ecx,ebp
c0007fe0:	c1 f9 04             	sar    ecx,0x4
c0007fe3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007fe7:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007feb:	89 ca                	mov    edx,ecx
c0007fed:	4a                   	dec    edx
c0007fee:	79 03                	jns    c0007ff3 <Phys::allocateDMA(unsigned long)+0x7d>
c0007ff0:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007ff3:	c1 fa 04             	sar    edx,0x4
c0007ff6:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007ffa:	74 08                	je     c0008004 <Phys::allocateDMA(unsigned long)+0x8e>
c0007ffc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008000:	31 c0                	xor    eax,eax
c0008002:	eb ba                	jmp    c0007fbe <Phys::allocateDMA(unsigned long)+0x48>
c0008004:	85 f6                	test   esi,esi
c0008006:	74 15                	je     c000801d <Phys::allocateDMA(unsigned long)+0xa7>
c0008008:	8d 95 cc 09 02 c0    	lea    edx,[ebp-0x3ffdf634]
c000800e:	8d 84 05 cd 09 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf633]
c0008015:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0008018:	42                   	inc    edx
c0008019:	39 d0                	cmp    eax,edx
c000801b:	75 f8                	jne    c0008015 <Phys::allocateDMA(unsigned long)+0x9f>
c000801d:	01 3d c4 09 02 c0    	add    DWORD PTR ds:0xc00209c4,edi
c0008023:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008027:	85 c0                	test   eax,eax
c0008029:	74 17                	je     c0008042 <Phys::allocateDMA(unsigned long)+0xcc>
c000802b:	83 ec 0c             	sub    esp,0xc
c000802e:	68 b8 d7 01 c0       	push   0xc001d7b8
c0008033:	e8 8b 86 00 00       	call   c00106c3 <KePanic(char const*)>
c0008038:	83 c4 10             	add    esp,0x10
c000803b:	89 f0                	mov    eax,esi
c000803d:	e9 6b ff ff ff       	jmp    c0007fad <Phys::allocateDMA(unsigned long)+0x37>
c0008042:	c1 e5 0c             	shl    ebp,0xc
c0008045:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000804b:	eb 89                	jmp    c0007fd6 <Phys::allocateDMA(unsigned long)+0x60>

c000804d <Phys::freeDMA(unsigned long, unsigned long)>:
c000804d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008051:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0008057:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000805b:	c1 ea 0c             	shr    edx,0xc
c000805e:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0008063:	29 15 c4 09 02 c0    	sub    DWORD PTR ds:0xc00209c4,edx
c0008069:	c1 e8 0c             	shr    eax,0xc
c000806c:	85 d2                	test   edx,edx
c000806e:	74 0f                	je     c000807f <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0008070:	05 cc 09 02 c0       	add    eax,0xc00209cc
c0008075:	01 c2                	add    edx,eax
c0008077:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000807a:	40                   	inc    eax
c000807b:	39 d0                	cmp    eax,edx
c000807d:	75 f8                	jne    c0008077 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c000807f:	c3                   	ret    

c0008080 <Phys::setPageState(unsigned long, bool)>:
c0008080:	56                   	push   esi
c0008081:	ba 01 00 00 00       	mov    edx,0x1
c0008086:	53                   	push   ebx
c0008087:	8b 35 1c f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f71c
c000808d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008091:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008095:	89 c8                	mov    eax,ecx
c0008097:	83 e1 07             	and    ecx,0x7
c000809a:	c1 e8 03             	shr    eax,0x3
c000809d:	d3 e3                	shl    ebx,cl
c000809f:	01 c6                	add    esi,eax
c00080a1:	d3 e2                	shl    edx,cl
c00080a3:	f7 d2                	not    edx
c00080a5:	20 16                	and    BYTE PTR [esi],dl
c00080a7:	03 05 1c f7 01 c0    	add    eax,DWORD PTR ds:0xc001f71c
c00080ad:	08 18                	or     BYTE PTR [eax],bl
c00080af:	5b                   	pop    ebx
c00080b0:	5e                   	pop    esi
c00080b1:	c3                   	ret    

c00080b2 <Phys::getPageState(unsigned long)>:
c00080b2:	53                   	push   ebx
c00080b3:	8b 15 1c f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f71c
c00080b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00080bd:	31 db                	xor    ebx,ebx
c00080bf:	89 c8                	mov    eax,ecx
c00080c1:	83 e1 07             	and    ecx,0x7
c00080c4:	c1 e8 03             	shr    eax,0x3
c00080c7:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c00080ca:	89 d8                	mov    eax,ebx
c00080cc:	5b                   	pop    ebx
c00080cd:	d3 f8                	sar    eax,cl
c00080cf:	83 e0 01             	and    eax,0x1
c00080d2:	c3                   	ret    

c00080d3 <Phys::freePage(unsigned long)>:
c00080d3:	53                   	push   ebx
c00080d4:	83 ec 08             	sub    esp,0x8
c00080d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080db:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00080e1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00080e7:	76 3a                	jbe    c0008123 <Phys::freePage(unsigned long)+0x50>
c00080e9:	c1 e8 0c             	shr    eax,0xc
c00080ec:	50                   	push   eax
c00080ed:	89 c3                	mov    ebx,eax
c00080ef:	e8 be ff ff ff       	call   c00080b2 <Phys::getPageState(unsigned long)>
c00080f4:	5a                   	pop    edx
c00080f5:	84 c0                	test   al,al
c00080f7:	74 19                	je     c0008112 <Phys::freePage(unsigned long)+0x3f>
c00080f9:	83 ec 08             	sub    esp,0x8
c00080fc:	ff 0d c4 09 02 c0    	dec    DWORD PTR ds:0xc00209c4
c0008102:	6a 00                	push   0x0
c0008104:	53                   	push   ebx
c0008105:	e8 76 ff ff ff       	call   c0008080 <Phys::setPageState(unsigned long, bool)>
c000810a:	83 c4 10             	add    esp,0x10
c000810d:	83 c4 08             	add    esp,0x8
c0008110:	5b                   	pop    ebx
c0008111:	c3                   	ret    
c0008112:	c7 44 24 10 5d d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d85d
c000811a:	83 c4 08             	add    esp,0x8
c000811d:	5b                   	pop    ebx
c000811e:	e9 a0 85 00 00       	jmp    c00106c3 <KePanic(char const*)>
c0008123:	68 00 10 00 00       	push   0x1000
c0008128:	50                   	push   eax
c0008129:	e8 1f ff ff ff       	call   c000804d <Phys::freeDMA(unsigned long, unsigned long)>
c000812e:	59                   	pop    ecx
c000812f:	5b                   	pop    ebx
c0008130:	83 c4 08             	add    esp,0x8
c0008133:	5b                   	pop    ebx
c0008134:	c3                   	ret    

c0008135 <Phys::allocatePage()>:
c0008135:	56                   	push   esi
c0008136:	53                   	push   ebx
c0008137:	83 ec 14             	sub    esp,0x14
c000813a:	8b 35 b8 09 02 c0    	mov    esi,DWORD PTR ds:0xc00209b8
c0008140:	89 f3                	mov    ebx,esi
c0008142:	eb 0a                	jmp    c000814e <Phys::allocatePage()+0x19>
c0008144:	89 1d b8 09 02 c0    	mov    DWORD PTR ds:0xc00209b8,ebx
c000814a:	39 de                	cmp    esi,ebx
c000814c:	74 24                	je     c0008172 <Phys::allocatePage()+0x3d>
c000814e:	53                   	push   ebx
c000814f:	e8 5e ff ff ff       	call   c00080b2 <Phys::getPageState(unsigned long)>
c0008154:	5a                   	pop    edx
c0008155:	84 c0                	test   al,al
c0008157:	74 5f                	je     c00081b8 <Phys::allocatePage()+0x83>
c0008159:	43                   	inc    ebx
c000815a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008160:	75 e2                	jne    c0008144 <Phys::allocatePage()+0xf>
c0008162:	31 db                	xor    ebx,ebx
c0008164:	c7 05 b8 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00209b8,0x0
c000816e:	39 de                	cmp    esi,ebx
c0008170:	75 dc                	jne    c000814e <Phys::allocatePage()+0x19>
c0008172:	83 ec 0c             	sub    esp,0xc
c0008175:	80 35 dc 09 02 c0 01 	xor    BYTE PTR ds:0xc00209dc,0x1
c000817c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008181:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008184:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000818a:	50                   	push   eax
c000818b:	e8 84 26 00 00       	call   c000a814 <VAS::scanForEviction()>
c0008190:	83 c4 10             	add    esp,0x10
c0008193:	85 c0                	test   eax,eax
c0008195:	75 3f                	jne    c00081d6 <Phys::allocatePage()+0xa1>
c0008197:	83 ec 0c             	sub    esp,0xc
c000819a:	68 e0 d7 01 c0       	push   0xc001d7e0
c000819f:	e8 1f 85 00 00       	call   c00106c3 <KePanic(char const*)>
c00081a4:	83 c4 10             	add    esp,0x10
c00081a7:	8b 1d b8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209b8
c00081ad:	53                   	push   ebx
c00081ae:	e8 ff fe ff ff       	call   c00080b2 <Phys::getPageState(unsigned long)>
c00081b3:	5a                   	pop    edx
c00081b4:	84 c0                	test   al,al
c00081b6:	75 a1                	jne    c0008159 <Phys::allocatePage()+0x24>
c00081b8:	6a 01                	push   0x1
c00081ba:	53                   	push   ebx
c00081bb:	e8 c0 fe ff ff       	call   c0008080 <Phys::setPageState(unsigned long, bool)>
c00081c0:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c00081c5:	5a                   	pop    edx
c00081c6:	ff 05 c4 09 02 c0    	inc    DWORD PTR ds:0xc00209c4
c00081cc:	c1 e0 0c             	shl    eax,0xc
c00081cf:	59                   	pop    ecx
c00081d0:	83 c4 14             	add    esp,0x14
c00081d3:	5b                   	pop    ebx
c00081d4:	5e                   	pop    esi
c00081d5:	c3                   	ret    
c00081d6:	83 ec 08             	sub    esp,0x8
c00081d9:	89 c2                	mov    edx,eax
c00081db:	6a 01                	push   0x1
c00081dd:	c1 ea 0c             	shr    edx,0xc
c00081e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00081e4:	52                   	push   edx
c00081e5:	e8 96 fe ff ff       	call   c0008080 <Phys::setPageState(unsigned long, bool)>
c00081ea:	83 c4 10             	add    esp,0x10
c00081ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081f1:	eb dd                	jmp    c00081d0 <Phys::allocatePage()+0x9b>

c00081f3 <Phys::allocateContiguousPages(int)>:
c00081f3:	57                   	push   edi
c00081f4:	56                   	push   esi
c00081f5:	53                   	push   ebx
c00081f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00081fa:	fa                   	cli    
c00081fb:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0008201:	31 db                	xor    ebx,ebx
c0008203:	85 db                	test   ebx,ebx
c0008205:	75 11                	jne    c0008218 <Phys::allocateContiguousPages(int)+0x25>
c0008207:	e8 29 ff ff ff       	call   c0008135 <Phys::allocatePage()>
c000820c:	83 fe 01             	cmp    esi,0x1
c000820f:	89 c7                	mov    edi,eax
c0008211:	74 21                	je     c0008234 <Phys::allocateContiguousPages(int)+0x41>
c0008213:	bb 01 00 00 00       	mov    ebx,0x1
c0008218:	e8 18 ff ff ff       	call   c0008135 <Phys::allocatePage()>
c000821d:	89 da                	mov    edx,ebx
c000821f:	c1 e2 0c             	shl    edx,0xc
c0008222:	01 fa                	add    edx,edi
c0008224:	39 c2                	cmp    edx,eax
c0008226:	74 20                	je     c0008248 <Phys::allocateContiguousPages(int)+0x55>
c0008228:	bb 01 00 00 00       	mov    ebx,0x1
c000822d:	89 c7                	mov    edi,eax
c000822f:	83 fe 01             	cmp    esi,0x1
c0008232:	75 e4                	jne    c0008218 <Phys::allocateContiguousPages(int)+0x25>
c0008234:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0008239:	48                   	dec    eax
c000823a:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c000823f:	75 01                	jne    c0008242 <Phys::allocateContiguousPages(int)+0x4f>
c0008241:	fb                   	sti    
c0008242:	89 f8                	mov    eax,edi
c0008244:	5b                   	pop    ebx
c0008245:	5e                   	pop    esi
c0008246:	5f                   	pop    edi
c0008247:	c3                   	ret    
c0008248:	43                   	inc    ebx
c0008249:	39 f3                	cmp    ebx,esi
c000824b:	75 b6                	jne    c0008203 <Phys::allocateContiguousPages(int)+0x10>
c000824d:	eb e5                	jmp    c0008234 <Phys::allocateContiguousPages(int)+0x41>

c000824f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000824f:	56                   	push   esi
c0008250:	53                   	push   ebx
c0008251:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008255:	39 1d bc 09 02 c0    	cmp    DWORD PTR ds:0xc00209bc,ebx
c000825b:	73 06                	jae    c0008263 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000825d:	89 1d bc 09 02 c0    	mov    DWORD PTR ds:0xc00209bc,ebx
c0008263:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008267:	c1 eb 0c             	shr    ebx,0xc
c000826a:	c1 e8 0c             	shr    eax,0xc
c000826d:	39 d8                	cmp    eax,ebx
c000826f:	73 13                	jae    c0008284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0008271:	6a 00                	push   0x0
c0008273:	8d 70 01             	lea    esi,[eax+0x1]
c0008276:	50                   	push   eax
c0008277:	e8 04 fe ff ff       	call   c0008080 <Phys::setPageState(unsigned long, bool)>
c000827c:	5a                   	pop    edx
c000827d:	89 f0                	mov    eax,esi
c000827f:	59                   	pop    ecx
c0008280:	39 f3                	cmp    ebx,esi
c0008282:	75 ed                	jne    c0008271 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0008284:	5b                   	pop    ebx
c0008285:	5e                   	pop    esi
c0008286:	c3                   	ret    

c0008287 <Phys::physicalMemorySetup(unsigned int)>:
c0008287:	55                   	push   ebp
c0008288:	57                   	push   edi
c0008289:	56                   	push   esi
c000828a:	53                   	push   ebx
c000828b:	31 db                	xor    ebx,ebx
c000828d:	83 ec 40             	sub    esp,0x40
c0008290:	6a 10                	push   0x10
c0008292:	6a 00                	push   0x0
c0008294:	68 cc 09 02 c0       	push   0xc00209cc
c0008299:	e8 52 82 ff ff       	call   c00004f0 <memset>
c000829e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00082a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00082a7:	05 00 10 00 00       	add    eax,0x1000
c00082ac:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00082b0:	5a                   	pop    edx
c00082b1:	59                   	pop    ecx
c00082b2:	50                   	push   eax
c00082b3:	68 73 d8 01 c0       	push   0xc001d873
c00082b8:	e8 37 28 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c00082bd:	83 c4 10             	add    esp,0x10
c00082c0:	83 ec 08             	sub    esp,0x8
c00082c3:	6a 01                	push   0x1
c00082c5:	53                   	push   ebx
c00082c6:	43                   	inc    ebx
c00082c7:	e8 b4 fd ff ff       	call   c0008080 <Phys::setPageState(unsigned long, bool)>
c00082cc:	83 c4 10             	add    esp,0x10
c00082cf:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00082d5:	75 e9                	jne    c00082c0 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00082d7:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00082dd:	66 85 c0             	test   ax,ax
c00082e0:	0f 84 97 01 00 00    	je     c000847d <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00082e6:	89 c7                	mov    edi,eax
c00082e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00082f0:	81 e7 ff ff 00 00    	and    edi,0xffff
c00082f6:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00082fb:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00082ff:	eb 15                	jmp    c0008316 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0008301:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0008305:	83 c3 18             	add    ebx,0x18
c0008308:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000830c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008310:	0f 84 77 01 00 00    	je     c000848d <Phys::physicalMemorySetup(unsigned int)+0x206>
c0008316:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008319:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000831c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000831f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008323:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008327:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008329:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000832c:	01 f0                	add    eax,esi
c000832e:	55                   	push   ebp
c000832f:	11 fa                	adc    edx,edi
c0008331:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008335:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008339:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000833d:	50                   	push   eax
c000833e:	56                   	push   esi
c000833f:	68 10 d8 01 c0       	push   0xc001d810
c0008344:	e8 ab 27 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0008349:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000834d:	83 c4 10             	add    esp,0x10
c0008350:	09 f8                	or     eax,edi
c0008352:	0f 85 35 01 00 00    	jne    c000848d <Phys::physicalMemorySetup(unsigned int)+0x206>
c0008358:	4d                   	dec    ebp
c0008359:	75 a6                	jne    c0008301 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000835b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000835f:	ba 00 00 08 00       	mov    edx,0x80000
c0008364:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0008368:	39 f2                	cmp    edx,esi
c000836a:	89 c1                	mov    ecx,eax
c000836c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0008374:	19 f9                	sbb    ecx,edi
c0008376:	0f 82 a7 00 00 00    	jb     c0008423 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000837c:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008380:	89 c1                	mov    ecx,eax
c0008382:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008386:	0f 83 97 00 00 00    	jae    c0008423 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000838c:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008391:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008395:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008399:	39 fa                	cmp    edx,edi
c000839b:	19 e8                	sbb    eax,ebp
c000839d:	0f 82 9a 01 00 00    	jb     c000853d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c00083a3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00083a7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00083ab:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00083b1:	ba ff 1f 00 00       	mov    edx,0x1fff
c00083b6:	83 d5 ff             	adc    ebp,0xffffffff
c00083b9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00083bd:	31 c0                	xor    eax,eax
c00083bf:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00083c3:	39 fa                	cmp    edx,edi
c00083c5:	89 c1                	mov    ecx,eax
c00083c7:	19 e9                	sbb    ecx,ebp
c00083c9:	0f 83 32 ff ff ff    	jae    c0008301 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00083cf:	be 00 00 08 00       	mov    esi,0x80000
c00083d4:	51                   	push   ecx
c00083d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00083d9:	57                   	push   edi
c00083da:	56                   	push   esi
c00083db:	68 34 d8 01 c0       	push   0xc001d834
c00083e0:	e8 0f 27 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c00083e5:	5d                   	pop    ebp
c00083e6:	58                   	pop    eax
c00083e7:	57                   	push   edi
c00083e8:	56                   	push   esi
c00083e9:	e8 61 fe ff ff       	call   c000824f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00083ee:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00083f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00083f6:	83 c4 0c             	add    esp,0xc
c00083f9:	0f ac d0 0c          	shrd   eax,edx,0xc
c00083fd:	03 05 c8 09 02 c0    	add    eax,DWORD PTR ds:0xc00209c8
c0008403:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000840a:	a3 c8 09 02 c0       	mov    ds:0xc00209c8,eax
c000840f:	52                   	push   edx
c0008410:	50                   	push   eax
c0008411:	68 99 d8 01 c0       	push   0xc001d899
c0008416:	e8 d9 26 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	e9 de fe ff ff       	jmp    c0008301 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008423:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0008427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000842b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000842f:	39 ea                	cmp    edx,ebp
c0008431:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0008435:	0f 82 c6 fe ff ff    	jb     c0008301 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000843b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008440:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0008444:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0008448:	0f 83 b3 fe ff ff    	jae    c0008301 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000844e:	39 ee                	cmp    esi,ebp
c0008450:	89 f8                	mov    eax,edi
c0008452:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0008456:	0f 83 78 ff ff ff    	jae    c00083d4 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c000845c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008460:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008464:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008468:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000846c:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008470:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008474:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008478:	e9 57 ff ff ff       	jmp    c00083d4 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c000847d:	83 ec 0c             	sub    esp,0xc
c0008480:	68 8b d8 01 c0       	push   0xc001d88b
c0008485:	e8 39 82 00 00       	call   c00106c3 <KePanic(char const*)>
c000848a:	83 c4 10             	add    esp,0x10
c000848d:	83 ec 08             	sub    esp,0x8
c0008490:	bb 60 00 00 00       	mov    ebx,0x60
c0008495:	6a 00                	push   0x0
c0008497:	6a 06                	push   0x6
c0008499:	e8 e2 fb ff ff       	call   c0008080 <Phys::setPageState(unsigned long, bool)>
c000849e:	58                   	pop    eax
c000849f:	5a                   	pop    edx
c00084a0:	6a 00                	push   0x0
c00084a2:	6a 07                	push   0x7
c00084a4:	e8 d7 fb ff ff       	call   c0008080 <Phys::setPageState(unsigned long, bool)>
c00084a9:	83 05 c8 09 02 c0 02 	add    DWORD PTR ds:0xc00209c8,0x2
c00084b0:	83 c4 10             	add    esp,0x10
c00084b3:	83 ec 08             	sub    esp,0x8
c00084b6:	6a 00                	push   0x0
c00084b8:	53                   	push   ebx
c00084b9:	43                   	inc    ebx
c00084ba:	e8 c1 fb ff ff       	call   c0008080 <Phys::setPageState(unsigned long, bool)>
c00084bf:	83 c4 10             	add    esp,0x10
c00084c2:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00084c8:	75 e9                	jne    c00084b3 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00084ca:	a1 c8 09 02 c0       	mov    eax,ds:0xc00209c8
c00084cf:	bb 40 01 00 00       	mov    ebx,0x140
c00084d4:	83 c0 20             	add    eax,0x20
c00084d7:	a3 c8 09 02 c0       	mov    ds:0xc00209c8,eax
c00084dc:	eb 22                	jmp    c0008500 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00084de:	83 ec 08             	sub    esp,0x8
c00084e1:	6a 00                	push   0x0
c00084e3:	53                   	push   ebx
c00084e4:	43                   	inc    ebx
c00084e5:	e8 96 fb ff ff       	call   c0008080 <Phys::setPageState(unsigned long, bool)>
c00084ea:	a1 c8 09 02 c0       	mov    eax,ds:0xc00209c8
c00084ef:	83 c4 10             	add    esp,0x10
c00084f2:	40                   	inc    eax
c00084f3:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00084f9:	a3 c8 09 02 c0       	mov    ds:0xc00209c8,eax
c00084fe:	74 07                	je     c0008507 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0008500:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008505:	7e d7                	jle    c00084de <Phys::physicalMemorySetup(unsigned int)+0x257>
c0008507:	bb d0 01 00 00       	mov    ebx,0x1d0
c000850c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008511:	7f 22                	jg     c0008535 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0008513:	83 ec 08             	sub    esp,0x8
c0008516:	6a 00                	push   0x0
c0008518:	53                   	push   ebx
c0008519:	43                   	inc    ebx
c000851a:	e8 61 fb ff ff       	call   c0008080 <Phys::setPageState(unsigned long, bool)>
c000851f:	a1 c8 09 02 c0       	mov    eax,ds:0xc00209c8
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	40                   	inc    eax
c0008528:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000852e:	a3 c8 09 02 c0       	mov    ds:0xc00209c8,eax
c0008533:	75 d7                	jne    c000850c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0008535:	83 c4 3c             	add    esp,0x3c
c0008538:	5b                   	pop    ebx
c0008539:	5e                   	pop    esi
c000853a:	5f                   	pop    edi
c000853b:	5d                   	pop    ebp
c000853c:	c3                   	ret    
c000853d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0008545:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000854d:	e9 51 fe ff ff       	jmp    c00083a3 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0008552 <Pipe::isAtty()>:
c0008552:	31 c0                	xor    eax,eax
c0008554:	c3                   	ret    
c0008555:	90                   	nop

c0008556 <Pipe::~Pipe()>:
c0008556:	83 ec 0c             	sub    esp,0xc
c0008559:	ba f8 d8 01 c0       	mov    edx,0xc001d8f8
c000855e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008562:	89 10                	mov    DWORD PTR [eax],edx
c0008564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008568:	83 ec 0c             	sub    esp,0xc
c000856b:	50                   	push   eax
c000856c:	e8 cf 10 00 00       	call   c0009640 <UnixFile::~UnixFile()>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	90                   	nop
c0008575:	83 c4 0c             	add    esp,0xc
c0008578:	c3                   	ret    
c0008579:	90                   	nop

c000857a <Pipe::~Pipe()>:
c000857a:	83 ec 0c             	sub    esp,0xc
c000857d:	83 ec 0c             	sub    esp,0xc
c0008580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008584:	e8 cd ff ff ff       	call   c0008556 <Pipe::~Pipe()>
c0008589:	83 c4 10             	add    esp,0x10
c000858c:	83 ec 08             	sub    esp,0x8
c000858f:	6a 20                	push   0x20
c0008591:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008595:	e8 64 24 00 00       	call   c000a9fe <operator delete(void*, unsigned long)>
c000859a:	83 c4 10             	add    esp,0x10
c000859d:	83 c4 0c             	add    esp,0xc
c00085a0:	c3                   	ret    
c00085a1:	90                   	nop

c00085a2 <Pipe::write(unsigned long long, void*, int*)>:
c00085a2:	55                   	push   ebp
c00085a3:	57                   	push   edi
c00085a4:	56                   	push   esi
c00085a5:	53                   	push   ebx
c00085a6:	83 ec 1c             	sub    esp,0x1c
c00085a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00085ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00085b1:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00085b4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00085b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00085bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00085bf:	89 d8                	mov    eax,ebx
c00085c1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00085c4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00085c8:	89 d6                	mov    esi,edx
c00085ca:	89 d7                	mov    edi,edx
c00085cc:	c1 ff 1f             	sar    edi,0x1f
c00085cf:	03 34 24             	add    esi,DWORD PTR [esp]
c00085d2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00085d6:	c1 f8 1f             	sar    eax,0x1f
c00085d9:	39 f3                	cmp    ebx,esi
c00085db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e3:	19 f8                	sbb    eax,edi
c00085e5:	b8 01 00 00 00       	mov    eax,0x1
c00085ea:	72 6e                	jb     c000865a <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00085ec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00085ef:	01 d0                	add    eax,edx
c00085f1:	99                   	cdq    
c00085f2:	f7 fb                	idiv   ebx
c00085f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f8:	29 d3                	sub    ebx,edx
c00085fa:	89 d7                	mov    edi,edx
c00085fc:	89 de                	mov    esi,ebx
c00085fe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008601:	c1 fb 1f             	sar    ebx,0x1f
c0008604:	39 f2                	cmp    edx,esi
c0008606:	19 d8                	sbb    eax,ebx
c0008608:	b8 00 00 00 00       	mov    eax,0x0
c000860d:	72 04                	jb     c0008613 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000860f:	89 d0                	mov    eax,edx
c0008611:	29 f0                	sub    eax,esi
c0008613:	89 d3                	mov    ebx,edx
c0008615:	29 c3                	sub    ebx,eax
c0008617:	74 0b                	je     c0008624 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008619:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000861c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008620:	89 d9                	mov    ecx,ebx
c0008622:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008624:	85 c0                	test   eax,eax
c0008626:	74 0d                	je     c0008635 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008628:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000862c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000862f:	89 de                	mov    esi,ebx
c0008631:	89 c1                	mov    ecx,eax
c0008633:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008635:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008638:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000863d:	75 10                	jne    c000864f <Pipe::write(unsigned long long, void*, int*)+0xad>
c000863f:	83 ec 0c             	sub    esp,0xc
c0008642:	68 b5 d8 01 c0       	push   0xc001d8b5
c0008647:	e8 77 80 00 00       	call   c00106c3 <KePanic(char const*)>
c000864c:	83 c4 10             	add    esp,0x10
c000864f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008653:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008656:	89 08                	mov    DWORD PTR [eax],ecx
c0008658:	31 c0                	xor    eax,eax
c000865a:	83 c4 1c             	add    esp,0x1c
c000865d:	5b                   	pop    ebx
c000865e:	5e                   	pop    esi
c000865f:	5f                   	pop    edi
c0008660:	5d                   	pop    ebp
c0008661:	c3                   	ret    

c0008662 <Pipe::read(unsigned long long, void*, int*)>:
c0008662:	55                   	push   ebp
c0008663:	57                   	push   edi
c0008664:	56                   	push   esi
c0008665:	53                   	push   ebx
c0008666:	83 ec 1c             	sub    esp,0x1c
c0008669:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000866d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008671:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008675:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008678:	89 c8                	mov    eax,ecx
c000867a:	99                   	cdq    
c000867b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000867f:	74 24                	je     c00086a5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008681:	39 f9                	cmp    ecx,edi
c0008683:	89 d1                	mov    ecx,edx
c0008685:	19 f1                	sbb    ecx,esi
c0008687:	73 1c                	jae    c00086a5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008689:	fa                   	cli    
c000868a:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0008690:	e8 87 b2 00 00       	call   c001391c <schedule()>
c0008695:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000869a:	48                   	dec    eax
c000869b:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c00086a0:	75 d3                	jne    c0008675 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00086a2:	fb                   	sti    
c00086a3:	eb d0                	jmp    c0008675 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00086a5:	39 f8                	cmp    eax,edi
c00086a7:	89 d1                	mov    ecx,edx
c00086a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00086ac:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00086b0:	19 f1                	sbb    ecx,esi
c00086b2:	73 07                	jae    c00086bb <Pipe::read(unsigned long long, void*, int*)+0x59>
c00086b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00086b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00086bb:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00086be:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00086c1:	29 f7                	sub    edi,esi
c00086c3:	89 f8                	mov    eax,edi
c00086c5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00086c9:	99                   	cdq    
c00086ca:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00086cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086d1:	19 d0                	sbb    eax,edx
c00086d3:	73 07                	jae    c00086dc <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00086d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00086d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086dc:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00086df:	89 ea                	mov    edx,ebp
c00086e1:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00086e5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00086ea:	74 0d                	je     c00086f9 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00086ec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00086ef:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00086f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00086f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00086f9:	85 d2                	test   edx,edx
c00086fb:	74 11                	je     c000870e <Pipe::read(unsigned long long, void*, int*)+0xac>
c00086fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008701:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008704:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008708:	89 d1                	mov    ecx,edx
c000870a:	89 c7                	mov    edi,eax
c000870c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008711:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008714:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008717:	99                   	cdq    
c0008718:	89 f7                	mov    edi,esi
c000871a:	03 04 24             	add    eax,DWORD PTR [esp]
c000871d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008721:	c1 ff 1f             	sar    edi,0x1f
c0008724:	57                   	push   edi
c0008725:	56                   	push   esi
c0008726:	52                   	push   edx
c0008727:	50                   	push   eax
c0008728:	e8 d3 3b 01 00       	call   c001c300 <__umoddi3>
c000872d:	83 c4 10             	add    esp,0x10
c0008730:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008733:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008738:	75 10                	jne    c000874a <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000873a:	83 ec 0c             	sub    esp,0xc
c000873d:	68 d2 d8 01 c0       	push   0xc001d8d2
c0008742:	e8 7c 7f 00 00       	call   c00106c3 <KePanic(char const*)>
c0008747:	83 c4 10             	add    esp,0x10
c000874a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000874e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008751:	89 10                	mov    DWORD PTR [eax],edx
c0008753:	83 c4 1c             	add    esp,0x1c
c0008756:	31 c0                	xor    eax,eax
c0008758:	5b                   	pop    ebx
c0008759:	5e                   	pop    esi
c000875a:	5f                   	pop    edi
c000875b:	5d                   	pop    ebp
c000875c:	c3                   	ret    
c000875d:	90                   	nop

c000875e <Pipe::Pipe(int)>:
c000875e:	83 ec 0c             	sub    esp,0xc
c0008761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008765:	83 ec 08             	sub    esp,0x8
c0008768:	6a 00                	push   0x0
c000876a:	50                   	push   eax
c000876b:	e8 ee 0c 00 00       	call   c000945e <UnixFile::UnixFile(int)>
c0008770:	83 c4 10             	add    esp,0x10
c0008773:	ba f8 d8 01 c0       	mov    edx,0xc001d8f8
c0008778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000877c:	89 10                	mov    DWORD PTR [eax],edx
c000877e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008782:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008786:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000878d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008798:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000879f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087a3:	83 ec 0c             	sub    esp,0xc
c00087a6:	50                   	push   eax
c00087a7:	e8 b1 f6 ff ff       	call   c0007e5d <malloc>
c00087ac:	83 c4 10             	add    esp,0x10
c00087af:	89 c2                	mov    edx,eax
c00087b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00087b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087bc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00087c0:	90                   	nop
c00087c1:	83 c4 0c             	add    esp,0xc
c00087c4:	c3                   	ret    
c00087c5:	90                   	nop

c00087c6 <VgaText::isAtty()>:
c00087c6:	b0 01                	mov    al,0x1
c00087c8:	c3                   	ret    
c00087c9:	90                   	nop

c00087ca <VgaText::~VgaText()>:
c00087ca:	83 ec 0c             	sub    esp,0xc
c00087cd:	ba 80 d9 01 c0       	mov    edx,0xc001d980
c00087d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087d6:	89 10                	mov    DWORD PTR [eax],edx
c00087d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087dc:	83 ec 0c             	sub    esp,0xc
c00087df:	50                   	push   eax
c00087e0:	e8 5b 0e 00 00       	call   c0009640 <UnixFile::~UnixFile()>
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	90                   	nop
c00087e9:	83 c4 0c             	add    esp,0xc
c00087ec:	c3                   	ret    
c00087ed:	90                   	nop

c00087ee <VgaText::~VgaText()>:
c00087ee:	83 ec 0c             	sub    esp,0xc
c00087f1:	83 ec 0c             	sub    esp,0xc
c00087f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087f8:	e8 cd ff ff ff       	call   c00087ca <VgaText::~VgaText()>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	83 ec 08             	sub    esp,0x8
c0008803:	68 34 01 00 00       	push   0x134
c0008808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000880c:	e8 ed 21 00 00       	call   c000a9fe <operator delete(void*, unsigned long)>
c0008811:	83 c4 10             	add    esp,0x10
c0008814:	83 c4 0c             	add    esp,0xc
c0008817:	c3                   	ret    

c0008818 <VgaText::read(unsigned long long, void*, int*)>:
c0008818:	83 ec 10             	sub    esp,0x10
c000881b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000881f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008823:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008827:	e8 22 45 00 00       	call   c000cd4e <readKeyboard(VgaText*, char*, unsigned long)>
c000882c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008830:	89 02                	mov    DWORD PTR [edx],eax
c0008832:	31 c0                	xor    eax,eax
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <setTerminalScrollLock(bool)>:
c0008838:	c3                   	ret    

c0008839 <doTerminalCycle()>:
c0008839:	c3                   	ret    

c000883a <addToTerminalCycle(VgaText*)>:
c000883a:	c3                   	ret    

c000883b <scrollTerminalScrollLock(int)>:
c000883b:	c3                   	ret    

c000883c <VgaText::updateTitle()>:
c000883c:	c3                   	ret    
c000883d:	90                   	nop

c000883e <VgaText::load()>:
c000883e:	c3                   	ret    
c000883f:	90                   	nop

c0008840 <VgaText::updateCursor()>:
c0008840:	83 ec 14             	sub    esp,0x14
c0008843:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008847:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000884a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000884d:	e8 a6 dc 00 00       	call   c00164f8 <HalConsoleCursorUpdate(int, int)>
c0008852:	83 c4 1c             	add    esp,0x1c
c0008855:	c3                   	ret    

c0008856 <VgaText::doANSI_SGR(int)>:
c0008856:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000885a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000885e:	85 d2                	test   edx,edx
c0008860:	75 0b                	jne    c000886d <VgaText::doANSI_SGR(int)+0x17>
c0008862:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008865:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008868:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000886b:	eb 59                	jmp    c00088c6 <VgaText::doANSI_SGR(int)+0x70>
c000886d:	83 fa 07             	cmp    edx,0x7
c0008870:	75 0b                	jne    c000887d <VgaText::doANSI_SGR(int)+0x27>
c0008872:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008875:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008878:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000887b:	eb 49                	jmp    c00088c6 <VgaText::doANSI_SGR(int)+0x70>
c000887d:	83 fa 1b             	cmp    edx,0x1b
c0008880:	74 e0                	je     c0008862 <VgaText::doANSI_SGR(int)+0xc>
c0008882:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008885:	83 f9 07             	cmp    ecx,0x7
c0008888:	77 09                	ja     c0008893 <VgaText::doANSI_SGR(int)+0x3d>
c000888a:	8b 14 8d 40 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe08c0]
c0008891:	eb 20                	jmp    c00088b3 <VgaText::doANSI_SGR(int)+0x5d>
c0008893:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008896:	83 f9 07             	cmp    ecx,0x7
c0008899:	77 09                	ja     c00088a4 <VgaText::doANSI_SGR(int)+0x4e>
c000889b:	8b 14 8d 40 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe08c0]
c00088a2:	eb 22                	jmp    c00088c6 <VgaText::doANSI_SGR(int)+0x70>
c00088a4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00088a7:	83 f9 07             	cmp    ecx,0x7
c00088aa:	77 0b                	ja     c00088b7 <VgaText::doANSI_SGR(int)+0x61>
c00088ac:	8b 14 95 f8 f5 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0a08]
c00088b3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00088b6:	c3                   	ret    
c00088b7:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00088ba:	83 f9 07             	cmp    ecx,0x7
c00088bd:	77 0a                	ja     c00088c9 <VgaText::doANSI_SGR(int)+0x73>
c00088bf:	8b 14 95 d0 f5 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0a30]
c00088c6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00088c9:	c3                   	ret    

c00088ca <VgaText::setDefaultBgColour(VgaColour)>:
c00088ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00088ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00088d2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00088d5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00088d8:	c3                   	ret    
c00088d9:	90                   	nop

c00088da <VgaText::setDefaultFgColour(VgaColour)>:
c00088da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00088de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00088e2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00088e5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00088e8:	c3                   	ret    
c00088e9:	90                   	nop

c00088ea <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00088ea:	53                   	push   ebx
c00088eb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00088ef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00088f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00088f7:	51                   	push   ecx
c00088f8:	e8 cd ff ff ff       	call   c00088ca <VgaText::setDefaultBgColour(VgaColour)>
c00088fd:	58                   	pop    eax
c00088fe:	5a                   	pop    edx
c00088ff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008903:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008907:	5b                   	pop    ebx
c0008908:	eb d0                	jmp    c00088da <VgaText::setDefaultFgColour(VgaColour)>

c000890a <VgaText::setTitleTextColour(VgaColour)>:
c000890a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000890e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008912:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008915:	c3                   	ret    

c0008916 <VgaText::setTitleColour(VgaColour)>:
c0008916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000891a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000891e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008921:	c3                   	ret    

c0008922 <VgaText::setTitle(char*)>:
c0008922:	c3                   	ret    
c0008923:	90                   	nop

c0008924 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008924:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008928:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000892d:	83 e0 0f             	and    eax,0xf
c0008930:	c1 e2 04             	shl    edx,0x4
c0008933:	09 d0                	or     eax,edx
c0008935:	c3                   	ret    

c0008936 <VgaText::scrollScreen()>:
c0008936:	55                   	push   ebp
c0008937:	b9 01 00 00 00       	mov    ecx,0x1
c000893c:	57                   	push   edi
c000893d:	56                   	push   esi
c000893e:	53                   	push   ebx
c000893f:	83 ec 0c             	sub    esp,0xc
c0008942:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008946:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000894c:	31 ff                	xor    edi,edi
c000894e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008951:	83 f9 18             	cmp    ecx,0x18
c0008954:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008957:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000895e:	75 27                	jne    c0008987 <VgaText::scrollScreen()+0x51>
c0008960:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008963:	01 f5                	add    ebp,esi
c0008965:	f7 c7 01 00 00 00    	test   edi,0x1
c000896b:	74 16                	je     c0008983 <VgaText::scrollScreen()+0x4d>
c000896d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008971:	50                   	push   eax
c0008972:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008976:	50                   	push   eax
c0008977:	e8 a8 ff ff ff       	call   c0008924 <VgaText::combineColours(unsigned char, unsigned char)>
c000897c:	5a                   	pop    edx
c000897d:	5a                   	pop    edx
c000897e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0008981:	eb 04                	jmp    c0008987 <VgaText::scrollScreen()+0x51>
c0008983:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0008987:	47                   	inc    edi
c0008988:	46                   	inc    esi
c0008989:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000898f:	75 bd                	jne    c000894e <VgaText::scrollScreen()+0x18>
c0008991:	41                   	inc    ecx
c0008992:	83 f9 19             	cmp    ecx,0x19
c0008995:	75 af                	jne    c0008946 <VgaText::scrollScreen()+0x10>
c0008997:	39 1d e4 09 02 c0    	cmp    DWORD PTR ds:0xc00209e4,ebx
c000899d:	75 1f                	jne    c00089be <VgaText::scrollScreen()+0x88>
c000899f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00089a3:	74 05                	je     c00089aa <VgaText::scrollScreen()+0x74>
c00089a5:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00089a8:	eb 14                	jmp    c00089be <VgaText::scrollScreen()+0x88>
c00089aa:	50                   	push   eax
c00089ab:	50                   	push   eax
c00089ac:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00089b0:	50                   	push   eax
c00089b1:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00089b5:	50                   	push   eax
c00089b6:	e8 c9 d9 00 00       	call   c0016384 <HalConsoleScroll(int, int)>
c00089bb:	83 c4 10             	add    esp,0x10
c00089be:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	5b                   	pop    ebx
c00089c6:	5e                   	pop    esi
c00089c7:	5f                   	pop    edi
c00089c8:	5d                   	pop    ebp
c00089c9:	e9 72 fe ff ff       	jmp    c0008840 <VgaText::updateCursor()>

c00089ce <VgaText::combineCharAndColour(char, unsigned char)>:
c00089ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00089d3:	c1 e0 08             	shl    eax,0x8
c00089d6:	89 c2                	mov    edx,eax
c00089d8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00089dd:	09 d0                	or     eax,edx
c00089df:	c3                   	ret    

c00089e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00089e0:	55                   	push   ebp
c00089e1:	57                   	push   edi
c00089e2:	56                   	push   esi
c00089e3:	53                   	push   ebx
c00089e4:	83 ec 1c             	sub    esp,0x1c
c00089e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00089eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00089ef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00089f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089f7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00089fb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00089ff:	0f b6 c3             	movzx  eax,bl
c0008a02:	50                   	push   eax
c0008a03:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008a08:	50                   	push   eax
c0008a09:	e8 16 ff ff ff       	call   c0008924 <VgaText::combineColours(unsigned char, unsigned char)>
c0008a0e:	5a                   	pop    edx
c0008a0f:	0f b6 c0             	movzx  eax,al
c0008a12:	59                   	pop    ecx
c0008a13:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008a18:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008a1c:	50                   	push   eax
c0008a1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a21:	e8 a8 ff ff ff       	call   c00089ce <VgaText::combineCharAndColour(char, unsigned char)>
c0008a26:	5a                   	pop    edx
c0008a27:	66 6b d7 50          	imul   dx,di,0x50
c0008a2b:	59                   	pop    ecx
c0008a2c:	01 f2                	add    edx,esi
c0008a2e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008a31:	0f b7 d2             	movzx  edx,dx
c0008a34:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008a38:	39 2d e4 09 02 c0    	cmp    DWORD PTR ds:0xc00209e4,ebp
c0008a3e:	75 28                	jne    c0008a68 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008a40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a44:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008a48:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008a4c:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008a50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008a54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008a5c:	83 c4 1c             	add    esp,0x1c
c0008a5f:	5b                   	pop    ebx
c0008a60:	5e                   	pop    esi
c0008a61:	5f                   	pop    edi
c0008a62:	5d                   	pop    ebp
c0008a63:	e9 24 da 00 00       	jmp    c001648c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008a68:	83 c4 1c             	add    esp,0x1c
c0008a6b:	5b                   	pop    ebx
c0008a6c:	5e                   	pop    esi
c0008a6d:	5f                   	pop    edi
c0008a6e:	5d                   	pop    ebp
c0008a6f:	c3                   	ret    

c0008a70 <VgaText::getCursorX()>:
c0008a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a74:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008a77:	c3                   	ret    

c0008a78 <VgaText::getCursorY()>:
c0008a78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a7c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008a7f:	c3                   	ret    

c0008a80 <VgaText::setCursor(int, int)>:
c0008a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a88:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008a8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a8f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008a92:	e9 a9 fd ff ff       	jmp    c0008840 <VgaText::updateCursor()>

c0008a97 <setActiveTerminal(VgaText*)>:
c0008a97:	53                   	push   ebx
c0008a98:	83 ec 08             	sub    esp,0x8
c0008a9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a9f:	85 db                	test   ebx,ebx
c0008aa1:	75 11                	jne    c0008ab4 <setActiveTerminal(VgaText*)+0x1d>
c0008aa3:	c7 44 24 10 0c d9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d90c
c0008aab:	83 c4 08             	add    esp,0x8
c0008aae:	5b                   	pop    ebx
c0008aaf:	e9 0f 7c 00 00       	jmp    c00106c3 <KePanic(char const*)>
c0008ab4:	a1 e4 09 02 c0       	mov    eax,ds:0xc00209e4
c0008ab9:	85 c0                	test   eax,eax
c0008abb:	74 0c                	je     c0008ac9 <setActiveTerminal(VgaText*)+0x32>
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	50                   	push   eax
c0008ac1:	e8 7a fd ff ff       	call   c0008840 <VgaText::updateCursor()>
c0008ac6:	83 c4 10             	add    esp,0x10
c0008ac9:	89 1d e4 09 02 c0    	mov    DWORD PTR ds:0xc00209e4,ebx
c0008acf:	50                   	push   eax
c0008ad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008ad3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008ad6:	53                   	push   ebx
c0008ad7:	e8 a4 ff ff ff       	call   c0008a80 <VgaText::setCursor(int, int)>
c0008adc:	83 c4 18             	add    esp,0x18
c0008adf:	5b                   	pop    ebx
c0008ae0:	c3                   	ret    
c0008ae1:	90                   	nop

c0008ae2 <VgaText::clearScreen()>:
c0008ae2:	57                   	push   edi
c0008ae3:	56                   	push   esi
c0008ae4:	31 f6                	xor    esi,esi
c0008ae6:	53                   	push   ebx
c0008ae7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008aeb:	52                   	push   edx
c0008aec:	6a 00                	push   0x0
c0008aee:	6a 00                	push   0x0
c0008af0:	53                   	push   ebx
c0008af1:	e8 8a ff ff ff       	call   c0008a80 <VgaText::setCursor(int, int)>
c0008af6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008afd:	83 c4 10             	add    esp,0x10
c0008b00:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008b03:	7e 20                	jle    c0008b25 <VgaText::clearScreen()+0x43>
c0008b05:	31 ff                	xor    edi,edi
c0008b07:	50                   	push   eax
c0008b08:	50                   	push   eax
c0008b09:	56                   	push   esi
c0008b0a:	57                   	push   edi
c0008b0b:	47                   	inc    edi
c0008b0c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b0f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b12:	6a 20                	push   0x20
c0008b14:	53                   	push   ebx
c0008b15:	e8 c6 fe ff ff       	call   c00089e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008b1a:	83 c4 20             	add    esp,0x20
c0008b1d:	83 ff 50             	cmp    edi,0x50
c0008b20:	75 e5                	jne    c0008b07 <VgaText::clearScreen()+0x25>
c0008b22:	46                   	inc    esi
c0008b23:	eb db                	jmp    c0008b00 <VgaText::clearScreen()+0x1e>
c0008b25:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008b2c:	5b                   	pop    ebx
c0008b2d:	5e                   	pop    esi
c0008b2e:	5f                   	pop    edi
c0008b2f:	c3                   	ret    

c0008b30 <VgaText::setCursorX(int)>:
c0008b30:	83 ec 10             	sub    esp,0x10
c0008b33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b37:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b3e:	50                   	push   eax
c0008b3f:	e8 3c ff ff ff       	call   c0008a80 <VgaText::setCursor(int, int)>
c0008b44:	83 c4 1c             	add    esp,0x1c
c0008b47:	c3                   	ret    

c0008b48 <VgaText::setCursorY(int)>:
c0008b48:	83 ec 10             	sub    esp,0x10
c0008b4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008b53:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008b56:	50                   	push   eax
c0008b57:	e8 24 ff ff ff       	call   c0008a80 <VgaText::setCursor(int, int)>
c0008b5c:	83 c4 1c             	add    esp,0x1c
c0008b5f:	c3                   	ret    

c0008b60 <VgaText::incrementCursor(bool)>:
c0008b60:	56                   	push   esi
c0008b61:	53                   	push   ebx
c0008b62:	51                   	push   ecx
c0008b63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b67:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b6b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008b6e:	40                   	inc    eax
c0008b6f:	83 f8 50             	cmp    eax,0x50
c0008b72:	74 05                	je     c0008b79 <VgaText::incrementCursor(bool)+0x19>
c0008b74:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008b77:	eb 24                	jmp    c0008b9d <VgaText::incrementCursor(bool)+0x3d>
c0008b79:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b7c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b83:	8d 50 01             	lea    edx,[eax+0x1]
c0008b86:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008b89:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008b8c:	75 0f                	jne    c0008b9d <VgaText::incrementCursor(bool)+0x3d>
c0008b8e:	83 ec 0c             	sub    esp,0xc
c0008b91:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b94:	53                   	push   ebx
c0008b95:	e8 9c fd ff ff       	call   c0008936 <VgaText::scrollScreen()>
c0008b9a:	83 c4 10             	add    esp,0x10
c0008b9d:	89 f0                	mov    eax,esi
c0008b9f:	84 c0                	test   al,al
c0008ba1:	74 0c                	je     c0008baf <VgaText::incrementCursor(bool)+0x4f>
c0008ba3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ba7:	5a                   	pop    edx
c0008ba8:	5b                   	pop    ebx
c0008ba9:	5e                   	pop    esi
c0008baa:	e9 91 fc ff ff       	jmp    c0008840 <VgaText::updateCursor()>
c0008baf:	58                   	pop    eax
c0008bb0:	5b                   	pop    ebx
c0008bb1:	5e                   	pop    esi
c0008bb2:	c3                   	ret    
c0008bb3:	90                   	nop

c0008bb4 <VgaText::decrementCursor(bool)>:
c0008bb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008bb8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008bbc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008bbf:	85 c0                	test   eax,eax
c0008bc1:	74 04                	je     c0008bc7 <VgaText::decrementCursor(bool)+0x13>
c0008bc3:	48                   	dec    eax
c0008bc4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008bc7:	84 c9                	test   cl,cl
c0008bc9:	74 09                	je     c0008bd4 <VgaText::decrementCursor(bool)+0x20>
c0008bcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008bcf:	e9 6c fc ff ff       	jmp    c0008840 <VgaText::updateCursor()>
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop

c0008bd6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008bd6:	53                   	push   ebx
c0008bd7:	83 ec 08             	sub    esp,0x8
c0008bda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008bde:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008be2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008be6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008bea:	3c 07                	cmp    al,0x7
c0008bec:	75 21                	jne    c0008c0f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008bee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008bf6:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008bfe:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008c06:	83 c4 08             	add    esp,0x8
c0008c09:	5b                   	pop    ebx
c0008c0a:	e9 3c 2d 00 00       	jmp    c000b94b <Krnl::beep(int, int, bool)>
c0008c0f:	3c 0d                	cmp    al,0xd
c0008c11:	75 09                	jne    c0008c1c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008c13:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008c1a:	eb 2c                	jmp    c0008c48 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008c1c:	3c 0a                	cmp    al,0xa
c0008c1e:	75 31                	jne    c0008c51 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008c20:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008c23:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008c2a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c2d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008c30:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008c33:	75 0f                	jne    c0008c44 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008c35:	83 ec 0c             	sub    esp,0xc
c0008c38:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008c3b:	53                   	push   ebx
c0008c3c:	e8 f5 fc ff ff       	call   c0008936 <VgaText::scrollScreen()>
c0008c41:	83 c4 10             	add    esp,0x10
c0008c44:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c48:	83 c4 08             	add    esp,0x8
c0008c4b:	5b                   	pop    ebx
c0008c4c:	e9 ef fb ff ff       	jmp    c0008840 <VgaText::updateCursor()>
c0008c51:	3c 08                	cmp    al,0x8
c0008c53:	75 25                	jne    c0008c7a <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008c55:	50                   	push   eax
c0008c56:	50                   	push   eax
c0008c57:	6a 01                	push   0x1
c0008c59:	53                   	push   ebx
c0008c5a:	e8 55 ff ff ff       	call   c0008bb4 <VgaText::decrementCursor(bool)>
c0008c5f:	5a                   	pop    edx
c0008c60:	59                   	pop    ecx
c0008c61:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c67:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c6a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c6d:	6a 20                	push   0x20
c0008c6f:	53                   	push   ebx
c0008c70:	e8 6b fd ff ff       	call   c00089e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c75:	83 c4 28             	add    esp,0x28
c0008c78:	5b                   	pop    ebx
c0008c79:	c3                   	ret    
c0008c7a:	83 ec 08             	sub    esp,0x8
c0008c7d:	0f be c0             	movsx  eax,al
c0008c80:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c83:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c86:	51                   	push   ecx
c0008c87:	52                   	push   edx
c0008c88:	50                   	push   eax
c0008c89:	53                   	push   ebx
c0008c8a:	e8 51 fd ff ff       	call   c00089e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c8f:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008c93:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008c9b:	83 c4 28             	add    esp,0x28
c0008c9e:	5b                   	pop    ebx
c0008c9f:	e9 bc fe ff ff       	jmp    c0008b60 <VgaText::incrementCursor(bool)>

c0008ca4 <VgaText::putchar(char)>:
c0008ca4:	56                   	push   esi
c0008ca5:	53                   	push   ebx
c0008ca6:	83 ec 14             	sub    esp,0x14
c0008ca9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008cad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008cb1:	3c 5b                	cmp    al,0x5b
c0008cb3:	75 18                	jne    c0008ccd <VgaText::putchar(char)+0x29>
c0008cb5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008cb9:	74 1f                	je     c0008cda <VgaText::putchar(char)+0x36>
c0008cbb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008cc1:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008cc8:	e9 bd 00 00 00       	jmp    c0008d8a <VgaText::putchar(char)+0xe6>
c0008ccd:	3c 1b                	cmp    al,0x1b
c0008ccf:	75 09                	jne    c0008cda <VgaText::putchar(char)+0x36>
c0008cd1:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008cd5:	e9 b0 00 00 00       	jmp    c0008d8a <VgaText::putchar(char)+0xe6>
c0008cda:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008cdd:	84 c9                	test   cl,cl
c0008cdf:	0f 84 92 00 00 00    	je     c0008d77 <VgaText::putchar(char)+0xd3>
c0008ce5:	8d 50 c0             	lea    edx,[eax-0x40]
c0008ce8:	80 fa 3e             	cmp    dl,0x3e
c0008ceb:	77 76                	ja     c0008d63 <VgaText::putchar(char)+0xbf>
c0008ced:	3c 6d                	cmp    al,0x6d
c0008cef:	75 47                	jne    c0008d38 <VgaText::putchar(char)+0x94>
c0008cf1:	31 f6                	xor    esi,esi
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	31 c0                	xor    eax,eax
c0008cf7:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008cfa:	7e 2d                	jle    c0008d29 <VgaText::putchar(char)+0x85>
c0008cfc:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008d01:	80 fa 3b             	cmp    dl,0x3b
c0008d04:	75 17                	jne    c0008d1d <VgaText::putchar(char)+0x79>
c0008d06:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008d0a:	50                   	push   eax
c0008d0b:	53                   	push   ebx
c0008d0c:	e8 45 fb ff ff       	call   c0008856 <VgaText::doANSI_SGR(int)>
c0008d11:	59                   	pop    ecx
c0008d12:	31 d2                	xor    edx,edx
c0008d14:	58                   	pop    eax
c0008d15:	31 c0                	xor    eax,eax
c0008d17:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008d1b:	eb 09                	jmp    c0008d26 <VgaText::putchar(char)+0x82>
c0008d1d:	6b c0 0a             	imul   eax,eax,0xa
c0008d20:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008d24:	88 ca                	mov    dl,cl
c0008d26:	46                   	inc    esi
c0008d27:	eb ce                	jmp    c0008cf7 <VgaText::putchar(char)+0x53>
c0008d29:	84 d2                	test   dl,dl
c0008d2b:	74 2e                	je     c0008d5b <VgaText::putchar(char)+0xb7>
c0008d2d:	50                   	push   eax
c0008d2e:	53                   	push   ebx
c0008d2f:	e8 22 fb ff ff       	call   c0008856 <VgaText::doANSI_SGR(int)>
c0008d34:	58                   	pop    eax
c0008d35:	5a                   	pop    edx
c0008d36:	eb 23                	jmp    c0008d5b <VgaText::putchar(char)+0xb7>
c0008d38:	3c 4a                	cmp    al,0x4a
c0008d3a:	75 1f                	jne    c0008d5b <VgaText::putchar(char)+0xb7>
c0008d3c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008d40:	75 19                	jne    c0008d5b <VgaText::putchar(char)+0xb7>
c0008d42:	83 ec 0c             	sub    esp,0xc
c0008d45:	53                   	push   ebx
c0008d46:	e8 97 fd ff ff       	call   c0008ae2 <VgaText::clearScreen()>
c0008d4b:	83 c4 0c             	add    esp,0xc
c0008d4e:	6a 00                	push   0x0
c0008d50:	6a 00                	push   0x0
c0008d52:	53                   	push   ebx
c0008d53:	e8 28 fd ff ff       	call   c0008a80 <VgaText::setCursor(int, int)>
c0008d58:	83 c4 10             	add    esp,0x10
c0008d5b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008d61:	eb 27                	jmp    c0008d8a <VgaText::putchar(char)+0xe6>
c0008d63:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008d66:	83 fa 0e             	cmp    edx,0xe
c0008d69:	7f 1f                	jg     c0008d8a <VgaText::putchar(char)+0xe6>
c0008d6b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008d6e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008d71:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008d75:	eb 13                	jmp    c0008d8a <VgaText::putchar(char)+0xe6>
c0008d77:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008d7a:	0f be c0             	movsx  eax,al
c0008d7d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008d80:	50                   	push   eax
c0008d81:	53                   	push   ebx
c0008d82:	e8 4f fe ff ff       	call   c0008bd6 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008d87:	83 c4 10             	add    esp,0x10
c0008d8a:	83 c4 14             	add    esp,0x14
c0008d8d:	5b                   	pop    ebx
c0008d8e:	5e                   	pop    esi
c0008d8f:	c3                   	ret    

c0008d90 <VgaText::putx(unsigned int)>:
c0008d90:	57                   	push   edi
c0008d91:	b9 11 00 00 00       	mov    ecx,0x11
c0008d96:	56                   	push   esi
c0008d97:	be 1a d9 01 c0       	mov    esi,0xc001d91a
c0008d9c:	53                   	push   ebx
c0008d9d:	83 ec 20             	sub    esp,0x20
c0008da0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008da4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008da8:	fc                   	cld    
c0008da9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008dab:	be 08 00 00 00       	mov    esi,0x8
c0008db0:	50                   	push   eax
c0008db1:	50                   	push   eax
c0008db2:	89 d8                	mov    eax,ebx
c0008db4:	c1 e3 04             	shl    ebx,0x4
c0008db7:	c1 e8 1c             	shr    eax,0x1c
c0008dba:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008dbf:	50                   	push   eax
c0008dc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008dc4:	e8 db fe ff ff       	call   c0008ca4 <VgaText::putchar(char)>
c0008dc9:	83 c4 10             	add    esp,0x10
c0008dcc:	4e                   	dec    esi
c0008dcd:	75 e1                	jne    c0008db0 <VgaText::putx(unsigned int)+0x20>
c0008dcf:	83 c4 20             	add    esp,0x20
c0008dd2:	5b                   	pop    ebx
c0008dd3:	5e                   	pop    esi
c0008dd4:	5f                   	pop    edi
c0008dd5:	c3                   	ret    

c0008dd6 <VgaText::puts(char const*)>:
c0008dd6:	53                   	push   ebx
c0008dd7:	83 ec 08             	sub    esp,0x8
c0008dda:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008dde:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008de1:	84 c0                	test   al,al
c0008de3:	74 12                	je     c0008df7 <VgaText::puts(char const*)+0x21>
c0008de5:	43                   	inc    ebx
c0008de6:	51                   	push   ecx
c0008de7:	51                   	push   ecx
c0008de8:	50                   	push   eax
c0008de9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ded:	e8 b2 fe ff ff       	call   c0008ca4 <VgaText::putchar(char)>
c0008df2:	83 c4 10             	add    esp,0x10
c0008df5:	eb e7                	jmp    c0008dde <VgaText::puts(char const*)+0x8>
c0008df7:	83 c4 08             	add    esp,0x8
c0008dfa:	5b                   	pop    ebx
c0008dfb:	c3                   	ret    

c0008dfc <VgaText::write(unsigned long long, void*, int*)>:
c0008dfc:	55                   	push   ebp
c0008dfd:	57                   	push   edi
c0008dfe:	56                   	push   esi
c0008dff:	53                   	push   ebx
c0008e00:	83 ec 0c             	sub    esp,0xc
c0008e03:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008e07:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008e0b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008e0f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008e16:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008e19:	39 eb                	cmp    ebx,ebp
c0008e1b:	74 13                	je     c0008e30 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008e1d:	43                   	inc    ebx
c0008e1e:	50                   	push   eax
c0008e1f:	50                   	push   eax
c0008e20:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008e24:	50                   	push   eax
c0008e25:	56                   	push   esi
c0008e26:	e8 79 fe ff ff       	call   c0008ca4 <VgaText::putchar(char)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	eb e9                	jmp    c0008e19 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008e30:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008e37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e3b:	89 38                	mov    DWORD PTR [eax],edi
c0008e3d:	83 c4 0c             	add    esp,0xc
c0008e40:	31 c0                	xor    eax,eax
c0008e42:	5b                   	pop    ebx
c0008e43:	5e                   	pop    esi
c0008e44:	5f                   	pop    edi
c0008e45:	5d                   	pop    ebp
c0008e46:	c3                   	ret    
c0008e47:	90                   	nop

c0008e48 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008e48:	55                   	push   ebp
c0008e49:	57                   	push   edi
c0008e4a:	56                   	push   esi
c0008e4b:	53                   	push   ebx
c0008e4c:	83 ec 0c             	sub    esp,0xc
c0008e4f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008e53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008e58:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008e5f:	50                   	push   eax
c0008e60:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008e65:	50                   	push   eax
c0008e66:	e8 b9 fa ff ff       	call   c0008924 <VgaText::combineColours(unsigned char, unsigned char)>
c0008e6b:	5a                   	pop    edx
c0008e6c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008e71:	59                   	pop    ecx
c0008e72:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008e75:	89 c5                	mov    ebp,eax
c0008e77:	0f b7 f6             	movzx  esi,si
c0008e7a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008e7e:	01 f6                	add    esi,esi
c0008e80:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008e83:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008e86:	84 c0                	test   al,al
c0008e88:	0f 84 f4 00 00 00    	je     c0008f82 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008e8e:	3c 0d                	cmp    al,0xd
c0008e90:	75 0c                	jne    c0008e9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008e92:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008e99:	e9 de 00 00 00       	jmp    c0008f7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008e9e:	3c 0a                	cmp    al,0xa
c0008ea0:	75 45                	jne    c0008ee7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008ea2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ea5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008eac:	8d 48 01             	lea    ecx,[eax+0x1]
c0008eaf:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008eb2:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008eb5:	75 0f                	jne    c0008ec6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008eb7:	83 ec 0c             	sub    esp,0xc
c0008eba:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 73 fa ff ff       	call   c0008936 <VgaText::scrollScreen()>
c0008ec3:	83 c4 10             	add    esp,0x10
c0008ec6:	83 ec 0c             	sub    esp,0xc
c0008ec9:	53                   	push   ebx
c0008eca:	e8 71 f9 ff ff       	call   c0008840 <VgaText::updateCursor()>
c0008ecf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008ed4:	83 c4 10             	add    esp,0x10
c0008ed7:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008eda:	0f b7 f6             	movzx  esi,si
c0008edd:	01 f6                	add    esi,esi
c0008edf:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008ee2:	e9 95 00 00 00       	jmp    c0008f7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008ee7:	3c 08                	cmp    al,0x8
c0008ee9:	75 35                	jne    c0008f20 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008eeb:	51                   	push   ecx
c0008eec:	51                   	push   ecx
c0008eed:	6a 01                	push   0x1
c0008eef:	53                   	push   ebx
c0008ef0:	e8 bf fc ff ff       	call   c0008bb4 <VgaText::decrementCursor(bool)>
c0008ef5:	5e                   	pop    esi
c0008ef6:	58                   	pop    eax
c0008ef7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008efa:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008efd:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008f00:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008f03:	6a 20                	push   0x20
c0008f05:	53                   	push   ebx
c0008f06:	e8 d5 fa ff ff       	call   c00089e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008f0b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f10:	83 c4 20             	add    esp,0x20
c0008f13:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008f16:	0f b7 f6             	movzx  esi,si
c0008f19:	01 f6                	add    esi,esi
c0008f1b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f1e:	eb 5c                	jmp    c0008f7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f20:	52                   	push   edx
c0008f21:	52                   	push   edx
c0008f22:	89 ea                	mov    edx,ebp
c0008f24:	0f b6 ca             	movzx  ecx,dl
c0008f27:	51                   	push   ecx
c0008f28:	50                   	push   eax
c0008f29:	e8 a0 fa ff ff       	call   c00089ce <VgaText::combineCharAndColour(char, unsigned char)>
c0008f2e:	83 c4 10             	add    esp,0x10
c0008f31:	66 89 06             	mov    WORD PTR [esi],ax
c0008f34:	39 1d e4 09 02 c0    	cmp    DWORD PTR ds:0xc00209e4,ebx
c0008f3a:	75 1d                	jne    c0008f59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008f3c:	83 ec 0c             	sub    esp,0xc
c0008f3f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008f42:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008f45:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008f49:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008f4d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008f50:	50                   	push   eax
c0008f51:	e8 36 d5 00 00       	call   c001648c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008f56:	83 c4 20             	add    esp,0x20
c0008f59:	83 c6 02             	add    esi,0x2
c0008f5c:	50                   	push   eax
c0008f5d:	50                   	push   eax
c0008f5e:	6a 00                	push   0x0
c0008f60:	53                   	push   ebx
c0008f61:	e8 fa fb ff ff       	call   c0008b60 <VgaText::incrementCursor(bool)>
c0008f66:	83 c4 10             	add    esp,0x10
c0008f69:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008f6d:	75 0d                	jne    c0008f7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f6f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f74:	0f b7 f6             	movzx  esi,si
c0008f77:	01 f6                	add    esi,esi
c0008f79:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f7c:	47                   	inc    edi
c0008f7d:	e9 01 ff ff ff       	jmp    c0008e83 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008f82:	83 ec 0c             	sub    esp,0xc
c0008f85:	53                   	push   ebx
c0008f86:	e8 b5 f8 ff ff       	call   c0008840 <VgaText::updateCursor()>
c0008f8b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008f92:	83 c4 1c             	add    esp,0x1c
c0008f95:	5b                   	pop    ebx
c0008f96:	5e                   	pop    esi
c0008f97:	5f                   	pop    edi
c0008f98:	5d                   	pop    ebp
c0008f99:	c3                   	ret    

c0008f9a <VgaText::VgaText(char const*)>:
c0008f9a:	56                   	push   esi
c0008f9b:	53                   	push   ebx
c0008f9c:	83 ec 04             	sub    esp,0x4
c0008f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fa3:	83 ec 08             	sub    esp,0x8
c0008fa6:	6a 00                	push   0x0
c0008fa8:	50                   	push   eax
c0008fa9:	e8 b0 04 00 00       	call   c000945e <UnixFile::UnixFile(int)>
c0008fae:	83 c4 10             	add    esp,0x10
c0008fb1:	ba 80 d9 01 c0       	mov    edx,0xc001d980
c0008fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fba:	89 10                	mov    DWORD PTR [eax],edx
c0008fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fc0:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fcb:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fd6:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fde:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fe6:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff1:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ffc:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0009003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009007:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0009019:	83 ec 0c             	sub    esp,0xc
c000901c:	6a 01                	push   0x1
c000901e:	e8 7e 08 00 00       	call   c00098a1 <Virt::allocateKernelVirtualPages(int)>
c0009023:	83 c4 10             	add    esp,0x10
c0009026:	89 c2                	mov    edx,eax
c0009028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000902c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000902f:	8b 1d 90 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a90
c0009035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009039:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000903c:	89 c6                	mov    esi,eax
c000903e:	e8 f2 f0 ff ff       	call   c0008135 <Phys::allocatePage()>
c0009043:	68 05 0c 00 00       	push   0xc05
c0009048:	56                   	push   esi
c0009049:	50                   	push   eax
c000904a:	53                   	push   ebx
c000904b:	e8 e6 0e 00 00       	call   c0009f36 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009050:	83 c4 10             	add    esp,0x10
c0009053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009057:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000905a:	83 ec 04             	sub    esp,0x4
c000905d:	68 a0 0f 00 00       	push   0xfa0
c0009062:	6a 00                	push   0x0
c0009064:	50                   	push   eax
c0009065:	e8 86 74 ff ff       	call   c00004f0 <memset>
c000906a:	83 c4 10             	add    esp,0x10
c000906d:	83 ec 04             	sub    esp,0x4
c0009070:	6a 00                	push   0x0
c0009072:	6a 07                	push   0x7
c0009074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009078:	e8 6d f8 ff ff       	call   c00088ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000907d:	83 c4 10             	add    esp,0x10
c0009080:	83 ec 04             	sub    esp,0x4
c0009083:	6a 00                	push   0x0
c0009085:	6a 00                	push   0x0
c0009087:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000908b:	e8 f0 f9 ff ff       	call   c0008a80 <VgaText::setCursor(int, int)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 43 fa ff ff       	call   c0008ae2 <VgaText::clearScreen()>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a6:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00090aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ae:	05 82 00 00 00       	add    eax,0x82
c00090b3:	83 ec 04             	sub    esp,0x4
c00090b6:	6a 30                	push   0x30
c00090b8:	6a 00                	push   0x0
c00090ba:	50                   	push   eax
c00090bb:	e8 30 74 ff ff       	call   c00004f0 <memset>
c00090c0:	83 c4 10             	add    esp,0x10
c00090c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c7:	05 b2 00 00 00       	add    eax,0xb2
c00090cc:	83 ec 04             	sub    esp,0x4
c00090cf:	68 80 00 00 00       	push   0x80
c00090d4:	6a 00                	push   0x0
c00090d6:	50                   	push   eax
c00090d7:	e8 14 74 ff ff       	call   c00004f0 <memset>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	90                   	nop
c00090e0:	83 c4 04             	add    esp,0x4
c00090e3:	5b                   	pop    ebx
c00090e4:	5e                   	pop    esi
c00090e5:	c3                   	ret    

c00090e6 <VgaText::receiveKey(unsigned char)>:
c00090e6:	57                   	push   edi
c00090e7:	56                   	push   esi
c00090e8:	53                   	push   ebx
c00090e9:	83 ec 10             	sub    esp,0x10
c00090ec:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00090f0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00090f4:	84 db                	test   bl,bl
c00090f6:	0f 84 ba 00 00 00    	je     c00091b6 <VgaText::receiveKey(unsigned char)+0xd0>
c00090fc:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0009102:	80 fb 08             	cmp    bl,0x8
c0009105:	75 2c                	jne    c0009133 <VgaText::receiveKey(unsigned char)+0x4d>
c0009107:	83 ec 0c             	sub    esp,0xc
c000910a:	57                   	push   edi
c000910b:	e8 50 74 ff ff       	call   c0000560 <strlen>
c0009110:	83 c4 10             	add    esp,0x10
c0009113:	85 c0                	test   eax,eax
c0009115:	74 41                	je     c0009158 <VgaText::receiveKey(unsigned char)+0x72>
c0009117:	50                   	push   eax
c0009118:	50                   	push   eax
c0009119:	6a 08                	push   0x8
c000911b:	56                   	push   esi
c000911c:	e8 83 fb ff ff       	call   c0008ca4 <VgaText::putchar(char)>
c0009121:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009124:	e8 37 74 ff ff       	call   c0000560 <strlen>
c0009129:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0009131:	eb 22                	jmp    c0009155 <VgaText::receiveKey(unsigned char)+0x6f>
c0009133:	0f be c3             	movsx  eax,bl
c0009136:	52                   	push   edx
c0009137:	52                   	push   edx
c0009138:	50                   	push   eax
c0009139:	56                   	push   esi
c000913a:	e8 65 fb ff ff       	call   c0008ca4 <VgaText::putchar(char)>
c000913f:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0009143:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0009148:	59                   	pop    ecx
c0009149:	58                   	pop    eax
c000914a:	8d 44 24 16          	lea    eax,[esp+0x16]
c000914e:	50                   	push   eax
c000914f:	57                   	push   edi
c0009150:	e8 8b 76 ff ff       	call   c00007e0 <strcat>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000915f:	75 05                	jne    c0009166 <VgaText::receiveKey(unsigned char)+0x80>
c0009161:	80 fb 0a             	cmp    bl,0xa
c0009164:	75 50                	jne    c00091b6 <VgaText::receiveKey(unsigned char)+0xd0>
c0009166:	83 ec 0c             	sub    esp,0xc
c0009169:	81 c6 b2 00 00 00    	add    esi,0xb2
c000916f:	56                   	push   esi
c0009170:	e8 eb 73 ff ff       	call   c0000560 <strlen>
c0009175:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009178:	89 c3                	mov    ebx,eax
c000917a:	e8 e1 73 ff ff       	call   c0000560 <strlen>
c000917f:	83 c4 10             	add    esp,0x10
c0009182:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0009186:	3d 80 00 00 00       	cmp    eax,0x80
c000918b:	76 10                	jbe    c000919d <VgaText::receiveKey(unsigned char)+0xb7>
c000918d:	83 ec 0c             	sub    esp,0xc
c0009190:	68 2b d9 01 c0       	push   0xc001d92b
c0009195:	e8 29 75 00 00       	call   c00106c3 <KePanic(char const*)>
c000919a:	83 c4 10             	add    esp,0x10
c000919d:	50                   	push   eax
c000919e:	50                   	push   eax
c000919f:	57                   	push   edi
c00091a0:	56                   	push   esi
c00091a1:	e8 3a 76 ff ff       	call   c00007e0 <strcat>
c00091a6:	83 c4 0c             	add    esp,0xc
c00091a9:	6a 30                	push   0x30
c00091ab:	6a 00                	push   0x0
c00091ad:	57                   	push   edi
c00091ae:	e8 3d 73 ff ff       	call   c00004f0 <memset>
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	83 c4 10             	add    esp,0x10
c00091b9:	5b                   	pop    ebx
c00091ba:	5e                   	pop    esi
c00091bb:	5f                   	pop    edi
c00091bc:	c3                   	ret    
c00091bd:	90                   	nop

c00091be <VgaText::doUpdate()>:
c00091be:	c3                   	ret    

c00091bf <newTerminal(char*)>:
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	68 34 01 00 00       	push   0x134
c00091c7:	e8 91 ec ff ff       	call   c0007e5d <malloc>
c00091cc:	5a                   	pop    edx
c00091cd:	59                   	pop    ecx
c00091ce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00091d2:	50                   	push   eax
c00091d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091d7:	e8 be fd ff ff       	call   c0008f9a <VgaText::VgaText(char const*)>
c00091dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091e0:	83 c4 2c             	add    esp,0x2c
c00091e3:	c3                   	ret    

c00091e4 <TSS::TSS()>:
c00091e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00091ef:	90                   	nop
c00091f0:	c3                   	ret    
c00091f1:	90                   	nop
c00091f2:	66 90                	xchg   ax,ax

c00091f4 <TSS::setESP(unsigned long)>:
c00091f4:	55                   	push   ebp
c00091f5:	89 e5                	mov    ebp,esp
c00091f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009200:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009203:	90                   	nop
c0009204:	5d                   	pop    ebp
c0009205:	c3                   	ret    
c0009206:	66 90                	xchg   ax,ax

c0009208 <TSS::flush()>:
c0009208:	55                   	push   ebp
c0009209:	89 e5                	mov    ebp,esp
c000920b:	83 ec 10             	sub    esp,0x10
c000920e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009211:	8b 00                	mov    eax,DWORD PTR [eax]
c0009213:	83 c8 03             	or     eax,0x3
c0009216:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000921a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000921e:	66 89 d0             	mov    ax,dx
c0009221:	0f 00 d8             	ltr    ax
c0009224:	90                   	nop
c0009225:	c9                   	leave  
c0009226:	c3                   	ret    
c0009227:	90                   	nop

c0009228 <TSS::setup(unsigned long, unsigned long)>:
c0009228:	55                   	push   ebp
c0009229:	89 e5                	mov    ebp,esp
c000922b:	83 ec 18             	sub    esp,0x18
c000922e:	83 ec 0c             	sub    esp,0xc
c0009231:	6a 68                	push   0x68
c0009233:	e8 25 ec ff ff       	call   c0007e5d <malloc>
c0009238:	83 c4 10             	add    esp,0x10
c000923b:	89 c2                	mov    edx,eax
c000923d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009240:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009246:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009249:	83 ec 04             	sub    esp,0x4
c000924c:	6a 68                	push   0x68
c000924e:	6a 00                	push   0x0
c0009250:	50                   	push   eax
c0009251:	e8 9a 72 ff ff       	call   c00004f0 <memset>
c0009256:	83 c4 10             	add    esp,0x10
c0009259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000925c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000925f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0009265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009268:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000926b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009274:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009277:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000927a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000927d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009280:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009283:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000928c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000928f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009298:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000929b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00092a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092a7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00092ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092b3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00092b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092bf:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00092c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092cb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00092ce:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00092d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00092da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00092dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092e3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00092ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092f0:	0f 20 da             	mov    edx,cr3
c00092f3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00092f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00092f9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00092fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009302:	83 ec 08             	sub    esp,0x8
c0009305:	50                   	push   eax
c0009306:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009309:	50                   	push   eax
c000930a:	e8 d5 e3 ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c000930f:	83 c4 10             	add    esp,0x10
c0009312:	83 ec 08             	sub    esp,0x8
c0009315:	6a 68                	push   0x68
c0009317:	8d 45 ec             	lea    eax,[ebp-0x14]
c000931a:	50                   	push   eax
c000931b:	e8 e0 e3 ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c0009320:	83 c4 10             	add    esp,0x10
c0009323:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009327:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000932a:	83 e0 0f             	and    eax,0xf
c000932d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009330:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009333:	83 c8 40             	or     eax,0x40
c0009336:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009339:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000933e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009344:	05 78 01 00 00       	add    eax,0x178
c0009349:	83 ec 04             	sub    esp,0x4
c000934c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000934f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0009352:	50                   	push   eax
c0009353:	e8 dc e3 ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0009358:	83 c4 10             	add    esp,0x10
c000935b:	89 c2                	mov    edx,eax
c000935d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009360:	89 10                	mov    DWORD PTR [eax],edx
c0009362:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c0009367:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000936d:	05 78 01 00 00       	add    eax,0x178
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	50                   	push   eax
c0009376:	e8 e3 e3 ff ff       	call   c000775e <GDT::flush()>
c000937b:	83 c4 10             	add    esp,0x10
c000937e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009381:	8b 00                	mov    eax,DWORD PTR [eax]
c0009383:	c9                   	leave  
c0009384:	c3                   	ret    
c0009385:	90                   	nop

c0009386 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0009386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000938a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000938e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009391:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009396:	75 08                	jne    c00093a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009398:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000939e:	eb 38                	jmp    c00093d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00093a0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00093a5:	75 17                	jne    c00093be <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00093a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00093ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00093af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00093b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00093b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00093bb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00093be:	89 c1                	mov    ecx,eax
c00093c0:	83 e1 fd             	and    ecx,0xfffffffd
c00093c3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00093c9:	74 cd                	je     c0009398 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00093cb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00093d0:	83 e0 ef             	and    eax,0xffffffef
c00093d3:	83 f8 08             	cmp    eax,0x8
c00093d6:	76 c0                	jbe    c0009398 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00093d8:	31 c0                	xor    eax,eax
c00093da:	c3                   	ret    
c00093db:	90                   	nop

c00093dc <ReservedFilename::isAtty()>:
c00093dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00093e3:	31 c0                	xor    eax,eax
c00093e5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00093eb:	74 09                	je     c00093f6 <ReservedFilename::isAtty()+0x1a>
c00093ed:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00093f3:	0f 94 c0             	sete   al
c00093f6:	c3                   	ret    
c00093f7:	90                   	nop

c00093f8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00093f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009400:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009407:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000940c:	75 08                	jne    c0009416 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000940e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009414:	eb 3d                	jmp    c0009453 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009416:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000941b:	75 17                	jne    c0009434 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000941d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009422:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009425:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000942b:	8b 10                	mov    edx,DWORD PTR [eax]
c000942d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009431:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009434:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009439:	75 04                	jne    c000943f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000943b:	89 0a                	mov    DWORD PTR [edx],ecx
c000943d:	eb 14                	jmp    c0009453 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000943f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009444:	74 c8                	je     c000940e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009446:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000944b:	83 e0 ef             	and    eax,0xffffffef
c000944e:	83 f8 08             	cmp    eax,0x8
c0009451:	76 bb                	jbe    c000940e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009453:	31 c0                	xor    eax,eax
c0009455:	c3                   	ret    

c0009456 <UnixFile::getFileDescriptor()>:
c0009456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000945a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000945d:	c3                   	ret    

c000945e <UnixFile::UnixFile(int)>:
c000945e:	53                   	push   ebx
c000945f:	83 ec 28             	sub    esp,0x28
c0009462:	ba 48 da 01 c0       	mov    edx,0xc001da48
c0009467:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000946b:	89 10                	mov    DWORD PTR [eax],edx
c000946d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0009475:	0f 8f 8c 01 00 00    	jg     c0009607 <UnixFile::UnixFile(int)+0x1a9>
c000947b:	a1 80 f7 01 c0       	mov    eax,ds:0xc001f780
c0009480:	8d 50 01             	lea    edx,[eax+0x1]
c0009483:	89 15 80 f7 01 c0    	mov    DWORD PTR ds:0xc001f780,edx
c0009489:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000948d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009490:	83 ec 08             	sub    esp,0x8
c0009493:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009497:	68 78 0a 02 c0       	push   0xc0020a78
c000949c:	e8 47 30 01 00       	call   c001c4e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00094a1:	83 c4 10             	add    esp,0x10
c00094a4:	a0 74 0a 02 c0       	mov    al,ds:0xc0020a74
c00094a9:	83 f0 01             	xor    eax,0x1
c00094ac:	84 c0                	test   al,al
c00094ae:	0f 84 54 01 00 00    	je     c0009608 <UnixFile::UnixFile(int)+0x1aa>
c00094b4:	c6 05 74 0a 02 c0 01 	mov    BYTE PTR ds:0xc0020a74,0x1
c00094bb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00094c3:	83 ec 0c             	sub    esp,0xc
c00094c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00094ca:	e8 8e e9 ff ff       	call   c0007e5d <malloc>
c00094cf:	83 c4 10             	add    esp,0x10
c00094d2:	89 c3                	mov    ebx,eax
c00094d4:	83 ec 08             	sub    esp,0x8
c00094d7:	68 03 ff ff 0f       	push   0xfffff03
c00094dc:	53                   	push   ebx
c00094dd:	e8 2c 01 00 00       	call   c000960e <ReservedFilename::ReservedFilename(int)>
c00094e2:	83 c4 10             	add    esp,0x10
c00094e5:	89 1d 6c 0a 02 c0    	mov    DWORD PTR ds:0xc0020a6c,ebx
c00094eb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00094f3:	83 ec 0c             	sub    esp,0xc
c00094f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094fa:	e8 5e e9 ff ff       	call   c0007e5d <malloc>
c00094ff:	83 c4 10             	add    esp,0x10
c0009502:	89 c3                	mov    ebx,eax
c0009504:	83 ec 08             	sub    esp,0x8
c0009507:	68 01 ff ff 0f       	push   0xfffff01
c000950c:	53                   	push   ebx
c000950d:	e8 fc 00 00 00       	call   c000960e <ReservedFilename::ReservedFilename(int)>
c0009512:	83 c4 10             	add    esp,0x10
c0009515:	89 1d 70 0a 02 c0    	mov    DWORD PTR ds:0xc0020a70,ebx
c000951b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009523:	83 ec 0c             	sub    esp,0xc
c0009526:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000952a:	e8 2e e9 ff ff       	call   c0007e5d <malloc>
c000952f:	83 c4 10             	add    esp,0x10
c0009532:	89 c3                	mov    ebx,eax
c0009534:	83 ec 08             	sub    esp,0x8
c0009537:	68 00 ff ff 0f       	push   0xfffff00
c000953c:	53                   	push   ebx
c000953d:	e8 cc 00 00 00       	call   c000960e <ReservedFilename::ReservedFilename(int)>
c0009542:	83 c4 10             	add    esp,0x10
c0009545:	89 1d 64 0a 02 c0    	mov    DWORD PTR ds:0xc0020a64,ebx
c000954b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009553:	83 ec 0c             	sub    esp,0xc
c0009556:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000955a:	e8 fe e8 ff ff       	call   c0007e5d <malloc>
c000955f:	83 c4 10             	add    esp,0x10
c0009562:	89 c3                	mov    ebx,eax
c0009564:	83 ec 08             	sub    esp,0x8
c0009567:	68 02 ff ff 0f       	push   0xfffff02
c000956c:	53                   	push   ebx
c000956d:	e8 9c 00 00 00       	call   c000960e <ReservedFilename::ReservedFilename(int)>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 1d 68 0a 02 c0    	mov    DWORD PTR ds:0xc0020a68,ebx
c000957b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009583:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009588:	7f 7e                	jg     c0009608 <UnixFile::UnixFile(int)+0x1aa>
c000958a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009592:	83 ec 0c             	sub    esp,0xc
c0009595:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009599:	e8 bf e8 ff ff       	call   c0007e5d <malloc>
c000959e:	83 c4 10             	add    esp,0x10
c00095a1:	89 c3                	mov    ebx,eax
c00095a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095a7:	05 10 ff ff 0f       	add    eax,0xfffff10
c00095ac:	83 ec 08             	sub    esp,0x8
c00095af:	50                   	push   eax
c00095b0:	53                   	push   ebx
c00095b1:	e8 58 00 00 00       	call   c000960e <ReservedFilename::ReservedFilename(int)>
c00095b6:	83 c4 10             	add    esp,0x10
c00095b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095bd:	89 1c 85 40 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5c0],ebx
c00095c4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00095cc:	83 ec 0c             	sub    esp,0xc
c00095cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00095d3:	e8 85 e8 ff ff       	call   c0007e5d <malloc>
c00095d8:	83 c4 10             	add    esp,0x10
c00095db:	89 c3                	mov    ebx,eax
c00095dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095e1:	05 20 ff ff 0f       	add    eax,0xfffff20
c00095e6:	83 ec 08             	sub    esp,0x8
c00095e9:	50                   	push   eax
c00095ea:	53                   	push   ebx
c00095eb:	e8 1e 00 00 00       	call   c000960e <ReservedFilename::ReservedFilename(int)>
c00095f0:	83 c4 10             	add    esp,0x10
c00095f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095f7:	89 1c 85 00 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf600],ebx
c00095fe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009602:	e9 7c ff ff ff       	jmp    c0009583 <UnixFile::UnixFile(int)+0x125>
c0009607:	90                   	nop
c0009608:	83 c4 28             	add    esp,0x28
c000960b:	5b                   	pop    ebx
c000960c:	c3                   	ret    
c000960d:	90                   	nop

c000960e <ReservedFilename::ReservedFilename(int)>:
c000960e:	83 ec 0c             	sub    esp,0xc
c0009611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009615:	83 ec 08             	sub    esp,0x8
c0009618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000961c:	50                   	push   eax
c000961d:	e8 3c fe ff ff       	call   c000945e <UnixFile::UnixFile(int)>
c0009622:	83 c4 10             	add    esp,0x10
c0009625:	ba 64 da 01 c0       	mov    edx,0xc001da64
c000962a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000962e:	89 10                	mov    DWORD PTR [eax],edx
c0009630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009634:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009638:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000963b:	90                   	nop
c000963c:	83 c4 0c             	add    esp,0xc
c000963f:	c3                   	ret    

c0009640 <UnixFile::~UnixFile()>:
c0009640:	83 ec 1c             	sub    esp,0x1c
c0009643:	ba 48 da 01 c0       	mov    edx,0xc001da48
c0009648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000964c:	89 10                	mov    DWORD PTR [eax],edx
c000964e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009652:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009655:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000965a:	7f 73                	jg     c00096cf <UnixFile::~UnixFile()+0x8f>
c000965c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009664:	83 ec 0c             	sub    esp,0xc
c0009667:	68 78 0a 02 c0       	push   0xc0020a78
c000966c:	e8 4b 2f 01 00       	call   c001c5bc <LinkedList<UnixFile>::getFirstElement()>
c0009671:	83 c4 10             	add    esp,0x10
c0009674:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009678:	83 ec 0c             	sub    esp,0xc
c000967b:	68 78 0a 02 c0       	push   0xc0020a78
c0009680:	e8 3f 2f 01 00       	call   c001c5c4 <LinkedList<UnixFile>::removeFirst()>
c0009685:	83 c4 10             	add    esp,0x10
c0009688:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000968c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009690:	74 40                	je     c00096d2 <UnixFile::~UnixFile()+0x92>
c0009692:	83 ec 08             	sub    esp,0x8
c0009695:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009699:	68 78 0a 02 c0       	push   0xc0020a78
c000969e:	e8 45 2e 01 00       	call   c001c4e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00096a3:	83 c4 10             	add    esp,0x10
c00096a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00096aa:	8d 50 01             	lea    edx,[eax+0x1]
c00096ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b1:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00096b6:	0f 94 c0             	sete   al
c00096b9:	84 c0                	test   al,al
c00096bb:	74 a7                	je     c0009664 <UnixFile::~UnixFile()+0x24>
c00096bd:	83 ec 0c             	sub    esp,0xc
c00096c0:	68 20 da 01 c0       	push   0xc001da20
c00096c5:	e8 f9 6f 00 00       	call   c00106c3 <KePanic(char const*)>
c00096ca:	83 c4 10             	add    esp,0x10
c00096cd:	eb 95                	jmp    c0009664 <UnixFile::~UnixFile()+0x24>
c00096cf:	90                   	nop
c00096d0:	eb 01                	jmp    c00096d3 <UnixFile::~UnixFile()+0x93>
c00096d2:	90                   	nop
c00096d3:	90                   	nop
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	c3                   	ret    

c00096d8 <UnixFile::~UnixFile()>:
c00096d8:	83 ec 0c             	sub    esp,0xc
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00096e2:	e8 59 ff ff ff       	call   c0009640 <UnixFile::~UnixFile()>
c00096e7:	83 c4 10             	add    esp,0x10
c00096ea:	83 ec 08             	sub    esp,0x8
c00096ed:	6a 0c                	push   0xc
c00096ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00096f3:	e8 06 13 00 00       	call   c000a9fe <operator delete(void*, unsigned long)>
c00096f8:	83 c4 10             	add    esp,0x10
c00096fb:	83 c4 0c             	add    esp,0xc
c00096fe:	c3                   	ret    
c00096ff:	90                   	nop

c0009700 <ReservedFilename::~ReservedFilename()>:
c0009700:	83 ec 0c             	sub    esp,0xc
c0009703:	ba 64 da 01 c0       	mov    edx,0xc001da64
c0009708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000970c:	89 10                	mov    DWORD PTR [eax],edx
c000970e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009712:	83 ec 0c             	sub    esp,0xc
c0009715:	50                   	push   eax
c0009716:	e8 25 ff ff ff       	call   c0009640 <UnixFile::~UnixFile()>
c000971b:	83 c4 10             	add    esp,0x10
c000971e:	90                   	nop
c000971f:	83 c4 0c             	add    esp,0xc
c0009722:	c3                   	ret    
c0009723:	90                   	nop

c0009724 <ReservedFilename::~ReservedFilename()>:
c0009724:	83 ec 0c             	sub    esp,0xc
c0009727:	83 ec 0c             	sub    esp,0xc
c000972a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000972e:	e8 cd ff ff ff       	call   c0009700 <ReservedFilename::~ReservedFilename()>
c0009733:	83 c4 10             	add    esp,0x10
c0009736:	83 ec 08             	sub    esp,0x8
c0009739:	6a 0c                	push   0xc
c000973b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000973f:	e8 ba 12 00 00       	call   c000a9fe <operator delete(void*, unsigned long)>
c0009744:	83 c4 10             	add    esp,0x10
c0009747:	83 c4 0c             	add    esp,0xc
c000974a:	c3                   	ret    

c000974b <getFromFileDescriptor(int)>:
c000974b:	53                   	push   ebx
c000974c:	83 ec 08             	sub    esp,0x8
c000974f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009753:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009759:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000975f:	7f 2c                	jg     c000978d <getFromFileDescriptor(int)+0x42>
c0009761:	83 ec 0c             	sub    esp,0xc
c0009764:	68 78 0a 02 c0       	push   0xc0020a78
c0009769:	e8 4e 2e 01 00       	call   c001c5bc <LinkedList<UnixFile>::getFirstElement()>
c000976e:	83 c4 10             	add    esp,0x10
c0009771:	85 c0                	test   eax,eax
c0009773:	75 04                	jne    c0009779 <getFromFileDescriptor(int)+0x2e>
c0009775:	31 c0                	xor    eax,eax
c0009777:	eb 6e                	jmp    c00097e7 <getFromFileDescriptor(int)+0x9c>
c0009779:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000977c:	74 69                	je     c00097e7 <getFromFileDescriptor(int)+0x9c>
c000977e:	52                   	push   edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	68 78 0a 02 c0       	push   0xc0020a78
c0009786:	e8 db 2e 01 00       	call   c001c666 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000978b:	eb e1                	jmp    c000976e <getFromFileDescriptor(int)+0x23>
c000978d:	a1 6c 0a 02 c0       	mov    eax,ds:0xc0020a6c
c0009792:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009798:	74 4d                	je     c00097e7 <getFromFileDescriptor(int)+0x9c>
c000979a:	a1 70 0a 02 c0       	mov    eax,ds:0xc0020a70
c000979f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00097a5:	74 40                	je     c00097e7 <getFromFileDescriptor(int)+0x9c>
c00097a7:	a1 68 0a 02 c0       	mov    eax,ds:0xc0020a68
c00097ac:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00097b2:	74 33                	je     c00097e7 <getFromFileDescriptor(int)+0x9c>
c00097b4:	a1 64 0a 02 c0       	mov    eax,ds:0xc0020a64
c00097b9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00097bf:	74 26                	je     c00097e7 <getFromFileDescriptor(int)+0x9c>
c00097c1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00097c7:	83 f8 08             	cmp    eax,0x8
c00097ca:	77 09                	ja     c00097d5 <getFromFileDescriptor(int)+0x8a>
c00097cc:	8b 04 85 40 0a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf5c0]
c00097d3:	eb 12                	jmp    c00097e7 <getFromFileDescriptor(int)+0x9c>
c00097d5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00097db:	83 fb 08             	cmp    ebx,0x8
c00097de:	77 95                	ja     c0009775 <getFromFileDescriptor(int)+0x2a>
c00097e0:	8b 04 9d 00 0a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf600]
c00097e7:	83 c4 08             	add    esp,0x8
c00097ea:	5b                   	pop    ebx
c00097eb:	c3                   	ret    

c00097ec <__static_initialization_and_destruction_0(int, int)>:
c00097ec:	83 ec 0c             	sub    esp,0xc
c00097ef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00097f4:	75 34                	jne    c000982a <__static_initialization_and_destruction_0(int, int)+0x3e>
c00097f6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00097fe:	75 2a                	jne    c000982a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009800:	83 ec 0c             	sub    esp,0xc
c0009803:	68 78 0a 02 c0       	push   0xc0020a78
c0009808:	e8 99 2c 01 00       	call   c001c4a6 <LinkedList<UnixFile>::LinkedList()>
c000980d:	83 c4 10             	add    esp,0x10
c0009810:	83 ec 04             	sub    esp,0x4
c0009813:	68 14 f7 01 c0       	push   0xc001f714
c0009818:	68 78 0a 02 c0       	push   0xc0020a78
c000981d:	68 a4 c4 01 c0       	push   0xc001c4a4
c0009822:	e8 87 11 00 00       	call   c000a9ae <__cxa_atexit>
c0009827:	83 c4 10             	add    esp,0x10
c000982a:	90                   	nop
c000982b:	83 c4 0c             	add    esp,0xc
c000982e:	c3                   	ret    

c000982f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000982f:	83 ec 0c             	sub    esp,0xc
c0009832:	83 ec 08             	sub    esp,0x8
c0009835:	68 ff ff 00 00       	push   0xffff
c000983a:	6a 01                	push   0x1
c000983c:	e8 ab ff ff ff       	call   c00097ec <__static_initialization_and_destruction_0(int, int)>
c0009841:	83 c4 10             	add    esp,0x10
c0009844:	83 c4 0c             	add    esp,0xc
c0009847:	c3                   	ret    

c0009848 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009848:	53                   	push   ebx
c0009849:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000984d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009851:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009857:	89 c8                	mov    eax,ecx
c0009859:	d1 e8                	shr    eax,1
c000985b:	03 05 88 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f788
c0009861:	83 e1 01             	and    ecx,0x1
c0009864:	8a 10                	mov    dl,BYTE PTR [eax]
c0009866:	75 09                	jne    c0009871 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009868:	83 e2 f0             	and    edx,0xfffffff0
c000986b:	09 da                	or     edx,ebx
c000986d:	88 10                	mov    BYTE PTR [eax],dl
c000986f:	5b                   	pop    ebx
c0009870:	c3                   	ret    
c0009871:	c1 e3 04             	shl    ebx,0x4
c0009874:	83 e2 0f             	and    edx,0xf
c0009877:	09 da                	or     edx,ebx
c0009879:	88 10                	mov    BYTE PTR [eax],dl
c000987b:	5b                   	pop    ebx
c000987c:	c3                   	ret    

c000987d <Virt::getPageState(unsigned long)>:
c000987d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009881:	8b 0d 88 f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f788
c0009887:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000988d:	89 d0                	mov    eax,edx
c000988f:	d1 e8                	shr    eax,1
c0009891:	83 e2 01             	and    edx,0x1
c0009894:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009897:	75 04                	jne    c000989d <Virt::getPageState(unsigned long)+0x20>
c0009899:	83 e0 0f             	and    eax,0xf
c000989c:	c3                   	ret    
c000989d:	c0 e8 04             	shr    al,0x4
c00098a0:	c3                   	ret    

c00098a1 <Virt::allocateKernelVirtualPages(int)>:
c00098a1:	55                   	push   ebp
c00098a2:	31 ed                	xor    ebp,ebp
c00098a4:	57                   	push   edi
c00098a5:	56                   	push   esi
c00098a6:	53                   	push   ebx
c00098a7:	31 db                	xor    ebx,ebx
c00098a9:	83 ec 1c             	sub    esp,0x1c
c00098ac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00098b0:	8b 3d 84 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f784
c00098b6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00098bb:	57                   	push   edi
c00098bc:	e8 bc ff ff ff       	call   c000987d <Virt::getPageState(unsigned long)>
c00098c1:	5a                   	pop    edx
c00098c2:	84 c0                	test   al,al
c00098c4:	75 3a                	jne    c0009900 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00098c6:	85 db                	test   ebx,ebx
c00098c8:	75 02                	jne    c00098cc <Virt::allocateKernelVirtualPages(int)+0x2b>
c00098ca:	89 fd                	mov    ebp,edi
c00098cc:	43                   	inc    ebx
c00098cd:	39 f3                	cmp    ebx,esi
c00098cf:	74 5a                	je     c000992b <Virt::allocateKernelVirtualPages(int)+0x8a>
c00098d1:	47                   	inc    edi
c00098d2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00098d8:	76 31                	jbe    c000990b <Virt::allocateKernelVirtualPages(int)+0x6a>
c00098da:	c7 05 84 f7 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f784,0xc8000
c00098e4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00098e9:	75 28                	jne    c0009913 <Virt::allocateKernelVirtualPages(int)+0x72>
c00098eb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00098f0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00098f5:	57                   	push   edi
c00098f6:	e8 82 ff ff ff       	call   c000987d <Virt::getPageState(unsigned long)>
c00098fb:	5a                   	pop    edx
c00098fc:	84 c0                	test   al,al
c00098fe:	74 c6                	je     c00098c6 <Virt::allocateKernelVirtualPages(int)+0x25>
c0009900:	31 db                	xor    ebx,ebx
c0009902:	47                   	inc    edi
c0009903:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009909:	77 cf                	ja     c00098da <Virt::allocateKernelVirtualPages(int)+0x39>
c000990b:	89 3d 84 f7 01 c0    	mov    DWORD PTR ds:0xc001f784,edi
c0009911:	eb a8                	jmp    c00098bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009913:	83 ec 0c             	sub    esp,0xc
c0009916:	68 78 da 01 c0       	push   0xc001da78
c000991b:	e8 a3 6d 00 00       	call   c00106c3 <KePanic(char const*)>
c0009920:	8b 3d 84 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f784
c0009926:	83 c4 10             	add    esp,0x10
c0009929:	eb 90                	jmp    c00098bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000992b:	89 2d 84 f7 01 c0    	mov    DWORD PTR ds:0xc001f784,ebp
c0009931:	4b                   	dec    ebx
c0009932:	74 5f                	je     c0009993 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009934:	85 f6                	test   esi,esi
c0009936:	74 3d                	je     c0009975 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009938:	89 e8                	mov    eax,ebp
c000993a:	31 db                	xor    ebx,ebx
c000993c:	8d 7e ff             	lea    edi,[esi-0x1]
c000993f:	eb 14                	jmp    c0009955 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009941:	6a 01                	push   0x1
c0009943:	43                   	inc    ebx
c0009944:	50                   	push   eax
c0009945:	e8 fe fe ff ff       	call   c0009848 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000994a:	58                   	pop    eax
c000994b:	39 f3                	cmp    ebx,esi
c000994d:	5a                   	pop    edx
c000994e:	74 25                	je     c0009975 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009950:	a1 84 f7 01 c0       	mov    eax,ds:0xc001f784
c0009955:	8d 50 01             	lea    edx,[eax+0x1]
c0009958:	85 db                	test   ebx,ebx
c000995a:	89 15 84 f7 01 c0    	mov    DWORD PTR ds:0xc001f784,edx
c0009960:	74 20                	je     c0009982 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009962:	39 df                	cmp    edi,ebx
c0009964:	75 db                	jne    c0009941 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009966:	6a 03                	push   0x3
c0009968:	43                   	inc    ebx
c0009969:	50                   	push   eax
c000996a:	e8 d9 fe ff ff       	call   c0009848 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000996f:	59                   	pop    ecx
c0009970:	39 f3                	cmp    ebx,esi
c0009972:	58                   	pop    eax
c0009973:	75 db                	jne    c0009950 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009975:	83 c4 1c             	add    esp,0x1c
c0009978:	89 e8                	mov    eax,ebp
c000997a:	5b                   	pop    ebx
c000997b:	c1 e0 0c             	shl    eax,0xc
c000997e:	5e                   	pop    esi
c000997f:	5f                   	pop    edi
c0009980:	5d                   	pop    ebp
c0009981:	c3                   	ret    
c0009982:	6a 02                	push   0x2
c0009984:	bb 01 00 00 00       	mov    ebx,0x1
c0009989:	50                   	push   eax
c000998a:	e8 b9 fe ff ff       	call   c0009848 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000998f:	58                   	pop    eax
c0009990:	5a                   	pop    edx
c0009991:	eb bd                	jmp    c0009950 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009993:	6a 04                	push   0x4
c0009995:	8d 45 01             	lea    eax,[ebp+0x1]
c0009998:	55                   	push   ebp
c0009999:	a3 84 f7 01 c0       	mov    ds:0xc001f784,eax
c000999e:	e8 a5 fe ff ff       	call   c0009848 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099a3:	59                   	pop    ecx
c00099a4:	89 e8                	mov    eax,ebp
c00099a6:	5b                   	pop    ebx
c00099a7:	c1 e0 0c             	shl    eax,0xc
c00099aa:	83 c4 1c             	add    esp,0x1c
c00099ad:	5b                   	pop    ebx
c00099ae:	5e                   	pop    esi
c00099af:	5f                   	pop    edi
c00099b0:	5d                   	pop    ebp
c00099b1:	c3                   	ret    

c00099b2 <Virt::freeSwapfilePage(unsigned long)>:
c00099b2:	53                   	push   ebx
c00099b3:	8b 15 8c 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a8c
c00099b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00099bd:	b8 01 00 00 00       	mov    eax,0x1
c00099c2:	89 cb                	mov    ebx,ecx
c00099c4:	d3 e0                	shl    eax,cl
c00099c6:	c1 eb 05             	shr    ebx,0x5
c00099c9:	f7 d0                	not    eax
c00099cb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00099ce:	5b                   	pop    ebx
c00099cf:	c3                   	ret    

c00099d0 <Virt::swapIDToSector(unsigned long)>:
c00099d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099d4:	0f af 05 8c f7 01 c0 	imul   eax,DWORD PTR ds:0xc001f78c
c00099db:	03 05 94 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f794
c00099e1:	c3                   	ret    

c00099e2 <Virt::allocateSwapfilePage()>:
c00099e2:	55                   	push   ebp
c00099e3:	31 d2                	xor    edx,edx
c00099e5:	57                   	push   edi
c00099e6:	56                   	push   esi
c00099e7:	53                   	push   ebx
c00099e8:	83 ec 0c             	sub    esp,0xc
c00099eb:	8b 0d 8c f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f78c
c00099f1:	a1 90 f7 01 c0       	mov    eax,ds:0xc001f790
c00099f6:	f7 f1                	div    ecx
c00099f8:	39 0d 90 f7 01 c0    	cmp    DWORD PTR ds:0xc001f790,ecx
c00099fe:	72 2d                	jb     c0009a2d <Virt::allocateSwapfilePage()+0x4b>
c0009a00:	8b 35 8c 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020a8c
c0009a06:	8b 16                	mov    edx,DWORD PTR [esi]
c0009a08:	f6 c2 01             	test   dl,0x1
c0009a0b:	74 3c                	je     c0009a49 <Virt::allocateSwapfilePage()+0x67>
c0009a0d:	31 c9                	xor    ecx,ecx
c0009a0f:	bf 01 00 00 00       	mov    edi,0x1
c0009a14:	eb 12                	jmp    c0009a28 <Virt::allocateSwapfilePage()+0x46>
c0009a16:	89 fd                	mov    ebp,edi
c0009a18:	89 ca                	mov    edx,ecx
c0009a1a:	d3 e5                	shl    ebp,cl
c0009a1c:	c1 ea 05             	shr    edx,0x5
c0009a1f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009a22:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a24:	85 ea                	test   edx,ebp
c0009a26:	74 2a                	je     c0009a52 <Virt::allocateSwapfilePage()+0x70>
c0009a28:	41                   	inc    ecx
c0009a29:	39 c8                	cmp    eax,ecx
c0009a2b:	77 e9                	ja     c0009a16 <Virt::allocateSwapfilePage()+0x34>
c0009a2d:	83 ec 0c             	sub    esp,0xc
c0009a30:	68 df db 01 c0       	push   0xc001dbdf
c0009a35:	e8 89 6c 00 00       	call   c00106c3 <KePanic(char const*)>
c0009a3a:	83 c4 10             	add    esp,0x10
c0009a3d:	31 c9                	xor    ecx,ecx
c0009a3f:	83 c4 0c             	add    esp,0xc
c0009a42:	89 c8                	mov    eax,ecx
c0009a44:	5b                   	pop    ebx
c0009a45:	5e                   	pop    esi
c0009a46:	5f                   	pop    edi
c0009a47:	5d                   	pop    ebp
c0009a48:	c3                   	ret    
c0009a49:	89 f3                	mov    ebx,esi
c0009a4b:	bd 01 00 00 00       	mov    ebp,0x1
c0009a50:	31 c9                	xor    ecx,ecx
c0009a52:	09 ea                	or     edx,ebp
c0009a54:	89 c8                	mov    eax,ecx
c0009a56:	89 13                	mov    DWORD PTR [ebx],edx
c0009a58:	83 c4 0c             	add    esp,0xc
c0009a5b:	5b                   	pop    ebx
c0009a5c:	5e                   	pop    esi
c0009a5d:	5f                   	pop    edi
c0009a5e:	5d                   	pop    ebp
c0009a5f:	c3                   	ret    

c0009a60 <Virt::virtualMemorySetup()>:
c0009a60:	53                   	push   ebx
c0009a61:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009a66:	6a 0f                	push   0xf
c0009a68:	53                   	push   ebx
c0009a69:	43                   	inc    ebx
c0009a6a:	e8 d9 fd ff ff       	call   c0009848 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a6f:	58                   	pop    eax
c0009a70:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009a76:	5a                   	pop    edx
c0009a77:	75 ed                	jne    c0009a66 <Virt::virtualMemorySetup()+0x6>
c0009a79:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009a7e:	6a 00                	push   0x0
c0009a80:	53                   	push   ebx
c0009a81:	43                   	inc    ebx
c0009a82:	e8 c1 fd ff ff       	call   c0009848 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a87:	59                   	pop    ecx
c0009a88:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009a8e:	58                   	pop    eax
c0009a8f:	75 ed                	jne    c0009a7e <Virt::virtualMemorySetup()+0x1e>
c0009a91:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009a96:	6a 0f                	push   0xf
c0009a98:	53                   	push   ebx
c0009a99:	43                   	inc    ebx
c0009a9a:	e8 a9 fd ff ff       	call   c0009848 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a9f:	58                   	pop    eax
c0009aa0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009aa6:	5a                   	pop    edx
c0009aa7:	75 ed                	jne    c0009a96 <Virt::virtualMemorySetup()+0x36>
c0009aa9:	5b                   	pop    ebx
c0009aaa:	c3                   	ret    

c0009aab <Virt::setupPageSwapping(int)>:
c0009aab:	53                   	push   ebx
c0009aac:	83 ec 0c             	sub    esp,0xc
c0009aaf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009ab3:	a1 08 2f 02 c0       	mov    eax,ds:0xc0022f08
c0009ab8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009abe:	8b 10                	mov    edx,DWORD PTR [eax]
c0009ac0:	53                   	push   ebx
c0009ac1:	c1 e3 0b             	shl    ebx,0xb
c0009ac4:	68 f6 db 01 c0       	push   0xc001dbf6
c0009ac9:	50                   	push   eax
c0009aca:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009acd:	89 1d 90 f7 01 c0    	mov    DWORD PTR ds:0xc001f790,ebx
c0009ad3:	c6 05 98 f7 01 c0 43 	mov    BYTE PTR ds:0xc001f798,0x43
c0009ada:	c1 eb 08             	shr    ebx,0x8
c0009add:	a3 94 f7 01 c0       	mov    ds:0xc001f794,eax
c0009ae2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009ae5:	c7 05 8c f7 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f78c,0x8
c0009aef:	e8 69 e3 ff ff       	call   c0007e5d <malloc>
c0009af4:	83 c4 0c             	add    esp,0xc
c0009af7:	89 c1                	mov    ecx,eax
c0009af9:	a3 8c 0a 02 c0       	mov    ds:0xc0020a8c,eax
c0009afe:	31 d2                	xor    edx,edx
c0009b00:	a1 90 f7 01 c0       	mov    eax,ds:0xc001f790
c0009b05:	f7 35 8c f7 01 c0    	div    DWORD PTR ds:0xc001f78c
c0009b0b:	c1 e8 05             	shr    eax,0x5
c0009b0e:	50                   	push   eax
c0009b0f:	6a 00                	push   0x0
c0009b11:	51                   	push   ecx
c0009b12:	e8 d9 69 ff ff       	call   c00004f0 <memset>
c0009b17:	83 c4 18             	add    esp,0x18
c0009b1a:	5b                   	pop    ebx
c0009b1b:	c3                   	ret    

c0009b1c <VAS::VAS()>:
c0009b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b20:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b2b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009b32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b36:	a3 90 0a 02 c0       	mov    ds:0xc0020a90,eax
c0009b3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b3f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b47:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b4e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b55:	90                   	nop
c0009b56:	c3                   	ret    
c0009b57:	90                   	nop

c0009b58 <VAS::VAS(VAS*)>:
c0009b58:	83 ec 0c             	sub    esp,0xc
c0009b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b6a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009b71:	83 ec 0c             	sub    esp,0xc
c0009b74:	68 98 da 01 c0       	push   0xc001da98
c0009b79:	e8 45 6b 00 00       	call   c00106c3 <KePanic(char const*)>
c0009b7e:	83 c4 10             	add    esp,0x10
c0009b81:	90                   	nop
c0009b82:	83 c4 0c             	add    esp,0xc
c0009b85:	c3                   	ret    

c0009b86 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	89 c2                	mov    edx,eax
c0009b8c:	c1 e8 0a             	shr    eax,0xa
c0009b8f:	c1 ea 16             	shr    edx,0x16
c0009b92:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009b97:	19 c9                	sbb    ecx,ecx
c0009b99:	c1 e2 0c             	shl    edx,0xc
c0009b9c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009ba2:	25 fc 0f 00 00       	and    eax,0xffc
c0009ba7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009bae:	01 d0                	add    eax,edx
c0009bb0:	c3                   	ret    
c0009bb1:	90                   	nop

c0009bb2 <VAS::getPageTableEntry(unsigned long)>:
c0009bb2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009bb6:	89 ca                	mov    edx,ecx
c0009bb8:	c1 e9 0a             	shr    ecx,0xa
c0009bbb:	c1 ea 16             	shr    edx,0x16
c0009bbe:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009bc4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009bca:	c1 e0 0c             	shl    eax,0xc
c0009bcd:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009bd0:	c3                   	ret    

c0009bd1 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009bd1:	57                   	push   edi
c0009bd2:	56                   	push   esi
c0009bd3:	be 01 00 00 00       	mov    esi,0x1
c0009bd8:	53                   	push   ebx
c0009bd9:	83 ec 10             	sub    esp,0x10
c0009bdc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009be0:	c1 eb 0c             	shr    ebx,0xc
c0009be3:	eb 3f                	jmp    c0009c24 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009be5:	83 ec 08             	sub    esp,0x8
c0009be8:	a1 90 0a 02 c0       	mov    eax,ds:0xc0020a90
c0009bed:	57                   	push   edi
c0009bee:	50                   	push   eax
c0009bef:	e8 be ff ff ff       	call   c0009bb2 <VAS::getPageTableEntry(unsigned long)>
c0009bf4:	83 c4 10             	add    esp,0x10
c0009bf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009bfd:	f6 c4 04             	test   ah,0x4
c0009c00:	75 60                	jne    c0009c62 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009c02:	80 fa 04             	cmp    dl,0x4
c0009c05:	74 79                	je     c0009c80 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009c07:	80 fa 02             	cmp    dl,0x2
c0009c0a:	0f 84 89 00 00 00    	je     c0009c99 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009c10:	80 fa 03             	cmp    dl,0x3
c0009c13:	0f 84 ae 00 00 00    	je     c0009cc7 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009c19:	fe ca                	dec    dl
c0009c1b:	0f 84 93 00 00 00    	je     c0009cb4 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009c21:	43                   	inc    ebx
c0009c22:	31 f6                	xor    esi,esi
c0009c24:	53                   	push   ebx
c0009c25:	89 df                	mov    edi,ebx
c0009c27:	e8 51 fc ff ff       	call   c000987d <Virt::getPageState(unsigned long)>
c0009c2c:	c1 e7 0c             	shl    edi,0xc
c0009c2f:	5a                   	pop    edx
c0009c30:	84 c0                	test   al,al
c0009c32:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009c36:	75 ad                	jne    c0009be5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009c38:	83 ec 0c             	sub    esp,0xc
c0009c3b:	68 0d dc 01 c0       	push   0xc001dc0d
c0009c40:	e8 7e 6a 00 00       	call   c00106c3 <KePanic(char const*)>
c0009c45:	5a                   	pop    edx
c0009c46:	59                   	pop    ecx
c0009c47:	57                   	push   edi
c0009c48:	8b 3d 90 0a 02 c0    	mov    edi,DWORD PTR ds:0xc0020a90
c0009c4e:	57                   	push   edi
c0009c4f:	e8 5e ff ff ff       	call   c0009bb2 <VAS::getPageTableEntry(unsigned long)>
c0009c54:	83 c4 10             	add    esp,0x10
c0009c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c59:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009c5d:	f6 c4 04             	test   ah,0x4
c0009c60:	74 bf                	je     c0009c21 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009c62:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009c66:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6b:	83 ec 0c             	sub    esp,0xc
c0009c6e:	50                   	push   eax
c0009c6f:	e8 5f e4 ff ff       	call   c00080d3 <Phys::freePage(unsigned long)>
c0009c74:	83 c4 10             	add    esp,0x10
c0009c77:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009c7b:	80 fa 04             	cmp    dl,0x4
c0009c7e:	75 87                	jne    c0009c07 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009c80:	89 f0                	mov    eax,esi
c0009c82:	84 c0                	test   al,al
c0009c84:	75 47                	jne    c0009ccd <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009c86:	c7 44 24 20 bc da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dabc
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	5b                   	pop    ebx
c0009c92:	5e                   	pop    esi
c0009c93:	5f                   	pop    edi
c0009c94:	e9 2a 6a 00 00       	jmp    c00106c3 <KePanic(char const*)>
c0009c99:	89 f0                	mov    eax,esi
c0009c9b:	84 c0                	test   al,al
c0009c9d:	75 15                	jne    c0009cb4 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009c9f:	83 ec 0c             	sub    esp,0xc
c0009ca2:	68 29 dc 01 c0       	push   0xc001dc29
c0009ca7:	e8 17 6a 00 00       	call   c00106c3 <KePanic(char const*)>
c0009cac:	83 c4 10             	add    esp,0x10
c0009caf:	e9 6d ff ff ff       	jmp    c0009c21 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009cb4:	83 ec 08             	sub    esp,0x8
c0009cb7:	6a 00                	push   0x0
c0009cb9:	53                   	push   ebx
c0009cba:	e8 89 fb ff ff       	call   c0009848 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	e9 5a ff ff ff       	jmp    c0009c21 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009cc7:	89 f0                	mov    eax,esi
c0009cc9:	84 c0                	test   al,al
c0009ccb:	75 15                	jne    c0009ce2 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009ccd:	83 ec 08             	sub    esp,0x8
c0009cd0:	6a 00                	push   0x0
c0009cd2:	53                   	push   ebx
c0009cd3:	e8 70 fb ff ff       	call   c0009848 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009cd8:	83 c4 10             	add    esp,0x10
c0009cdb:	83 c4 10             	add    esp,0x10
c0009cde:	5b                   	pop    ebx
c0009cdf:	5e                   	pop    esi
c0009ce0:	5f                   	pop    edi
c0009ce1:	c3                   	ret    
c0009ce2:	c7 44 24 20 45 dc 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dc45
c0009cea:	83 c4 10             	add    esp,0x10
c0009ced:	5b                   	pop    ebx
c0009cee:	5e                   	pop    esi
c0009cef:	5f                   	pop    edi
c0009cf0:	e9 ce 69 00 00       	jmp    c00106c3 <KePanic(char const*)>
c0009cf5:	90                   	nop

c0009cf6 <VAS::freeAllocatedPages(unsigned long)>:
c0009cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009cfe:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009d02:	74 09                	je     c0009d0d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009d04:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009d08:	e9 c4 fe ff ff       	jmp    c0009bd1 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d0d:	c7 44 24 04 e0 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dae0
c0009d15:	e9 da 0d 00 00       	jmp    c000aaf4 <Dbg::kprintf(char const*, ...)>

c0009d1a <VAS::virtualToPhysical(unsigned long)>:
c0009d1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009d1e:	50                   	push   eax
c0009d1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d23:	52                   	push   edx
c0009d24:	e8 89 fe ff ff       	call   c0009bb2 <VAS::getPageTableEntry(unsigned long)>
c0009d29:	59                   	pop    ecx
c0009d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d2c:	5a                   	pop    edx
c0009d2d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d32:	c3                   	ret    
c0009d33:	90                   	nop

c0009d34 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009d34:	55                   	push   ebp
c0009d35:	57                   	push   edi
c0009d36:	56                   	push   esi
c0009d37:	53                   	push   ebx
c0009d38:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d3c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009d40:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009d44:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009d48:	85 db                	test   ebx,ebx
c0009d4a:	7e 22                	jle    c0009d6e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009d4c:	c1 e3 0c             	shl    ebx,0xc
c0009d4f:	01 f3                	add    ebx,esi
c0009d51:	56                   	push   esi
c0009d52:	81 c6 00 10 00 00    	add    esi,0x1000
c0009d58:	55                   	push   ebp
c0009d59:	e8 54 fe ff ff       	call   c0009bb2 <VAS::getPageTableEntry(unsigned long)>
c0009d5e:	5a                   	pop    edx
c0009d5f:	59                   	pop    ecx
c0009d60:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009d62:	21 f9                	and    ecx,edi
c0009d64:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009d68:	39 f3                	cmp    ebx,esi
c0009d6a:	89 08                	mov    DWORD PTR [eax],ecx
c0009d6c:	75 e3                	jne    c0009d51 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009d6e:	5b                   	pop    ebx
c0009d6f:	5e                   	pop    esi
c0009d70:	5f                   	pop    edi
c0009d71:	5d                   	pop    ebp
c0009d72:	c3                   	ret    
c0009d73:	90                   	nop

c0009d74 <VAS::setToWriteCombining(unsigned long, int)>:
c0009d74:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c0009d79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d7f:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009d86:	75 01                	jne    c0009d89 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009d88:	c3                   	ret    
c0009d89:	68 80 00 00 00       	push   0x80
c0009d8e:	6a ff                	push   0xffffffff
c0009d90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009d94:	50                   	push   eax
c0009d95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009d99:	52                   	push   edx
c0009d9a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009d9e:	51                   	push   ecx
c0009d9f:	e8 90 ff ff ff       	call   c0009d34 <VAS::reflagRange(unsigned long, int, int, int)>
c0009da4:	83 c4 14             	add    esp,0x14
c0009da7:	c3                   	ret    

c0009da8 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009da8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009dad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009db1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009db8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009dbb:	19 c0                	sbb    eax,eax
c0009dbd:	83 ca 03             	or     edx,0x3
c0009dc0:	83 e0 fc             	and    eax,0xfffffffc
c0009dc3:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009dca:	0f 20 d8             	mov    eax,cr3
c0009dcd:	0f 22 d8             	mov    cr3,eax
c0009dd0:	c3                   	ret    
c0009dd1:	90                   	nop

c0009dd2 <VAS::~VAS()>:
c0009dd2:	83 ec 2c             	sub    esp,0x2c
c0009dd5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ddd:	fa                   	cli    
c0009dde:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0009de3:	40                   	inc    eax
c0009de4:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0009de9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009dee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009df0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009df3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009df9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009dfd:	6a 01                	push   0x1
c0009dff:	50                   	push   eax
c0009e00:	e8 a3 ff ff ff       	call   c0009da8 <VAS::mapOtherVASIn(bool, VAS*)>
c0009e05:	83 c4 0c             	add    esp,0xc
c0009e08:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009e10:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009e18:	0f 8f d4 00 00 00    	jg     c0009ef2 <VAS::~VAS()+0x120>
c0009e1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e25:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e29:	c1 e2 02             	shl    edx,0x2
c0009e2c:	01 d0                	add    eax,edx
c0009e2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e38:	83 e0 01             	and    eax,0x1
c0009e3b:	0f 84 a8 00 00 00    	je     c0009ee9 <VAS::~VAS()+0x117>
c0009e41:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009e49:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009e51:	7f 72                	jg     c0009ec5 <VAS::~VAS()+0xf3>
c0009e53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e57:	c1 e0 0a             	shl    eax,0xa
c0009e5a:	89 c2                	mov    edx,eax
c0009e5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e60:	01 d0                	add    eax,edx
c0009e62:	c1 e0 0c             	shl    eax,0xc
c0009e65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e69:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009e6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e73:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009e79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009e7d:	6a 01                	push   0x1
c0009e7f:	50                   	push   eax
c0009e80:	e8 01 fd ff ff       	call   c0009b86 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009e85:	83 c4 0c             	add    esp,0xc
c0009e88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009e9a:	25 01 04 00 00       	and    eax,0x401
c0009e9f:	3d 01 04 00 00       	cmp    eax,0x401
c0009ea4:	75 19                	jne    c0009ebf <VAS::~VAS()+0xed>
c0009ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009eaa:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009eaf:	83 ec 0c             	sub    esp,0xc
c0009eb2:	50                   	push   eax
c0009eb3:	e8 1b e2 ff ff       	call   c00080d3 <Phys::freePage(unsigned long)>
c0009eb8:	83 c4 10             	add    esp,0x10
c0009ebb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009ebf:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009ec3:	eb 84                	jmp    c0009e49 <VAS::~VAS()+0x77>
c0009ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ec9:	25 00 04 00 00       	and    eax,0x400
c0009ece:	74 19                	je     c0009ee9 <VAS::~VAS()+0x117>
c0009ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ed9:	83 ec 0c             	sub    esp,0xc
c0009edc:	50                   	push   eax
c0009edd:	e8 f1 e1 ff ff       	call   c00080d3 <Phys::freePage(unsigned long)>
c0009ee2:	83 c4 10             	add    esp,0x10
c0009ee5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009ee9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009eed:	e9 1e ff ff ff       	jmp    c0009e10 <VAS::~VAS()+0x3e>
c0009ef2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ef9:	83 ec 0c             	sub    esp,0xc
c0009efc:	50                   	push   eax
c0009efd:	e8 cf fc ff ff       	call   c0009bd1 <Virt::freeKernelVirtualPages(unsigned long)>
c0009f02:	83 c4 10             	add    esp,0x10
c0009f05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f09:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f0c:	83 ec 0c             	sub    esp,0xc
c0009f0f:	50                   	push   eax
c0009f10:	e8 be e1 ff ff       	call   c00080d3 <Phys::freePage(unsigned long)>
c0009f15:	83 c4 10             	add    esp,0x10
c0009f18:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f1c:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0009f21:	48                   	dec    eax
c0009f22:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0009f27:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0009f2c:	85 c0                	test   eax,eax
c0009f2e:	75 01                	jne    c0009f31 <VAS::~VAS()+0x15f>
c0009f30:	fb                   	sti    
c0009f31:	90                   	nop
c0009f32:	83 c4 2c             	add    esp,0x2c
c0009f35:	c3                   	ret    

c0009f36 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009f36:	55                   	push   ebp
c0009f37:	57                   	push   edi
c0009f38:	56                   	push   esi
c0009f39:	53                   	push   ebx
c0009f3a:	83 ec 1c             	sub    esp,0x1c
c0009f3d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009f41:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f45:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009f4b:	77 0b                	ja     c0009f58 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009f4d:	0f 20 d8             	mov    eax,cr3
c0009f50:	0f 20 d8             	mov    eax,cr3
c0009f53:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009f56:	75 47                	jne    c0009f9f <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009f58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f5c:	09 d8                	or     eax,ebx
c0009f5e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f63:	75 57                	jne    c0009fbc <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009f65:	89 de                	mov    esi,ebx
c0009f67:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f6a:	c1 ee 16             	shr    esi,0x16
c0009f6d:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009f74:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009f78:	74 54                	je     c0009fce <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009f7a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7e:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009f84:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009f88:	c1 e6 0c             	shl    esi,0xc
c0009f8b:	c1 eb 0a             	shr    ebx,0xa
c0009f8e:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009f94:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009f97:	83 c4 1c             	add    esp,0x1c
c0009f9a:	5b                   	pop    ebx
c0009f9b:	5e                   	pop    esi
c0009f9c:	5f                   	pop    edi
c0009f9d:	5d                   	pop    ebp
c0009f9e:	c3                   	ret    
c0009f9f:	83 ec 0c             	sub    esp,0xc
c0009fa2:	68 04 db 01 c0       	push   0xc001db04
c0009fa7:	e8 48 0b 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0009fac:	83 c4 10             	add    esp,0x10
c0009faf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009fb3:	09 d8                	or     eax,ebx
c0009fb5:	a9 ff 0f 00 00       	test   eax,0xfff
c0009fba:	74 a9                	je     c0009f65 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009fbc:	83 ec 0c             	sub    esp,0xc
c0009fbf:	68 6c db 01 c0       	push   0xc001db6c
c0009fc4:	e8 fa 66 00 00       	call   c00106c3 <KePanic(char const*)>
c0009fc9:	83 c4 10             	add    esp,0x10
c0009fcc:	eb 97                	jmp    c0009f65 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009fce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fd2:	e8 5e e1 ff ff       	call   c0008135 <Phys::allocatePage()>
c0009fd7:	83 ec 0c             	sub    esp,0xc
c0009fda:	89 c5                	mov    ebp,eax
c0009fdc:	8b 0d 90 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a90
c0009fe2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009fe6:	6a 01                	push   0x1
c0009fe8:	e8 b4 f8 ff ff       	call   c00098a1 <Virt::allocateKernelVirtualPages(int)>
c0009fed:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ff4:	6a 01                	push   0x1
c0009ff6:	50                   	push   eax
c0009ff7:	55                   	push   ebp
c0009ff8:	81 cd 07 04 00 00    	or     ebp,0x407
c0009ffe:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a002:	51                   	push   ecx
c000a003:	e8 28 02 00 00       	call   c000a230 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a008:	83 c4 1c             	add    esp,0x1c
c000a00b:	68 00 10 00 00       	push   0x1000
c000a010:	6a 00                	push   0x0
c000a012:	50                   	push   eax
c000a013:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a017:	e8 d4 64 ff ff       	call   c00004f0 <memset>
c000a01c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a020:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a023:	e8 a9 fb ff ff       	call   c0009bd1 <Virt::freeKernelVirtualPages(unsigned long)>
c000a028:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a02c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a02f:	83 c4 10             	add    esp,0x10
c000a032:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000a035:	e9 40 ff ff ff       	jmp    c0009f7a <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000a03a <VAS::allocatePages(int, int)>:
c000a03a:	55                   	push   ebp
c000a03b:	57                   	push   edi
c000a03c:	56                   	push   esi
c000a03d:	53                   	push   ebx
c000a03e:	83 ec 1c             	sub    esp,0x1c
c000a041:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a045:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000a04a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a050:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a056:	83 e0 01             	and    eax,0x1
c000a059:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000a05d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a061:	0f 85 cc 00 00 00    	jne    c000a133 <VAS::allocatePages(int, int)+0xf9>
c000a067:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a06a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a06e:	85 c0                	test   eax,eax
c000a070:	0f 84 a1 00 00 00    	je     c000a117 <VAS::allocatePages(int, int)+0xdd>
c000a076:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a07a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a07e:	c1 e6 0c             	shl    esi,0xc
c000a081:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000a085:	85 c0                	test   eax,eax
c000a087:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000a08a:	7e 33                	jle    c000a0bf <VAS::allocatePages(int, int)+0x85>
c000a08c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a090:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a094:	81 cd 00 04 00 00    	or     ebp,0x400
c000a09a:	e8 96 e0 ff ff       	call   c0008135 <Phys::allocatePage()>
c000a09f:	55                   	push   ebp
c000a0a0:	53                   	push   ebx
c000a0a1:	50                   	push   eax
c000a0a2:	57                   	push   edi
c000a0a3:	e8 8e fe ff ff       	call   c0009f36 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a0a8:	83 c4 10             	add    esp,0x10
c000a0ab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a0b0:	74 03                	je     c000a0b5 <VAS::allocatePages(int, int)+0x7b>
c000a0b2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0b5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0bb:	39 de                	cmp    esi,ebx
c000a0bd:	75 db                	jne    c000a09a <VAS::allocatePages(int, int)+0x60>
c000a0bf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a0c4:	75 12                	jne    c000a0d8 <VAS::allocatePages(int, int)+0x9e>
c000a0c6:	0f 20 d8             	mov    eax,cr3
c000a0c9:	0f 22 d8             	mov    cr3,eax
c000a0cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0d0:	83 c4 1c             	add    esp,0x1c
c000a0d3:	5b                   	pop    ebx
c000a0d4:	5e                   	pop    esi
c000a0d5:	5f                   	pop    edi
c000a0d6:	5d                   	pop    ebp
c000a0d7:	c3                   	ret    
c000a0d8:	c1 ee 0a             	shr    esi,0xa
c000a0db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a0df:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a0e5:	c1 eb 0a             	shr    ebx,0xa
c000a0e8:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000a0ee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0f4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a0fa:	39 c3                	cmp    ebx,eax
c000a0fc:	77 ce                	ja     c000a0cc <VAS::allocatePages(int, int)+0x92>
c000a0fe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a101:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a107:	39 d8                	cmp    eax,ebx
c000a109:	73 f3                	jae    c000a0fe <VAS::allocatePages(int, int)+0xc4>
c000a10b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a10f:	83 c4 1c             	add    esp,0x1c
c000a112:	5b                   	pop    ebx
c000a113:	5e                   	pop    esi
c000a114:	5f                   	pop    edi
c000a115:	5d                   	pop    ebp
c000a116:	c3                   	ret    
c000a117:	83 ec 0c             	sub    esp,0xc
c000a11a:	68 90 db 01 c0       	push   0xc001db90
c000a11f:	e8 9f 65 00 00       	call   c00106c3 <KePanic(char const*)>
c000a124:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a127:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a12b:	83 c4 10             	add    esp,0x10
c000a12e:	e9 43 ff ff ff       	jmp    c000a076 <VAS::allocatePages(int, int)+0x3c>
c000a133:	83 ec 0c             	sub    esp,0xc
c000a136:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000a13a:	51                   	push   ecx
c000a13b:	e8 61 f7 ff ff       	call   c00098a1 <Virt::allocateKernelVirtualPages(int)>
c000a140:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a144:	83 c4 10             	add    esp,0x10
c000a147:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000a14c:	0f 87 9b 00 00 00    	ja     c000a1ed <VAS::allocatePages(int, int)+0x1b3>
c000a152:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a156:	85 d2                	test   edx,edx
c000a158:	7e 3c                	jle    c000a196 <VAS::allocatePages(int, int)+0x15c>
c000a15a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a15e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a162:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a166:	c1 e5 0c             	shl    ebp,0xc
c000a169:	81 ce 00 04 00 00    	or     esi,0x400
c000a16f:	01 dd                	add    ebp,ebx
c000a171:	e8 bf df ff ff       	call   c0008135 <Phys::allocatePage()>
c000a176:	56                   	push   esi
c000a177:	53                   	push   ebx
c000a178:	50                   	push   eax
c000a179:	57                   	push   edi
c000a17a:	e8 b7 fd ff ff       	call   c0009f36 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a17f:	83 c4 10             	add    esp,0x10
c000a182:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a187:	74 03                	je     c000a18c <VAS::allocatePages(int, int)+0x152>
c000a189:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a18c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a192:	39 dd                	cmp    ebp,ebx
c000a194:	75 db                	jne    c000a171 <VAS::allocatePages(int, int)+0x137>
c000a196:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a19b:	0f 84 25 ff ff ff    	je     c000a0c6 <VAS::allocatePages(int, int)+0x8c>
c000a1a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a1a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1a9:	89 d3                	mov    ebx,edx
c000a1ab:	c1 e0 0c             	shl    eax,0xc
c000a1ae:	c1 eb 0a             	shr    ebx,0xa
c000a1b1:	01 d0                	add    eax,edx
c000a1b3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a1b9:	c1 e8 0a             	shr    eax,0xa
c000a1bc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a1c2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a1c7:	2d 00 00 40 00       	sub    eax,0x400000
c000a1cc:	39 c3                	cmp    ebx,eax
c000a1ce:	0f 87 f8 fe ff ff    	ja     c000a0cc <VAS::allocatePages(int, int)+0x92>
c000a1d4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1d7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1dd:	39 d8                	cmp    eax,ebx
c000a1df:	73 f3                	jae    c000a1d4 <VAS::allocatePages(int, int)+0x19a>
c000a1e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1e5:	83 c4 1c             	add    esp,0x1c
c000a1e8:	5b                   	pop    ebx
c000a1e9:	5e                   	pop    esi
c000a1ea:	5f                   	pop    edi
c000a1eb:	5d                   	pop    ebp
c000a1ec:	c3                   	ret    
c000a1ed:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000a1f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1f8:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a1ff:	0f 84 4d ff ff ff    	je     c000a152 <VAS::allocatePages(int, int)+0x118>
c000a205:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000a20d:	e9 40 ff ff ff       	jmp    c000a152 <VAS::allocatePages(int, int)+0x118>

c000a212 <VAS::setCPUSpecific(unsigned long)>:
c000a212:	83 ec 0c             	sub    esp,0xc
c000a215:	6a 05                	push   0x5
c000a217:	68 00 00 40 c2       	push   0xc2400000
c000a21c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a220:	50                   	push   eax
c000a221:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a225:	52                   	push   edx
c000a226:	e8 0b fd ff ff       	call   c0009f36 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a22b:	83 c4 1c             	add    esp,0x1c
c000a22e:	c3                   	ret    
c000a22f:	90                   	nop

c000a230 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a230:	55                   	push   ebp
c000a231:	57                   	push   edi
c000a232:	56                   	push   esi
c000a233:	53                   	push   ebx
c000a234:	83 ec 1c             	sub    esp,0x1c
c000a237:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000a23c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a240:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a246:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a24a:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a250:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a254:	83 e0 01             	and    eax,0x1
c000a257:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a25b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a25f:	85 c0                	test   eax,eax
c000a261:	7e 39                	jle    c000a29c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000a263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a267:	89 f3                	mov    ebx,esi
c000a269:	c1 e0 0c             	shl    eax,0xc
c000a26c:	01 f0                	add    eax,esi
c000a26e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a272:	55                   	push   ebp
c000a273:	53                   	push   ebx
c000a274:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a278:	29 f0                	sub    eax,esi
c000a27a:	01 d8                	add    eax,ebx
c000a27c:	50                   	push   eax
c000a27d:	57                   	push   edi
c000a27e:	e8 b3 fc ff ff       	call   c0009f36 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a283:	83 c4 10             	add    esp,0x10
c000a286:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a28b:	74 03                	je     c000a290 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000a28d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a290:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a296:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000a29a:	75 d6                	jne    c000a272 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a29c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a2a1:	75 10                	jne    c000a2b3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000a2a3:	0f 20 d8             	mov    eax,cr3
c000a2a6:	0f 22 d8             	mov    cr3,eax
c000a2a9:	83 c4 1c             	add    esp,0x1c
c000a2ac:	89 f0                	mov    eax,esi
c000a2ae:	5b                   	pop    ebx
c000a2af:	5e                   	pop    esi
c000a2b0:	5f                   	pop    edi
c000a2b1:	5d                   	pop    ebp
c000a2b2:	c3                   	ret    
c000a2b3:	89 f3                	mov    ebx,esi
c000a2b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a2b9:	c1 eb 0a             	shr    ebx,0xa
c000a2bc:	c1 e0 0c             	shl    eax,0xc
c000a2bf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a2c5:	01 f0                	add    eax,esi
c000a2c7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a2cd:	c1 e8 0a             	shr    eax,0xa
c000a2d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2d5:	2d 00 00 40 00       	sub    eax,0x400000
c000a2da:	39 c3                	cmp    ebx,eax
c000a2dc:	77 cb                	ja     c000a2a9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000a2de:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a2e1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a2e7:	39 d8                	cmp    eax,ebx
c000a2e9:	73 f3                	jae    c000a2de <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000a2eb:	83 c4 1c             	add    esp,0x1c
c000a2ee:	89 f0                	mov    eax,esi
c000a2f0:	5b                   	pop    ebx
c000a2f1:	5e                   	pop    esi
c000a2f2:	5f                   	pop    edi
c000a2f3:	5d                   	pop    ebp
c000a2f4:	c3                   	ret    
c000a2f5:	90                   	nop

c000a2f6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a2f6:	55                   	push   ebp
c000a2f7:	57                   	push   edi
c000a2f8:	56                   	push   esi
c000a2f9:	53                   	push   ebx
c000a2fa:	83 ec 1c             	sub    esp,0x1c
c000a2fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a301:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a305:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000a309:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a30d:	a9 ff 0f 00 00       	test   eax,0xfff
c000a312:	75 4a                	jne    c000a35e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000a314:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a318:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a31b:	c1 eb 16             	shr    ebx,0x16
c000a31e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000a325:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000a329:	74 4d                	je     c000a378 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000a32b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a32f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a333:	c1 e8 0a             	shr    eax,0xa
c000a336:	80 fa 01             	cmp    dl,0x1
c000a339:	19 d2                	sbb    edx,edx
c000a33b:	c1 e3 0c             	shl    ebx,0xc
c000a33e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000a342:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a348:	25 fc 0f 00 00       	and    eax,0xffc
c000a34d:	01 d8                	add    eax,ebx
c000a34f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a356:	83 c4 1c             	add    esp,0x1c
c000a359:	5b                   	pop    ebx
c000a35a:	5e                   	pop    esi
c000a35b:	5f                   	pop    edi
c000a35c:	5d                   	pop    ebp
c000a35d:	c3                   	ret    
c000a35e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a362:	83 ec 0c             	sub    esp,0xc
c000a365:	68 bc db 01 c0       	push   0xc001dbbc
c000a36a:	e8 54 63 00 00       	call   c00106c3 <KePanic(char const*)>
c000a36f:	83 c4 10             	add    esp,0x10
c000a372:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a376:	eb 9c                	jmp    c000a314 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000a378:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a37c:	e8 b4 dd ff ff       	call   c0008135 <Phys::allocatePage()>
c000a381:	83 ec 0c             	sub    esp,0xc
c000a384:	89 c5                	mov    ebp,eax
c000a386:	8b 0d 90 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a90
c000a38c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a390:	6a 01                	push   0x1
c000a392:	e8 0a f5 ff ff       	call   c00098a1 <Virt::allocateKernelVirtualPages(int)>
c000a397:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a39e:	6a 01                	push   0x1
c000a3a0:	50                   	push   eax
c000a3a1:	55                   	push   ebp
c000a3a2:	81 cd 07 04 00 00    	or     ebp,0x407
c000a3a8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a3ac:	51                   	push   ecx
c000a3ad:	e8 7e fe ff ff       	call   c000a230 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a3b2:	83 c4 1c             	add    esp,0x1c
c000a3b5:	68 00 10 00 00       	push   0x1000
c000a3ba:	6a 00                	push   0x0
c000a3bc:	50                   	push   eax
c000a3bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3c1:	e8 2a 61 ff ff       	call   c00004f0 <memset>
c000a3c6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a3ca:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3cd:	e8 ff f7 ff ff       	call   c0009bd1 <Virt::freeKernelVirtualPages(unsigned long)>
c000a3d2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a3d5:	83 c4 10             	add    esp,0x10
c000a3d8:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a3db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a3df:	e9 47 ff ff ff       	jmp    c000a32b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a3e4 <VAS::VAS(bool)>:
c000a3e4:	53                   	push   ebx
c000a3e5:	83 ec 28             	sub    esp,0x28
c000a3e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a3ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a3f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a3f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a3fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a3ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a406:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a40a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a40e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a411:	e8 1f dd ff ff       	call   c0008135 <Phys::allocatePage()>
c000a416:	89 c2                	mov    edx,eax
c000a418:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a41c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a41f:	8b 1d 90 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a90
c000a425:	83 ec 0c             	sub    esp,0xc
c000a428:	6a 01                	push   0x1
c000a42a:	e8 72 f4 ff ff       	call   c00098a1 <Virt::allocateKernelVirtualPages(int)>
c000a42f:	83 c4 10             	add    esp,0x10
c000a432:	89 c2                	mov    edx,eax
c000a434:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a438:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a43b:	83 ec 0c             	sub    esp,0xc
c000a43e:	6a 03                	push   0x3
c000a440:	6a 01                	push   0x1
c000a442:	52                   	push   edx
c000a443:	50                   	push   eax
c000a444:	53                   	push   ebx
c000a445:	e8 e6 fd ff ff       	call   c000a230 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a44a:	83 c4 20             	add    esp,0x20
c000a44d:	89 c2                	mov    edx,eax
c000a44f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a453:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a456:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a45e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a466:	7f 1c                	jg     c000a484 <VAS::VAS(bool)+0xa0>
c000a468:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a46c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a46f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a473:	c1 e2 02             	shl    edx,0x2
c000a476:	01 d0                	add    eax,edx
c000a478:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a47e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a482:	eb da                	jmp    c000a45e <VAS::VAS(bool)+0x7a>
c000a484:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a48c:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a494:	7f 7a                	jg     c000a510 <VAS::VAS(bool)+0x12c>
c000a496:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a49a:	2d 00 02 00 00       	sub    eax,0x200
c000a49f:	c1 e0 0c             	shl    eax,0xc
c000a4a2:	83 c8 03             	or     eax,0x3
c000a4a5:	89 c2                	mov    edx,eax
c000a4a7:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000a4ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a4b2:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a4b8:	83 e0 10             	and    eax,0x10
c000a4bb:	84 c0                	test   al,al
c000a4bd:	74 07                	je     c000a4c6 <VAS::VAS(bool)+0xe2>
c000a4bf:	b8 00 01 00 00       	mov    eax,0x100
c000a4c4:	eb 05                	jmp    c000a4cb <VAS::VAS(bool)+0xe7>
c000a4c6:	b8 00 00 00 00       	mov    eax,0x0
c000a4cb:	09 d0                	or     eax,edx
c000a4cd:	89 c1                	mov    ecx,eax
c000a4cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a4d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4da:	c1 e2 02             	shl    edx,0x2
c000a4dd:	01 d0                	add    eax,edx
c000a4df:	89 ca                	mov    edx,ecx
c000a4e1:	89 10                	mov    DWORD PTR [eax],edx
c000a4e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4e7:	2d 40 03 00 00       	sub    eax,0x340
c000a4ec:	83 f8 7f             	cmp    eax,0x7f
c000a4ef:	77 16                	ja     c000a507 <VAS::VAS(bool)+0x123>
c000a4f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a4f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4fc:	c1 e2 02             	shl    edx,0x2
c000a4ff:	01 d0                	add    eax,edx
c000a501:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a507:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a50b:	e9 7c ff ff ff       	jmp    c000a48c <VAS::VAS(bool)+0xa8>
c000a510:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000a515:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a51b:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a521:	83 e0 10             	and    eax,0x10
c000a524:	84 c0                	test   al,al
c000a526:	74 07                	je     c000a52f <VAS::VAS(bool)+0x14b>
c000a528:	b8 03 41 00 00       	mov    eax,0x4103
c000a52d:	eb 05                	jmp    c000a534 <VAS::VAS(bool)+0x150>
c000a52f:	b8 03 40 00 00       	mov    eax,0x4003
c000a534:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a538:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a53b:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a541:	89 02                	mov    DWORD PTR [edx],eax
c000a543:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000a548:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a54e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a554:	83 ec 08             	sub    esp,0x8
c000a557:	50                   	push   eax
c000a558:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a55c:	e8 b1 fc ff ff       	call   c000a212 <VAS::setCPUSpecific(unsigned long)>
c000a561:	83 c4 10             	add    esp,0x10
c000a564:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a568:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a56b:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000a570:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a576:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a57c:	83 e0 10             	and    eax,0x10
c000a57f:	84 c0                	test   al,al
c000a581:	74 07                	je     c000a58a <VAS::VAS(bool)+0x1a6>
c000a583:	b8 00 01 00 00       	mov    eax,0x100
c000a588:	eb 05                	jmp    c000a58f <VAS::VAS(bool)+0x1ab>
c000a58a:	b8 00 00 00 00       	mov    eax,0x0
c000a58f:	09 c2                	or     edx,eax
c000a591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a595:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a598:	05 fc 0f 00 00       	add    eax,0xffc
c000a59d:	83 ca 03             	or     edx,0x3
c000a5a0:	89 10                	mov    DWORD PTR [eax],edx
c000a5a2:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000a5a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a5ad:	83 ec 0c             	sub    esp,0xc
c000a5b0:	50                   	push   eax
c000a5b1:	e8 12 1c 00 00       	call   c000c1c8 <Device::getName()>
c000a5b6:	83 c4 10             	add    esp,0x10
c000a5b9:	83 ec 08             	sub    esp,0x8
c000a5bc:	68 5f dc 01 c0       	push   0xc001dc5f
c000a5c1:	50                   	push   eax
c000a5c2:	e8 39 61 ff ff       	call   c0000700 <strcmp>
c000a5c7:	83 c4 10             	add    esp,0x10
c000a5ca:	85 c0                	test   eax,eax
c000a5cc:	0f 94 c0             	sete   al
c000a5cf:	84 c0                	test   al,al
c000a5d1:	0f 84 87 00 00 00    	je     c000a65e <VAS::VAS(bool)+0x27a>
c000a5d7:	fa                   	cli    
c000a5d8:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000a5dd:	40                   	inc    eax
c000a5de:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c000a5e3:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000a5e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a5ee:	05 7c 09 00 00       	add    eax,0x97c
c000a5f3:	83 ec 0c             	sub    esp,0xc
c000a5f6:	50                   	push   eax
c000a5f7:	e8 5e d3 ff ff       	call   c000795a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a5fc:	83 c4 10             	add    esp,0x10
c000a5ff:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a604:	89 c3                	mov    ebx,eax
c000a606:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000a60b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a611:	05 7c 09 00 00       	add    eax,0x97c
c000a616:	83 ec 0c             	sub    esp,0xc
c000a619:	50                   	push   eax
c000a61a:	e8 3b d3 ff ff       	call   c000795a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a61f:	83 c4 10             	add    esp,0x10
c000a622:	83 ec 08             	sub    esp,0x8
c000a625:	50                   	push   eax
c000a626:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a62a:	e8 83 f5 ff ff       	call   c0009bb2 <VAS::getPageTableEntry(unsigned long)>
c000a62f:	83 c4 10             	add    esp,0x10
c000a632:	8b 00                	mov    eax,DWORD PTR [eax]
c000a634:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a639:	6a 11                	push   0x11
c000a63b:	53                   	push   ebx
c000a63c:	50                   	push   eax
c000a63d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a641:	e8 f0 f8 ff ff       	call   c0009f36 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a646:	83 c4 10             	add    esp,0x10
c000a649:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000a64e:	48                   	dec    eax
c000a64f:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c000a654:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000a659:	85 c0                	test   eax,eax
c000a65b:	75 01                	jne    c000a65e <VAS::VAS(bool)+0x27a>
c000a65d:	fb                   	sti    
c000a65e:	90                   	nop
c000a65f:	83 c4 28             	add    esp,0x28
c000a662:	5b                   	pop    ebx
c000a663:	c3                   	ret    

c000a664 <VAS::evict(unsigned long)>:
c000a664:	55                   	push   ebp
c000a665:	57                   	push   edi
c000a666:	56                   	push   esi
c000a667:	53                   	push   ebx
c000a668:	83 ec 1c             	sub    esp,0x1c
c000a66b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a66f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a673:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a677:	e8 66 f3 ff ff       	call   c00099e2 <Virt::allocateSwapfilePage()>
c000a67c:	8b 0d 8c f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f78c
c000a682:	89 c7                	mov    edi,eax
c000a684:	85 c9                	test   ecx,ecx
c000a686:	7e 3e                	jle    c000a6c6 <VAS::evict(unsigned long)+0x62>
c000a688:	89 ee                	mov    esi,ebp
c000a68a:	31 db                	xor    ebx,ebx
c000a68c:	83 ec 0c             	sub    esp,0xc
c000a68f:	57                   	push   edi
c000a690:	e8 3b f3 ff ff       	call   c00099d0 <Virt::swapIDToSector(unsigned long)>
c000a695:	89 34 24             	mov    DWORD PTR [esp],esi
c000a698:	01 d8                	add    eax,ebx
c000a69a:	6a 01                	push   0x1
c000a69c:	31 d2                	xor    edx,edx
c000a69e:	43                   	inc    ebx
c000a69f:	52                   	push   edx
c000a6a0:	81 c6 00 02 00 00    	add    esi,0x200
c000a6a6:	50                   	push   eax
c000a6a7:	0f be 05 98 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f798
c000a6ae:	8b 14 85 fc 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd204]
c000a6b5:	52                   	push   edx
c000a6b6:	e8 8d 2b 00 00       	call   c000d248 <LogicalDisk::write(unsigned long long, int, void*)>
c000a6bb:	83 c4 20             	add    esp,0x20
c000a6be:	39 1d 8c f7 01 c0    	cmp    DWORD PTR ds:0xc001f78c,ebx
c000a6c4:	7f c6                	jg     c000a68c <VAS::evict(unsigned long)+0x28>
c000a6c6:	83 ec 08             	sub    esp,0x8
c000a6c9:	c1 e7 0b             	shl    edi,0xb
c000a6cc:	55                   	push   ebp
c000a6cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a6d1:	50                   	push   eax
c000a6d2:	e8 db f4 ff ff       	call   c0009bb2 <VAS::getPageTableEntry(unsigned long)>
c000a6d7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a6d9:	89 d1                	mov    ecx,edx
c000a6db:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a6e1:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a6e7:	09 cf                	or     edi,ecx
c000a6e9:	89 38                	mov    DWORD PTR [eax],edi
c000a6eb:	89 14 24             	mov    DWORD PTR [esp],edx
c000a6ee:	ff 05 88 0a 02 c0    	inc    DWORD PTR ds:0xc0020a88
c000a6f4:	e8 da d9 ff ff       	call   c00080d3 <Phys::freePage(unsigned long)>
c000a6f9:	0f 20 d8             	mov    eax,cr3
c000a6fc:	0f 22 d8             	mov    cr3,eax
c000a6ff:	a1 84 0a 02 c0       	mov    eax,ds:0xc0020a84
c000a704:	c7 44 24 40 6d dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dc6d
c000a70c:	8d 50 01             	lea    edx,[eax+0x1]
c000a70f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a713:	89 15 84 0a 02 c0    	mov    DWORD PTR ds:0xc0020a84,edx
c000a719:	83 c4 2c             	add    esp,0x2c
c000a71c:	5b                   	pop    ebx
c000a71d:	5e                   	pop    esi
c000a71e:	5f                   	pop    edi
c000a71f:	5d                   	pop    ebp
c000a720:	e9 cf 03 00 00       	jmp    c000aaf4 <Dbg::kprintf(char const*, ...)>
c000a725:	90                   	nop

c000a726 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a726:	55                   	push   ebp
c000a727:	57                   	push   edi
c000a728:	56                   	push   esi
c000a729:	53                   	push   ebx
c000a72a:	83 ec 14             	sub    esp,0x14
c000a72d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a731:	53                   	push   ebx
c000a732:	68 7e dc 01 c0       	push   0xc001dc7e
c000a737:	e8 b8 03 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000a73c:	83 c4 10             	add    esp,0x10
c000a73f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a745:	74 21                	je     c000a768 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a747:	83 ec 08             	sub    esp,0x8
c000a74a:	53                   	push   ebx
c000a74b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a74f:	57                   	push   edi
c000a750:	e8 5d f4 ff ff       	call   c0009bb2 <VAS::getPageTableEntry(unsigned long)>
c000a755:	83 c4 10             	add    esp,0x10
c000a758:	89 c6                	mov    esi,eax
c000a75a:	85 c0                	test   eax,eax
c000a75c:	74 0a                	je     c000a768 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a75e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a760:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a766:	74 0a                	je     c000a772 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a768:	31 c0                	xor    eax,eax
c000a76a:	83 c4 0c             	add    esp,0xc
c000a76d:	5b                   	pop    ebx
c000a76e:	5e                   	pop    esi
c000a76f:	5f                   	pop    edi
c000a770:	5d                   	pop    ebp
c000a771:	c3                   	ret    
c000a772:	e8 be d9 ff ff       	call   c0008135 <Phys::allocatePage()>
c000a777:	c1 ed 0b             	shr    ebp,0xb
c000a77a:	8b 16                	mov    edx,DWORD PTR [esi]
c000a77c:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a782:	09 c2                	or     edx,eax
c000a784:	81 ca 01 08 00 00    	or     edx,0x801
c000a78a:	89 16                	mov    DWORD PTR [esi],edx
c000a78c:	8b 35 8c f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f78c
c000a792:	85 f6                	test   esi,esi
c000a794:	7e 3e                	jle    c000a7d4 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a796:	89 df                	mov    edi,ebx
c000a798:	31 f6                	xor    esi,esi
c000a79a:	83 ec 0c             	sub    esp,0xc
c000a79d:	55                   	push   ebp
c000a79e:	e8 2d f2 ff ff       	call   c00099d0 <Virt::swapIDToSector(unsigned long)>
c000a7a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a7a6:	01 f0                	add    eax,esi
c000a7a8:	6a 01                	push   0x1
c000a7aa:	31 d2                	xor    edx,edx
c000a7ac:	46                   	inc    esi
c000a7ad:	52                   	push   edx
c000a7ae:	81 c7 00 02 00 00    	add    edi,0x200
c000a7b4:	50                   	push   eax
c000a7b5:	0f be 05 98 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f798
c000a7bc:	8b 0c 85 fc 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd204]
c000a7c3:	51                   	push   ecx
c000a7c4:	e8 13 2a 00 00       	call   c000d1dc <LogicalDisk::read(unsigned long long, int, void*)>
c000a7c9:	83 c4 20             	add    esp,0x20
c000a7cc:	39 35 8c f7 01 c0    	cmp    DWORD PTR ds:0xc001f78c,esi
c000a7d2:	7f c6                	jg     c000a79a <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a7d4:	a1 88 0a 02 c0       	mov    eax,ds:0xc0020a88
c000a7d9:	48                   	dec    eax
c000a7da:	52                   	push   edx
c000a7db:	a3 88 0a 02 c0       	mov    ds:0xc0020a88,eax
c000a7e0:	50                   	push   eax
c000a7e1:	53                   	push   ebx
c000a7e2:	68 91 dc 01 c0       	push   0xc001dc91
c000a7e7:	e8 08 03 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000a7ec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a7ef:	e8 be f1 ff ff       	call   c00099b2 <Virt::freeSwapfilePage(unsigned long)>
c000a7f4:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000a7f9:	83 c4 10             	add    esp,0x10
c000a7fc:	48                   	dec    eax
c000a7fd:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c000a802:	85 c0                	test   eax,eax
c000a804:	75 01                	jne    c000a807 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a806:	fb                   	sti    
c000a807:	0f 20 d8             	mov    eax,cr3
c000a80a:	0f 22 d8             	mov    cr3,eax
c000a80d:	b0 01                	mov    al,0x1
c000a80f:	e9 56 ff ff ff       	jmp    c000a76a <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a814 <VAS::scanForEviction()>:
c000a814:	57                   	push   edi
c000a815:	31 ff                	xor    edi,edi
c000a817:	56                   	push   esi
c000a818:	53                   	push   ebx
c000a819:	83 ec 10             	sub    esp,0x10
c000a81c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a820:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a823:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a829:	75 0e                	jne    c000a839 <VAS::scanForEviction()+0x25>
c000a82b:	89 da                	mov    edx,ebx
c000a82d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a830:	c1 ea 16             	shr    edx,0x16
c000a833:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a837:	74 4e                	je     c000a887 <VAS::scanForEviction()+0x73>
c000a839:	53                   	push   ebx
c000a83a:	56                   	push   esi
c000a83b:	e8 72 f3 ff ff       	call   c0009bb2 <VAS::getPageTableEntry(unsigned long)>
c000a840:	5a                   	pop    edx
c000a841:	8b 10                	mov    edx,DWORD PTR [eax]
c000a843:	59                   	pop    ecx
c000a844:	89 d1                	mov    ecx,edx
c000a846:	81 e1 01 08 00 00    	and    ecx,0x801
c000a84c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a852:	74 3e                	je     c000a892 <VAS::scanForEviction()+0x7e>
c000a854:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a85a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a860:	76 2b                	jbe    c000a88d <VAS::scanForEviction()+0x79>
c000a862:	47                   	inc    edi
c000a863:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a86a:	83 ff 03             	cmp    edi,0x3
c000a86d:	74 32                	je     c000a8a1 <VAS::scanForEviction()+0x8d>
c000a86f:	31 db                	xor    ebx,ebx
c000a871:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a877:	75 c0                	jne    c000a839 <VAS::scanForEviction()+0x25>
c000a879:	89 da                	mov    edx,ebx
c000a87b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a87e:	c1 ea 16             	shr    edx,0x16
c000a881:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a885:	75 b2                	jne    c000a839 <VAS::scanForEviction()+0x25>
c000a887:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a88d:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a890:	eb 91                	jmp    c000a823 <VAS::scanForEviction()+0xf>
c000a892:	f6 c2 20             	test   dl,0x20
c000a895:	74 13                	je     c000a8aa <VAS::scanForEviction()+0x96>
c000a897:	83 e2 df             	and    edx,0xffffffdf
c000a89a:	89 10                	mov    DWORD PTR [eax],edx
c000a89c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a89f:	eb b3                	jmp    c000a854 <VAS::scanForEviction()+0x40>
c000a8a1:	83 c4 10             	add    esp,0x10
c000a8a4:	31 c0                	xor    eax,eax
c000a8a6:	5b                   	pop    ebx
c000a8a7:	5e                   	pop    esi
c000a8a8:	5f                   	pop    edi
c000a8a9:	c3                   	ret    
c000a8aa:	83 ec 08             	sub    esp,0x8
c000a8ad:	89 d0                	mov    eax,edx
c000a8af:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a8b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a8b8:	53                   	push   ebx
c000a8b9:	68 a6 dc 01 c0       	push   0xc001dca6
c000a8be:	e8 31 02 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000a8c3:	58                   	pop    eax
c000a8c4:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a8c7:	5a                   	pop    edx
c000a8c8:	51                   	push   ecx
c000a8c9:	56                   	push   esi
c000a8ca:	e8 95 fd ff ff       	call   c000a664 <VAS::evict(unsigned long)>
c000a8cf:	5b                   	pop    ebx
c000a8d0:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a8d3:	5f                   	pop    edi
c000a8d4:	50                   	push   eax
c000a8d5:	68 ba dc 01 c0       	push   0xc001dcba
c000a8da:	e8 15 02 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000a8df:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a8e6:	83 c4 10             	add    esp,0x10
c000a8e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	5b                   	pop    ebx
c000a8f1:	5e                   	pop    esi
c000a8f2:	5f                   	pop    edi
c000a8f3:	c3                   	ret    

c000a8f4 <mapVASFirstTime>:
c000a8f4:	55                   	push   ebp
c000a8f5:	57                   	push   edi
c000a8f6:	56                   	push   esi
c000a8f7:	53                   	push   ebx
c000a8f8:	83 ec 0c             	sub    esp,0xc
c000a8fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a900:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a903:	4a                   	dec    edx
c000a904:	0f 84 8c 00 00 00    	je     c000a996 <mapVASFirstTime+0xa2>
c000a90a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a90d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a910:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a915:	c1 e5 15             	shl    ebp,0x15
c000a918:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a91d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a923:	29 eb                	sub    ebx,ebp
c000a925:	29 ef                	sub    edi,ebp
c000a927:	e8 09 d8 ff ff       	call   c0008135 <Phys::allocatePage()>
c000a92c:	83 ec 0c             	sub    esp,0xc
c000a92f:	68 03 04 00 00       	push   0x403
c000a934:	6a 01                	push   0x1
c000a936:	53                   	push   ebx
c000a937:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a93d:	50                   	push   eax
c000a93e:	56                   	push   esi
c000a93f:	e8 ec f8 ff ff       	call   c000a230 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a944:	83 c4 20             	add    esp,0x20
c000a947:	39 fb                	cmp    ebx,edi
c000a949:	75 dc                	jne    c000a927 <mapVASFirstTime+0x33>
c000a94b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a950:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a955:	29 eb                	sub    ebx,ebp
c000a957:	29 ef                	sub    edi,ebp
c000a959:	e8 d7 d7 ff ff       	call   c0008135 <Phys::allocatePage()>
c000a95e:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a962:	19 d2                	sbb    edx,edx
c000a964:	83 ec 0c             	sub    esp,0xc
c000a967:	83 e2 04             	and    edx,0x4
c000a96a:	81 c2 03 04 00 00    	add    edx,0x403
c000a970:	52                   	push   edx
c000a971:	6a 01                	push   0x1
c000a973:	53                   	push   ebx
c000a974:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a97a:	50                   	push   eax
c000a97b:	56                   	push   esi
c000a97c:	e8 af f8 ff ff       	call   c000a230 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a981:	83 c4 20             	add    esp,0x20
c000a984:	39 df                	cmp    edi,ebx
c000a986:	75 d1                	jne    c000a959 <mapVASFirstTime+0x65>
c000a988:	0f 20 d8             	mov    eax,cr3
c000a98b:	0f 22 d8             	mov    cr3,eax
c000a98e:	83 c4 0c             	add    esp,0xc
c000a991:	5b                   	pop    ebx
c000a992:	5e                   	pop    esi
c000a993:	5f                   	pop    edi
c000a994:	5d                   	pop    ebp
c000a995:	c3                   	ret    
c000a996:	83 ec 0c             	sub    esp,0xc
c000a999:	68 cd dc 01 c0       	push   0xc001dccd
c000a99e:	e8 51 01 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000a9a3:	83 c4 10             	add    esp,0x10
c000a9a6:	83 c4 0c             	add    esp,0xc
c000a9a9:	5b                   	pop    ebx
c000a9aa:	5e                   	pop    esi
c000a9ab:	5f                   	pop    edi
c000a9ac:	5d                   	pop    ebp
c000a9ad:	c3                   	ret    

c000a9ae <__cxa_atexit>:
c000a9ae:	31 c0                	xor    eax,eax
c000a9b0:	c3                   	ret    

c000a9b1 <__cxa_finalize>:
c000a9b1:	c3                   	ret    

c000a9b2 <__stack_chk_fail>:
c000a9b2:	55                   	push   ebp
c000a9b3:	89 e5                	mov    ebp,esp
c000a9b5:	83 ec 10             	sub    esp,0x10
c000a9b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a9bb:	68 e6 dc 01 c0       	push   0xc001dce6
c000a9c0:	e8 2f 01 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000a9c5:	58                   	pop    eax
c000a9c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a9c9:	5a                   	pop    edx
c000a9ca:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a9cd:	68 e6 dc 01 c0       	push   0xc001dce6
c000a9d2:	e8 1d 01 00 00       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000a9d7:	c7 04 24 ee dc 01 c0 	mov    DWORD PTR [esp],0xc001dcee
c000a9de:	e8 e0 5c 00 00       	call   c00106c3 <KePanic(char const*)>
c000a9e3:	83 c4 10             	add    esp,0x10
c000a9e6:	c9                   	leave  
c000a9e7:	c3                   	ret    

c000a9e8 <__cxa_pure_virtual>:
c000a9e8:	83 ec 18             	sub    esp,0x18
c000a9eb:	68 06 dd 01 c0       	push   0xc001dd06
c000a9f0:	e8 ce 5c 00 00       	call   c00106c3 <KePanic(char const*)>
c000a9f5:	83 c4 1c             	add    esp,0x1c
c000a9f8:	c3                   	ret    

c000a9f9 <operator new[](unsigned long)>:
c000a9f9:	e9 5f d4 ff ff       	jmp    c0007e5d <malloc>

c000a9fe <operator delete(void*, unsigned long)>:
c000a9fe:	e9 7a d4 ff ff       	jmp    c0007e7d <rfree>

c000aa03 <operator delete[](void*)>:
c000aa03:	e9 75 d4 ff ff       	jmp    c0007e7d <rfree>

c000aa08 <operator delete[](void*, unsigned long)>:
c000aa08:	e9 70 d4 ff ff       	jmp    c0007e7d <rfree>

c000aa0d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000aa0d:	55                   	push   ebp
c000aa0e:	b9 04 00 00 00       	mov    ecx,0x4
c000aa13:	57                   	push   edi
c000aa14:	56                   	push   esi
c000aa15:	be 1b d9 01 c0       	mov    esi,0xc001d91b
c000aa1a:	53                   	push   ebx
c000aa1b:	83 ec 20             	sub    esp,0x20
c000aa1e:	a1 1a d9 01 c0       	mov    eax,ds:0xc001d91a
c000aa23:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000aa27:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000aa2b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000aa2f:	a1 27 d9 01 c0       	mov    eax,ds:0xc001d927
c000aa34:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000aa38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aa3c:	fc                   	cld    
c000aa3d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000aa3f:	89 ee                	mov    esi,ebp
c000aa41:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000aa45:	eb 02                	jmp    c000aa49 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000aa47:	89 c6                	mov    esi,eax
c000aa49:	31 d2                	xor    edx,edx
c000aa4b:	41                   	inc    ecx
c000aa4c:	89 f0                	mov    eax,esi
c000aa4e:	f7 f3                	div    ebx
c000aa50:	39 de                	cmp    esi,ebx
c000aa52:	73 f3                	jae    c000aa47 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000aa54:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000aa57:	eb 02                	jmp    c000aa5b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000aa59:	89 c5                	mov    ebp,eax
c000aa5b:	31 d2                	xor    edx,edx
c000aa5d:	49                   	dec    ecx
c000aa5e:	89 e8                	mov    eax,ebp
c000aa60:	f7 f3                	div    ebx
c000aa62:	39 dd                	cmp    ebp,ebx
c000aa64:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000aa68:	88 11                	mov    BYTE PTR [ecx],dl
c000aa6a:	73 ed                	jae    c000aa59 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000aa6c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000aa70:	83 c4 20             	add    esp,0x20
c000aa73:	5b                   	pop    ebx
c000aa74:	5e                   	pop    esi
c000aa75:	5f                   	pop    edi
c000aa76:	5d                   	pop    ebp
c000aa77:	c3                   	ret    

c000aa78 <Dbg::logc(char)>:
c000aa78:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa7c:	f6 05 b0 09 02 c0 10 	test   BYTE PTR ds:0xc00209b0,0x10
c000aa83:	75 12                	jne    c000aa97 <Dbg::logc(char)+0x1f>
c000aa85:	ba fd 03 00 00       	mov    edx,0x3fd
c000aa8a:	ec                   	in     al,dx
c000aa8b:	a8 20                	test   al,0x20
c000aa8d:	74 fb                	je     c000aa8a <Dbg::logc(char)+0x12>
c000aa8f:	ba f8 03 00 00       	mov    edx,0x3f8
c000aa94:	88 c8                	mov    al,cl
c000aa96:	ee                   	out    dx,al
c000aa97:	c3                   	ret    

c000aa98 <Dbg::logs(char*)>:
c000aa98:	53                   	push   ebx
c000aa99:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000aa9d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aaa0:	84 c0                	test   al,al
c000aaa2:	74 0f                	je     c000aab3 <Dbg::logs(char*)+0x1b>
c000aaa4:	50                   	push   eax
c000aaa5:	43                   	inc    ebx
c000aaa6:	e8 cd ff ff ff       	call   c000aa78 <Dbg::logc(char)>
c000aaab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aaae:	5a                   	pop    edx
c000aaaf:	84 c0                	test   al,al
c000aab1:	75 f1                	jne    c000aaa4 <Dbg::logs(char*)+0xc>
c000aab3:	5b                   	pop    ebx
c000aab4:	c3                   	ret    

c000aab5 <Dbg::logWriteInt(unsigned int)>:
c000aab5:	83 ec 10             	sub    esp,0x10
c000aab8:	6a 0a                	push   0xa
c000aaba:	8d 44 24 08          	lea    eax,[esp+0x8]
c000aabe:	50                   	push   eax
c000aabf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aac3:	50                   	push   eax
c000aac4:	e8 44 ff ff ff       	call   c000aa0d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000aac9:	50                   	push   eax
c000aaca:	e8 c9 ff ff ff       	call   c000aa98 <Dbg::logs(char*)>
c000aacf:	83 c4 20             	add    esp,0x20
c000aad2:	c3                   	ret    

c000aad3 <Dbg::logWriteIntBase(unsigned int, int)>:
c000aad3:	83 ec 10             	sub    esp,0x10
c000aad6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aada:	50                   	push   eax
c000aadb:	8d 44 24 08          	lea    eax,[esp+0x8]
c000aadf:	50                   	push   eax
c000aae0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000aae4:	52                   	push   edx
c000aae5:	e8 23 ff ff ff       	call   c000aa0d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000aaea:	50                   	push   eax
c000aaeb:	e8 a8 ff ff ff       	call   c000aa98 <Dbg::logs(char*)>
c000aaf0:	83 c4 20             	add    esp,0x20
c000aaf3:	c3                   	ret    

c000aaf4 <Dbg::kprintf(char const*, ...)>:
c000aaf4:	55                   	push   ebp
c000aaf5:	57                   	push   edi
c000aaf6:	56                   	push   esi
c000aaf7:	53                   	push   ebx
c000aaf8:	83 ec 0c             	sub    esp,0xc
c000aafb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aaff:	f6 05 b0 09 02 c0 10 	test   BYTE PTR ds:0xc00209b0,0x10
c000ab06:	74 08                	je     c000ab10 <Dbg::kprintf(char const*, ...)+0x1c>
c000ab08:	83 c4 0c             	add    esp,0xc
c000ab0b:	5b                   	pop    ebx
c000ab0c:	5e                   	pop    esi
c000ab0d:	5f                   	pop    edi
c000ab0e:	5d                   	pop    ebp
c000ab0f:	c3                   	ret    
c000ab10:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ab14:	31 ff                	xor    edi,edi
c000ab16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab1a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ab1d:	84 c0                	test   al,al
c000ab1f:	74 e7                	je     c000ab08 <Dbg::kprintf(char const*, ...)+0x14>
c000ab21:	8d 77 01             	lea    esi,[edi+0x1]
c000ab24:	3c 25                	cmp    al,0x25
c000ab26:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ab29:	75 47                	jne    c000ab72 <Dbg::kprintf(char const*, ...)+0x7e>
c000ab2b:	83 c7 02             	add    edi,0x2
c000ab2e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ab31:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000ab34:	83 e8 25             	sub    eax,0x25
c000ab37:	3c 53                	cmp    al,0x53
c000ab39:	0f 87 d2 00 00 00    	ja     c000ac11 <Dbg::kprintf(char const*, ...)+0x11d>
c000ab3f:	25 ff 00 00 00       	and    eax,0xff
c000ab44:	ff 24 85 1c dd 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe22e4]
c000ab4b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ab4f:	89 c8                	mov    eax,ecx
c000ab51:	83 c1 04             	add    ecx,0x4
c000ab54:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ab58:	8b 28                	mov    ebp,DWORD PTR [eax]
c000ab5a:	55                   	push   ebp
c000ab5b:	e8 55 ff ff ff       	call   c000aab5 <Dbg::logWriteInt(unsigned int)>
c000ab60:	58                   	pop    eax
c000ab61:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ab64:	84 c0                	test   al,al
c000ab66:	74 a0                	je     c000ab08 <Dbg::kprintf(char const*, ...)+0x14>
c000ab68:	8d 77 01             	lea    esi,[edi+0x1]
c000ab6b:	3c 25                	cmp    al,0x25
c000ab6d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ab70:	74 b9                	je     c000ab2b <Dbg::kprintf(char const*, ...)+0x37>
c000ab72:	50                   	push   eax
c000ab73:	89 f7                	mov    edi,esi
c000ab75:	e8 fe fe ff ff       	call   c000aa78 <Dbg::logc(char)>
c000ab7a:	89 ee                	mov    esi,ebp
c000ab7c:	58                   	pop    eax
c000ab7d:	eb e2                	jmp    c000ab61 <Dbg::kprintf(char const*, ...)+0x6d>
c000ab7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ab83:	89 c8                	mov    eax,ecx
c000ab85:	83 c1 04             	add    ecx,0x4
c000ab88:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab8a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ab8e:	50                   	push   eax
c000ab8f:	e8 04 ff ff ff       	call   c000aa98 <Dbg::logs(char*)>
c000ab94:	58                   	pop    eax
c000ab95:	eb ca                	jmp    c000ab61 <Dbg::kprintf(char const*, ...)+0x6d>
c000ab97:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ab9b:	89 d0                	mov    eax,edx
c000ab9d:	83 c2 04             	add    edx,0x4
c000aba0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba4:	8b 00                	mov    eax,DWORD PTR [eax]
c000aba6:	50                   	push   eax
c000aba7:	e8 09 ff ff ff       	call   c000aab5 <Dbg::logWriteInt(unsigned int)>
c000abac:	58                   	pop    eax
c000abad:	eb b2                	jmp    c000ab61 <Dbg::kprintf(char const*, ...)+0x6d>
c000abaf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abb3:	89 d0                	mov    eax,edx
c000abb5:	83 c2 04             	add    edx,0x4
c000abb8:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000abbb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abbf:	50                   	push   eax
c000abc0:	e8 b3 fe ff ff       	call   c000aa78 <Dbg::logc(char)>
c000abc5:	58                   	pop    eax
c000abc6:	eb 99                	jmp    c000ab61 <Dbg::kprintf(char const*, ...)+0x6d>
c000abc8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000abcc:	89 c8                	mov    eax,ecx
c000abce:	83 c1 04             	add    ecx,0x4
c000abd1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000abd5:	6a 10                	push   0x10
c000abd7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abd9:	51                   	push   ecx
c000abda:	e8 f4 fe ff ff       	call   c000aad3 <Dbg::logWriteIntBase(unsigned int, int)>
c000abdf:	5d                   	pop    ebp
c000abe0:	58                   	pop    eax
c000abe1:	e9 7b ff ff ff       	jmp    c000ab61 <Dbg::kprintf(char const*, ...)+0x6d>
c000abe6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abea:	89 d0                	mov    eax,edx
c000abec:	83 c2 08             	add    edx,0x8
c000abef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abf3:	6a 10                	push   0x10
c000abf5:	8b 00                	mov    eax,DWORD PTR [eax]
c000abf7:	50                   	push   eax
c000abf8:	e8 d6 fe ff ff       	call   c000aad3 <Dbg::logWriteIntBase(unsigned int, int)>
c000abfd:	58                   	pop    eax
c000abfe:	5a                   	pop    edx
c000abff:	e9 5d ff ff ff       	jmp    c000ab61 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac04:	6a 25                	push   0x25
c000ac06:	e8 6d fe ff ff       	call   c000aa78 <Dbg::logc(char)>
c000ac0b:	5a                   	pop    edx
c000ac0c:	e9 50 ff ff ff       	jmp    c000ab61 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac11:	6a 25                	push   0x25
c000ac13:	e8 60 fe ff ff       	call   c000aa78 <Dbg::logc(char)>
c000ac18:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ac1c:	50                   	push   eax
c000ac1d:	e8 56 fe ff ff       	call   c000aa78 <Dbg::logc(char)>
c000ac22:	5a                   	pop    edx
c000ac23:	59                   	pop    ecx
c000ac24:	e9 38 ff ff ff       	jmp    c000ab61 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac29:	90                   	nop

c000ac2a <File::read(unsigned long long, void*, int*)>:
c000ac2a:	53                   	push   ebx
c000ac2b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac2f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac33:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ac3a:	3c 19                	cmp    al,0x19
c000ac3c:	77 35                	ja     c000ac73 <File::read(unsigned long long, void*, int*)+0x49>
c000ac3e:	8b 04 85 00 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd100]
c000ac45:	85 c0                	test   eax,eax
c000ac47:	74 2a                	je     c000ac73 <File::read(unsigned long long, void*, int*)+0x49>
c000ac49:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac4f:	85 c0                	test   eax,eax
c000ac51:	74 20                	je     c000ac73 <File::read(unsigned long long, void*, int*)+0x49>
c000ac53:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac57:	74 21                	je     c000ac7a <File::read(unsigned long long, void*, int*)+0x50>
c000ac59:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac5b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac5f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ac65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac6d:	5b                   	pop    ebx
c000ac6e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ac71:	ff e0                	jmp    eax
c000ac73:	b8 0b 00 00 00       	mov    eax,0xb
c000ac78:	eb 05                	jmp    c000ac7f <File::read(unsigned long long, void*, int*)+0x55>
c000ac7a:	b8 05 00 00 00       	mov    eax,0x5
c000ac7f:	5b                   	pop    ebx
c000ac80:	c3                   	ret    
c000ac81:	90                   	nop

c000ac82 <File::write(unsigned long long, void*, int*)>:
c000ac82:	53                   	push   ebx
c000ac83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac8b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ac92:	3c 19                	cmp    al,0x19
c000ac94:	77 35                	ja     c000accb <File::write(unsigned long long, void*, int*)+0x49>
c000ac96:	8b 04 85 00 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd100]
c000ac9d:	85 c0                	test   eax,eax
c000ac9f:	74 2a                	je     c000accb <File::write(unsigned long long, void*, int*)+0x49>
c000aca1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aca7:	85 c0                	test   eax,eax
c000aca9:	74 20                	je     c000accb <File::write(unsigned long long, void*, int*)+0x49>
c000acab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acaf:	74 21                	je     c000acd2 <File::write(unsigned long long, void*, int*)+0x50>
c000acb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000acb3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000acb7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000acbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc5:	5b                   	pop    ebx
c000acc6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000acc9:	ff e0                	jmp    eax
c000accb:	b8 0b 00 00 00       	mov    eax,0xb
c000acd0:	eb 05                	jmp    c000acd7 <File::write(unsigned long long, void*, int*)+0x55>
c000acd2:	b8 05 00 00 00       	mov    eax,0x5
c000acd7:	5b                   	pop    ebx
c000acd8:	c3                   	ret    
c000acd9:	90                   	nop

c000acda <Directory::read(unsigned long long, void*, int*)>:
c000acda:	53                   	push   ebx
c000acdb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ace3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000acea:	3c 19                	cmp    al,0x19
c000acec:	77 35                	ja     c000ad23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000acee:	8b 04 85 00 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd100]
c000acf5:	85 c0                	test   eax,eax
c000acf7:	74 2a                	je     c000ad23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000acf9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000acff:	85 c0                	test   eax,eax
c000ad01:	74 20                	je     c000ad23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ad03:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad07:	74 21                	je     c000ad2a <Directory::read(unsigned long long, void*, int*)+0x50>
c000ad09:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad0b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad0f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad1d:	5b                   	pop    ebx
c000ad1e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ad21:	ff e0                	jmp    eax
c000ad23:	b8 0b 00 00 00       	mov    eax,0xb
c000ad28:	eb 05                	jmp    c000ad2f <Directory::read(unsigned long long, void*, int*)+0x55>
c000ad2a:	b8 05 00 00 00       	mov    eax,0x5
c000ad2f:	5b                   	pop    ebx
c000ad30:	c3                   	ret    
c000ad31:	90                   	nop

c000ad32 <Directory::write(unsigned long long, void*, int*)>:
c000ad32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad36:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ad3d:	b8 0b 00 00 00       	mov    eax,0xb
c000ad42:	80 fa 19             	cmp    dl,0x19
c000ad45:	77 18                	ja     c000ad5f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ad47:	8b 14 95 00 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd100]
c000ad4e:	85 d2                	test   edx,edx
c000ad50:	74 0d                	je     c000ad5f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ad52:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ad59:	19 c0                	sbb    eax,eax
c000ad5b:	83 e0 0a             	and    eax,0xa
c000ad5e:	40                   	inc    eax
c000ad5f:	c3                   	ret    

c000ad60 <File::isAtty()>:
c000ad60:	31 c0                	xor    eax,eax
c000ad62:	c3                   	ret    
c000ad63:	90                   	nop

c000ad64 <Directory::isAtty()>:
c000ad64:	31 c0                	xor    eax,eax
c000ad66:	c3                   	ret    
c000ad67:	90                   	nop

c000ad68 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ad68:	b8 0a 00 00 00       	mov    eax,0xa
c000ad6d:	c3                   	ret    

c000ad6e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ad6e:	b8 0a 00 00 00       	mov    eax,0xa
c000ad73:	c3                   	ret    

c000ad74 <Filesystem::allocateSwapfile(char const*, int)>:
c000ad74:	31 c0                	xor    eax,eax
c000ad76:	31 d2                	xor    edx,edx
c000ad78:	c3                   	ret    
c000ad79:	90                   	nop

c000ad7a <File::~File()>:
c000ad7a:	83 ec 0c             	sub    esp,0xc
c000ad7d:	ba dc de 01 c0       	mov    edx,0xc001dedc
c000ad82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad86:	89 10                	mov    DWORD PTR [eax],edx
c000ad88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad8c:	83 ec 0c             	sub    esp,0xc
c000ad8f:	50                   	push   eax
c000ad90:	e8 ab e8 ff ff       	call   c0009640 <UnixFile::~UnixFile()>
c000ad95:	83 c4 10             	add    esp,0x10
c000ad98:	90                   	nop
c000ad99:	83 c4 0c             	add    esp,0xc
c000ad9c:	c3                   	ret    
c000ad9d:	90                   	nop

c000ad9e <File::~File()>:
c000ad9e:	83 ec 0c             	sub    esp,0xc
c000ada1:	83 ec 0c             	sub    esp,0xc
c000ada4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ada8:	e8 cd ff ff ff       	call   c000ad7a <File::~File()>
c000adad:	83 c4 10             	add    esp,0x10
c000adb0:	83 ec 08             	sub    esp,0x8
c000adb3:	68 14 01 00 00       	push   0x114
c000adb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adbc:	e8 3d fc ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000adc1:	83 c4 10             	add    esp,0x10
c000adc4:	83 c4 0c             	add    esp,0xc
c000adc7:	c3                   	ret    

c000adc8 <Directory::~Directory()>:
c000adc8:	83 ec 0c             	sub    esp,0xc
c000adcb:	ba f8 de 01 c0       	mov    edx,0xc001def8
c000add0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add4:	89 10                	mov    DWORD PTR [eax],edx
c000add6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adda:	83 ec 0c             	sub    esp,0xc
c000addd:	50                   	push   eax
c000adde:	e8 5d e8 ff ff       	call   c0009640 <UnixFile::~UnixFile()>
c000ade3:	83 c4 10             	add    esp,0x10
c000ade6:	90                   	nop
c000ade7:	83 c4 0c             	add    esp,0xc
c000adea:	c3                   	ret    
c000adeb:	90                   	nop

c000adec <Directory::~Directory()>:
c000adec:	83 ec 0c             	sub    esp,0xc
c000adef:	83 ec 0c             	sub    esp,0xc
c000adf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adf6:	e8 cd ff ff ff       	call   c000adc8 <Directory::~Directory()>
c000adfb:	83 c4 10             	add    esp,0x10
c000adfe:	83 ec 08             	sub    esp,0x8
c000ae01:	68 14 01 00 00       	push   0x114
c000ae06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae0a:	e8 ef fb ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000ae0f:	83 c4 10             	add    esp,0x10
c000ae12:	83 c4 0c             	add    esp,0xc
c000ae15:	c3                   	ret    

c000ae16 <Filesystem::Filesystem()>:
c000ae16:	ba 74 de 01 c0       	mov    edx,0xc001de74
c000ae1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae1f:	89 10                	mov    DWORD PTR [eax],edx
c000ae21:	8b 15 94 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a94
c000ae27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae2b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ae2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae32:	a3 94 0a 02 c0       	mov    ds:0xc0020a94,eax
c000ae37:	90                   	nop
c000ae38:	c3                   	ret    
c000ae39:	90                   	nop

c000ae3a <Filesystem::~Filesystem()>:
c000ae3a:	ba 74 de 01 c0       	mov    edx,0xc001de74
c000ae3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae43:	89 10                	mov    DWORD PTR [eax],edx
c000ae45:	90                   	nop
c000ae46:	c3                   	ret    
c000ae47:	90                   	nop

c000ae48 <Filesystem::~Filesystem()>:
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ae4f:	e8 e6 ff ff ff       	call   c000ae3a <Filesystem::~Filesystem()>
c000ae54:	83 c4 04             	add    esp,0x4
c000ae57:	83 ec 08             	sub    esp,0x8
c000ae5a:	6a 08                	push   0x8
c000ae5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae60:	e8 99 fb ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	83 c4 0c             	add    esp,0xc
c000ae6b:	c3                   	ret    

c000ae6c <Fs::getcwd(Process*, char*, int)>:
c000ae6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae70:	31 c0                	xor    eax,eax
c000ae72:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ae75:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ae79:	7d 15                	jge    c000ae90 <Fs::getcwd(Process*, char*, int)+0x24>
c000ae7b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ae7f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ae86:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ae89:	84 c9                	test   cl,cl
c000ae8b:	74 06                	je     c000ae93 <Fs::getcwd(Process*, char*, int)+0x27>
c000ae8d:	40                   	inc    eax
c000ae8e:	eb e2                	jmp    c000ae72 <Fs::getcwd(Process*, char*, int)+0x6>
c000ae90:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ae93:	31 c0                	xor    eax,eax
c000ae95:	c3                   	ret    

c000ae96 <Fs::initVFS()>:
c000ae96:	83 ec 18             	sub    esp,0x18
c000ae99:	6a 08                	push   0x8
c000ae9b:	e8 bd cf ff ff       	call   c0007e5d <malloc>
c000aea0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aea3:	e8 90 c3 00 00       	call   c0017238 <FAT::FAT()>
c000aea8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000aeaf:	e8 a9 cf ff ff       	call   c0007e5d <malloc>
c000aeb4:	89 04 24             	mov    DWORD PTR [esp],eax
c000aeb7:	e8 74 d0 00 00       	call   c0017f30 <ISO9660::ISO9660()>
c000aebc:	83 c4 1c             	add    esp,0x1c
c000aebf:	c3                   	ret    

c000aec0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000aec0:	55                   	push   ebp
c000aec1:	57                   	push   edi
c000aec2:	56                   	push   esi
c000aec3:	53                   	push   ebx
c000aec4:	81 ec 10 04 00 00    	sub    esp,0x410
c000aeca:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000aed1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000aed8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000aedf:	68 00 04 00 00       	push   0x400
c000aee4:	6a 00                	push   0x0
c000aee6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000aeea:	56                   	push   esi
c000aeeb:	e8 00 56 ff ff       	call   c00004f0 <memset>
c000aef0:	83 c4 10             	add    esp,0x10
c000aef3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aef7:	75 0b                	jne    c000af04 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aef9:	50                   	push   eax
c000aefa:	50                   	push   eax
c000aefb:	57                   	push   edi
c000aefc:	56                   	push   esi
c000aefd:	e8 1e 57 ff ff       	call   c0000620 <strcpy>
c000af02:	eb 41                	jmp    c000af45 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000af04:	8a 07                	mov    al,BYTE PTR [edi]
c000af06:	3c 5c                	cmp    al,0x5c
c000af08:	74 04                	je     c000af0e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000af0a:	3c 2f                	cmp    al,0x2f
c000af0c:	75 18                	jne    c000af26 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000af0e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000af11:	3c 60                	cmp    al,0x60
c000af13:	7e 03                	jle    c000af18 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000af15:	83 e8 20             	sub    eax,0x20
c000af18:	88 04 24             	mov    BYTE PTR [esp],al
c000af1b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000af22:	50                   	push   eax
c000af23:	50                   	push   eax
c000af24:	eb 18                	jmp    c000af3e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000af26:	50                   	push   eax
c000af27:	50                   	push   eax
c000af28:	55                   	push   ebp
c000af29:	56                   	push   esi
c000af2a:	e8 f1 56 ff ff       	call   c0000620 <strcpy>
c000af2f:	5a                   	pop    edx
c000af30:	59                   	pop    ecx
c000af31:	68 a5 ea 01 c0       	push   0xc001eaa5
c000af36:	56                   	push   esi
c000af37:	e8 a4 58 ff ff       	call   c00007e0 <strcat>
c000af3c:	5d                   	pop    ebp
c000af3d:	58                   	pop    eax
c000af3e:	57                   	push   edi
c000af3f:	56                   	push   esi
c000af40:	e8 9b 58 ff ff       	call   c00007e0 <strcat>
c000af45:	83 c4 10             	add    esp,0x10
c000af48:	8a 04 24             	mov    al,BYTE PTR [esp]
c000af4b:	3c 60                	cmp    al,0x60
c000af4d:	7e 03                	jle    c000af52 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000af4f:	83 e8 20             	sub    eax,0x20
c000af52:	88 04 24             	mov    BYTE PTR [esp],al
c000af55:	88 03                	mov    BYTE PTR [ebx],al
c000af57:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000af5e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000af64:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000af68:	bf 03 00 00 00       	mov    edi,0x3
c000af6d:	b8 03 00 00 00       	mov    eax,0x3
c000af72:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000af75:	84 d2                	test   dl,dl
c000af77:	0f 84 91 00 00 00    	je     c000b00e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000af7d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000af80:	80 fa 5c             	cmp    dl,0x5c
c000af83:	74 05                	je     c000af8a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000af85:	80 fa 2f             	cmp    dl,0x2f
c000af88:	75 12                	jne    c000af9c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000af8a:	89 c5                	mov    ebp,eax
c000af8c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af91:	74 09                	je     c000af9c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000af93:	40                   	inc    eax
c000af94:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000af98:	89 cf                	mov    edi,ecx
c000af9a:	eb d6                	jmp    c000af72 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000af9c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000afa1:	75 5b                	jne    c000affe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000afa3:	80 fa 2e             	cmp    dl,0x2e
c000afa6:	75 56                	jne    c000affe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000afa8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000afac:	74 19                	je     c000afc7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000afae:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000afb3:	74 53                	je     c000b008 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000afb5:	89 f9                	mov    ecx,edi
c000afb7:	41                   	inc    ecx
c000afb8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000afbb:	80 fa 2f             	cmp    dl,0x2f
c000afbe:	74 f7                	je     c000afb7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000afc0:	80 fa 5c             	cmp    dl,0x5c
c000afc3:	74 f2                	je     c000afb7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000afc5:	eb d1                	jmp    c000af98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000afc7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000afcc:	74 3a                	je     c000b008 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000afce:	83 f8 03             	cmp    eax,0x3
c000afd1:	74 c5                	je     c000af98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000afd3:	41                   	inc    ecx
c000afd4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000afd7:	80 fa 2f             	cmp    dl,0x2f
c000afda:	74 f7                	je     c000afd3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000afdc:	80 fa 5c             	cmp    dl,0x5c
c000afdf:	74 f2                	je     c000afd3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000afe1:	48                   	dec    eax
c000afe2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000afe6:	75 06                	jne    c000afee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000afe8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000afec:	eb f3                	jmp    c000afe1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000afee:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aff2:	74 07                	je     c000affb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aff4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aff8:	48                   	dec    eax
c000aff9:	eb f3                	jmp    c000afee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000affb:	40                   	inc    eax
c000affc:	eb 9a                	jmp    c000af98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000affe:	80 fa 2f             	cmp    dl,0x2f
c000b001:	74 95                	je     c000af98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b003:	80 fa 5c             	cmp    dl,0x5c
c000b006:	74 90                	je     c000af98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b008:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b00b:	40                   	inc    eax
c000b00c:	eb 8a                	jmp    c000af98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b00e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b012:	83 ec 0c             	sub    esp,0xc
c000b015:	53                   	push   ebx
c000b016:	e8 45 55 ff ff       	call   c0000560 <strlen>
c000b01b:	83 c4 10             	add    esp,0x10
c000b01e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b023:	75 26                	jne    c000b04b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000b025:	83 ec 0c             	sub    esp,0xc
c000b028:	53                   	push   ebx
c000b029:	e8 32 55 ff ff       	call   c0000560 <strlen>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b036:	74 26                	je     c000b05e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000b038:	83 ec 0c             	sub    esp,0xc
c000b03b:	53                   	push   ebx
c000b03c:	e8 1f 55 ff ff       	call   c0000560 <strlen>
c000b041:	83 c4 10             	add    esp,0x10
c000b044:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b049:	eb c7                	jmp    c000b012 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000b04b:	83 ec 0c             	sub    esp,0xc
c000b04e:	53                   	push   ebx
c000b04f:	e8 0c 55 ff ff       	call   c0000560 <strlen>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b05c:	74 c7                	je     c000b025 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000b05e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b064:	5b                   	pop    ebx
c000b065:	5e                   	pop    esi
c000b066:	5f                   	pop    edi
c000b067:	5d                   	pop    ebp
c000b068:	c3                   	ret    
c000b069:	90                   	nop

c000b06a <File::File(char const*, Process*)>:
c000b06a:	83 ec 0c             	sub    esp,0xc
c000b06d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b071:	83 ec 08             	sub    esp,0x8
c000b074:	6a 00                	push   0x0
c000b076:	50                   	push   eax
c000b077:	e8 e2 e3 ff ff       	call   c000945e <UnixFile::UnixFile(int)>
c000b07c:	83 c4 10             	add    esp,0x10
c000b07f:	ba dc de 01 c0       	mov    edx,0xc001dedc
c000b084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b088:	89 10                	mov    DWORD PTR [eax],edx
c000b08a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b08e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b098:	83 c0 0d             	add    eax,0xd
c000b09b:	83 ec 04             	sub    esp,0x4
c000b09e:	52                   	push   edx
c000b09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0a3:	50                   	push   eax
c000b0a4:	e8 17 fe ff ff       	call   c000aec0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0b3:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ba:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0d2:	25 ff 00 00 00       	and    eax,0xff
c000b0d7:	8b 04 85 00 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd100]
c000b0de:	85 c0                	test   eax,eax
c000b0e0:	74 42                	je     c000b124 <File::File(char const*, Process*)+0xba>
c000b0e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0ec:	25 ff 00 00 00       	and    eax,0xff
c000b0f1:	8b 04 85 00 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd100]
c000b0f8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0fe:	85 c0                	test   eax,eax
c000b100:	75 22                	jne    c000b124 <File::File(char const*, Process*)+0xba>
c000b102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b106:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b10c:	25 ff 00 00 00       	and    eax,0xff
c000b111:	8b 04 85 00 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd100]
c000b118:	83 ec 0c             	sub    esp,0xc
c000b11b:	50                   	push   eax
c000b11c:	e8 f9 1f 00 00       	call   c000d11a <LogicalDisk::mount()>
c000b121:	83 c4 10             	add    esp,0x10
c000b124:	90                   	nop
c000b125:	83 c4 0c             	add    esp,0xc
c000b128:	c3                   	ret    
c000b129:	90                   	nop

c000b12a <File::open(FileOpenMode)>:
c000b12a:	53                   	push   ebx
c000b12b:	b8 0b 00 00 00       	mov    eax,0xb
c000b130:	83 ec 08             	sub    esp,0x8
c000b133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b137:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b13e:	80 fa 19             	cmp    dl,0x19
c000b141:	77 40                	ja     c000b183 <File::open(FileOpenMode)+0x59>
c000b143:	8b 14 95 00 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd100]
c000b14a:	85 d2                	test   edx,edx
c000b14c:	74 35                	je     c000b183 <File::open(FileOpenMode)+0x59>
c000b14e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b154:	85 d2                	test   edx,edx
c000b156:	74 2b                	je     c000b183 <File::open(FileOpenMode)+0x59>
c000b158:	b8 06 00 00 00       	mov    eax,0x6
c000b15d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b161:	75 20                	jne    c000b183 <File::open(FileOpenMode)+0x59>
c000b163:	8b 02                	mov    eax,DWORD PTR [edx]
c000b165:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b16b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b16f:	51                   	push   ecx
c000b170:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b173:	51                   	push   ecx
c000b174:	52                   	push   edx
c000b175:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b178:	83 c4 10             	add    esp,0x10
c000b17b:	85 c0                	test   eax,eax
c000b17d:	75 04                	jne    c000b183 <File::open(FileOpenMode)+0x59>
c000b17f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b183:	83 c4 08             	add    esp,0x8
c000b186:	5b                   	pop    ebx
c000b187:	c3                   	ret    

c000b188 <File::close()>:
c000b188:	53                   	push   ebx
c000b189:	b8 0b 00 00 00       	mov    eax,0xb
c000b18e:	83 ec 08             	sub    esp,0x8
c000b191:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b195:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b19c:	80 fa 19             	cmp    dl,0x19
c000b19f:	77 41                	ja     c000b1e2 <File::close()+0x5a>
c000b1a1:	8b 1c 95 00 2f 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd100]
c000b1a8:	85 db                	test   ebx,ebx
c000b1aa:	74 36                	je     c000b1e2 <File::close()+0x5a>
c000b1ac:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b1b3:	74 2d                	je     c000b1e2 <File::close()+0x5a>
c000b1b5:	b8 05 00 00 00       	mov    eax,0x5
c000b1ba:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1be:	74 22                	je     c000b1e2 <File::close()+0x5a>
c000b1c0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b1c4:	8b 04 95 00 2f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd100]
c000b1cb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1d1:	53                   	push   ebx
c000b1d2:	53                   	push   ebx
c000b1d3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1d5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b1db:	50                   	push   eax
c000b1dc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b1df:	83 c4 10             	add    esp,0x10
c000b1e2:	83 c4 08             	add    esp,0x8
c000b1e5:	5b                   	pop    ebx
c000b1e6:	c3                   	ret    
c000b1e7:	90                   	nop

c000b1e8 <File::seek(unsigned long long)>:
c000b1e8:	56                   	push   esi
c000b1e9:	53                   	push   ebx
c000b1ea:	b8 0b 00 00 00       	mov    eax,0xb
c000b1ef:	51                   	push   ecx
c000b1f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b1f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1f8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b1ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b203:	80 fa 19             	cmp    dl,0x19
c000b206:	77 31                	ja     c000b239 <File::seek(unsigned long long)+0x51>
c000b208:	8b 14 95 00 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd100]
c000b20f:	85 d2                	test   edx,edx
c000b211:	74 26                	je     c000b239 <File::seek(unsigned long long)+0x51>
c000b213:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b219:	85 d2                	test   edx,edx
c000b21b:	74 1c                	je     c000b239 <File::seek(unsigned long long)+0x51>
c000b21d:	b8 05 00 00 00       	mov    eax,0x5
c000b222:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b226:	74 11                	je     c000b239 <File::seek(unsigned long long)+0x51>
c000b228:	8b 02                	mov    eax,DWORD PTR [edx]
c000b22a:	53                   	push   ebx
c000b22b:	51                   	push   ecx
c000b22c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b232:	52                   	push   edx
c000b233:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b236:	83 c4 10             	add    esp,0x10
c000b239:	5a                   	pop    edx
c000b23a:	5b                   	pop    ebx
c000b23b:	5e                   	pop    esi
c000b23c:	c3                   	ret    
c000b23d:	90                   	nop

c000b23e <File::tell(unsigned long long*)>:
c000b23e:	83 ec 0c             	sub    esp,0xc
c000b241:	b8 0b 00 00 00       	mov    eax,0xb
c000b246:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b24a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b251:	80 fa 19             	cmp    dl,0x19
c000b254:	77 34                	ja     c000b28a <File::tell(unsigned long long*)+0x4c>
c000b256:	8b 14 95 00 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd100]
c000b25d:	85 d2                	test   edx,edx
c000b25f:	74 29                	je     c000b28a <File::tell(unsigned long long*)+0x4c>
c000b261:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b267:	85 d2                	test   edx,edx
c000b269:	74 1f                	je     c000b28a <File::tell(unsigned long long*)+0x4c>
c000b26b:	b8 05 00 00 00       	mov    eax,0x5
c000b270:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b274:	74 14                	je     c000b28a <File::tell(unsigned long long*)+0x4c>
c000b276:	50                   	push   eax
c000b277:	8b 02                	mov    eax,DWORD PTR [edx]
c000b279:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b27d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b283:	52                   	push   edx
c000b284:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	83 c4 0c             	add    esp,0xc
c000b28d:	c3                   	ret    

c000b28e <File::rewind()>:
c000b28e:	83 ec 10             	sub    esp,0x10
c000b291:	6a 00                	push   0x0
c000b293:	6a 00                	push   0x0
c000b295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b299:	e8 4a ff ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c000b29e:	83 c4 1c             	add    esp,0x1c
c000b2a1:	c3                   	ret    

c000b2a2 <File::unlink()>:
c000b2a2:	83 ec 0c             	sub    esp,0xc
c000b2a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b2aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2b5:	80 f9 19             	cmp    cl,0x19
c000b2b8:	77 2f                	ja     c000b2e9 <File::unlink()+0x47>
c000b2ba:	8b 0c 8d 00 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd100]
c000b2c1:	85 c9                	test   ecx,ecx
c000b2c3:	74 24                	je     c000b2e9 <File::unlink()+0x47>
c000b2c5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2cb:	85 c9                	test   ecx,ecx
c000b2cd:	74 1a                	je     c000b2e9 <File::unlink()+0x47>
c000b2cf:	b8 06 00 00 00       	mov    eax,0x6
c000b2d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2d8:	75 0f                	jne    c000b2e9 <File::unlink()+0x47>
c000b2da:	83 c2 0d             	add    edx,0xd
c000b2dd:	50                   	push   eax
c000b2de:	50                   	push   eax
c000b2df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2e1:	52                   	push   edx
c000b2e2:	51                   	push   ecx
c000b2e3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	83 c4 0c             	add    esp,0xc
c000b2ec:	c3                   	ret    
c000b2ed:	90                   	nop

c000b2ee <File::rename(char const*)>:
c000b2ee:	83 ec 0c             	sub    esp,0xc
c000b2f1:	b8 0b 00 00 00       	mov    eax,0xb
c000b2f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b301:	80 f9 19             	cmp    cl,0x19
c000b304:	77 32                	ja     c000b338 <File::rename(char const*)+0x4a>
c000b306:	8b 0c 8d 00 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd100]
c000b30d:	85 c9                	test   ecx,ecx
c000b30f:	74 27                	je     c000b338 <File::rename(char const*)+0x4a>
c000b311:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b317:	85 c9                	test   ecx,ecx
c000b319:	74 1d                	je     c000b338 <File::rename(char const*)+0x4a>
c000b31b:	b8 06 00 00 00       	mov    eax,0x6
c000b320:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b324:	75 12                	jne    c000b338 <File::rename(char const*)+0x4a>
c000b326:	83 c2 0d             	add    edx,0xd
c000b329:	50                   	push   eax
c000b32a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b32c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b330:	52                   	push   edx
c000b331:	51                   	push   ecx
c000b332:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b335:	83 c4 10             	add    esp,0x10
c000b338:	83 c4 0c             	add    esp,0xc
c000b33b:	c3                   	ret    

c000b33c <File::chfatattr(unsigned char, unsigned char)>:
c000b33c:	57                   	push   edi
c000b33d:	b8 0b 00 00 00       	mov    eax,0xb
c000b342:	56                   	push   esi
c000b343:	53                   	push   ebx
c000b344:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b348:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b34c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b353:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b357:	80 f9 19             	cmp    cl,0x19
c000b35a:	77 37                	ja     c000b393 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b35c:	8b 0c 8d 00 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd100]
c000b363:	85 c9                	test   ecx,ecx
c000b365:	74 2c                	je     c000b393 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b367:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b36d:	85 c9                	test   ecx,ecx
c000b36f:	74 22                	je     c000b393 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b371:	b8 06 00 00 00       	mov    eax,0x6
c000b376:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b37a:	75 17                	jne    c000b393 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b37c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b37e:	89 f0                	mov    eax,esi
c000b380:	83 c2 0d             	add    edx,0xd
c000b383:	0f b6 f0             	movzx  esi,al
c000b386:	0f b6 db             	movzx  ebx,bl
c000b389:	56                   	push   esi
c000b38a:	53                   	push   ebx
c000b38b:	52                   	push   edx
c000b38c:	51                   	push   ecx
c000b38d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b390:	83 c4 10             	add    esp,0x10
c000b393:	5b                   	pop    ebx
c000b394:	5e                   	pop    esi
c000b395:	5f                   	pop    edi
c000b396:	c3                   	ret    
c000b397:	90                   	nop

c000b398 <File::exists()>:
c000b398:	83 ec 0c             	sub    esp,0xc
c000b39b:	31 c0                	xor    eax,eax
c000b39d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3a1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3a8:	80 f9 19             	cmp    cl,0x19
c000b3ab:	77 24                	ja     c000b3d1 <File::exists()+0x39>
c000b3ad:	8b 0c 8d 00 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd100]
c000b3b4:	85 c9                	test   ecx,ecx
c000b3b6:	74 19                	je     c000b3d1 <File::exists()+0x39>
c000b3b8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3be:	85 c9                	test   ecx,ecx
c000b3c0:	74 0f                	je     c000b3d1 <File::exists()+0x39>
c000b3c2:	83 c2 0d             	add    edx,0xd
c000b3c5:	50                   	push   eax
c000b3c6:	50                   	push   eax
c000b3c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3c9:	52                   	push   edx
c000b3ca:	51                   	push   ecx
c000b3cb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b3ce:	83 c4 10             	add    esp,0x10
c000b3d1:	83 c4 0c             	add    esp,0xc
c000b3d4:	c3                   	ret    
c000b3d5:	90                   	nop

c000b3d6 <File::stat(unsigned long long*, bool*)>:
c000b3d6:	56                   	push   esi
c000b3d7:	53                   	push   ebx
c000b3d8:	50                   	push   eax
c000b3d9:	b8 0b 00 00 00       	mov    eax,0xb
c000b3de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b3f1:	80 f9 19             	cmp    cl,0x19
c000b3f4:	77 3d                	ja     c000b433 <File::stat(unsigned long long*, bool*)+0x5d>
c000b3f6:	8b 0c 8d 00 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd100]
c000b3fd:	85 c9                	test   ecx,ecx
c000b3ff:	74 32                	je     c000b433 <File::stat(unsigned long long*, bool*)+0x5d>
c000b401:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b407:	85 c9                	test   ecx,ecx
c000b409:	74 28                	je     c000b433 <File::stat(unsigned long long*, bool*)+0x5d>
c000b40b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b40d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b411:	74 13                	je     c000b426 <File::stat(unsigned long long*, bool*)+0x50>
c000b413:	83 ec 04             	sub    esp,0x4
c000b416:	56                   	push   esi
c000b417:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b41d:	51                   	push   ecx
c000b41e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b421:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b424:	eb 0a                	jmp    c000b430 <File::stat(unsigned long long*, bool*)+0x5a>
c000b426:	53                   	push   ebx
c000b427:	83 c2 0d             	add    edx,0xd
c000b42a:	56                   	push   esi
c000b42b:	52                   	push   edx
c000b42c:	51                   	push   ecx
c000b42d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b430:	83 c4 10             	add    esp,0x10
c000b433:	5a                   	pop    edx
c000b434:	5b                   	pop    ebx
c000b435:	5e                   	pop    esi
c000b436:	c3                   	ret    

c000b437 <Fs::setcwd(Process*, char*)>:
c000b437:	55                   	push   ebp
c000b438:	57                   	push   edi
c000b439:	56                   	push   esi
c000b43a:	53                   	push   ebx
c000b43b:	81 ec 20 02 00 00    	sub    esp,0x220
c000b441:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b448:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b44e:	57                   	push   edi
c000b44f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b456:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b45a:	56                   	push   esi
c000b45b:	e8 60 fa ff ff       	call   c000aec0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b460:	89 34 24             	mov    DWORD PTR [esp],esi
c000b463:	e8 f8 50 ff ff       	call   c0000560 <strlen>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	83 f8 02             	cmp    eax,0x2
c000b46e:	77 15                	ja     c000b485 <Fs::setcwd(Process*, char*)+0x4e>
c000b470:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b475:	83 eb 41             	sub    ebx,0x41
c000b478:	8b 04 9d 00 2f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd100]
c000b47f:	85 c0                	test   eax,eax
c000b481:	75 1c                	jne    c000b49f <Fs::setcwd(Process*, char*)+0x68>
c000b483:	eb 2f                	jmp    c000b4b4 <Fs::setcwd(Process*, char*)+0x7d>
c000b485:	83 ec 0c             	sub    esp,0xc
c000b488:	56                   	push   esi
c000b489:	e8 d2 50 ff ff       	call   c0000560 <strlen>
c000b48e:	83 c4 10             	add    esp,0x10
c000b491:	83 f8 03             	cmp    eax,0x3
c000b494:	75 57                	jne    c000b4ed <Fs::setcwd(Process*, char*)+0xb6>
c000b496:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b49b:	75 50                	jne    c000b4ed <Fs::setcwd(Process*, char*)+0xb6>
c000b49d:	eb d1                	jmp    c000b470 <Fs::setcwd(Process*, char*)+0x39>
c000b49f:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b4a6:	75 0c                	jne    c000b4b4 <Fs::setcwd(Process*, char*)+0x7d>
c000b4a8:	83 ec 0c             	sub    esp,0xc
c000b4ab:	50                   	push   eax
c000b4ac:	e8 69 1c 00 00       	call   c000d11a <LogicalDisk::mount()>
c000b4b1:	83 c4 10             	add    esp,0x10
c000b4b4:	b8 03 00 00 00       	mov    eax,0x3
c000b4b9:	83 fb 19             	cmp    ebx,0x19
c000b4bc:	0f 87 c6 00 00 00    	ja     c000b588 <Fs::setcwd(Process*, char*)+0x151>
c000b4c2:	8b 14 9d 00 2f 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd100]
c000b4c9:	b8 05 00 00 00       	mov    eax,0x5
c000b4ce:	85 d2                	test   edx,edx
c000b4d0:	0f 84 b2 00 00 00    	je     c000b588 <Fs::setcwd(Process*, char*)+0x151>
c000b4d6:	b8 06 00 00 00       	mov    eax,0x6
c000b4db:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b4e2:	0f 85 92 00 00 00    	jne    c000b57a <Fs::setcwd(Process*, char*)+0x143>
c000b4e8:	e9 9b 00 00 00       	jmp    c000b588 <Fs::setcwd(Process*, char*)+0x151>
c000b4ed:	83 ec 0c             	sub    esp,0xc
c000b4f0:	68 14 01 00 00       	push   0x114
c000b4f5:	e8 63 c9 ff ff       	call   c0007e5d <malloc>
c000b4fa:	83 c4 0c             	add    esp,0xc
c000b4fd:	89 c3                	mov    ebx,eax
c000b4ff:	55                   	push   ebp
c000b500:	56                   	push   esi
c000b501:	50                   	push   eax
c000b502:	e8 63 fb ff ff       	call   c000b06a <File::File(char const*, Process*)>
c000b507:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b50c:	83 c4 0c             	add    esp,0xc
c000b50f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b513:	50                   	push   eax
c000b514:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b518:	50                   	push   eax
c000b519:	53                   	push   ebx
c000b51a:	e8 b7 fe ff ff       	call   c000b3d6 <File::stat(unsigned long long*, bool*)>
c000b51f:	83 c4 10             	add    esp,0x10
c000b522:	83 f8 02             	cmp    eax,0x2
c000b525:	74 04                	je     c000b52b <Fs::setcwd(Process*, char*)+0xf4>
c000b527:	85 c0                	test   eax,eax
c000b529:	74 1c                	je     c000b547 <Fs::setcwd(Process*, char*)+0x110>
c000b52b:	b8 01 00 00 00       	mov    eax,0x1
c000b530:	85 db                	test   ebx,ebx
c000b532:	74 54                	je     c000b588 <Fs::setcwd(Process*, char*)+0x151>
c000b534:	83 ec 0c             	sub    esp,0xc
c000b537:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b539:	53                   	push   ebx
c000b53a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b53d:	83 c4 10             	add    esp,0x10
c000b540:	b8 01 00 00 00       	mov    eax,0x1
c000b545:	eb 41                	jmp    c000b588 <Fs::setcwd(Process*, char*)+0x151>
c000b547:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b54c:	75 1c                	jne    c000b56a <Fs::setcwd(Process*, char*)+0x133>
c000b54e:	b8 02 00 00 00       	mov    eax,0x2
c000b553:	85 db                	test   ebx,ebx
c000b555:	74 31                	je     c000b588 <Fs::setcwd(Process*, char*)+0x151>
c000b557:	83 ec 0c             	sub    esp,0xc
c000b55a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b55c:	53                   	push   ebx
c000b55d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	b8 02 00 00 00       	mov    eax,0x2
c000b568:	eb 1e                	jmp    c000b588 <Fs::setcwd(Process*, char*)+0x151>
c000b56a:	85 db                	test   ebx,ebx
c000b56c:	74 0c                	je     c000b57a <Fs::setcwd(Process*, char*)+0x143>
c000b56e:	83 ec 0c             	sub    esp,0xc
c000b571:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b573:	53                   	push   ebx
c000b574:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b577:	83 c4 10             	add    esp,0x10
c000b57a:	50                   	push   eax
c000b57b:	50                   	push   eax
c000b57c:	56                   	push   esi
c000b57d:	57                   	push   edi
c000b57e:	e8 9d 50 ff ff       	call   c0000620 <strcpy>
c000b583:	83 c4 10             	add    esp,0x10
c000b586:	31 c0                	xor    eax,eax
c000b588:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b58e:	5b                   	pop    ebx
c000b58f:	5e                   	pop    esi
c000b590:	5f                   	pop    edi
c000b591:	5d                   	pop    ebp
c000b592:	c3                   	ret    
c000b593:	90                   	nop

c000b594 <Directory::Directory(char const*, Process*)>:
c000b594:	83 ec 0c             	sub    esp,0xc
c000b597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b59b:	83 ec 08             	sub    esp,0x8
c000b59e:	6a 00                	push   0x0
c000b5a0:	50                   	push   eax
c000b5a1:	e8 b8 de ff ff       	call   c000945e <UnixFile::UnixFile(int)>
c000b5a6:	83 c4 10             	add    esp,0x10
c000b5a9:	ba f8 de 01 c0       	mov    edx,0xc001def8
c000b5ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5b2:	89 10                	mov    DWORD PTR [eax],edx
c000b5b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b5b8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b5be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5c2:	83 c0 0d             	add    eax,0xd
c000b5c5:	83 ec 04             	sub    esp,0x4
c000b5c8:	52                   	push   edx
c000b5c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cd:	50                   	push   eax
c000b5ce:	e8 ed f8 ff ff       	call   c000aec0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b5d3:	83 c4 10             	add    esp,0x10
c000b5d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5da:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b5dd:	8d 50 bf             	lea    edx,[eax-0x41]
c000b5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5e4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ee:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5f6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b5fc:	25 ff 00 00 00       	and    eax,0xff
c000b601:	8b 04 85 00 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd100]
c000b608:	85 c0                	test   eax,eax
c000b60a:	74 42                	je     c000b64e <Directory::Directory(char const*, Process*)+0xba>
c000b60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b610:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b616:	25 ff 00 00 00       	and    eax,0xff
c000b61b:	8b 04 85 00 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd100]
c000b622:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b628:	85 c0                	test   eax,eax
c000b62a:	75 22                	jne    c000b64e <Directory::Directory(char const*, Process*)+0xba>
c000b62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b630:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b636:	25 ff 00 00 00       	and    eax,0xff
c000b63b:	8b 04 85 00 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd100]
c000b642:	83 ec 0c             	sub    esp,0xc
c000b645:	50                   	push   eax
c000b646:	e8 cf 1a 00 00       	call   c000d11a <LogicalDisk::mount()>
c000b64b:	83 c4 10             	add    esp,0x10
c000b64e:	90                   	nop
c000b64f:	83 c4 0c             	add    esp,0xc
c000b652:	c3                   	ret    
c000b653:	90                   	nop

c000b654 <Directory::open()>:
c000b654:	53                   	push   ebx
c000b655:	b8 0b 00 00 00       	mov    eax,0xb
c000b65a:	83 ec 08             	sub    esp,0x8
c000b65d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b661:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b668:	80 fa 19             	cmp    dl,0x19
c000b66b:	77 3d                	ja     c000b6aa <Directory::open()+0x56>
c000b66d:	8b 14 95 00 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd100]
c000b674:	85 d2                	test   edx,edx
c000b676:	74 32                	je     c000b6aa <Directory::open()+0x56>
c000b678:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b67e:	85 d2                	test   edx,edx
c000b680:	74 28                	je     c000b6aa <Directory::open()+0x56>
c000b682:	b8 06 00 00 00       	mov    eax,0x6
c000b687:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b68b:	75 1d                	jne    c000b6aa <Directory::open()+0x56>
c000b68d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b693:	50                   	push   eax
c000b694:	8b 02                	mov    eax,DWORD PTR [edx]
c000b696:	51                   	push   ecx
c000b697:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b69a:	51                   	push   ecx
c000b69b:	52                   	push   edx
c000b69c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b69f:	83 c4 10             	add    esp,0x10
c000b6a2:	85 c0                	test   eax,eax
c000b6a4:	75 04                	jne    c000b6aa <Directory::open()+0x56>
c000b6a6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b6aa:	83 c4 08             	add    esp,0x8
c000b6ad:	5b                   	pop    ebx
c000b6ae:	c3                   	ret    
c000b6af:	90                   	nop

c000b6b0 <Directory::close()>:
c000b6b0:	53                   	push   ebx
c000b6b1:	b8 0b 00 00 00       	mov    eax,0xb
c000b6b6:	83 ec 08             	sub    esp,0x8
c000b6b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b6bd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b6c4:	80 fa 19             	cmp    dl,0x19
c000b6c7:	77 41                	ja     c000b70a <Directory::close()+0x5a>
c000b6c9:	8b 1c 95 00 2f 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd100]
c000b6d0:	85 db                	test   ebx,ebx
c000b6d2:	74 36                	je     c000b70a <Directory::close()+0x5a>
c000b6d4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b6db:	74 2d                	je     c000b70a <Directory::close()+0x5a>
c000b6dd:	b8 05 00 00 00       	mov    eax,0x5
c000b6e2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b6e6:	74 22                	je     c000b70a <Directory::close()+0x5a>
c000b6e8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b6ec:	8b 04 95 00 2f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd100]
c000b6f3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b6f9:	53                   	push   ebx
c000b6fa:	53                   	push   ebx
c000b6fb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6fd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b703:	50                   	push   eax
c000b704:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	83 c4 08             	add    esp,0x8
c000b70d:	5b                   	pop    ebx
c000b70e:	c3                   	ret    
c000b70f:	90                   	nop

c000b710 <Directory::unlink()>:
c000b710:	83 ec 0c             	sub    esp,0xc
c000b713:	b8 0b 00 00 00       	mov    eax,0xb
c000b718:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b71c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b723:	80 f9 19             	cmp    cl,0x19
c000b726:	77 2f                	ja     c000b757 <Directory::unlink()+0x47>
c000b728:	8b 0c 8d 00 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd100]
c000b72f:	85 c9                	test   ecx,ecx
c000b731:	74 24                	je     c000b757 <Directory::unlink()+0x47>
c000b733:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b739:	85 c9                	test   ecx,ecx
c000b73b:	74 1a                	je     c000b757 <Directory::unlink()+0x47>
c000b73d:	b8 06 00 00 00       	mov    eax,0x6
c000b742:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b746:	75 0f                	jne    c000b757 <Directory::unlink()+0x47>
c000b748:	83 c2 0d             	add    edx,0xd
c000b74b:	50                   	push   eax
c000b74c:	50                   	push   eax
c000b74d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b74f:	52                   	push   edx
c000b750:	51                   	push   ecx
c000b751:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b754:	83 c4 10             	add    esp,0x10
c000b757:	83 c4 0c             	add    esp,0xc
c000b75a:	c3                   	ret    
c000b75b:	90                   	nop

c000b75c <Directory::rename(char const*)>:
c000b75c:	83 ec 0c             	sub    esp,0xc
c000b75f:	b8 0b 00 00 00       	mov    eax,0xb
c000b764:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b768:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b76f:	80 f9 19             	cmp    cl,0x19
c000b772:	77 32                	ja     c000b7a6 <Directory::rename(char const*)+0x4a>
c000b774:	8b 0c 8d 00 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd100]
c000b77b:	85 c9                	test   ecx,ecx
c000b77d:	74 27                	je     c000b7a6 <Directory::rename(char const*)+0x4a>
c000b77f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b785:	85 c9                	test   ecx,ecx
c000b787:	74 1d                	je     c000b7a6 <Directory::rename(char const*)+0x4a>
c000b789:	b8 06 00 00 00       	mov    eax,0x6
c000b78e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b792:	75 12                	jne    c000b7a6 <Directory::rename(char const*)+0x4a>
c000b794:	83 c2 0d             	add    edx,0xd
c000b797:	50                   	push   eax
c000b798:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b79a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b79e:	52                   	push   edx
c000b79f:	51                   	push   ecx
c000b7a0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b7a3:	83 c4 10             	add    esp,0x10
c000b7a6:	83 c4 0c             	add    esp,0xc
c000b7a9:	c3                   	ret    

c000b7aa <Directory::exists()>:
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	31 c0                	xor    eax,eax
c000b7af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7b3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b7ba:	80 f9 19             	cmp    cl,0x19
c000b7bd:	77 24                	ja     c000b7e3 <Directory::exists()+0x39>
c000b7bf:	8b 0c 8d 00 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd100]
c000b7c6:	85 c9                	test   ecx,ecx
c000b7c8:	74 19                	je     c000b7e3 <Directory::exists()+0x39>
c000b7ca:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b7d0:	85 c9                	test   ecx,ecx
c000b7d2:	74 0f                	je     c000b7e3 <Directory::exists()+0x39>
c000b7d4:	83 c2 0d             	add    edx,0xd
c000b7d7:	50                   	push   eax
c000b7d8:	50                   	push   eax
c000b7d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b7db:	52                   	push   edx
c000b7dc:	51                   	push   ecx
c000b7dd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b7e0:	83 c4 10             	add    esp,0x10
c000b7e3:	83 c4 0c             	add    esp,0xc
c000b7e6:	c3                   	ret    
c000b7e7:	90                   	nop

c000b7e8 <Directory::read(dirent*)>:
c000b7e8:	83 ec 1c             	sub    esp,0x1c
c000b7eb:	b8 0b 00 00 00       	mov    eax,0xb
c000b7f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b7f4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b7fb:	80 fa 19             	cmp    dl,0x19
c000b7fe:	77 30                	ja     c000b830 <Directory::read(dirent*)+0x48>
c000b800:	8b 14 95 00 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd100]
c000b807:	85 d2                	test   edx,edx
c000b809:	74 25                	je     c000b830 <Directory::read(dirent*)+0x48>
c000b80b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b812:	74 1c                	je     c000b830 <Directory::read(dirent*)+0x48>
c000b814:	83 ec 0c             	sub    esp,0xc
c000b817:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b819:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b81d:	52                   	push   edx
c000b81e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b822:	6a 00                	push   0x0
c000b824:	68 10 01 00 00       	push   0x110
c000b829:	51                   	push   ecx
c000b82a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b82d:	83 c4 20             	add    esp,0x20
c000b830:	83 c4 1c             	add    esp,0x1c
c000b833:	c3                   	ret    

c000b834 <Directory::create()>:
c000b834:	83 ec 0c             	sub    esp,0xc
c000b837:	b8 0b 00 00 00       	mov    eax,0xb
c000b83c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b840:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b847:	80 f9 19             	cmp    cl,0x19
c000b84a:	77 2f                	ja     c000b87b <Directory::create()+0x47>
c000b84c:	8b 0c 8d 00 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd100]
c000b853:	85 c9                	test   ecx,ecx
c000b855:	74 24                	je     c000b87b <Directory::create()+0x47>
c000b857:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b85d:	85 c9                	test   ecx,ecx
c000b85f:	74 1a                	je     c000b87b <Directory::create()+0x47>
c000b861:	b8 06 00 00 00       	mov    eax,0x6
c000b866:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b86a:	75 0f                	jne    c000b87b <Directory::create()+0x47>
c000b86c:	83 c2 0d             	add    edx,0xd
c000b86f:	50                   	push   eax
c000b870:	50                   	push   eax
c000b871:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b873:	52                   	push   edx
c000b874:	51                   	push   ecx
c000b875:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b878:	83 c4 10             	add    esp,0x10
c000b87b:	83 c4 0c             	add    esp,0xc
c000b87e:	c3                   	ret    
c000b87f:	90                   	nop

c000b880 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b880:	b8 0a 00 00 00       	mov    eax,0xa
c000b885:	c3                   	ret    
c000b886:	66 90                	xchg   ax,ax

c000b888 <Bus::Bus(char const*)>:
c000b888:	83 ec 0c             	sub    esp,0xc
c000b88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b88f:	83 ec 08             	sub    esp,0x8
c000b892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b896:	50                   	push   eax
c000b897:	e8 30 08 00 00       	call   c000c0cc <Device::Device(char const*)>
c000b89c:	83 c4 10             	add    esp,0x10
c000b89f:	ba 14 df 01 c0       	mov    edx,0xc001df14
c000b8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8a8:	89 10                	mov    DWORD PTR [eax],edx
c000b8aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ae:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b8b8:	90                   	nop
c000b8b9:	83 c4 0c             	add    esp,0xc
c000b8bc:	c3                   	ret    
c000b8bd:	90                   	nop
c000b8be:	66 90                	xchg   ax,ax

c000b8c0 <Bus::~Bus()>:
c000b8c0:	83 ec 0c             	sub    esp,0xc
c000b8c3:	ba 14 df 01 c0       	mov    edx,0xc001df14
c000b8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8cc:	89 10                	mov    DWORD PTR [eax],edx
c000b8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8d2:	83 ec 0c             	sub    esp,0xc
c000b8d5:	50                   	push   eax
c000b8d6:	e8 5b 05 00 00       	call   c000be36 <Device::~Device()>
c000b8db:	83 c4 10             	add    esp,0x10
c000b8de:	90                   	nop
c000b8df:	83 c4 0c             	add    esp,0xc
c000b8e2:	c3                   	ret    
c000b8e3:	90                   	nop

c000b8e4 <Bus::~Bus()>:
c000b8e4:	83 ec 0c             	sub    esp,0xc
c000b8e7:	83 ec 0c             	sub    esp,0xc
c000b8ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8ee:	e8 cd ff ff ff       	call   c000b8c0 <Bus::~Bus()>
c000b8f3:	83 c4 10             	add    esp,0x10
c000b8f6:	83 ec 08             	sub    esp,0x8
c000b8f9:	68 58 01 00 00       	push   0x158
c000b8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b902:	e8 f7 f0 ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000b907:	83 c4 10             	add    esp,0x10
c000b90a:	83 c4 0c             	add    esp,0xc
c000b90d:	c3                   	ret    

c000b90e <beepThread(void*)>:
c000b90e:	83 ec 0c             	sub    esp,0xc
c000b911:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000b916:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b91a:	48                   	dec    eax
c000b91b:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c000b920:	75 01                	jne    c000b923 <beepThread(void*)+0x15>
c000b922:	fb                   	sti    
c000b923:	83 ec 0c             	sub    esp,0xc
c000b926:	6b c2 0a             	imul   eax,edx,0xa
c000b929:	50                   	push   eax
c000b92a:	e8 ed 82 00 00       	call   c0013c1c <milliTenthSleep(unsigned int)>
c000b92f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b936:	e8 93 a0 00 00       	call   c00159ce <HalMakeBeep(int)>
c000b93b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b943:	83 c4 1c             	add    esp,0x1c
c000b946:	e9 cd 81 00 00       	jmp    c0013b18 <blockTask(TaskState)>

c000b94b <Krnl::beep(int, int, bool)>:
c000b94b:	56                   	push   esi
c000b94c:	53                   	push   ebx
c000b94d:	83 ec 10             	sub    esp,0x10
c000b950:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b954:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b95c:	e8 6d a0 00 00       	call   c00159ce <HalMakeBeep(int)>
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	89 f0                	mov    eax,esi
c000b966:	84 c0                	test   al,al
c000b968:	74 1e                	je     c000b988 <Krnl::beep(int, int, bool)+0x3d>
c000b96a:	83 ec 0c             	sub    esp,0xc
c000b96d:	6b db 0a             	imul   ebx,ebx,0xa
c000b970:	53                   	push   ebx
c000b971:	e8 a6 82 00 00       	call   c0013c1c <milliTenthSleep(unsigned int)>
c000b976:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b97e:	83 c4 14             	add    esp,0x14
c000b981:	5b                   	pop    ebx
c000b982:	5e                   	pop    esi
c000b983:	e9 46 a0 00 00       	jmp    c00159ce <HalMakeBeep(int)>
c000b988:	68 e6 00 00 00       	push   0xe6
c000b98d:	53                   	push   ebx
c000b98e:	68 0e b9 00 c0       	push   0xc000b90e
c000b993:	ff 35 70 3e 02 c0    	push   DWORD PTR ds:0xc0023e70
c000b999:	e8 5e 7d 00 00       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c000b99e:	83 c4 14             	add    esp,0x14
c000b9a1:	5b                   	pop    ebx
c000b9a2:	5e                   	pop    esi
c000b9a3:	c3                   	ret    

c000b9a4 <User::loadClockSettings(int)>:
c000b9a4:	53                   	push   ebx
c000b9a5:	83 ec 14             	sub    esp,0x14
c000b9a8:	68 14 01 00 00       	push   0x114
c000b9ad:	e8 ab c4 ff ff       	call   c0007e5d <malloc>
c000b9b2:	83 c4 0c             	add    esp,0xc
c000b9b5:	89 c3                	mov    ebx,eax
c000b9b7:	ff 35 70 3e 02 c0    	push   DWORD PTR ds:0xc0023e70
c000b9bd:	68 38 df 01 c0       	push   0xc001df38
c000b9c2:	50                   	push   eax
c000b9c3:	e8 a2 f6 ff ff       	call   c000b06a <File::File(char const*, Process*)>
c000b9c8:	58                   	pop    eax
c000b9c9:	5a                   	pop    edx
c000b9ca:	6a 01                	push   0x1
c000b9cc:	53                   	push   ebx
c000b9cd:	e8 58 f7 ff ff       	call   c000b12a <File::open(FileOpenMode)>
c000b9d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b9d5:	e8 ae f7 ff ff       	call   c000b188 <File::close()>
c000b9da:	83 c4 10             	add    esp,0x10
c000b9dd:	85 db                	test   ebx,ebx
c000b9df:	74 0f                	je     c000b9f0 <User::loadClockSettings(int)+0x4c>
c000b9e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b9e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b9ea:	83 c4 08             	add    esp,0x8
c000b9ed:	5b                   	pop    ebx
c000b9ee:	ff e0                	jmp    eax
c000b9f0:	83 c4 08             	add    esp,0x8
c000b9f3:	5b                   	pop    ebx
c000b9f4:	c3                   	ret    
c000b9f5:	90                   	nop

c000b9f6 <Clock::Clock(char const*)>:
c000b9f6:	83 ec 0c             	sub    esp,0xc
c000b9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fd:	83 ec 08             	sub    esp,0x8
c000ba00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba04:	50                   	push   eax
c000ba05:	e8 c2 06 00 00       	call   c000c0cc <Device::Device(char const*)>
c000ba0a:	83 c4 10             	add    esp,0x10
c000ba0d:	ba 60 df 01 c0       	mov    edx,0xc001df60
c000ba12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba16:	89 10                	mov    DWORD PTR [eax],edx
c000ba18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba1c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000ba26:	90                   	nop
c000ba27:	83 c4 0c             	add    esp,0xc
c000ba2a:	c3                   	ret    
c000ba2b:	90                   	nop

c000ba2c <Clock::~Clock()>:
c000ba2c:	83 ec 0c             	sub    esp,0xc
c000ba2f:	ba 60 df 01 c0       	mov    edx,0xc001df60
c000ba34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba38:	89 10                	mov    DWORD PTR [eax],edx
c000ba3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba3e:	83 ec 0c             	sub    esp,0xc
c000ba41:	50                   	push   eax
c000ba42:	e8 ef 03 00 00       	call   c000be36 <Device::~Device()>
c000ba47:	83 c4 10             	add    esp,0x10
c000ba4a:	90                   	nop
c000ba4b:	83 c4 0c             	add    esp,0xc
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <Clock::~Clock()>:
c000ba50:	83 ec 0c             	sub    esp,0xc
c000ba53:	83 ec 0c             	sub    esp,0xc
c000ba56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba5a:	e8 cd ff ff ff       	call   c000ba2c <Clock::~Clock()>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	83 ec 08             	sub    esp,0x8
c000ba65:	68 58 01 00 00       	push   0x158
c000ba6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba6e:	e8 8b ef ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000ba73:	83 c4 10             	add    esp,0x10
c000ba76:	83 c4 0c             	add    esp,0xc
c000ba79:	c3                   	ret    

c000ba7a <Clock::timeInSecondsLocal()>:
c000ba7a:	53                   	push   ebx
c000ba7b:	83 ec 14             	sub    esp,0x14
c000ba7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba82:	8b 10                	mov    edx,DWORD PTR [eax]
c000ba84:	50                   	push   eax
c000ba85:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ba88:	0f b6 0d 98 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020a98
c000ba8f:	03 0d 9c 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020a9c
c000ba95:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ba9b:	89 cb                	mov    ebx,ecx
c000ba9d:	c1 fb 1f             	sar    ebx,0x1f
c000baa0:	01 c8                	add    eax,ecx
c000baa2:	11 da                	adc    edx,ebx
c000baa4:	83 c4 10             	add    esp,0x10
c000baa7:	31 c9                	xor    ecx,ecx
c000baa9:	80 3d 99 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a99,0x0
c000bab0:	74 05                	je     c000bab7 <Clock::timeInSecondsLocal()+0x3d>
c000bab2:	b9 08 07 00 00       	mov    ecx,0x708
c000bab7:	31 db                	xor    ebx,ebx
c000bab9:	01 c8                	add    eax,ecx
c000babb:	11 da                	adc    edx,ebx
c000babd:	83 c4 08             	add    esp,0x8
c000bac0:	5b                   	pop    ebx
c000bac1:	c3                   	ret    

c000bac2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bac2:	57                   	push   edi
c000bac3:	56                   	push   esi
c000bac4:	53                   	push   ebx
c000bac5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bac9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bacd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bacf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bad3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bad6:	0f b6 05 98 0a 02 c0 	movzx  eax,BYTE PTR ds:0xc0020a98
c000badd:	03 05 9c 0a 02 c0    	add    eax,DWORD PTR ds:0xc0020a9c
c000bae3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bae9:	99                   	cdq    
c000baea:	29 c6                	sub    esi,eax
c000baec:	19 d7                	sbb    edi,edx
c000baee:	89 f0                	mov    eax,esi
c000baf0:	89 fa                	mov    edx,edi
c000baf2:	31 f6                	xor    esi,esi
c000baf4:	80 3d 99 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a99,0x0
c000bafb:	74 05                	je     c000bb02 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bafd:	be 08 07 00 00       	mov    esi,0x708
c000bb02:	31 ff                	xor    edi,edi
c000bb04:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bb08:	29 f0                	sub    eax,esi
c000bb0a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb0e:	19 fa                	sbb    edx,edi
c000bb10:	89 d8                	mov    eax,ebx
c000bb12:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb16:	5b                   	pop    ebx
c000bb17:	5e                   	pop    esi
c000bb18:	5f                   	pop    edi
c000bb19:	ff e0                	jmp    eax

c000bb1b <datetimeToSeconds(datetime_t)>:
c000bb1b:	55                   	push   ebp
c000bb1c:	57                   	push   edi
c000bb1d:	56                   	push   esi
c000bb1e:	53                   	push   ebx
c000bb1f:	83 ec 14             	sub    esp,0x14
c000bb22:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb26:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bb2a:	89 d3                	mov    ebx,edx
c000bb2c:	0f b6 c6             	movzx  eax,dh
c000bb2f:	c1 eb 10             	shr    ebx,0x10
c000bb32:	48                   	dec    eax
c000bb33:	66 81 eb 6c 07       	sub    bx,0x76c
c000bb38:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bb3c:	0f b6 f5             	movzx  esi,ch
c000bb3f:	89 cf                	mov    edi,ecx
c000bb41:	6b f6 3c             	imul   esi,esi,0x3c
c000bb44:	c1 ef 10             	shr    edi,0x10
c000bb47:	0f b6 c9             	movzx  ecx,cl
c000bb4a:	89 f8                	mov    eax,edi
c000bb4c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb52:	0f b6 f8             	movzx  edi,al
c000bb55:	0f b6 d2             	movzx  edx,dl
c000bb58:	01 fe                	add    esi,edi
c000bb5a:	01 f1                	add    ecx,esi
c000bb5c:	0f b7 f3             	movzx  esi,bx
c000bb5f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000bb63:	c1 f9 1f             	sar    ecx,0x1f
c000bb66:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000bb6b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bb6f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000bb74:	8b 0c 8d a0 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2060]
c000bb7b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bb7f:	76 29                	jbe    c000bbaa <datetimeToSeconds(datetime_t)+0x8f>
c000bb81:	f6 c3 03             	test   bl,0x3
c000bb84:	75 24                	jne    c000bbaa <datetimeToSeconds(datetime_t)+0x8f>
c000bb86:	31 d2                	xor    edx,edx
c000bb88:	bf 64 00 00 00       	mov    edi,0x64
c000bb8d:	89 d8                	mov    eax,ebx
c000bb8f:	66 f7 f7             	div    di
c000bb92:	66 85 d2             	test   dx,dx
c000bb95:	75 12                	jne    c000bba9 <datetimeToSeconds(datetime_t)+0x8e>
c000bb97:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bb9d:	bf 90 01 00 00       	mov    edi,0x190
c000bba2:	99                   	cdq    
c000bba3:	f7 ff                	idiv   edi
c000bba5:	85 d2                	test   edx,edx
c000bba7:	75 01                	jne    c000bbaa <datetimeToSeconds(datetime_t)+0x8f>
c000bba9:	41                   	inc    ecx
c000bbaa:	66 83 fb 46          	cmp    bx,0x46
c000bbae:	76 45                	jbe    c000bbf5 <datetimeToSeconds(datetime_t)+0xda>
c000bbb0:	bb 46 00 00 00       	mov    ebx,0x46
c000bbb5:	bf 64 00 00 00       	mov    edi,0x64
c000bbba:	bd 90 01 00 00       	mov    ebp,0x190
c000bbbf:	b8 6d 01 00 00       	mov    eax,0x16d
c000bbc4:	f6 c3 03             	test   bl,0x3
c000bbc7:	75 23                	jne    c000bbec <datetimeToSeconds(datetime_t)+0xd1>
c000bbc9:	89 d8                	mov    eax,ebx
c000bbcb:	99                   	cdq    
c000bbcc:	f7 ff                	idiv   edi
c000bbce:	b8 6e 01 00 00       	mov    eax,0x16e
c000bbd3:	85 d2                	test   edx,edx
c000bbd5:	75 15                	jne    c000bbec <datetimeToSeconds(datetime_t)+0xd1>
c000bbd7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bbdd:	99                   	cdq    
c000bbde:	f7 fd                	idiv   ebp
c000bbe0:	31 c0                	xor    eax,eax
c000bbe2:	85 d2                	test   edx,edx
c000bbe4:	0f 94 c0             	sete   al
c000bbe7:	05 6d 01 00 00       	add    eax,0x16d
c000bbec:	01 c1                	add    ecx,eax
c000bbee:	43                   	inc    ebx
c000bbef:	39 f3                	cmp    ebx,esi
c000bbf1:	7c cc                	jl     c000bbbf <datetimeToSeconds(datetime_t)+0xa4>
c000bbf3:	eb 3b                	jmp    c000bc30 <datetimeToSeconds(datetime_t)+0x115>
c000bbf5:	74 39                	je     c000bc30 <datetimeToSeconds(datetime_t)+0x115>
c000bbf7:	b8 45 00 00 00       	mov    eax,0x45
c000bbfc:	89 c2                	mov    edx,eax
c000bbfe:	83 e2 03             	and    edx,0x3
c000bc01:	39 f0                	cmp    eax,esi
c000bc03:	7e 13                	jle    c000bc18 <datetimeToSeconds(datetime_t)+0xfd>
c000bc05:	85 d2                	test   edx,edx
c000bc07:	0f 94 c2             	sete   dl
c000bc0a:	48                   	dec    eax
c000bc0b:	0f b6 d2             	movzx  edx,dl
c000bc0e:	81 c2 6d 01 00 00    	add    edx,0x16d
c000bc14:	29 d1                	sub    ecx,edx
c000bc16:	eb e4                	jmp    c000bbfc <datetimeToSeconds(datetime_t)+0xe1>
c000bc18:	b8 6d 01 00 00       	mov    eax,0x16d
c000bc1d:	85 d2                	test   edx,edx
c000bc1f:	75 0d                	jne    c000bc2e <datetimeToSeconds(datetime_t)+0x113>
c000bc21:	31 c0                	xor    eax,eax
c000bc23:	66 85 db             	test   bx,bx
c000bc26:	0f 95 c0             	setne  al
c000bc29:	05 6d 01 00 00       	add    eax,0x16d
c000bc2e:	29 c1                	sub    ecx,eax
c000bc30:	b8 80 51 01 00       	mov    eax,0x15180
c000bc35:	f7 e9                	imul   ecx
c000bc37:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bc3b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000bc3f:	83 c4 14             	add    esp,0x14
c000bc42:	5b                   	pop    ebx
c000bc43:	5e                   	pop    esi
c000bc44:	5f                   	pop    edi
c000bc45:	5d                   	pop    ebp
c000bc46:	c3                   	ret    
c000bc47:	90                   	nop

c000bc48 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bc48:	57                   	push   edi
c000bc49:	56                   	push   esi
c000bc4a:	53                   	push   ebx
c000bc4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc4f:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc51:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bc54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc5c:	e8 ba fe ff ff       	call   c000bb1b <datetimeToSeconds(datetime_t)>
c000bc61:	59                   	pop    ecx
c000bc62:	0f b6 0d 98 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020a98
c000bc69:	5b                   	pop    ebx
c000bc6a:	03 0d 9c 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020a9c
c000bc70:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bc76:	89 cb                	mov    ebx,ecx
c000bc78:	c1 fb 1f             	sar    ebx,0x1f
c000bc7b:	29 c8                	sub    eax,ecx
c000bc7d:	19 da                	sbb    edx,ebx
c000bc7f:	31 c9                	xor    ecx,ecx
c000bc81:	80 3d 99 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a99,0x0
c000bc88:	74 05                	je     c000bc8f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bc8a:	b9 08 07 00 00       	mov    ecx,0x708
c000bc8f:	31 db                	xor    ebx,ebx
c000bc91:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bc95:	29 c8                	sub    eax,ecx
c000bc97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc9b:	19 da                	sbb    edx,ebx
c000bc9d:	89 f8                	mov    eax,edi
c000bc9f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bca3:	5b                   	pop    ebx
c000bca4:	5e                   	pop    esi
c000bca5:	5f                   	pop    edi
c000bca6:	ff e0                	jmp    eax

c000bca8 <secondsToDatetime(unsigned long long)>:
c000bca8:	55                   	push   ebp
c000bca9:	57                   	push   edi
c000bcaa:	56                   	push   esi
c000bcab:	53                   	push   ebx
c000bcac:	83 ec 1c             	sub    esp,0x1c
c000bcaf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bcb3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bcb7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bcbb:	6a 00                	push   0x0
c000bcbd:	68 80 51 01 00       	push   0x15180
c000bcc2:	55                   	push   ebp
c000bcc3:	57                   	push   edi
c000bcc4:	e8 37 05 01 00       	call   c001c200 <__udivdi3>
c000bcc9:	83 c4 10             	add    esp,0x10
c000bccc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bcd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcd6:	6a 00                	push   0x0
c000bcd8:	68 80 51 01 00       	push   0x15180
c000bcdd:	55                   	push   ebp
c000bcde:	57                   	push   edi
c000bcdf:	bf 10 0e 00 00       	mov    edi,0xe10
c000bce4:	e8 17 06 01 00       	call   c001c300 <__umoddi3>
c000bce9:	83 c4 10             	add    esp,0x10
c000bcec:	99                   	cdq    
c000bced:	f7 ff                	idiv   edi
c000bcef:	bf 3c 00 00 00       	mov    edi,0x3c
c000bcf4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bcf7:	89 d0                	mov    eax,edx
c000bcf9:	99                   	cdq    
c000bcfa:	f7 ff                	idiv   edi
c000bcfc:	85 db                	test   ebx,ebx
c000bcfe:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bd01:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bd04:	79 11                	jns    c000bd17 <secondsToDatetime(unsigned long long)+0x6f>
c000bd06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd0a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bd10:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bd15:	eb 07                	jmp    c000bd1e <secondsToDatetime(unsigned long long)+0x76>
c000bd17:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bd1c:	89 d8                	mov    eax,ebx
c000bd1e:	bf b4 05 00 00       	mov    edi,0x5b4
c000bd23:	99                   	cdq    
c000bd24:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bd29:	f7 f9                	idiv   ecx
c000bd2b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bd30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd34:	31 d2                	xor    edx,edx
c000bd36:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bd3e:	01 c3                	add    ebx,eax
c000bd40:	89 d8                	mov    eax,ebx
c000bd42:	f7 f1                	div    ecx
c000bd44:	31 d2                	xor    edx,edx
c000bd46:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bd49:	89 d8                	mov    eax,ebx
c000bd4b:	f7 f7                	div    edi
c000bd4d:	31 d2                	xor    edx,edx
c000bd4f:	29 c1                	sub    ecx,eax
c000bd51:	89 d8                	mov    eax,ebx
c000bd53:	f7 f5                	div    ebp
c000bd55:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bd5a:	29 c1                	sub    ecx,eax
c000bd5c:	31 d2                	xor    edx,edx
c000bd5e:	89 c8                	mov    eax,ecx
c000bd60:	f7 f5                	div    ebp
c000bd62:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bd67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd6b:	31 d2                	xor    edx,edx
c000bd6d:	89 c8                	mov    eax,ecx
c000bd6f:	f7 f5                	div    ebp
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	01 c3                	add    ebx,eax
c000bd75:	89 c8                	mov    eax,ecx
c000bd77:	f7 f7                	div    edi
c000bd79:	bf 99 00 00 00       	mov    edi,0x99
c000bd7e:	29 c3                	sub    ebx,eax
c000bd80:	31 d2                	xor    edx,edx
c000bd82:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bd8a:	29 c3                	sub    ebx,eax
c000bd8c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bd8f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bd92:	bb 05 00 00 00       	mov    ebx,0x5
c000bd97:	83 c1 02             	add    ecx,0x2
c000bd9a:	89 c8                	mov    eax,ecx
c000bd9c:	f7 f7                	div    edi
c000bd9e:	31 d2                	xor    edx,edx
c000bda0:	89 c7                	mov    edi,eax
c000bda2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bda8:	83 c0 02             	add    eax,0x2
c000bdab:	f7 f3                	div    ebx
c000bdad:	89 eb                	mov    ebx,ebp
c000bdaf:	29 c3                	sub    ebx,eax
c000bdb1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bdb7:	88 1e                	mov    BYTE PTR [esi],bl
c000bdb9:	19 c0                	sbb    eax,eax
c000bdbb:	31 d2                	xor    edx,edx
c000bdbd:	83 e0 0c             	and    eax,0xc
c000bdc0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bdc4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bdcc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bdd0:	83 f9 01             	cmp    ecx,0x1
c000bdd3:	0f 96 c2             	setbe  dl
c000bdd6:	41                   	inc    ecx
c000bdd7:	01 d0                	add    eax,edx
c000bdd9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bddc:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bde0:	83 c4 1c             	add    esp,0x1c
c000bde3:	89 f0                	mov    eax,esi
c000bde5:	5b                   	pop    ebx
c000bde6:	5e                   	pop    esi
c000bde7:	5f                   	pop    edi
c000bde8:	5d                   	pop    ebp
c000bde9:	c2 04 00             	ret    0x4

c000bdec <Clock::timeInDatetimeLocal()>:
c000bdec:	53                   	push   ebx
c000bded:	83 ec 14             	sub    esp,0x14
c000bdf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bdf8:	e8 7d fc ff ff       	call   c000ba7a <Clock::timeInSecondsLocal()>
c000bdfd:	83 c4 0c             	add    esp,0xc
c000be00:	52                   	push   edx
c000be01:	50                   	push   eax
c000be02:	53                   	push   ebx
c000be03:	e8 a0 fe ff ff       	call   c000bca8 <secondsToDatetime(unsigned long long)>
c000be08:	89 d8                	mov    eax,ebx
c000be0a:	83 c4 14             	add    esp,0x14
c000be0d:	5b                   	pop    ebx
c000be0e:	c2 04 00             	ret    0x4
c000be11:	90                   	nop

c000be12 <Device::hibernate()>:
c000be12:	c3                   	ret    
c000be13:	90                   	nop

c000be14 <Device::wake()>:
c000be14:	c3                   	ret    
c000be15:	90                   	nop

c000be16 <Device::detect()>:
c000be16:	c3                   	ret    
c000be17:	90                   	nop

c000be18 <Device::disableLegacy()>:
c000be18:	c3                   	ret    
c000be19:	90                   	nop

c000be1a <Device::powerSaving(PowerSavingLevel)>:
c000be1a:	c3                   	ret    
c000be1b:	90                   	nop

c000be1c <DriverlessDevice::close(int, int, void*)>:
c000be1c:	31 c0                	xor    eax,eax
c000be1e:	c3                   	ret    
c000be1f:	90                   	nop

c000be20 <DriverlessDevice::detect()>:
c000be20:	c3                   	ret    
c000be21:	90                   	nop

c000be22 <DriverlessDevice::open(int, int, void*)>:
c000be22:	83 ec 18             	sub    esp,0x18
c000be25:	68 d0 df 01 c0       	push   0xc001dfd0
c000be2a:	e8 94 48 00 00       	call   c00106c3 <KePanic(char const*)>
c000be2f:	83 c8 ff             	or     eax,0xffffffff
c000be32:	83 c4 1c             	add    esp,0x1c
c000be35:	c3                   	ret    

c000be36 <Device::~Device()>:
c000be36:	ba 30 e0 01 c0       	mov    edx,0xc001e030
c000be3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be3f:	89 10                	mov    DWORD PTR [eax],edx
c000be41:	90                   	nop
c000be42:	c3                   	ret    
c000be43:	90                   	nop

c000be44 <Device::~Device()>:
c000be44:	83 ec 0c             	sub    esp,0xc
c000be47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000be4b:	e8 e6 ff ff ff       	call   c000be36 <Device::~Device()>
c000be50:	83 c4 04             	add    esp,0x4
c000be53:	83 ec 08             	sub    esp,0x8
c000be56:	68 58 01 00 00       	push   0x158
c000be5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be5f:	e8 9a eb ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000be64:	83 c4 10             	add    esp,0x10
c000be67:	83 c4 0c             	add    esp,0xc
c000be6a:	c3                   	ret    
c000be6b:	90                   	nop

c000be6c <Device::findAndLoadDriver()>:
c000be6c:	c7 44 24 04 ee df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dfee
c000be74:	e9 7b ec ff ff       	jmp    c000aaf4 <Dbg::kprintf(char const*, ...)>
c000be79:	90                   	nop

c000be7a <Device::preOpenPCI(PCIDeviceInfo)>:
c000be7a:	57                   	push   edi
c000be7b:	b9 09 00 00 00       	mov    ecx,0x9
c000be80:	56                   	push   esi
c000be81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000be85:	8d 74 24 10          	lea    esi,[esp+0x10]
c000be89:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000be93:	81 c7 18 01 00 00    	add    edi,0x118
c000be99:	fc                   	cld    
c000be9a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000be9c:	5e                   	pop    esi
c000be9d:	5f                   	pop    edi
c000be9e:	c3                   	ret    
c000be9f:	90                   	nop

c000bea0 <Device::preOpenACPI(void*, char*, char*)>:
c000bea0:	57                   	push   edi
c000bea1:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bea6:	56                   	push   esi
c000bea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000beab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beaf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000beb9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bebf:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bec5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bec9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000becb:	b9 0e 00 00 00       	mov    ecx,0xe
c000bed0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bed6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000beda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bedc:	5e                   	pop    esi
c000bedd:	5f                   	pop    edi
c000bede:	c3                   	ret    
c000bedf:	90                   	nop

c000bee0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bee0:	53                   	push   ebx
c000bee1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bee5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bee9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000beed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bef1:	0f b6 c0             	movzx  eax,al
c000bef4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bef8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000befc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bf00:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bf04:	5b                   	pop    ebx
c000bf05:	e9 a6 05 00 00       	jmp    c000c4b0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bf0a <Device::getParent()>:
c000bf0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf0e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bf14:	c3                   	ret    
c000bf15:	90                   	nop

c000bf16 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bf16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf1e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bf23:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bf27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bf2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bf2f:	e9 e8 06 00 00       	jmp    c000c61c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bf34 <Device::addChild(Device*)>:
c000bf34:	53                   	push   ebx
c000bf35:	83 ec 08             	sub    esp,0x8
c000bf38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf40:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bf46:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bf4c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bf4e:	85 d2                	test   edx,edx
c000bf50:	74 04                	je     c000bf56 <Device::addChild(Device*)+0x22>
c000bf52:	89 d3                	mov    ebx,edx
c000bf54:	eb f6                	jmp    c000bf4c <Device::addChild(Device*)+0x18>
c000bf56:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bf59:	83 ec 0c             	sub    esp,0xc
c000bf5c:	6a 08                	push   0x8
c000bf5e:	e8 fa be ff ff       	call   c0007e5d <malloc>
c000bf63:	89 03                	mov    DWORD PTR [ebx],eax
c000bf65:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bf6b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf72:	83 c4 18             	add    esp,0x18
c000bf75:	5b                   	pop    ebx
c000bf76:	c3                   	ret    
c000bf77:	90                   	nop

c000bf78 <Device::removeAllChildren()>:
c000bf78:	56                   	push   esi
c000bf79:	53                   	push   ebx
c000bf7a:	52                   	push   edx
c000bf7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf7f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bf85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf88:	74 17                	je     c000bfa1 <Device::removeAllChildren()+0x29>
c000bf8a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bf8d:	85 c0                	test   eax,eax
c000bf8f:	74 0c                	je     c000bf9d <Device::removeAllChildren()+0x25>
c000bf91:	83 ec 0c             	sub    esp,0xc
c000bf94:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf96:	50                   	push   eax
c000bf97:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bf9a:	83 c4 10             	add    esp,0x10
c000bf9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf9f:	eb e4                	jmp    c000bf85 <Device::removeAllChildren()+0xd>
c000bfa1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bfa7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfad:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bfb3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfba:	58                   	pop    eax
c000bfbb:	5b                   	pop    ebx
c000bfbc:	5e                   	pop    esi
c000bfbd:	c3                   	ret    

c000bfbe <Device::hibernateAll()>:
c000bfbe:	53                   	push   ebx
c000bfbf:	83 ec 14             	sub    esp,0x14
c000bfc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bfc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfc8:	53                   	push   ebx
c000bfc9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bfcc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bfd2:	83 c4 10             	add    esp,0x10
c000bfd5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bfd8:	74 0f                	je     c000bfe9 <Device::hibernateAll()+0x2b>
c000bfda:	83 ec 0c             	sub    esp,0xc
c000bfdd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe0:	e8 d9 ff ff ff       	call   c000bfbe <Device::hibernateAll()>
c000bfe5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bfe7:	eb e9                	jmp    c000bfd2 <Device::hibernateAll()+0x14>
c000bfe9:	83 c4 08             	add    esp,0x8
c000bfec:	5b                   	pop    ebx
c000bfed:	c3                   	ret    

c000bfee <Device::wakeAll()>:
c000bfee:	53                   	push   ebx
c000bfef:	83 ec 14             	sub    esp,0x14
c000bff2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bff6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bff8:	53                   	push   ebx
c000bff9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bffc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c002:	83 c4 10             	add    esp,0x10
c000c005:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c008:	74 0f                	je     c000c019 <Device::wakeAll()+0x2b>
c000c00a:	83 ec 0c             	sub    esp,0xc
c000c00d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c010:	e8 d9 ff ff ff       	call   c000bfee <Device::wakeAll()>
c000c015:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c017:	eb e9                	jmp    c000c002 <Device::wakeAll()+0x14>
c000c019:	83 c4 08             	add    esp,0x8
c000c01c:	5b                   	pop    ebx
c000c01d:	c3                   	ret    

c000c01e <Device::detectAll()>:
c000c01e:	53                   	push   ebx
c000c01f:	83 ec 14             	sub    esp,0x14
c000c022:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c026:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c028:	53                   	push   ebx
c000c029:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c02c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c032:	83 c4 10             	add    esp,0x10
c000c035:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c038:	74 0f                	je     c000c049 <Device::detectAll()+0x2b>
c000c03a:	83 ec 0c             	sub    esp,0xc
c000c03d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c040:	e8 d9 ff ff ff       	call   c000c01e <Device::detectAll()>
c000c045:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c047:	eb e9                	jmp    c000c032 <Device::detectAll()+0x14>
c000c049:	83 c4 08             	add    esp,0x8
c000c04c:	5b                   	pop    ebx
c000c04d:	c3                   	ret    

c000c04e <Device::disableLegacyAll()>:
c000c04e:	c3                   	ret    
c000c04f:	90                   	nop

c000c050 <Device::loadDriversForAll()>:
c000c050:	c3                   	ret    
c000c051:	90                   	nop

c000c052 <Device::closeAll()>:
c000c052:	53                   	push   ebx
c000c053:	83 ec 08             	sub    esp,0x8
c000c056:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c05a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c05c:	6a 00                	push   0x0
c000c05e:	6a 00                	push   0x0
c000c060:	6a 00                	push   0x0
c000c062:	53                   	push   ebx
c000c063:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c066:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c06c:	83 c4 10             	add    esp,0x10
c000c06f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c072:	74 0f                	je     c000c083 <Device::closeAll()+0x31>
c000c074:	83 ec 0c             	sub    esp,0xc
c000c077:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c07a:	e8 d3 ff ff ff       	call   c000c052 <Device::closeAll()>
c000c07f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c081:	eb e9                	jmp    c000c06c <Device::closeAll()+0x1a>
c000c083:	83 c4 08             	add    esp,0x8
c000c086:	5b                   	pop    ebx
c000c087:	c3                   	ret    

c000c088 <Device::powerSavingAll(PowerSavingLevel)>:
c000c088:	56                   	push   esi
c000c089:	53                   	push   ebx
c000c08a:	83 ec 0c             	sub    esp,0xc
c000c08d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c091:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c095:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c097:	56                   	push   esi
c000c098:	53                   	push   ebx
c000c099:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c09c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0a2:	83 c4 10             	add    esp,0x10
c000c0a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0a8:	74 0f                	je     c000c0b9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c0aa:	52                   	push   edx
c000c0ab:	52                   	push   edx
c000c0ac:	56                   	push   esi
c000c0ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0b0:	e8 d3 ff ff ff       	call   c000c088 <Device::powerSavingAll(PowerSavingLevel)>
c000c0b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0b7:	eb e9                	jmp    c000c0a2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c0b9:	58                   	pop    eax
c000c0ba:	5b                   	pop    ebx
c000c0bb:	5e                   	pop    esi
c000c0bc:	c3                   	ret    
c000c0bd:	90                   	nop

c000c0be <Device::setName(char const*)>:
c000c0be:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c0c6:	e9 55 45 ff ff       	jmp    c0000620 <strcpy>
c000c0cb:	90                   	nop

c000c0cc <Device::Device(char const*)>:
c000c0cc:	83 ec 1c             	sub    esp,0x1c
c000c0cf:	ba 30 e0 01 c0       	mov    edx,0xc001e030
c000c0d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0d8:	89 10                	mov    DWORD PTR [eax],edx
c000c0da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0de:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c0e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0ec:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c0f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0fa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c108:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c112:	83 ec 08             	sub    esp,0x8
c000c115:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c119:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c11d:	e8 9c ff ff ff       	call   c000c0be <Device::setName(char const*)>
c000c122:	83 c4 10             	add    esp,0x10
c000c125:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c12d:	83 ec 0c             	sub    esp,0xc
c000c130:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c134:	e8 24 bd ff ff       	call   c0007e5d <malloc>
c000c139:	83 c4 10             	add    esp,0x10
c000c13c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c142:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c149:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c14d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c157:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c15d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c167:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c16d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c174:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c178:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c17f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c183:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c18a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c18e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c19c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c1a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1aa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c1b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1b8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c1c2:	90                   	nop
c000c1c3:	83 c4 1c             	add    esp,0x1c
c000c1c6:	c3                   	ret    
c000c1c7:	90                   	nop

c000c1c8 <Device::getName()>:
c000c1c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c1cc:	05 d0 00 00 00       	add    eax,0xd0
c000c1d1:	c3                   	ret    

c000c1d2 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c1d2:	83 ec 0c             	sub    esp,0xc
c000c1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1d9:	83 ec 08             	sub    esp,0x8
c000c1dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1e0:	50                   	push   eax
c000c1e1:	e8 e6 fe ff ff       	call   c000c0cc <Device::Device(char const*)>
c000c1e6:	83 c4 10             	add    esp,0x10
c000c1e9:	ba 5c e0 01 c0       	mov    edx,0xc001e05c
c000c1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f2:	89 10                	mov    DWORD PTR [eax],edx
c000c1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000c202:	90                   	nop
c000c203:	83 c4 0c             	add    esp,0xc
c000c206:	c3                   	ret    
c000c207:	90                   	nop

c000c208 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c208:	57                   	push   edi
c000c209:	56                   	push   esi
c000c20a:	53                   	push   ebx
c000c20b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c20f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c213:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c217:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c21d:	75 0c                	jne    c000c22b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c21f:	52                   	push   edx
c000c220:	52                   	push   edx
c000c221:	53                   	push   ebx
c000c222:	56                   	push   esi
c000c223:	e8 8a 04 01 00       	call   c001c6b2 <LinkedList<Device>::addElement(Device*)>
c000c228:	83 c4 10             	add    esp,0x10
c000c22b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c231:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c234:	74 12                	je     c000c248 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c236:	50                   	push   eax
c000c237:	57                   	push   edi
c000c238:	56                   	push   esi
c000c239:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c23c:	e8 c7 ff ff ff       	call   c000c208 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c241:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c243:	83 c4 10             	add    esp,0x10
c000c246:	eb e9                	jmp    c000c231 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c248:	5b                   	pop    ebx
c000c249:	5e                   	pop    esi
c000c24a:	5f                   	pop    edi
c000c24b:	c3                   	ret    

c000c24c <getDevicesOfType(DeviceType)>:
c000c24c:	53                   	push   ebx
c000c24d:	83 ec 14             	sub    esp,0x14
c000c250:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c254:	53                   	push   ebx
c000c255:	e8 34 05 01 00       	call   c001c78e <LinkedList<Device>::LinkedList()>
c000c25a:	83 c4 0c             	add    esp,0xc
c000c25d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c261:	53                   	push   ebx
c000c262:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c000c268:	e8 9b ff ff ff       	call   c000c208 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c26d:	89 d8                	mov    eax,ebx
c000c26f:	83 c4 18             	add    esp,0x18
c000c272:	5b                   	pop    ebx
c000c273:	c2 04 00             	ret    0x4
c000c276:	66 90                	xchg   ax,ax

c000c278 <HardDiskController::HardDiskController(char const*)>:
c000c278:	83 ec 0c             	sub    esp,0xc
c000c27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27f:	83 ec 08             	sub    esp,0x8
c000c282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c286:	50                   	push   eax
c000c287:	e8 40 fe ff ff       	call   c000c0cc <Device::Device(char const*)>
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	ba 88 e0 01 c0       	mov    edx,0xc001e088
c000c294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c298:	89 10                	mov    DWORD PTR [eax],edx
c000c29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c29e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c2a8:	90                   	nop
c000c2a9:	83 c4 0c             	add    esp,0xc
c000c2ac:	c3                   	ret    
c000c2ad:	90                   	nop
c000c2ae:	66 90                	xchg   ax,ax

c000c2b0 <HardDiskController::~HardDiskController()>:
c000c2b0:	83 ec 0c             	sub    esp,0xc
c000c2b3:	ba 88 e0 01 c0       	mov    edx,0xc001e088
c000c2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2bc:	89 10                	mov    DWORD PTR [eax],edx
c000c2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2c2:	83 ec 0c             	sub    esp,0xc
c000c2c5:	50                   	push   eax
c000c2c6:	e8 6b fb ff ff       	call   c000be36 <Device::~Device()>
c000c2cb:	83 c4 10             	add    esp,0x10
c000c2ce:	90                   	nop
c000c2cf:	83 c4 0c             	add    esp,0xc
c000c2d2:	c3                   	ret    
c000c2d3:	90                   	nop

c000c2d4 <HardDiskController::~HardDiskController()>:
c000c2d4:	83 ec 0c             	sub    esp,0xc
c000c2d7:	83 ec 0c             	sub    esp,0xc
c000c2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2de:	e8 cd ff ff ff       	call   c000c2b0 <HardDiskController::~HardDiskController()>
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	83 ec 08             	sub    esp,0x8
c000c2e9:	68 58 01 00 00       	push   0x158
c000c2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2f2:	e8 07 e7 ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	83 c4 0c             	add    esp,0xc
c000c2fd:	c3                   	ret    

c000c2fe <PhysicalDisk::eject()>:
c000c2fe:	83 c8 ff             	or     eax,0xffffffff
c000c301:	c3                   	ret    

c000c302 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c302:	83 ec 0c             	sub    esp,0xc
c000c305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c309:	83 ec 08             	sub    esp,0x8
c000c30c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c310:	50                   	push   eax
c000c311:	e8 b6 fd ff ff       	call   c000c0cc <Device::Device(char const*)>
c000c316:	83 c4 10             	add    esp,0x10
c000c319:	ba b4 e0 01 c0       	mov    edx,0xc001e0b4
c000c31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c322:	89 10                	mov    DWORD PTR [eax],edx
c000c324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c328:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c333:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c33e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c350:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c35a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c364:	90                   	nop
c000c365:	83 c4 0c             	add    esp,0xc
c000c368:	c3                   	ret    
c000c369:	90                   	nop

c000c36a <PhysicalDisk::startCache()>:
c000c36a:	56                   	push   esi
c000c36b:	53                   	push   ebx
c000c36c:	83 ec 10             	sub    esp,0x10
c000c36f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c373:	6a 44                	push   0x44
c000c375:	e8 e3 ba ff ff       	call   c0007e5d <malloc>
c000c37a:	89 c6                	mov    esi,eax
c000c37c:	58                   	pop    eax
c000c37d:	5a                   	pop    edx
c000c37e:	53                   	push   ebx
c000c37f:	56                   	push   esi
c000c380:	e8 ab 15 00 00       	call   c000d930 <VCache::VCache(PhysicalDisk*)>
c000c385:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c38b:	83 c4 14             	add    esp,0x14
c000c38e:	5b                   	pop    ebx
c000c38f:	5e                   	pop    esi
c000c390:	c3                   	ret    
c000c391:	90                   	nop

c000c392 <PhysicalDisk::~PhysicalDisk()>:
c000c392:	83 ec 0c             	sub    esp,0xc
c000c395:	ba b4 e0 01 c0       	mov    edx,0xc001e0b4
c000c39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c39e:	89 10                	mov    DWORD PTR [eax],edx
c000c3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	50                   	push   eax
c000c3a8:	e8 89 fa ff ff       	call   c000be36 <Device::~Device()>
c000c3ad:	83 c4 10             	add    esp,0x10
c000c3b0:	90                   	nop
c000c3b1:	83 c4 0c             	add    esp,0xc
c000c3b4:	c3                   	ret    
c000c3b5:	90                   	nop

c000c3b6 <PhysicalDisk::~PhysicalDisk()>:
c000c3b6:	83 ec 0c             	sub    esp,0xc
c000c3b9:	83 ec 0c             	sub    esp,0xc
c000c3bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c0:	e8 cd ff ff ff       	call   c000c392 <PhysicalDisk::~PhysicalDisk()>
c000c3c5:	83 c4 10             	add    esp,0x10
c000c3c8:	83 ec 08             	sub    esp,0x8
c000c3cb:	68 6c 01 00 00       	push   0x16c
c000c3d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d4:	e8 25 e6 ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000c3d9:	83 c4 10             	add    esp,0x10
c000c3dc:	83 c4 0c             	add    esp,0xc
c000c3df:	c3                   	ret    

c000c3e0 <int_handler>:
c000c3e0:	55                   	push   ebp
c000c3e1:	57                   	push   edi
c000c3e2:	56                   	push   esi
c000c3e3:	53                   	push   ebx
c000c3e4:	83 ec 0c             	sub    esp,0xc
c000c3e7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c3eb:	80 3d 18 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023418,0x0
c000c3f2:	74 0b                	je     c000c3ff <int_handler+0x1f>
c000c3f4:	fa                   	cli    
c000c3f5:	f4                   	hlt    
c000c3f6:	80 3d 18 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023418,0x0
c000c3fd:	75 f5                	jne    c000c3f4 <int_handler+0x14>
c000c3ff:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c402:	8d 46 e0             	lea    eax,[esi-0x20]
c000c405:	83 f8 17             	cmp    eax,0x17
c000c408:	76 3e                	jbe    c000c448 <int_handler+0x68>
c000c40a:	c1 e6 04             	shl    esi,0x4
c000c40d:	31 db                	xor    ebx,ebx
c000c40f:	8d ae a0 1a 02 c0    	lea    ebp,[esi-0x3ffde560]
c000c415:	81 c6 a0 0a 02 c0    	add    esi,0xc0020aa0
c000c41b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c41f:	85 c0                	test   eax,eax
c000c421:	74 13                	je     c000c436 <int_handler+0x56>
c000c423:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c426:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c42a:	74 2a                	je     c000c456 <int_handler+0x76>
c000c42c:	83 ec 08             	sub    esp,0x8
c000c42f:	52                   	push   edx
c000c430:	57                   	push   edi
c000c431:	ff d0                	call   eax
c000c433:	83 c4 10             	add    esp,0x10
c000c436:	43                   	inc    ebx
c000c437:	83 fb 04             	cmp    ebx,0x4
c000c43a:	75 df                	jne    c000c41b <int_handler+0x3b>
c000c43c:	83 c4 0c             	add    esp,0xc
c000c43f:	31 c0                	xor    eax,eax
c000c441:	5b                   	pop    ebx
c000c442:	31 d2                	xor    edx,edx
c000c444:	5e                   	pop    esi
c000c445:	5f                   	pop    edi
c000c446:	5d                   	pop    ebp
c000c447:	c3                   	ret    
c000c448:	83 ec 0c             	sub    esp,0xc
c000c44b:	50                   	push   eax
c000c44c:	e8 ba 95 00 00       	call   c0015a0b <HalEndOfInterrupt(int)>
c000c451:	83 c4 10             	add    esp,0x10
c000c454:	eb b4                	jmp    c000c40a <int_handler+0x2a>
c000c456:	83 ec 08             	sub    esp,0x8
c000c459:	52                   	push   edx
c000c45a:	57                   	push   edi
c000c45b:	ff d0                	call   eax
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	83 c4 0c             	add    esp,0xc
c000c463:	5b                   	pop    ebx
c000c464:	5e                   	pop    esi
c000c465:	5f                   	pop    edi
c000c466:	5d                   	pop    ebp
c000c467:	c3                   	ret    

c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c468:	56                   	push   esi
c000c469:	31 c0                	xor    eax,eax
c000c46b:	53                   	push   ebx
c000c46c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c470:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c474:	89 ca                	mov    edx,ecx
c000c476:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c47a:	c1 e2 04             	shl    edx,0x4
c000c47d:	83 bc 82 a0 1a 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde560],0x0
c000c485:	74 15                	je     c000c49c <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c487:	40                   	inc    eax
c000c488:	83 f8 04             	cmp    eax,0x4
c000c48b:	75 f0                	jne    c000c47d <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c48d:	c7 44 24 0c e4 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e0e4
c000c495:	5b                   	pop    ebx
c000c496:	5e                   	pop    esi
c000c497:	e9 27 42 00 00       	jmp    c00106c3 <KePanic(char const*)>
c000c49c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c49f:	89 1c 85 a0 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde560],ebx
c000c4a6:	89 34 85 a0 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf560],esi
c000c4ad:	5b                   	pop    ebx
c000c4ae:	5e                   	pop    esi
c000c4af:	c3                   	ret    

c000c4b0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c4b0:	57                   	push   edi
c000c4b1:	8b 15 98 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020998
c000c4b7:	56                   	push   esi
c000c4b8:	53                   	push   ebx
c000c4b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c4bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4c1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c4c8:	74 5b                	je     c000c525 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c4ca:	89 c7                	mov    edi,eax
c000c4cc:	84 c0                	test   al,al
c000c4ce:	74 24                	je     c000c4f4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c4d0:	83 fe 0f             	cmp    esi,0xf
c000c4d3:	0f 8f d9 00 00 00    	jg     c000c5b2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c4d9:	8a 86 a0 f7 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0860]
c000c4df:	25 ff 00 00 00       	and    eax,0xff
c000c4e4:	66 8b bc 00 40 32 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdcdc0]
c000c4ec:	89 c6                	mov    esi,eax
c000c4ee:	66 d1 ef             	shr    di,1
c000c4f1:	83 e7 01             	and    edi,0x1
c000c4f4:	83 ec 08             	sub    esp,0x8
c000c4f7:	a1 40 48 02 c0       	mov    eax,ds:0xc0024840
c000c4fc:	31 db                	xor    ebx,ebx
c000c4fe:	50                   	push   eax
c000c4ff:	68 f1 e0 01 c0       	push   0xc001e0f1
c000c504:	e8 eb e5 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000c509:	83 c4 10             	add    esp,0x10
c000c50c:	a1 40 48 02 c0       	mov    eax,ds:0xc0024840
c000c511:	85 c0                	test   eax,eax
c000c513:	7f 51                	jg     c000c566 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c515:	83 ec 0c             	sub    esp,0xc
c000c518:	68 08 e1 01 c0       	push   0xc001e108
c000c51d:	e8 a1 41 00 00       	call   c00106c3 <KePanic(char const*)>
c000c522:	83 c4 10             	add    esp,0x10
c000c525:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c528:	31 d2                	xor    edx,edx
c000c52a:	89 c8                	mov    eax,ecx
c000c52c:	c1 e0 04             	shl    eax,0x4
c000c52f:	8b 9c 90 a0 1a 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde560]
c000c536:	85 db                	test   ebx,ebx
c000c538:	0f 84 8b 00 00 00    	je     c000c5c9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c53e:	42                   	inc    edx
c000c53f:	83 fa 04             	cmp    edx,0x4
c000c542:	75 eb                	jne    c000c52f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c544:	83 ec 0c             	sub    esp,0xc
c000c547:	68 5c e1 01 c0       	push   0xc001e15c
c000c54c:	e8 72 41 00 00       	call   c00106c3 <KePanic(char const*)>
c000c551:	83 c4 10             	add    esp,0x10
c000c554:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c559:	5b                   	pop    ebx
c000c55a:	5e                   	pop    esi
c000c55b:	5f                   	pop    edi
c000c55c:	c3                   	ret    
c000c55d:	43                   	inc    ebx
c000c55e:	39 1d 40 48 02 c0    	cmp    DWORD PTR ds:0xc0024840,ebx
c000c564:	7e af                	jle    c000c515 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c566:	83 ec 08             	sub    esp,0x8
c000c569:	8b 04 9d 60 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb7a0]
c000c570:	56                   	push   esi
c000c571:	50                   	push   eax
c000c572:	e8 63 f1 00 00       	call   c001b6da <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c577:	83 c4 10             	add    esp,0x10
c000c57a:	84 c0                	test   al,al
c000c57c:	74 df                	je     c000c55d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c57e:	81 e7 ff 00 00 00    	and    edi,0xff
c000c584:	50                   	push   eax
c000c585:	8d 46 20             	lea    eax,[esi+0x20]
c000c588:	57                   	push   edi
c000c589:	25 ff 00 00 00       	and    eax,0xff
c000c58e:	6a 00                	push   0x0
c000c590:	50                   	push   eax
c000c591:	89 f0                	mov    eax,esi
c000c593:	6a 00                	push   0x0
c000c595:	25 ff 00 00 00       	and    eax,0xff
c000c59a:	6a 00                	push   0x0
c000c59c:	50                   	push   eax
c000c59d:	8b 04 9d 60 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb7a0]
c000c5a4:	50                   	push   eax
c000c5a5:	e8 aa f2 00 00       	call   c001b854 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c5aa:	83 c4 20             	add    esp,0x20
c000c5ad:	e9 73 ff ff ff       	jmp    c000c525 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c5b2:	83 ec 0c             	sub    esp,0xc
c000c5b5:	31 ff                	xor    edi,edi
c000c5b7:	68 24 e1 01 c0       	push   0xc001e124
c000c5bc:	e8 02 41 00 00       	call   c00106c3 <KePanic(char const*)>
c000c5c1:	83 c4 10             	add    esp,0x10
c000c5c4:	e9 2b ff ff ff       	jmp    c000c4f4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c5c9:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c5cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c5d0:	89 14 85 a0 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde560],edx
c000c5d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c5db:	5b                   	pop    ebx
c000c5dc:	89 14 85 a0 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf560],edx
c000c5e3:	89 f0                	mov    eax,esi
c000c5e5:	5e                   	pop    esi
c000c5e6:	5f                   	pop    edi
c000c5e7:	c3                   	ret    

c000c5e8 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c5f0:	c1 e0 04             	shl    eax,0x4
c000c5f3:	8d 50 10             	lea    edx,[eax+0x10]
c000c5f6:	39 88 a0 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde560],ecx
c000c5fc:	74 08                	je     c000c606 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c5fe:	83 c0 04             	add    eax,0x4
c000c601:	39 d0                	cmp    eax,edx
c000c603:	75 f1                	jne    c000c5f6 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c605:	c3                   	ret    
c000c606:	c7 80 a0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde560],0x0
c000c610:	c7 80 a0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf560],0x0
c000c61a:	eb e2                	jmp    c000c5fe <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c61c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c61c:	53                   	push   ebx
c000c61d:	83 ec 08             	sub    esp,0x8
c000c620:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c624:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c629:	74 0e                	je     c000c639 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c62b:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000c630:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c637:	75 37                	jne    c000c670 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c63d:	83 c0 20             	add    eax,0x20
c000c640:	c1 e0 04             	shl    eax,0x4
c000c643:	8d 50 10             	lea    edx,[eax+0x10]
c000c646:	39 98 a0 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde560],ebx
c000c64c:	74 0c                	je     c000c65a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c64e:	83 c0 04             	add    eax,0x4
c000c651:	39 d0                	cmp    eax,edx
c000c653:	75 f1                	jne    c000c646 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c655:	83 c4 08             	add    esp,0x8
c000c658:	5b                   	pop    ebx
c000c659:	c3                   	ret    
c000c65a:	c7 80 a0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde560],0x0
c000c664:	c7 80 a0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf560],0x0
c000c66e:	eb de                	jmp    c000c64e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c670:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c675:	7f 12                	jg     c000c689 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c677:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c67b:	31 c0                	xor    eax,eax
c000c67d:	8a 81 a0 f7 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0860]
c000c683:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c687:	eb b0                	jmp    c000c639 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c689:	83 ec 0c             	sub    esp,0xc
c000c68c:	68 15 e1 01 c0       	push   0xc001e115
c000c691:	e8 2d 40 00 00       	call   c00106c3 <KePanic(char const*)>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	eb 9e                	jmp    c000c639 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c69b <setupINTS()>:
c000c69b:	31 c0                	xor    eax,eax
c000c69d:	c7 80 a0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde560],0x0
c000c6a7:	c7 80 a0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf560],0x0
c000c6b1:	c7 80 a4 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde55c],0x0
c000c6bb:	c7 80 a4 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf55c],0x0
c000c6c5:	c7 80 a8 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde558],0x0
c000c6cf:	c7 80 a8 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf558],0x0
c000c6d9:	c7 80 ac 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde554],0x0
c000c6e3:	c7 80 ac 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf554],0x0
c000c6ed:	83 c0 10             	add    eax,0x10
c000c6f0:	3d 00 10 00 00       	cmp    eax,0x1000
c000c6f5:	75 a6                	jne    c000c69d <setupINTS()+0x2>
c000c6f7:	c3                   	ret    

c000c6f8 <convertLegacyIRQNumber(int)>:
c000c6f8:	83 ec 0c             	sub    esp,0xc
c000c6fb:	8b 15 98 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020998
c000c701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c705:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c70c:	74 0f                	je     c000c71d <convertLegacyIRQNumber(int)+0x25>
c000c70e:	83 f8 0f             	cmp    eax,0xf
c000c711:	7f 0e                	jg     c000c721 <convertLegacyIRQNumber(int)+0x29>
c000c713:	31 c9                	xor    ecx,ecx
c000c715:	8a 88 a0 f7 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0860]
c000c71b:	89 c8                	mov    eax,ecx
c000c71d:	83 c4 0c             	add    esp,0xc
c000c720:	c3                   	ret    
c000c721:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c725:	83 ec 0c             	sub    esp,0xc
c000c728:	68 24 e1 01 c0       	push   0xc001e124
c000c72d:	e8 91 3f 00 00       	call   c00106c3 <KePanic(char const*)>
c000c732:	83 c4 10             	add    esp,0x10
c000c735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c739:	83 c4 0c             	add    esp,0xc
c000c73c:	c3                   	ret    
c000c73d:	90                   	nop

c000c73e <startGUI(void*)>:
c000c73e:	55                   	push   ebp
c000c73f:	89 e5                	mov    ebp,esp
c000c741:	53                   	push   ebx
c000c742:	83 ec 04             	sub    esp,0x4
c000c745:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000c74a:	48                   	dec    eax
c000c74b:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c000c750:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000c755:	85 c0                	test   eax,eax
c000c757:	75 01                	jne    c000c75a <startGUI(void*)+0x1c>
c000c759:	fb                   	sti    
c000c75a:	8b 1d 98 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020998
c000c760:	83 ec 08             	sub    esp,0x8
c000c763:	6a 01                	push   0x1
c000c765:	68 81 e1 01 c0       	push   0xc001e181
c000c76a:	e8 bb 67 00 00       	call   c0012f2a <Thr::loadDLL(char const*, bool)>
c000c76f:	83 c4 10             	add    esp,0x10
c000c772:	83 ec 08             	sub    esp,0x8
c000c775:	53                   	push   ebx
c000c776:	50                   	push   eax
c000c777:	e8 df 69 00 00       	call   c001315b <Thr::executeDLL(unsigned long, void*)>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	8b 1d 98 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020998
c000c785:	83 ec 08             	sub    esp,0x8
c000c788:	6a 01                	push   0x1
c000c78a:	68 9b e1 01 c0       	push   0xc001e19b
c000c78f:	e8 96 67 00 00       	call   c0012f2a <Thr::loadDLL(char const*, bool)>
c000c794:	83 c4 10             	add    esp,0x10
c000c797:	83 ec 08             	sub    esp,0x8
c000c79a:	53                   	push   ebx
c000c79b:	50                   	push   eax
c000c79c:	e8 ba 69 00 00       	call   c001315b <Thr::executeDLL(unsigned long, void*)>
c000c7a1:	83 c4 10             	add    esp,0x10
c000c7a4:	90                   	nop
c000c7a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c7a8:	c9                   	leave  
c000c7a9:	c3                   	ret    

c000c7aa <startGUIVESA(void*)>:
c000c7aa:	55                   	push   ebp
c000c7ab:	89 e5                	mov    ebp,esp
c000c7ad:	53                   	push   ebx
c000c7ae:	83 ec 04             	sub    esp,0x4
c000c7b1:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000c7b6:	48                   	dec    eax
c000c7b7:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c000c7bc:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000c7c1:	85 c0                	test   eax,eax
c000c7c3:	75 01                	jne    c000c7c6 <startGUIVESA(void*)+0x1c>
c000c7c5:	fb                   	sti    
c000c7c6:	8b 1d 98 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020998
c000c7cc:	83 ec 08             	sub    esp,0x8
c000c7cf:	6a 01                	push   0x1
c000c7d1:	68 b9 e1 01 c0       	push   0xc001e1b9
c000c7d6:	e8 4f 67 00 00       	call   c0012f2a <Thr::loadDLL(char const*, bool)>
c000c7db:	83 c4 10             	add    esp,0x10
c000c7de:	83 ec 08             	sub    esp,0x8
c000c7e1:	53                   	push   ebx
c000c7e2:	50                   	push   eax
c000c7e3:	e8 73 69 00 00       	call   c001315b <Thr::executeDLL(unsigned long, void*)>
c000c7e8:	83 c4 10             	add    esp,0x10
c000c7eb:	8b 1d 98 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020998
c000c7f1:	83 ec 08             	sub    esp,0x8
c000c7f4:	6a 01                	push   0x1
c000c7f6:	68 9b e1 01 c0       	push   0xc001e19b
c000c7fb:	e8 2a 67 00 00       	call   c0012f2a <Thr::loadDLL(char const*, bool)>
c000c800:	83 c4 10             	add    esp,0x10
c000c803:	83 ec 08             	sub    esp,0x8
c000c806:	53                   	push   ebx
c000c807:	50                   	push   eax
c000c808:	e8 4e 69 00 00       	call   c001315b <Thr::executeDLL(unsigned long, void*)>
c000c80d:	83 c4 10             	add    esp,0x10
c000c810:	90                   	nop
c000c811:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c814:	c9                   	leave  
c000c815:	c3                   	ret    

c000c816 <sendKeyToTerminal(unsigned char)>:
c000c816:	55                   	push   ebp
c000c817:	89 e5                	mov    ebp,esp
c000c819:	83 ec 28             	sub    esp,0x28
c000c81c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c81f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c822:	8b 15 e4 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209e4
c000c828:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c82b:	25 ff 00 00 00       	and    eax,0xff
c000c830:	83 ec 08             	sub    esp,0x8
c000c833:	50                   	push   eax
c000c834:	52                   	push   edx
c000c835:	e8 ac c8 ff ff       	call   c00090e6 <VgaText::receiveKey(unsigned char)>
c000c83a:	83 c4 10             	add    esp,0x10
c000c83d:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c841:	0f 85 8f 00 00 00    	jne    c000c8d6 <sendKeyToTerminal(unsigned char)+0xc0>
c000c847:	fa                   	cli    
c000c848:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000c84d:	40                   	inc    eax
c000c84e:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c000c853:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c000c858:	40                   	inc    eax
c000c859:	a3 44 3e 02 c0       	mov    ds:0xc0023e44,eax
c000c85e:	a1 a0 2a 02 c0       	mov    eax,ds:0xc0022aa0
c000c863:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c866:	c7 05 a0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022aa0,0x0
c000c870:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c874:	74 1f                	je     c000c895 <sendKeyToTerminal(unsigned char)+0x7f>
c000c876:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c879:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c87c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c87f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c882:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c885:	83 ec 0c             	sub    esp,0xc
c000c888:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c88b:	e8 50 75 00 00       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c000c890:	83 c4 10             	add    esp,0x10
c000c893:	eb db                	jmp    c000c870 <sendKeyToTerminal(unsigned char)+0x5a>
c000c895:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c000c89a:	48                   	dec    eax
c000c89b:	a3 44 3e 02 c0       	mov    ds:0xc0023e44,eax
c000c8a0:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c000c8a5:	85 c0                	test   eax,eax
c000c8a7:	75 18                	jne    c000c8c1 <sendKeyToTerminal(unsigned char)+0xab>
c000c8a9:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c000c8ae:	85 c0                	test   eax,eax
c000c8b0:	74 0f                	je     c000c8c1 <sendKeyToTerminal(unsigned char)+0xab>
c000c8b2:	c7 05 40 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e40,0x0
c000c8bc:	e8 5b 70 00 00       	call   c001391c <schedule()>
c000c8c1:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000c8c6:	48                   	dec    eax
c000c8c7:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c000c8cc:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000c8d1:	85 c0                	test   eax,eax
c000c8d3:	75 01                	jne    c000c8d6 <sendKeyToTerminal(unsigned char)+0xc0>
c000c8d5:	fb                   	sti    
c000c8d6:	90                   	nop
c000c8d7:	c9                   	leave  
c000c8d8:	c3                   	ret    

c000c8d9 <sendKeyboardToken(KeyboardToken)>:
c000c8d9:	55                   	push   ebp
c000c8da:	89 e5                	mov    ebp,esp
c000c8dc:	83 ec 18             	sub    esp,0x18
c000c8df:	e8 2f 3e 00 00       	call   c0010713 <Krnl::userIOReceived()>
c000c8e4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c8e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ea:	25 ff ff 00 00       	and    eax,0xffff
c000c8ef:	83 f2 01             	xor    edx,0x1
c000c8f2:	88 90 c0 2a 02 c0    	mov    BYTE PTR [eax-0x3ffdd540],dl
c000c8f8:	a1 a8 2a 02 c0       	mov    eax,ds:0xc0022aa8
c000c8fd:	85 c0                	test   eax,eax
c000c8ff:	74 24                	je     c000c925 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c901:	8b 0d a8 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022aa8
c000c907:	83 ec 04             	sub    esp,0x4
c000c90a:	68 c0 2a 02 c0       	push   0xc0022ac0
c000c90f:	83 ec 08             	sub    esp,0x8
c000c912:	89 e2                	mov    edx,esp
c000c914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c917:	89 02                	mov    DWORD PTR [edx],eax
c000c919:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c91c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c920:	ff d1                	call   ecx
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c929:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c92c:	a0 c8 2e 02 c0       	mov    al,ds:0xc0022ec8
c000c931:	38 c2                	cmp    dl,al
c000c933:	74 1e                	je     c000c953 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c935:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c938:	a2 c8 2e 02 c0       	mov    ds:0xc0022ec8,al
c000c93d:	a0 c8 2e 02 c0       	mov    al,ds:0xc0022ec8
c000c942:	25 ff 00 00 00       	and    eax,0xff
c000c947:	83 ec 0c             	sub    esp,0xc
c000c94a:	50                   	push   eax
c000c94b:	e8 e8 be ff ff       	call   c0008838 <setTerminalScrollLock(bool)>
c000c950:	83 c4 10             	add    esp,0x10
c000c953:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c956:	84 c0                	test   al,al
c000c958:	0f 84 ae 00 00 00    	je     c000ca0c <sendKeyboardToken(KeyboardToken)+0x133>
c000c95e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c961:	66 3d 10 03          	cmp    ax,0x310
c000c965:	75 06                	jne    c000c96d <sendKeyboardToken(KeyboardToken)+0x94>
c000c967:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c96d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c970:	66 3d 11 03          	cmp    ax,0x311
c000c974:	75 06                	jne    c000c97c <sendKeyboardToken(KeyboardToken)+0xa3>
c000c976:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c97c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c97f:	66 3d 12 03          	cmp    ax,0x312
c000c983:	75 06                	jne    c000c98b <sendKeyboardToken(KeyboardToken)+0xb2>
c000c985:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c98b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c98e:	66 3d 13 03          	cmp    ax,0x313
c000c992:	75 06                	jne    c000c99a <sendKeyboardToken(KeyboardToken)+0xc1>
c000c994:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c99a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c99d:	66 3d 14 03          	cmp    ax,0x314
c000c9a1:	75 06                	jne    c000c9a9 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c9a3:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c9a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ac:	66 3d 15 03          	cmp    ax,0x315
c000c9b0:	75 06                	jne    c000c9b8 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c9b2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c9b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9bb:	66 3d 16 03          	cmp    ax,0x316
c000c9bf:	75 06                	jne    c000c9c7 <sendKeyboardToken(KeyboardToken)+0xee>
c000c9c1:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c9c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ca:	66 3d 17 03          	cmp    ax,0x317
c000c9ce:	75 06                	jne    c000c9d6 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c9d0:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c9d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9d9:	66 3d 18 03          	cmp    ax,0x318
c000c9dd:	75 06                	jne    c000c9e5 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c9df:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c9e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9e8:	66 3d 19 03          	cmp    ax,0x319
c000c9ec:	75 06                	jne    c000c9f4 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c9ee:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c9f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9f7:	66 3d 1a 03          	cmp    ax,0x31a
c000c9fb:	0f 85 c9 00 00 00    	jne    c000caca <sendKeyboardToken(KeyboardToken)+0x1f1>
c000ca01:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000ca07:	e9 be 00 00 00       	jmp    c000caca <sendKeyboardToken(KeyboardToken)+0x1f1>
c000ca0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca0f:	66 3d 10 03          	cmp    ax,0x310
c000ca13:	75 0a                	jne    c000ca1f <sendKeyboardToken(KeyboardToken)+0x146>
c000ca15:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000ca1b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca22:	66 3d 11 03          	cmp    ax,0x311
c000ca26:	75 0a                	jne    c000ca32 <sendKeyboardToken(KeyboardToken)+0x159>
c000ca28:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000ca2e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca35:	66 3d 12 03          	cmp    ax,0x312
c000ca39:	75 0a                	jne    c000ca45 <sendKeyboardToken(KeyboardToken)+0x16c>
c000ca3b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000ca41:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca48:	66 3d 13 03          	cmp    ax,0x313
c000ca4c:	75 0a                	jne    c000ca58 <sendKeyboardToken(KeyboardToken)+0x17f>
c000ca4e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000ca54:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca5b:	66 3d 14 03          	cmp    ax,0x314
c000ca5f:	75 0a                	jne    c000ca6b <sendKeyboardToken(KeyboardToken)+0x192>
c000ca61:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000ca67:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca6e:	66 3d 15 03          	cmp    ax,0x315
c000ca72:	75 0a                	jne    c000ca7e <sendKeyboardToken(KeyboardToken)+0x1a5>
c000ca74:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ca7a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca81:	66 3d 16 03          	cmp    ax,0x316
c000ca85:	75 0a                	jne    c000ca91 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000ca87:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000ca8d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca94:	66 3d 17 03          	cmp    ax,0x317
c000ca98:	75 0a                	jne    c000caa4 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000ca9a:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000caa0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000caa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa7:	66 3d 18 03          	cmp    ax,0x318
c000caab:	75 0a                	jne    c000cab7 <sendKeyboardToken(KeyboardToken)+0x1de>
c000caad:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cab3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caba:	66 3d 19 03          	cmp    ax,0x319
c000cabe:	75 0a                	jne    c000caca <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cac0:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cac6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000caca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cacd:	66 3d 00 02          	cmp    ax,0x200
c000cad1:	75 2c                	jne    c000caff <sendKeyboardToken(KeyboardToken)+0x226>
c000cad3:	a0 c0 2e 02 c0       	mov    al,ds:0xc0022ec0
c000cad8:	83 f0 01             	xor    eax,0x1
c000cadb:	84 c0                	test   al,al
c000cadd:	74 20                	je     c000caff <sendKeyboardToken(KeyboardToken)+0x226>
c000cadf:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c000cae4:	6a 01                	push   0x1
c000cae6:	6a 00                	push   0x0
c000cae8:	68 3e c7 00 c0       	push   0xc000c73e
c000caed:	50                   	push   eax
c000caee:	e8 09 6c 00 00       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c000caf3:	83 c4 10             	add    esp,0x10
c000caf6:	c6 05 c0 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ec0,0x1
c000cafd:	eb 33                	jmp    c000cb32 <sendKeyboardToken(KeyboardToken)+0x259>
c000caff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb02:	66 3d 01 02          	cmp    ax,0x201
c000cb06:	75 2a                	jne    c000cb32 <sendKeyboardToken(KeyboardToken)+0x259>
c000cb08:	a0 c0 2e 02 c0       	mov    al,ds:0xc0022ec0
c000cb0d:	83 f0 01             	xor    eax,0x1
c000cb10:	84 c0                	test   al,al
c000cb12:	74 1e                	je     c000cb32 <sendKeyboardToken(KeyboardToken)+0x259>
c000cb14:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c000cb19:	6a 01                	push   0x1
c000cb1b:	6a 00                	push   0x0
c000cb1d:	68 aa c7 00 c0       	push   0xc000c7aa
c000cb22:	50                   	push   eax
c000cb23:	e8 d4 6b 00 00       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c000cb28:	83 c4 10             	add    esp,0x10
c000cb2b:	c6 05 c0 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ec0,0x1
c000cb32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb35:	66 3d 1d 03          	cmp    ax,0x31d
c000cb39:	75 06                	jne    c000cb41 <sendKeyboardToken(KeyboardToken)+0x268>
c000cb3b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cb41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb44:	66 3d 1c 03          	cmp    ax,0x31c
c000cb48:	75 06                	jne    c000cb50 <sendKeyboardToken(KeyboardToken)+0x277>
c000cb4a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cb50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb53:	66 3d 1b 03          	cmp    ax,0x31b
c000cb57:	75 06                	jne    c000cb5f <sendKeyboardToken(KeyboardToken)+0x286>
c000cb59:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cb5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb62:	66 3d 1e 03          	cmp    ax,0x31e
c000cb66:	75 06                	jne    c000cb6e <sendKeyboardToken(KeyboardToken)+0x295>
c000cb68:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cb6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb71:	66 3d 1f 03          	cmp    ax,0x31f
c000cb75:	75 06                	jne    c000cb7d <sendKeyboardToken(KeyboardToken)+0x2a4>
c000cb77:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cb7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb80:	66 3d 1a 03          	cmp    ax,0x31a
c000cb84:	75 06                	jne    c000cb8c <sendKeyboardToken(KeyboardToken)+0x2b3>
c000cb86:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cb8c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cb90:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb93:	83 f0 01             	xor    eax,0x1
c000cb96:	84 c0                	test   al,al
c000cb98:	74 7b                	je     c000cc15 <sendKeyboardToken(KeyboardToken)+0x33c>
c000cb9a:	a0 c1 2b 02 c0       	mov    al,ds:0xc0022bc1
c000cb9f:	84 c0                	test   al,al
c000cba1:	74 43                	je     c000cbe6 <sendKeyboardToken(KeyboardToken)+0x30d>
c000cba3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cba7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000cbab:	74 2d                	je     c000cbda <sendKeyboardToken(KeyboardToken)+0x301>
c000cbad:	8b 15 c4 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ec4
c000cbb3:	89 d0                	mov    eax,edx
c000cbb5:	c1 e0 02             	shl    eax,0x2
c000cbb8:	01 d0                	add    eax,edx
c000cbba:	01 c0                	add    eax,eax
c000cbbc:	a3 c4 2e 02 c0       	mov    ds:0xc0022ec4,eax
c000cbc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc4:	25 ff ff 00 00       	and    eax,0xffff
c000cbc9:	8d 50 d0             	lea    edx,[eax-0x30]
c000cbcc:	a1 c4 2e 02 c0       	mov    eax,ds:0xc0022ec4
c000cbd1:	01 d0                	add    eax,edx
c000cbd3:	a3 c4 2e 02 c0       	mov    ds:0xc0022ec4,eax
c000cbd8:	eb 71                	jmp    c000cc4b <sendKeyboardToken(KeyboardToken)+0x372>
c000cbda:	c7 05 c4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ec4,0x0
c000cbe4:	eb 65                	jmp    c000cc4b <sendKeyboardToken(KeyboardToken)+0x372>
c000cbe6:	a1 c4 2e 02 c0       	mov    eax,ds:0xc0022ec4
c000cbeb:	85 c0                	test   eax,eax
c000cbed:	74 1a                	je     c000cc09 <sendKeyboardToken(KeyboardToken)+0x330>
c000cbef:	a1 c4 2e 02 c0       	mov    eax,ds:0xc0022ec4
c000cbf4:	25 ff 00 00 00       	and    eax,0xff
c000cbf9:	83 ec 0c             	sub    esp,0xc
c000cbfc:	50                   	push   eax
c000cbfd:	e8 14 fc ff ff       	call   c000c816 <sendKeyToTerminal(unsigned char)>
c000cc02:	83 c4 10             	add    esp,0x10
c000cc05:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cc09:	c7 05 c4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ec4,0x0
c000cc13:	eb 36                	jmp    c000cc4b <sendKeyboardToken(KeyboardToken)+0x372>
c000cc15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc18:	66 3d 01 01          	cmp    ax,0x101
c000cc1c:	75 2d                	jne    c000cc4b <sendKeyboardToken(KeyboardToken)+0x372>
c000cc1e:	a1 c4 2e 02 c0       	mov    eax,ds:0xc0022ec4
c000cc23:	85 c0                	test   eax,eax
c000cc25:	74 1a                	je     c000cc41 <sendKeyboardToken(KeyboardToken)+0x368>
c000cc27:	a1 c4 2e 02 c0       	mov    eax,ds:0xc0022ec4
c000cc2c:	25 ff 00 00 00       	and    eax,0xff
c000cc31:	83 ec 0c             	sub    esp,0xc
c000cc34:	50                   	push   eax
c000cc35:	e8 dc fb ff ff       	call   c000c816 <sendKeyToTerminal(unsigned char)>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cc41:	c7 05 c4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ec4,0x0
c000cc4b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cc4e:	83 f0 01             	xor    eax,0x1
c000cc51:	84 c0                	test   al,al
c000cc53:	74 4e                	je     c000cca3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cc55:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc58:	83 f0 01             	xor    eax,0x1
c000cc5b:	84 c0                	test   al,al
c000cc5d:	74 44                	je     c000cca3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cc5f:	a0 c0 2b 02 c0       	mov    al,ds:0xc0022bc0
c000cc64:	83 f0 01             	xor    eax,0x1
c000cc67:	84 c0                	test   al,al
c000cc69:	74 38                	je     c000cca3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cc6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc6e:	66 83 f8 1f          	cmp    ax,0x1f
c000cc72:	76 09                	jbe    c000cc7d <sendKeyboardToken(KeyboardToken)+0x3a4>
c000cc74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc77:	66 83 f8 7e          	cmp    ax,0x7e
c000cc7b:	76 12                	jbe    c000cc8f <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cc7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc80:	66 83 f8 0a          	cmp    ax,0xa
c000cc84:	74 09                	je     c000cc8f <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cc86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc89:	66 83 f8 08          	cmp    ax,0x8
c000cc8d:	75 14                	jne    c000cca3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cc8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc92:	25 ff 00 00 00       	and    eax,0xff
c000cc97:	83 ec 0c             	sub    esp,0xc
c000cc9a:	50                   	push   eax
c000cc9b:	e8 76 fb ff ff       	call   c000c816 <sendKeyToTerminal(unsigned char)>
c000cca0:	83 c4 10             	add    esp,0x10
c000cca3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cca6:	83 f0 01             	xor    eax,0x1
c000cca9:	84 c0                	test   al,al
c000ccab:	74 51                	je     c000ccfe <sendKeyboardToken(KeyboardToken)+0x425>
c000ccad:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ccb0:	83 f0 01             	xor    eax,0x1
c000ccb3:	84 c0                	test   al,al
c000ccb5:	74 47                	je     c000ccfe <sendKeyboardToken(KeyboardToken)+0x425>
c000ccb7:	a0 c0 2b 02 c0       	mov    al,ds:0xc0022bc0
c000ccbc:	84 c0                	test   al,al
c000ccbe:	74 3e                	je     c000ccfe <sendKeyboardToken(KeyboardToken)+0x425>
c000ccc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccc3:	66 83 f8 3f          	cmp    ax,0x3f
c000ccc7:	76 35                	jbe    c000ccfe <sendKeyboardToken(KeyboardToken)+0x425>
c000ccc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cccc:	66 83 f8 7f          	cmp    ax,0x7f
c000ccd0:	77 2c                	ja     c000ccfe <sendKeyboardToken(KeyboardToken)+0x425>
c000ccd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccd5:	88 c2                	mov    dl,al
c000ccd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccda:	66 83 f8 5f          	cmp    ax,0x5f
c000ccde:	76 04                	jbe    c000cce4 <sendKeyboardToken(KeyboardToken)+0x40b>
c000cce0:	b0 20                	mov    al,0x20
c000cce2:	eb 02                	jmp    c000cce6 <sendKeyboardToken(KeyboardToken)+0x40d>
c000cce4:	b0 00                	mov    al,0x0
c000cce6:	29 c2                	sub    edx,eax
c000cce8:	88 d0                	mov    al,dl
c000ccea:	83 e8 40             	sub    eax,0x40
c000cced:	25 ff 00 00 00       	and    eax,0xff
c000ccf2:	83 ec 0c             	sub    esp,0xc
c000ccf5:	50                   	push   eax
c000ccf6:	e8 1b fb ff ff       	call   c000c816 <sendKeyToTerminal(unsigned char)>
c000ccfb:	83 c4 10             	add    esp,0x10
c000ccfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd01:	66 3d 00 03          	cmp    ax,0x300
c000cd05:	75 0f                	jne    c000cd16 <sendKeyboardToken(KeyboardToken)+0x43d>
c000cd07:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd0a:	83 f0 01             	xor    eax,0x1
c000cd0d:	84 c0                	test   al,al
c000cd0f:	74 05                	je     c000cd16 <sendKeyboardToken(KeyboardToken)+0x43d>
c000cd11:	e8 23 bb ff ff       	call   c0008839 <doTerminalCycle()>
c000cd16:	90                   	nop
c000cd17:	c9                   	leave  
c000cd18:	c3                   	ret    

c000cd19 <clearInternalKeybuffer(VgaText*)>:
c000cd19:	55                   	push   ebp
c000cd1a:	89 e5                	mov    ebp,esp
c000cd1c:	83 ec 08             	sub    esp,0x8
c000cd1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd22:	05 b2 00 00 00       	add    eax,0xb2
c000cd27:	83 ec 0c             	sub    esp,0xc
c000cd2a:	50                   	push   eax
c000cd2b:	e8 30 38 ff ff       	call   c0000560 <strlen>
c000cd30:	83 c4 10             	add    esp,0x10
c000cd33:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd36:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cd3c:	83 ec 04             	sub    esp,0x4
c000cd3f:	50                   	push   eax
c000cd40:	6a 00                	push   0x0
c000cd42:	52                   	push   edx
c000cd43:	e8 a8 37 ff ff       	call   c00004f0 <memset>
c000cd48:	83 c4 10             	add    esp,0x10
c000cd4b:	90                   	nop
c000cd4c:	c9                   	leave  
c000cd4d:	c3                   	ret    

c000cd4e <readKeyboard(VgaText*, char*, unsigned long)>:
c000cd4e:	55                   	push   ebp
c000cd4f:	89 e5                	mov    ebp,esp
c000cd51:	83 ec 18             	sub    esp,0x18
c000cd54:	a1 a8 2a 02 c0       	mov    eax,ds:0xc0022aa8
c000cd59:	85 c0                	test   eax,eax
c000cd5b:	74 2a                	je     c000cd87 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cd5d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cd63:	8b 0d a8 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022aa8
c000cd69:	83 ec 04             	sub    esp,0x4
c000cd6c:	68 c0 2a 02 c0       	push   0xc0022ac0
c000cd71:	83 ec 08             	sub    esp,0x8
c000cd74:	89 e2                	mov    edx,esp
c000cd76:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000cd79:	89 02                	mov    DWORD PTR [edx],eax
c000cd7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cd7e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cd82:	ff d1                	call   ecx
c000cd84:	83 c4 10             	add    esp,0x10
c000cd87:	fb                   	sti    
c000cd88:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cd8f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cd93:	0f 84 a1 00 00 00    	je     c000ce3a <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000cd99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd9c:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000cda2:	84 c0                	test   al,al
c000cda4:	75 28                	jne    c000cdce <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000cda6:	fa                   	cli    
c000cda7:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000cdac:	40                   	inc    eax
c000cdad:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c000cdb2:	e8 65 6b 00 00       	call   c001391c <schedule()>
c000cdb7:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000cdbc:	48                   	dec    eax
c000cdbd:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c000cdc2:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000cdc7:	85 c0                	test   eax,eax
c000cdc9:	75 ce                	jne    c000cd99 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cdcb:	fb                   	sti    
c000cdcc:	eb cb                	jmp    c000cd99 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cdce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cdd1:	8d 50 01             	lea    edx,[eax+0x1]
c000cdd4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cdd7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdda:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000cde0:	88 10                	mov    BYTE PTR [eax],dl
c000cde2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cde5:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000cdeb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cdee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdf1:	05 b2 00 00 00       	add    eax,0xb2
c000cdf6:	83 ec 0c             	sub    esp,0xc
c000cdf9:	50                   	push   eax
c000cdfa:	e8 61 37 ff ff       	call   c0000560 <strlen>
c000cdff:	83 c4 10             	add    esp,0x10
c000ce02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce05:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ce0b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ce0e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce11:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ce17:	83 ec 04             	sub    esp,0x4
c000ce1a:	50                   	push   eax
c000ce1b:	51                   	push   ecx
c000ce1c:	52                   	push   edx
c000ce1d:	e8 de 35 ff ff       	call   c0000400 <memmove>
c000ce22:	83 c4 10             	add    esp,0x10
c000ce25:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000ce28:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ce2b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000ce2f:	0f 85 5a ff ff ff    	jne    c000cd8f <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ce35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce38:	eb 03                	jmp    c000ce3d <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000ce3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce3d:	c9                   	leave  
c000ce3e:	c3                   	ret    
c000ce3f:	90                   	nop

c000ce40 <Keyboard::Keyboard(char const*)>:
c000ce40:	83 ec 0c             	sub    esp,0xc
c000ce43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce47:	83 ec 08             	sub    esp,0x8
c000ce4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4e:	50                   	push   eax
c000ce4f:	e8 78 f2 ff ff       	call   c000c0cc <Device::Device(char const*)>
c000ce54:	83 c4 10             	add    esp,0x10
c000ce57:	ba dc e1 01 c0       	mov    edx,0xc001e1dc
c000ce5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce60:	89 10                	mov    DWORD PTR [eax],edx
c000ce62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce66:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce70:	c6 05 a4 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022aa4,0x1
c000ce77:	90                   	nop
c000ce78:	83 c4 0c             	add    esp,0xc
c000ce7b:	c3                   	ret    

c000ce7c <Keyboard::~Keyboard()>:
c000ce7c:	83 ec 0c             	sub    esp,0xc
c000ce7f:	ba dc e1 01 c0       	mov    edx,0xc001e1dc
c000ce84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce88:	89 10                	mov    DWORD PTR [eax],edx
c000ce8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce8e:	83 ec 0c             	sub    esp,0xc
c000ce91:	50                   	push   eax
c000ce92:	e8 9f ef ff ff       	call   c000be36 <Device::~Device()>
c000ce97:	83 c4 10             	add    esp,0x10
c000ce9a:	90                   	nop
c000ce9b:	83 c4 0c             	add    esp,0xc
c000ce9e:	c3                   	ret    
c000ce9f:	90                   	nop

c000cea0 <Keyboard::~Keyboard()>:
c000cea0:	83 ec 0c             	sub    esp,0xc
c000cea3:	83 ec 0c             	sub    esp,0xc
c000cea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceaa:	e8 cd ff ff ff       	call   c000ce7c <Keyboard::~Keyboard()>
c000ceaf:	83 c4 10             	add    esp,0x10
c000ceb2:	83 ec 08             	sub    esp,0x8
c000ceb5:	68 5c 01 00 00       	push   0x15c
c000ceba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cebe:	e8 3b db ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000cec3:	83 c4 10             	add    esp,0x10
c000cec6:	83 c4 0c             	add    esp,0xc
c000cec9:	c3                   	ret    

c000ceca <LogicalDisk::close(int, int, void*)>:
c000ceca:	83 c8 ff             	or     eax,0xffffffff
c000cecd:	c3                   	ret    

c000cece <LogicalDisk::~LogicalDisk()>:
c000cece:	83 ec 0c             	sub    esp,0xc
c000ced1:	ba 54 e2 01 c0       	mov    edx,0xc001e254
c000ced6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceda:	89 10                	mov    DWORD PTR [eax],edx
c000cedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cee0:	83 ec 0c             	sub    esp,0xc
c000cee3:	50                   	push   eax
c000cee4:	e8 4d ef ff ff       	call   c000be36 <Device::~Device()>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	90                   	nop
c000ceed:	83 c4 0c             	add    esp,0xc
c000cef0:	c3                   	ret    
c000cef1:	90                   	nop

c000cef2 <LogicalDisk::~LogicalDisk()>:
c000cef2:	83 ec 0c             	sub    esp,0xc
c000cef5:	83 ec 0c             	sub    esp,0xc
c000cef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefc:	e8 cd ff ff ff       	call   c000cece <LogicalDisk::~LogicalDisk()>
c000cf01:	83 c4 10             	add    esp,0x10
c000cf04:	83 ec 08             	sub    esp,0x8
c000cf07:	68 74 01 00 00       	push   0x174
c000cf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf10:	e8 e9 da ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000cf15:	83 c4 10             	add    esp,0x10
c000cf18:	83 c4 0c             	add    esp,0xc
c000cf1b:	c3                   	ret    

c000cf1c <LogicalDisk::open(int, int, void*)>:
c000cf1c:	83 ec 18             	sub    esp,0x18
c000cf1f:	68 08 e2 01 c0       	push   0xc001e208
c000cf24:	e8 9a 37 00 00       	call   c00106c3 <KePanic(char const*)>
c000cf29:	83 c8 ff             	or     eax,0xffffffff
c000cf2c:	83 c4 1c             	add    esp,0x1c
c000cf2f:	c3                   	ret    

c000cf30 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cf30:	53                   	push   ebx
c000cf31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cf35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf3d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cf43:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cf49:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf4f:	77 10                	ja     c000cf61 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf51:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf57:	89 d3                	mov    ebx,edx
c000cf59:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf5f:	72 05                	jb     c000cf66 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf61:	83 c8 ff             	or     eax,0xffffffff
c000cf64:	89 c2                	mov    edx,eax
c000cf66:	5b                   	pop    ebx
c000cf67:	c3                   	ret    

c000cf68 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf68:	56                   	push   esi
c000cf69:	83 c8 ff             	or     eax,0xffffffff
c000cf6c:	53                   	push   ebx
c000cf6d:	89 c2                	mov    edx,eax
c000cf6f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf73:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf7b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf81:	77 27                	ja     c000cfaa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf83:	89 d8                	mov    eax,ebx
c000cf85:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf8b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf91:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf96:	89 c2                	mov    edx,eax
c000cf98:	73 10                	jae    c000cfaa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf9a:	89 c8                	mov    eax,ecx
c000cf9c:	89 da                	mov    edx,ebx
c000cf9e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cfa4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cfaa:	5b                   	pop    ebx
c000cfab:	5e                   	pop    esi
c000cfac:	c3                   	ret    
c000cfad:	90                   	nop

c000cfae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cfae:	83 ec 1c             	sub    esp,0x1c
c000cfb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cfc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000cfc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cfd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfd4:	83 ec 08             	sub    esp,0x8
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	50                   	push   eax
c000cfdc:	e8 eb f0 ff ff       	call   c000c0cc <Device::Device(char const*)>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	ba 54 e2 01 c0       	mov    edx,0xc001e254
c000cfe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfed:	89 10                	mov    DWORD PTR [eax],edx
c000cfef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cff3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cffe:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d009:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d013:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d017:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d01b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d01f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d025:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d02b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d032:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d036:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d03c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d046:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d04a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d054:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d05e:	90                   	nop
c000d05f:	83 c4 1c             	add    esp,0x1c
c000d062:	c3                   	ret    
c000d063:	90                   	nop

c000d064 <LogicalDisk::assignDriveLetter()>:
c000d064:	55                   	push   ebp
c000d065:	57                   	push   edi
c000d066:	56                   	push   esi
c000d067:	53                   	push   ebx
c000d068:	83 ec 14             	sub    esp,0x14
c000d06b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d06f:	8b 3d e0 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022ee0
c000d075:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d07b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d07f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000d085:	8b 3d e4 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022ee4
c000d08b:	3c 01                	cmp    al,0x1
c000d08d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000d091:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000d095:	19 c0                	sbb    eax,eax
c000d097:	83 e0 02             	and    eax,0x2
c000d09a:	83 c0 41             	add    eax,0x41
c000d09d:	0f be e8             	movsx  ebp,al
c000d0a0:	3c 43                	cmp    al,0x43
c000d0a2:	75 10                	jne    c000d0b4 <LogicalDisk::assignDriveLetter()+0x50>
c000d0a4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d0ab:	75 5d                	jne    c000d10a <LogicalDisk::assignDriveLetter()+0xa6>
c000d0ad:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000d0b2:	75 56                	jne    c000d10a <LogicalDisk::assignDriveLetter()+0xa6>
c000d0b4:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d0b7:	ba 01 00 00 00       	mov    edx,0x1
c000d0bc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000d0c0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d0c4:	d3 e2                	shl    edx,cl
c000d0c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d0ca:	89 d7                	mov    edi,edx
c000d0cc:	89 d6                	mov    esi,edx
c000d0ce:	c1 ff 1f             	sar    edi,0x1f
c000d0d1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000d0d5:	21 f9                	and    ecx,edi
c000d0d7:	09 d1                	or     ecx,edx
c000d0d9:	75 2f                	jne    c000d10a <LogicalDisk::assignDriveLetter()+0xa6>
c000d0db:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d0df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0e3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d0e9:	09 f2                	or     edx,esi
c000d0eb:	89 15 e0 2e 02 c0    	mov    DWORD PTR ds:0xc0022ee0,edx
c000d0f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d0f5:	09 fa                	or     edx,edi
c000d0f7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d0fb:	89 15 e4 2e 02 c0    	mov    DWORD PTR ds:0xc0022ee4,edx
c000d101:	89 1c bd 00 2f 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd100],ebx
c000d108:	eb 08                	jmp    c000d112 <LogicalDisk::assignDriveLetter()+0xae>
c000d10a:	45                   	inc    ebp
c000d10b:	40                   	inc    eax
c000d10c:	3c 5b                	cmp    al,0x5b
c000d10e:	75 90                	jne    c000d0a0 <LogicalDisk::assignDriveLetter()+0x3c>
c000d110:	31 c0                	xor    eax,eax
c000d112:	83 c4 14             	add    esp,0x14
c000d115:	5b                   	pop    ebx
c000d116:	5e                   	pop    esi
c000d117:	5f                   	pop    edi
c000d118:	5d                   	pop    ebp
c000d119:	c3                   	ret    

c000d11a <LogicalDisk::mount()>:
c000d11a:	56                   	push   esi
c000d11b:	53                   	push   ebx
c000d11c:	53                   	push   ebx
c000d11d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d121:	8b 1d 94 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a94
c000d127:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000d131:	85 db                	test   ebx,ebx
c000d133:	74 27                	je     c000d15c <LogicalDisk::mount()+0x42>
c000d135:	51                   	push   ecx
c000d136:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d13d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d13f:	83 e8 41             	sub    eax,0x41
c000d142:	50                   	push   eax
c000d143:	56                   	push   esi
c000d144:	53                   	push   ebx
c000d145:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d148:	83 c4 10             	add    esp,0x10
c000d14b:	84 c0                	test   al,al
c000d14d:	74 08                	je     c000d157 <LogicalDisk::mount()+0x3d>
c000d14f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000d155:	eb 07                	jmp    c000d15e <LogicalDisk::mount()+0x44>
c000d157:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d15a:	eb d5                	jmp    c000d131 <LogicalDisk::mount()+0x17>
c000d15c:	31 c0                	xor    eax,eax
c000d15e:	5a                   	pop    edx
c000d15f:	5b                   	pop    ebx
c000d160:	5e                   	pop    esi
c000d161:	c3                   	ret    

c000d162 <LogicalDisk::unmount()>:
c000d162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d166:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d170:	c3                   	ret    
c000d171:	90                   	nop

c000d172 <LogicalDisk::eject()>:
c000d172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d176:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d17c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d17e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d182:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d185:	90                   	nop

c000d186 <LogicalDisk::unassignDriveLetter()>:
c000d186:	57                   	push   edi
c000d187:	56                   	push   esi
c000d188:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d18c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d193:	84 c9                	test   cl,cl
c000d195:	75 0f                	jne    c000d1a6 <LogicalDisk::unassignDriveLetter()+0x20>
c000d197:	c7 44 24 0c 2c e2 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e22c
c000d19f:	5e                   	pop    esi
c000d1a0:	5f                   	pop    edi
c000d1a1:	e9 1d 35 00 00       	jmp    c00106c3 <KePanic(char const*)>
c000d1a6:	83 e9 41             	sub    ecx,0x41
c000d1a9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d1b0:	b8 01 00 00 00       	mov    eax,0x1
c000d1b5:	c7 04 8d 00 2f 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd100],0x0
c000d1c0:	d3 e0                	shl    eax,cl
c000d1c2:	89 c7                	mov    edi,eax
c000d1c4:	f7 d0                	not    eax
c000d1c6:	c1 ff 1f             	sar    edi,0x1f
c000d1c9:	21 05 e0 2e 02 c0    	and    DWORD PTR ds:0xc0022ee0,eax
c000d1cf:	89 fe                	mov    esi,edi
c000d1d1:	f7 d6                	not    esi
c000d1d3:	21 35 e4 2e 02 c0    	and    DWORD PTR ds:0xc0022ee4,esi
c000d1d9:	5e                   	pop    esi
c000d1da:	5f                   	pop    edi
c000d1db:	c3                   	ret    

c000d1dc <LogicalDisk::read(unsigned long long, int, void*)>:
c000d1dc:	57                   	push   edi
c000d1dd:	56                   	push   esi
c000d1de:	53                   	push   ebx
c000d1df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d1ef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1f5:	77 41                	ja     c000d238 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d1f7:	99                   	cdq    
c000d1f8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d1fe:	01 c8                	add    eax,ecx
c000d200:	11 da                	adc    edx,ebx
c000d202:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d208:	19 d7                	sbb    edi,edx
c000d20a:	72 33                	jb     c000d23f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d20c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d212:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d218:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d21c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d220:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d226:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d22c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d230:	5b                   	pop    ebx
c000d231:	5e                   	pop    esi
c000d232:	5f                   	pop    edi
c000d233:	e9 4e 0a 00 00       	jmp    c000dc86 <VCache::read(unsigned long long, int, void*)>
c000d238:	b8 05 00 00 00       	mov    eax,0x5
c000d23d:	eb 05                	jmp    c000d244 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d23f:	b8 07 00 00 00       	mov    eax,0x7
c000d244:	5b                   	pop    ebx
c000d245:	5e                   	pop    esi
c000d246:	5f                   	pop    edi
c000d247:	c3                   	ret    

c000d248 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d248:	57                   	push   edi
c000d249:	56                   	push   esi
c000d24a:	53                   	push   ebx
c000d24b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d24f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d253:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d257:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d25b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d261:	77 41                	ja     c000d2a4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d263:	99                   	cdq    
c000d264:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d26a:	01 c8                	add    eax,ecx
c000d26c:	11 da                	adc    edx,ebx
c000d26e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d274:	19 d7                	sbb    edi,edx
c000d276:	72 33                	jb     c000d2ab <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d278:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d27e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d284:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d288:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d28c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d292:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d298:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d29c:	5b                   	pop    ebx
c000d29d:	5e                   	pop    esi
c000d29e:	5f                   	pop    edi
c000d29f:	e9 cc 08 00 00       	jmp    c000db70 <VCache::write(unsigned long long, int, void*)>
c000d2a4:	b8 05 00 00 00       	mov    eax,0x5
c000d2a9:	eb 05                	jmp    c000d2b0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d2ab:	b8 07 00 00 00       	mov    eax,0x7
c000d2b0:	5b                   	pop    ebx
c000d2b1:	5e                   	pop    esi
c000d2b2:	5f                   	pop    edi
c000d2b3:	c3                   	ret    

c000d2b4 <Mouse::Mouse(char const*)>:
c000d2b4:	83 ec 0c             	sub    esp,0xc
c000d2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2bb:	83 ec 08             	sub    esp,0x8
c000d2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c2:	50                   	push   eax
c000d2c3:	e8 04 ee ff ff       	call   c000c0cc <Device::Device(char const*)>
c000d2c8:	83 c4 10             	add    esp,0x10
c000d2cb:	ba 80 e2 01 c0       	mov    edx,0xc001e280
c000d2d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2d4:	89 10                	mov    DWORD PTR [eax],edx
c000d2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2da:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d2e4:	90                   	nop
c000d2e5:	83 c4 0c             	add    esp,0xc
c000d2e8:	c3                   	ret    
c000d2e9:	90                   	nop
c000d2ea:	66 90                	xchg   ax,ax

c000d2ec <Mouse::~Mouse()>:
c000d2ec:	83 ec 0c             	sub    esp,0xc
c000d2ef:	ba 80 e2 01 c0       	mov    edx,0xc001e280
c000d2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f8:	89 10                	mov    DWORD PTR [eax],edx
c000d2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2fe:	83 ec 0c             	sub    esp,0xc
c000d301:	50                   	push   eax
c000d302:	e8 2f eb ff ff       	call   c000be36 <Device::~Device()>
c000d307:	83 c4 10             	add    esp,0x10
c000d30a:	90                   	nop
c000d30b:	83 c4 0c             	add    esp,0xc
c000d30e:	c3                   	ret    
c000d30f:	90                   	nop

c000d310 <Mouse::~Mouse()>:
c000d310:	83 ec 0c             	sub    esp,0xc
c000d313:	83 ec 0c             	sub    esp,0xc
c000d316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d31a:	e8 cd ff ff ff       	call   c000d2ec <Mouse::~Mouse()>
c000d31f:	83 c4 10             	add    esp,0x10
c000d322:	83 ec 08             	sub    esp,0x8
c000d325:	68 58 01 00 00       	push   0x158
c000d32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d32e:	e8 cb d6 ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000d333:	83 c4 10             	add    esp,0x10
c000d336:	83 c4 0c             	add    esp,0xc
c000d339:	c3                   	ret    

c000d33a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d33a:	55                   	push   ebp
c000d33b:	57                   	push   edi
c000d33c:	56                   	push   esi
c000d33d:	53                   	push   ebx
c000d33e:	81 ec 28 01 00 00    	sub    esp,0x128
c000d344:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d34b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d352:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d359:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d360:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d364:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d368:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d36f:	e8 54 ee ff ff       	call   c000c1c8 <Device::getName()>
c000d374:	5a                   	pop    edx
c000d375:	59                   	pop    ecx
c000d376:	50                   	push   eax
c000d377:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d37b:	55                   	push   ebp
c000d37c:	e8 9f 32 ff ff       	call   c0000620 <strcpy>
c000d381:	5b                   	pop    ebx
c000d382:	58                   	pop    eax
c000d383:	68 a4 e2 01 c0       	push   0xc001e2a4
c000d388:	55                   	push   ebp
c000d389:	e8 52 34 ff ff       	call   c00007e0 <strcat>
c000d38e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000d395:	e8 c3 aa ff ff       	call   c0007e5d <malloc>
c000d39a:	83 c4 0c             	add    esp,0xc
c000d39d:	89 c3                	mov    ebx,eax
c000d39f:	57                   	push   edi
c000d3a0:	56                   	push   esi
c000d3a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3a9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d3b0:	55                   	push   ebp
c000d3b1:	50                   	push   eax
c000d3b2:	e8 f7 fb ff ff       	call   c000cfae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d3b7:	83 c4 14             	add    esp,0x14
c000d3ba:	53                   	push   ebx
c000d3bb:	e8 a4 fc ff ff       	call   c000d064 <LogicalDisk::assignDriveLetter()>
c000d3c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3c3:	e8 52 fd ff ff       	call   c000d11a <LogicalDisk::mount()>
c000d3c8:	58                   	pop    eax
c000d3c9:	5a                   	pop    edx
c000d3ca:	53                   	push   ebx
c000d3cb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d3d2:	e8 5d eb ff ff       	call   c000bf34 <Device::addChild(Device*)>
c000d3d7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d3dd:	5b                   	pop    ebx
c000d3de:	5e                   	pop    esi
c000d3df:	5f                   	pop    edi
c000d3e0:	5d                   	pop    ebp
c000d3e1:	c3                   	ret    

c000d3e2 <createPartitionsForDisk(PhysicalDisk*)>:
c000d3e2:	55                   	push   ebp
c000d3e3:	57                   	push   edi
c000d3e4:	56                   	push   esi
c000d3e5:	53                   	push   ebx
c000d3e6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d3ec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d3f3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d3f9:	3d 00 02 00 00       	cmp    eax,0x200
c000d3fe:	74 27                	je     c000d427 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d400:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d406:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d40c:	83 ec 10             	sub    esp,0x10
c000d40f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d413:	99                   	cdq    
c000d414:	c1 e6 0a             	shl    esi,0xa
c000d417:	52                   	push   edx
c000d418:	89 fd                	mov    ebp,edi
c000d41a:	50                   	push   eax
c000d41b:	55                   	push   ebp
c000d41c:	56                   	push   esi
c000d41d:	e8 de ed 00 00       	call   c001c200 <__udivdi3>
c000d422:	e9 b1 00 00 00       	jmp    c000d4d8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d427:	83 ec 0c             	sub    esp,0xc
c000d42a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d42c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d430:	56                   	push   esi
c000d431:	6a 01                	push   0x1
c000d433:	6a 00                	push   0x0
c000d435:	6a 00                	push   0x0
c000d437:	53                   	push   ebx
c000d438:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d43b:	83 c4 20             	add    esp,0x20
c000d43e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d446:	75 0a                	jne    c000d452 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d448:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d450:	74 2c                	je     c000d47e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d452:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d458:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d45e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d464:	83 ec 10             	sub    esp,0x10
c000d467:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d46b:	89 f7                	mov    edi,esi
c000d46d:	c1 e0 0a             	shl    eax,0xa
c000d470:	c1 ff 1f             	sar    edi,0x1f
c000d473:	57                   	push   edi
c000d474:	56                   	push   esi
c000d475:	52                   	push   edx
c000d476:	50                   	push   eax
c000d477:	e8 84 ed 00 00       	call   c001c200 <__udivdi3>
c000d47c:	eb 5a                	jmp    c000d4d8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d47e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d485:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d48c:	83 e1 7f             	and    ecx,0x7f
c000d48f:	83 e0 7f             	and    eax,0x7f
c000d492:	01 c1                	add    ecx,eax
c000d494:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d49b:	83 e0 7f             	and    eax,0x7f
c000d49e:	01 c1                	add    ecx,eax
c000d4a0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d4a7:	83 e0 7f             	and    eax,0x7f
c000d4aa:	00 c1                	add    cl,al
c000d4ac:	74 41                	je     c000d4ef <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d4ae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4b4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d4ba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4c0:	83 ec 10             	sub    esp,0x10
c000d4c3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d4c7:	89 f7                	mov    edi,esi
c000d4c9:	c1 e0 0a             	shl    eax,0xa
c000d4cc:	c1 ff 1f             	sar    edi,0x1f
c000d4cf:	57                   	push   edi
c000d4d0:	56                   	push   esi
c000d4d1:	52                   	push   edx
c000d4d2:	50                   	push   eax
c000d4d3:	e8 28 ed 00 00       	call   c001c200 <__udivdi3>
c000d4d8:	83 c4 14             	add    esp,0x14
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	6a 00                	push   0x0
c000d4df:	6a 00                	push   0x0
c000d4e1:	53                   	push   ebx
c000d4e2:	e8 53 fe ff ff       	call   c000d33a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d4e7:	83 c4 20             	add    esp,0x20
c000d4ea:	e9 79 01 00 00       	jmp    c000d668 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d4ef:	89 f0                	mov    eax,esi
c000d4f1:	31 f6                	xor    esi,esi
c000d4f3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d4fa:	75 02                	jne    c000d4fe <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d4fc:	89 f1                	mov    ecx,esi
c000d4fe:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d505:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d50c:	c1 e2 08             	shl    edx,0x8
c000d50f:	c1 e7 10             	shl    edi,0x10
c000d512:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d51a:	09 fa                	or     edx,edi
c000d51c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d524:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d52b:	83 c0 10             	add    eax,0x10
c000d52e:	09 fa                	or     edx,edi
c000d530:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d537:	c1 e7 18             	shl    edi,0x18
c000d53a:	09 fa                	or     edx,edi
c000d53c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d543:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d547:	c1 e7 10             	shl    edi,0x10
c000d54a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d551:	c1 e2 08             	shl    edx,0x8
c000d554:	09 fa                	or     edx,edi
c000d556:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d55d:	09 fa                	or     edx,edi
c000d55f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d566:	c1 e7 18             	shl    edi,0x18
c000d569:	09 fa                	or     edx,edi
c000d56b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d56f:	46                   	inc    esi
c000d570:	83 fe 04             	cmp    esi,0x4
c000d573:	0f 85 7a ff ff ff    	jne    c000d4f3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d57d:	83 f0 01             	xor    eax,0x1
c000d580:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d584:	75 57                	jne    c000d5dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d586:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d58a:	83 f0 01             	xor    eax,0x1
c000d58d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d591:	75 4a                	jne    c000d5dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d593:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d597:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d59f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d5a7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5ad:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5b3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5b9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d5bd:	89 f7                	mov    edi,esi
c000d5bf:	c1 e0 0a             	shl    eax,0xa
c000d5c2:	c1 ff 1f             	sar    edi,0x1f
c000d5c5:	57                   	push   edi
c000d5c6:	56                   	push   esi
c000d5c7:	52                   	push   edx
c000d5c8:	50                   	push   eax
c000d5c9:	e8 32 ec 00 00       	call   c001c200 <__udivdi3>
c000d5ce:	83 c4 10             	add    esp,0x10
c000d5d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d5d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d5d9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d5dd:	84 c9                	test   cl,cl
c000d5df:	74 53                	je     c000d634 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d5e1:	0f b6 c9             	movzx  ecx,cl
c000d5e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d5ec:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d5f0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d5f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d600:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d604:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d608:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d60c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d614:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d618:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d61c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d620:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d624:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d628:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d62c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d630:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d634:	31 ed                	xor    ebp,ebp
c000d636:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d63a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d63e:	89 f8                	mov    eax,edi
c000d640:	09 f0                	or     eax,esi
c000d642:	74 1e                	je     c000d662 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d644:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d648:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d64c:	89 d1                	mov    ecx,edx
c000d64e:	09 c1                	or     ecx,eax
c000d650:	74 10                	je     c000d662 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d652:	83 ec 0c             	sub    esp,0xc
c000d655:	57                   	push   edi
c000d656:	56                   	push   esi
c000d657:	52                   	push   edx
c000d658:	50                   	push   eax
c000d659:	53                   	push   ebx
c000d65a:	e8 db fc ff ff       	call   c000d33a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d65f:	83 c4 20             	add    esp,0x20
c000d662:	45                   	inc    ebp
c000d663:	83 fd 04             	cmp    ebp,0x4
c000d666:	75 ce                	jne    c000d636 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d668:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d66e:	5b                   	pop    ebx
c000d66f:	5e                   	pop    esi
c000d670:	5f                   	pop    edi
c000d671:	5d                   	pop    ebp
c000d672:	c3                   	ret    
c000d673:	90                   	nop

c000d674 <Serial::Serial(char const*)>:
c000d674:	83 ec 0c             	sub    esp,0xc
c000d677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d67b:	83 ec 08             	sub    esp,0x8
c000d67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d682:	50                   	push   eax
c000d683:	e8 44 ea ff ff       	call   c000c0cc <Device::Device(char const*)>
c000d688:	83 c4 10             	add    esp,0x10
c000d68b:	ba b8 e2 01 c0       	mov    edx,0xc001e2b8
c000d690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d694:	89 10                	mov    DWORD PTR [eax],edx
c000d696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d69a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d6a4:	90                   	nop
c000d6a5:	83 c4 0c             	add    esp,0xc
c000d6a8:	c3                   	ret    
c000d6a9:	90                   	nop
c000d6aa:	66 90                	xchg   ax,ax

c000d6ac <Serial::~Serial()>:
c000d6ac:	83 ec 0c             	sub    esp,0xc
c000d6af:	ba b8 e2 01 c0       	mov    edx,0xc001e2b8
c000d6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b8:	89 10                	mov    DWORD PTR [eax],edx
c000d6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6be:	83 ec 0c             	sub    esp,0xc
c000d6c1:	50                   	push   eax
c000d6c2:	e8 6f e7 ff ff       	call   c000be36 <Device::~Device()>
c000d6c7:	83 c4 10             	add    esp,0x10
c000d6ca:	90                   	nop
c000d6cb:	83 c4 0c             	add    esp,0xc
c000d6ce:	c3                   	ret    
c000d6cf:	90                   	nop

c000d6d0 <Serial::~Serial()>:
c000d6d0:	83 ec 0c             	sub    esp,0xc
c000d6d3:	83 ec 0c             	sub    esp,0xc
c000d6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6da:	e8 cd ff ff ff       	call   c000d6ac <Serial::~Serial()>
c000d6df:	83 c4 10             	add    esp,0x10
c000d6e2:	83 ec 08             	sub    esp,0x8
c000d6e5:	68 58 01 00 00       	push   0x158
c000d6ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6ee:	e8 0b d3 ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000d6f3:	83 c4 10             	add    esp,0x10
c000d6f6:	83 c4 0c             	add    esp,0xc
c000d6f9:	c3                   	ret    
c000d6fa:	66 90                	xchg   ax,ax

c000d6fc <Timer::Timer(char const*)>:
c000d6fc:	83 ec 0c             	sub    esp,0xc
c000d6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d703:	83 ec 08             	sub    esp,0x8
c000d706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70a:	50                   	push   eax
c000d70b:	e8 bc e9 ff ff       	call   c000c0cc <Device::Device(char const*)>
c000d710:	83 c4 10             	add    esp,0x10
c000d713:	ba fc e2 01 c0       	mov    edx,0xc001e2fc
c000d718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71c:	89 10                	mov    DWORD PTR [eax],edx
c000d71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d722:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d72c:	90                   	nop
c000d72d:	83 c4 0c             	add    esp,0xc
c000d730:	c3                   	ret    
c000d731:	90                   	nop
c000d732:	66 90                	xchg   ax,ax

c000d734 <Timer::~Timer()>:
c000d734:	83 ec 0c             	sub    esp,0xc
c000d737:	ba fc e2 01 c0       	mov    edx,0xc001e2fc
c000d73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d740:	89 10                	mov    DWORD PTR [eax],edx
c000d742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d746:	83 ec 0c             	sub    esp,0xc
c000d749:	50                   	push   eax
c000d74a:	e8 e7 e6 ff ff       	call   c000be36 <Device::~Device()>
c000d74f:	83 c4 10             	add    esp,0x10
c000d752:	90                   	nop
c000d753:	83 c4 0c             	add    esp,0xc
c000d756:	c3                   	ret    
c000d757:	90                   	nop

c000d758 <Timer::~Timer()>:
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	83 ec 0c             	sub    esp,0xc
c000d75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d762:	e8 cd ff ff ff       	call   c000d734 <Timer::~Timer()>
c000d767:	83 c4 10             	add    esp,0x10
c000d76a:	83 ec 08             	sub    esp,0x8
c000d76d:	68 5c 01 00 00       	push   0x15c
c000d772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d776:	e8 83 d2 ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000d77b:	83 c4 10             	add    esp,0x10
c000d77e:	83 c4 0c             	add    esp,0xc
c000d781:	c3                   	ret    

c000d782 <Timer::read()>:
c000d782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d786:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d78c:	c3                   	ret    

c000d78d <setupTimer(int)>:
c000d78d:	53                   	push   ebx
c000d78e:	83 ec 14             	sub    esp,0x14
c000d791:	68 5c 01 00 00       	push   0x15c
c000d796:	e8 c2 a6 ff ff       	call   c0007e5d <malloc>
c000d79b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d79e:	89 c3                	mov    ebx,eax
c000d7a0:	e8 cf e3 00 00       	call   c001bb74 <PIT::PIT()>
c000d7a5:	58                   	pop    eax
c000d7a6:	5a                   	pop    edx
c000d7a7:	53                   	push   ebx
c000d7a8:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c000d7ae:	e8 81 e7 ff ff       	call   c000bf34 <Device::addChild(Device*)>
c000d7b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d7b5:	6a 00                	push   0x0
c000d7b7:	6a 00                	push   0x0
c000d7b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d7bd:	53                   	push   ebx
c000d7be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d7c1:	89 d8                	mov    eax,ebx
c000d7c3:	83 c4 28             	add    esp,0x28
c000d7c6:	5b                   	pop    ebx
c000d7c7:	c3                   	ret    

c000d7c8 <timerHandler(unsigned int)>:
c000d7c8:	56                   	push   esi
c000d7c9:	53                   	push   ebx
c000d7ca:	51                   	push   ecx
c000d7cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cf:	01 05 6c 2f 02 c0    	add    DWORD PTR ds:0xc0022f6c,eax
c000d7d5:	80 3d 9d 09 02 c0 00 	cmp    BYTE PTR ds:0xc002099d,0x0
c000d7dc:	0f 84 4a 01 00 00    	je     c000d92c <timerHandler(unsigned int)+0x164>
c000d7e2:	fa                   	cli    
c000d7e3:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c000d7e9:	83 ec 0c             	sub    esp,0xc
c000d7ec:	ff 05 44 3e 02 c0    	inc    DWORD PTR ds:0xc0023e44
c000d7f2:	68 58 3e 02 c0       	push   0xc0023e58
c000d7f7:	e8 d4 ef 00 00       	call   c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d7fc:	83 c4 10             	add    esp,0x10
c000d7ff:	84 c0                	test   al,al
c000d801:	0f 85 a1 00 00 00    	jne    c000d8a8 <timerHandler(unsigned int)+0xe0>
c000d807:	83 ec 0c             	sub    esp,0xc
c000d80a:	68 58 3e 02 c0       	push   0xc0023e58
c000d80f:	e8 d8 ef 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d814:	83 c4 10             	add    esp,0x10
c000d817:	89 c6                	mov    esi,eax
c000d819:	8d 76 00             	lea    esi,[esi+0x0]
c000d81c:	83 ec 0c             	sub    esp,0xc
c000d81f:	68 58 3e 02 c0       	push   0xc0023e58
c000d824:	e8 c3 ef 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d829:	c7 04 24 58 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e58
c000d830:	89 c3                	mov    ebx,eax
c000d832:	e8 bd ef 00 00       	call   c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d837:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d83a:	83 c4 10             	add    esp,0x10
c000d83d:	3b 05 6c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f6c
c000d843:	77 23                	ja     c000d868 <timerHandler(unsigned int)+0xa0>
c000d845:	83 ec 0c             	sub    esp,0xc
c000d848:	53                   	push   ebx
c000d849:	e8 92 65 00 00       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c000d84e:	83 c4 10             	add    esp,0x10
c000d851:	39 de                	cmp    esi,ebx
c000d853:	75 27                	jne    c000d87c <timerHandler(unsigned int)+0xb4>
c000d855:	83 ec 0c             	sub    esp,0xc
c000d858:	68 58 3e 02 c0       	push   0xc0023e58
c000d85d:	e8 8a ef 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d862:	89 c6                	mov    esi,eax
c000d864:	eb 12                	jmp    c000d878 <timerHandler(unsigned int)+0xb0>
c000d866:	66 90                	xchg   ax,ax
c000d868:	52                   	push   edx
c000d869:	52                   	push   edx
c000d86a:	53                   	push   ebx
c000d86b:	68 58 3e 02 c0       	push   0xc0023e58
c000d870:	e8 37 f0 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d875:	8d 76 00             	lea    esi,[esi+0x0]
c000d878:	83 c4 10             	add    esp,0x10
c000d87b:	90                   	nop
c000d87c:	83 ec 0c             	sub    esp,0xc
c000d87f:	68 58 3e 02 c0       	push   0xc0023e58
c000d884:	e8 47 ef 00 00       	call   c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d889:	83 c4 10             	add    esp,0x10
c000d88c:	84 c0                	test   al,al
c000d88e:	75 18                	jne    c000d8a8 <timerHandler(unsigned int)+0xe0>
c000d890:	83 ec 0c             	sub    esp,0xc
c000d893:	68 58 3e 02 c0       	push   0xc0023e58
c000d898:	e8 4f ef 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	39 f0                	cmp    eax,esi
c000d8a2:	0f 85 74 ff ff ff    	jne    c000d81c <timerHandler(unsigned int)+0x54>
c000d8a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8ad:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d8b1:	74 41                	je     c000d8f4 <timerHandler(unsigned int)+0x12c>
c000d8b3:	80 3d 9c 09 02 c0 00 	cmp    BYTE PTR ds:0xc002099c,0x0
c000d8ba:	74 38                	je     c000d8f4 <timerHandler(unsigned int)+0x12c>
c000d8bc:	fa                   	cli    
c000d8bd:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c000d8c3:	a1 6c 2f 02 c0       	mov    eax,ds:0xc0022f6c
c000d8c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d8ce:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d8d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d8d7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d8da:	72 08                	jb     c000d8e4 <timerHandler(unsigned int)+0x11c>
c000d8dc:	e8 3b 60 00 00       	call   c001391c <schedule()>
c000d8e1:	8d 76 00             	lea    esi,[esi+0x0]
c000d8e4:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000d8e9:	48                   	dec    eax
c000d8ea:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c000d8ef:	75 03                	jne    c000d8f4 <timerHandler(unsigned int)+0x12c>
c000d8f1:	fb                   	sti    
c000d8f2:	66 90                	xchg   ax,ax
c000d8f4:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c000d8f9:	48                   	dec    eax
c000d8fa:	a3 44 3e 02 c0       	mov    ds:0xc0023e44,eax
c000d8ff:	75 1b                	jne    c000d91c <timerHandler(unsigned int)+0x154>
c000d901:	83 3d 40 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e40,0x0
c000d908:	74 12                	je     c000d91c <timerHandler(unsigned int)+0x154>
c000d90a:	c7 05 40 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e40,0x0
c000d914:	e8 03 60 00 00       	call   c001391c <schedule()>
c000d919:	8d 76 00             	lea    esi,[esi+0x0]
c000d91c:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c000d921:	48                   	dec    eax
c000d922:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c000d927:	75 03                	jne    c000d92c <timerHandler(unsigned int)+0x164>
c000d929:	fb                   	sti    
c000d92a:	66 90                	xchg   ax,ax
c000d92c:	58                   	pop    eax
c000d92d:	5b                   	pop    ebx
c000d92e:	5e                   	pop    esi
c000d92f:	c3                   	ret    

c000d930 <VCache::VCache(PhysicalDisk*)>:
c000d930:	53                   	push   ebx
c000d931:	83 ec 18             	sub    esp,0x18
c000d934:	ba 2c e3 01 c0       	mov    edx,0xc001e32c
c000d939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d93d:	89 10                	mov    DWORD PTR [eax],edx
c000d93f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d943:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d94a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d94e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d959:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d960:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d96b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d972:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d988:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d98c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d990:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d997:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d99e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d9a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9aa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d9ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d9b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ba:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d9c1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d9c9:	83 ec 0c             	sub    esp,0xc
c000d9cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9d0:	e8 88 a4 ff ff       	call   c0007e5d <malloc>
c000d9d5:	83 c4 10             	add    esp,0x10
c000d9d8:	89 c3                	mov    ebx,eax
c000d9da:	83 ec 0c             	sub    esp,0xc
c000d9dd:	53                   	push   ebx
c000d9de:	e8 05 5d 00 00       	call   c00136e8 <Mutex::Mutex()>
c000d9e3:	83 c4 10             	add    esp,0x10
c000d9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d9f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d9f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000da03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da07:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da11:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000da14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da18:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000da1e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000da24:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da28:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000da2b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000da2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da32:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da36:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da3a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da40:	05 00 01 00 00       	add    eax,0x100
c000da45:	c1 e0 04             	shl    eax,0x4
c000da48:	83 ec 0c             	sub    esp,0xc
c000da4b:	50                   	push   eax
c000da4c:	e8 0c a4 ff ff       	call   c0007e5d <malloc>
c000da51:	83 c4 10             	add    esp,0x10
c000da54:	89 c2                	mov    edx,eax
c000da56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000da5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da61:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da74:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da7a:	c1 e0 06             	shl    eax,0x6
c000da7d:	83 ec 0c             	sub    esp,0xc
c000da80:	50                   	push   eax
c000da81:	e8 d7 a3 ff ff       	call   c0007e5d <malloc>
c000da86:	83 c4 10             	add    esp,0x10
c000da89:	89 c2                	mov    edx,eax
c000da8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da8f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000da92:	90                   	nop
c000da93:	83 c4 18             	add    esp,0x18
c000da96:	5b                   	pop    ebx
c000da97:	c3                   	ret    

c000da98 <VCache::invalidateReadBuffer()>:
c000da98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da9c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000daa2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000daa6:	c3                   	ret    
c000daa7:	90                   	nop

c000daa8 <VCache::writeWriteBuffer()>:
c000daa8:	53                   	push   ebx
c000daa9:	83 ec 08             	sub    esp,0x8
c000daac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dab0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dab4:	74 1e                	je     c000dad4 <VCache::writeWriteBuffer()+0x2c>
c000dab6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dab9:	83 ec 0c             	sub    esp,0xc
c000dabc:	8b 10                	mov    edx,DWORD PTR [eax]
c000dabe:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dac1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dac4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000dac7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daca:	50                   	push   eax
c000dacb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dace:	83 c4 20             	add    esp,0x20
c000dad1:	8d 76 00             	lea    esi,[esi+0x0]
c000dad4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dadb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000dae2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000dae6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000daed:	83 c4 08             	add    esp,0x8
c000daf0:	5b                   	pop    ebx
c000daf1:	c3                   	ret    
c000daf2:	66 90                	xchg   ax,ax

c000daf4 <VCache::~VCache()>:
c000daf4:	83 ec 0c             	sub    esp,0xc
c000daf7:	ba 2c e3 01 c0       	mov    edx,0xc001e32c
c000dafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db00:	89 10                	mov    DWORD PTR [eax],edx
c000db02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db06:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000db09:	84 c0                	test   al,al
c000db0b:	74 0f                	je     c000db1c <VCache::~VCache()+0x28>
c000db0d:	83 ec 0c             	sub    esp,0xc
c000db10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db14:	e8 8f ff ff ff       	call   c000daa8 <VCache::writeWriteBuffer()>
c000db19:	83 c4 10             	add    esp,0x10
c000db1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db20:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db23:	83 ec 0c             	sub    esp,0xc
c000db26:	50                   	push   eax
c000db27:	e8 41 a3 ff ff       	call   c0007e6d <free>
c000db2c:	83 c4 10             	add    esp,0x10
c000db2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db33:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000db36:	83 ec 0c             	sub    esp,0xc
c000db39:	50                   	push   eax
c000db3a:	e8 2e a3 ff ff       	call   c0007e6d <free>
c000db3f:	83 c4 10             	add    esp,0x10
c000db42:	90                   	nop
c000db43:	83 c4 0c             	add    esp,0xc
c000db46:	c3                   	ret    
c000db47:	90                   	nop

c000db48 <VCache::~VCache()>:
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	83 ec 0c             	sub    esp,0xc
c000db4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db52:	e8 9d ff ff ff       	call   c000daf4 <VCache::~VCache()>
c000db57:	83 c4 10             	add    esp,0x10
c000db5a:	83 ec 08             	sub    esp,0x8
c000db5d:	6a 44                	push   0x44
c000db5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db63:	e8 96 ce ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000db68:	83 c4 10             	add    esp,0x10
c000db6b:	83 c4 0c             	add    esp,0xc
c000db6e:	c3                   	ret    
c000db6f:	90                   	nop

c000db70 <VCache::write(unsigned long long, int, void*)>:
c000db70:	55                   	push   ebp
c000db71:	57                   	push   edi
c000db72:	56                   	push   esi
c000db73:	53                   	push   ebx
c000db74:	83 ec 1c             	sub    esp,0x1c
c000db77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db7b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000db7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db83:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000db87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db8b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000db8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db93:	31 c0                	xor    eax,eax
c000db95:	8d 76 00             	lea    esi,[esi+0x0]
c000db98:	39 e8                	cmp    eax,ebp
c000db9a:	7d 18                	jge    c000dbb4 <VCache::write(unsigned long long, int, void*)+0x44>
c000db9c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000db9f:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dba5:	0f af c8             	imul   ecx,eax
c000dba8:	89 ca                	mov    edx,ecx
c000dbaa:	01 f2                	add    edx,esi
c000dbac:	8b 3a                	mov    edi,DWORD PTR [edx]
c000dbae:	40                   	inc    eax
c000dbaf:	eb e7                	jmp    c000db98 <VCache::write(unsigned long long, int, void*)+0x28>
c000dbb1:	8d 76 00             	lea    esi,[esi+0x0]
c000dbb4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dbb8:	74 0a                	je     c000dbc4 <VCache::write(unsigned long long, int, void*)+0x54>
c000dbba:	53                   	push   ebx
c000dbbb:	e8 d8 fe ff ff       	call   c000da98 <VCache::invalidateReadBuffer()>
c000dbc0:	58                   	pop    eax
c000dbc1:	8d 76 00             	lea    esi,[esi+0x0]
c000dbc4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dbc8:	74 5a                	je     c000dc24 <VCache::write(unsigned long long, int, void*)+0xb4>
c000dbca:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000dbcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dbd1:	89 f8                	mov    eax,edi
c000dbd3:	99                   	cdq    
c000dbd4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dbd7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dbda:	31 c1                	xor    ecx,eax
c000dbdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbe0:	31 d0                	xor    eax,edx
c000dbe2:	09 c1                	or     ecx,eax
c000dbe4:	75 32                	jne    c000dc18 <VCache::write(unsigned long long, int, void*)+0xa8>
c000dbe6:	83 fd 01             	cmp    ebp,0x1
c000dbe9:	75 2d                	jne    c000dc18 <VCache::write(unsigned long long, int, void*)+0xa8>
c000dbeb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dbee:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dbf4:	0f af f9             	imul   edi,ecx
c000dbf7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dbfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dbfc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dbff:	40                   	inc    eax
c000dc00:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc03:	83 f8 40             	cmp    eax,0x40
c000dc06:	75 74                	jne    c000dc7c <VCache::write(unsigned long long, int, void*)+0x10c>
c000dc08:	83 ec 0c             	sub    esp,0xc
c000dc0b:	53                   	push   ebx
c000dc0c:	e8 97 fe ff ff       	call   c000daa8 <VCache::writeWriteBuffer()>
c000dc11:	83 c4 10             	add    esp,0x10
c000dc14:	eb 66                	jmp    c000dc7c <VCache::write(unsigned long long, int, void*)+0x10c>
c000dc16:	66 90                	xchg   ax,ax
c000dc18:	83 ec 0c             	sub    esp,0xc
c000dc1b:	53                   	push   ebx
c000dc1c:	e8 87 fe ff ff       	call   c000daa8 <VCache::writeWriteBuffer()>
c000dc21:	83 c4 10             	add    esp,0x10
c000dc24:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc27:	83 fd 3f             	cmp    ebp,0x3f
c000dc2a:	7f 24                	jg     c000dc50 <VCache::write(unsigned long long, int, void*)+0xe0>
c000dc2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc30:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000dc33:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dc36:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dc3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc3e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc41:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000dc44:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc4c:	eb 2e                	jmp    c000dc7c <VCache::write(unsigned long long, int, void*)+0x10c>
c000dc4e:	66 90                	xchg   ax,ax
c000dc50:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc52:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dc56:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dc5a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc62:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dc66:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dc6a:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000dc6e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dc71:	83 c4 1c             	add    esp,0x1c
c000dc74:	5b                   	pop    ebx
c000dc75:	5e                   	pop    esi
c000dc76:	5f                   	pop    edi
c000dc77:	5d                   	pop    ebp
c000dc78:	ff e0                	jmp    eax
c000dc7a:	66 90                	xchg   ax,ax
c000dc7c:	83 c4 1c             	add    esp,0x1c
c000dc7f:	31 c0                	xor    eax,eax
c000dc81:	5b                   	pop    ebx
c000dc82:	5e                   	pop    esi
c000dc83:	5f                   	pop    edi
c000dc84:	5d                   	pop    ebp
c000dc85:	c3                   	ret    

c000dc86 <VCache::read(unsigned long long, int, void*)>:
c000dc86:	55                   	push   ebp
c000dc87:	57                   	push   edi
c000dc88:	56                   	push   esi
c000dc89:	53                   	push   ebx
c000dc8a:	83 ec 1c             	sub    esp,0x1c
c000dc8d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dc91:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc99:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dc9d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dca1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dca5:	31 c0                	xor    eax,eax
c000dca7:	90                   	nop
c000dca8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dcac:	7d 16                	jge    c000dcc4 <VCache::read(unsigned long long, int, void*)+0x3e>
c000dcae:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dcb1:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dcb7:	0f af c8             	imul   ecx,eax
c000dcba:	89 ca                	mov    edx,ecx
c000dcbc:	01 f2                	add    edx,esi
c000dcbe:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000dcc0:	40                   	inc    eax
c000dcc1:	eb e5                	jmp    c000dca8 <VCache::read(unsigned long long, int, void*)+0x22>
c000dcc3:	90                   	nop
c000dcc4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dcc8:	74 0e                	je     c000dcd8 <VCache::read(unsigned long long, int, void*)+0x52>
c000dcca:	83 ec 0c             	sub    esp,0xc
c000dccd:	53                   	push   ebx
c000dcce:	e8 d5 fd ff ff       	call   c000daa8 <VCache::writeWriteBuffer()>
c000dcd3:	83 c4 10             	add    esp,0x10
c000dcd6:	66 90                	xchg   ax,ax
c000dcd8:	83 ec 0c             	sub    esp,0xc
c000dcdb:	53                   	push   ebx
c000dcdc:	e8 b7 fd ff ff       	call   c000da98 <VCache::invalidateReadBuffer()>
c000dce1:	83 c4 0c             	add    esp,0xc
c000dce4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dce7:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000dced:	6a 00                	push   0x0
c000dcef:	56                   	push   esi
c000dcf0:	e8 fb 27 ff ff       	call   c00004f0 <memset>
c000dcf5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dcf8:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcfa:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000dcfe:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000dd02:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000dd06:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000dd0a:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000dd0e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd12:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000dd15:	83 c4 2c             	add    esp,0x2c
c000dd18:	5b                   	pop    ebx
c000dd19:	5e                   	pop    esi
c000dd1a:	5f                   	pop    edi
c000dd1b:	5d                   	pop    ebp
c000dd1c:	ff e0                	jmp    eax

c000dd1e <Video::putrect(int, int, int, int, unsigned int)>:
c000dd1e:	55                   	push   ebp
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 1c             	sub    esp,0x1c
c000dd25:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dd29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dd2d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000dd31:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000dd35:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dd39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd3d:	01 df                	add    edi,ebx
c000dd3f:	39 fb                	cmp    ebx,edi
c000dd41:	7d 1f                	jge    c000dd62 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000dd43:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dd47:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000dd4b:	7d 12                	jge    c000dd5f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000dd4d:	8b 16                	mov    edx,DWORD PTR [esi]
c000dd4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd53:	53                   	push   ebx
c000dd54:	55                   	push   ebp
c000dd55:	45                   	inc    ebp
c000dd56:	56                   	push   esi
c000dd57:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dd5a:	83 c4 10             	add    esp,0x10
c000dd5d:	eb e8                	jmp    c000dd47 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000dd5f:	43                   	inc    ebx
c000dd60:	eb dd                	jmp    c000dd3f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000dd62:	83 c4 1c             	add    esp,0x1c
c000dd65:	5b                   	pop    ebx
c000dd66:	5e                   	pop    esi
c000dd67:	5f                   	pop    edi
c000dd68:	5d                   	pop    ebp
c000dd69:	c3                   	ret    

c000dd6a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000dd6a:	55                   	push   ebp
c000dd6b:	57                   	push   edi
c000dd6c:	31 ff                	xor    edi,edi
c000dd6e:	56                   	push   esi
c000dd6f:	53                   	push   ebx
c000dd70:	83 ec 1c             	sub    esp,0x1c
c000dd73:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000dd77:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000dd7b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000dd82:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000dd87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd8b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000dd8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd93:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000dd96:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dd9a:	01 f9                	add    ecx,edi
c000dd9c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000dda0:	7d 2f                	jge    c000ddd1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000dda2:	31 f6                	xor    esi,esi
c000dda4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dda8:	01 f2                	add    edx,esi
c000ddaa:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ddae:	7d 1a                	jge    c000ddca <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ddb0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ddb3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ddb6:	46                   	inc    esi
c000ddb7:	51                   	push   ecx
c000ddb8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ddbc:	52                   	push   edx
c000ddbd:	55                   	push   ebp
c000ddbe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ddc1:	83 c4 10             	add    esp,0x10
c000ddc4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ddc8:	eb da                	jmp    c000dda4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ddca:	47                   	inc    edi
c000ddcb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ddcf:	eb c5                	jmp    c000dd96 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ddd1:	83 c4 1c             	add    esp,0x1c
c000ddd4:	5b                   	pop    ebx
c000ddd5:	5e                   	pop    esi
c000ddd6:	5f                   	pop    edi
c000ddd7:	5d                   	pop    ebp
c000ddd8:	c3                   	ret    
c000ddd9:	90                   	nop

c000ddda <Video::blit(unsigned int*, int, int, int, int)>:
c000ddda:	55                   	push   ebp
c000dddb:	57                   	push   edi
c000dddc:	56                   	push   esi
c000dddd:	53                   	push   ebx
c000ddde:	83 ec 1c             	sub    esp,0x1c
c000dde1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dde5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dde9:	85 c0                	test   eax,eax
c000ddeb:	79 02                	jns    c000ddef <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000dded:	31 c0                	xor    eax,eax
c000ddef:	c1 e0 02             	shl    eax,0x2
c000ddf2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ddf6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ddfa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ddfe:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000de02:	39 d8                	cmp    eax,ebx
c000de04:	7e 49                	jle    c000de4f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000de06:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000de0c:	7c 41                	jl     c000de4f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000de0e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000de12:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de16:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de1a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000de1e:	39 f9                	cmp    ecx,edi
c000de20:	7e 22                	jle    c000de44 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000de22:	83 c5 04             	add    ebp,0x4
c000de25:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000de2b:	7c 14                	jl     c000de41 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000de2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000de2f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000de32:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000de36:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000de3a:	56                   	push   esi
c000de3b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000de3e:	83 c4 10             	add    esp,0x10
c000de41:	47                   	inc    edi
c000de42:	eb d2                	jmp    c000de16 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000de44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de48:	43                   	inc    ebx
c000de49:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de4d:	eb ab                	jmp    c000ddfa <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000de4f:	83 c4 1c             	add    esp,0x1c
c000de52:	5b                   	pop    ebx
c000de53:	5e                   	pop    esi
c000de54:	5f                   	pop    edi
c000de55:	5d                   	pop    ebp
c000de56:	c3                   	ret    
c000de57:	90                   	nop

c000de58 <Video::clearScreen(unsigned int)>:
c000de58:	57                   	push   edi
c000de59:	56                   	push   esi
c000de5a:	53                   	push   ebx
c000de5b:	31 db                	xor    ebx,ebx
c000de5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de61:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000de67:	7e 1f                	jle    c000de88 <Video::clearScreen(unsigned int)+0x30>
c000de69:	31 ff                	xor    edi,edi
c000de6b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000de71:	7e 12                	jle    c000de85 <Video::clearScreen(unsigned int)+0x2d>
c000de73:	8b 06                	mov    eax,DWORD PTR [esi]
c000de75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de79:	53                   	push   ebx
c000de7a:	57                   	push   edi
c000de7b:	47                   	inc    edi
c000de7c:	56                   	push   esi
c000de7d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de80:	83 c4 10             	add    esp,0x10
c000de83:	eb e6                	jmp    c000de6b <Video::clearScreen(unsigned int)+0x13>
c000de85:	43                   	inc    ebx
c000de86:	eb d9                	jmp    c000de61 <Video::clearScreen(unsigned int)+0x9>
c000de88:	5b                   	pop    ebx
c000de89:	5e                   	pop    esi
c000de8a:	5f                   	pop    edi
c000de8b:	c3                   	ret    

c000de8c <Video::putpixel(int, int, unsigned int)>:
c000de8c:	c7 44 24 04 34 e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e334
c000de94:	e9 2a 28 00 00       	jmp    c00106c3 <KePanic(char const*)>
c000de99:	90                   	nop

c000de9a <Video::Video(char const*)>:
c000de9a:	83 ec 0c             	sub    esp,0xc
c000de9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea1:	83 ec 08             	sub    esp,0x8
c000dea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dea8:	50                   	push   eax
c000dea9:	e8 1e e2 ff ff       	call   c000c0cc <Device::Device(char const*)>
c000deae:	83 c4 10             	add    esp,0x10
c000deb1:	ba a4 e3 01 c0       	mov    edx,0xc001e3a4
c000deb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deba:	89 10                	mov    DWORD PTR [eax],edx
c000debc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000deca:	90                   	nop
c000decb:	83 c4 0c             	add    esp,0xc
c000dece:	c3                   	ret    
c000decf:	90                   	nop

c000ded0 <Video::~Video()>:
c000ded0:	83 ec 0c             	sub    esp,0xc
c000ded3:	ba a4 e3 01 c0       	mov    edx,0xc001e3a4
c000ded8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dedc:	89 10                	mov    DWORD PTR [eax],edx
c000dede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee2:	83 ec 0c             	sub    esp,0xc
c000dee5:	50                   	push   eax
c000dee6:	e8 4b df ff ff       	call   c000be36 <Device::~Device()>
c000deeb:	83 c4 10             	add    esp,0x10
c000deee:	90                   	nop
c000deef:	83 c4 0c             	add    esp,0xc
c000def2:	c3                   	ret    
c000def3:	90                   	nop

c000def4 <Video::~Video()>:
c000def4:	83 ec 0c             	sub    esp,0xc
c000def7:	83 ec 0c             	sub    esp,0xc
c000defa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defe:	e8 cd ff ff ff       	call   c000ded0 <Video::~Video()>
c000df03:	83 c4 10             	add    esp,0x10
c000df06:	83 ec 08             	sub    esp,0x8
c000df09:	68 64 01 00 00       	push   0x164
c000df0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df12:	e8 e7 ca ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	83 c4 0c             	add    esp,0xc
c000df1d:	c3                   	ret    

c000df1e <Video::isMonochrome()>:
c000df1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df22:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000df28:	c3                   	ret    
c000df29:	90                   	nop

c000df2a <Video::getWidth()>:
c000df2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df2e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000df34:	c3                   	ret    
c000df35:	90                   	nop

c000df36 <Video::getHeight()>:
c000df36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df3a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000df40:	c3                   	ret    
c000df41:	90                   	nop

c000df42 <Video::drawCursor(int, int, unsigned char*, int)>:
c000df42:	55                   	push   ebp
c000df43:	57                   	push   edi
c000df44:	56                   	push   esi
c000df45:	53                   	push   ebx
c000df46:	83 ec 2c             	sub    esp,0x2c
c000df49:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000df4d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000df51:	83 f8 01             	cmp    eax,0x1
c000df54:	19 c9                	sbb    ecx,ecx
c000df56:	31 db                	xor    ebx,ebx
c000df58:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000df5c:	89 cd                	mov    ebp,ecx
c000df5e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000df66:	f7 d5                	not    ebp
c000df68:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000df6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000df72:	01 d8                	add    eax,ebx
c000df74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df78:	56                   	push   esi
c000df79:	e8 b8 ff ff ff       	call   c000df36 <Video::getHeight()>
c000df7e:	59                   	pop    ecx
c000df7f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000df83:	7e 70                	jle    c000dff5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000df85:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000df89:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000df8d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000df90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df94:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000df98:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000df9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfa3:	89 f8                	mov    eax,edi
c000dfa5:	83 c0 20             	add    eax,0x20
c000dfa8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfac:	56                   	push   esi
c000dfad:	e8 78 ff ff ff       	call   c000df2a <Video::getWidth()>
c000dfb2:	5a                   	pop    edx
c000dfb3:	39 c7                	cmp    edi,eax
c000dfb5:	7d 34                	jge    c000dfeb <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000dfb7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dfbc:	74 05                	je     c000dfc3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000dfbe:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfc0:	55                   	push   ebp
c000dfc1:	eb 0d                	jmp    c000dfd0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000dfc3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dfc8:	74 12                	je     c000dfdc <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000dfca:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfd0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfd4:	57                   	push   edi
c000dfd5:	56                   	push   esi
c000dfd6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfd9:	83 c4 10             	add    esp,0x10
c000dfdc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dfe0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dfe4:	47                   	inc    edi
c000dfe5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dfe9:	75 c1                	jne    c000dfac <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000dfeb:	43                   	inc    ebx
c000dfec:	83 fb 20             	cmp    ebx,0x20
c000dfef:	0f 85 79 ff ff ff    	jne    c000df6e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000dff5:	83 c4 2c             	add    esp,0x2c
c000dff8:	5b                   	pop    ebx
c000dff9:	5e                   	pop    esi
c000dffa:	5f                   	pop    edi
c000dffb:	5d                   	pop    ebp
c000dffc:	c3                   	ret    
c000dffd:	90                   	nop

c000dffe <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dffe:	55                   	push   ebp
c000dfff:	57                   	push   edi
c000e000:	56                   	push   esi
c000e001:	53                   	push   ebx
c000e002:	83 ec 28             	sub    esp,0x28
c000e005:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e009:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e00d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e011:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e015:	c1 e6 08             	shl    esi,0x8
c000e018:	01 c6                	add    esi,eax
c000e01a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e01e:	c1 e0 08             	shl    eax,0x8
c000e021:	01 d0                	add    eax,edx
c000e023:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e027:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e02b:	0f af c6             	imul   eax,esi
c000e02e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e035:	50                   	push   eax
c000e036:	e8 22 9e ff ff       	call   c0007e5d <malloc>
c000e03b:	83 c4 10             	add    esp,0x10
c000e03e:	89 c7                	mov    edi,eax
c000e040:	85 c0                	test   eax,eax
c000e042:	75 10                	jne    c000e054 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e044:	83 ec 0c             	sub    esp,0xc
c000e047:	68 55 e3 01 c0       	push   0xc001e355
c000e04c:	e8 72 26 00 00       	call   c00106c3 <KePanic(char const*)>
c000e051:	83 c4 10             	add    esp,0x10
c000e054:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e057:	ba 12 00 00 00       	mov    edx,0x12
c000e05c:	84 c0                	test   al,al
c000e05e:	74 11                	je     c000e071 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000e060:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e064:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e068:	c1 fa 03             	sar    edx,0x3
c000e06b:	0f af d1             	imul   edx,ecx
c000e06e:	83 c2 12             	add    edx,0x12
c000e071:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e075:	74 04                	je     c000e07b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000e077:	85 f6                	test   esi,esi
c000e079:	75 12                	jne    c000e08d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000e07b:	83 ec 0c             	sub    esp,0xc
c000e07e:	68 65 e3 01 c0       	push   0xc001e365
c000e083:	e8 6c ca ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000e088:	e9 b8 00 00 00       	jmp    c000e145 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000e08d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e091:	80 f9 02             	cmp    cl,0x2
c000e094:	0f 85 96 00 00 00    	jne    c000e130 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000e09a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e09f:	75 0e                	jne    c000e0af <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e0a1:	84 c0                	test   al,al
c000e0a3:	75 0a                	jne    c000e0af <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e0a5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e0a8:	83 e8 18             	sub    eax,0x18
c000e0ab:	a8 f7                	test   al,0xf7
c000e0ad:	74 0a                	je     c000e0b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000e0af:	83 ec 0c             	sub    esp,0xc
c000e0b2:	68 7a e3 01 c0       	push   0xc001e37a
c000e0b7:	eb 7f                	jmp    c000e138 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000e0b9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0c1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e0c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e0cd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e0d5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e0d9:	75 0c                	jne    c000e0e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000e0db:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e0e0:	c1 e0 18             	shl    eax,0x18
c000e0e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0e7:	45                   	inc    ebp
c000e0e8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e0ed:	c1 e1 10             	shl    ecx,0x10
c000e0f0:	89 c8                	mov    eax,ecx
c000e0f2:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e0f7:	c1 e1 08             	shl    ecx,0x8
c000e0fa:	09 c1                	or     ecx,eax
c000e0fc:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e100:	09 c1                	or     ecx,eax
c000e102:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e106:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e10a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e10e:	c1 f8 03             	sar    eax,0x3
c000e111:	01 c2                	add    edx,eax
c000e113:	89 e8                	mov    eax,ebp
c000e115:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e119:	39 c6                	cmp    esi,eax
c000e11b:	7f b0                	jg     c000e0cd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000e11d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e121:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e125:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e128:	7e 22                	jle    c000e14c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000e12a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e12e:	eb 99                	jmp    c000e0c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000e130:	50                   	push   eax
c000e131:	50                   	push   eax
c000e132:	51                   	push   ecx
c000e133:	68 88 e3 01 c0       	push   0xc001e388
c000e138:	e8 b7 c9 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000e13d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e140:	e8 28 9d ff ff       	call   c0007e6d <free>
c000e145:	83 c4 10             	add    esp,0x10
c000e148:	31 ff                	xor    edi,edi
c000e14a:	eb 0f                	jmp    c000e15b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000e14c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e150:	89 30                	mov    DWORD PTR [eax],esi
c000e152:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e156:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e159:	89 30                	mov    DWORD PTR [eax],esi
c000e15b:	83 c4 1c             	add    esp,0x1c
c000e15e:	89 f8                	mov    eax,edi
c000e160:	5b                   	pop    ebx
c000e161:	5e                   	pop    esi
c000e162:	5f                   	pop    edi
c000e163:	5d                   	pop    ebp
c000e164:	c3                   	ret    
c000e165:	90                   	nop

c000e166 <Video::putTGA(int, int, unsigned char*, int)>:
c000e166:	55                   	push   ebp
c000e167:	57                   	push   edi
c000e168:	56                   	push   esi
c000e169:	53                   	push   ebx
c000e16a:	83 ec 28             	sub    esp,0x28
c000e16d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e171:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e175:	50                   	push   eax
c000e176:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e17a:	50                   	push   eax
c000e17b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e17f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e183:	56                   	push   esi
c000e184:	e8 75 fe ff ff       	call   c000dffe <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e189:	83 c4 20             	add    esp,0x20
c000e18c:	85 c0                	test   eax,eax
c000e18e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e192:	74 35                	je     c000e1c9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e194:	89 c7                	mov    edi,eax
c000e196:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e19a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e19e:	39 d8                	cmp    eax,ebx
c000e1a0:	7e 27                	jle    c000e1c9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e1a2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e1a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e1aa:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e1ae:	39 e8                	cmp    eax,ebp
c000e1b0:	7e 14                	jle    c000e1c6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e1b2:	8b 06                	mov    eax,DWORD PTR [esi]
c000e1b4:	83 c7 04             	add    edi,0x4
c000e1b7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e1ba:	53                   	push   ebx
c000e1bb:	55                   	push   ebp
c000e1bc:	45                   	inc    ebp
c000e1bd:	56                   	push   esi
c000e1be:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e1c1:	83 c4 10             	add    esp,0x10
c000e1c4:	eb e0                	jmp    c000e1a6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e1c6:	43                   	inc    ebx
c000e1c7:	eb cd                	jmp    c000e196 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e1c9:	83 c4 1c             	add    esp,0x1c
c000e1cc:	5b                   	pop    ebx
c000e1cd:	5e                   	pop    esi
c000e1ce:	5f                   	pop    edi
c000e1cf:	5d                   	pop    ebp
c000e1d0:	c3                   	ret    
c000e1d1:	66 90                	xchg   ax,ax
c000e1d3:	90                   	nop

c000e1d4 <ACPI::close(int, int, void*)>:
c000e1d4:	83 ec 1c             	sub    esp,0x1c
c000e1d7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e1df:	74 0b                	je     c000e1ec <ACPI::close(int, int, void*)+0x18>
c000e1e1:	b8 00 00 00 00       	mov    eax,0x0
c000e1e6:	e9 9d 00 00 00       	jmp    c000e288 <ACPI::close(int, int, void*)+0xb4>
c000e1eb:	90                   	nop
c000e1ec:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e1f1:	75 29                	jne    c000e21c <ACPI::close(int, int, void*)+0x48>
c000e1f3:	a1 88 2f 02 c0       	mov    eax,ds:0xc0022f88
c000e1f8:	85 c0                	test   eax,eax
c000e1fa:	74 08                	je     c000e204 <ACPI::close(int, int, void*)+0x30>
c000e1fc:	a1 88 2f 02 c0       	mov    eax,ds:0xc0022f88
c000e201:	ff d0                	call   eax
c000e203:	90                   	nop
c000e204:	83 ec 0c             	sub    esp,0xc
c000e207:	68 e4 e3 01 c0       	push   0xc001e3e4
c000e20c:	e8 b2 24 00 00       	call   c00106c3 <KePanic(char const*)>
c000e211:	83 c4 10             	add    esp,0x10
c000e214:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e219:	eb 6d                	jmp    c000e288 <ACPI::close(int, int, void*)+0xb4>
c000e21b:	90                   	nop
c000e21c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e221:	75 5d                	jne    c000e280 <ACPI::close(int, int, void*)+0xac>
c000e223:	a1 84 2f 02 c0       	mov    eax,ds:0xc0022f84
c000e228:	85 c0                	test   eax,eax
c000e22a:	74 08                	je     c000e234 <ACPI::close(int, int, void*)+0x60>
c000e22c:	a1 84 2f 02 c0       	mov    eax,ds:0xc0022f84
c000e231:	ff d0                	call   eax
c000e233:	90                   	nop
c000e234:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e239:	8d 76 00             	lea    esi,[esi+0x0]
c000e23c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e240:	25 ff 00 00 00       	and    eax,0xff
c000e245:	83 e0 02             	and    eax,0x2
c000e248:	74 1e                	je     c000e268 <ACPI::close(int, int, void*)+0x94>
c000e24a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e255:	89 c2                	mov    edx,eax
c000e257:	ec                   	in     al,dx
c000e258:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e25c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e260:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e264:	eb d6                	jmp    c000e23c <ACPI::close(int, int, void*)+0x68>
c000e266:	66 90                	xchg   ax,ax
c000e268:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e26f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e274:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e278:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e27c:	ee                   	out    dx,al
c000e27d:	8d 76 00             	lea    esi,[esi+0x0]
c000e280:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e285:	8d 76 00             	lea    esi,[esi+0x0]
c000e288:	83 c4 1c             	add    esp,0x1c
c000e28b:	c3                   	ret    

c000e28c <findRSDP()>:
c000e28c:	83 ec 1c             	sub    esp,0x1c
c000e28f:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000e294:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e29a:	83 e0 04             	and    eax,0x4
c000e29d:	84 c0                	test   al,al
c000e29f:	75 07                	jne    c000e2a8 <findRSDP()+0x1c>
c000e2a1:	b8 00 00 00 00       	mov    eax,0x0
c000e2a6:	eb 70                	jmp    c000e318 <findRSDP()+0x8c>
c000e2a8:	a1 c8 09 02 c0       	mov    eax,ds:0xc00209c8
c000e2ad:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e2b2:	7f 1c                	jg     c000e2d0 <findRSDP()+0x44>
c000e2b4:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000e2b9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2bf:	83 e2 fb             	and    edx,0xfffffffb
c000e2c2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2c8:	b8 00 00 00 00       	mov    eax,0x0
c000e2cd:	eb 49                	jmp    c000e318 <findRSDP()+0x8c>
c000e2cf:	90                   	nop
c000e2d0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e2d8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e2e0:	77 2e                	ja     c000e310 <findRSDP()+0x84>
c000e2e2:	83 ec 04             	sub    esp,0x4
c000e2e5:	6a 08                	push   0x8
c000e2e7:	68 7f e4 01 c0       	push   0xc001e47f
c000e2ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2f0:	e8 bb 20 ff ff       	call   c00003b0 <memcmp>
c000e2f5:	83 c4 10             	add    esp,0x10
c000e2f8:	85 c0                	test   eax,eax
c000e2fa:	0f 94 c0             	sete   al
c000e2fd:	84 c0                	test   al,al
c000e2ff:	74 07                	je     c000e308 <findRSDP()+0x7c>
c000e301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e305:	eb 11                	jmp    c000e318 <findRSDP()+0x8c>
c000e307:	90                   	nop
c000e308:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e30d:	eb c9                	jmp    c000e2d8 <findRSDP()+0x4c>
c000e30f:	90                   	nop
c000e310:	b8 00 00 00 00       	mov    eax,0x0
c000e315:	8d 76 00             	lea    esi,[esi+0x0]
c000e318:	83 c4 1c             	add    esp,0x1c
c000e31b:	c3                   	ret    

c000e31c <loadACPITables(unsigned char*)>:
c000e31c:	57                   	push   edi
c000e31d:	56                   	push   esi
c000e31e:	53                   	push   ebx
c000e31f:	83 ec 60             	sub    esp,0x60
c000e322:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000e327:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e32d:	83 e0 04             	and    eax,0x4
c000e330:	84 c0                	test   al,al
c000e332:	0f 84 3c 02 00 00    	je     c000e574 <loadACPITables(unsigned char*)+0x258>
c000e338:	a0 a0 31 02 c0       	mov    al,ds:0xc00231a0
c000e33d:	84 c0                	test   al,al
c000e33f:	74 77                	je     c000e3b8 <loadACPITables(unsigned char*)+0x9c>
c000e341:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e345:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e349:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e34d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e350:	83 e8 24             	sub    eax,0x24
c000e353:	c1 e8 03             	shr    eax,0x3
c000e356:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e35a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e362:	66 90                	xchg   ax,ax
c000e364:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e368:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e36c:	0f 8d b6 00 00 00    	jge    c000e428 <loadACPITables(unsigned char*)+0x10c>
c000e372:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e376:	83 c0 24             	add    eax,0x24
c000e379:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e37d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e381:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e385:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e389:	c1 e0 03             	shl    eax,0x3
c000e38c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e390:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e394:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e397:	8b 00                	mov    eax,DWORD PTR [eax]
c000e399:	89 c1                	mov    ecx,eax
c000e39b:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c000e3a0:	8d 50 01             	lea    edx,[eax+0x1]
c000e3a3:	89 15 8c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f8c,edx
c000e3a9:	89 ca                	mov    edx,ecx
c000e3ab:	89 14 c5 a4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd05c],edx
c000e3b2:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e3b6:	eb ac                	jmp    c000e364 <loadACPITables(unsigned char*)+0x48>
c000e3b8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e3bc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e3c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e3c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3c7:	83 e8 24             	sub    eax,0x24
c000e3ca:	c1 e8 02             	shr    eax,0x2
c000e3cd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e3d1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e3d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3dc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e3e0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e3e4:	7d 42                	jge    c000e428 <loadACPITables(unsigned char*)+0x10c>
c000e3e6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e3ea:	83 c0 24             	add    eax,0x24
c000e3ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e3f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e3f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e3f9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e3fd:	c1 e0 02             	shl    eax,0x2
c000e400:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e404:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e408:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e40a:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c000e40f:	8d 50 01             	lea    edx,[eax+0x1]
c000e412:	89 15 8c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f8c,edx
c000e418:	89 ca                	mov    edx,ecx
c000e41a:	89 14 c5 a4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd05c],edx
c000e421:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e425:	eb b5                	jmp    c000e3dc <loadACPITables(unsigned char*)+0xc0>
c000e427:	90                   	nop
c000e428:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e430:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c000e435:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e439:	0f 8d 39 01 00 00    	jge    c000e578 <loadACPITables(unsigned char*)+0x25c>
c000e43f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e443:	8b 04 c5 a4 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd05c]
c000e44a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e44e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e452:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e456:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e45a:	25 ff 0f 00 00       	and    eax,0xfff
c000e45f:	89 c6                	mov    esi,eax
c000e461:	8b 1d 90 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a90
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	6a 01                	push   0x1
c000e46c:	e8 30 b4 ff ff       	call   c00098a1 <Virt::allocateKernelVirtualPages(int)>
c000e471:	83 c4 10             	add    esp,0x10
c000e474:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e478:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e47e:	83 ec 0c             	sub    esp,0xc
c000e481:	6a 01                	push   0x1
c000e483:	6a 01                	push   0x1
c000e485:	50                   	push   eax
c000e486:	52                   	push   edx
c000e487:	53                   	push   ebx
c000e488:	e8 a3 bd ff ff       	call   c000a230 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e48d:	83 c4 20             	add    esp,0x20
c000e490:	09 f0                	or     eax,esi
c000e492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e496:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e49a:	c1 e0 03             	shl    eax,0x3
c000e49d:	05 a0 2f 02 c0       	add    eax,0xc0022fa0
c000e4a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e4aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4ae:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e4b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e4ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e4c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e4ca:	89 c6                	mov    esi,eax
c000e4cc:	89 d7                	mov    edi,edx
c000e4ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4d0:	89 c8                	mov    eax,ecx
c000e4d2:	89 fa                	mov    edx,edi
c000e4d4:	89 f3                	mov    ebx,esi
c000e4d6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e4da:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e4de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e4e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e4e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e4ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4f1:	05 00 10 00 00       	add    eax,0x1000
c000e4f6:	c1 e8 0c             	shr    eax,0xc
c000e4f9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e4fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e501:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e505:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e509:	25 ff 0f 00 00       	and    eax,0xfff
c000e50e:	89 c6                	mov    esi,eax
c000e510:	8b 1d 90 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a90
c000e516:	83 ec 0c             	sub    esp,0xc
c000e519:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e51d:	e8 7f b3 ff ff       	call   c00098a1 <Virt::allocateKernelVirtualPages(int)>
c000e522:	83 c4 10             	add    esp,0x10
c000e525:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e529:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e52f:	83 ec 0c             	sub    esp,0xc
c000e532:	6a 01                	push   0x1
c000e534:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e538:	50                   	push   eax
c000e539:	52                   	push   edx
c000e53a:	53                   	push   ebx
c000e53b:	e8 f0 bc ff ff       	call   c000a230 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e540:	83 c4 20             	add    esp,0x20
c000e543:	09 f0                	or     eax,esi
c000e545:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e54d:	83 ec 0c             	sub    esp,0xc
c000e550:	50                   	push   eax
c000e551:	e8 7b b6 ff ff       	call   c0009bd1 <Virt::freeKernelVirtualPages(unsigned long)>
c000e556:	83 c4 10             	add    esp,0x10
c000e559:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e55d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e561:	89 14 c5 a4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd05c],edx
c000e568:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e56c:	e9 bf fe ff ff       	jmp    c000e430 <loadACPITables(unsigned char*)+0x114>
c000e571:	8d 76 00             	lea    esi,[esi+0x0]
c000e574:	90                   	nop
c000e575:	8d 76 00             	lea    esi,[esi+0x0]
c000e578:	83 c4 60             	add    esp,0x60
c000e57b:	5b                   	pop    ebx
c000e57c:	5e                   	pop    esi
c000e57d:	5f                   	pop    edi
c000e57e:	c3                   	ret    
c000e57f:	90                   	nop

c000e580 <findRSDT(unsigned char*)>:
c000e580:	57                   	push   edi
c000e581:	56                   	push   esi
c000e582:	53                   	push   ebx
c000e583:	83 ec 50             	sub    esp,0x50
c000e586:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000e58b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e591:	83 e0 04             	and    eax,0x4
c000e594:	84 c0                	test   al,al
c000e596:	75 0c                	jne    c000e5a4 <findRSDT(unsigned char*)+0x24>
c000e598:	b8 00 00 00 00       	mov    eax,0x0
c000e59d:	e9 26 01 00 00       	jmp    c000e6c8 <findRSDT(unsigned char*)+0x148>
c000e5a2:	66 90                	xchg   ax,ax
c000e5a4:	89 e0                	mov    eax,esp
c000e5a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e5aa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e5ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e5b2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e5ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e5be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e5c6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e5ca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e5ce:	89 c6                	mov    esi,eax
c000e5d0:	89 d7                	mov    edi,edx
c000e5d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5d4:	89 c8                	mov    eax,ecx
c000e5d6:	89 fa                	mov    edx,edi
c000e5d8:	89 f3                	mov    ebx,esi
c000e5da:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e5de:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e5e2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5e6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e5ea:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e5ee:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e5f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e606:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e60a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e60e:	25 ff 0f 00 00       	and    eax,0xfff
c000e613:	89 c6                	mov    esi,eax
c000e615:	8b 1d 90 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a90
c000e61b:	83 ec 0c             	sub    esp,0xc
c000e61e:	6a 02                	push   0x2
c000e620:	e8 7c b2 ff ff       	call   c00098a1 <Virt::allocateKernelVirtualPages(int)>
c000e625:	83 c4 10             	add    esp,0x10
c000e628:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e62c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e632:	83 ec 0c             	sub    esp,0xc
c000e635:	6a 01                	push   0x1
c000e637:	6a 02                	push   0x2
c000e639:	50                   	push   eax
c000e63a:	52                   	push   edx
c000e63b:	53                   	push   ebx
c000e63c:	e8 ef bb ff ff       	call   c000a230 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e641:	83 c4 20             	add    esp,0x20
c000e644:	09 f0                	or     eax,esi
c000e646:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e64a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e64e:	25 ff 0f 00 00       	and    eax,0xfff
c000e653:	89 c6                	mov    esi,eax
c000e655:	8b 1d 90 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a90
c000e65b:	83 ec 0c             	sub    esp,0xc
c000e65e:	6a 02                	push   0x2
c000e660:	e8 3c b2 ff ff       	call   c00098a1 <Virt::allocateKernelVirtualPages(int)>
c000e665:	83 c4 10             	add    esp,0x10
c000e668:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e66c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e672:	83 ec 0c             	sub    esp,0xc
c000e675:	6a 01                	push   0x1
c000e677:	6a 02                	push   0x2
c000e679:	50                   	push   eax
c000e67a:	52                   	push   edx
c000e67b:	53                   	push   ebx
c000e67c:	e8 af bb ff ff       	call   c000a230 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e681:	83 c4 20             	add    esp,0x20
c000e684:	09 f0                	or     eax,esi
c000e686:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e68a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e68f:	75 13                	jne    c000e6a4 <findRSDT(unsigned char*)+0x124>
c000e691:	c6 05 a0 31 02 c0 00 	mov    BYTE PTR ds:0xc00231a0,0x0
c000e698:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e69c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e6a0:	eb 22                	jmp    c000e6c4 <findRSDT(unsigned char*)+0x144>
c000e6a2:	66 90                	xchg   ax,ax
c000e6a4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e6a9:	75 11                	jne    c000e6bc <findRSDT(unsigned char*)+0x13c>
c000e6ab:	c6 05 a0 31 02 c0 01 	mov    BYTE PTR ds:0xc00231a0,0x1
c000e6b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6b6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e6ba:	eb 08                	jmp    c000e6c4 <findRSDT(unsigned char*)+0x144>
c000e6bc:	b8 00 00 00 00       	mov    eax,0x0
c000e6c1:	eb 05                	jmp    c000e6c8 <findRSDT(unsigned char*)+0x148>
c000e6c3:	90                   	nop
c000e6c4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e6c8:	83 c4 50             	add    esp,0x50
c000e6cb:	5b                   	pop    ebx
c000e6cc:	5e                   	pop    esi
c000e6cd:	5f                   	pop    edi
c000e6ce:	c3                   	ret    
c000e6cf:	90                   	nop

c000e6d0 <findDataTable(unsigned char*, char*)>:
c000e6d0:	83 ec 1c             	sub    esp,0x1c
c000e6d3:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000e6d8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6de:	83 e0 04             	and    eax,0x4
c000e6e1:	84 c0                	test   al,al
c000e6e3:	75 07                	jne    c000e6ec <findDataTable(unsigned char*, char*)+0x1c>
c000e6e5:	b8 00 00 00 00       	mov    eax,0x0
c000e6ea:	eb 58                	jmp    c000e744 <findDataTable(unsigned char*, char*)+0x74>
c000e6ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e6f4:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c000e6f9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e6fd:	7d 3d                	jge    c000e73c <findDataTable(unsigned char*, char*)+0x6c>
c000e6ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e703:	c1 e0 03             	shl    eax,0x3
c000e706:	05 a0 2f 02 c0       	add    eax,0xc0022fa0
c000e70b:	83 ec 04             	sub    esp,0x4
c000e70e:	6a 04                	push   0x4
c000e710:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e714:	50                   	push   eax
c000e715:	e8 96 1c ff ff       	call   c00003b0 <memcmp>
c000e71a:	83 c4 10             	add    esp,0x10
c000e71d:	85 c0                	test   eax,eax
c000e71f:	0f 94 c0             	sete   al
c000e722:	84 c0                	test   al,al
c000e724:	74 0e                	je     c000e734 <findDataTable(unsigned char*, char*)+0x64>
c000e726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e72a:	8b 04 c5 a4 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd05c]
c000e731:	eb 11                	jmp    c000e744 <findDataTable(unsigned char*, char*)+0x74>
c000e733:	90                   	nop
c000e734:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e738:	eb ba                	jmp    c000e6f4 <findDataTable(unsigned char*, char*)+0x24>
c000e73a:	66 90                	xchg   ax,ax
c000e73c:	b8 00 00 00 00       	mov    eax,0x0
c000e741:	8d 76 00             	lea    esi,[esi+0x0]
c000e744:	83 c4 1c             	add    esp,0x1c
c000e747:	c3                   	ret    

c000e748 <scanMADT()>:
c000e748:	53                   	push   ebx
c000e749:	83 ec 38             	sub    esp,0x38
c000e74c:	a1 b0 09 02 c0       	mov    eax,ds:0xc00209b0
c000e751:	25 00 04 00 00       	and    eax,0x400
c000e756:	74 14                	je     c000e76c <scanMADT()+0x24>
c000e758:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000e75d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e763:	83 e2 fb             	and    edx,0xfffffffb
c000e766:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e76c:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000e771:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e777:	83 e0 04             	and    eax,0x4
c000e77a:	84 c0                	test   al,al
c000e77c:	0f 84 8a 04 00 00    	je     c000ec0c <scanMADT()+0x4c4>
c000e782:	e8 05 fb ff ff       	call   c000e28c <findRSDP()>
c000e787:	a3 ac 31 02 c0       	mov    ds:0xc00231ac,eax
c000e78c:	a1 ac 31 02 c0       	mov    eax,ds:0xc00231ac
c000e791:	85 c0                	test   eax,eax
c000e793:	75 1b                	jne    c000e7b0 <scanMADT()+0x68>
c000e795:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000e79a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e7a0:	83 e2 fb             	and    edx,0xfffffffb
c000e7a3:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e7a9:	e9 66 04 00 00       	jmp    c000ec14 <scanMADT()+0x4cc>
c000e7ae:	66 90                	xchg   ax,ax
c000e7b0:	a1 ac 31 02 c0       	mov    eax,ds:0xc00231ac
c000e7b5:	83 ec 0c             	sub    esp,0xc
c000e7b8:	50                   	push   eax
c000e7b9:	e8 c2 fd ff ff       	call   c000e580 <findRSDT(unsigned char*)>
c000e7be:	83 c4 10             	add    esp,0x10
c000e7c1:	a3 a8 31 02 c0       	mov    ds:0xc00231a8,eax
c000e7c6:	a1 a8 31 02 c0       	mov    eax,ds:0xc00231a8
c000e7cb:	85 c0                	test   eax,eax
c000e7cd:	75 19                	jne    c000e7e8 <scanMADT()+0xa0>
c000e7cf:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000e7d4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e7da:	83 e2 fb             	and    edx,0xfffffffb
c000e7dd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e7e3:	e9 2c 04 00 00       	jmp    c000ec14 <scanMADT()+0x4cc>
c000e7e8:	a1 a8 31 02 c0       	mov    eax,ds:0xc00231a8
c000e7ed:	83 ec 0c             	sub    esp,0xc
c000e7f0:	50                   	push   eax
c000e7f1:	e8 26 fb ff ff       	call   c000e31c <loadACPITables(unsigned char*)>
c000e7f6:	83 c4 10             	add    esp,0x10
c000e7f9:	a1 a8 31 02 c0       	mov    eax,ds:0xc00231a8
c000e7fe:	83 ec 08             	sub    esp,0x8
c000e801:	68 88 e4 01 c0       	push   0xc001e488
c000e806:	50                   	push   eax
c000e807:	e8 c4 fe ff ff       	call   c000e6d0 <findDataTable(unsigned char*, char*)>
c000e80c:	83 c4 10             	add    esp,0x10
c000e80f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e813:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e818:	75 1a                	jne    c000e834 <scanMADT()+0xec>
c000e81a:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000e81f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e825:	83 e2 fe             	and    edx,0xfffffffe
c000e828:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e82e:	e9 e1 03 00 00       	jmp    c000ec14 <scanMADT()+0x4cc>
c000e833:	90                   	nop
c000e834:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e83c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e840:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e843:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e847:	0f 87 c7 03 00 00    	ja     c000ec14 <scanMADT()+0x4cc>
c000e84d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e855:	0f 87 b9 03 00 00    	ja     c000ec14 <scanMADT()+0x4cc>
c000e85b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e85f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e863:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e867:	8d 50 01             	lea    edx,[eax+0x1]
c000e86a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e86e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e872:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e876:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e87a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e87e:	8d 50 01             	lea    edx,[eax+0x1]
c000e881:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e885:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e889:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e88d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e891:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e896:	0f 86 74 03 00 00    	jbe    c000ec10 <scanMADT()+0x4c8>
c000e89c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e8a1:	75 5d                	jne    c000e900 <scanMADT()+0x1b8>
c000e8a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e8a7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e8ae:	8a 15 a0 33 02 c0    	mov    dl,BYTE PTR ds:0xc00233a0
c000e8b4:	81 e2 ff 00 00 00    	and    edx,0xff
c000e8ba:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e8be:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e8c2:	88 82 e0 33 02 c0    	mov    BYTE PTR [edx-0x3ffdcc20],al
c000e8c8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e8cc:	8d 42 01             	lea    eax,[edx+0x1]
c000e8cf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e8d3:	a0 a0 33 02 c0       	mov    al,ds:0xc00233a0
c000e8d8:	8d 48 01             	lea    ecx,[eax+0x1]
c000e8db:	88 0d a0 33 02 c0    	mov    BYTE PTR ds:0xc00233a0,cl
c000e8e1:	25 ff 00 00 00       	and    eax,0xff
c000e8e6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e8ea:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e8ee:	88 90 c0 33 02 c0    	mov    BYTE PTR [eax-0x3ffdcc40],dl
c000e8f4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e8f9:	e9 f6 02 00 00       	jmp    c000ebf4 <scanMADT()+0x4ac>
c000e8fe:	66 90                	xchg   ax,ax
c000e900:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e905:	0f 85 29 01 00 00    	jne    c000ea34 <scanMADT()+0x2ec>
c000e90b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e90f:	8d 50 01             	lea    edx,[eax+0x1]
c000e912:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e916:	8a 15 60 32 02 c0    	mov    dl,BYTE PTR ds:0xc0023260
c000e91c:	81 e2 ff 00 00 00    	and    edx,0xff
c000e922:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e926:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e92a:	88 82 80 32 02 c0    	mov    BYTE PTR [edx-0x3ffdcd80],al
c000e930:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e934:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e938:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e93c:	01 d0                	add    eax,edx
c000e93e:	83 c0 2c             	add    eax,0x2c
c000e941:	8a 00                	mov    al,BYTE PTR [eax]
c000e943:	31 d2                	xor    edx,edx
c000e945:	88 c2                	mov    dl,al
c000e947:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e94b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e94e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e952:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e956:	25 ff 00 00 00       	and    eax,0xff
c000e95b:	c1 e0 08             	shl    eax,0x8
c000e95e:	89 d1                	mov    ecx,edx
c000e960:	09 c1                	or     ecx,eax
c000e962:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e966:	8d 50 02             	lea    edx,[eax+0x2]
c000e969:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e96d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e971:	25 ff 00 00 00       	and    eax,0xff
c000e976:	c1 e0 10             	shl    eax,0x10
c000e979:	09 c1                	or     ecx,eax
c000e97b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e97f:	8d 50 03             	lea    edx,[eax+0x3]
c000e982:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e986:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e98a:	25 ff 00 00 00       	and    eax,0xff
c000e98f:	c1 e0 18             	shl    eax,0x18
c000e992:	09 c1                	or     ecx,eax
c000e994:	89 ca                	mov    edx,ecx
c000e996:	a0 60 32 02 c0       	mov    al,ds:0xc0023260
c000e99b:	25 ff 00 00 00       	and    eax,0xff
c000e9a0:	89 14 85 a0 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd60],edx
c000e9a7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9b4:	01 d0                	add    eax,edx
c000e9b6:	83 c0 2c             	add    eax,0x2c
c000e9b9:	8a 00                	mov    al,BYTE PTR [eax]
c000e9bb:	31 d2                	xor    edx,edx
c000e9bd:	88 c2                	mov    dl,al
c000e9bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9c3:	8d 48 01             	lea    ecx,[eax+0x1]
c000e9c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9ca:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e9ce:	25 ff 00 00 00       	and    eax,0xff
c000e9d3:	c1 e0 08             	shl    eax,0x8
c000e9d6:	89 d1                	mov    ecx,edx
c000e9d8:	09 c1                	or     ecx,eax
c000e9da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9de:	8d 50 02             	lea    edx,[eax+0x2]
c000e9e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9e5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e9e9:	25 ff 00 00 00       	and    eax,0xff
c000e9ee:	c1 e0 10             	shl    eax,0x10
c000e9f1:	09 c1                	or     ecx,eax
c000e9f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9f7:	8d 50 03             	lea    edx,[eax+0x3]
c000e9fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9fe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea02:	25 ff 00 00 00       	and    eax,0xff
c000ea07:	c1 e0 18             	shl    eax,0x18
c000ea0a:	09 c1                	or     ecx,eax
c000ea0c:	89 ca                	mov    edx,ecx
c000ea0e:	a0 60 32 02 c0       	mov    al,ds:0xc0023260
c000ea13:	25 ff 00 00 00       	and    eax,0xff
c000ea18:	89 14 85 20 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcce0],edx
c000ea1f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea24:	a0 60 32 02 c0       	mov    al,ds:0xc0023260
c000ea29:	40                   	inc    eax
c000ea2a:	a2 60 32 02 c0       	mov    ds:0xc0023260,al
c000ea2f:	e9 c0 01 00 00       	jmp    c000ebf4 <scanMADT()+0x4ac>
c000ea34:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000ea39:	0f 85 fd 00 00 00    	jne    c000eb3c <scanMADT()+0x3f4>
c000ea3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea43:	8d 50 01             	lea    edx,[eax+0x1]
c000ea46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea4e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ea52:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000ea56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea5a:	8d 50 01             	lea    edx,[eax+0x1]
c000ea5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea65:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ea69:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ea6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea75:	01 d0                	add    eax,edx
c000ea77:	83 c0 2c             	add    eax,0x2c
c000ea7a:	8a 00                	mov    al,BYTE PTR [eax]
c000ea7c:	31 d2                	xor    edx,edx
c000ea7e:	88 c2                	mov    dl,al
c000ea80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea84:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea8b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea8f:	25 ff 00 00 00       	and    eax,0xff
c000ea94:	c1 e0 08             	shl    eax,0x8
c000ea97:	89 d1                	mov    ecx,edx
c000ea99:	09 c1                	or     ecx,eax
c000ea9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea9f:	8d 50 02             	lea    edx,[eax+0x2]
c000eaa2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaa6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaaa:	25 ff 00 00 00       	and    eax,0xff
c000eaaf:	c1 e0 10             	shl    eax,0x10
c000eab2:	09 c1                	or     ecx,eax
c000eab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eab8:	8d 50 03             	lea    edx,[eax+0x3]
c000eabb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eabf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eac3:	25 ff 00 00 00       	and    eax,0xff
c000eac8:	c1 e0 18             	shl    eax,0x18
c000eacb:	09 c8                	or     eax,ecx
c000eacd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ead1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ead6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eada:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eade:	01 d0                	add    eax,edx
c000eae0:	83 c0 2c             	add    eax,0x2c
c000eae3:	8a 00                	mov    al,BYTE PTR [eax]
c000eae5:	25 ff 00 00 00       	and    eax,0xff
c000eaea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eaee:	8d 4a 01             	lea    ecx,[edx+0x1]
c000eaf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eaf5:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000eaf9:	81 e2 ff 00 00 00    	and    edx,0xff
c000eaff:	c1 e2 08             	shl    edx,0x8
c000eb02:	09 d0                	or     eax,edx
c000eb04:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000eb09:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000eb0e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000eb12:	25 ff 00 00 00       	and    eax,0xff
c000eb17:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb1b:	88 90 a0 f7 01 c0    	mov    BYTE PTR [eax-0x3ffe0860],dl
c000eb21:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000eb25:	31 d2                	xor    edx,edx
c000eb27:	88 c2                	mov    dl,al
c000eb29:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000eb2e:	66 89 84 12 40 32 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdcdc0],ax
c000eb36:	e9 b9 00 00 00       	jmp    c000ebf4 <scanMADT()+0x4ac>
c000eb3b:	90                   	nop
c000eb3c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000eb41:	0f 85 a1 00 00 00    	jne    c000ebe8 <scanMADT()+0x4a0>
c000eb47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb4b:	8d 50 01             	lea    edx,[eax+0x1]
c000eb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb56:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb5a:	25 ff 00 00 00       	and    eax,0xff
c000eb5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eb63:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb6b:	01 d0                	add    eax,edx
c000eb6d:	83 c0 2c             	add    eax,0x2c
c000eb70:	8a 00                	mov    al,BYTE PTR [eax]
c000eb72:	31 d2                	xor    edx,edx
c000eb74:	88 c2                	mov    dl,al
c000eb76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb7a:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb81:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb85:	25 ff 00 00 00       	and    eax,0xff
c000eb8a:	c1 e0 08             	shl    eax,0x8
c000eb8d:	09 d0                	or     eax,edx
c000eb8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eb93:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000eb98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb9c:	8d 50 01             	lea    edx,[eax+0x1]
c000eb9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eba3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eba7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebab:	25 ff 00 00 00       	and    eax,0xff
c000ebb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebb8:	c1 e0 08             	shl    eax,0x8
c000ebbb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ebbf:	89 c1                	mov    ecx,eax
c000ebc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebc5:	c1 e0 18             	shl    eax,0x18
c000ebc8:	89 c3                	mov    ebx,eax
c000ebca:	a1 b0 31 02 c0       	mov    eax,ds:0xc00231b0
c000ebcf:	8d 50 01             	lea    edx,[eax+0x1]
c000ebd2:	89 15 b0 31 02 c0    	mov    DWORD PTR ds:0xc00231b0,edx
c000ebd8:	09 d9                	or     ecx,ebx
c000ebda:	89 ca                	mov    edx,ecx
c000ebdc:	89 14 85 c0 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce40],edx
c000ebe3:	eb 0f                	jmp    c000ebf4 <scanMADT()+0x4ac>
c000ebe5:	8d 76 00             	lea    esi,[esi+0x0]
c000ebe8:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000ebed:	75 05                	jne    c000ebf4 <scanMADT()+0x4ac>
c000ebef:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ebf4:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000ebf8:	31 d2                	xor    edx,edx
c000ebfa:	88 c2                	mov    dl,al
c000ebfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ec00:	01 d0                	add    eax,edx
c000ec02:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ec06:	e9 31 fc ff ff       	jmp    c000e83c <scanMADT()+0xf4>
c000ec0b:	90                   	nop
c000ec0c:	90                   	nop
c000ec0d:	eb 05                	jmp    c000ec14 <scanMADT()+0x4cc>
c000ec0f:	90                   	nop
c000ec10:	90                   	nop
c000ec11:	8d 76 00             	lea    esi,[esi+0x0]
c000ec14:	83 c4 38             	add    esp,0x38
c000ec17:	5b                   	pop    ebx
c000ec18:	c3                   	ret    
c000ec19:	90                   	nop
c000ec1a:	66 90                	xchg   ax,ax

c000ec1c <ACPI::ACPI()>:
c000ec1c:	83 ec 0c             	sub    esp,0xc
c000ec1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec23:	83 ec 08             	sub    esp,0x8
c000ec26:	68 8d e4 01 c0       	push   0xc001e48d
c000ec2b:	50                   	push   eax
c000ec2c:	e8 9b d4 ff ff       	call   c000c0cc <Device::Device(char const*)>
c000ec31:	83 c4 10             	add    esp,0x10
c000ec34:	ba c4 e5 01 c0       	mov    edx,0xc001e5c4
c000ec39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec3d:	89 10                	mov    DWORD PTR [eax],edx
c000ec3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec43:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ec4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec4e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ec58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec5c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ec66:	e8 dd fa ff ff       	call   c000e748 <scanMADT()>
c000ec6b:	90                   	nop
c000ec6c:	83 c4 0c             	add    esp,0xc
c000ec6f:	c3                   	ret    

c000ec70 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ec70:	83 ec 2c             	sub    esp,0x2c
c000ec73:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ec77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec7b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ec7f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000ec83:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ec88:	88 d0                	mov    al,dl
c000ec8a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ec8e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ec93:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ec9b:	90                   	nop
c000ec9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eca0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eca6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ecaa:	0f 8d 9c 00 00 00    	jge    c000ed4c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000ecb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecb4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecb8:	83 c2 2a             	add    edx,0x2a
c000ecbb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ecbf:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000ecc4:	75 7a                	jne    c000ed40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ecc6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecce:	83 c2 2a             	add    edx,0x2a
c000ecd1:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ecd5:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000ecd9:	75 65                	jne    c000ed40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ecdb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ece0:	74 3a                	je     c000ed1c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000ece2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ece6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecea:	83 c2 2a             	add    edx,0x2a
c000eced:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ecf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ecf8:	39 c2                	cmp    edx,eax
c000ecfa:	74 10                	je     c000ed0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000ecfc:	83 ec 0c             	sub    esp,0xc
c000ecff:	68 08 e4 01 c0       	push   0xc001e408
c000ed04:	e8 ba 19 00 00       	call   c00106c3 <KePanic(char const*)>
c000ed09:	83 c4 10             	add    esp,0x10
c000ed0c:	83 ec 0c             	sub    esp,0xc
c000ed0f:	68 92 e4 01 c0       	push   0xc001e492
c000ed14:	e8 aa 19 00 00       	call   c00106c3 <KePanic(char const*)>
c000ed19:	83 c4 10             	add    esp,0x10
c000ed1c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ed20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed28:	83 c2 2a             	add    edx,0x2a
c000ed2b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ed2f:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed31:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ed34:	89 01                	mov    DWORD PTR [ecx],eax
c000ed36:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ed39:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ed3e:	66 90                	xchg   ax,ax
c000ed40:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ed44:	e9 53 ff ff ff       	jmp    c000ec9c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ed49:	8d 76 00             	lea    esi,[esi+0x0]
c000ed4c:	90                   	nop
c000ed4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed51:	83 c4 2c             	add    esp,0x2c
c000ed54:	c2 04 00             	ret    0x4
c000ed57:	90                   	nop

c000ed58 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ed58:	83 ec 1c             	sub    esp,0x1c
c000ed5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed5f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ed63:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ed67:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ed6c:	88 c8                	mov    al,cl
c000ed6e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ed72:	88 d0                	mov    al,dl
c000ed74:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed7c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ed82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed86:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ed89:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ed8d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ed91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed95:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ed9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ed9f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000eda2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eda6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000edab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edaf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000edb5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000edb9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edc0:	83 c2 2a             	add    edx,0x2a
c000edc3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000edc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edcb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000edd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edd5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000edd8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000eddc:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ede0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ede4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edea:	8d 50 01             	lea    edx,[eax+0x1]
c000eded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edf1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000edf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edfb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee01:	3d 00 02 00 00       	cmp    eax,0x200
c000ee06:	75 10                	jne    c000ee18 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ee08:	83 ec 0c             	sub    esp,0xc
c000ee0b:	68 a1 e4 01 c0       	push   0xc001e4a1
c000ee10:	e8 ae 18 00 00       	call   c00106c3 <KePanic(char const*)>
c000ee15:	83 c4 10             	add    esp,0x10
c000ee18:	90                   	nop
c000ee19:	83 c4 1c             	add    esp,0x1c
c000ee1c:	c3                   	ret    
c000ee1d:	90                   	nop
c000ee1e:	66 90                	xchg   ax,ax

c000ee20 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ee20:	b8 00 00 00 00       	mov    eax,0x0
c000ee25:	c3                   	ret    
c000ee26:	66 90                	xchg   ax,ax

c000ee28 <ACPI::detectPCI()>:
c000ee28:	53                   	push   ebx
c000ee29:	83 ec 28             	sub    esp,0x28
c000ee2c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ee31:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ee36:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000ee3b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ee41:	83 e0 04             	and    eax,0x4
c000ee44:	84 c0                	test   al,al
c000ee46:	74 2c                	je     c000ee74 <ACPI::detectPCI()+0x4c>
c000ee48:	a1 a8 31 02 c0       	mov    eax,ds:0xc00231a8
c000ee4d:	83 ec 08             	sub    esp,0x8
c000ee50:	68 be e4 01 c0       	push   0xc001e4be
c000ee55:	50                   	push   eax
c000ee56:	e8 75 f8 ff ff       	call   c000e6d0 <findDataTable(unsigned char*, char*)>
c000ee5b:	83 c4 10             	add    esp,0x10
c000ee5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee62:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ee67:	74 0b                	je     c000ee74 <ACPI::detectPCI()+0x4c>
c000ee69:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee6e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ee73:	90                   	nop
c000ee74:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ee7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee80:	8a 00                	mov    al,BYTE PTR [eax]
c000ee82:	3c 01                	cmp    al,0x1
c000ee84:	75 0e                	jne    c000ee94 <ACPI::detectPCI()+0x6c>
c000ee86:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee8b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ee90:	eb 2a                	jmp    c000eebc <ACPI::detectPCI()+0x94>
c000ee92:	66 90                	xchg   ax,ax
c000ee94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee98:	8a 00                	mov    al,BYTE PTR [eax]
c000ee9a:	3c 02                	cmp    al,0x2
c000ee9c:	75 1e                	jne    c000eebc <ACPI::detectPCI()+0x94>
c000ee9e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eea3:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eea8:	74 12                	je     c000eebc <ACPI::detectPCI()+0x94>
c000eeaa:	83 ec 0c             	sub    esp,0xc
c000eead:	68 38 e4 01 c0       	push   0xc001e438
c000eeb2:	e8 0c 18 00 00       	call   c00106c3 <KePanic(char const*)>
c000eeb7:	83 c4 10             	add    esp,0x10
c000eeba:	66 90                	xchg   ax,ax
c000eebc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eec0:	83 f0 01             	xor    eax,0x1
c000eec3:	84 c0                	test   al,al
c000eec5:	74 41                	je     c000ef08 <ACPI::detectPCI()+0xe0>
c000eec7:	e8 84 12 ff ff       	call   c0000150 <manualPCIProbe>
c000eecc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eed0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eed5:	75 0d                	jne    c000eee4 <ACPI::detectPCI()+0xbc>
c000eed7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eedc:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eee1:	eb 25                	jmp    c000ef08 <ACPI::detectPCI()+0xe0>
c000eee3:	90                   	nop
c000eee4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eee9:	75 1d                	jne    c000ef08 <ACPI::detectPCI()+0xe0>
c000eeeb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eef0:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eef5:	74 11                	je     c000ef08 <ACPI::detectPCI()+0xe0>
c000eef7:	83 ec 0c             	sub    esp,0xc
c000eefa:	68 38 e4 01 c0       	push   0xc001e438
c000eeff:	e8 bf 17 00 00       	call   c00106c3 <KePanic(char const*)>
c000ef04:	83 c4 10             	add    esp,0x10
c000ef07:	90                   	nop
c000ef08:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ef0d:	0f 84 85 00 00 00    	je     c000ef98 <ACPI::detectPCI()+0x170>
c000ef13:	83 ec 0c             	sub    esp,0xc
c000ef16:	68 c3 e4 01 c0       	push   0xc001e4c3
c000ef1b:	e8 bf 11 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c000ef20:	83 c4 10             	add    esp,0x10
c000ef23:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ef2b:	83 ec 0c             	sub    esp,0xc
c000ef2e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ef32:	e8 26 8f ff ff       	call   c0007e5d <malloc>
c000ef37:	83 c4 10             	add    esp,0x10
c000ef3a:	89 c3                	mov    ebx,eax
c000ef3c:	83 ec 0c             	sub    esp,0xc
c000ef3f:	53                   	push   ebx
c000ef40:	e8 19 96 00 00       	call   c001855e <PCI::PCI()>
c000ef45:	83 c4 10             	add    esp,0x10
c000ef48:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef50:	83 ec 08             	sub    esp,0x8
c000ef53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef57:	50                   	push   eax
c000ef58:	e8 d7 cf ff ff       	call   c000bf34 <Device::addChild(Device*)>
c000ef5d:	83 c4 10             	add    esp,0x10
c000ef60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef64:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef66:	83 c0 08             	add    eax,0x8
c000ef69:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef6b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ef70:	74 0a                	je     c000ef7c <ACPI::detectPCI()+0x154>
c000ef72:	ba 01 00 00 00       	mov    edx,0x1
c000ef77:	eb 0b                	jmp    c000ef84 <ACPI::detectPCI()+0x15c>
c000ef79:	8d 76 00             	lea    esi,[esi+0x0]
c000ef7c:	ba 02 00 00 00       	mov    edx,0x2
c000ef81:	8d 76 00             	lea    esi,[esi+0x0]
c000ef84:	6a 00                	push   0x0
c000ef86:	6a 00                	push   0x0
c000ef88:	52                   	push   edx
c000ef89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef8d:	ff d0                	call   eax
c000ef8f:	83 c4 10             	add    esp,0x10
c000ef92:	e9 91 00 00 00       	jmp    c000f028 <ACPI::detectPCI()+0x200>
c000ef97:	90                   	nop
c000ef98:	83 ec 0c             	sub    esp,0xc
c000ef9b:	68 db e4 01 c0       	push   0xc001e4db
c000efa0:	e8 3a 11 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c000efa5:	83 c4 10             	add    esp,0x10
c000efa8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000efaf:	83 ec 0c             	sub    esp,0xc
c000efb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000efb6:	e8 a2 8e ff ff       	call   c0007e5d <malloc>
c000efbb:	83 c4 10             	add    esp,0x10
c000efbe:	89 c3                	mov    ebx,eax
c000efc0:	83 ec 0c             	sub    esp,0xc
c000efc3:	53                   	push   ebx
c000efc4:	e8 c1 a0 00 00       	call   c001908a <IDE::IDE()>
c000efc9:	83 c4 10             	add    esp,0x10
c000efcc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000efd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000efd4:	83 ec 08             	sub    esp,0x8
c000efd7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000efdb:	50                   	push   eax
c000efdc:	e8 53 cf ff ff       	call   c000bf34 <Device::addChild(Device*)>
c000efe1:	83 c4 10             	add    esp,0x10
c000efe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000eff2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eff6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000efff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f003:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	8b 00                	mov    eax,DWORD PTR [eax]
c000f012:	83 c0 08             	add    eax,0x8
c000f015:	8b 00                	mov    eax,DWORD PTR [eax]
c000f017:	6a 00                	push   0x0
c000f019:	6a 00                	push   0x0
c000f01b:	6a 00                	push   0x0
c000f01d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f021:	ff d0                	call   eax
c000f023:	83 c4 10             	add    esp,0x10
c000f026:	66 90                	xchg   ax,ax
c000f028:	90                   	nop
c000f029:	83 c4 28             	add    esp,0x28
c000f02c:	5b                   	pop    ebx
c000f02d:	c3                   	ret    
c000f02e:	66 90                	xchg   ax,ax

c000f030 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f030:	83 ec 1c             	sub    esp,0x1c
c000f033:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f037:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f03a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f03e:	8b 15 98 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020998
c000f044:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f048:	25 ff 00 00 00       	and    eax,0xff
c000f04d:	83 ec 08             	sub    esp,0x8
c000f050:	50                   	push   eax
c000f051:	52                   	push   edx
c000f052:	e8 f3 84 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c000f057:	83 c4 10             	add    esp,0x10
c000f05a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f05e:	8b 15 98 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020998
c000f064:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f068:	25 ff 00 00 00       	and    eax,0xff
c000f06d:	83 ec 04             	sub    esp,0x4
c000f070:	6a 01                	push   0x1
c000f072:	50                   	push   eax
c000f073:	52                   	push   edx
c000f074:	e8 e7 85 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f079:	83 c4 10             	add    esp,0x10
c000f07c:	90                   	nop
c000f07d:	83 c4 1c             	add    esp,0x1c
c000f080:	c3                   	ret    
c000f081:	90                   	nop
c000f082:	66 90                	xchg   ax,ax

c000f084 <ACPI::sleep()>:
c000f084:	83 ec 0c             	sub    esp,0xc
c000f087:	a1 80 2f 02 c0       	mov    eax,ds:0xc0022f80
c000f08c:	85 c0                	test   eax,eax
c000f08e:	74 08                	je     c000f098 <ACPI::sleep()+0x14>
c000f090:	a1 80 2f 02 c0       	mov    eax,ds:0xc0022f80
c000f095:	ff d0                	call   eax
c000f097:	90                   	nop
c000f098:	90                   	nop
c000f099:	83 c4 0c             	add    esp,0xc
c000f09c:	c3                   	ret    
c000f09d:	90                   	nop
c000f09e:	66 90                	xchg   ax,ax

c000f0a0 <ACPI::open(int, int, void*)>:
c000f0a0:	57                   	push   edi
c000f0a1:	56                   	push   esi
c000f0a2:	53                   	push   ebx
c000f0a3:	81 ec 70 01 00 00    	sub    esp,0x170
c000f0a9:	83 ec 0c             	sub    esp,0xc
c000f0ac:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f0b3:	e8 70 fd ff ff       	call   c000ee28 <ACPI::detectPCI()>
c000f0b8:	83 c4 10             	add    esp,0x10
c000f0bb:	83 ec 0c             	sub    esp,0xc
c000f0be:	68 60 e4 01 c0       	push   0xc001e460
c000f0c3:	e8 17 10 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c000f0c8:	83 c4 10             	add    esp,0x10
c000f0cb:	83 ec 0c             	sub    esp,0xc
c000f0ce:	68 f0 e4 01 c0       	push   0xc001e4f0
c000f0d3:	e8 db 33 00 00       	call   c00124b3 <Thr::loadKernelSymbolTable(char const*)>
c000f0d8:	83 c4 10             	add    esp,0x10
c000f0db:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f0e3:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f0ee:	83 ec 0c             	sub    esp,0xc
c000f0f1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f0f8:	e8 60 8d ff ff       	call   c0007e5d <malloc>
c000f0fd:	83 c4 10             	add    esp,0x10
c000f100:	89 c3                	mov    ebx,eax
c000f102:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c000f107:	83 ec 04             	sub    esp,0x4
c000f10a:	50                   	push   eax
c000f10b:	68 0e e5 01 c0       	push   0xc001e50e
c000f110:	53                   	push   ebx
c000f111:	e8 54 bf ff ff       	call   c000b06a <File::File(char const*, Process*)>
c000f116:	83 c4 10             	add    esp,0x10
c000f119:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f120:	83 ec 08             	sub    esp,0x8
c000f123:	6a 01                	push   0x1
c000f125:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f12c:	e8 f9 bf ff ff       	call   c000b12a <File::open(FileOpenMode)>
c000f131:	83 c4 10             	add    esp,0x10
c000f134:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f13b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f143:	75 17                	jne    c000f15c <ACPI::open(int, int, void*)+0xbc>
c000f145:	83 ec 0c             	sub    esp,0xc
c000f148:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f14f:	e8 34 c0 ff ff       	call   c000b188 <File::close()>
c000f154:	83 c4 10             	add    esp,0x10
c000f157:	eb 0b                	jmp    c000f164 <ACPI::open(int, int, void*)+0xc4>
c000f159:	8d 76 00             	lea    esi,[esi+0x0]
c000f15c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f164:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f16c:	74 1e                	je     c000f18c <ACPI::open(int, int, void*)+0xec>
c000f16e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f175:	8b 00                	mov    eax,DWORD PTR [eax]
c000f177:	83 c0 08             	add    eax,0x8
c000f17a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f17c:	83 ec 0c             	sub    esp,0xc
c000f17f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f186:	ff d0                	call   eax
c000f188:	83 c4 10             	add    esp,0x10
c000f18b:	90                   	nop
c000f18c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f193:	83 f0 01             	xor    eax,0x1
c000f196:	84 c0                	test   al,al
c000f198:	74 42                	je     c000f1dc <ACPI::open(int, int, void*)+0x13c>
c000f19a:	83 ec 0c             	sub    esp,0xc
c000f19d:	68 2c e5 01 c0       	push   0xc001e52c
c000f1a2:	e8 38 0f 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c000f1a7:	83 c4 10             	add    esp,0x10
c000f1aa:	83 ec 04             	sub    esp,0x4
c000f1ad:	6a 0c                	push   0xc
c000f1af:	68 47 e5 01 c0       	push   0xc001e547
c000f1b4:	68 58 e5 01 c0       	push   0xc001e558
c000f1b9:	e8 20 29 00 00       	call   c0011ade <Reg::readIntWithDefault(char*, char*, int)>
c000f1be:	83 c4 10             	add    esp,0x10
c000f1c1:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f1c8:	83 ec 0c             	sub    esp,0xc
c000f1cb:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f1d2:	e8 d4 a8 ff ff       	call   c0009aab <Virt::setupPageSwapping(int)>
c000f1d7:	83 c4 10             	add    esp,0x10
c000f1da:	66 90                	xchg   ax,ax
c000f1dc:	83 ec 0c             	sub    esp,0xc
c000f1df:	68 e0 d5 01 c0       	push   0xc001d5e0
c000f1e4:	e8 f6 0e 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c000f1e9:	83 c4 10             	add    esp,0x10
c000f1ec:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f1f3:	83 ec 08             	sub    esp,0x8
c000f1f6:	6a 12                	push   0x12
c000f1f8:	50                   	push   eax
c000f1f9:	e8 4e d0 ff ff       	call   c000c24c <getDevicesOfType(DeviceType)>
c000f1fe:	83 c4 0c             	add    esp,0xc
c000f201:	8d 76 00             	lea    esi,[esi+0x0]
c000f204:	83 ec 0c             	sub    esp,0xc
c000f207:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f20e:	50                   	push   eax
c000f20f:	e8 c8 d7 00 00       	call   c001c9dc <LinkedList<Device>::isEmpty()>
c000f214:	83 c4 10             	add    esp,0x10
c000f217:	83 f0 01             	xor    eax,0x1
c000f21a:	84 c0                	test   al,al
c000f21c:	0f 84 46 01 00 00    	je     c000f368 <ACPI::open(int, int, void*)+0x2c8>
c000f222:	83 ec 0c             	sub    esp,0xc
c000f225:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f22c:	50                   	push   eax
c000f22d:	e8 c6 d7 00 00       	call   c001c9f8 <LinkedList<Device>::getFirstElement()>
c000f232:	83 c4 10             	add    esp,0x10
c000f235:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f23c:	83 ec 0c             	sub    esp,0xc
c000f23f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f246:	50                   	push   eax
c000f247:	e8 b4 d7 00 00       	call   c001ca00 <LinkedList<Device>::removeFirst()>
c000f24c:	83 c4 10             	add    esp,0x10
c000f24f:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f256:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f25d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f264:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f268:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f26e:	ba 09 00 00 00       	mov    edx,0x9
c000f273:	fc                   	cld    
c000f274:	89 c7                	mov    edi,eax
c000f276:	89 de                	mov    esi,ebx
c000f278:	89 d1                	mov    ecx,edx
c000f27a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f27c:	83 ec 08             	sub    esp,0x8
c000f27f:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f283:	50                   	push   eax
c000f284:	83 ec 24             	sub    esp,0x24
c000f287:	89 e0                	mov    eax,esp
c000f289:	89 c3                	mov    ebx,eax
c000f28b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f28f:	ba 09 00 00 00       	mov    edx,0x9
c000f294:	89 df                	mov    edi,ebx
c000f296:	89 c6                	mov    esi,eax
c000f298:	89 d1                	mov    ecx,edx
c000f29a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f29c:	e8 9f 97 00 00       	call   c0018a40 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f2a1:	83 c4 30             	add    esp,0x30
c000f2a4:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f2ab:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f2b3:	0f 84 4b ff ff ff    	je     c000f204 <ACPI::open(int, int, void*)+0x164>
c000f2b9:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f2c4:	83 ec 0c             	sub    esp,0xc
c000f2c7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f2ce:	e8 8a 8b ff ff       	call   c0007e5d <malloc>
c000f2d3:	83 c4 10             	add    esp,0x10
c000f2d6:	89 c3                	mov    ebx,eax
c000f2d8:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c000f2dd:	83 ec 04             	sub    esp,0x4
c000f2e0:	50                   	push   eax
c000f2e1:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f2e8:	53                   	push   ebx
c000f2e9:	e8 7c bd ff ff       	call   c000b06a <File::File(char const*, Process*)>
c000f2ee:	83 c4 10             	add    esp,0x10
c000f2f1:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f2f8:	83 ec 0c             	sub    esp,0xc
c000f2fb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f302:	e8 91 c0 ff ff       	call   c000b398 <File::exists()>
c000f307:	83 c4 10             	add    esp,0x10
c000f30a:	84 c0                	test   al,al
c000f30c:	74 2a                	je     c000f338 <ACPI::open(int, int, void*)+0x298>
c000f30e:	83 ec 08             	sub    esp,0x8
c000f311:	6a 01                	push   0x1
c000f313:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f31a:	e8 0b 3c 00 00       	call   c0012f2a <Thr::loadDLL(char const*, bool)>
c000f31f:	83 c4 10             	add    esp,0x10
c000f322:	83 ec 08             	sub    esp,0x8
c000f325:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f32c:	50                   	push   eax
c000f32d:	e8 29 3e 00 00       	call   c001315b <Thr::executeDLL(unsigned long, void*)>
c000f332:	83 c4 10             	add    esp,0x10
c000f335:	8d 76 00             	lea    esi,[esi+0x0]
c000f338:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f340:	0f 84 be fe ff ff    	je     c000f204 <ACPI::open(int, int, void*)+0x164>
c000f346:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f34d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f34f:	83 c0 08             	add    eax,0x8
c000f352:	8b 00                	mov    eax,DWORD PTR [eax]
c000f354:	83 ec 0c             	sub    esp,0xc
c000f357:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f35e:	ff d0                	call   eax
c000f360:	83 c4 10             	add    esp,0x10
c000f363:	e9 9c fe ff ff       	jmp    c000f204 <ACPI::open(int, int, void*)+0x164>
c000f368:	83 ec 0c             	sub    esp,0xc
c000f36b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f372:	50                   	push   eax
c000f373:	e8 60 d6 00 00       	call   c001c9d8 <LinkedList<Device>::~LinkedList()>
c000f378:	83 c4 10             	add    esp,0x10
c000f37b:	8b 1d 98 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020998
c000f381:	83 ec 08             	sub    esp,0x8
c000f384:	6a 01                	push   0x1
c000f386:	68 5f e5 01 c0       	push   0xc001e55f
c000f38b:	e8 9a 3b 00 00       	call   c0012f2a <Thr::loadDLL(char const*, bool)>
c000f390:	83 c4 10             	add    esp,0x10
c000f393:	83 ec 08             	sub    esp,0x8
c000f396:	53                   	push   ebx
c000f397:	50                   	push   eax
c000f398:	e8 be 3d 00 00       	call   c001315b <Thr::executeDLL(unsigned long, void*)>
c000f39d:	83 c4 10             	add    esp,0x10
c000f3a0:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000f3a5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f3ab:	83 e0 04             	and    eax,0x4
c000f3ae:	84 c0                	test   al,al
c000f3b0:	0f 84 16 01 00 00    	je     c000f4cc <ACPI::open(int, int, void*)+0x42c>
c000f3b6:	83 ec 0c             	sub    esp,0xc
c000f3b9:	68 7c e5 01 c0       	push   0xc001e57c
c000f3be:	e8 1c 0d 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c000f3c3:	83 c4 10             	add    esp,0x10
c000f3c6:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f3d1:	83 ec 0c             	sub    esp,0xc
c000f3d4:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f3db:	e8 7d 8a ff ff       	call   c0007e5d <malloc>
c000f3e0:	83 c4 10             	add    esp,0x10
c000f3e3:	89 c3                	mov    ebx,eax
c000f3e5:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c000f3ea:	83 ec 04             	sub    esp,0x4
c000f3ed:	50                   	push   eax
c000f3ee:	68 99 e5 01 c0       	push   0xc001e599
c000f3f3:	53                   	push   ebx
c000f3f4:	e8 71 bc ff ff       	call   c000b06a <File::File(char const*, Process*)>
c000f3f9:	83 c4 10             	add    esp,0x10
c000f3fc:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f403:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f40b:	74 1b                	je     c000f428 <ACPI::open(int, int, void*)+0x388>
c000f40d:	83 ec 0c             	sub    esp,0xc
c000f410:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f417:	e8 7c bf ff ff       	call   c000b398 <File::exists()>
c000f41c:	83 c4 10             	add    esp,0x10
c000f41f:	84 c0                	test   al,al
c000f421:	74 05                	je     c000f428 <ACPI::open(int, int, void*)+0x388>
c000f423:	b0 01                	mov    al,0x1
c000f425:	eb 05                	jmp    c000f42c <ACPI::open(int, int, void*)+0x38c>
c000f427:	90                   	nop
c000f428:	b0 00                	mov    al,0x0
c000f42a:	66 90                	xchg   ax,ax
c000f42c:	84 c0                	test   al,al
c000f42e:	74 28                	je     c000f458 <ACPI::open(int, int, void*)+0x3b8>
c000f430:	83 ec 08             	sub    esp,0x8
c000f433:	6a 01                	push   0x1
c000f435:	68 99 e5 01 c0       	push   0xc001e599
c000f43a:	e8 eb 3a 00 00       	call   c0012f2a <Thr::loadDLL(char const*, bool)>
c000f43f:	83 c4 10             	add    esp,0x10
c000f442:	83 ec 08             	sub    esp,0x8
c000f445:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f44c:	50                   	push   eax
c000f44d:	e8 09 3d 00 00       	call   c001315b <Thr::executeDLL(unsigned long, void*)>
c000f452:	83 c4 10             	add    esp,0x10
c000f455:	8d 76 00             	lea    esi,[esi+0x0]
c000f458:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f460:	74 2a                	je     c000f48c <ACPI::open(int, int, void*)+0x3ec>
c000f462:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f46a:	74 20                	je     c000f48c <ACPI::open(int, int, void*)+0x3ec>
c000f46c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f473:	8b 00                	mov    eax,DWORD PTR [eax]
c000f475:	83 c0 08             	add    eax,0x8
c000f478:	8b 00                	mov    eax,DWORD PTR [eax]
c000f47a:	83 ec 0c             	sub    esp,0xc
c000f47d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f484:	ff d0                	call   eax
c000f486:	83 c4 10             	add    esp,0x10
c000f489:	8d 76 00             	lea    esi,[esi+0x0]
c000f48c:	a1 a8 31 02 c0       	mov    eax,ds:0xc00231a8
c000f491:	83 ec 08             	sub    esp,0x8
c000f494:	68 b6 e5 01 c0       	push   0xc001e5b6
c000f499:	50                   	push   eax
c000f49a:	e8 31 f2 ff ff       	call   c000e6d0 <findDataTable(unsigned char*, char*)>
c000f49f:	83 c4 10             	add    esp,0x10
c000f4a2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f4a9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f4b1:	74 19                	je     c000f4cc <ACPI::open(int, int, void*)+0x42c>
c000f4b3:	83 ec 08             	sub    esp,0x8
c000f4b6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f4bd:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f4c4:	e8 67 fb ff ff       	call   c000f030 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f4c9:	83 c4 10             	add    esp,0x10
c000f4cc:	b8 00 00 00 00       	mov    eax,0x0
c000f4d1:	81 c4 70 01 00 00    	add    esp,0x170
c000f4d7:	5b                   	pop    ebx
c000f4d8:	5e                   	pop    esi
c000f4d9:	5f                   	pop    edi
c000f4da:	c3                   	ret    
c000f4db:	90                   	nop

c000f4dc <CPU::close(int, int, void*)>:
c000f4dc:	31 c0                	xor    eax,eax
c000f4de:	c3                   	ret    
c000f4df:	90                   	nop

c000f4e0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f4e0:	60                   	pusha  
c000f4e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f4e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f4ed:	9c                   	pushf  
c000f4ee:	fa                   	cli    
c000f4ef:	0f 09                	wbinvd 
c000f4f1:	0f 30                	wrmsr  
c000f4f3:	9d                   	popf   
c000f4f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f4f8:	89 02                	mov    DWORD PTR [edx],eax
c000f4fa:	61                   	popa   
c000f4fb:	c3                   	ret    

c000f4fc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f4fc:	60                   	pusha  
c000f4fd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f501:	9c                   	pushf  
c000f502:	fa                   	cli    
c000f503:	0f 09                	wbinvd 
c000f505:	31 c0                	xor    eax,eax
c000f507:	31 d2                	xor    edx,edx
c000f509:	0f 32                	rdmsr  
c000f50b:	9d                   	popf   
c000f50c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f510:	89 02                	mov    DWORD PTR [edx],eax
c000f512:	61                   	popa   
c000f513:	c3                   	ret    

c000f514 <CPU::AMD_K6_writeback(int, int, int)>:
c000f514:	56                   	push   esi
c000f515:	53                   	push   ebx
c000f516:	83 ec 10             	sub    esp,0x10
c000f519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f51d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f522:	75 5d                	jne    c000f581 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f524:	83 f8 08             	cmp    eax,0x8
c000f527:	75 09                	jne    c000f532 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f529:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f52e:	7e 13                	jle    c000f543 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f530:	eb 30                	jmp    c000f562 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f532:	83 f8 06             	cmp    eax,0x6
c000f535:	7c 4a                	jl     c000f581 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f537:	83 f8 07             	cmp    eax,0x7
c000f53a:	7e 07                	jle    c000f543 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f53c:	83 f8 09             	cmp    eax,0x9
c000f53f:	74 21                	je     c000f562 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f541:	eb 3e                	jmp    c000f581 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f543:	89 e6                	mov    esi,esp
c000f545:	8b 1d bc 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209bc
c000f54b:	56                   	push   esi
c000f54c:	c1 eb 15             	shr    ebx,0x15
c000f54f:	68 82 00 00 c0       	push   0xc0000082
c000f554:	83 e3 7e             	and    ebx,0x7e
c000f557:	e8 a0 ff ff ff       	call   c000f4fc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f55c:	56                   	push   esi
c000f55d:	6a 00                	push   0x0
c000f55f:	53                   	push   ebx
c000f560:	eb 12                	jmp    c000f574 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f562:	89 e3                	mov    ebx,esp
c000f564:	53                   	push   ebx
c000f565:	68 82 00 00 c0       	push   0xc0000082
c000f56a:	e8 8d ff ff ff       	call   c000f4fc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f56f:	53                   	push   ebx
c000f570:	6a 00                	push   0x0
c000f572:	6a 00                	push   0x0
c000f574:	68 82 00 00 c0       	push   0xc0000082
c000f579:	e8 62 ff ff ff       	call   c000f4e0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f57e:	83 c4 18             	add    esp,0x18
c000f581:	83 c4 10             	add    esp,0x10
c000f584:	5b                   	pop    ebx
c000f585:	5e                   	pop    esi
c000f586:	c3                   	ret    
c000f587:	90                   	nop

c000f588 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f588:	55                   	push   ebp
c000f589:	57                   	push   edi
c000f58a:	56                   	push   esi
c000f58b:	53                   	push   ebx
c000f58c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f590:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f594:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f598:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f59c:	39 05 b0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7b0,eax
c000f5a2:	75 23                	jne    c000f5c7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f5a4:	a1 0c 34 02 c0       	mov    eax,ds:0xc002340c
c000f5a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f5ad:	89 06                	mov    DWORD PTR [esi],eax
c000f5af:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c000f5b4:	89 07                	mov    DWORD PTR [edi],eax
c000f5b6:	a1 04 34 02 c0       	mov    eax,ds:0xc0023404
c000f5bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f5be:	a1 00 34 02 c0       	mov    eax,ds:0xc0023400
c000f5c3:	89 02                	mov    DWORD PTR [edx],eax
c000f5c5:	eb 3f                	jmp    c000f606 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f5c7:	31 c9                	xor    ecx,ecx
c000f5c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5cd:	0f a2                	cpuid  
c000f5cf:	89 06                	mov    DWORD PTR [esi],eax
c000f5d1:	89 1f                	mov    DWORD PTR [edi],ebx
c000f5d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f5d7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f5da:	89 10                	mov    DWORD PTR [eax],edx
c000f5dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5e0:	a3 b0 f7 01 c0       	mov    ds:0xc001f7b0,eax
c000f5e5:	8b 06                	mov    eax,DWORD PTR [esi]
c000f5e7:	a3 0c 34 02 c0       	mov    ds:0xc002340c,eax
c000f5ec:	8b 07                	mov    eax,DWORD PTR [edi]
c000f5ee:	a3 08 34 02 c0       	mov    ds:0xc0023408,eax
c000f5f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f5f6:	a3 04 34 02 c0       	mov    ds:0xc0023404,eax
c000f5fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f5ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000f601:	a3 00 34 02 c0       	mov    ds:0xc0023400,eax
c000f606:	5b                   	pop    ebx
c000f607:	5e                   	pop    esi
c000f608:	5f                   	pop    edi
c000f609:	5d                   	pop    ebp
c000f60a:	c3                   	ret    
c000f60b:	90                   	nop

c000f60c <CPU::cpuidCheckEDX(unsigned int)>:
c000f60c:	83 ec 10             	sub    esp,0x10
c000f60f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f613:	50                   	push   eax
c000f614:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f618:	50                   	push   eax
c000f619:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f61d:	50                   	push   eax
c000f61e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f622:	50                   	push   eax
c000f623:	6a 01                	push   0x1
c000f625:	e8 5e ff ff ff       	call   c000f588 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f62a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f62e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f632:	0f 95 c0             	setne  al
c000f635:	83 c4 24             	add    esp,0x24
c000f638:	c3                   	ret    
c000f639:	90                   	nop

c000f63a <CPU::cpuidCheckECX(unsigned int)>:
c000f63a:	83 ec 10             	sub    esp,0x10
c000f63d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f641:	50                   	push   eax
c000f642:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f646:	50                   	push   eax
c000f647:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f64b:	50                   	push   eax
c000f64c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f650:	50                   	push   eax
c000f651:	6a 01                	push   0x1
c000f653:	e8 30 ff ff ff       	call   c000f588 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f658:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f65c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f660:	0f 95 c0             	setne  al
c000f663:	83 c4 24             	add    esp,0x24
c000f666:	c3                   	ret    
c000f667:	90                   	nop

c000f668 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f668:	83 ec 10             	sub    esp,0x10
c000f66b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f66f:	50                   	push   eax
c000f670:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f674:	50                   	push   eax
c000f675:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f679:	50                   	push   eax
c000f67a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f67e:	50                   	push   eax
c000f67f:	6a 07                	push   0x7
c000f681:	e8 02 ff ff ff       	call   c000f588 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f686:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f68a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f68e:	0f 95 c0             	setne  al
c000f691:	83 c4 24             	add    esp,0x24
c000f694:	c3                   	ret    
c000f695:	90                   	nop

c000f696 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f696:	83 ec 10             	sub    esp,0x10
c000f699:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f69d:	50                   	push   eax
c000f69e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6a2:	50                   	push   eax
c000f6a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6a7:	50                   	push   eax
c000f6a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6ac:	50                   	push   eax
c000f6ad:	6a 07                	push   0x7
c000f6af:	e8 d4 fe ff ff       	call   c000f588 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6b8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f6bc:	0f 95 c0             	setne  al
c000f6bf:	83 c4 24             	add    esp,0x24
c000f6c2:	c3                   	ret    
c000f6c3:	90                   	nop

c000f6c4 <CPU::CPU()>:
c000f6c4:	83 ec 0c             	sub    esp,0xc
c000f6c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6cb:	83 ec 08             	sub    esp,0x8
c000f6ce:	68 d9 e6 01 c0       	push   0xc001e6d9
c000f6d3:	50                   	push   eax
c000f6d4:	e8 f3 c9 ff ff       	call   c000c0cc <Device::Device(char const*)>
c000f6d9:	83 c4 10             	add    esp,0x10
c000f6dc:	ba 60 e7 01 c0       	mov    edx,0xc001e760
c000f6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6e5:	89 10                	mov    DWORD PTR [eax],edx
c000f6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6eb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6f9:	05 78 01 00 00       	add    eax,0x178
c000f6fe:	83 ec 0c             	sub    esp,0xc
c000f701:	50                   	push   eax
c000f702:	e8 17 80 ff ff       	call   c000771e <GDT::GDT()>
c000f707:	83 c4 10             	add    esp,0x10
c000f70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f70e:	05 7c 09 00 00       	add    eax,0x97c
c000f713:	83 ec 0c             	sub    esp,0xc
c000f716:	50                   	push   eax
c000f717:	e8 3c 82 ff ff       	call   c0007958 <IDT::IDT()>
c000f71c:	83 c4 10             	add    esp,0x10
c000f71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f723:	05 7c 11 00 00       	add    eax,0x117c
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	50                   	push   eax
c000f72c:	e8 b3 9a ff ff       	call   c00091e4 <TSS::TSS()>
c000f731:	83 c4 10             	add    esp,0x10
c000f734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f738:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f743:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f74d:	90                   	nop
c000f74e:	83 c4 0c             	add    esp,0xc
c000f751:	c3                   	ret    

c000f752 <CPU::displayFeatures()>:
c000f752:	c3                   	ret    
c000f753:	90                   	nop

c000f754 <CPU::detectFeatures()>:
c000f754:	55                   	push   ebp
c000f755:	57                   	push   edi
c000f756:	56                   	push   esi
c000f757:	53                   	push   ebx
c000f758:	83 ec 30             	sub    esp,0x30
c000f75b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f75f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f769:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f770:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f776:	6a 0d                	push   0xd
c000f778:	6a 00                	push   0x0
c000f77a:	55                   	push   ebp
c000f77b:	e8 70 0d ff ff       	call   c00004f0 <memset>
c000f780:	83 c4 10             	add    esp,0x10
c000f783:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000f788:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f78f:	0f 84 d5 05 00 00    	je     c000fd6a <CPU::detectFeatures()+0x616>
c000f795:	83 ec 0c             	sub    esp,0xc
c000f798:	89 ef                	mov    edi,ebp
c000f79a:	6a 10                	push   0x10
c000f79c:	e8 6b fe ff ff       	call   c000f60c <CPU::cpuidCheckEDX(unsigned int)>
c000f7a1:	83 e0 01             	and    eax,0x1
c000f7a4:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7a7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7ad:	83 e0 fd             	and    eax,0xfffffffd
c000f7b0:	09 d0                	or     eax,edx
c000f7b2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7b8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f7bf:	e8 48 fe ff ff       	call   c000f60c <CPU::cpuidCheckEDX(unsigned int)>
c000f7c4:	83 e0 01             	and    eax,0x1
c000f7c7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f7ce:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7d4:	83 e0 fb             	and    eax,0xfffffffb
c000f7d7:	09 d0                	or     eax,edx
c000f7d9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7df:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f7e6:	e8 21 fe ff ff       	call   c000f60c <CPU::cpuidCheckEDX(unsigned int)>
c000f7eb:	83 e0 01             	and    eax,0x1
c000f7ee:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f7f5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7fb:	83 e0 f7             	and    eax,0xfffffff7
c000f7fe:	09 d0                	or     eax,edx
c000f800:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f806:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f80d:	e8 fa fd ff ff       	call   c000f60c <CPU::cpuidCheckEDX(unsigned int)>
c000f812:	83 e0 01             	and    eax,0x1
c000f815:	c1 e0 04             	shl    eax,0x4
c000f818:	88 c2                	mov    dl,al
c000f81a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f820:	83 e0 ef             	and    eax,0xffffffef
c000f823:	09 d0                	or     eax,edx
c000f825:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f82b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f832:	e8 d5 fd ff ff       	call   c000f60c <CPU::cpuidCheckEDX(unsigned int)>
c000f837:	83 e0 01             	and    eax,0x1
c000f83a:	c1 e0 05             	shl    eax,0x5
c000f83d:	88 c2                	mov    dl,al
c000f83f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f845:	83 e0 df             	and    eax,0xffffffdf
c000f848:	09 d0                	or     eax,edx
c000f84a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f850:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f857:	e8 b0 fd ff ff       	call   c000f60c <CPU::cpuidCheckEDX(unsigned int)>
c000f85c:	83 e0 01             	and    eax,0x1
c000f85f:	8d 14 00             	lea    edx,[eax+eax*1]
c000f862:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f868:	83 e0 fd             	and    eax,0xfffffffd
c000f86b:	09 d0                	or     eax,edx
c000f86d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f873:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f87a:	e8 8d fd ff ff       	call   c000f60c <CPU::cpuidCheckEDX(unsigned int)>
c000f87f:	83 e0 01             	and    eax,0x1
c000f882:	c1 e0 06             	shl    eax,0x6
c000f885:	88 c2                	mov    dl,al
c000f887:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f88d:	83 e0 bf             	and    eax,0xffffffbf
c000f890:	09 d0                	or     eax,edx
c000f892:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f898:	58                   	pop    eax
c000f899:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f89d:	50                   	push   eax
c000f89e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8a2:	50                   	push   eax
c000f8a3:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f8a7:	56                   	push   esi
c000f8a8:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8ac:	50                   	push   eax
c000f8ad:	6a 00                	push   0x0
c000f8af:	e8 d4 fc ff ff       	call   c000f588 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f8b4:	b8 04 00 00 00       	mov    eax,0x4
c000f8b9:	89 c1                	mov    ecx,eax
c000f8bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8bd:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f8c3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f8c7:	89 c1                	mov    ecx,eax
c000f8c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8cb:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f8d1:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f8d5:	89 c1                	mov    ecx,eax
c000f8d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8d9:	83 c4 18             	add    esp,0x18
c000f8dc:	68 e8 e5 01 c0       	push   0xc001e5e8
c000f8e1:	55                   	push   ebp
c000f8e2:	e8 19 0e ff ff       	call   c0000700 <strcmp>
c000f8e7:	83 c4 10             	add    esp,0x10
c000f8ea:	85 c0                	test   eax,eax
c000f8ec:	75 0f                	jne    c000f8fd <CPU::detectFeatures()+0x1a9>
c000f8ee:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f8f8:	e9 22 02 00 00       	jmp    c000fb1f <CPU::detectFeatures()+0x3cb>
c000f8fd:	50                   	push   eax
c000f8fe:	50                   	push   eax
c000f8ff:	68 f5 e5 01 c0       	push   0xc001e5f5
c000f904:	55                   	push   ebp
c000f905:	e8 f6 0d ff ff       	call   c0000700 <strcmp>
c000f90a:	83 c4 10             	add    esp,0x10
c000f90d:	85 c0                	test   eax,eax
c000f90f:	74 dd                	je     c000f8ee <CPU::detectFeatures()+0x19a>
c000f911:	50                   	push   eax
c000f912:	50                   	push   eax
c000f913:	68 02 e6 01 c0       	push   0xc001e602
c000f918:	55                   	push   ebp
c000f919:	e8 e2 0d ff ff       	call   c0000700 <strcmp>
c000f91e:	83 c4 10             	add    esp,0x10
c000f921:	85 c0                	test   eax,eax
c000f923:	74 2a                	je     c000f94f <CPU::detectFeatures()+0x1fb>
c000f925:	50                   	push   eax
c000f926:	50                   	push   eax
c000f927:	68 0f e6 01 c0       	push   0xc001e60f
c000f92c:	55                   	push   ebp
c000f92d:	e8 ce 0d ff ff       	call   c0000700 <strcmp>
c000f932:	83 c4 10             	add    esp,0x10
c000f935:	85 c0                	test   eax,eax
c000f937:	74 16                	je     c000f94f <CPU::detectFeatures()+0x1fb>
c000f939:	50                   	push   eax
c000f93a:	50                   	push   eax
c000f93b:	68 1c e6 01 c0       	push   0xc001e61c
c000f940:	55                   	push   ebp
c000f941:	e8 ba 0d ff ff       	call   c0000700 <strcmp>
c000f946:	83 c4 10             	add    esp,0x10
c000f949:	85 c0                	test   eax,eax
c000f94b:	74 48                	je     c000f995 <CPU::detectFeatures()+0x241>
c000f94d:	eb 0f                	jmp    c000f95e <CPU::detectFeatures()+0x20a>
c000f94f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f959:	e9 c1 01 00 00       	jmp    c000fb1f <CPU::detectFeatures()+0x3cb>
c000f95e:	50                   	push   eax
c000f95f:	50                   	push   eax
c000f960:	68 29 e6 01 c0       	push   0xc001e629
c000f965:	55                   	push   ebp
c000f966:	e8 95 0d ff ff       	call   c0000700 <strcmp>
c000f96b:	83 c4 10             	add    esp,0x10
c000f96e:	85 c0                	test   eax,eax
c000f970:	74 23                	je     c000f995 <CPU::detectFeatures()+0x241>
c000f972:	57                   	push   edi
c000f973:	57                   	push   edi
c000f974:	68 36 e6 01 c0       	push   0xc001e636
c000f979:	55                   	push   ebp
c000f97a:	e8 81 0d ff ff       	call   c0000700 <strcmp>
c000f97f:	83 c4 10             	add    esp,0x10
c000f982:	85 c0                	test   eax,eax
c000f984:	75 1e                	jne    c000f9a4 <CPU::detectFeatures()+0x250>
c000f986:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f990:	e9 8a 01 00 00       	jmp    c000fb1f <CPU::detectFeatures()+0x3cb>
c000f995:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f99f:	e9 7b 01 00 00       	jmp    c000fb1f <CPU::detectFeatures()+0x3cb>
c000f9a4:	56                   	push   esi
c000f9a5:	56                   	push   esi
c000f9a6:	68 43 e6 01 c0       	push   0xc001e643
c000f9ab:	55                   	push   ebp
c000f9ac:	e8 4f 0d ff ff       	call   c0000700 <strcmp>
c000f9b1:	83 c4 10             	add    esp,0x10
c000f9b4:	85 c0                	test   eax,eax
c000f9b6:	75 0f                	jne    c000f9c7 <CPU::detectFeatures()+0x273>
c000f9b8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f9c2:	e9 58 01 00 00       	jmp    c000fb1f <CPU::detectFeatures()+0x3cb>
c000f9c7:	51                   	push   ecx
c000f9c8:	51                   	push   ecx
c000f9c9:	68 02 e6 01 c0       	push   0xc001e602
c000f9ce:	55                   	push   ebp
c000f9cf:	e8 2c 0d ff ff       	call   c0000700 <strcmp>
c000f9d4:	83 c4 10             	add    esp,0x10
c000f9d7:	85 c0                	test   eax,eax
c000f9d9:	75 0f                	jne    c000f9ea <CPU::detectFeatures()+0x296>
c000f9db:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f9e5:	e9 35 01 00 00       	jmp    c000fb1f <CPU::detectFeatures()+0x3cb>
c000f9ea:	52                   	push   edx
c000f9eb:	52                   	push   edx
c000f9ec:	68 50 e6 01 c0       	push   0xc001e650
c000f9f1:	55                   	push   ebp
c000f9f2:	e8 09 0d ff ff       	call   c0000700 <strcmp>
c000f9f7:	83 c4 10             	add    esp,0x10
c000f9fa:	85 c0                	test   eax,eax
c000f9fc:	75 0f                	jne    c000fa0d <CPU::detectFeatures()+0x2b9>
c000f9fe:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fa08:	e9 12 01 00 00       	jmp    c000fb1f <CPU::detectFeatures()+0x3cb>
c000fa0d:	50                   	push   eax
c000fa0e:	50                   	push   eax
c000fa0f:	68 5d e6 01 c0       	push   0xc001e65d
c000fa14:	55                   	push   ebp
c000fa15:	e8 e6 0c ff ff       	call   c0000700 <strcmp>
c000fa1a:	83 c4 10             	add    esp,0x10
c000fa1d:	85 c0                	test   eax,eax
c000fa1f:	75 0f                	jne    c000fa30 <CPU::detectFeatures()+0x2dc>
c000fa21:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fa2b:	e9 ef 00 00 00       	jmp    c000fb1f <CPU::detectFeatures()+0x3cb>
c000fa30:	50                   	push   eax
c000fa31:	50                   	push   eax
c000fa32:	68 6a e6 01 c0       	push   0xc001e66a
c000fa37:	55                   	push   ebp
c000fa38:	e8 c3 0c ff ff       	call   c0000700 <strcmp>
c000fa3d:	83 c4 10             	add    esp,0x10
c000fa40:	85 c0                	test   eax,eax
c000fa42:	75 0f                	jne    c000fa53 <CPU::detectFeatures()+0x2ff>
c000fa44:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fa4e:	e9 cc 00 00 00       	jmp    c000fb1f <CPU::detectFeatures()+0x3cb>
c000fa53:	50                   	push   eax
c000fa54:	50                   	push   eax
c000fa55:	68 77 e6 01 c0       	push   0xc001e677
c000fa5a:	55                   	push   ebp
c000fa5b:	e8 a0 0c ff ff       	call   c0000700 <strcmp>
c000fa60:	83 c4 10             	add    esp,0x10
c000fa63:	85 c0                	test   eax,eax
c000fa65:	75 0f                	jne    c000fa76 <CPU::detectFeatures()+0x322>
c000fa67:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fa71:	e9 a9 00 00 00       	jmp    c000fb1f <CPU::detectFeatures()+0x3cb>
c000fa76:	50                   	push   eax
c000fa77:	50                   	push   eax
c000fa78:	68 84 e6 01 c0       	push   0xc001e684
c000fa7d:	55                   	push   ebp
c000fa7e:	e8 7d 0c ff ff       	call   c0000700 <strcmp>
c000fa83:	83 c4 10             	add    esp,0x10
c000fa86:	85 c0                	test   eax,eax
c000fa88:	75 0f                	jne    c000fa99 <CPU::detectFeatures()+0x345>
c000fa8a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fa94:	e9 86 00 00 00       	jmp    c000fb1f <CPU::detectFeatures()+0x3cb>
c000fa99:	50                   	push   eax
c000fa9a:	50                   	push   eax
c000fa9b:	68 91 e6 01 c0       	push   0xc001e691
c000faa0:	55                   	push   ebp
c000faa1:	e8 5a 0c ff ff       	call   c0000700 <strcmp>
c000faa6:	83 c4 10             	add    esp,0x10
c000faa9:	85 c0                	test   eax,eax
c000faab:	75 0c                	jne    c000fab9 <CPU::detectFeatures()+0x365>
c000faad:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fab7:	eb 66                	jmp    c000fb1f <CPU::detectFeatures()+0x3cb>
c000fab9:	50                   	push   eax
c000faba:	50                   	push   eax
c000fabb:	68 9e e6 01 c0       	push   0xc001e69e
c000fac0:	55                   	push   ebp
c000fac1:	e8 3a 0c ff ff       	call   c0000700 <strcmp>
c000fac6:	83 c4 10             	add    esp,0x10
c000fac9:	85 c0                	test   eax,eax
c000facb:	75 0c                	jne    c000fad9 <CPU::detectFeatures()+0x385>
c000facd:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fad7:	eb 46                	jmp    c000fb1f <CPU::detectFeatures()+0x3cb>
c000fad9:	57                   	push   edi
c000fada:	57                   	push   edi
c000fadb:	68 ab e6 01 c0       	push   0xc001e6ab
c000fae0:	55                   	push   ebp
c000fae1:	e8 1a 0c ff ff       	call   c0000700 <strcmp>
c000fae6:	83 c4 10             	add    esp,0x10
c000fae9:	85 c0                	test   eax,eax
c000faeb:	74 e0                	je     c000facd <CPU::detectFeatures()+0x379>
c000faed:	56                   	push   esi
c000faee:	56                   	push   esi
c000faef:	68 b8 e6 01 c0       	push   0xc001e6b8
c000faf4:	55                   	push   ebp
c000faf5:	e8 06 0c ff ff       	call   c0000700 <strcmp>
c000fafa:	83 c4 10             	add    esp,0x10
c000fafd:	85 c0                	test   eax,eax
c000faff:	74 cc                	je     c000facd <CPU::detectFeatures()+0x379>
c000fb01:	51                   	push   ecx
c000fb02:	51                   	push   ecx
c000fb03:	68 c5 e6 01 c0       	push   0xc001e6c5
c000fb08:	55                   	push   ebp
c000fb09:	e8 f2 0b ff ff       	call   c0000700 <strcmp>
c000fb0e:	83 c4 10             	add    esp,0x10
c000fb11:	85 c0                	test   eax,eax
c000fb13:	74 b8                	je     c000facd <CPU::detectFeatures()+0x379>
c000fb15:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fb1f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fb24:	0f 86 be 00 00 00    	jbe    c000fbe8 <CPU::detectFeatures()+0x494>
c000fb2a:	83 ec 0c             	sub    esp,0xc
c000fb2d:	68 80 00 00 00       	push   0x80
c000fb32:	e8 31 fb ff ff       	call   c000f668 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fb37:	83 e0 01             	and    eax,0x1
c000fb3a:	c1 e0 06             	shl    eax,0x6
c000fb3d:	88 c2                	mov    dl,al
c000fb3f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb45:	83 e0 bf             	and    eax,0xffffffbf
c000fb48:	09 d0                	or     eax,edx
c000fb4a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb50:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fb57:	e8 0c fb ff ff       	call   c000f668 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fb5c:	83 e0 01             	and    eax,0x1
c000fb5f:	c1 e0 04             	shl    eax,0x4
c000fb62:	88 c2                	mov    dl,al
c000fb64:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fb6a:	83 e0 ef             	and    eax,0xffffffef
c000fb6d:	09 d0                	or     eax,edx
c000fb6f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fb75:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fb7c:	e8 e7 fa ff ff       	call   c000f668 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fb81:	c1 e0 07             	shl    eax,0x7
c000fb84:	88 c2                	mov    dl,al
c000fb86:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb8c:	83 e0 7f             	and    eax,0x7f
c000fb8f:	09 d0                	or     eax,edx
c000fb91:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb97:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fb9e:	e8 f3 fa ff ff       	call   c000f696 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fba3:	83 e0 01             	and    eax,0x1
c000fba6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fbad:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fbb3:	83 e0 f7             	and    eax,0xfffffff7
c000fbb6:	09 d0                	or     eax,edx
c000fbb8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fbbe:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fbc5:	e8 cc fa ff ff       	call   c000f696 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fbca:	83 c4 10             	add    esp,0x10
c000fbcd:	83 e0 01             	and    eax,0x1
c000fbd0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fbd7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fbdd:	83 e0 fb             	and    eax,0xfffffffb
c000fbe0:	09 d0                	or     eax,edx
c000fbe2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fbe8:	83 ec 0c             	sub    esp,0xc
c000fbeb:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fbef:	50                   	push   eax
c000fbf0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fbf4:	50                   	push   eax
c000fbf5:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fbf9:	56                   	push   esi
c000fbfa:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fbfe:	50                   	push   eax
c000fbff:	6a 01                	push   0x1
c000fc01:	e8 82 f9 ff ff       	call   c000f588 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fc06:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fc0a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000fc10:	88 ca                	mov    dl,cl
c000fc12:	83 e0 f0             	and    eax,0xfffffff0
c000fc15:	83 e2 0f             	and    edx,0xf
c000fc18:	09 d0                	or     eax,edx
c000fc1a:	88 ca                	mov    dl,cl
c000fc1c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000fc22:	c0 ea 04             	shr    dl,0x4
c000fc25:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000fc29:	0f b6 c2             	movzx  eax,dl
c000fc2c:	83 c4 20             	add    esp,0x20
c000fc2f:	c1 e0 06             	shl    eax,0x6
c000fc32:	89 c7                	mov    edi,eax
c000fc34:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000fc3a:	66 25 3f c0          	and    ax,0xc03f
c000fc3e:	09 f8                	or     eax,edi
c000fc40:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000fc47:	89 c8                	mov    eax,ecx
c000fc49:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000fc50:	c1 e8 08             	shr    eax,0x8
c000fc53:	83 e5 3f             	and    ebp,0x3f
c000fc56:	83 e0 0f             	and    eax,0xf
c000fc59:	89 c7                	mov    edi,eax
c000fc5b:	c1 e7 06             	shl    edi,0x6
c000fc5e:	09 ef                	or     edi,ebp
c000fc60:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000fc67:	89 fa                	mov    edx,edi
c000fc69:	83 e5 c0             	and    ebp,0xffffffc0
c000fc6c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fc72:	88 c2                	mov    dl,al
c000fc74:	c0 ea 02             	shr    dl,0x2
c000fc77:	89 d7                	mov    edi,edx
c000fc79:	09 ef                	or     edi,ebp
c000fc7b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fc81:	89 fa                	mov    edx,edi
c000fc83:	83 e5 cf             	and    ebp,0xffffffcf
c000fc86:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fc8c:	89 cf                	mov    edi,ecx
c000fc8e:	c1 ef 0c             	shr    edi,0xc
c000fc91:	83 e7 03             	and    edi,0x3
c000fc94:	c1 e7 04             	shl    edi,0x4
c000fc97:	09 ef                	or     edi,ebp
c000fc99:	3c 06                	cmp    al,0x6
c000fc9b:	89 fa                	mov    edx,edi
c000fc9d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fca3:	74 04                	je     c000fca9 <CPU::detectFeatures()+0x555>
c000fca5:	3c 0f                	cmp    al,0xf
c000fca7:	75 5c                	jne    c000fd05 <CPU::detectFeatures()+0x5b1>
c000fca9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000fcad:	89 cf                	mov    edi,ecx
c000fcaf:	c1 ef 10             	shr    edi,0x10
c000fcb2:	c1 e7 04             	shl    edi,0x4
c000fcb5:	09 fa                	or     edx,edi
c000fcb7:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000fcbd:	0f b6 d2             	movzx  edx,dl
c000fcc0:	66 81 e7 3f c0       	and    di,0xc03f
c000fcc5:	c1 e2 06             	shl    edx,0x6
c000fcc8:	09 fa                	or     edx,edi
c000fcca:	3c 0f                	cmp    al,0xf
c000fccc:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fcd3:	75 30                	jne    c000fd05 <CPU::detectFeatures()+0x5b1>
c000fcd5:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000fcdb:	c1 e9 14             	shr    ecx,0x14
c000fcde:	83 e0 3f             	and    eax,0x3f
c000fce1:	83 c1 0f             	add    ecx,0xf
c000fce4:	88 ca                	mov    dl,cl
c000fce6:	c0 e9 02             	shr    cl,0x2
c000fce9:	c1 e2 06             	shl    edx,0x6
c000fcec:	09 d0                	or     eax,edx
c000fcee:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000fcf4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000fcfa:	83 e0 c0             	and    eax,0xffffffc0
c000fcfd:	09 c1                	or     ecx,eax
c000fcff:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fd05:	83 ec 0c             	sub    esp,0xc
c000fd08:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fd0f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd13:	50                   	push   eax
c000fd14:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fd18:	55                   	push   ebp
c000fd19:	56                   	push   esi
c000fd1a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fd1e:	57                   	push   edi
c000fd1f:	68 00 00 00 80       	push   0x80000000
c000fd24:	e8 5f f8 ff ff       	call   c000f588 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd29:	83 c4 20             	add    esp,0x20
c000fd2c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fd34:	76 22                	jbe    c000fd58 <CPU::detectFeatures()+0x604>
c000fd36:	83 ec 0c             	sub    esp,0xc
c000fd39:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd3d:	50                   	push   eax
c000fd3e:	55                   	push   ebp
c000fd3f:	56                   	push   esi
c000fd40:	57                   	push   edi
c000fd41:	68 01 00 00 80       	push   0x80000001
c000fd46:	e8 3d f8 ff ff       	call   c000f588 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd4b:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fd55:	83 c4 20             	add    esp,0x20
c000fd58:	52                   	push   edx
c000fd59:	52                   	push   edx
c000fd5a:	68 d1 e6 01 c0       	push   0xc001e6d1
c000fd5f:	53                   	push   ebx
c000fd60:	e8 59 c3 ff ff       	call   c000c0be <Device::setName(char const*)>
c000fd65:	83 c4 10             	add    esp,0x10
c000fd68:	eb 67                	jmp    c000fdd1 <CPU::detectFeatures()+0x67d>
c000fd6a:	50                   	push   eax
c000fd6b:	50                   	push   eax
c000fd6c:	68 36 e6 01 c0       	push   0xc001e636
c000fd71:	55                   	push   ebp
c000fd72:	e8 a9 08 ff ff       	call   c0000620 <strcpy>
c000fd77:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fd81:	e8 5d 04 ff ff       	call   c00001e3 <is486>
c000fd86:	83 c4 10             	add    esp,0x10
c000fd89:	85 c0                	test   eax,eax
c000fd8b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd91:	74 1d                	je     c000fdb0 <CPU::detectFeatures()+0x65c>
c000fd93:	83 c8 07             	or     eax,0x7
c000fd96:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd9c:	0f 20 c0             	mov    eax,cr0
c000fd9f:	83 e0 14             	and    eax,0x14
c000fda2:	83 f8 04             	cmp    eax,0x4
c000fda5:	75 0e                	jne    c000fdb5 <CPU::detectFeatures()+0x661>
c000fda7:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fdae:	eb 21                	jmp    c000fdd1 <CPU::detectFeatures()+0x67d>
c000fdb0:	83 e0 f8             	and    eax,0xfffffff8
c000fdb3:	eb e1                	jmp    c000fd96 <CPU::detectFeatures()+0x642>
c000fdb5:	e8 04 04 ff ff       	call   c00001be <hasLegacyFPU>
c000fdba:	83 e0 01             	and    eax,0x1
c000fdbd:	8d 14 00             	lea    edx,[eax+eax*1]
c000fdc0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fdc6:	83 e0 fd             	and    eax,0xfffffffd
c000fdc9:	09 d0                	or     eax,edx
c000fdcb:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fdd1:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fdd8:	74 0e                	je     c000fde8 <CPU::detectFeatures()+0x694>
c000fdda:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000fddf:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fde6:	eb 20                	jmp    c000fe08 <CPU::detectFeatures()+0x6b4>
c000fde8:	e8 d1 03 ff ff       	call   c00001be <hasLegacyFPU>
c000fded:	83 e0 01             	and    eax,0x1
c000fdf0:	8d 14 00             	lea    edx,[eax+eax*1]
c000fdf3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fdf9:	83 e0 fd             	and    eax,0xfffffffd
c000fdfc:	09 d0                	or     eax,edx
c000fdfe:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe04:	a8 02                	test   al,0x2
c000fe06:	75 d2                	jne    c000fdda <CPU::detectFeatures()+0x686>
c000fe08:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fe0f:	83 c4 2c             	add    esp,0x2c
c000fe12:	5b                   	pop    ebx
c000fe13:	5e                   	pop    esi
c000fe14:	5f                   	pop    edi
c000fe15:	5d                   	pop    ebp
c000fe16:	c3                   	ret    
c000fe17:	90                   	nop

c000fe18 <CPU::setupSMEP()>:
c000fe18:	0f 20 e0             	mov    eax,cr4
c000fe1b:	0d 00 00 10 00       	or     eax,0x100000
c000fe20:	0f 22 e0             	mov    cr4,eax
c000fe23:	c3                   	ret    

c000fe24 <CPU::setupUMIP()>:
c000fe24:	0f 20 e0             	mov    eax,cr4
c000fe27:	80 cc 08             	or     ah,0x8
c000fe2a:	0f 22 e0             	mov    cr4,eax
c000fe2d:	c3                   	ret    

c000fe2e <CPU::setupTSC()>:
c000fe2e:	0f 20 e0             	mov    eax,cr4
c000fe31:	83 c8 04             	or     eax,0x4
c000fe34:	0f 22 e0             	mov    cr4,eax
c000fe37:	c3                   	ret    

c000fe38 <CPU::setupLargePages()>:
c000fe38:	0f 20 e0             	mov    eax,cr4
c000fe3b:	83 c8 10             	or     eax,0x10
c000fe3e:	0f 22 e0             	mov    cr4,eax
c000fe41:	c3                   	ret    

c000fe42 <CPU::setupPAT()>:
c000fe42:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c000fe47:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fe4e:	74 2c                	je     c000fe7c <CPU::setupPAT()+0x3a>
c000fe50:	53                   	push   ebx
c000fe51:	83 ec 10             	sub    esp,0x10
c000fe54:	68 77 02 00 00       	push   0x277
c000fe59:	50                   	push   eax
c000fe5a:	e8 37 76 ff ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c000fe5f:	83 e2 f8             	and    edx,0xfffffff8
c000fe62:	83 ca 01             	or     edx,0x1
c000fe65:	52                   	push   edx
c000fe66:	50                   	push   eax
c000fe67:	68 77 02 00 00       	push   0x277
c000fe6c:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c000fe72:	e8 4b 76 ff ff       	call   c00074c2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fe77:	83 c4 28             	add    esp,0x28
c000fe7a:	5b                   	pop    ebx
c000fe7b:	c3                   	ret    
c000fe7c:	c3                   	ret    
c000fe7d:	90                   	nop

c000fe7e <CPU::setupMTRR()>:
c000fe7e:	c3                   	ret    
c000fe7f:	90                   	nop

c000fe80 <CPU::setupGlobalPages()>:
c000fe80:	0f 20 e0             	mov    eax,cr4
c000fe83:	0c 80                	or     al,0x80
c000fe85:	0f 22 e0             	mov    cr4,eax
c000fe88:	c3                   	ret    
c000fe89:	90                   	nop

c000fe8a <CPU::allowUsermodeDataAccess()>:
c000fe8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe8e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fe95:	74 03                	je     c000fe9a <CPU::allowUsermodeDataAccess()+0x10>
c000fe97:	0f 01 cb             	stac   
c000fe9a:	c3                   	ret    
c000fe9b:	90                   	nop

c000fe9c <CPU::prohibitUsermodeDataAccess()>:
c000fe9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fea0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fea7:	74 03                	je     c000feac <CPU::prohibitUsermodeDataAccess()+0x10>
c000fea9:	0f 01 ca             	clac   
c000feac:	c3                   	ret    
c000fead:	90                   	nop

c000feae <CPU::setupSMAP()>:
c000feae:	0f 20 e0             	mov    eax,cr4
c000feb1:	0d 00 00 20 00       	or     eax,0x200000
c000feb6:	0f 22 e0             	mov    cr4,eax
c000feb9:	eb e1                	jmp    c000fe9c <CPU::prohibitUsermodeDataAccess()>
c000febb:	90                   	nop

c000febc <CPU::setupFeatures()>:
c000febc:	53                   	push   ebx
c000febd:	83 ec 08             	sub    esp,0x8
c000fec0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fec4:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fecb:	74 18                	je     c000fee5 <CPU::setupFeatures()+0x29>
c000fecd:	83 ec 0c             	sub    esp,0xc
c000fed0:	68 dd e6 01 c0       	push   0xc001e6dd
c000fed5:	e8 1a ac ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000feda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fedd:	e8 42 ff ff ff       	call   c000fe24 <CPU::setupUMIP()>
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000feec:	74 18                	je     c000ff06 <CPU::setupFeatures()+0x4a>
c000feee:	83 ec 0c             	sub    esp,0xc
c000fef1:	68 e7 e6 01 c0       	push   0xc001e6e7
c000fef6:	e8 f9 ab ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000fefb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fefe:	e8 2b ff ff ff       	call   c000fe2e <CPU::setupTSC()>
c000ff03:	83 c4 10             	add    esp,0x10
c000ff06:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ff0d:	74 18                	je     c000ff27 <CPU::setupFeatures()+0x6b>
c000ff0f:	83 ec 0c             	sub    esp,0xc
c000ff12:	68 f0 e6 01 c0       	push   0xc001e6f0
c000ff17:	e8 d8 ab ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000ff1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff1f:	e8 14 ff ff ff       	call   c000fe38 <CPU::setupLargePages()>
c000ff24:	83 c4 10             	add    esp,0x10
c000ff27:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ff2e:	74 18                	je     c000ff48 <CPU::setupFeatures()+0x8c>
c000ff30:	83 ec 0c             	sub    esp,0xc
c000ff33:	68 f9 e6 01 c0       	push   0xc001e6f9
c000ff38:	e8 b7 ab ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000ff3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff40:	e8 3b ff ff ff       	call   c000fe80 <CPU::setupGlobalPages()>
c000ff45:	83 c4 10             	add    esp,0x10
c000ff48:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000ff4f:	74 18                	je     c000ff69 <CPU::setupFeatures()+0xad>
c000ff51:	83 ec 0c             	sub    esp,0xc
c000ff54:	68 0b e7 01 c0       	push   0xc001e70b
c000ff59:	e8 96 ab ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c000ff5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff61:	e8 dc fe ff ff       	call   c000fe42 <CPU::setupPAT()>
c000ff66:	83 c4 10             	add    esp,0x10
c000ff69:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000ff70:	74 11                	je     c000ff83 <CPU::setupFeatures()+0xc7>
c000ff72:	c7 44 24 10 14 e7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e714
c000ff7a:	83 c4 08             	add    esp,0x8
c000ff7d:	5b                   	pop    ebx
c000ff7e:	e9 71 ab ff ff       	jmp    c000aaf4 <Dbg::kprintf(char const*, ...)>
c000ff83:	83 c4 08             	add    esp,0x8
c000ff86:	5b                   	pop    ebx
c000ff87:	c3                   	ret    

c000ff88 <CPU::open(int, int, void*)>:
c000ff88:	57                   	push   edi
c000ff89:	56                   	push   esi
c000ff8a:	53                   	push   ebx
c000ff8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ff93:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000ff99:	83 ec 0c             	sub    esp,0xc
c000ff9c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000ffa2:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000ffa8:	50                   	push   eax
c000ffa9:	e8 d2 77 ff ff       	call   c0007780 <GDT::setup()>
c000ffae:	83 c4 0c             	add    esp,0xc
c000ffb1:	6a 00                	push   0x0
c000ffb3:	68 ef be ad de       	push   0xdeadbeef
c000ffb8:	57                   	push   edi
c000ffb9:	e8 6a 92 ff ff       	call   c0009228 <TSS::setup(unsigned long, unsigned long)>
c000ffbe:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ffc1:	e8 42 92 ff ff       	call   c0009208 <TSS::flush()>
c000ffc6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000ffcc:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffcf:	e8 fa 79 ff ff       	call   c00079ce <IDT::setup()>
c000ffd4:	b8 00 04 00 00       	mov    eax,0x400
c000ffd9:	0f 23 f8             	mov    db7,eax
c000ffdc:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000ffe6:	e8 4a 81 ff ff       	call   c0008135 <Phys::allocatePage()>
c000ffeb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fff1:	89 30                	mov    DWORD PTR [eax],esi
c000fff3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fff9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fffc:	58                   	pop    eax
c000fffd:	5a                   	pop    edx
c000fffe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010004:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010008:	e8 05 a2 ff ff       	call   c000a212 <VAS::setCPUSpecific(unsigned long)>
c001000d:	c7 04 24 1e e7 01 c0 	mov    DWORD PTR [esp],0xc001e71e
c0010014:	e8 c6 00 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c0010019:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001001c:	e8 33 f7 ff ff       	call   c000f754 <CPU::detectFeatures()>
c0010021:	c7 04 24 41 e7 01 c0 	mov    DWORD PTR [esp],0xc001e741
c0010028:	e8 b2 00 00 00       	call   c00100df <KeSetBootMessage(char const*)>
c001002d:	e8 f6 57 00 00       	call   c0015828 <HalInitialise()>
c0010032:	a1 b0 09 02 c0       	mov    eax,ds:0xc00209b0
c0010037:	83 e0 10             	and    eax,0x10
c001003a:	83 f8 01             	cmp    eax,0x1
c001003d:	19 c0                	sbb    eax,eax
c001003f:	83 e0 46             	and    eax,0x46
c0010042:	83 c0 1e             	add    eax,0x1e
c0010045:	89 04 24             	mov    DWORD PTR [esp],eax
c0010048:	e8 40 d7 ff ff       	call   c000d78d <setupTimer(int)>
c001004d:	83 c4 10             	add    esp,0x10
c0010050:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010056:	f6 05 b0 09 02 c0 20 	test   BYTE PTR ds:0xc00209b0,0x20
c001005d:	74 0c                	je     c001006b <CPU::open(int, int, void*)+0xe3>
c001005f:	83 ec 0c             	sub    esp,0xc
c0010062:	53                   	push   ebx
c0010063:	e8 54 fe ff ff       	call   c000febc <CPU::setupFeatures()>
c0010068:	83 c4 10             	add    esp,0x10
c001006b:	5b                   	pop    ebx
c001006c:	31 c0                	xor    eax,eax
c001006e:	5e                   	pop    esi
c001006f:	5f                   	pop    edi
c0010070:	c3                   	ret    

c0010071 <KeDisplaySplashScreen()>:
c0010071:	55                   	push   ebp
c0010072:	bd 05 00 00 00       	mov    ebp,0x5
c0010077:	57                   	push   edi
c0010078:	bf c0 f7 01 c0       	mov    edi,0xc001f7c0
c001007d:	56                   	push   esi
c001007e:	be 0a 00 00 00       	mov    esi,0xa
c0010083:	53                   	push   ebx
c0010084:	31 db                	xor    ebx,ebx
c0010086:	83 ec 0c             	sub    esp,0xc
c0010089:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001008c:	84 c0                	test   al,al
c001008e:	74 47                	je     c00100d7 <KeDisplaySplashScreen()+0x66>
c0010090:	80 bb f6 f7 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe080a],0xdb
c0010097:	75 13                	jne    c00100ac <KeDisplaySplashScreen()+0x3b>
c0010099:	0f b6 93 f5 f7 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe080b]
c00100a0:	83 e2 fe             	and    edx,0xfffffffe
c00100a3:	81 fa ba 00 00 00    	cmp    edx,0xba
c00100a9:	75 01                	jne    c00100ac <KeDisplaySplashScreen()+0x3b>
c00100ab:	46                   	inc    esi
c00100ac:	3c 0d                	cmp    al,0xd
c00100ae:	74 24                	je     c00100d4 <KeDisplaySplashScreen()+0x63>
c00100b0:	3c 0a                	cmp    al,0xa
c00100b2:	75 0a                	jne    c00100be <KeDisplaySplashScreen()+0x4d>
c00100b4:	45                   	inc    ebp
c00100b5:	be 0a 00 00 00       	mov    esi,0xa
c00100ba:	31 db                	xor    ebx,ebx
c00100bc:	eb 16                	jmp    c00100d4 <KeDisplaySplashScreen()+0x63>
c00100be:	83 ec 0c             	sub    esp,0xc
c00100c1:	8d 14 33             	lea    edx,[ebx+esi*1]
c00100c4:	55                   	push   ebp
c00100c5:	43                   	inc    ebx
c00100c6:	52                   	push   edx
c00100c7:	6a 00                	push   0x0
c00100c9:	6a 0e                	push   0xe
c00100cb:	50                   	push   eax
c00100cc:	e8 bb 63 00 00       	call   c001648c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00100d1:	83 c4 20             	add    esp,0x20
c00100d4:	47                   	inc    edi
c00100d5:	eb b2                	jmp    c0010089 <KeDisplaySplashScreen()+0x18>
c00100d7:	83 c4 0c             	add    esp,0xc
c00100da:	5b                   	pop    ebx
c00100db:	5e                   	pop    esi
c00100dc:	5f                   	pop    edi
c00100dd:	5d                   	pop    ebp
c00100de:	c3                   	ret    

c00100df <KeSetBootMessage(char const*)>:
c00100df:	57                   	push   edi
c00100e0:	56                   	push   esi
c00100e1:	53                   	push   ebx
c00100e2:	81 ec a4 00 00 00    	sub    esp,0xa4
c00100e8:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00100ef:	68 9e 00 00 00       	push   0x9e
c00100f4:	6a 00                	push   0x0
c00100f6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00100fa:	56                   	push   esi
c00100fb:	e8 f0 03 ff ff       	call   c00004f0 <memset>
c0010100:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010103:	e8 58 04 ff ff       	call   c0000560 <strlen>
c0010108:	ba 50 00 00 00       	mov    edx,0x50
c001010d:	83 c4 10             	add    esp,0x10
c0010110:	29 c2                	sub    edx,eax
c0010112:	31 c9                	xor    ecx,ecx
c0010114:	83 e2 fe             	and    edx,0xfffffffe
c0010117:	01 f2                	add    edx,esi
c0010119:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001011e:	84 c0                	test   al,al
c0010120:	74 0a                	je     c001012c <KeSetBootMessage(char const*)+0x4d>
c0010122:	80 cc 0f             	or     ah,0xf
c0010125:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010129:	41                   	inc    ecx
c001012a:	eb ed                	jmp    c0010119 <KeSetBootMessage(char const*)+0x3a>
c001012c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010131:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010136:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010138:	81 c4 a0 00 00 00    	add    esp,0xa0
c001013e:	5b                   	pop    ebx
c001013f:	5e                   	pop    esi
c0010140:	5f                   	pop    edi
c0010141:	c3                   	ret    

c0010142 <EnvVarContainer::getEnv(char const*)>:
c0010142:	57                   	push   edi
c0010143:	56                   	push   esi
c0010144:	53                   	push   ebx
c0010145:	31 db                	xor    ebx,ebx
c0010147:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001014b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001014d:	7e 2b                	jle    c001017a <EnvVarContainer::getEnv(char const*)+0x38>
c001014f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010156:	50                   	push   eax
c0010157:	50                   	push   eax
c0010158:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001015b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001015e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010162:	e8 99 05 ff ff       	call   c0000700 <strcmp>
c0010167:	83 c4 10             	add    esp,0x10
c001016a:	85 c0                	test   eax,eax
c001016c:	75 09                	jne    c0010177 <EnvVarContainer::getEnv(char const*)+0x35>
c001016e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010171:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010175:	eb 05                	jmp    c001017c <EnvVarContainer::getEnv(char const*)+0x3a>
c0010177:	43                   	inc    ebx
c0010178:	eb d1                	jmp    c001014b <EnvVarContainer::getEnv(char const*)+0x9>
c001017a:	31 c0                	xor    eax,eax
c001017c:	5b                   	pop    ebx
c001017d:	5e                   	pop    esi
c001017e:	5f                   	pop    edi
c001017f:	c3                   	ret    

c0010180 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010180:	55                   	push   ebp
c0010181:	57                   	push   edi
c0010182:	56                   	push   esi
c0010183:	53                   	push   ebx
c0010184:	83 ec 28             	sub    esp,0x28
c0010187:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001018b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001018f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010193:	56                   	push   esi
c0010194:	e8 c7 03 ff ff       	call   c0000560 <strlen>
c0010199:	40                   	inc    eax
c001019a:	89 04 24             	mov    DWORD PTR [esp],eax
c001019d:	e8 bb 7c ff ff       	call   c0007e5d <malloc>
c00101a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101a9:	e8 b2 03 ff ff       	call   c0000560 <strlen>
c00101ae:	40                   	inc    eax
c00101af:	89 04 24             	mov    DWORD PTR [esp],eax
c00101b2:	e8 a6 7c ff ff       	call   c0007e5d <malloc>
c00101b7:	89 34 24             	mov    DWORD PTR [esp],esi
c00101ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101be:	e8 9d 03 ff ff       	call   c0000560 <strlen>
c00101c3:	83 c4 0c             	add    esp,0xc
c00101c6:	40                   	inc    eax
c00101c7:	50                   	push   eax
c00101c8:	6a 00                	push   0x0
c00101ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00101ce:	e8 1d 03 ff ff       	call   c00004f0 <memset>
c00101d3:	89 34 24             	mov    DWORD PTR [esp],esi
c00101d6:	e8 85 03 ff ff       	call   c0000560 <strlen>
c00101db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00101df:	8d 48 01             	lea    ecx,[eax+0x1]
c00101e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101e7:	89 de                	mov    esi,ebx
c00101e9:	e8 72 03 ff ff       	call   c0000560 <strlen>
c00101ee:	83 c4 0c             	add    esp,0xc
c00101f1:	40                   	inc    eax
c00101f2:	50                   	push   eax
c00101f3:	6a 00                	push   0x0
c00101f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101f9:	e8 f2 02 ff ff       	call   c00004f0 <memset>
c00101fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010201:	e8 5a 03 ff ff       	call   c0000560 <strlen>
c0010206:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001020a:	8d 48 01             	lea    ecx,[eax+0x1]
c001020d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001020f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010212:	40                   	inc    eax
c0010213:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010216:	c1 e0 03             	shl    eax,0x3
c0010219:	5a                   	pop    edx
c001021a:	59                   	pop    ecx
c001021b:	50                   	push   eax
c001021c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001021f:	e8 25 7c ff ff       	call   c0007e49 <realloc>
c0010224:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010228:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001022b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001022e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010232:	b9 08 00 00 00       	mov    ecx,0x8
c0010237:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010239:	83 c4 2c             	add    esp,0x2c
c001023c:	5b                   	pop    ebx
c001023d:	5e                   	pop    esi
c001023e:	5f                   	pop    edi
c001023f:	5d                   	pop    ebp
c0010240:	c3                   	ret    
c0010241:	90                   	nop

c0010242 <EnvVarContainer::deleteEnv(char const*)>:
c0010242:	c3                   	ret    
c0010243:	90                   	nop

c0010244 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010244:	55                   	push   ebp
c0010245:	57                   	push   edi
c0010246:	56                   	push   esi
c0010247:	53                   	push   ebx
c0010248:	81 ec 38 01 00 00    	sub    esp,0x138
c001024e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010255:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001025c:	68 14 01 00 00       	push   0x114
c0010261:	e8 f7 7b ff ff       	call   c0007e5d <malloc>
c0010266:	83 c4 0c             	add    esp,0xc
c0010269:	89 c3                	mov    ebx,eax
c001026b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001026e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010275:	50                   	push   eax
c0010276:	e8 ef ad ff ff       	call   c000b06a <File::File(char const*, Process*)>
c001027b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001027e:	e8 15 b1 ff ff       	call   c000b398 <File::exists()>
c0010283:	83 c4 10             	add    esp,0x10
c0010286:	84 c0                	test   al,al
c0010288:	75 31                	jne    c00102bb <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001028a:	50                   	push   eax
c001028b:	50                   	push   eax
c001028c:	6a 12                	push   0x12
c001028e:	53                   	push   ebx
c001028f:	e8 96 ae ff ff       	call   c000b12a <File::open(FileOpenMode)>
c0010294:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010296:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010299:	89 34 24             	mov    DWORD PTR [esp],esi
c001029c:	e8 bf 02 ff ff       	call   c0000560 <strlen>
c00102a1:	5a                   	pop    edx
c00102a2:	31 d2                	xor    edx,edx
c00102a4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00102a8:	51                   	push   ecx
c00102a9:	56                   	push   esi
c00102aa:	52                   	push   edx
c00102ab:	50                   	push   eax
c00102ac:	53                   	push   ebx
c00102ad:	ff d7                	call   edi
c00102af:	83 c4 14             	add    esp,0x14
c00102b2:	53                   	push   ebx
c00102b3:	e8 d0 ae ff ff       	call   c000b188 <File::close()>
c00102b8:	83 c4 10             	add    esp,0x10
c00102bb:	56                   	push   esi
c00102bc:	31 f6                	xor    esi,esi
c00102be:	68 00 01 00 00       	push   0x100
c00102c3:	6a 00                	push   0x0
c00102c5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00102c9:	50                   	push   eax
c00102ca:	e8 21 02 ff ff       	call   c00004f0 <memset>
c00102cf:	5f                   	pop    edi
c00102d0:	58                   	pop    eax
c00102d1:	6a 01                	push   0x1
c00102d3:	53                   	push   ebx
c00102d4:	e8 51 ae ff ff       	call   c000b12a <File::open(FileOpenMode)>
c00102d9:	83 c4 10             	add    esp,0x10
c00102dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00102e4:	83 ec 0c             	sub    esp,0xc
c00102e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102e9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00102ed:	51                   	push   ecx
c00102ee:	8d 54 24 23          	lea    edx,[esp+0x23]
c00102f2:	52                   	push   edx
c00102f3:	6a 00                	push   0x0
c00102f5:	6a 01                	push   0x1
c00102f7:	53                   	push   ebx
c00102f8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00102fb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00102ff:	83 c4 20             	add    esp,0x20
c0010302:	3c 0d                	cmp    al,0xd
c0010304:	0f 84 09 01 00 00    	je     c0010413 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001030a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001030f:	0f 84 ef 00 00 00    	je     c0010404 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010315:	3c 0a                	cmp    al,0xa
c0010317:	74 13                	je     c001032c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001031e:	74 0c                	je     c001032c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010320:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010326:	0f 8e d8 00 00 00    	jle    c0010404 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001032c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010330:	83 ec 0c             	sub    esp,0xc
c0010333:	8d 78 01             	lea    edi,[eax+0x1]
c0010336:	57                   	push   edi
c0010337:	e8 21 7b ff ff       	call   c0007e5d <malloc>
c001033c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010340:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010344:	8d 56 04             	lea    edx,[esi+0x4]
c0010347:	89 14 24             	mov    DWORD PTR [esp],edx
c001034a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001034e:	e8 0a 7b ff ff       	call   c0007e5d <malloc>
c0010353:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010357:	83 c4 0c             	add    esp,0xc
c001035a:	57                   	push   edi
c001035b:	6a 00                	push   0x0
c001035d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010361:	e8 8a 01 ff ff       	call   c00004f0 <memset>
c0010366:	8d 74 24 30          	lea    esi,[esp+0x30]
c001036a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001036e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010372:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010374:	83 c4 0c             	add    esp,0xc
c0010377:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001037b:	52                   	push   edx
c001037c:	6a 00                	push   0x0
c001037e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010382:	e8 69 01 ff ff       	call   c00004f0 <memset>
c0010387:	8d 74 24 30          	lea    esi,[esp+0x30]
c001038b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001038f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010392:	e8 c9 01 ff ff       	call   c0000560 <strlen>
c0010397:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001039b:	89 c1                	mov    ecx,eax
c001039d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001039f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103a2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00103a5:	40                   	inc    eax
c00103a6:	83 c4 10             	add    esp,0x10
c00103a9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103ac:	85 d2                	test   edx,edx
c00103ae:	75 0c                	jne    c00103bc <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00103b0:	83 ec 0c             	sub    esp,0xc
c00103b3:	6a 08                	push   0x8
c00103b5:	e8 a3 7a ff ff       	call   c0007e5d <malloc>
c00103ba:	eb 0c                	jmp    c00103c8 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00103bc:	c1 e0 03             	shl    eax,0x3
c00103bf:	51                   	push   ecx
c00103c0:	51                   	push   ecx
c00103c1:	50                   	push   eax
c00103c2:	52                   	push   edx
c00103c3:	e8 81 7a ff ff       	call   c0007e49 <realloc>
c00103c8:	83 c4 10             	add    esp,0x10
c00103cb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00103ce:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00103d1:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00103d4:	8d 74 24 18          	lea    esi,[esp+0x18]
c00103d8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00103dc:	b9 08 00 00 00       	mov    ecx,0x8
c00103e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103e3:	31 f6                	xor    esi,esi
c00103e5:	50                   	push   eax
c00103e6:	68 00 01 00 00       	push   0x100
c00103eb:	6a 00                	push   0x0
c00103ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00103f1:	50                   	push   eax
c00103f2:	e8 f9 00 ff ff       	call   c00004f0 <memset>
c00103f7:	83 c4 10             	add    esp,0x10
c00103fa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010402:	eb 0f                	jmp    c0010413 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010404:	3c 3d                	cmp    al,0x3d
c0010406:	74 07                	je     c001040f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010408:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001040c:	46                   	inc    esi
c001040d:	eb 04                	jmp    c0010413 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001040f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010413:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010418:	0f 85 c6 fe ff ff    	jne    c00102e4 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001041e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010424:	5b                   	pop    ebx
c0010425:	5e                   	pop    esi
c0010426:	5f                   	pop    edi
c0010427:	5d                   	pop    ebp
c0010428:	c3                   	ret    
c0010429:	90                   	nop

c001042a <EnvVarContainer::__loadSystem()>:
c001042a:	83 ec 10             	sub    esp,0x10
c001042d:	68 20 f9 01 c0       	push   0xc001f920
c0010432:	68 84 e7 01 c0       	push   0xc001e784
c0010437:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001043b:	e8 04 fe ff ff       	call   c0010244 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010440:	83 c4 1c             	add    esp,0x1c
c0010443:	c3                   	ret    

c0010444 <EnvVarContainer::__loadUser()>:
c0010444:	c3                   	ret    
c0010445:	90                   	nop

c0010446 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001044a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010454:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010458:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001045b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001045f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010466:	90                   	nop
c0010467:	c3                   	ret    

c0010468 <EnvVarContainer::~EnvVarContainer()>:
c0010468:	83 ec 0c             	sub    esp,0xc
c001046b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001046f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010472:	85 c0                	test   eax,eax
c0010474:	74 1d                	je     c0010493 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047a:	8b 00                	mov    eax,DWORD PTR [eax]
c001047c:	85 c0                	test   eax,eax
c001047e:	74 13                	je     c0010493 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010484:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010487:	83 ec 0c             	sub    esp,0xc
c001048a:	50                   	push   eax
c001048b:	e8 dd 79 ff ff       	call   c0007e6d <free>
c0010490:	83 c4 10             	add    esp,0x10
c0010493:	90                   	nop
c0010494:	83 c4 0c             	add    esp,0xc
c0010497:	c3                   	ret    

c0010498 <Krnl::getEnv(Process*, char const*)>:
c0010498:	53                   	push   ebx
c0010499:	83 ec 08             	sub    esp,0x8
c001049c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00104a4:	39 05 70 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e70,eax
c00104aa:	74 04                	je     c00104b0 <Krnl::getEnv(Process*, char const*)+0x18>
c00104ac:	85 c0                	test   eax,eax
c00104ae:	75 0b                	jne    c00104bb <Krnl::getEnv(Process*, char const*)+0x23>
c00104b0:	a1 10 34 02 c0       	mov    eax,ds:0xc0023410
c00104b5:	85 c0                	test   eax,eax
c00104b7:	75 19                	jne    c00104d2 <Krnl::getEnv(Process*, char const*)+0x3a>
c00104b9:	eb 27                	jmp    c00104e2 <Krnl::getEnv(Process*, char const*)+0x4a>
c00104bb:	52                   	push   edx
c00104bc:	52                   	push   edx
c00104bd:	53                   	push   ebx
c00104be:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00104c4:	e8 79 fc ff ff       	call   c0010142 <EnvVarContainer::getEnv(char const*)>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	85 c0                	test   eax,eax
c00104ce:	75 28                	jne    c00104f8 <Krnl::getEnv(Process*, char const*)+0x60>
c00104d0:	eb de                	jmp    c00104b0 <Krnl::getEnv(Process*, char const*)+0x18>
c00104d2:	52                   	push   edx
c00104d3:	52                   	push   edx
c00104d4:	53                   	push   ebx
c00104d5:	50                   	push   eax
c00104d6:	e8 67 fc ff ff       	call   c0010142 <EnvVarContainer::getEnv(char const*)>
c00104db:	83 c4 10             	add    esp,0x10
c00104de:	85 c0                	test   eax,eax
c00104e0:	75 16                	jne    c00104f8 <Krnl::getEnv(Process*, char const*)+0x60>
c00104e2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00104e6:	a1 14 34 02 c0       	mov    eax,ds:0xc0023414
c00104eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104ef:	83 c4 08             	add    esp,0x8
c00104f2:	5b                   	pop    ebx
c00104f3:	e9 4a fc ff ff       	jmp    c0010142 <EnvVarContainer::getEnv(char const*)>
c00104f8:	83 c4 08             	add    esp,0x8
c00104fb:	5b                   	pop    ebx
c00104fc:	c3                   	ret    

c00104fd <Krnl::setEnvSystem(char const*, char const*)>:
c00104fd:	83 ec 10             	sub    esp,0x10
c0010500:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010504:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010508:	ff 35 14 34 02 c0    	push   DWORD PTR ds:0xc0023414
c001050e:	e8 6d fc ff ff       	call   c0010180 <EnvVarContainer::setEnv(char const*, char const*)>
c0010513:	83 c4 1c             	add    esp,0x1c
c0010516:	c3                   	ret    

c0010517 <Krnl::setEnvUser(char const*, char const*)>:
c0010517:	a1 10 34 02 c0       	mov    eax,ds:0xc0023410
c001051c:	85 c0                	test   eax,eax
c001051e:	74 15                	je     c0010535 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010520:	83 ec 10             	sub    esp,0x10
c0010523:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010527:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001052b:	50                   	push   eax
c001052c:	e8 4f fc ff ff       	call   c0010180 <EnvVarContainer::setEnv(char const*, char const*)>
c0010531:	83 c4 1c             	add    esp,0x1c
c0010534:	c3                   	ret    
c0010535:	c3                   	ret    

c0010536 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001053a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010540:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010544:	e9 37 fc ff ff       	jmp    c0010180 <EnvVarContainer::setEnv(char const*, char const*)>

c0010549 <Krnl::deleteEnvSystem(char const*)>:
c0010549:	c3                   	ret    

c001054a <Krnl::deleteEnvUser(char const*)>:
c001054a:	c3                   	ret    

c001054b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001054b:	c3                   	ret    

c001054c <Krnl::newProcessEnv(Process*)>:
c001054c:	83 ec 28             	sub    esp,0x28
c001054f:	6a 0c                	push   0xc
c0010551:	e8 07 79 ff ff       	call   c0007e5d <malloc>
c0010556:	5a                   	pop    edx
c0010557:	59                   	pop    ecx
c0010558:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001055c:	50                   	push   eax
c001055d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010561:	e8 e0 fe ff ff       	call   c0010446 <EnvVarContainer::EnvVarContainer(Process*)>
c0010566:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001056a:	83 c4 2c             	add    esp,0x2c
c001056d:	c3                   	ret    

c001056e <Krnl::copyProcessEnv(Process*, Process*)>:
c001056e:	57                   	push   edi
c001056f:	56                   	push   esi
c0010570:	53                   	push   ebx
c0010571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010575:	83 ec 0c             	sub    esp,0xc
c0010578:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001057e:	6a 0c                	push   0xc
c0010580:	e8 d8 78 ff ff       	call   c0007e5d <malloc>
c0010585:	89 c3                	mov    ebx,eax
c0010587:	58                   	pop    eax
c0010588:	5a                   	pop    edx
c0010589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001058d:	53                   	push   ebx
c001058e:	e8 b3 fe ff ff       	call   c0010446 <EnvVarContainer::EnvVarContainer(Process*)>
c0010593:	8b 07                	mov    eax,DWORD PTR [edi]
c0010595:	89 03                	mov    DWORD PTR [ebx],eax
c0010597:	c1 e0 03             	shl    eax,0x3
c001059a:	89 04 24             	mov    DWORD PTR [esp],eax
c001059d:	e8 bb 78 ff ff       	call   c0007e5d <malloc>
c00105a2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00105a5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00105a7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00105aa:	c1 e1 03             	shl    ecx,0x3
c00105ad:	89 c7                	mov    edi,eax
c00105af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105b1:	83 c4 10             	add    esp,0x10
c00105b4:	89 d8                	mov    eax,ebx
c00105b6:	5b                   	pop    ebx
c00105b7:	5e                   	pop    esi
c00105b8:	5f                   	pop    edi
c00105b9:	c3                   	ret    

c00105ba <Krnl::loadSystemEnv()>:
c00105ba:	53                   	push   ebx
c00105bb:	83 ec 14             	sub    esp,0x14
c00105be:	6a 0c                	push   0xc
c00105c0:	e8 98 78 ff ff       	call   c0007e5d <malloc>
c00105c5:	89 c3                	mov    ebx,eax
c00105c7:	58                   	pop    eax
c00105c8:	5a                   	pop    edx
c00105c9:	ff 35 70 3e 02 c0    	push   DWORD PTR ds:0xc0023e70
c00105cf:	53                   	push   ebx
c00105d0:	e8 71 fe ff ff       	call   c0010446 <EnvVarContainer::EnvVarContainer(Process*)>
c00105d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105d8:	89 1d 14 34 02 c0    	mov    DWORD PTR ds:0xc0023414,ebx
c00105de:	e8 47 fe ff ff       	call   c001042a <EnvVarContainer::__loadSystem()>
c00105e3:	83 c4 18             	add    esp,0x18
c00105e6:	5b                   	pop    ebx
c00105e7:	c3                   	ret    

c00105e8 <Krnl::loadUserEnv()>:
c00105e8:	53                   	push   ebx
c00105e9:	83 ec 14             	sub    esp,0x14
c00105ec:	6a 0c                	push   0xc
c00105ee:	e8 6a 78 ff ff       	call   c0007e5d <malloc>
c00105f3:	89 c3                	mov    ebx,eax
c00105f5:	58                   	pop    eax
c00105f6:	5a                   	pop    edx
c00105f7:	ff 35 70 3e 02 c0    	push   DWORD PTR ds:0xc0023e70
c00105fd:	53                   	push   ebx
c00105fe:	e8 43 fe ff ff       	call   c0010446 <EnvVarContainer::EnvVarContainer(Process*)>
c0010603:	89 1d 10 34 02 c0    	mov    DWORD PTR ds:0xc0023410,ebx
c0010609:	83 c4 18             	add    esp,0x18
c001060c:	5b                   	pop    ebx
c001060d:	c3                   	ret    

c001060e <Krnl::flushEnv()>:
c001060e:	c3                   	ret    

c001060f <Krnl::getProcessTotalEnvCount(Process*)>:
c001060f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010613:	8b 15 10 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023410
c0010619:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001061f:	a1 14 34 02 c0       	mov    eax,ds:0xc0023414
c0010624:	8b 00                	mov    eax,DWORD PTR [eax]
c0010626:	03 01                	add    eax,DWORD PTR [ecx]
c0010628:	85 d2                	test   edx,edx
c001062a:	74 02                	je     c001062e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001062c:	03 02                	add    eax,DWORD PTR [edx]
c001062e:	c3                   	ret    

c001062f <Krnl::getProcessEnvPair(Process*, int)>:
c001062f:	57                   	push   edi
c0010630:	56                   	push   esi
c0010631:	8b 35 10 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023410
c0010637:	53                   	push   ebx
c0010638:	85 f6                	test   esi,esi
c001063a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001063e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010642:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010648:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001064c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001064e:	75 16                	jne    c0010666 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010650:	39 c2                	cmp    edx,eax
c0010652:	7c 16                	jl     c001066a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010654:	8b 0d 14 34 02 c0    	mov    ecx,DWORD PTR ds:0xc0023414
c001065a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001065c:	01 c6                	add    esi,eax
c001065e:	39 d6                	cmp    esi,edx
c0010660:	7e 3c                	jle    c001069e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010662:	29 c2                	sub    edx,eax
c0010664:	eb 04                	jmp    c001066a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010666:	39 c2                	cmp    edx,eax
c0010668:	7d 05                	jge    c001066f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001066a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001066d:	eb 20                	jmp    c001068f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001066f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010671:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010674:	39 d1                	cmp    ecx,edx
c0010676:	7e 04                	jle    c001067c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010678:	29 c2                	sub    edx,eax
c001067a:	eb 10                	jmp    c001068c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001067c:	8b 35 14 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023414
c0010682:	03 0e                	add    ecx,DWORD PTR [esi]
c0010684:	39 d1                	cmp    ecx,edx
c0010686:	7e 16                	jle    c001069e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010688:	29 c2                	sub    edx,eax
c001068a:	29 fa                	sub    edx,edi
c001068c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001068f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010692:	8b 02                	mov    eax,DWORD PTR [edx]
c0010694:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010697:	89 03                	mov    DWORD PTR [ebx],eax
c0010699:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001069c:	eb 1d                	jmp    c00106bb <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001069e:	83 ec 0c             	sub    esp,0xc
c00106a1:	68 a6 e7 01 c0       	push   0xc001e7a6
c00106a6:	e8 18 00 00 00       	call   c00106c3 <KePanic(char const*)>
c00106ab:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00106b1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	89 d8                	mov    eax,ebx
c00106bd:	5b                   	pop    ebx
c00106be:	5e                   	pop    esi
c00106bf:	5f                   	pop    edi
c00106c0:	c2 04 00             	ret    0x4

c00106c3 <KePanic(char const*)>:
c00106c3:	c6 05 18 34 02 c0 01 	mov    BYTE PTR ds:0xc0023418,0x1
c00106ca:	e9 45 50 00 00       	jmp    c0015714 <HalPanic(char const*)>

c00106cf <Krnl::powerThread(void*)>:
c00106cf:	83 ec 0c             	sub    esp,0xc
c00106d2:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c00106d7:	48                   	dec    eax
c00106d8:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c00106dd:	75 01                	jne    c00106e0 <Krnl::powerThread(void*)+0x11>
c00106df:	fb                   	sti    
c00106e0:	83 ec 0c             	sub    esp,0xc
c00106e3:	c6 05 20 34 02 c0 00 	mov    BYTE PTR ds:0xc0023420,0x0
c00106ea:	6a 0a                	push   0xa
c00106ec:	e8 3b 35 00 00       	call   c0013c2c <sleep(unsigned int)>
c00106f1:	83 05 64 34 02 c0 0a 	add    DWORD PTR ds:0xc0023464,0xa
c00106f8:	83 c4 10             	add    esp,0x10
c00106fb:	eb e3                	jmp    c00106e0 <Krnl::powerThread(void*)+0x11>

c00106fd <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00106fd:	57                   	push   edi
c00106fe:	b9 09 00 00 00       	mov    ecx,0x9
c0010703:	56                   	push   esi
c0010704:	bf 40 34 02 c0       	mov    edi,0xc0023440
c0010709:	fc                   	cld    
c001070a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001070e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010710:	5e                   	pop    esi
c0010711:	5f                   	pop    edi
c0010712:	c3                   	ret    

c0010713 <Krnl::userIOReceived()>:
c0010713:	c7 05 64 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023464,0x0
c001071d:	c3                   	ret    

c001071e <Krnl::handlePowerButton()>:
c001071e:	83 ec 0c             	sub    esp,0xc
c0010721:	a1 40 34 02 c0       	mov    eax,ds:0xc0023440
c0010726:	83 f8 02             	cmp    eax,0x2
c0010729:	75 10                	jne    c001073b <Krnl::handlePowerButton()+0x1d>
c001072b:	83 ec 0c             	sub    esp,0xc
c001072e:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0010734:	e8 c1 6d ff ff       	call   c00074fa <Computer::shutdown()>
c0010739:	eb 11                	jmp    c001074c <Krnl::handlePowerButton()+0x2e>
c001073b:	48                   	dec    eax
c001073c:	75 11                	jne    c001074f <Krnl::handlePowerButton()+0x31>
c001073e:	83 ec 0c             	sub    esp,0xc
c0010741:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0010747:	e8 de 6d ff ff       	call   c000752a <Computer::sleep()>
c001074c:	83 c4 10             	add    esp,0x10
c001074f:	83 c4 0c             	add    esp,0xc
c0010752:	c3                   	ret    

c0010753 <Krnl::handleSleepButton()>:
c0010753:	83 ec 0c             	sub    esp,0xc
c0010756:	a1 44 34 02 c0       	mov    eax,ds:0xc0023444
c001075b:	83 f8 02             	cmp    eax,0x2
c001075e:	75 10                	jne    c0010770 <Krnl::handleSleepButton()+0x1d>
c0010760:	83 ec 0c             	sub    esp,0xc
c0010763:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0010769:	e8 8c 6d ff ff       	call   c00074fa <Computer::shutdown()>
c001076e:	eb 11                	jmp    c0010781 <Krnl::handleSleepButton()+0x2e>
c0010770:	48                   	dec    eax
c0010771:	75 11                	jne    c0010784 <Krnl::handleSleepButton()+0x31>
c0010773:	83 ec 0c             	sub    esp,0xc
c0010776:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c001077c:	e8 a9 6d ff ff       	call   c000752a <Computer::sleep()>
c0010781:	83 c4 10             	add    esp,0x10
c0010784:	83 c4 0c             	add    esp,0xc
c0010787:	c3                   	ret    

c0010788 <Krnl::setupPowerManager()>:
c0010788:	83 ec 0c             	sub    esp,0xc
c001078b:	c7 05 64 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023464,0x0
c0010795:	68 f0 00 00 00       	push   0xf0
c001079a:	c6 05 20 34 02 c0 00 	mov    BYTE PTR ds:0xc0023420,0x0
c00107a1:	6a 00                	push   0x0
c00107a3:	68 cf 06 01 c0       	push   0xc00106cf
c00107a8:	ff 35 70 3e 02 c0    	push   DWORD PTR ds:0xc0023e70
c00107ae:	e8 49 2f 00 00       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c00107b3:	c7 05 40 34 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023440,0x2
c00107bd:	c7 05 44 34 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023444,0x1
c00107c7:	c7 05 48 34 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023448,0x3
c00107d1:	c7 05 4c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002344c,0x0
c00107db:	c7 05 58 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023458,0x0
c00107e5:	c7 05 50 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023450,0x0
c00107ef:	c7 05 5c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002345c,0x0
c00107f9:	c7 05 54 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x3c
c0010803:	c7 05 60 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023460,0x3c
c001080d:	83 c4 1c             	add    esp,0x1c
c0010810:	c3                   	ret    

c0010811 <sysCallSeekDir(regs*)>:
c0010811:	31 c0                	xor    eax,eax
c0010813:	31 d2                	xor    edx,edx
c0010815:	c3                   	ret    

c0010816 <sysCallTellDir(regs*)>:
c0010816:	31 c0                	xor    eax,eax
c0010818:	31 d2                	xor    edx,edx
c001081a:	c3                   	ret    

c001081b <sysCallVerify(regs*)>:
c001081b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001081f:	31 d2                	xor    edx,edx
c0010821:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010824:	c3                   	ret    

c0010825 <sysCallGetArgc(regs*)>:
c0010825:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001082a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001082d:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010833:	99                   	cdq    
c0010834:	c3                   	ret    

c0010835 <sysCallTTYName(regs*)>:
c0010835:	b8 01 00 00 00       	mov    eax,0x1
c001083a:	31 d2                	xor    edx,edx
c001083c:	c3                   	ret    

c001083d <sysFormatDisk(regs*)>:
c001083d:	56                   	push   esi
c001083e:	53                   	push   ebx
c001083f:	50                   	push   eax
c0010840:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010844:	8b 1d 94 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a94
c001084a:	eb 28                	jmp    c0010874 <sysFormatDisk(regs*)+0x37>
c001084c:	83 ec 0c             	sub    esp,0xc
c001084f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010852:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010855:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010857:	51                   	push   ecx
c0010858:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001085b:	51                   	push   ecx
c001085c:	50                   	push   eax
c001085d:	8b 04 85 00 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd100]
c0010864:	50                   	push   eax
c0010865:	53                   	push   ebx
c0010866:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010869:	83 c4 20             	add    esp,0x20
c001086c:	83 f8 08             	cmp    eax,0x8
c001086f:	75 12                	jne    c0010883 <sysFormatDisk(regs*)+0x46>
c0010871:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010874:	85 db                	test   ebx,ebx
c0010876:	75 d4                	jne    c001084c <sysFormatDisk(regs*)+0xf>
c0010878:	59                   	pop    ecx
c0010879:	b8 03 00 00 00       	mov    eax,0x3
c001087e:	31 d2                	xor    edx,edx
c0010880:	5b                   	pop    ebx
c0010881:	5e                   	pop    esi
c0010882:	c3                   	ret    
c0010883:	85 c0                	test   eax,eax
c0010885:	74 1b                	je     c00108a2 <sysFormatDisk(regs*)+0x65>
c0010887:	83 f8 09             	cmp    eax,0x9
c001088a:	74 0b                	je     c0010897 <sysFormatDisk(regs*)+0x5a>
c001088c:	59                   	pop    ecx
c001088d:	b8 02 00 00 00       	mov    eax,0x2
c0010892:	31 d2                	xor    edx,edx
c0010894:	5b                   	pop    ebx
c0010895:	5e                   	pop    esi
c0010896:	c3                   	ret    
c0010897:	59                   	pop    ecx
c0010898:	b8 01 00 00 00       	mov    eax,0x1
c001089d:	31 d2                	xor    edx,edx
c001089f:	5b                   	pop    ebx
c00108a0:	5e                   	pop    esi
c00108a1:	c3                   	ret    
c00108a2:	59                   	pop    ecx
c00108a3:	31 c0                	xor    eax,eax
c00108a5:	31 d2                	xor    edx,edx
c00108a7:	5b                   	pop    ebx
c00108a8:	5e                   	pop    esi
c00108a9:	c3                   	ret    

c00108aa <sysSetDiskVolumeLabel(regs*)>:
c00108aa:	56                   	push   esi
c00108ab:	53                   	push   ebx
c00108ac:	53                   	push   ebx
c00108ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108b1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108b4:	83 f8 19             	cmp    eax,0x19
c00108b7:	77 2d                	ja     c00108e6 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00108b9:	8b 0c 85 00 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd100]
c00108c0:	85 c9                	test   ecx,ecx
c00108c2:	74 22                	je     c00108e6 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00108c4:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00108c7:	85 db                	test   ebx,ebx
c00108c9:	74 1b                	je     c00108e6 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00108cb:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00108d1:	85 d2                	test   edx,edx
c00108d3:	74 11                	je     c00108e6 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00108d5:	8b 32                	mov    esi,DWORD PTR [edx]
c00108d7:	53                   	push   ebx
c00108d8:	50                   	push   eax
c00108d9:	51                   	push   ecx
c00108da:	52                   	push   edx
c00108db:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00108de:	83 c4 10             	add    esp,0x10
c00108e1:	99                   	cdq    
c00108e2:	59                   	pop    ecx
c00108e3:	5b                   	pop    ebx
c00108e4:	5e                   	pop    esi
c00108e5:	c3                   	ret    
c00108e6:	59                   	pop    ecx
c00108e7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00108ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108f1:	5b                   	pop    ebx
c00108f2:	5e                   	pop    esi
c00108f3:	c3                   	ret    

c00108f4 <sysGetDiskVolumeLabel(regs*)>:
c00108f4:	57                   	push   edi
c00108f5:	56                   	push   esi
c00108f6:	53                   	push   ebx
c00108f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00108fe:	83 fa 19             	cmp    edx,0x19
c0010901:	77 38                	ja     c001093b <sysGetDiskVolumeLabel(regs*)+0x47>
c0010903:	8b 0c 95 00 2f 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd100]
c001090a:	85 c9                	test   ecx,ecx
c001090c:	74 2d                	je     c001093b <sysGetDiskVolumeLabel(regs*)+0x47>
c001090e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010911:	85 db                	test   ebx,ebx
c0010913:	74 26                	je     c001093b <sysGetDiskVolumeLabel(regs*)+0x47>
c0010915:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010918:	85 f6                	test   esi,esi
c001091a:	74 1f                	je     c001093b <sysGetDiskVolumeLabel(regs*)+0x47>
c001091c:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010922:	85 c0                	test   eax,eax
c0010924:	74 15                	je     c001093b <sysGetDiskVolumeLabel(regs*)+0x47>
c0010926:	83 ec 0c             	sub    esp,0xc
c0010929:	8b 38                	mov    edi,DWORD PTR [eax]
c001092b:	56                   	push   esi
c001092c:	53                   	push   ebx
c001092d:	52                   	push   edx
c001092e:	51                   	push   ecx
c001092f:	50                   	push   eax
c0010930:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010933:	83 c4 20             	add    esp,0x20
c0010936:	99                   	cdq    
c0010937:	5b                   	pop    ebx
c0010938:	5e                   	pop    esi
c0010939:	5f                   	pop    edi
c001093a:	c3                   	ret    
c001093b:	5b                   	pop    ebx
c001093c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010941:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010946:	5e                   	pop    esi
c0010947:	5f                   	pop    edi
c0010948:	c3                   	ret    

c0010949 <sysShutdown(regs*)>:
c0010949:	83 ec 0c             	sub    esp,0xc
c001094c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010950:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010953:	85 c0                	test   eax,eax
c0010955:	74 18                	je     c001096f <sysShutdown(regs*)+0x26>
c0010957:	83 f8 01             	cmp    eax,0x1
c001095a:	74 38                	je     c0010994 <sysShutdown(regs*)+0x4b>
c001095c:	83 f8 02             	cmp    eax,0x2
c001095f:	74 24                	je     c0010985 <sysShutdown(regs*)+0x3c>
c0010961:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010966:	ba ff ff ff ff       	mov    edx,0xffffffff
c001096b:	83 c4 0c             	add    esp,0xc
c001096e:	c3                   	ret    
c001096f:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c0010974:	8b 10                	mov    edx,DWORD PTR [eax]
c0010976:	6a 00                	push   0x0
c0010978:	6a 00                	push   0x0
c001097a:	6a 00                	push   0x0
c001097c:	50                   	push   eax
c001097d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010980:	83 c4 10             	add    esp,0x10
c0010983:	eb dc                	jmp    c0010961 <sysShutdown(regs*)+0x18>
c0010985:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c001098a:	8b 10                	mov    edx,DWORD PTR [eax]
c001098c:	6a 00                	push   0x0
c001098e:	6a 00                	push   0x0
c0010990:	6a 01                	push   0x1
c0010992:	eb e8                	jmp    c001097c <sysShutdown(regs*)+0x33>
c0010994:	a1 80 2f 02 c0       	mov    eax,ds:0xc0022f80
c0010999:	85 c0                	test   eax,eax
c001099b:	74 02                	je     c001099f <sysShutdown(regs*)+0x56>
c001099d:	ff d0                	call   eax
c001099f:	31 c0                	xor    eax,eax
c00109a1:	31 d2                	xor    edx,edx
c00109a3:	83 c4 0c             	add    esp,0xc
c00109a6:	c3                   	ret    

c00109a7 <sysCallRealpath(regs*)>:
c00109a7:	83 ec 0c             	sub    esp,0xc
c00109aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ae:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00109b1:	85 d2                	test   edx,edx
c00109b3:	74 07                	je     c00109bc <sysCallRealpath(regs*)+0x15>
c00109b5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109b8:	85 c0                	test   eax,eax
c00109ba:	75 0b                	jne    c00109c7 <sysCallRealpath(regs*)+0x20>
c00109bc:	b8 01 00 00 00       	mov    eax,0x1
c00109c1:	31 d2                	xor    edx,edx
c00109c3:	83 c4 0c             	add    esp,0xc
c00109c6:	c3                   	ret    
c00109c7:	51                   	push   ecx
c00109c8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00109ce:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00109d1:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00109d7:	51                   	push   ecx
c00109d8:	52                   	push   edx
c00109d9:	50                   	push   eax
c00109da:	e8 e1 a4 ff ff       	call   c000aec0 <Fs::standardiseFiles(char*, char const*, char const*)>
c00109df:	83 c4 10             	add    esp,0x10
c00109e2:	31 c0                	xor    eax,eax
c00109e4:	31 d2                	xor    edx,edx
c00109e6:	83 c4 0c             	add    esp,0xc
c00109e9:	c3                   	ret    

c00109ea <sysCallReadDir(regs*)>:
c00109ea:	53                   	push   ebx
c00109eb:	83 ec 18             	sub    esp,0x18
c00109ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00109f2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00109f5:	83 f8 02             	cmp    eax,0x2
c00109f8:	76 61                	jbe    c0010a5b <sysCallReadDir(regs*)+0x71>
c00109fa:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010a01:	77 49                	ja     c0010a4c <sysCallReadDir(regs*)+0x62>
c0010a03:	83 ec 0c             	sub    esp,0xc
c0010a06:	50                   	push   eax
c0010a07:	e8 3f 8d ff ff       	call   c000974b <getFromFileDescriptor(int)>
c0010a0c:	83 c4 10             	add    esp,0x10
c0010a0f:	85 c0                	test   eax,eax
c0010a11:	74 39                	je     c0010a4c <sysCallReadDir(regs*)+0x62>
c0010a13:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010a1b:	83 ec 0c             	sub    esp,0xc
c0010a1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a20:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010a24:	51                   	push   ecx
c0010a25:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010a28:	51                   	push   ecx
c0010a29:	6a 00                	push   0x0
c0010a2b:	68 10 01 00 00       	push   0x110
c0010a30:	50                   	push   eax
c0010a31:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a34:	83 c4 20             	add    esp,0x20
c0010a37:	85 c0                	test   eax,eax
c0010a39:	74 29                	je     c0010a64 <sysCallReadDir(regs*)+0x7a>
c0010a3b:	83 f8 07             	cmp    eax,0x7
c0010a3e:	74 1b                	je     c0010a5b <sysCallReadDir(regs*)+0x71>
c0010a40:	b8 02 00 00 00       	mov    eax,0x2
c0010a45:	31 d2                	xor    edx,edx
c0010a47:	83 c4 18             	add    esp,0x18
c0010a4a:	5b                   	pop    ebx
c0010a4b:	c3                   	ret    
c0010a4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a51:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a56:	83 c4 18             	add    esp,0x18
c0010a59:	5b                   	pop    ebx
c0010a5a:	c3                   	ret    
c0010a5b:	b8 01 00 00 00       	mov    eax,0x1
c0010a60:	31 d2                	xor    edx,edx
c0010a62:	eb e3                	jmp    c0010a47 <sysCallReadDir(regs*)+0x5d>
c0010a64:	31 c0                	xor    eax,eax
c0010a66:	31 d2                	xor    edx,edx
c0010a68:	eb dd                	jmp    c0010a47 <sysCallReadDir(regs*)+0x5d>

c0010a6a <sysCallIsATTY(regs*)>:
c0010a6a:	83 ec 0c             	sub    esp,0xc
c0010a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a71:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a74:	83 f8 02             	cmp    eax,0x2
c0010a77:	76 07                	jbe    c0010a80 <sysCallIsATTY(regs*)+0x16>
c0010a79:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010a7e:	75 28                	jne    c0010aa8 <sysCallIsATTY(regs*)+0x3e>
c0010a80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a88:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010a8e:	85 c0                	test   eax,eax
c0010a90:	74 26                	je     c0010ab8 <sysCallIsATTY(regs*)+0x4e>
c0010a92:	83 ec 0c             	sub    esp,0xc
c0010a95:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a97:	50                   	push   eax
c0010a98:	ff 12                	call   DWORD PTR [edx]
c0010a9a:	31 d2                	xor    edx,edx
c0010a9c:	25 ff 00 00 00       	and    eax,0xff
c0010aa1:	83 c4 10             	add    esp,0x10
c0010aa4:	83 c4 0c             	add    esp,0xc
c0010aa7:	c3                   	ret    
c0010aa8:	83 ec 0c             	sub    esp,0xc
c0010aab:	50                   	push   eax
c0010aac:	e8 9a 8c ff ff       	call   c000974b <getFromFileDescriptor(int)>
c0010ab1:	83 c4 10             	add    esp,0x10
c0010ab4:	85 c0                	test   eax,eax
c0010ab6:	75 da                	jne    c0010a92 <sysCallIsATTY(regs*)+0x28>
c0010ab8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010abd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ac2:	83 c4 0c             	add    esp,0xc
c0010ac5:	c3                   	ret    

c0010ac6 <sysCallSeek(regs*)>:
c0010ac6:	53                   	push   ebx
c0010ac7:	83 ec 08             	sub    esp,0x8
c0010aca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ace:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ad1:	8d 50 fd             	lea    edx,[eax-0x3]
c0010ad4:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010ada:	77 34                	ja     c0010b10 <sysCallSeek(regs*)+0x4a>
c0010adc:	83 ec 0c             	sub    esp,0xc
c0010adf:	50                   	push   eax
c0010ae0:	e8 66 8c ff ff       	call   c000974b <getFromFileDescriptor(int)>
c0010ae5:	83 c4 0c             	add    esp,0xc
c0010ae8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010aeb:	31 db                	xor    ebx,ebx
c0010aed:	53                   	push   ebx
c0010aee:	51                   	push   ecx
c0010aef:	50                   	push   eax
c0010af0:	e8 f3 a6 ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c0010af5:	83 c4 10             	add    esp,0x10
c0010af8:	85 c0                	test   eax,eax
c0010afa:	0f 95 c0             	setne  al
c0010afd:	31 d2                	xor    edx,edx
c0010aff:	25 ff 00 00 00       	and    eax,0xff
c0010b04:	f7 d8                	neg    eax
c0010b06:	83 d2 00             	adc    edx,0x0
c0010b09:	83 c4 08             	add    esp,0x8
c0010b0c:	f7 da                	neg    edx
c0010b0e:	5b                   	pop    ebx
c0010b0f:	c3                   	ret    
c0010b10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b15:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b1a:	83 c4 08             	add    esp,0x8
c0010b1d:	5b                   	pop    ebx
c0010b1e:	c3                   	ret    

c0010b1f <sysCallTell(regs*)>:
c0010b1f:	53                   	push   ebx
c0010b20:	83 ec 08             	sub    esp,0x8
c0010b23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b27:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b2a:	83 f8 02             	cmp    eax,0x2
c0010b2d:	76 50                	jbe    c0010b7f <sysCallTell(regs*)+0x60>
c0010b2f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b34:	76 19                	jbe    c0010b4f <sysCallTell(regs*)+0x30>
c0010b36:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b39:	31 d2                	xor    edx,edx
c0010b3b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b48:	31 c0                	xor    eax,eax
c0010b4a:	83 c4 08             	add    esp,0x8
c0010b4d:	5b                   	pop    ebx
c0010b4e:	c3                   	ret    
c0010b4f:	83 ec 0c             	sub    esp,0xc
c0010b52:	50                   	push   eax
c0010b53:	e8 f3 8b ff ff       	call   c000974b <getFromFileDescriptor(int)>
c0010b58:	5a                   	pop    edx
c0010b59:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010b5c:	59                   	pop    ecx
c0010b5d:	53                   	push   ebx
c0010b5e:	50                   	push   eax
c0010b5f:	e8 da a6 ff ff       	call   c000b23e <File::tell(unsigned long long*)>
c0010b64:	83 c4 10             	add    esp,0x10
c0010b67:	85 c0                	test   eax,eax
c0010b69:	0f 95 c0             	setne  al
c0010b6c:	31 d2                	xor    edx,edx
c0010b6e:	25 ff 00 00 00       	and    eax,0xff
c0010b73:	f7 d8                	neg    eax
c0010b75:	83 d2 00             	adc    edx,0x0
c0010b78:	83 c4 08             	add    esp,0x8
c0010b7b:	f7 da                	neg    edx
c0010b7d:	5b                   	pop    ebx
c0010b7e:	c3                   	ret    
c0010b7f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b84:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b89:	83 c4 08             	add    esp,0x8
c0010b8c:	5b                   	pop    ebx
c0010b8d:	c3                   	ret    

c0010b8e <sysCallSize(regs*)>:
c0010b8e:	53                   	push   ebx
c0010b8f:	83 ec 18             	sub    esp,0x18
c0010b92:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b96:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b99:	83 f8 02             	cmp    eax,0x2
c0010b9c:	76 56                	jbe    c0010bf4 <sysCallSize(regs*)+0x66>
c0010b9e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ba3:	76 19                	jbe    c0010bbe <sysCallSize(regs*)+0x30>
c0010ba5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010ba8:	31 d2                	xor    edx,edx
c0010baa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bb0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bb7:	31 c0                	xor    eax,eax
c0010bb9:	83 c4 18             	add    esp,0x18
c0010bbc:	5b                   	pop    ebx
c0010bbd:	c3                   	ret    
c0010bbe:	83 ec 0c             	sub    esp,0xc
c0010bc1:	50                   	push   eax
c0010bc2:	e8 84 8b ff ff       	call   c000974b <getFromFileDescriptor(int)>
c0010bc7:	83 c4 0c             	add    esp,0xc
c0010bca:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010bce:	52                   	push   edx
c0010bcf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010bd2:	52                   	push   edx
c0010bd3:	50                   	push   eax
c0010bd4:	e8 fd a7 ff ff       	call   c000b3d6 <File::stat(unsigned long long*, bool*)>
c0010bd9:	83 c4 10             	add    esp,0x10
c0010bdc:	85 c0                	test   eax,eax
c0010bde:	0f 95 c0             	setne  al
c0010be1:	31 d2                	xor    edx,edx
c0010be3:	25 ff 00 00 00       	and    eax,0xff
c0010be8:	f7 d8                	neg    eax
c0010bea:	83 d2 00             	adc    edx,0x0
c0010bed:	83 c4 18             	add    esp,0x18
c0010bf0:	f7 da                	neg    edx
c0010bf2:	5b                   	pop    ebx
c0010bf3:	c3                   	ret    
c0010bf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bf9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bfe:	83 c4 18             	add    esp,0x18
c0010c01:	5b                   	pop    ebx
c0010c02:	c3                   	ret    

c0010c03 <sysCallSizeFromFilename(regs*)>:
c0010c03:	57                   	push   edi
c0010c04:	56                   	push   esi
c0010c05:	53                   	push   ebx
c0010c06:	83 ec 20             	sub    esp,0x20
c0010c09:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c0d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010c10:	83 fb 02             	cmp    ebx,0x2
c0010c13:	0f 86 8c 00 00 00    	jbe    c0010ca5 <sysCallSizeFromFilename(regs*)+0xa2>
c0010c19:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010c1f:	76 1b                	jbe    c0010c3c <sysCallSizeFromFilename(regs*)+0x39>
c0010c21:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010c24:	31 d2                	xor    edx,edx
c0010c26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c33:	83 c4 20             	add    esp,0x20
c0010c36:	31 c0                	xor    eax,eax
c0010c38:	5b                   	pop    ebx
c0010c39:	5e                   	pop    esi
c0010c3a:	5f                   	pop    edi
c0010c3b:	c3                   	ret    
c0010c3c:	83 ec 0c             	sub    esp,0xc
c0010c3f:	68 14 01 00 00       	push   0x114
c0010c44:	e8 14 72 ff ff       	call   c0007e5d <malloc>
c0010c49:	83 c4 0c             	add    esp,0xc
c0010c4c:	89 c7                	mov    edi,eax
c0010c4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c53:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c56:	50                   	push   eax
c0010c57:	53                   	push   ebx
c0010c58:	57                   	push   edi
c0010c59:	e8 0c a4 ff ff       	call   c000b06a <File::File(char const*, Process*)>
c0010c5e:	83 c4 0c             	add    esp,0xc
c0010c61:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010c65:	50                   	push   eax
c0010c66:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010c69:	52                   	push   edx
c0010c6a:	57                   	push   edi
c0010c6b:	e8 66 a7 ff ff       	call   c000b3d6 <File::stat(unsigned long long*, bool*)>
c0010c70:	83 c4 10             	add    esp,0x10
c0010c73:	85 ff                	test   edi,edi
c0010c75:	74 14                	je     c0010c8b <sysCallSizeFromFilename(regs*)+0x88>
c0010c77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c7b:	8b 17                	mov    edx,DWORD PTR [edi]
c0010c7d:	83 ec 0c             	sub    esp,0xc
c0010c80:	57                   	push   edi
c0010c81:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010c84:	83 c4 10             	add    esp,0x10
c0010c87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c8b:	85 c0                	test   eax,eax
c0010c8d:	0f 95 c0             	setne  al
c0010c90:	31 d2                	xor    edx,edx
c0010c92:	25 ff 00 00 00       	and    eax,0xff
c0010c97:	f7 d8                	neg    eax
c0010c99:	83 d2 00             	adc    edx,0x0
c0010c9c:	83 c4 20             	add    esp,0x20
c0010c9f:	f7 da                	neg    edx
c0010ca1:	5b                   	pop    ebx
c0010ca2:	5e                   	pop    esi
c0010ca3:	5f                   	pop    edi
c0010ca4:	c3                   	ret    
c0010ca5:	83 c4 20             	add    esp,0x20
c0010ca8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cad:	5b                   	pop    ebx
c0010cae:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cb3:	5e                   	pop    esi
c0010cb4:	5f                   	pop    edi
c0010cb5:	c3                   	ret    

c0010cb6 <sysCallClose(regs*)>:
c0010cb6:	53                   	push   ebx
c0010cb7:	83 ec 08             	sub    esp,0x8
c0010cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cbe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010cc1:	83 f8 02             	cmp    eax,0x2
c0010cc4:	76 41                	jbe    c0010d07 <sysCallClose(regs*)+0x51>
c0010cc6:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010ccc:	83 fa 01             	cmp    edx,0x1
c0010ccf:	76 2d                	jbe    c0010cfe <sysCallClose(regs*)+0x48>
c0010cd1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010cd6:	77 2f                	ja     c0010d07 <sysCallClose(regs*)+0x51>
c0010cd8:	83 ec 0c             	sub    esp,0xc
c0010cdb:	50                   	push   eax
c0010cdc:	e8 6a 8a ff ff       	call   c000974b <getFromFileDescriptor(int)>
c0010ce1:	89 c3                	mov    ebx,eax
c0010ce3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ce6:	e8 9d a4 ff ff       	call   c000b188 <File::close()>
c0010ceb:	83 c4 10             	add    esp,0x10
c0010cee:	85 db                	test   ebx,ebx
c0010cf0:	74 0c                	je     c0010cfe <sysCallClose(regs*)+0x48>
c0010cf2:	83 ec 0c             	sub    esp,0xc
c0010cf5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cf7:	53                   	push   ebx
c0010cf8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010cfb:	83 c4 10             	add    esp,0x10
c0010cfe:	31 c0                	xor    eax,eax
c0010d00:	31 d2                	xor    edx,edx
c0010d02:	83 c4 08             	add    esp,0x8
c0010d05:	5b                   	pop    ebx
c0010d06:	c3                   	ret    
c0010d07:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d0c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d11:	83 c4 08             	add    esp,0x8
c0010d14:	5b                   	pop    ebx
c0010d15:	c3                   	ret    

c0010d16 <sysCallOpenDir(regs*)>:
c0010d16:	56                   	push   esi
c0010d17:	53                   	push   ebx
c0010d18:	50                   	push   eax
c0010d19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d20:	85 c0                	test   eax,eax
c0010d22:	74 5b                	je     c0010d7f <sysCallOpenDir(regs*)+0x69>
c0010d24:	83 ec 0c             	sub    esp,0xc
c0010d27:	68 14 01 00 00       	push   0x114
c0010d2c:	e8 2c 71 ff ff       	call   c0007e5d <malloc>
c0010d31:	83 c4 0c             	add    esp,0xc
c0010d34:	89 c6                	mov    esi,eax
c0010d36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d3e:	50                   	push   eax
c0010d3f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d42:	50                   	push   eax
c0010d43:	56                   	push   esi
c0010d44:	e8 4b a8 ff ff       	call   c000b594 <Directory::Directory(char const*, Process*)>
c0010d49:	83 c4 10             	add    esp,0x10
c0010d4c:	85 f6                	test   esi,esi
c0010d4e:	74 2f                	je     c0010d7f <sysCallOpenDir(regs*)+0x69>
c0010d50:	83 ec 0c             	sub    esp,0xc
c0010d53:	56                   	push   esi
c0010d54:	e8 fb a8 ff ff       	call   c000b654 <Directory::open()>
c0010d59:	83 c4 10             	add    esp,0x10
c0010d5c:	85 c0                	test   eax,eax
c0010d5e:	75 1f                	jne    c0010d7f <sysCallOpenDir(regs*)+0x69>
c0010d60:	83 ec 0c             	sub    esp,0xc
c0010d63:	56                   	push   esi
c0010d64:	e8 ed 86 ff ff       	call   c0009456 <UnixFile::getFileDescriptor()>
c0010d69:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d6c:	83 c4 10             	add    esp,0x10
c0010d6f:	89 02                	mov    DWORD PTR [edx],eax
c0010d71:	c1 f8 1f             	sar    eax,0x1f
c0010d74:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d77:	31 c0                	xor    eax,eax
c0010d79:	59                   	pop    ecx
c0010d7a:	31 d2                	xor    edx,edx
c0010d7c:	5b                   	pop    ebx
c0010d7d:	5e                   	pop    esi
c0010d7e:	c3                   	ret    
c0010d7f:	59                   	pop    ecx
c0010d80:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d85:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d8a:	5b                   	pop    ebx
c0010d8b:	5e                   	pop    esi
c0010d8c:	c3                   	ret    

c0010d8d <sysCallCloseDir(regs*)>:
c0010d8d:	53                   	push   ebx
c0010d8e:	83 ec 08             	sub    esp,0x8
c0010d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d95:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d98:	8d 50 fd             	lea    edx,[eax-0x3]
c0010d9b:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010da1:	77 2f                	ja     c0010dd2 <sysCallCloseDir(regs*)+0x45>
c0010da3:	83 ec 0c             	sub    esp,0xc
c0010da6:	50                   	push   eax
c0010da7:	e8 9f 89 ff ff       	call   c000974b <getFromFileDescriptor(int)>
c0010dac:	89 c3                	mov    ebx,eax
c0010dae:	89 04 24             	mov    DWORD PTR [esp],eax
c0010db1:	e8 fa a8 ff ff       	call   c000b6b0 <Directory::close()>
c0010db6:	83 c4 10             	add    esp,0x10
c0010db9:	85 db                	test   ebx,ebx
c0010dbb:	74 0c                	je     c0010dc9 <sysCallCloseDir(regs*)+0x3c>
c0010dbd:	83 ec 0c             	sub    esp,0xc
c0010dc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dc2:	53                   	push   ebx
c0010dc3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dc6:	83 c4 10             	add    esp,0x10
c0010dc9:	31 c0                	xor    eax,eax
c0010dcb:	31 d2                	xor    edx,edx
c0010dcd:	83 c4 08             	add    esp,0x8
c0010dd0:	5b                   	pop    ebx
c0010dd1:	c3                   	ret    
c0010dd2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dd7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ddc:	83 c4 08             	add    esp,0x8
c0010ddf:	5b                   	pop    ebx
c0010de0:	c3                   	ret    

c0010de1 <sysCallMakeDir(regs*)>:
c0010de1:	56                   	push   esi
c0010de2:	53                   	push   ebx
c0010de3:	83 ec 10             	sub    esp,0x10
c0010de6:	68 14 01 00 00       	push   0x114
c0010deb:	e8 6d 70 ff ff       	call   c0007e5d <malloc>
c0010df0:	83 c4 0c             	add    esp,0xc
c0010df3:	89 c3                	mov    ebx,eax
c0010df5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dfa:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010dfd:	56                   	push   esi
c0010dfe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e02:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e05:	50                   	push   eax
c0010e06:	53                   	push   ebx
c0010e07:	e8 88 a7 ff ff       	call   c000b594 <Directory::Directory(char const*, Process*)>
c0010e0c:	83 c4 10             	add    esp,0x10
c0010e0f:	85 db                	test   ebx,ebx
c0010e11:	74 32                	je     c0010e45 <sysCallMakeDir(regs*)+0x64>
c0010e13:	83 ec 0c             	sub    esp,0xc
c0010e16:	53                   	push   ebx
c0010e17:	e8 18 aa ff ff       	call   c000b834 <Directory::create()>
c0010e1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e1f:	89 c6                	mov    esi,eax
c0010e21:	e8 8a a8 ff ff       	call   c000b6b0 <Directory::close()>
c0010e26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e2b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e2e:	83 c4 10             	add    esp,0x10
c0010e31:	31 c0                	xor    eax,eax
c0010e33:	59                   	pop    ecx
c0010e34:	85 f6                	test   esi,esi
c0010e36:	5b                   	pop    ebx
c0010e37:	0f 95 c0             	setne  al
c0010e3a:	5e                   	pop    esi
c0010e3b:	31 d2                	xor    edx,edx
c0010e3d:	f7 d8                	neg    eax
c0010e3f:	83 d2 00             	adc    edx,0x0
c0010e42:	f7 da                	neg    edx
c0010e44:	c3                   	ret    
c0010e45:	59                   	pop    ecx
c0010e46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e4b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e50:	5b                   	pop    ebx
c0010e51:	5e                   	pop    esi
c0010e52:	c3                   	ret    

c0010e53 <sysCallWait(regs*)>:
c0010e53:	83 ec 10             	sub    esp,0x10
c0010e56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e5a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e5d:	52                   	push   edx
c0010e5e:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e61:	51                   	push   ecx
c0010e62:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e65:	50                   	push   eax
c0010e66:	e8 dd 2c 00 00       	call   c0013b48 <waitTask(int, int*, int)>
c0010e6b:	83 c4 1c             	add    esp,0x1c
c0010e6e:	99                   	cdq    
c0010e6f:	c3                   	ret    

c0010e70 <sysCallNotImpl(regs*)>:
c0010e70:	83 ec 18             	sub    esp,0x18
c0010e73:	68 c0 e7 01 c0       	push   0xc001e7c0
c0010e78:	e8 46 f8 ff ff       	call   c00106c3 <KePanic(char const*)>
c0010e7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e82:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e87:	83 c4 1c             	add    esp,0x1c
c0010e8a:	c3                   	ret    

c0010e8b <sysPanic(regs*)>:
c0010e8b:	83 ec 18             	sub    esp,0x18
c0010e8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e92:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e95:	50                   	push   eax
c0010e96:	e8 28 f8 ff ff       	call   c00106c3 <KePanic(char const*)>
c0010e9b:	b8 01 00 00 00       	mov    eax,0x1
c0010ea0:	31 d2                	xor    edx,edx
c0010ea2:	83 c4 1c             	add    esp,0x1c
c0010ea5:	c3                   	ret    

c0010ea6 <sysCallRmdir(regs*)>:
c0010ea6:	56                   	push   esi
c0010ea7:	53                   	push   ebx
c0010ea8:	83 ec 20             	sub    esp,0x20
c0010eab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010eaf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010eb2:	68 14 01 00 00       	push   0x114
c0010eb7:	e8 a1 6f ff ff       	call   c0007e5d <malloc>
c0010ebc:	83 c4 0c             	add    esp,0xc
c0010ebf:	89 c3                	mov    ebx,eax
c0010ec1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ec6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ec9:	50                   	push   eax
c0010eca:	56                   	push   esi
c0010ecb:	53                   	push   ebx
c0010ecc:	e8 99 a1 ff ff       	call   c000b06a <File::File(char const*, Process*)>
c0010ed1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ed4:	e8 c9 a3 ff ff       	call   c000b2a2 <File::unlink()>
c0010ed9:	83 c4 10             	add    esp,0x10
c0010edc:	85 db                	test   ebx,ebx
c0010ede:	74 14                	je     c0010ef4 <sysCallRmdir(regs*)+0x4e>
c0010ee0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ee4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ee6:	83 ec 0c             	sub    esp,0xc
c0010ee9:	53                   	push   ebx
c0010eea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010eed:	83 c4 10             	add    esp,0x10
c0010ef0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ef4:	85 c0                	test   eax,eax
c0010ef6:	0f 95 c0             	setne  al
c0010ef9:	31 d2                	xor    edx,edx
c0010efb:	25 ff 00 00 00       	and    eax,0xff
c0010f00:	f7 d8                	neg    eax
c0010f02:	83 d2 00             	adc    edx,0x0
c0010f05:	83 c4 14             	add    esp,0x14
c0010f08:	f7 da                	neg    edx
c0010f0a:	5b                   	pop    ebx
c0010f0b:	5e                   	pop    esi
c0010f0c:	c3                   	ret    

c0010f0d <sysCallUnlink(regs*)>:
c0010f0d:	56                   	push   esi
c0010f0e:	53                   	push   ebx
c0010f0f:	83 ec 20             	sub    esp,0x20
c0010f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f16:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f19:	68 14 01 00 00       	push   0x114
c0010f1e:	e8 3a 6f ff ff       	call   c0007e5d <malloc>
c0010f23:	83 c4 0c             	add    esp,0xc
c0010f26:	89 c3                	mov    ebx,eax
c0010f28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f2d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f30:	50                   	push   eax
c0010f31:	56                   	push   esi
c0010f32:	53                   	push   ebx
c0010f33:	e8 32 a1 ff ff       	call   c000b06a <File::File(char const*, Process*)>
c0010f38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f3b:	e8 62 a3 ff ff       	call   c000b2a2 <File::unlink()>
c0010f40:	83 c4 10             	add    esp,0x10
c0010f43:	85 db                	test   ebx,ebx
c0010f45:	74 14                	je     c0010f5b <sysCallUnlink(regs*)+0x4e>
c0010f47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f4b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f4d:	83 ec 0c             	sub    esp,0xc
c0010f50:	53                   	push   ebx
c0010f51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f54:	83 c4 10             	add    esp,0x10
c0010f57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f5b:	85 c0                	test   eax,eax
c0010f5d:	0f 95 c0             	setne  al
c0010f60:	31 d2                	xor    edx,edx
c0010f62:	25 ff 00 00 00       	and    eax,0xff
c0010f67:	f7 d8                	neg    eax
c0010f69:	83 d2 00             	adc    edx,0x0
c0010f6c:	83 c4 14             	add    esp,0x14
c0010f6f:	f7 da                	neg    edx
c0010f71:	5b                   	pop    ebx
c0010f72:	5e                   	pop    esi
c0010f73:	c3                   	ret    

c0010f74 <sysCallGetArgv(regs*)>:
c0010f74:	83 ec 0c             	sub    esp,0xc
c0010f77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f7b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f7e:	85 c0                	test   eax,eax
c0010f80:	78 2c                	js     c0010fae <sysCallGetArgv(regs*)+0x3a>
c0010f82:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010f88:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010f8b:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010f91:	7d 1b                	jge    c0010fae <sysCallGetArgv(regs*)+0x3a>
c0010f93:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010f9a:	85 c0                	test   eax,eax
c0010f9c:	74 18                	je     c0010fb6 <sysCallGetArgv(regs*)+0x42>
c0010f9e:	83 ec 08             	sub    esp,0x8
c0010fa1:	50                   	push   eax
c0010fa2:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010fa5:	50                   	push   eax
c0010fa6:	e8 75 f6 fe ff       	call   c0000620 <strcpy>
c0010fab:	83 c4 10             	add    esp,0x10
c0010fae:	31 c0                	xor    eax,eax
c0010fb0:	31 d2                	xor    edx,edx
c0010fb2:	83 c4 0c             	add    esp,0xc
c0010fb5:	c3                   	ret    
c0010fb6:	b8 01 00 00 00       	mov    eax,0x1
c0010fbb:	31 d2                	xor    edx,edx
c0010fbd:	83 c4 0c             	add    esp,0xc
c0010fc0:	c3                   	ret    

c0010fc1 <sysCallUSleep(regs*)>:
c0010fc1:	83 ec 1c             	sub    esp,0x1c
c0010fc4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010fc8:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010fcb:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010fce:	6a 00                	push   0x0
c0010fd0:	6a 64                	push   0x64
c0010fd2:	52                   	push   edx
c0010fd3:	50                   	push   eax
c0010fd4:	e8 27 b2 00 00       	call   c001c200 <__udivdi3>
c0010fd9:	83 c4 14             	add    esp,0x14
c0010fdc:	50                   	push   eax
c0010fdd:	e8 3a 2c 00 00       	call   c0013c1c <milliTenthSleep(unsigned int)>
c0010fe2:	31 c0                	xor    eax,eax
c0010fe4:	31 d2                	xor    edx,edx
c0010fe6:	83 c4 1c             	add    esp,0x1c
c0010fe9:	c3                   	ret    

c0010fea <sysCallSpawn(regs*)>:
c0010fea:	56                   	push   esi
c0010feb:	53                   	push   ebx
c0010fec:	50                   	push   eax
c0010fed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ff1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ff4:	85 c0                	test   eax,eax
c0010ff6:	75 08                	jne    c0011000 <sysCallSpawn(regs*)+0x16>
c0010ff8:	59                   	pop    ecx
c0010ff9:	31 c0                	xor    eax,eax
c0010ffb:	31 d2                	xor    edx,edx
c0010ffd:	5b                   	pop    ebx
c0010ffe:	5e                   	pop    esi
c0010fff:	c3                   	ret    
c0011000:	83 ec 0c             	sub    esp,0xc
c0011003:	68 1f 07 00 00       	push   0x71f
c0011008:	e8 50 6e ff ff       	call   c0007e5d <malloc>
c001100d:	83 c4 10             	add    esp,0x10
c0011010:	89 c6                	mov    esi,eax
c0011012:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011015:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011018:	85 c0                	test   eax,eax
c001101a:	75 33                	jne    c001104f <sysCallSpawn(regs*)+0x65>
c001101c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011021:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011024:	52                   	push   edx
c0011025:	50                   	push   eax
c0011026:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011029:	53                   	push   ebx
c001102a:	56                   	push   esi
c001102b:	e8 d0 22 00 00       	call   c0013300 <Process::Process(char const*, Process*, char**)>
c0011030:	83 c4 10             	add    esp,0x10
c0011033:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001103a:	75 bc                	jne    c0010ff8 <sysCallSpawn(regs*)+0xe>
c001103c:	83 ec 0c             	sub    esp,0xc
c001103f:	56                   	push   esi
c0011040:	e8 af 27 00 00       	call   c00137f4 <Process::createUserThread()>
c0011045:	8b 06                	mov    eax,DWORD PTR [esi]
c0011047:	83 c4 10             	add    esp,0x10
c001104a:	99                   	cdq    
c001104b:	59                   	pop    ecx
c001104c:	5b                   	pop    ebx
c001104d:	5e                   	pop    esi
c001104e:	c3                   	ret    
c001104f:	31 c0                	xor    eax,eax
c0011051:	eb d1                	jmp    c0011024 <sysCallSpawn(regs*)+0x3a>

c0011053 <sysCallGetEnv(regs*)>:
c0011053:	57                   	push   edi
c0011054:	56                   	push   esi
c0011055:	53                   	push   ebx
c0011056:	83 ec 1c             	sub    esp,0x1c
c0011059:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001105d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011062:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011065:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011068:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001106b:	50                   	push   eax
c001106c:	e8 9e f5 ff ff       	call   c001060f <Krnl::getProcessTotalEnvCount(Process*)>
c0011071:	83 c4 10             	add    esp,0x10
c0011074:	39 c7                	cmp    edi,eax
c0011076:	7c 14                	jl     c001108c <sysCallGetEnv(regs*)+0x39>
c0011078:	85 f6                	test   esi,esi
c001107a:	75 0b                	jne    c0011087 <sysCallGetEnv(regs*)+0x34>
c001107c:	83 c4 10             	add    esp,0x10
c001107f:	31 c0                	xor    eax,eax
c0011081:	5b                   	pop    ebx
c0011082:	31 d2                	xor    edx,edx
c0011084:	5e                   	pop    esi
c0011085:	5f                   	pop    edi
c0011086:	c3                   	ret    
c0011087:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001108a:	eb f0                	jmp    c001107c <sysCallGetEnv(regs*)+0x29>
c001108c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011090:	52                   	push   edx
c0011091:	57                   	push   edi
c0011092:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011098:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001109b:	51                   	push   ecx
c001109c:	50                   	push   eax
c001109d:	e8 8d f5 ff ff       	call   c001062f <Krnl::getProcessEnvPair(Process*, int)>
c00110a2:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00110a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110a9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110ad:	83 c4 0c             	add    esp,0xc
c00110b0:	85 db                	test   ebx,ebx
c00110b2:	75 23                	jne    c00110d7 <sysCallGetEnv(regs*)+0x84>
c00110b4:	83 ec 0c             	sub    esp,0xc
c00110b7:	50                   	push   eax
c00110b8:	e8 a3 f4 fe ff       	call   c0000560 <strlen>
c00110bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110c0:	89 c3                	mov    ebx,eax
c00110c2:	e8 99 f4 fe ff       	call   c0000560 <strlen>
c00110c7:	31 d2                	xor    edx,edx
c00110c9:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110cd:	83 c4 10             	add    esp,0x10
c00110d0:	83 c4 10             	add    esp,0x10
c00110d3:	5b                   	pop    ebx
c00110d4:	5e                   	pop    esi
c00110d5:	5f                   	pop    edi
c00110d6:	c3                   	ret    
c00110d7:	83 ec 08             	sub    esp,0x8
c00110da:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110dd:	50                   	push   eax
c00110de:	56                   	push   esi
c00110df:	e8 3c f5 fe ff       	call   c0000620 <strcpy>
c00110e4:	58                   	pop    eax
c00110e5:	5a                   	pop    edx
c00110e6:	68 da e7 01 c0       	push   0xc001e7da
c00110eb:	56                   	push   esi
c00110ec:	e8 ef f6 fe ff       	call   c00007e0 <strcat>
c00110f1:	59                   	pop    ecx
c00110f2:	5b                   	pop    ebx
c00110f3:	57                   	push   edi
c00110f4:	56                   	push   esi
c00110f5:	e8 e6 f6 fe ff       	call   c00007e0 <strcat>
c00110fa:	83 c4 10             	add    esp,0x10
c00110fd:	e9 7a ff ff ff       	jmp    c001107c <sysCallGetEnv(regs*)+0x29>

c0011102 <sysSetFatAttrib(regs*)>:
c0011102:	57                   	push   edi
c0011103:	56                   	push   esi
c0011104:	53                   	push   ebx
c0011105:	83 ec 1c             	sub    esp,0x1c
c0011108:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001110c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001110f:	68 14 01 00 00       	push   0x114
c0011114:	e8 44 6d ff ff       	call   c0007e5d <malloc>
c0011119:	83 c4 0c             	add    esp,0xc
c001111c:	89 c3                	mov    ebx,eax
c001111e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011123:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011126:	50                   	push   eax
c0011127:	57                   	push   edi
c0011128:	53                   	push   ebx
c0011129:	e8 3c 9f ff ff       	call   c000b06a <File::File(char const*, Process*)>
c001112e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011131:	83 c4 0c             	add    esp,0xc
c0011134:	0f b6 d4             	movzx  edx,ah
c0011137:	25 ff 00 00 00       	and    eax,0xff
c001113c:	52                   	push   edx
c001113d:	50                   	push   eax
c001113e:	53                   	push   ebx
c001113f:	e8 f8 a1 ff ff       	call   c000b33c <File::chfatattr(unsigned char, unsigned char)>
c0011144:	83 c4 10             	add    esp,0x10
c0011147:	85 db                	test   ebx,ebx
c0011149:	74 14                	je     c001115f <sysSetFatAttrib(regs*)+0x5d>
c001114b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001114f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011151:	83 ec 0c             	sub    esp,0xc
c0011154:	53                   	push   ebx
c0011155:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011158:	83 c4 10             	add    esp,0x10
c001115b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001115f:	85 c0                	test   eax,eax
c0011161:	0f 95 c0             	setne  al
c0011164:	31 d2                	xor    edx,edx
c0011166:	25 ff 00 00 00       	and    eax,0xff
c001116b:	f7 d8                	neg    eax
c001116d:	83 d2 00             	adc    edx,0x0
c0011170:	83 c4 10             	add    esp,0x10
c0011173:	f7 da                	neg    edx
c0011175:	5b                   	pop    ebx
c0011176:	5e                   	pop    esi
c0011177:	5f                   	pop    edi
c0011178:	c3                   	ret    

c0011179 <sysPipe(regs*)>:
c0011179:	57                   	push   edi
c001117a:	56                   	push   esi
c001117b:	53                   	push   ebx
c001117c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011180:	83 ec 0c             	sub    esp,0xc
c0011183:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011186:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011189:	6a 20                	push   0x20
c001118b:	e8 cd 6c ff ff       	call   c0007e5d <malloc>
c0011190:	89 c3                	mov    ebx,eax
c0011192:	58                   	pop    eax
c0011193:	5a                   	pop    edx
c0011194:	68 00 50 00 00       	push   0x5000
c0011199:	53                   	push   ebx
c001119a:	e8 bf 75 ff ff       	call   c000875e <Pipe::Pipe(int)>
c001119f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111a2:	e8 af 82 ff ff       	call   c0009456 <UnixFile::getFileDescriptor()>
c00111a7:	89 07                	mov    DWORD PTR [edi],eax
c00111a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111ac:	e8 a5 82 ff ff       	call   c0009456 <UnixFile::getFileDescriptor()>
c00111b1:	83 c4 10             	add    esp,0x10
c00111b4:	89 06                	mov    DWORD PTR [esi],eax
c00111b6:	31 d2                	xor    edx,edx
c00111b8:	5b                   	pop    ebx
c00111b9:	31 c0                	xor    eax,eax
c00111bb:	5e                   	pop    esi
c00111bc:	5f                   	pop    edi
c00111bd:	c3                   	ret    

c00111be <sysGetUnixTime(regs*)>:
c00111be:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c00111c3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111cd:	e9 a8 a8 ff ff       	jmp    c000ba7a <Clock::timeInSecondsLocal()>

c00111d2 <string_ends_with(char const*, char const*)>:
c00111d2:	57                   	push   edi
c00111d3:	56                   	push   esi
c00111d4:	53                   	push   ebx
c00111d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111d9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00111dd:	83 ec 0c             	sub    esp,0xc
c00111e0:	53                   	push   ebx
c00111e1:	e8 7a f3 fe ff       	call   c0000560 <strlen>
c00111e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111e9:	89 c6                	mov    esi,eax
c00111eb:	e8 70 f3 fe ff       	call   c0000560 <strlen>
c00111f0:	83 c4 10             	add    esp,0x10
c00111f3:	39 c6                	cmp    esi,eax
c00111f5:	7d 06                	jge    c00111fd <string_ends_with(char const*, char const*)+0x2b>
c00111f7:	5b                   	pop    ebx
c00111f8:	31 c0                	xor    eax,eax
c00111fa:	5e                   	pop    esi
c00111fb:	5f                   	pop    edi
c00111fc:	c3                   	ret    
c00111fd:	83 ec 08             	sub    esp,0x8
c0011200:	29 c6                	sub    esi,eax
c0011202:	57                   	push   edi
c0011203:	01 f3                	add    ebx,esi
c0011205:	53                   	push   ebx
c0011206:	e8 f5 f4 fe ff       	call   c0000700 <strcmp>
c001120b:	83 c4 10             	add    esp,0x10
c001120e:	85 c0                	test   eax,eax
c0011210:	5b                   	pop    ebx
c0011211:	0f 94 c0             	sete   al
c0011214:	5e                   	pop    esi
c0011215:	25 ff 00 00 00       	and    eax,0xff
c001121a:	5f                   	pop    edi
c001121b:	c3                   	ret    

c001121c <sysCallOpen(regs*)>:
c001121c:	56                   	push   esi
c001121d:	53                   	push   ebx
c001121e:	81 ec 04 01 00 00    	sub    esp,0x104
c0011224:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001122b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001122e:	85 c9                	test   ecx,ecx
c0011230:	0f 84 b9 01 00 00    	je     c00113ef <sysCallOpen(regs*)+0x1d3>
c0011236:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011239:	85 c0                	test   eax,eax
c001123b:	0f 84 ae 01 00 00    	je     c00113ef <sysCallOpen(regs*)+0x1d3>
c0011241:	52                   	push   edx
c0011242:	68 dc e7 01 c0       	push   0xc001e7dc
c0011247:	50                   	push   eax
c0011248:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001124c:	56                   	push   esi
c001124d:	e8 6e 9c ff ff       	call   c000aec0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011252:	89 34 24             	mov    DWORD PTR [esp],esi
c0011255:	e8 06 f3 fe ff       	call   c0000560 <strlen>
c001125a:	83 c4 10             	add    esp,0x10
c001125d:	48                   	dec    eax
c001125e:	74 1d                	je     c001127d <sysCallOpen(regs*)+0x61>
c0011260:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011263:	eb 0f                	jmp    c0011274 <sysCallOpen(regs*)+0x58>
c0011265:	80 fa 3a             	cmp    dl,0x3a
c0011268:	74 0f                	je     c0011279 <sysCallOpen(regs*)+0x5d>
c001126a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001126e:	48                   	dec    eax
c001126f:	74 0c                	je     c001127d <sysCallOpen(regs*)+0x61>
c0011271:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011274:	80 fa 2e             	cmp    dl,0x2e
c0011277:	75 ec                	jne    c0011265 <sysCallOpen(regs*)+0x49>
c0011279:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001127d:	83 ec 08             	sub    esp,0x8
c0011280:	68 e0 e7 01 c0       	push   0xc001e7e0
c0011285:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011288:	50                   	push   eax
c0011289:	e8 44 ff ff ff       	call   c00111d2 <string_ends_with(char const*, char const*)>
c001128e:	83 c4 10             	add    esp,0x10
c0011291:	85 c0                	test   eax,eax
c0011293:	74 1d                	je     c00112b2 <sysCallOpen(regs*)+0x96>
c0011295:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011298:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001129e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112a5:	81 c4 04 01 00 00    	add    esp,0x104
c00112ab:	31 c0                	xor    eax,eax
c00112ad:	31 d2                	xor    edx,edx
c00112af:	5b                   	pop    ebx
c00112b0:	5e                   	pop    esi
c00112b1:	c3                   	ret    
c00112b2:	83 ec 08             	sub    esp,0x8
c00112b5:	68 e5 e7 01 c0       	push   0xc001e7e5
c00112ba:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112bd:	50                   	push   eax
c00112be:	e8 0f ff ff ff       	call   c00111d2 <string_ends_with(char const*, char const*)>
c00112c3:	83 c4 10             	add    esp,0x10
c00112c6:	85 c0                	test   eax,eax
c00112c8:	75 cb                	jne    c0011295 <sysCallOpen(regs*)+0x79>
c00112ca:	83 ec 08             	sub    esp,0x8
c00112cd:	68 e1 e7 01 c0       	push   0xc001e7e1
c00112d2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112d5:	50                   	push   eax
c00112d6:	e8 25 f4 fe ff       	call   c0000700 <strcmp>
c00112db:	83 c4 10             	add    esp,0x10
c00112de:	85 c0                	test   eax,eax
c00112e0:	74 b3                	je     c0011295 <sysCallOpen(regs*)+0x79>
c00112e2:	83 ec 08             	sub    esp,0x8
c00112e5:	68 e0 e7 01 c0       	push   0xc001e7e0
c00112ea:	56                   	push   esi
c00112eb:	e8 e2 fe ff ff       	call   c00111d2 <string_ends_with(char const*, char const*)>
c00112f0:	83 c4 10             	add    esp,0x10
c00112f3:	85 c0                	test   eax,eax
c00112f5:	75 9e                	jne    c0011295 <sysCallOpen(regs*)+0x79>
c00112f7:	83 ec 08             	sub    esp,0x8
c00112fa:	68 ea e7 01 c0       	push   0xc001e7ea
c00112ff:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011302:	50                   	push   eax
c0011303:	e8 ca fe ff ff       	call   c00111d2 <string_ends_with(char const*, char const*)>
c0011308:	83 c4 10             	add    esp,0x10
c001130b:	85 c0                	test   eax,eax
c001130d:	0f 85 ef 00 00 00    	jne    c0011402 <sysCallOpen(regs*)+0x1e6>
c0011313:	83 ec 08             	sub    esp,0x8
c0011316:	68 ef e7 01 c0       	push   0xc001e7ef
c001131b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001131e:	50                   	push   eax
c001131f:	e8 ae fe ff ff       	call   c00111d2 <string_ends_with(char const*, char const*)>
c0011324:	83 c4 10             	add    esp,0x10
c0011327:	85 c0                	test   eax,eax
c0011329:	0f 85 d3 00 00 00    	jne    c0011402 <sysCallOpen(regs*)+0x1e6>
c001132f:	83 ec 08             	sub    esp,0x8
c0011332:	68 eb e7 01 c0       	push   0xc001e7eb
c0011337:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001133a:	51                   	push   ecx
c001133b:	e8 c0 f3 fe ff       	call   c0000700 <strcmp>
c0011340:	83 c4 10             	add    esp,0x10
c0011343:	85 c0                	test   eax,eax
c0011345:	0f 84 b7 00 00 00    	je     c0011402 <sysCallOpen(regs*)+0x1e6>
c001134b:	83 ec 08             	sub    esp,0x8
c001134e:	68 ea e7 01 c0       	push   0xc001e7ea
c0011353:	56                   	push   esi
c0011354:	e8 79 fe ff ff       	call   c00111d2 <string_ends_with(char const*, char const*)>
c0011359:	83 c4 10             	add    esp,0x10
c001135c:	85 c0                	test   eax,eax
c001135e:	0f 85 9e 00 00 00    	jne    c0011402 <sysCallOpen(regs*)+0x1e6>
c0011364:	83 ec 0c             	sub    esp,0xc
c0011367:	68 14 01 00 00       	push   0x114
c001136c:	e8 ec 6a ff ff       	call   c0007e5d <malloc>
c0011371:	83 c4 0c             	add    esp,0xc
c0011374:	89 c6                	mov    esi,eax
c0011376:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001137b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001137e:	50                   	push   eax
c001137f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011382:	52                   	push   edx
c0011383:	56                   	push   esi
c0011384:	e8 e1 9c ff ff       	call   c000b06a <File::File(char const*, Process*)>
c0011389:	83 c4 10             	add    esp,0x10
c001138c:	85 f6                	test   esi,esi
c001138e:	74 5f                	je     c00113ef <sysCallOpen(regs*)+0x1d3>
c0011390:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011393:	89 d0                	mov    eax,edx
c0011395:	25 ff 00 00 00       	and    eax,0xff
c001139a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001139d:	89 d0                	mov    eax,edx
c001139f:	83 e0 01             	and    eax,0x1
c00113a2:	f6 c2 02             	test   dl,0x2
c00113a5:	74 03                	je     c00113aa <sysCallOpen(regs*)+0x18e>
c00113a7:	83 c8 02             	or     eax,0x2
c00113aa:	f6 c2 04             	test   dl,0x4
c00113ad:	74 03                	je     c00113b2 <sysCallOpen(regs*)+0x196>
c00113af:	83 c8 04             	or     eax,0x4
c00113b2:	f6 c2 08             	test   dl,0x8
c00113b5:	74 03                	je     c00113ba <sysCallOpen(regs*)+0x19e>
c00113b7:	83 c8 0a             	or     eax,0xa
c00113ba:	83 e2 10             	and    edx,0x10
c00113bd:	74 03                	je     c00113c2 <sysCallOpen(regs*)+0x1a6>
c00113bf:	83 c8 12             	or     eax,0x12
c00113c2:	83 ec 08             	sub    esp,0x8
c00113c5:	50                   	push   eax
c00113c6:	56                   	push   esi
c00113c7:	e8 5e 9d ff ff       	call   c000b12a <File::open(FileOpenMode)>
c00113cc:	83 c4 10             	add    esp,0x10
c00113cf:	85 c0                	test   eax,eax
c00113d1:	75 1c                	jne    c00113ef <sysCallOpen(regs*)+0x1d3>
c00113d3:	83 ec 0c             	sub    esp,0xc
c00113d6:	56                   	push   esi
c00113d7:	e8 7a 80 ff ff       	call   c0009456 <UnixFile::getFileDescriptor()>
c00113dc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113df:	83 c4 10             	add    esp,0x10
c00113e2:	89 02                	mov    DWORD PTR [edx],eax
c00113e4:	c1 f8 1f             	sar    eax,0x1f
c00113e7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113ea:	e9 b6 fe ff ff       	jmp    c00112a5 <sysCallOpen(regs*)+0x89>
c00113ef:	81 c4 04 01 00 00    	add    esp,0x104
c00113f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113ff:	5b                   	pop    ebx
c0011400:	5e                   	pop    esi
c0011401:	c3                   	ret    
c0011402:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011405:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001140b:	e9 8e fe ff ff       	jmp    c001129e <sysCallOpen(regs*)+0x82>

c0011410 <KeLoadSystemCalls()>:
c0011410:	c7 05 80 34 02 c0 8a 1f 01 c0 	mov    DWORD PTR ds:0xc0023480,0xc0011f8a
c001141a:	c7 05 84 34 02 c0 81 1b 01 c0 	mov    DWORD PTR ds:0xc0023484,0xc0011b81
c0011424:	c7 05 88 34 02 c0 70 1d 01 c0 	mov    DWORD PTR ds:0xc0023488,0xc0011d70
c001142e:	c7 05 8c 34 02 c0 c0 1e 01 c0 	mov    DWORD PTR ds:0xc002348c,0xc0011ec0
c0011438:	c7 05 90 34 02 c0 08 1d 01 c0 	mov    DWORD PTR ds:0xc0023490,0xc0011d08
c0011442:	c7 05 94 34 02 c0 b8 1b 01 c0 	mov    DWORD PTR ds:0xc0023494,0xc0011bb8
c001144c:	c7 05 98 34 02 c0 99 1b 01 c0 	mov    DWORD PTR ds:0xc0023498,0xc0011b99
c0011456:	c7 05 9c 34 02 c0 c5 1d 01 c0 	mov    DWORD PTR ds:0xc002349c,0xc0011dc5
c0011460:	c7 05 a4 34 02 c0 b6 0c 01 c0 	mov    DWORD PTR ds:0xc00234a4,0xc0010cb6
c001146a:	c7 05 a0 34 02 c0 1c 12 01 c0 	mov    DWORD PTR ds:0xc00234a0,0xc001121c
c0011474:	c7 05 a8 34 02 c0 16 0d 01 c0 	mov    DWORD PTR ds:0xc00234a8,0xc0010d16
c001147e:	c7 05 ac 34 02 c0 ea 09 01 c0 	mov    DWORD PTR ds:0xc00234ac,0xc00109ea
c0011488:	c7 05 b0 34 02 c0 11 08 01 c0 	mov    DWORD PTR ds:0xc00234b0,0xc0010811
c0011492:	c7 05 b4 34 02 c0 16 08 01 c0 	mov    DWORD PTR ds:0xc00234b4,0xc0010816
c001149c:	c7 05 b8 34 02 c0 e1 0d 01 c0 	mov    DWORD PTR ds:0xc00234b8,0xc0010de1
c00114a6:	c7 05 bc 34 02 c0 8d 0d 01 c0 	mov    DWORD PTR ds:0xc00234bc,0xc0010d8d
c00114b0:	c7 05 c0 34 02 c0 c6 0a 01 c0 	mov    DWORD PTR ds:0xc00234c0,0xc0010ac6
c00114ba:	c7 05 c4 34 02 c0 1f 0b 01 c0 	mov    DWORD PTR ds:0xc00234c4,0xc0010b1f
c00114c4:	c7 05 c8 34 02 c0 8e 0b 01 c0 	mov    DWORD PTR ds:0xc00234c8,0xc0010b8e
c00114ce:	c7 05 cc 34 02 c0 1b 08 01 c0 	mov    DWORD PTR ds:0xc00234cc,0xc001081b
c00114d8:	c7 05 d0 34 02 c0 53 0e 01 c0 	mov    DWORD PTR ds:0xc00234d0,0xc0010e53
c00114e2:	c7 05 d4 34 02 c0 70 0e 01 c0 	mov    DWORD PTR ds:0xc00234d4,0xc0010e70
c00114ec:	c7 05 d8 34 02 c0 70 0e 01 c0 	mov    DWORD PTR ds:0xc00234d8,0xc0010e70
c00114f6:	c7 05 dc 34 02 c0 a6 0e 01 c0 	mov    DWORD PTR ds:0xc00234dc,0xc0010ea6
c0011500:	c7 05 e0 34 02 c0 0d 0f 01 c0 	mov    DWORD PTR ds:0xc00234e0,0xc0010f0d
c001150a:	c7 05 e4 34 02 c0 25 08 01 c0 	mov    DWORD PTR ds:0xc00234e4,0xc0010825
c0011514:	c7 05 e8 34 02 c0 74 0f 01 c0 	mov    DWORD PTR ds:0xc00234e8,0xc0010f74
c001151e:	c7 05 ec 34 02 c0 a7 09 01 c0 	mov    DWORD PTR ds:0xc00234ec,0xc00109a7
c0011528:	c7 05 f0 34 02 c0 35 08 01 c0 	mov    DWORD PTR ds:0xc00234f0,0xc0010835
c0011532:	c7 05 f4 34 02 c0 6a 0a 01 c0 	mov    DWORD PTR ds:0xc00234f4,0xc0010a6a
c001153c:	c7 05 f8 34 02 c0 c1 0f 01 c0 	mov    DWORD PTR ds:0xc00234f8,0xc0010fc1
c0011546:	c7 05 fc 34 02 c0 03 0c 01 c0 	mov    DWORD PTR ds:0xc00234fc,0xc0010c03
c0011550:	c7 05 00 35 02 c0 ea 0f 01 c0 	mov    DWORD PTR ds:0xc0023500,0xc0010fea
c001155a:	c7 05 04 35 02 c0 53 10 01 c0 	mov    DWORD PTR ds:0xc0023504,0xc0011053
c0011564:	c7 05 0c 35 02 c0 3d 08 01 c0 	mov    DWORD PTR ds:0xc002350c,0xc001083d
c001156e:	c7 05 10 35 02 c0 aa 08 01 c0 	mov    DWORD PTR ds:0xc0023510,0xc00108aa
c0011578:	c7 05 14 35 02 c0 f4 08 01 c0 	mov    DWORD PTR ds:0xc0023514,0xc00108f4
c0011582:	c7 05 18 35 02 c0 02 11 01 c0 	mov    DWORD PTR ds:0xc0023518,0xc0011102
c001158c:	c7 05 1c 35 02 c0 8b 0e 01 c0 	mov    DWORD PTR ds:0xc002351c,0xc0010e8b
c0011596:	c7 05 20 35 02 c0 49 09 01 c0 	mov    DWORD PTR ds:0xc0023520,0xc0010949
c00115a0:	c7 05 24 35 02 c0 79 11 01 c0 	mov    DWORD PTR ds:0xc0023524,0xc0011179
c00115aa:	c7 05 28 35 02 c0 be 11 01 c0 	mov    DWORD PTR ds:0xc0023528,0xc00111be
c00115b4:	c7 05 2c 35 02 c0 60 1c 01 c0 	mov    DWORD PTR ds:0xc002352c,0xc0011c60
c00115be:	c7 05 30 35 02 c0 e1 1d 01 c0 	mov    DWORD PTR ds:0xc0023530,0xc0011de1
c00115c8:	c7 05 34 35 02 c0 76 1e 01 c0 	mov    DWORD PTR ds:0xc0023534,0xc0011e76
c00115d2:	c7 05 38 35 02 c0 4b 1b 01 c0 	mov    DWORD PTR ds:0xc0023538,0xc0011b4b
c00115dc:	c7 05 3c 35 02 c0 28 1f 01 c0 	mov    DWORD PTR ds:0xc002353c,0xc0011f28
c00115e6:	c7 05 40 35 02 c0 c4 1b 01 c0 	mov    DWORD PTR ds:0xc0023540,0xc0011bc4
c00115f0:	c7 05 44 35 02 c0 de 1b 01 c0 	mov    DWORD PTR ds:0xc0023544,0xc0011bde
c00115fa:	c3                   	ret    

c00115fb <KeSystemCall(regs*, void*)>:
c00115fb:	53                   	push   ebx
c00115fc:	83 ec 08             	sub    esp,0x8
c00115ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011603:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011606:	83 f8 7f             	cmp    eax,0x7f
c0011609:	77 16                	ja     c0011621 <KeSystemCall(regs*, void*)+0x26>
c001160b:	8b 14 85 80 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb80]
c0011612:	85 d2                	test   edx,edx
c0011614:	74 0b                	je     c0011621 <KeSystemCall(regs*, void*)+0x26>
c0011616:	83 ec 0c             	sub    esp,0xc
c0011619:	53                   	push   ebx
c001161a:	ff d2                	call   edx
c001161c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001161f:	eb 0d                	jmp    c001162e <KeSystemCall(regs*, void*)+0x33>
c0011621:	52                   	push   edx
c0011622:	52                   	push   edx
c0011623:	50                   	push   eax
c0011624:	68 f4 e7 01 c0       	push   0xc001e7f4
c0011629:	e8 c6 94 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001162e:	83 c4 10             	add    esp,0x10
c0011631:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011636:	31 d2                	xor    edx,edx
c0011638:	83 c4 08             	add    esp,0x8
c001163b:	5b                   	pop    ebx
c001163c:	c3                   	ret    

c001163d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001163d:	55                   	push   ebp
c001163e:	57                   	push   edi
c001163f:	56                   	push   esi
c0011640:	53                   	push   ebx
c0011641:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011647:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001164e:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011650:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011653:	80 fb 40             	cmp    bl,0x40
c0011656:	75 1b                	jne    c0011673 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011658:	8a 16                	mov    dl,BYTE PTR [esi]
c001165a:	84 d2                	test   dl,dl
c001165c:	0f 84 f1 00 00 00    	je     c0011753 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011662:	8d 46 01             	lea    eax,[esi+0x1]
c0011665:	80 fa 3a             	cmp    dl,0x3a
c0011668:	74 04                	je     c001166e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001166a:	89 c6                	mov    esi,eax
c001166c:	eb ea                	jmp    c0011658 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001166e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011671:	89 c6                	mov    esi,eax
c0011673:	50                   	push   eax
c0011674:	6a 40                	push   0x40
c0011676:	6a 00                	push   0x0
c0011678:	8d 44 24 24          	lea    eax,[esp+0x24]
c001167c:	50                   	push   eax
c001167d:	e8 6e ee fe ff       	call   c00004f0 <memset>
c0011682:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0011689:	31 c0                	xor    eax,eax
c001168b:	83 c4 10             	add    esp,0x10
c001168e:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011690:	84 c9                	test   cl,cl
c0011692:	0f 84 bb 00 00 00    	je     c0011753 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011698:	3d c7 00 00 00       	cmp    eax,0xc7
c001169d:	0f 8f b0 00 00 00    	jg     c0011753 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00116a3:	80 f9 0a             	cmp    cl,0xa
c00116a6:	0f 85 98 00 00 00    	jne    c0011744 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00116ac:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00116b1:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00116b5:	a8 df                	test   al,0xdf
c00116b7:	0f 94 c1             	sete   cl
c00116ba:	3c 23                	cmp    al,0x23
c00116bc:	0f 94 c2             	sete   dl
c00116bf:	08 d1                	or     cl,dl
c00116c1:	75 4a                	jne    c001170d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00116c3:	8d 50 f7             	lea    edx,[eax-0x9]
c00116c6:	80 fa 01             	cmp    dl,0x1
c00116c9:	76 42                	jbe    c001170d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00116cb:	3c 5b                	cmp    al,0x5b
c00116cd:	75 42                	jne    c0011711 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00116cf:	80 fb 40             	cmp    bl,0x40
c00116d2:	75 39                	jne    c001170d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00116d4:	83 ec 0c             	sub    esp,0xc
c00116d7:	8d 54 24 65          	lea    edx,[esp+0x65]
c00116db:	52                   	push   edx
c00116dc:	e8 7f ee fe ff       	call   c0000560 <strlen>
c00116e1:	83 c4 10             	add    esp,0x10
c00116e4:	83 f8 3f             	cmp    eax,0x3f
c00116e7:	77 6a                	ja     c0011753 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00116e9:	50                   	push   eax
c00116ea:	50                   	push   eax
c00116eb:	8d 54 24 61          	lea    edx,[esp+0x61]
c00116ef:	52                   	push   edx
c00116f0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00116f4:	52                   	push   edx
c00116f5:	e8 26 ef fe ff       	call   c0000620 <strcpy>
c00116fa:	58                   	pop    eax
c00116fb:	8d 54 24 24          	lea    edx,[esp+0x24]
c00116ff:	52                   	push   edx
c0011700:	e8 5b ee fe ff       	call   c0000560 <strlen>
c0011705:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001170a:	83 c4 10             	add    esp,0x10
c001170d:	31 d2                	xor    edx,edx
c001170f:	eb 3a                	jmp    c001174b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011711:	80 fb 40             	cmp    bl,0x40
c0011714:	74 06                	je     c001171c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0011716:	8d 44 24 58          	lea    eax,[esp+0x58]
c001171a:	eb 20                	jmp    c001173c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001171c:	50                   	push   eax
c001171d:	50                   	push   eax
c001171e:	55                   	push   ebp
c001171f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011723:	50                   	push   eax
c0011724:	e8 d7 ef fe ff       	call   c0000700 <strcmp>
c0011729:	83 c4 10             	add    esp,0x10
c001172c:	85 c0                	test   eax,eax
c001172e:	75 dd                	jne    c001170d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011730:	eb e4                	jmp    c0011716 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011732:	8d 50 01             	lea    edx,[eax+0x1]
c0011735:	80 f9 3d             	cmp    cl,0x3d
c0011738:	74 1d                	je     c0011757 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001173a:	89 d0                	mov    eax,edx
c001173c:	8a 08                	mov    cl,BYTE PTR [eax]
c001173e:	84 c9                	test   cl,cl
c0011740:	75 f0                	jne    c0011732 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011742:	eb 0f                	jmp    c0011753 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011744:	8d 50 01             	lea    edx,[eax+0x1]
c0011747:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001174b:	47                   	inc    edi
c001174c:	89 d0                	mov    eax,edx
c001174e:	e9 3b ff ff ff       	jmp    c001168e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011753:	31 c0                	xor    eax,eax
c0011755:	eb 33                	jmp    c001178a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0011757:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001175b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001175e:	50                   	push   eax
c001175f:	50                   	push   eax
c0011760:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011764:	50                   	push   eax
c0011765:	56                   	push   esi
c0011766:	e8 95 ef fe ff       	call   c0000700 <strcmp>
c001176b:	83 c4 10             	add    esp,0x10
c001176e:	85 c0                	test   eax,eax
c0011770:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011774:	75 97                	jne    c001170d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011776:	51                   	push   ecx
c0011777:	51                   	push   ecx
c0011778:	52                   	push   edx
c0011779:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011780:	e8 9b ee fe ff       	call   c0000620 <strcpy>
c0011785:	83 c4 10             	add    esp,0x10
c0011788:	b0 01                	mov    al,0x1
c001178a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011790:	5b                   	pop    ebx
c0011791:	5e                   	pop    esi
c0011792:	5f                   	pop    edi
c0011793:	5d                   	pop    ebp
c0011794:	c3                   	ret    

c0011795 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0011795:	57                   	push   edi
c0011796:	56                   	push   esi
c0011797:	53                   	push   ebx
c0011798:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001179e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00117a5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00117ac:	53                   	push   ebx
c00117ad:	e8 ae ed fe ff       	call   c0000560 <strlen>
c00117b2:	89 34 24             	mov    DWORD PTR [esp],esi
c00117b5:	89 c7                	mov    edi,eax
c00117b7:	e8 a4 ed fe ff       	call   c0000560 <strlen>
c00117bc:	83 c4 10             	add    esp,0x10
c00117bf:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00117c3:	3d ff 00 00 00       	cmp    eax,0xff
c00117c8:	0f 87 d3 00 00 00    	ja     c00118a1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00117ce:	57                   	push   edi
c00117cf:	57                   	push   edi
c00117d0:	56                   	push   esi
c00117d1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00117d5:	56                   	push   esi
c00117d6:	e8 45 ee fe ff       	call   c0000620 <strcpy>
c00117db:	58                   	pop    eax
c00117dc:	5a                   	pop    edx
c00117dd:	68 a5 ea 01 c0       	push   0xc001eaa5
c00117e2:	56                   	push   esi
c00117e3:	e8 f8 ef fe ff       	call   c00007e0 <strcat>
c00117e8:	59                   	pop    ecx
c00117e9:	5f                   	pop    edi
c00117ea:	53                   	push   ebx
c00117eb:	56                   	push   esi
c00117ec:	e8 ef ef fe ff       	call   c00007e0 <strcat>
c00117f1:	58                   	pop    eax
c00117f2:	5a                   	pop    edx
c00117f3:	68 08 e8 01 c0       	push   0xc001e808
c00117f8:	56                   	push   esi
c00117f9:	e8 e2 ef fe ff       	call   c00007e0 <strcat>
c00117fe:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011805:	e8 53 66 ff ff       	call   c0007e5d <malloc>
c001180a:	83 c4 0c             	add    esp,0xc
c001180d:	89 c3                	mov    ebx,eax
c001180f:	ff 35 70 3e 02 c0    	push   DWORD PTR ds:0xc0023e70
c0011815:	56                   	push   esi
c0011816:	50                   	push   eax
c0011817:	e8 4e 98 ff ff       	call   c000b06a <File::File(char const*, Process*)>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	85 db                	test   ebx,ebx
c0011821:	74 7e                	je     c00118a1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011823:	51                   	push   ecx
c0011824:	51                   	push   ecx
c0011825:	6a 01                	push   0x1
c0011827:	53                   	push   ebx
c0011828:	e8 fd 98 ff ff       	call   c000b12a <File::open(FileOpenMode)>
c001182d:	83 c4 10             	add    esp,0x10
c0011830:	85 c0                	test   eax,eax
c0011832:	74 08                	je     c001183c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011834:	83 ec 0c             	sub    esp,0xc
c0011837:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011839:	53                   	push   ebx
c001183a:	eb 5f                	jmp    c001189b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001183c:	52                   	push   edx
c001183d:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011841:	50                   	push   eax
c0011842:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011846:	50                   	push   eax
c0011847:	53                   	push   ebx
c0011848:	e8 89 9b ff ff       	call   c000b3d6 <File::stat(unsigned long long*, bool*)>
c001184d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011851:	83 c4 10             	add    esp,0x10
c0011854:	89 c1                	mov    ecx,eax
c0011856:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001185a:	74 31                	je     c001188d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001185c:	83 ec 0c             	sub    esp,0xc
c001185f:	50                   	push   eax
c0011860:	e8 f8 65 ff ff       	call   c0007e5d <malloc>
c0011865:	89 c6                	mov    esi,eax
c0011867:	58                   	pop    eax
c0011868:	8b 03                	mov    eax,DWORD PTR [ebx]
c001186a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001186e:	52                   	push   edx
c001186f:	56                   	push   esi
c0011870:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011874:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011878:	53                   	push   ebx
c0011879:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001187c:	83 c4 20             	add    esp,0x20
c001187f:	85 c0                	test   eax,eax
c0011881:	75 0a                	jne    c001188d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011883:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011887:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001188b:	74 18                	je     c00118a5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001188d:	83 ec 0c             	sub    esp,0xc
c0011890:	53                   	push   ebx
c0011891:	e8 f2 98 ff ff       	call   c000b188 <File::close()>
c0011896:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011898:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001189b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001189e:	83 c4 10             	add    esp,0x10
c00118a1:	31 c0                	xor    eax,eax
c00118a3:	eb 3b                	jmp    c00118e0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00118a5:	83 ec 0c             	sub    esp,0xc
c00118a8:	53                   	push   ebx
c00118a9:	e8 da 98 ff ff       	call   c000b188 <File::close()>
c00118ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118b6:	83 c4 0c             	add    esp,0xc
c00118b9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00118c0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00118c7:	56                   	push   esi
c00118c8:	e8 70 fd ff ff       	call   c001163d <Reg::findLineFromLoadedData(char*, char*, char*)>
c00118cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00118d0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00118d4:	e8 94 65 ff ff       	call   c0007e6d <free>
c00118d9:	83 c4 10             	add    esp,0x10
c00118dc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00118e0:	81 c4 20 01 00 00    	add    esp,0x120
c00118e6:	5b                   	pop    ebx
c00118e7:	5e                   	pop    esi
c00118e8:	5f                   	pop    edi
c00118e9:	c3                   	ret    

c00118ea <Reg::getLine(char*, char*, char*)>:
c00118ea:	57                   	push   edi
c00118eb:	56                   	push   esi
c00118ec:	53                   	push   ebx
c00118ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00118f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00118f9:	57                   	push   edi
c00118fa:	56                   	push   esi
c00118fb:	53                   	push   ebx
c00118fc:	68 0d e8 01 c0       	push   0xc001e80d
c0011901:	e8 8f fe ff ff       	call   c0011795 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011906:	83 c4 10             	add    esp,0x10
c0011909:	84 c0                	test   al,al
c001190b:	75 10                	jne    c001191d <Reg::getLine(char*, char*, char*)+0x33>
c001190d:	57                   	push   edi
c001190e:	56                   	push   esi
c001190f:	53                   	push   ebx
c0011910:	68 32 e8 01 c0       	push   0xc001e832
c0011915:	e8 7b fe ff ff       	call   c0011795 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001191a:	83 c4 10             	add    esp,0x10
c001191d:	5b                   	pop    ebx
c001191e:	5e                   	pop    esi
c001191f:	5f                   	pop    edi
c0011920:	c3                   	ret    

c0011921 <Reg::readInt(char*, char*, int*)>:
c0011921:	55                   	push   ebp
c0011922:	57                   	push   edi
c0011923:	56                   	push   esi
c0011924:	53                   	push   ebx
c0011925:	81 ec f0 00 00 00    	sub    esp,0xf0
c001192b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001192f:	57                   	push   edi
c0011930:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011937:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001193e:	e8 a7 ff ff ff       	call   c00118ea <Reg::getLine(char*, char*, char*)>
c0011943:	83 c4 10             	add    esp,0x10
c0011946:	84 c0                	test   al,al
c0011948:	0f 84 b3 00 00 00    	je     c0011a01 <Reg::readInt(char*, char*, int*)+0xe0>
c001194e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011952:	80 fa 2b             	cmp    dl,0x2b
c0011955:	74 0c                	je     c0011963 <Reg::readInt(char*, char*, int*)+0x42>
c0011957:	80 fa 2d             	cmp    dl,0x2d
c001195a:	75 0e                	jne    c001196a <Reg::readInt(char*, char*, int*)+0x49>
c001195c:	ba 01 00 00 00       	mov    edx,0x1
c0011961:	eb 0b                	jmp    c001196e <Reg::readInt(char*, char*, int*)+0x4d>
c0011963:	ba 01 00 00 00       	mov    edx,0x1
c0011968:	eb 02                	jmp    c001196c <Reg::readInt(char*, char*, int*)+0x4b>
c001196a:	31 d2                	xor    edx,edx
c001196c:	31 c0                	xor    eax,eax
c001196e:	be 0a 00 00 00       	mov    esi,0xa
c0011973:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0011978:	75 20                	jne    c001199a <Reg::readInt(char*, char*, int*)+0x79>
c001197a:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001197e:	80 f9 78             	cmp    cl,0x78
c0011981:	75 0a                	jne    c001198d <Reg::readInt(char*, char*, int*)+0x6c>
c0011983:	83 c2 02             	add    edx,0x2
c0011986:	be 10 00 00 00       	mov    esi,0x10
c001198b:	eb 0d                	jmp    c001199a <Reg::readInt(char*, char*, int*)+0x79>
c001198d:	80 f9 62             	cmp    cl,0x62
c0011990:	75 08                	jne    c001199a <Reg::readInt(char*, char*, int*)+0x79>
c0011992:	83 c2 02             	add    edx,0x2
c0011995:	be 02 00 00 00       	mov    esi,0x2
c001199a:	01 d7                	add    edi,edx
c001199c:	31 d2                	xor    edx,edx
c001199e:	8a 1f                	mov    bl,BYTE PTR [edi]
c00119a0:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00119a4:	80 fb 0d             	cmp    bl,0xd
c00119a7:	0f 94 c3             	sete   bl
c00119aa:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00119af:	0f 94 c1             	sete   cl
c00119b2:	08 cb                	or     bl,cl
c00119b4:	75 3a                	jne    c00119f0 <Reg::readInt(char*, char*, int*)+0xcf>
c00119b6:	0f af d6             	imul   edx,esi
c00119b9:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00119be:	83 fe 10             	cmp    esi,0x10
c00119c1:	75 26                	jne    c00119e9 <Reg::readInt(char*, char*, int*)+0xc8>
c00119c3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00119c7:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00119ca:	89 e9                	mov    ecx,ebp
c00119cc:	80 f9 05             	cmp    cl,0x5
c00119cf:	77 06                	ja     c00119d7 <Reg::readInt(char*, char*, int*)+0xb6>
c00119d1:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00119d5:	eb 16                	jmp    c00119ed <Reg::readInt(char*, char*, int*)+0xcc>
c00119d7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00119db:	83 e9 61             	sub    ecx,0x61
c00119de:	80 f9 05             	cmp    cl,0x5
c00119e1:	77 06                	ja     c00119e9 <Reg::readInt(char*, char*, int*)+0xc8>
c00119e3:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00119e7:	eb 04                	jmp    c00119ed <Reg::readInt(char*, char*, int*)+0xcc>
c00119e9:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00119ed:	47                   	inc    edi
c00119ee:	eb ae                	jmp    c001199e <Reg::readInt(char*, char*, int*)+0x7d>
c00119f0:	84 c0                	test   al,al
c00119f2:	74 02                	je     c00119f6 <Reg::readInt(char*, char*, int*)+0xd5>
c00119f4:	f7 da                	neg    edx
c00119f6:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00119fd:	89 10                	mov    DWORD PTR [eax],edx
c00119ff:	88 d8                	mov    al,bl
c0011a01:	81 c4 ec 00 00 00    	add    esp,0xec
c0011a07:	5b                   	pop    ebx
c0011a08:	5e                   	pop    esi
c0011a09:	5f                   	pop    edi
c0011a0a:	5d                   	pop    ebp
c0011a0b:	c3                   	ret    

c0011a0c <Reg::readString(char*, char*, char*, int)>:
c0011a0c:	57                   	push   edi
c0011a0d:	56                   	push   esi
c0011a0e:	53                   	push   ebx
c0011a0f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011a15:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011a1c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011a20:	57                   	push   edi
c0011a21:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011a28:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011a2f:	e8 b6 fe ff ff       	call   c00118ea <Reg::getLine(char*, char*, char*)>
c0011a34:	83 c4 10             	add    esp,0x10
c0011a37:	89 c6                	mov    esi,eax
c0011a39:	84 c0                	test   al,al
c0011a3b:	74 44                	je     c0011a81 <Reg::readString(char*, char*, char*, int)+0x75>
c0011a3d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011a44:	31 c0                	xor    eax,eax
c0011a46:	4a                   	dec    edx
c0011a47:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011a4a:	84 c9                	test   cl,cl
c0011a4c:	74 0f                	je     c0011a5d <Reg::readString(char*, char*, char*, int)+0x51>
c0011a4e:	39 c2                	cmp    edx,eax
c0011a50:	7e 0b                	jle    c0011a5d <Reg::readString(char*, char*, char*, int)+0x51>
c0011a52:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011a55:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011a5a:	40                   	inc    eax
c0011a5b:	eb ea                	jmp    c0011a47 <Reg::readString(char*, char*, char*, int)+0x3b>
c0011a5d:	83 ec 0c             	sub    esp,0xc
c0011a60:	53                   	push   ebx
c0011a61:	e8 fa ea fe ff       	call   c0000560 <strlen>
c0011a66:	83 c4 10             	add    esp,0x10
c0011a69:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011a6e:	75 11                	jne    c0011a81 <Reg::readString(char*, char*, char*, int)+0x75>
c0011a70:	83 ec 0c             	sub    esp,0xc
c0011a73:	53                   	push   ebx
c0011a74:	e8 e7 ea fe ff       	call   c0000560 <strlen>
c0011a79:	83 c4 10             	add    esp,0x10
c0011a7c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011a81:	81 c4 d0 00 00 00    	add    esp,0xd0
c0011a87:	89 f0                	mov    eax,esi
c0011a89:	5b                   	pop    ebx
c0011a8a:	5e                   	pop    esi
c0011a8b:	5f                   	pop    edi
c0011a8c:	c3                   	ret    

c0011a8d <Reg::readBool(char*, char*, bool*)>:
c0011a8d:	83 ec 20             	sub    esp,0x20
c0011a90:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011a94:	50                   	push   eax
c0011a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011a99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011a9d:	e8 7f fe ff ff       	call   c0011921 <Reg::readInt(char*, char*, int*)>
c0011aa2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011aa7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0011aab:	0f 95 02             	setne  BYTE PTR [edx]
c0011aae:	83 c4 2c             	add    esp,0x2c
c0011ab1:	c3                   	ret    

c0011ab2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011ab2:	53                   	push   ebx
c0011ab3:	83 ec 1c             	sub    esp,0x1c
c0011ab6:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0011aba:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011abe:	50                   	push   eax
c0011abf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011ac3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011ac7:	e8 c1 ff ff ff       	call   c0011a8d <Reg::readBool(char*, char*, bool*)>
c0011acc:	83 c4 10             	add    esp,0x10
c0011acf:	84 c0                	test   al,al
c0011ad1:	74 04                	je     c0011ad7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011ad3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0011ad7:	88 d8                	mov    al,bl
c0011ad9:	83 c4 18             	add    esp,0x18
c0011adc:	5b                   	pop    ebx
c0011add:	c3                   	ret    

c0011ade <Reg::readIntWithDefault(char*, char*, int)>:
c0011ade:	53                   	push   ebx
c0011adf:	83 ec 1c             	sub    esp,0x1c
c0011ae2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011ae6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011aea:	50                   	push   eax
c0011aeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011aef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011af3:	e8 29 fe ff ff       	call   c0011921 <Reg::readInt(char*, char*, int*)>
c0011af8:	83 c4 10             	add    esp,0x10
c0011afb:	84 c0                	test   al,al
c0011afd:	74 04                	je     c0011b03 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011aff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b03:	89 d8                	mov    eax,ebx
c0011b05:	83 c4 18             	add    esp,0x18
c0011b08:	5b                   	pop    ebx
c0011b09:	c3                   	ret    

c0011b0a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011b0a:	57                   	push   edi
c0011b0b:	56                   	push   esi
c0011b0c:	56                   	push   esi
c0011b0d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b11:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011b15:	56                   	push   esi
c0011b16:	57                   	push   edi
c0011b17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b1f:	e8 e8 fe ff ff       	call   c0011a0c <Reg::readString(char*, char*, char*, int)>
c0011b24:	83 c4 10             	add    esp,0x10
c0011b27:	84 c0                	test   al,al
c0011b29:	75 1a                	jne    c0011b45 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011b2b:	51                   	push   ecx
c0011b2c:	56                   	push   esi
c0011b2d:	6a 00                	push   0x0
c0011b2f:	57                   	push   edi
c0011b30:	e8 bb e9 fe ff       	call   c00004f0 <memset>
c0011b35:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011b38:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b3c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b3e:	83 c4 10             	add    esp,0x10
c0011b41:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b45:	89 f8                	mov    eax,edi
c0011b47:	5a                   	pop    edx
c0011b48:	5e                   	pop    esi
c0011b49:	5f                   	pop    edi
c0011b4a:	c3                   	ret    

c0011b4b <SysEject(regs*)>:
c0011b4b:	83 ec 0c             	sub    esp,0xc
c0011b4e:	83 ca ff             	or     edx,0xffffffff
c0011b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b55:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011b58:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b5d:	83 e9 41             	sub    ecx,0x41
c0011b60:	83 f9 19             	cmp    ecx,0x19
c0011b63:	77 18                	ja     c0011b7d <SysEject(regs*)+0x32>
c0011b65:	8b 0c 8d 00 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd100]
c0011b6c:	85 c9                	test   ecx,ecx
c0011b6e:	74 0d                	je     c0011b7d <SysEject(regs*)+0x32>
c0011b70:	83 ec 0c             	sub    esp,0xc
c0011b73:	51                   	push   ecx
c0011b74:	e8 f9 b5 ff ff       	call   c000d172 <LogicalDisk::eject()>
c0011b79:	83 c4 10             	add    esp,0x10
c0011b7c:	99                   	cdq    
c0011b7d:	83 c4 0c             	add    esp,0xc
c0011b80:	c3                   	ret    

c0011b81 <SysExit(regs*)>:
c0011b81:	83 ec 18             	sub    esp,0x18
c0011b84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b88:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011b8b:	e8 b0 26 00 00       	call   c0014240 <terminateTask(int)>
c0011b90:	83 c8 ff             	or     eax,0xffffffff
c0011b93:	83 c4 1c             	add    esp,0x1c
c0011b96:	89 c2                	mov    edx,eax
c0011b98:	c3                   	ret    

c0011b99 <SysGetCwd(regs*)>:
c0011b99:	83 ec 10             	sub    esp,0x10
c0011b9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ba0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011ba3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011ba6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bab:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011bae:	e8 b9 92 ff ff       	call   c000ae6c <Fs::getcwd(Process*, char*, int)>
c0011bb3:	83 c4 1c             	add    esp,0x1c
c0011bb6:	99                   	cdq    
c0011bb7:	c3                   	ret    

c0011bb8 <SysGetPID(regs*)>:
c0011bb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bbd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bc2:	99                   	cdq    
c0011bc3:	c3                   	ret    

c0011bc4 <SysGetRAMData(regs*)>:
c0011bc4:	8b 0d c8 09 02 c0    	mov    ecx,DWORD PTR ds:0xc00209c8
c0011bca:	69 05 c4 09 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00209c4,0xc8
c0011bd4:	99                   	cdq    
c0011bd5:	f7 f9                	idiv   ecx
c0011bd7:	c1 e0 18             	shl    eax,0x18
c0011bda:	09 c8                	or     eax,ecx
c0011bdc:	99                   	cdq    
c0011bdd:	c3                   	ret    

c0011bde <SysGetVGAPtr(regs*)>:
c0011bde:	55                   	push   ebp
c0011bdf:	57                   	push   edi
c0011be0:	56                   	push   esi
c0011be1:	53                   	push   ebx
c0011be2:	83 ec 18             	sub    esp,0x18
c0011be5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011be9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011bec:	e8 4f 21 00 00       	call   c0013d40 <Thr::processFromPID(int)>
c0011bf1:	83 c4 10             	add    esp,0x10
c0011bf4:	89 c1                	mov    ecx,eax
c0011bf6:	b8 01 00 00 00       	mov    eax,0x1
c0011bfb:	85 c9                	test   ecx,ecx
c0011bfd:	74 57                	je     c0011c56 <SysGetVGAPtr(regs*)+0x78>
c0011bff:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011c05:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011c09:	74 0c                	je     c0011c17 <SysGetVGAPtr(regs*)+0x39>
c0011c0b:	83 ec 0c             	sub    esp,0xc
c0011c0e:	55                   	push   ebp
c0011c0f:	e8 83 6e ff ff       	call   c0008a97 <setActiveTerminal(VgaText*)>
c0011c14:	83 c4 10             	add    esp,0x10
c0011c17:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011c1a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011c1d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011c22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011c24:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011c27:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c2a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011c30:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c33:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011c36:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011c3c:	50                   	push   eax
c0011c3d:	50                   	push   eax
c0011c3e:	68 4d e8 01 c0       	push   0xc001e84d
c0011c43:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c46:	05 a8 0f 00 00       	add    eax,0xfa8
c0011c4b:	50                   	push   eax
c0011c4c:	e8 cf e9 fe ff       	call   c0000620 <strcpy>
c0011c51:	83 c4 10             	add    esp,0x10
c0011c54:	31 c0                	xor    eax,eax
c0011c56:	83 c4 0c             	add    esp,0xc
c0011c59:	31 d2                	xor    edx,edx
c0011c5b:	5b                   	pop    ebx
c0011c5c:	5e                   	pop    esi
c0011c5d:	5f                   	pop    edi
c0011c5e:	5d                   	pop    ebp
c0011c5f:	c3                   	ret    

c0011c60 <SysLoadDLL(regs*)>:
c0011c60:	56                   	push   esi
c0011c61:	53                   	push   ebx
c0011c62:	31 d2                	xor    edx,edx
c0011c64:	51                   	push   ecx
c0011c65:	b8 01 00 00 00       	mov    eax,0x1
c0011c6a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c6e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011c72:	0f 84 8c 00 00 00    	je     c0011d04 <SysLoadDLL(regs*)+0xa4>
c0011c78:	83 ec 0c             	sub    esp,0xc
c0011c7b:	68 14 01 00 00       	push   0x114
c0011c80:	e8 d8 61 ff ff       	call   c0007e5d <malloc>
c0011c85:	83 c4 0c             	add    esp,0xc
c0011c88:	89 c3                	mov    ebx,eax
c0011c8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c8f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c92:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011c95:	53                   	push   ebx
c0011c96:	e8 cf 93 ff ff       	call   c000b06a <File::File(char const*, Process*)>
c0011c9b:	83 c4 10             	add    esp,0x10
c0011c9e:	31 d2                	xor    edx,edx
c0011ca0:	b8 02 00 00 00       	mov    eax,0x2
c0011ca5:	85 db                	test   ebx,ebx
c0011ca7:	74 5b                	je     c0011d04 <SysLoadDLL(regs*)+0xa4>
c0011ca9:	83 ec 0c             	sub    esp,0xc
c0011cac:	53                   	push   ebx
c0011cad:	e8 e6 96 ff ff       	call   c000b398 <File::exists()>
c0011cb2:	83 c4 10             	add    esp,0x10
c0011cb5:	84 c0                	test   al,al
c0011cb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011cb9:	75 11                	jne    c0011ccc <SysLoadDLL(regs*)+0x6c>
c0011cbb:	83 ec 0c             	sub    esp,0xc
c0011cbe:	53                   	push   ebx
c0011cbf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011cc2:	83 c4 10             	add    esp,0x10
c0011cc5:	b8 03 00 00 00       	mov    eax,0x3
c0011cca:	eb 36                	jmp    c0011d02 <SysLoadDLL(regs*)+0xa2>
c0011ccc:	83 ec 0c             	sub    esp,0xc
c0011ccf:	53                   	push   ebx
c0011cd0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011cd3:	58                   	pop    eax
c0011cd4:	5a                   	pop    edx
c0011cd5:	6a 00                	push   0x0
c0011cd7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011cda:	e8 4b 12 00 00       	call   c0012f2a <Thr::loadDLL(char const*, bool)>
c0011cdf:	83 c4 10             	add    esp,0x10
c0011ce2:	89 c1                	mov    ecx,eax
c0011ce4:	31 d2                	xor    edx,edx
c0011ce6:	b8 04 00 00 00       	mov    eax,0x4
c0011ceb:	85 c9                	test   ecx,ecx
c0011ced:	74 15                	je     c0011d04 <SysLoadDLL(regs*)+0xa4>
c0011cef:	53                   	push   ebx
c0011cf0:	53                   	push   ebx
c0011cf1:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0011cf7:	51                   	push   ecx
c0011cf8:	e8 5e 14 00 00       	call   c001315b <Thr::executeDLL(unsigned long, void*)>
c0011cfd:	83 c4 10             	add    esp,0x10
c0011d00:	31 c0                	xor    eax,eax
c0011d02:	31 d2                	xor    edx,edx
c0011d04:	59                   	pop    ecx
c0011d05:	5b                   	pop    ebx
c0011d06:	5e                   	pop    esi
c0011d07:	c3                   	ret    

c0011d08 <SysRead(regs*)>:
c0011d08:	57                   	push   edi
c0011d09:	56                   	push   esi
c0011d0a:	53                   	push   ebx
c0011d0b:	83 ec 10             	sub    esp,0x10
c0011d0e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d12:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d15:	83 f8 02             	cmp    eax,0x2
c0011d18:	77 10                	ja     c0011d2a <SysRead(regs*)+0x22>
c0011d1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d22:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d28:	eb 0e                	jmp    c0011d38 <SysRead(regs*)+0x30>
c0011d2a:	83 ec 0c             	sub    esp,0xc
c0011d2d:	50                   	push   eax
c0011d2e:	e8 18 7a ff ff       	call   c000974b <getFromFileDescriptor(int)>
c0011d33:	83 c4 10             	add    esp,0x10
c0011d36:	89 c1                	mov    ecx,eax
c0011d38:	83 c8 ff             	or     eax,0xffffffff
c0011d3b:	85 c9                	test   ecx,ecx
c0011d3d:	89 c2                	mov    edx,eax
c0011d3f:	74 28                	je     c0011d69 <SysRead(regs*)+0x61>
c0011d41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d49:	31 ff                	xor    edi,edi
c0011d4b:	83 ec 0c             	sub    esp,0xc
c0011d4e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d50:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d54:	52                   	push   edx
c0011d55:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d58:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d5b:	57                   	push   edi
c0011d5c:	56                   	push   esi
c0011d5d:	51                   	push   ecx
c0011d5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011d61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d65:	83 c4 20             	add    esp,0x20
c0011d68:	99                   	cdq    
c0011d69:	83 c4 10             	add    esp,0x10
c0011d6c:	5b                   	pop    ebx
c0011d6d:	5e                   	pop    esi
c0011d6e:	5f                   	pop    edi
c0011d6f:	c3                   	ret    

c0011d70 <SysSbrk(regs*)>:
c0011d70:	56                   	push   esi
c0011d71:	53                   	push   ebx
c0011d72:	50                   	push   eax
c0011d73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d7f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011d82:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011d88:	85 db                	test   ebx,ebx
c0011d8a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011d8d:	74 02                	je     c0011d91 <SysSbrk(regs*)+0x21>
c0011d8f:	79 06                	jns    c0011d97 <SysSbrk(regs*)+0x27>
c0011d91:	89 f0                	mov    eax,esi
c0011d93:	31 d2                	xor    edx,edx
c0011d95:	eb 2a                	jmp    c0011dc1 <SysSbrk(regs*)+0x51>
c0011d97:	83 c8 ff             	or     eax,0xffffffff
c0011d9a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011da0:	89 c2                	mov    edx,eax
c0011da2:	77 1d                	ja     c0011dc1 <SysSbrk(regs*)+0x51>
c0011da4:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011daa:	50                   	push   eax
c0011dab:	c1 ea 0c             	shr    edx,0xc
c0011dae:	68 07 0c 00 00       	push   0xc07
c0011db3:	52                   	push   edx
c0011db4:	51                   	push   ecx
c0011db5:	e8 80 82 ff ff       	call   c000a03a <VAS::allocatePages(int, int)>
c0011dba:	89 f0                	mov    eax,esi
c0011dbc:	31 d2                	xor    edx,edx
c0011dbe:	83 c4 10             	add    esp,0x10
c0011dc1:	59                   	pop    ecx
c0011dc2:	5b                   	pop    ebx
c0011dc3:	5e                   	pop    esi
c0011dc4:	c3                   	ret    

c0011dc5 <SysSetCwd(regs*)>:
c0011dc5:	83 ec 14             	sub    esp,0x14
c0011dc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011dcc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011dcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dd4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011dd7:	e8 5b 96 ff ff       	call   c000b437 <Fs::setcwd(Process*, char*)>
c0011ddc:	83 c4 1c             	add    esp,0x1c
c0011ddf:	99                   	cdq    
c0011de0:	c3                   	ret    

c0011de1 <SysSetTime(regs*)>:
c0011de1:	55                   	push   ebp
c0011de2:	31 c9                	xor    ecx,ecx
c0011de4:	57                   	push   edi
c0011de5:	bd 0c 00 00 00       	mov    ebp,0xc
c0011dea:	56                   	push   esi
c0011deb:	53                   	push   ebx
c0011dec:	31 db                	xor    ebx,ebx
c0011dee:	83 ec 10             	sub    esp,0x10
c0011df1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011df5:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011df8:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011dfb:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011dfe:	89 c2                	mov    edx,eax
c0011e00:	66 81 ef 6c 07       	sub    di,0x76c
c0011e05:	83 e2 1f             	and    edx,0x1f
c0011e08:	c1 e7 10             	shl    edi,0x10
c0011e0b:	42                   	inc    edx
c0011e0c:	c1 e8 05             	shr    eax,0x5
c0011e0f:	88 d1                	mov    cl,dl
c0011e11:	31 d2                	xor    edx,edx
c0011e13:	f7 f5                	div    ebp
c0011e15:	89 dd                	mov    ebp,ebx
c0011e17:	88 d5                	mov    ch,dl
c0011e19:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011e1f:	0f b7 c1             	movzx  eax,cx
c0011e22:	31 d2                	xor    edx,edx
c0011e24:	09 f8                	or     eax,edi
c0011e26:	bf 3c 00 00 00       	mov    edi,0x3c
c0011e2b:	89 c1                	mov    ecx,eax
c0011e2d:	89 f0                	mov    eax,esi
c0011e2f:	f7 f7                	div    edi
c0011e31:	c1 e2 10             	shl    edx,0x10
c0011e34:	09 d5                	or     ebp,edx
c0011e36:	31 d2                	xor    edx,edx
c0011e38:	89 eb                	mov    ebx,ebp
c0011e3a:	f7 f7                	div    edi
c0011e3c:	bf 10 0e 00 00       	mov    edi,0xe10
c0011e41:	88 d7                	mov    bh,dl
c0011e43:	89 f0                	mov    eax,esi
c0011e45:	31 d2                	xor    edx,edx
c0011e47:	f7 f7                	div    edi
c0011e49:	bf 18 00 00 00       	mov    edi,0x18
c0011e4e:	31 d2                	xor    edx,edx
c0011e50:	f7 f7                	div    edi
c0011e52:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c0011e57:	88 d3                	mov    bl,dl
c0011e59:	53                   	push   ebx
c0011e5a:	51                   	push   ecx
c0011e5b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011e61:	e8 e2 9d ff ff       	call   c000bc48 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011e66:	83 c4 1c             	add    esp,0x1c
c0011e69:	83 f0 01             	xor    eax,0x1
c0011e6c:	5b                   	pop    ebx
c0011e6d:	0f b6 c0             	movzx  eax,al
c0011e70:	5e                   	pop    esi
c0011e71:	31 d2                	xor    edx,edx
c0011e73:	5f                   	pop    edi
c0011e74:	5d                   	pop    ebp
c0011e75:	c3                   	ret    

c0011e76 <SysTimezone(regs*)>:
c0011e76:	53                   	push   ebx
c0011e77:	83 ec 08             	sub    esp,0x8
c0011e7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e7e:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011e82:	75 17                	jne    c0011e9b <SysTimezone(regs*)+0x25>
c0011e84:	83 ec 0c             	sub    esp,0xc
c0011e87:	68 57 e8 01 c0       	push   0xc001e857
c0011e8c:	e8 63 8c ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0011e91:	83 c8 ff             	or     eax,0xffffffff
c0011e94:	83 c4 10             	add    esp,0x10
c0011e97:	89 c2                	mov    edx,eax
c0011e99:	eb 20                	jmp    c0011ebb <SysTimezone(regs*)+0x45>
c0011e9b:	83 ec 0c             	sub    esp,0xc
c0011e9e:	68 6c e8 01 c0       	push   0xc001e86c
c0011ea3:	e8 4c 8c ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0011ea8:	58                   	pop    eax
c0011ea9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011eac:	e8 f3 9a ff ff       	call   c000b9a4 <User::loadClockSettings(int)>
c0011eb1:	83 c4 10             	add    esp,0x10
c0011eb4:	b8 01 00 00 00       	mov    eax,0x1
c0011eb9:	31 d2                	xor    edx,edx
c0011ebb:	83 c4 08             	add    esp,0x8
c0011ebe:	5b                   	pop    ebx
c0011ebf:	c3                   	ret    

c0011ec0 <SysWrite(regs*)>:
c0011ec0:	57                   	push   edi
c0011ec1:	56                   	push   esi
c0011ec2:	53                   	push   ebx
c0011ec3:	83 ec 10             	sub    esp,0x10
c0011ec6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011eca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ecd:	83 f8 02             	cmp    eax,0x2
c0011ed0:	77 10                	ja     c0011ee2 <SysWrite(regs*)+0x22>
c0011ed2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ed7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011eda:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011ee0:	eb 0e                	jmp    c0011ef0 <SysWrite(regs*)+0x30>
c0011ee2:	83 ec 0c             	sub    esp,0xc
c0011ee5:	50                   	push   eax
c0011ee6:	e8 60 78 ff ff       	call   c000974b <getFromFileDescriptor(int)>
c0011eeb:	83 c4 10             	add    esp,0x10
c0011eee:	89 c1                	mov    ecx,eax
c0011ef0:	83 c8 ff             	or     eax,0xffffffff
c0011ef3:	85 c9                	test   ecx,ecx
c0011ef5:	89 c2                	mov    edx,eax
c0011ef7:	74 28                	je     c0011f21 <SysWrite(regs*)+0x61>
c0011ef9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f01:	31 ff                	xor    edi,edi
c0011f03:	83 ec 0c             	sub    esp,0xc
c0011f06:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011f08:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011f0c:	52                   	push   edx
c0011f0d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011f10:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011f13:	57                   	push   edi
c0011f14:	56                   	push   esi
c0011f15:	51                   	push   ecx
c0011f16:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011f19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f1d:	83 c4 20             	add    esp,0x20
c0011f20:	99                   	cdq    
c0011f21:	83 c4 10             	add    esp,0x10
c0011f24:	5b                   	pop    ebx
c0011f25:	5e                   	pop    esi
c0011f26:	5f                   	pop    edi
c0011f27:	c3                   	ret    

c0011f28 <SysWsbe(regs*)>:
c0011f28:	57                   	push   edi
c0011f29:	b9 0b 00 00 00       	mov    ecx,0xb
c0011f2e:	56                   	push   esi
c0011f2f:	be ab e8 01 c0       	mov    esi,0xc001e8ab
c0011f34:	53                   	push   ebx
c0011f35:	83 ec 30             	sub    esp,0x30
c0011f38:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011f3c:	fc                   	cld    
c0011f3d:	83 ec 0c             	sub    esp,0xc
c0011f40:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011f42:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011f46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f4b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f4e:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011f54:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f56:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011f59:	57                   	push   edi
c0011f5a:	e8 01 e6 fe ff       	call   c0000560 <strlen>
c0011f5f:	5a                   	pop    edx
c0011f60:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011f64:	52                   	push   edx
c0011f65:	31 d2                	xor    edx,edx
c0011f67:	57                   	push   edi
c0011f68:	52                   	push   edx
c0011f69:	50                   	push   eax
c0011f6a:	56                   	push   esi
c0011f6b:	ff d3                	call   ebx
c0011f6d:	83 c4 14             	add    esp,0x14
c0011f70:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011f74:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011f77:	e8 c4 22 00 00       	call   c0014240 <terminateTask(int)>
c0011f7c:	83 c4 40             	add    esp,0x40
c0011f7f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011f84:	5b                   	pop    ebx
c0011f85:	31 d2                	xor    edx,edx
c0011f87:	5e                   	pop    esi
c0011f88:	5f                   	pop    edi
c0011f89:	c3                   	ret    

c0011f8a <SysYield(regs*)>:
c0011f8a:	83 ec 0c             	sub    esp,0xc
c0011f8d:	fa                   	cli    
c0011f8e:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0011f94:	e8 83 19 00 00       	call   c001391c <schedule()>
c0011f99:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0011f9e:	48                   	dec    eax
c0011f9f:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0011fa4:	75 01                	jne    c0011fa7 <SysYield(regs*)+0x1d>
c0011fa6:	fb                   	sti    
c0011fa7:	31 c0                	xor    eax,eax
c0011fa9:	31 d2                	xor    edx,edx
c0011fab:	83 c4 0c             	add    esp,0xc
c0011fae:	c3                   	ret    

c0011faf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011faf:	55                   	push   ebp
c0011fb0:	57                   	push   edi
c0011fb1:	56                   	push   esi
c0011fb2:	53                   	push   ebx
c0011fb3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011fb9:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011fc1:	0f 95 c2             	setne  dl
c0011fc4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011fcc:	0f 94 c0             	sete   al
c0011fcf:	84 c2                	test   dl,al
c0011fd1:	74 34                	je     c0012007 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011fd3:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011fde:	74 27                	je     c0012007 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011fe0:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011fe7:	05 00 10 00 00       	add    eax,0x1000
c0011fec:	89 c1                	mov    ecx,eax
c0011fee:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ff3:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011ff9:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012000:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0012007:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001200e:	83 ec 0c             	sub    esp,0xc
c0012011:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012017:	6a 01                	push   0x1
c0012019:	e8 83 78 ff ff       	call   c00098a1 <Virt::allocateKernelVirtualPages(int)>
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	89 c3                	mov    ebx,eax
c0012023:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012029:	0f 86 25 01 00 00    	jbe    c0012154 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c001202f:	c1 ee 0c             	shr    esi,0xc
c0012032:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012039:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001203d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012045:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001204c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012050:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0012057:	29 ef                	sub    edi,ebp
c0012059:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001205d:	0f 83 f8 00 00 00    	jae    c001215b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0012063:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0012069:	76 05                	jbe    c0012070 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c001206b:	bf 00 10 00 00       	mov    edi,0x1000
c0012070:	83 ec 0c             	sub    esp,0xc
c0012073:	31 d2                	xor    edx,edx
c0012075:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001207c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001207e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012082:	50                   	push   eax
c0012083:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012087:	56                   	push   esi
c0012088:	52                   	push   edx
c0012089:	57                   	push   edi
c001208a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0012091:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012094:	83 c4 20             	add    esp,0x20
c0012097:	85 c0                	test   eax,eax
c0012099:	75 06                	jne    c00120a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c001209b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001209f:	74 13                	je     c00120b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c00120a1:	83 ec 0c             	sub    esp,0xc
c00120a4:	53                   	push   ebx
c00120a5:	e8 27 7b ff ff       	call   c0009bd1 <Virt::freeKernelVirtualPages(unsigned long)>
c00120aa:	83 c4 10             	add    esp,0x10
c00120ad:	31 c0                	xor    eax,eax
c00120af:	e9 7c 01 00 00       	jmp    c0012230 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c00120b4:	fa                   	cli    
c00120b5:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c00120bb:	e8 75 60 ff ff       	call   c0008135 <Phys::allocatePage()>
c00120c0:	6a 07                	push   0x7
c00120c2:	89 c7                	mov    edi,eax
c00120c4:	53                   	push   ebx
c00120c5:	50                   	push   eax
c00120c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120ce:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120d4:	e8 5d 7e ff ff       	call   c0009f36 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120d9:	83 c4 0c             	add    esp,0xc
c00120dc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00120e3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120e9:	6a 00                	push   0x0
c00120eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120f9:	e8 aa 7c ff ff       	call   c0009da8 <VAS::mapOtherVASIn(bool, VAS*)>
c00120fe:	58                   	pop    eax
c00120ff:	5a                   	pop    edx
c0012100:	68 07 0c 00 00       	push   0xc07
c0012105:	55                   	push   ebp
c0012106:	57                   	push   edi
c0012107:	89 df                	mov    edi,ebx
c0012109:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012110:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012116:	6a 00                	push   0x0
c0012118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001211d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012120:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012126:	e8 cb 81 ff ff       	call   c000a2f6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001212b:	b9 00 10 00 00       	mov    ecx,0x1000
c0012130:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012132:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0012137:	83 c4 20             	add    esp,0x20
c001213a:	48                   	dec    eax
c001213b:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0012140:	85 c0                	test   eax,eax
c0012142:	75 01                	jne    c0012145 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012144:	fb                   	sti    
c0012145:	81 c5 00 10 00 00    	add    ebp,0x1000
c001214b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001214f:	e9 f1 fe ff ff       	jmp    c0012045 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012154:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001215b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012162:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012168:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001216e:	0f 86 ae 00 00 00    	jbe    c0012222 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012174:	fa                   	cli    
c0012175:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c001217b:	c1 ee 0c             	shr    esi,0xc
c001217e:	51                   	push   ecx
c001217f:	31 ff                	xor    edi,edi
c0012181:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012188:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001218e:	6a 00                	push   0x0
c0012190:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012195:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012198:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001219e:	e8 05 7c ff ff       	call   c0009da8 <VAS::mapOtherVASIn(bool, VAS*)>
c00121a3:	83 c4 10             	add    esp,0x10
c00121a6:	e8 8a 5f ff ff       	call   c0008135 <Phys::allocatePage()>
c00121ab:	47                   	inc    edi
c00121ac:	6a 07                	push   0x7
c00121ae:	53                   	push   ebx
c00121af:	50                   	push   eax
c00121b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121b4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00121ba:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00121bd:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00121c3:	e8 6e 7d ff ff       	call   c0009f36 <VAS::mapPage(unsigned long, unsigned long, int)>
c00121c8:	58                   	pop    eax
c00121c9:	5a                   	pop    edx
c00121ca:	68 07 0c 00 00       	push   0xc07
c00121cf:	55                   	push   ebp
c00121d0:	81 c5 00 10 00 00    	add    ebp,0x1000
c00121d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121da:	50                   	push   eax
c00121db:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00121e2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00121e8:	6a 00                	push   0x0
c00121ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121f2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00121f8:	e8 f9 80 ff ff       	call   c000a2f6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00121fd:	83 c4 1c             	add    esp,0x1c
c0012200:	68 00 10 00 00       	push   0x1000
c0012205:	6a 00                	push   0x0
c0012207:	53                   	push   ebx
c0012208:	e8 e3 e2 fe ff       	call   c00004f0 <memset>
c001220d:	83 c4 10             	add    esp,0x10
c0012210:	39 fe                	cmp    esi,edi
c0012212:	77 92                	ja     c00121a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012214:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0012219:	48                   	dec    eax
c001221a:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c001221f:	75 01                	jne    c0012222 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012221:	fb                   	sti    
c0012222:	83 ec 0c             	sub    esp,0xc
c0012225:	53                   	push   ebx
c0012226:	e8 a6 79 ff ff       	call   c0009bd1 <Virt::freeKernelVirtualPages(unsigned long)>
c001222b:	83 c4 10             	add    esp,0x10
c001222e:	b0 01                	mov    al,0x1
c0012230:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012236:	5b                   	pop    ebx
c0012237:	5e                   	pop    esi
c0012238:	5f                   	pop    edi
c0012239:	5d                   	pop    ebp
c001223a:	c3                   	ret    

c001223b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001223b:	55                   	push   ebp
c001223c:	57                   	push   edi
c001223d:	56                   	push   esi
c001223e:	53                   	push   ebx
c001223f:	83 ec 48             	sub    esp,0x48
c0012242:	68 14 01 00 00       	push   0x114
c0012247:	e8 11 5c ff ff       	call   c0007e5d <malloc>
c001224c:	83 c4 0c             	add    esp,0xc
c001224f:	89 c6                	mov    esi,eax
c0012251:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012255:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012259:	50                   	push   eax
c001225a:	e8 0b 8e ff ff       	call   c000b06a <File::File(char const*, Process*)>
c001225f:	58                   	pop    eax
c0012260:	5a                   	pop    edx
c0012261:	6a 01                	push   0x1
c0012263:	56                   	push   esi
c0012264:	e8 c1 8e ff ff       	call   c000b12a <File::open(FileOpenMode)>
c0012269:	83 c4 10             	add    esp,0x10
c001226c:	85 c0                	test   eax,eax
c001226e:	0f 85 47 01 00 00    	jne    c00123bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012274:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001227c:	83 ec 0c             	sub    esp,0xc
c001227f:	6a 34                	push   0x34
c0012281:	e8 d7 5b ff ff       	call   c0007e5d <malloc>
c0012286:	89 c3                	mov    ebx,eax
c0012288:	58                   	pop    eax
c0012289:	8b 06                	mov    eax,DWORD PTR [esi]
c001228b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001228f:	57                   	push   edi
c0012290:	53                   	push   ebx
c0012291:	6a 00                	push   0x0
c0012293:	6a 34                	push   0x34
c0012295:	56                   	push   esi
c0012296:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012299:	83 c4 20             	add    esp,0x20
c001229c:	85 c0                	test   eax,eax
c001229e:	0f 85 17 01 00 00    	jne    c00123bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122a4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00122aa:	0f 85 0b 01 00 00    	jne    c00123bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122b0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122b3:	85 c0                	test   eax,eax
c00122b5:	0f 84 00 01 00 00    	je     c00123bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122bb:	31 d2                	xor    edx,edx
c00122bd:	55                   	push   ebp
c00122be:	52                   	push   edx
c00122bf:	50                   	push   eax
c00122c0:	56                   	push   esi
c00122c1:	e8 22 8f ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c00122c6:	83 c4 10             	add    esp,0x10
c00122c9:	85 c0                	test   eax,eax
c00122cb:	0f 85 ea 00 00 00    	jne    c00123bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122d1:	83 ec 0c             	sub    esp,0xc
c00122d4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00122d7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00122db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00122df:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00122e3:	0f af c2             	imul   eax,edx
c00122e6:	50                   	push   eax
c00122e7:	e8 71 5b ff ff       	call   c0007e5d <malloc>
c00122ec:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00122ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00122f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00122f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00122f9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00122fd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012301:	0f af c2             	imul   eax,edx
c0012304:	99                   	cdq    
c0012305:	52                   	push   edx
c0012306:	50                   	push   eax
c0012307:	56                   	push   esi
c0012308:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001230b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001230e:	83 c4 20             	add    esp,0x20
c0012311:	85 c0                	test   eax,eax
c0012313:	0f 84 a2 00 00 00    	je     c00123bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012319:	31 d2                	xor    edx,edx
c001231b:	51                   	push   ecx
c001231c:	52                   	push   edx
c001231d:	50                   	push   eax
c001231e:	56                   	push   esi
c001231f:	e8 c4 8e ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c0012324:	83 c4 10             	add    esp,0x10
c0012327:	85 c0                	test   eax,eax
c0012329:	0f 85 8c 00 00 00    	jne    c00123bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001232f:	83 ec 0c             	sub    esp,0xc
c0012332:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012336:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001233a:	31 ed                	xor    ebp,ebp
c001233c:	0f af c2             	imul   eax,edx
c001233f:	50                   	push   eax
c0012340:	e8 18 5b ff ff       	call   c0007e5d <malloc>
c0012345:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012347:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001234b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001234e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012352:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012356:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001235a:	0f af c2             	imul   eax,edx
c001235d:	99                   	cdq    
c001235e:	52                   	push   edx
c001235f:	50                   	push   eax
c0012360:	56                   	push   esi
c0012361:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012364:	83 c4 20             	add    esp,0x20
c0012367:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001236f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0012373:	0f 86 80 00 00 00    	jbe    c00123f9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012379:	0f b7 fd             	movzx  edi,bp
c001237c:	c1 e7 05             	shl    edi,0x5
c001237f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0012383:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0012386:	75 6b                	jne    c00123f3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012388:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001238b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001238f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012392:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012396:	52                   	push   edx
c0012397:	31 d2                	xor    edx,edx
c0012399:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001239c:	52                   	push   edx
c001239d:	50                   	push   eax
c001239e:	56                   	push   esi
c001239f:	e8 44 8e ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c00123a4:	83 c4 10             	add    esp,0x10
c00123a7:	85 c0                	test   eax,eax
c00123a9:	74 17                	je     c00123c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00123ab:	83 ec 0c             	sub    esp,0xc
c00123ae:	68 d7 e8 01 c0       	push   0xc001e8d7
c00123b3:	e8 3c 87 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c00123b8:	83 c4 10             	add    esp,0x10
c00123bb:	31 c0                	xor    eax,eax
c00123bd:	e9 87 00 00 00       	jmp    c0012449 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00123c2:	83 ec 0c             	sub    esp,0xc
c00123c5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00123c8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00123cb:	50                   	push   eax
c00123cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00123d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00123d4:	56                   	push   esi
c00123d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00123d9:	e8 d1 fb ff ff       	call   c0011faf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00123de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123e2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00123e6:	83 c4 20             	add    esp,0x20
c00123e9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00123ed:	73 04                	jae    c00123f3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00123ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123f3:	45                   	inc    ebp
c00123f4:	e9 76 ff ff ff       	jmp    c001236f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00123f9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00123fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012405:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001240b:	83 ec 0c             	sub    esp,0xc
c001240e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012414:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012419:	05 00 10 00 00       	add    eax,0x1000
c001241e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012421:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012425:	e8 43 5a ff ff       	call   c0007e6d <free>
c001242a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001242d:	e8 3b 5a ff ff       	call   c0007e6d <free>
c0012432:	58                   	pop    eax
c0012433:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012437:	e8 31 5a ff ff       	call   c0007e6d <free>
c001243c:	89 34 24             	mov    DWORD PTR [esp],esi
c001243f:	e8 44 8d ff ff       	call   c000b188 <File::close()>
c0012444:	83 c4 10             	add    esp,0x10
c0012447:	b0 01                	mov    al,0x1
c0012449:	83 c4 3c             	add    esp,0x3c
c001244c:	5b                   	pop    ebx
c001244d:	5e                   	pop    esi
c001244e:	5f                   	pop    edi
c001244f:	5d                   	pop    ebp
c0012450:	c3                   	ret    

c0012451 <Thr::runtimeReferenceHelper()>:
c0012451:	83 ec 18             	sub    esp,0x18
c0012454:	68 df e8 01 c0       	push   0xc001e8df
c0012459:	e8 96 86 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001245e:	fa                   	cli    
c001245f:	83 c4 10             	add    esp,0x10
c0012462:	eb fe                	jmp    c0012462 <Thr::runtimeReferenceHelper()+0x11>

c0012464 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012464:	57                   	push   edi
c0012465:	56                   	push   esi
c0012466:	53                   	push   ebx
c0012467:	31 db                	xor    ebx,ebx
c0012469:	39 1d 20 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e20,ebx
c001246f:	7e 3c                	jle    c00124ad <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012471:	8b 34 9d a0 3d 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc260]
c0012478:	31 ff                	xor    edi,edi
c001247a:	39 3c 9d a0 3c 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc360],edi
c0012481:	7e 27                	jle    c00124aa <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0012483:	50                   	push   eax
c0012484:	50                   	push   eax
c0012485:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012489:	8b 06                	mov    eax,DWORD PTR [esi]
c001248b:	03 04 9d 20 3d 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc2e0]
c0012492:	50                   	push   eax
c0012493:	e8 68 e2 fe ff       	call   c0000700 <strcmp>
c0012498:	83 c4 10             	add    esp,0x10
c001249b:	85 c0                	test   eax,eax
c001249d:	75 05                	jne    c00124a4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001249f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00124a2:	eb 0b                	jmp    c00124af <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00124a4:	83 c6 10             	add    esi,0x10
c00124a7:	47                   	inc    edi
c00124a8:	eb d0                	jmp    c001247a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00124aa:	43                   	inc    ebx
c00124ab:	eb bc                	jmp    c0012469 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00124ad:	31 c0                	xor    eax,eax
c00124af:	5b                   	pop    ebx
c00124b0:	5e                   	pop    esi
c00124b1:	5f                   	pop    edi
c00124b2:	c3                   	ret    

c00124b3 <Thr::loadKernelSymbolTable(char const*)>:
c00124b3:	55                   	push   ebp
c00124b4:	57                   	push   edi
c00124b5:	56                   	push   esi
c00124b6:	53                   	push   ebx
c00124b7:	83 ec 68             	sub    esp,0x68
c00124ba:	8b 35 70 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023e70
c00124c0:	68 14 01 00 00       	push   0x114
c00124c5:	e8 93 59 ff ff       	call   c0007e5d <malloc>
c00124ca:	83 c4 0c             	add    esp,0xc
c00124cd:	89 c3                	mov    ebx,eax
c00124cf:	56                   	push   esi
c00124d0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00124d4:	50                   	push   eax
c00124d5:	e8 90 8b ff ff       	call   c000b06a <File::File(char const*, Process*)>
c00124da:	5e                   	pop    esi
c00124db:	5f                   	pop    edi
c00124dc:	6a 01                	push   0x1
c00124de:	53                   	push   ebx
c00124df:	e8 46 8c ff ff       	call   c000b12a <File::open(FileOpenMode)>
c00124e4:	83 c4 10             	add    esp,0x10
c00124e7:	85 c0                	test   eax,eax
c00124e9:	74 0a                	je     c00124f5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00124eb:	83 ec 0c             	sub    esp,0xc
c00124ee:	68 01 e9 01 c0       	push   0xc001e901
c00124f3:	eb 34                	jmp    c0012529 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00124f5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00124fd:	83 ec 0c             	sub    esp,0xc
c0012500:	6a 34                	push   0x34
c0012502:	e8 56 59 ff ff       	call   c0007e5d <malloc>
c0012507:	59                   	pop    ecx
c0012508:	89 c7                	mov    edi,eax
c001250a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001250e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012510:	56                   	push   esi
c0012511:	57                   	push   edi
c0012512:	6a 00                	push   0x0
c0012514:	6a 34                	push   0x34
c0012516:	53                   	push   ebx
c0012517:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001251a:	83 c4 20             	add    esp,0x20
c001251d:	85 c0                	test   eax,eax
c001251f:	74 17                	je     c0012538 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012521:	83 ec 0c             	sub    esp,0xc
c0012524:	68 18 e9 01 c0       	push   0xc001e918
c0012529:	e8 95 e1 ff ff       	call   c00106c3 <KePanic(char const*)>
c001252e:	83 c4 10             	add    esp,0x10
c0012531:	31 c0                	xor    eax,eax
c0012533:	e9 31 02 00 00       	jmp    c0012769 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012538:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001253e:	75 e1                	jne    c0012521 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012540:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012543:	85 c0                	test   eax,eax
c0012545:	74 da                	je     c0012521 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012547:	52                   	push   edx
c0012548:	31 d2                	xor    edx,edx
c001254a:	52                   	push   edx
c001254b:	50                   	push   eax
c001254c:	53                   	push   ebx
c001254d:	e8 96 8c ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c0012552:	83 c4 10             	add    esp,0x10
c0012555:	85 c0                	test   eax,eax
c0012557:	75 c8                	jne    c0012521 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012559:	83 ec 0c             	sub    esp,0xc
c001255c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012560:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012564:	31 ed                	xor    ebp,ebp
c0012566:	0f af c2             	imul   eax,edx
c0012569:	50                   	push   eax
c001256a:	e8 ee 58 ff ff       	call   c0007e5d <malloc>
c001256f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012571:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012575:	89 34 24             	mov    DWORD PTR [esp],esi
c0012578:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001257c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012580:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012584:	0f af c2             	imul   eax,edx
c0012587:	99                   	cdq    
c0012588:	52                   	push   edx
c0012589:	50                   	push   eax
c001258a:	53                   	push   ebx
c001258b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001258e:	83 c4 20             	add    esp,0x20
c0012591:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012599:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00125a1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00125a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00125b1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00125b5:	0f 86 aa 00 00 00    	jbe    c0012665 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00125bb:	0f b7 f5             	movzx  esi,bp
c00125be:	6b f6 28             	imul   esi,esi,0x28
c00125c1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00125c5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00125c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00125cc:	50                   	push   eax
c00125cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00125d1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00125d5:	8b 16                	mov    edx,DWORD PTR [esi]
c00125d7:	6b c0 28             	imul   eax,eax,0x28
c00125da:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00125de:	89 d0                	mov    eax,edx
c00125e0:	31 d2                	xor    edx,edx
c00125e2:	52                   	push   edx
c00125e3:	50                   	push   eax
c00125e4:	53                   	push   ebx
c00125e5:	e8 fe 8b ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c00125ea:	83 c4 0c             	add    esp,0xc
c00125ed:	6a 20                	push   0x20
c00125ef:	6a 00                	push   0x0
c00125f1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00125f5:	52                   	push   edx
c00125f6:	e8 f5 de fe ff       	call   c00004f0 <memset>
c00125fb:	58                   	pop    eax
c00125fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125fe:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012602:	51                   	push   ecx
c0012603:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012607:	52                   	push   edx
c0012608:	6a 00                	push   0x0
c001260a:	6a 1f                	push   0x1f
c001260c:	53                   	push   ebx
c001260d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012610:	83 c4 18             	add    esp,0x18
c0012613:	68 2f e9 01 c0       	push   0xc001e92f
c0012618:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001261c:	52                   	push   edx
c001261d:	e8 de e0 fe ff       	call   c0000700 <strcmp>
c0012622:	83 c4 10             	add    esp,0x10
c0012625:	85 c0                	test   eax,eax
c0012627:	75 0f                	jne    c0012638 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012629:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001262c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012630:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012634:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012638:	50                   	push   eax
c0012639:	50                   	push   eax
c001263a:	68 37 e9 01 c0       	push   0xc001e937
c001263f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012643:	50                   	push   eax
c0012644:	e8 b7 e0 fe ff       	call   c0000700 <strcmp>
c0012649:	83 c4 10             	add    esp,0x10
c001264c:	85 c0                	test   eax,eax
c001264e:	75 0f                	jne    c001265f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012650:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012653:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012657:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001265b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001265f:	45                   	inc    ebp
c0012660:	e9 4c ff ff ff       	jmp    c00125b1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012665:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001266a:	75 10                	jne    c001267c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001266c:	83 ec 0c             	sub    esp,0xc
c001266f:	68 3f e9 01 c0       	push   0xc001e93f
c0012674:	e8 4a e0 ff ff       	call   c00106c3 <KePanic(char const*)>
c0012679:	83 c4 10             	add    esp,0x10
c001267c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012681:	75 10                	jne    c0012693 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012683:	83 ec 0c             	sub    esp,0xc
c0012686:	68 3f e9 01 c0       	push   0xc001e93f
c001268b:	e8 33 e0 ff ff       	call   c00106c3 <KePanic(char const*)>
c0012690:	83 c4 10             	add    esp,0x10
c0012693:	31 d2                	xor    edx,edx
c0012695:	50                   	push   eax
c0012696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001269a:	52                   	push   edx
c001269b:	50                   	push   eax
c001269c:	53                   	push   ebx
c001269d:	e8 46 8b ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c00126a2:	5a                   	pop    edx
c00126a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00126a7:	e8 b1 57 ff ff       	call   c0007e5d <malloc>
c00126ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00126b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00126b4:	31 c9                	xor    ecx,ecx
c00126b6:	5e                   	pop    esi
c00126b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126b9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00126bd:	55                   	push   ebp
c00126be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126c2:	51                   	push   ecx
c00126c3:	52                   	push   edx
c00126c4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00126c8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00126cc:	53                   	push   ebx
c00126cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126d0:	83 c4 14             	add    esp,0x14
c00126d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126d7:	e8 81 57 ff ff       	call   c0007e5d <malloc>
c00126dc:	89 c6                	mov    esi,eax
c00126de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126e0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00126e3:	56                   	push   esi
c00126e4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00126e8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00126ec:	51                   	push   ecx
c00126ed:	52                   	push   edx
c00126ee:	53                   	push   ebx
c00126ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00126f6:	8b 15 20 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e20
c00126fc:	83 c4 1c             	add    esp,0x1c
c00126ff:	c1 e8 04             	shr    eax,0x4
c0012702:	89 04 95 a0 3c 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc360],eax
c0012709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001270d:	31 d2                	xor    edx,edx
c001270f:	52                   	push   edx
c0012710:	50                   	push   eax
c0012711:	53                   	push   ebx
c0012712:	e8 d1 8a ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c0012717:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012719:	31 d2                	xor    edx,edx
c001271b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001271e:	56                   	push   esi
c001271f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012723:	52                   	push   edx
c0012724:	50                   	push   eax
c0012725:	53                   	push   ebx
c0012726:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012729:	83 c4 14             	add    esp,0x14
c001272c:	53                   	push   ebx
c001272d:	e8 56 8a ff ff       	call   c000b188 <File::close()>
c0012732:	5d                   	pop    ebp
c0012733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012737:	e8 31 57 ff ff       	call   c0007e6d <free>
c001273c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001273f:	e8 29 57 ff ff       	call   c0007e6d <free>
c0012744:	a1 20 3e 02 c0       	mov    eax,ds:0xc0023e20
c0012749:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001274d:	8d 50 01             	lea    edx,[eax+0x1]
c0012750:	89 0c 85 a0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc260],ecx
c0012757:	89 34 85 20 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc2e0],esi
c001275e:	89 15 20 3e 02 c0    	mov    DWORD PTR ds:0xc0023e20,edx
c0012764:	83 c4 10             	add    esp,0x10
c0012767:	b0 01                	mov    al,0x1
c0012769:	83 c4 5c             	add    esp,0x5c
c001276c:	5b                   	pop    ebx
c001276d:	5e                   	pop    esi
c001276e:	5f                   	pop    edi
c001276f:	5d                   	pop    ebp
c0012770:	c3                   	ret    

c0012771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012771:	55                   	push   ebp
c0012772:	57                   	push   edi
c0012773:	56                   	push   esi
c0012774:	53                   	push   ebx
c0012775:	81 ec 68 03 00 00    	sub    esp,0x368
c001277b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012782:	8b 1d 70 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e70
c0012788:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001278c:	68 14 01 00 00       	push   0x114
c0012791:	e8 c7 56 ff ff       	call   c0007e5d <malloc>
c0012796:	83 c4 0c             	add    esp,0xc
c0012799:	89 c5                	mov    ebp,eax
c001279b:	53                   	push   ebx
c001279c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00127a3:	50                   	push   eax
c00127a4:	e8 c1 88 ff ff       	call   c000b06a <File::File(char const*, Process*)>
c00127a9:	5e                   	pop    esi
c00127aa:	5f                   	pop    edi
c00127ab:	6a 01                	push   0x1
c00127ad:	55                   	push   ebp
c00127ae:	e8 77 89 ff ff       	call   c000b12a <File::open(FileOpenMode)>
c00127b3:	83 c4 10             	add    esp,0x10
c00127b6:	85 c0                	test   eax,eax
c00127b8:	0f 85 a7 06 00 00    	jne    c0012e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00127be:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00127c6:	83 ec 0c             	sub    esp,0xc
c00127c9:	6a 34                	push   0x34
c00127cb:	e8 8d 56 ff ff       	call   c0007e5d <malloc>
c00127d0:	5b                   	pop    ebx
c00127d1:	89 c7                	mov    edi,eax
c00127d3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00127d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127da:	53                   	push   ebx
c00127db:	57                   	push   edi
c00127dc:	6a 00                	push   0x0
c00127de:	6a 34                	push   0x34
c00127e0:	55                   	push   ebp
c00127e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00127e4:	83 c4 20             	add    esp,0x20
c00127e7:	85 c0                	test   eax,eax
c00127e9:	0f 85 76 06 00 00    	jne    c0012e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00127ef:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00127f5:	0f 85 6a 06 00 00    	jne    c0012e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00127fb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00127fe:	85 c0                	test   eax,eax
c0012800:	0f 84 5f 06 00 00    	je     c0012e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012806:	31 d2                	xor    edx,edx
c0012808:	51                   	push   ecx
c0012809:	52                   	push   edx
c001280a:	50                   	push   eax
c001280b:	55                   	push   ebp
c001280c:	e8 d7 89 ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c0012811:	83 c4 10             	add    esp,0x10
c0012814:	85 c0                	test   eax,eax
c0012816:	0f 85 49 06 00 00    	jne    c0012e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001281c:	83 ec 0c             	sub    esp,0xc
c001281f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012822:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012826:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001282a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001282e:	0f af c2             	imul   eax,edx
c0012831:	50                   	push   eax
c0012832:	e8 26 56 ff ff       	call   c0007e5d <malloc>
c0012837:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001283a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001283e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012841:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012845:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012849:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001284d:	0f af c2             	imul   eax,edx
c0012850:	99                   	cdq    
c0012851:	52                   	push   edx
c0012852:	50                   	push   eax
c0012853:	55                   	push   ebp
c0012854:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012857:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001285a:	83 c4 20             	add    esp,0x20
c001285d:	85 c0                	test   eax,eax
c001285f:	0f 84 00 06 00 00    	je     c0012e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012865:	52                   	push   edx
c0012866:	31 d2                	xor    edx,edx
c0012868:	52                   	push   edx
c0012869:	50                   	push   eax
c001286a:	55                   	push   ebp
c001286b:	e8 78 89 ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c0012870:	83 c4 10             	add    esp,0x10
c0012873:	85 c0                	test   eax,eax
c0012875:	0f 85 ea 05 00 00    	jne    c0012e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001287b:	83 ec 0c             	sub    esp,0xc
c001287e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012882:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012886:	31 f6                	xor    esi,esi
c0012888:	0f af c2             	imul   eax,edx
c001288b:	50                   	push   eax
c001288c:	e8 cc 55 ff ff       	call   c0007e5d <malloc>
c0012891:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012894:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012898:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001289b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001289f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00128a3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00128a7:	0f af c2             	imul   eax,edx
c00128aa:	99                   	cdq    
c00128ab:	52                   	push   edx
c00128ac:	50                   	push   eax
c00128ad:	55                   	push   ebp
c00128ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00128b1:	83 c4 20             	add    esp,0x20
c00128b4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00128b8:	0f 86 8a 00 00 00    	jbe    c0012948 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00128be:	0f b7 de             	movzx  ebx,si
c00128c1:	c1 e3 05             	shl    ebx,0x5
c00128c4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00128c8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00128cb:	75 75                	jne    c0012942 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00128cd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00128d0:	31 d2                	xor    edx,edx
c00128d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128d6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00128d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128dd:	50                   	push   eax
c00128de:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00128e1:	52                   	push   edx
c00128e2:	50                   	push   eax
c00128e3:	55                   	push   ebp
c00128e4:	e8 ff 88 ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c00128e9:	83 c4 10             	add    esp,0x10
c00128ec:	85 c0                	test   eax,eax
c00128ee:	0f 85 71 05 00 00    	jne    c0012e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00128f4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00128fb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00128fe:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012902:	31 d2                	xor    edx,edx
c0012904:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012908:	83 ec 0c             	sub    esp,0xc
c001290b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001290f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012916:	50                   	push   eax
c0012917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001291b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001291f:	52                   	push   edx
c0012920:	50                   	push   eax
c0012921:	55                   	push   ebp
c0012922:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012925:	83 c4 1c             	add    esp,0x1c
c0012928:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001292b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001292e:	50                   	push   eax
c001292f:	6a 00                	push   0x0
c0012931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012935:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012939:	50                   	push   eax
c001293a:	e8 b1 db fe ff       	call   c00004f0 <memset>
c001293f:	83 c4 10             	add    esp,0x10
c0012942:	46                   	inc    esi
c0012943:	e9 6c ff ff ff       	jmp    c00128b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012948:	53                   	push   ebx
c0012949:	31 db                	xor    ebx,ebx
c001294b:	68 00 01 00 00       	push   0x100
c0012950:	6a 00                	push   0x0
c0012952:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012956:	50                   	push   eax
c0012957:	e8 94 db fe ff       	call   c00004f0 <memset>
c001295c:	83 c4 0c             	add    esp,0xc
c001295f:	68 00 01 00 00       	push   0x100
c0012964:	6a 00                	push   0x0
c0012966:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001296d:	50                   	push   eax
c001296e:	e8 7d db fe ff       	call   c00004f0 <memset>
c0012973:	83 c4 10             	add    esp,0x10
c0012976:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001297e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012986:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001298e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012996:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001299e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00129a2:	0f 86 30 01 00 00    	jbe    c0012ad8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00129a8:	0f b7 f3             	movzx  esi,bx
c00129ab:	6b f6 28             	imul   esi,esi,0x28
c00129ae:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00129b2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00129b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129b9:	52                   	push   edx
c00129ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00129be:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00129c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00129c4:	6b d2 28             	imul   edx,edx,0x28
c00129c7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00129cb:	31 d2                	xor    edx,edx
c00129cd:	52                   	push   edx
c00129ce:	50                   	push   eax
c00129cf:	55                   	push   ebp
c00129d0:	e8 13 88 ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c00129d5:	83 c4 0c             	add    esp,0xc
c00129d8:	6a 20                	push   0x20
c00129da:	6a 00                	push   0x0
c00129dc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00129e3:	51                   	push   ecx
c00129e4:	e8 07 db fe ff       	call   c00004f0 <memset>
c00129e9:	59                   	pop    ecx
c00129ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129ed:	8d 54 24 58          	lea    edx,[esp+0x58]
c00129f1:	52                   	push   edx
c00129f2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00129f9:	51                   	push   ecx
c00129fa:	6a 00                	push   0x0
c00129fc:	6a 1f                	push   0x1f
c00129fe:	55                   	push   ebp
c00129ff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012a02:	83 c4 1c             	add    esp,0x1c
c0012a05:	6a 09                	push   0x9
c0012a07:	68 59 e9 01 c0       	push   0xc001e959
c0012a0c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012a13:	51                   	push   ecx
c0012a14:	e8 97 d9 fe ff       	call   c00003b0 <memcmp>
c0012a19:	83 c4 10             	add    esp,0x10
c0012a1c:	85 c0                	test   eax,eax
c0012a1e:	75 21                	jne    c0012a41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012a20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a28:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012a2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a30:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012a33:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012a3a:	89 d0                	mov    eax,edx
c0012a3c:	40                   	inc    eax
c0012a3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a41:	50                   	push   eax
c0012a42:	6a 09                	push   0x9
c0012a44:	68 63 e9 01 c0       	push   0xc001e963
c0012a49:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a50:	50                   	push   eax
c0012a51:	e8 5a d9 fe ff       	call   c00003b0 <memcmp>
c0012a56:	83 c4 10             	add    esp,0x10
c0012a59:	85 c0                	test   eax,eax
c0012a5b:	75 21                	jne    c0012a7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012a5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a65:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012a69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a6d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012a70:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012a77:	89 d0                	mov    eax,edx
c0012a79:	40                   	inc    eax
c0012a7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a7e:	50                   	push   eax
c0012a7f:	50                   	push   eax
c0012a80:	68 2f e9 01 c0       	push   0xc001e92f
c0012a85:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a8c:	50                   	push   eax
c0012a8d:	e8 6e dc fe ff       	call   c0000700 <strcmp>
c0012a92:	83 c4 10             	add    esp,0x10
c0012a95:	85 c0                	test   eax,eax
c0012a97:	75 0f                	jne    c0012aa8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012a99:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012aa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012aa4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012aa8:	50                   	push   eax
c0012aa9:	50                   	push   eax
c0012aaa:	68 37 e9 01 c0       	push   0xc001e937
c0012aaf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ab6:	50                   	push   eax
c0012ab7:	e8 44 dc fe ff       	call   c0000700 <strcmp>
c0012abc:	83 c4 10             	add    esp,0x10
c0012abf:	85 c0                	test   eax,eax
c0012ac1:	75 0f                	jne    c0012ad2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012ac3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012ac6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012aca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ace:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012ad2:	43                   	inc    ebx
c0012ad3:	e9 c6 fe ff ff       	jmp    c001299e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012ad8:	31 d2                	xor    edx,edx
c0012ada:	50                   	push   eax
c0012adb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012adf:	52                   	push   edx
c0012ae0:	50                   	push   eax
c0012ae1:	55                   	push   ebp
c0012ae2:	e8 01 87 ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c0012ae7:	58                   	pop    eax
c0012ae8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012aec:	e8 6c 53 ff ff       	call   c0007e5d <malloc>
c0012af1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012af4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012af8:	31 d2                	xor    edx,edx
c0012afa:	58                   	pop    eax
c0012afb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012aff:	53                   	push   ebx
c0012b00:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012b04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b08:	52                   	push   edx
c0012b09:	50                   	push   eax
c0012b0a:	55                   	push   ebp
c0012b0b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012b0e:	83 c4 14             	add    esp,0x14
c0012b11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b15:	e8 43 53 ff ff       	call   c0007e5d <malloc>
c0012b1a:	31 d2                	xor    edx,edx
c0012b1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012b20:	83 c4 0c             	add    esp,0xc
c0012b23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b27:	52                   	push   edx
c0012b28:	50                   	push   eax
c0012b29:	55                   	push   ebp
c0012b2a:	e8 b9 86 ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c0012b2f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012b32:	31 d2                	xor    edx,edx
c0012b34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012b37:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012b3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012b3f:	52                   	push   edx
c0012b40:	50                   	push   eax
c0012b41:	55                   	push   ebp
c0012b42:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012b45:	83 c4 20             	add    esp,0x20
c0012b48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b50:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012b54:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012b58:	0f 84 0b 03 00 00    	je     c0012e69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012b5e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012b65:	31 d2                	xor    edx,edx
c0012b67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b6b:	c1 e8 03             	shr    eax,0x3
c0012b6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012b72:	51                   	push   ecx
c0012b73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b77:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012b7b:	52                   	push   edx
c0012b7c:	50                   	push   eax
c0012b7d:	55                   	push   ebp
c0012b7e:	e8 65 86 ff ff       	call   c000b1e8 <File::seek(unsigned long long)>
c0012b83:	5b                   	pop    ebx
c0012b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b88:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012b8f:	e8 c9 52 ff ff       	call   c0007e5d <malloc>
c0012b94:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012b97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b9b:	31 d2                	xor    edx,edx
c0012b9d:	5e                   	pop    esi
c0012b9e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012ba2:	50                   	push   eax
c0012ba3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ba7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012bab:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012bb2:	52                   	push   edx
c0012bb3:	50                   	push   eax
c0012bb4:	55                   	push   ebp
c0012bb5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012bb8:	83 c4 20             	add    esp,0x20
c0012bbb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012bc3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012bc7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012bcb:	0f 8d 7c 02 00 00    	jge    c0012e4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012bd1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012bd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012bd9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012bde:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012be1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012be5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012be9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012bed:	89 d8                	mov    eax,ebx
c0012bef:	c1 e8 08             	shr    eax,0x8
c0012bf2:	89 c6                	mov    esi,eax
c0012bf4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012bf8:	c1 e6 04             	shl    esi,0x4
c0012bfb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012bff:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012c02:	85 d2                	test   edx,edx
c0012c04:	0f 85 bf 00 00 00    	jne    c0012cc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012c0a:	83 ec 0c             	sub    esp,0xc
c0012c0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c11:	03 06                	add    eax,DWORD PTR [esi]
c0012c13:	50                   	push   eax
c0012c14:	e8 4b f8 ff ff       	call   c0012464 <Thr::getAddressOfKernelSymbol(char const*)>
c0012c19:	83 c4 10             	add    esp,0x10
c0012c1c:	89 c2                	mov    edx,eax
c0012c1e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012c23:	85 c0                	test   eax,eax
c0012c25:	0f 85 9e 00 00 00    	jne    c0012cc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012c2b:	83 ec 0c             	sub    esp,0xc
c0012c2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c32:	03 06                	add    eax,DWORD PTR [esi]
c0012c34:	50                   	push   eax
c0012c35:	e8 06 43 ff ff       	call   c0006f40 <Krnl::resolveCompatibilitySymbol(char*)>
c0012c3a:	83 c4 10             	add    esp,0x10
c0012c3d:	89 c2                	mov    edx,eax
c0012c3f:	85 c0                	test   eax,eax
c0012c41:	0f 85 82 00 00 00    	jne    c0012cc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012c47:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012c4b:	50                   	push   eax
c0012c4c:	50                   	push   eax
c0012c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012c51:	03 06                	add    eax,DWORD PTR [esi]
c0012c53:	50                   	push   eax
c0012c54:	68 6d e9 01 c0       	push   0xc001e96d
c0012c59:	e8 96 7e ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0012c5e:	58                   	pop    eax
c0012c5f:	5a                   	pop    edx
c0012c60:	68 87 e9 01 c0       	push   0xc001e987
c0012c65:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c6c:	50                   	push   eax
c0012c6d:	e8 ae d9 fe ff       	call   c0000620 <strcpy>
c0012c72:	59                   	pop    ecx
c0012c73:	58                   	pop    eax
c0012c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012c78:	03 06                	add    eax,DWORD PTR [esi]
c0012c7a:	50                   	push   eax
c0012c7b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c82:	50                   	push   eax
c0012c83:	e8 58 db fe ff       	call   c00007e0 <strcat>
c0012c88:	58                   	pop    eax
c0012c89:	5a                   	pop    edx
c0012c8a:	68 1d ea 01 c0       	push   0xc001ea1d
c0012c8f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c96:	50                   	push   eax
c0012c97:	e8 44 db fe ff       	call   c00007e0 <strcat>
c0012c9c:	83 c4 10             	add    esp,0x10
c0012c9f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012ca4:	0f 84 5d 01 00 00    	je     c0012e07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012caa:	83 ec 0c             	sub    esp,0xc
c0012cad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012cb4:	50                   	push   eax
c0012cb5:	e8 09 da ff ff       	call   c00106c3 <KePanic(char const*)>
c0012cba:	83 c4 10             	add    esp,0x10
c0012cbd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012cc1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012cc5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012cc9:	80 fb 01             	cmp    bl,0x1
c0012ccc:	0f 85 88 00 00 00    	jne    c0012d5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012cd2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012cd9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012cdd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012ce1:	01 ce                	add    esi,ecx
c0012ce3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012ce9:	0f 94 c0             	sete   al
c0012cec:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012cf2:	0f 94 c3             	sete   bl
c0012cf5:	09 c3                	or     ebx,eax
c0012cf7:	8b 06                	mov    eax,DWORD PTR [esi]
c0012cf9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012cfe:	74 41                	je     c0012d41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012d00:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012d03:	84 db                	test   bl,bl
c0012d05:	75 15                	jne    c0012d1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012d07:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012d0b:	66 83 f8 0c          	cmp    ax,0xc
c0012d0f:	76 05                	jbe    c0012d16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012d11:	b8 0c 00 00 00       	mov    eax,0xc
c0012d16:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012d1a:	76 37                	jbe    c0012d53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012d1c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012d20:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012d25:	0f 84 dc 00 00 00    	je     c0012e07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012d2b:	83 ec 0c             	sub    esp,0xc
c0012d2e:	68 9e e9 01 c0       	push   0xc001e99e
c0012d33:	e8 8b d9 ff ff       	call   c00106c3 <KePanic(char const*)>
c0012d38:	83 c4 10             	add    esp,0x10
c0012d3b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012d3f:	eb 12                	jmp    c0012d53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012d41:	01 c1                	add    ecx,eax
c0012d43:	84 db                	test   bl,bl
c0012d45:	75 0c                	jne    c0012d53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012d47:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012d4b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012d4f:	77 02                	ja     c0012d53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012d51:	01 d1                	add    ecx,edx
c0012d53:	89 0e                	mov    DWORD PTR [esi],ecx
c0012d55:	e9 ea 00 00 00       	jmp    c0012e44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012d5a:	80 fb 02             	cmp    bl,0x2
c0012d5d:	75 7c                	jne    c0012ddb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012d5f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012d66:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012d6a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012d6e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012d74:	74 20                	je     c0012d96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012d76:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012d7c:	74 18                	je     c0012d96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012d7e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012d82:	b9 0a 00 00 00       	mov    ecx,0xa
c0012d87:	66 83 f8 0e          	cmp    ax,0xe
c0012d8b:	77 03                	ja     c0012d90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012d8d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012d90:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012d94:	76 1f                	jbe    c0012db5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012d96:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012d9a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012d9f:	74 66                	je     c0012e07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012da1:	83 ec 0c             	sub    esp,0xc
c0012da4:	68 ba e9 01 c0       	push   0xc001e9ba
c0012da9:	e8 15 d9 ff ff       	call   c00106c3 <KePanic(char const*)>
c0012dae:	83 c4 10             	add    esp,0x10
c0012db1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012db5:	8b 06                	mov    eax,DWORD PTR [esi]
c0012db7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012dbc:	74 13                	je     c0012dd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012dbe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012dc2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012dc9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012dcd:	01 c8                	add    eax,ecx
c0012dcf:	eb 04                	jmp    c0012dd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012dd1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012dd5:	01 c2                	add    edx,eax
c0012dd7:	89 16                	mov    DWORD PTR [esi],edx
c0012dd9:	eb 69                	jmp    c0012e44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012ddb:	0f b6 db             	movzx  ebx,bl
c0012dde:	50                   	push   eax
c0012ddf:	50                   	push   eax
c0012de0:	53                   	push   ebx
c0012de1:	68 d6 e9 01 c0       	push   0xc001e9d6
c0012de6:	e8 09 7d ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0012deb:	83 c4 10             	add    esp,0x10
c0012dee:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012df3:	74 12                	je     c0012e07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012df5:	83 ec 0c             	sub    esp,0xc
c0012df8:	68 e1 e9 01 c0       	push   0xc001e9e1
c0012dfd:	e8 c1 d8 ff ff       	call   c00106c3 <KePanic(char const*)>
c0012e02:	83 c4 10             	add    esp,0x10
c0012e05:	eb 3d                	jmp    c0012e44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012e07:	83 ec 0c             	sub    esp,0xc
c0012e0a:	55                   	push   ebp
c0012e0b:	e8 78 83 ff ff       	call   c000b188 <File::close()>
c0012e10:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e13:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e19:	59                   	pop    ecx
c0012e1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e1e:	e8 4a 50 ff ff       	call   c0007e6d <free>
c0012e23:	5b                   	pop    ebx
c0012e24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e28:	e8 40 50 ff ff       	call   c0007e6d <free>
c0012e2d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012e30:	e8 38 50 ff ff       	call   c0007e6d <free>
c0012e35:	5e                   	pop    esi
c0012e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e3a:	e8 2e 50 ff ff       	call   c0007e6d <free>
c0012e3f:	83 c4 10             	add    esp,0x10
c0012e42:	eb 21                	jmp    c0012e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012e44:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012e48:	e9 76 fd ff ff       	jmp    c0012bc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012e4d:	83 ec 0c             	sub    esp,0xc
c0012e50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e54:	e8 14 50 ff ff       	call   c0007e6d <free>
c0012e59:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012e5d:	83 c4 10             	add    esp,0x10
c0012e60:	e9 eb fc ff ff       	jmp    c0012b50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012e65:	31 c0                	xor    eax,eax
c0012e67:	eb 33                	jmp    c0012e9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012e69:	83 ec 0c             	sub    esp,0xc
c0012e6c:	55                   	push   ebp
c0012e6d:	e8 16 83 ff ff       	call   c000b188 <File::close()>
c0012e72:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e75:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e7b:	58                   	pop    eax
c0012e7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e80:	e8 e8 4f ff ff       	call   c0007e6d <free>
c0012e85:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012e88:	e8 e0 4f ff ff       	call   c0007e6d <free>
c0012e8d:	5a                   	pop    edx
c0012e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e92:	e8 d6 4f ff ff       	call   c0007e6d <free>
c0012e97:	83 c4 10             	add    esp,0x10
c0012e9a:	b0 01                	mov    al,0x1
c0012e9c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012ea2:	5b                   	pop    ebx
c0012ea3:	5e                   	pop    esi
c0012ea4:	5f                   	pop    edi
c0012ea5:	5d                   	pop    ebp
c0012ea6:	c3                   	ret    

c0012ea7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012ea7:	56                   	push   esi
c0012ea8:	31 d2                	xor    edx,edx
c0012eaa:	53                   	push   ebx
c0012eab:	8b 1d 80 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023680
c0012eb1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012eb5:	39 d3                	cmp    ebx,edx
c0012eb7:	7e 1b                	jle    c0012ed4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012eb9:	8b 04 95 a0 38 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc760]
c0012ec0:	39 c8                	cmp    eax,ecx
c0012ec2:	77 0d                	ja     c0012ed1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012ec4:	8b 34 95 a0 36 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc960]
c0012ecb:	01 c6                	add    esi,eax
c0012ecd:	39 ce                	cmp    esi,ecx
c0012ecf:	77 05                	ja     c0012ed6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012ed1:	42                   	inc    edx
c0012ed2:	eb e1                	jmp    c0012eb5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012ed4:	31 c0                	xor    eax,eax
c0012ed6:	5b                   	pop    ebx
c0012ed7:	5e                   	pop    esi
c0012ed8:	c3                   	ret    

c0012ed9 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012ed9:	53                   	push   ebx
c0012eda:	31 c0                	xor    eax,eax
c0012edc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012ee0:	8b 1d 80 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023680
c0012ee6:	39 c3                	cmp    ebx,eax
c0012ee8:	7e 22                	jle    c0012f0c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012eea:	8b 14 85 a0 38 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc760]
c0012ef1:	39 ca                	cmp    edx,ecx
c0012ef3:	77 14                	ja     c0012f09 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012ef5:	03 14 85 a0 36 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc960]
c0012efc:	39 ca                	cmp    edx,ecx
c0012efe:	76 09                	jbe    c0012f09 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012f00:	8b 04 85 a0 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc560]
c0012f07:	eb 05                	jmp    c0012f0e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012f09:	40                   	inc    eax
c0012f0a:	eb da                	jmp    c0012ee6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012f0c:	31 c0                	xor    eax,eax
c0012f0e:	5b                   	pop    ebx
c0012f0f:	c3                   	ret    

c0012f10 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012f10:	53                   	push   ebx
c0012f11:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f15:	53                   	push   ebx
c0012f16:	e8 8c ff ff ff       	call   c0012ea7 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012f1b:	5a                   	pop    edx
c0012f1c:	31 d2                	xor    edx,edx
c0012f1e:	85 c0                	test   eax,eax
c0012f20:	74 04                	je     c0012f26 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012f22:	89 da                	mov    edx,ebx
c0012f24:	29 c2                	sub    edx,eax
c0012f26:	89 d0                	mov    eax,edx
c0012f28:	5b                   	pop    ebx
c0012f29:	c3                   	ret    

c0012f2a <Thr::loadDLL(char const*, bool)>:
c0012f2a:	55                   	push   ebp
c0012f2b:	57                   	push   edi
c0012f2c:	56                   	push   esi
c0012f2d:	53                   	push   ebx
c0012f2e:	81 ec 34 01 00 00    	sub    esp,0x134
c0012f34:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012f3b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012f42:	56                   	push   esi
c0012f43:	68 f9 e9 01 c0       	push   0xc001e9f9
c0012f48:	e8 a7 7b ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0012f4d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012f54:	e8 04 4f ff ff       	call   c0007e5d <malloc>
c0012f59:	83 c4 0c             	add    esp,0xc
c0012f5c:	89 c3                	mov    ebx,eax
c0012f5e:	ff 35 70 3e 02 c0    	push   DWORD PTR ds:0xc0023e70
c0012f64:	56                   	push   esi
c0012f65:	50                   	push   eax
c0012f66:	e8 ff 80 ff ff       	call   c000b06a <File::File(char const*, Process*)>
c0012f6b:	83 c4 10             	add    esp,0x10
c0012f6e:	85 db                	test   ebx,ebx
c0012f70:	75 3c                	jne    c0012fae <Thr::loadDLL(char const*, bool)+0x84>
c0012f72:	89 f8                	mov    eax,edi
c0012f74:	84 c0                	test   al,al
c0012f76:	0f 84 d2 01 00 00    	je     c001314e <Thr::loadDLL(char const*, bool)+0x224>
c0012f7c:	55                   	push   ebp
c0012f7d:	55                   	push   ebp
c0012f7e:	68 0a ea 01 c0       	push   0xc001ea0a
c0012f83:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012f87:	55                   	push   ebp
c0012f88:	e8 93 d6 fe ff       	call   c0000620 <strcpy>
c0012f8d:	58                   	pop    eax
c0012f8e:	5a                   	pop    edx
c0012f8f:	56                   	push   esi
c0012f90:	55                   	push   ebp
c0012f91:	e8 4a d8 fe ff       	call   c00007e0 <strcat>
c0012f96:	59                   	pop    ecx
c0012f97:	58                   	pop    eax
c0012f98:	68 1d ea 01 c0       	push   0xc001ea1d
c0012f9d:	55                   	push   ebp
c0012f9e:	e8 3d d8 fe ff       	call   c00007e0 <strcat>
c0012fa3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012fa6:	e8 18 d7 ff ff       	call   c00106c3 <KePanic(char const*)>
c0012fab:	83 c4 10             	add    esp,0x10
c0012fae:	51                   	push   ecx
c0012faf:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012fb3:	50                   	push   eax
c0012fb4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012fb8:	50                   	push   eax
c0012fb9:	53                   	push   ebx
c0012fba:	e8 17 84 ff ff       	call   c000b3d6 <File::stat(unsigned long long*, bool*)>
c0012fbf:	83 c4 10             	add    esp,0x10
c0012fc2:	85 db                	test   ebx,ebx
c0012fc4:	74 0c                	je     c0012fd2 <Thr::loadDLL(char const*, bool)+0xa8>
c0012fc6:	83 ec 0c             	sub    esp,0xc
c0012fc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fcb:	53                   	push   ebx
c0012fcc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fcf:	83 c4 10             	add    esp,0x10
c0012fd2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012fd7:	75 0a                	jne    c0012fe3 <Thr::loadDLL(char const*, bool)+0xb9>
c0012fd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fdd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012fe1:	75 3c                	jne    c001301f <Thr::loadDLL(char const*, bool)+0xf5>
c0012fe3:	89 f8                	mov    eax,edi
c0012fe5:	84 c0                	test   al,al
c0012fe7:	0f 84 49 01 00 00    	je     c0013136 <Thr::loadDLL(char const*, bool)+0x20c>
c0012fed:	51                   	push   ecx
c0012fee:	51                   	push   ecx
c0012fef:	68 0a ea 01 c0       	push   0xc001ea0a
c0012ff4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012ff8:	53                   	push   ebx
c0012ff9:	e8 22 d6 fe ff       	call   c0000620 <strcpy>
c0012ffe:	5d                   	pop    ebp
c0012fff:	58                   	pop    eax
c0013000:	56                   	push   esi
c0013001:	53                   	push   ebx
c0013002:	e8 d9 d7 fe ff       	call   c00007e0 <strcat>
c0013007:	58                   	pop    eax
c0013008:	5a                   	pop    edx
c0013009:	68 1d ea 01 c0       	push   0xc001ea1d
c001300e:	53                   	push   ebx
c001300f:	e8 cc d7 fe ff       	call   c00007e0 <strcat>
c0013014:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013017:	e8 a7 d6 ff ff       	call   c00106c3 <KePanic(char const*)>
c001301c:	83 c4 10             	add    esp,0x10
c001301f:	52                   	push   edx
c0013020:	6a 03                	push   0x3
c0013022:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013026:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001302a:	05 ff 0f 00 00       	add    eax,0xfff
c001302f:	83 d2 00             	adc    edx,0x0
c0013032:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013036:	50                   	push   eax
c0013037:	ff 35 90 0a 02 c0    	push   DWORD PTR ds:0xc0020a90
c001303d:	e8 f8 6f ff ff       	call   c000a03a <VAS::allocatePages(int, int)>
c0013042:	59                   	pop    ecx
c0013043:	89 c3                	mov    ebx,eax
c0013045:	5d                   	pop    ebp
c0013046:	50                   	push   eax
c0013047:	68 7e d8 01 c0       	push   0xc001d87e
c001304c:	e8 a3 7a ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0013051:	89 34 24             	mov    DWORD PTR [esp],esi
c0013054:	e8 07 d5 fe ff       	call   c0000560 <strlen>
c0013059:	8b 2d 80 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023680
c001305f:	40                   	inc    eax
c0013060:	89 04 24             	mov    DWORD PTR [esp],eax
c0013063:	e8 f5 4d ff ff       	call   c0007e5d <malloc>
c0013068:	89 04 ad a0 3a 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc560],eax
c001306f:	58                   	pop    eax
c0013070:	a1 80 36 02 c0       	mov    eax,ds:0xc0023680
c0013075:	5a                   	pop    edx
c0013076:	56                   	push   esi
c0013077:	ff 34 85 a0 3a 02 c0 	push   DWORD PTR [eax*4-0x3ffdc560]
c001307e:	e8 9d d5 fe ff       	call   c0000620 <strcpy>
c0013083:	a1 80 36 02 c0       	mov    eax,ds:0xc0023680
c0013088:	8d 50 01             	lea    edx,[eax+0x1]
c001308b:	89 1c 85 a0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc760],ebx
c0013092:	89 15 80 36 02 c0    	mov    DWORD PTR ds:0xc0023680,edx
c0013098:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001309c:	83 c4 0c             	add    esp,0xc
c001309f:	89 14 85 a0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc960],edx
c00130a6:	6a 01                	push   0x1
c00130a8:	53                   	push   ebx
c00130a9:	56                   	push   esi
c00130aa:	e8 c2 f6 ff ff       	call   c0012771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00130af:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00130b3:	83 c4 10             	add    esp,0x10
c00130b6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00130bb:	0f 85 89 00 00 00    	jne    c001314a <Thr::loadDLL(char const*, bool)+0x220>
c00130c1:	89 f8                	mov    eax,edi
c00130c3:	84 c0                	test   al,al
c00130c5:	74 73                	je     c001313a <Thr::loadDLL(char const*, bool)+0x210>
c00130c7:	83 ec 0c             	sub    esp,0xc
c00130ca:	68 1f ea 01 c0       	push   0xc001ea1f
c00130cf:	e8 ef d5 ff ff       	call   c00106c3 <KePanic(char const*)>
c00130d4:	83 c4 10             	add    esp,0x10
c00130d7:	eb 61                	jmp    c001313a <Thr::loadDLL(char const*, bool)+0x210>
c00130d9:	50                   	push   eax
c00130da:	50                   	push   eax
c00130db:	89 e8                	mov    eax,ebp
c00130dd:	c1 e0 0c             	shl    eax,0xc
c00130e0:	01 d8                	add    eax,ebx
c00130e2:	50                   	push   eax
c00130e3:	ff 35 90 0a 02 c0    	push   DWORD PTR ds:0xc0020a90
c00130e9:	e8 c4 6a ff ff       	call   c0009bb2 <VAS::getPageTableEntry(unsigned long)>
c00130ee:	83 c4 10             	add    esp,0x10
c00130f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00130f3:	a8 60                	test   al,0x60
c00130f5:	75 11                	jne    c0013108 <Thr::loadDLL(char const*, bool)+0x1de>
c00130f7:	83 ec 0c             	sub    esp,0xc
c00130fa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00130ff:	50                   	push   eax
c0013100:	e8 ce 4f ff ff       	call   c00080d3 <Phys::freePage(unsigned long)>
c0013105:	83 c4 10             	add    esp,0x10
c0013108:	45                   	inc    ebp
c0013109:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001310d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013111:	05 ff 0f 00 00       	add    eax,0xfff
c0013116:	bf 00 00 00 00       	mov    edi,0x0
c001311b:	83 d2 00             	adc    edx,0x0
c001311e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013122:	c1 ea 0c             	shr    edx,0xc
c0013125:	39 c5                	cmp    ebp,eax
c0013127:	89 d1                	mov    ecx,edx
c0013129:	89 f8                	mov    eax,edi
c001312b:	19 c8                	sbb    eax,ecx
c001312d:	72 aa                	jb     c00130d9 <Thr::loadDLL(char const*, bool)+0x1af>
c001312f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013134:	75 18                	jne    c001314e <Thr::loadDLL(char const*, bool)+0x224>
c0013136:	31 db                	xor    ebx,ebx
c0013138:	eb 14                	jmp    c001314e <Thr::loadDLL(char const*, bool)+0x224>
c001313a:	83 ec 0c             	sub    esp,0xc
c001313d:	68 3e ea 01 c0       	push   0xc001ea3e
c0013142:	e8 7c d5 ff ff       	call   c00106c3 <KePanic(char const*)>
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	31 ed                	xor    ebp,ebp
c001314c:	eb bb                	jmp    c0013109 <Thr::loadDLL(char const*, bool)+0x1df>
c001314e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013154:	89 d8                	mov    eax,ebx
c0013156:	5b                   	pop    ebx
c0013157:	5e                   	pop    esi
c0013158:	5f                   	pop    edi
c0013159:	5d                   	pop    ebp
c001315a:	c3                   	ret    

c001315b <Thr::executeDLL(unsigned long, void*)>:
c001315b:	56                   	push   esi
c001315c:	53                   	push   ebx
c001315d:	52                   	push   edx
c001315e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013162:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013166:	85 db                	test   ebx,ebx
c0013168:	75 10                	jne    c001317a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001316a:	83 ec 0c             	sub    esp,0xc
c001316d:	68 5a ea 01 c0       	push   0xc001ea5a
c0013172:	e8 4c d5 ff ff       	call   c00106c3 <KePanic(char const*)>
c0013177:	83 c4 10             	add    esp,0x10
c001317a:	50                   	push   eax
c001317b:	50                   	push   eax
c001317c:	53                   	push   ebx
c001317d:	68 84 ea 01 c0       	push   0xc001ea84
c0013182:	e8 6d 79 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0013187:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001318b:	89 d8                	mov    eax,ebx
c001318d:	83 c4 14             	add    esp,0x14
c0013190:	5b                   	pop    ebx
c0013191:	5e                   	pop    esi
c0013192:	ff e0                	jmp    eax

c0013194 <userModeEntryPoint(void*)>:
c0013194:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0013199:	48                   	dec    eax
c001319a:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c001319f:	75 03                	jne    c00131a4 <userModeEntryPoint(void*)+0x10>
c00131a1:	fb                   	sti    
c00131a2:	66 90                	xchg   ax,ax
c00131a4:	fb                   	sti    
c00131a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131ad:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00131b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00131b7:	e9 a3 d0 fe ff       	jmp    c000025f <goToUsermode>

c00131bc <changeTSS>:
c00131bc:	83 ec 14             	sub    esp,0x14
c00131bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00131c7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00131cc:	c1 e2 15             	shl    edx,0x15
c00131cf:	29 d0                	sub    eax,edx
c00131d1:	50                   	push   eax
c00131d2:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c00131d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00131dd:	05 7c 11 00 00       	add    eax,0x117c
c00131e2:	50                   	push   eax
c00131e3:	e8 0c 60 ff ff       	call   c00091f4 <TSS::setESP(unsigned long)>
c00131e8:	83 c4 1c             	add    esp,0x1c
c00131eb:	c3                   	ret    

c00131ec <switchToThread(ThreadControlBlock*)>:
c00131ec:	57                   	push   edi
c00131ed:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c00131f2:	56                   	push   esi
c00131f3:	85 c0                	test   eax,eax
c00131f5:	53                   	push   ebx
c00131f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131fa:	0f 85 90 00 00 00    	jne    c0013290 <switchToThread(ThreadControlBlock*)+0xa4>
c0013200:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013203:	80 fa ff             	cmp    dl,0xff
c0013206:	0f 84 80 00 00 00    	je     c001328c <switchToThread(ThreadControlBlock*)+0xa0>
c001320c:	81 e2 ff 00 00 00    	and    edx,0xff
c0013212:	b8 00 04 00 00       	mov    eax,0x400
c0013217:	29 d0                	sub    eax,edx
c0013219:	d1 f8                	sar    eax,1
c001321b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001321e:	66 90                	xchg   ax,ax
c0013220:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013223:	e8 e5 25 00 00       	call   c001580d <HalQueryPerformanceCounter()>
c0013228:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c001322d:	89 15 8c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e8c,edx
c0013233:	89 c6                	mov    esi,eax
c0013235:	89 d7                	mov    edi,edx
c0013237:	2b 35 78 3e 02 c0    	sub    esi,DWORD PTR ds:0xc0023e78
c001323d:	a3 78 3e 02 c0       	mov    ds:0xc0023e78,eax
c0013242:	1b 3d 7c 3e 02 c0    	sbb    edi,DWORD PTR ds:0xc0023e7c
c0013248:	89 35 80 3e 02 c0    	mov    DWORD PTR ds:0xc0023e80,esi
c001324e:	89 3d 84 3e 02 c0    	mov    DWORD PTR ds:0xc0023e84,edi
c0013254:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001325a:	89 15 7c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e7c,edx
c0013260:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0013263:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0013266:	01 c6                	add    esi,eax
c0013268:	11 d7                	adc    edi,edx
c001326a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001326d:	83 ec 0c             	sub    esp,0xc
c0013270:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0013273:	53                   	push   ebx
c0013274:	e8 1e d0 fe ff       	call   c0000297 <switchToThreadASM>
c0013279:	0f 20 c0             	mov    eax,cr0
c001327c:	83 c8 08             	or     eax,0x8
c001327f:	0f 22 c0             	mov    cr0,eax
c0013282:	83 c4 10             	add    esp,0x10
c0013285:	5b                   	pop    ebx
c0013286:	5e                   	pop    esi
c0013287:	5f                   	pop    edi
c0013288:	c3                   	ret    
c0013289:	8d 76 00             	lea    esi,[esi+0x0]
c001328c:	31 c0                	xor    eax,eax
c001328e:	eb 90                	jmp    c0013220 <switchToThread(ThreadControlBlock*)+0x34>
c0013290:	5b                   	pop    ebx
c0013291:	c7 05 40 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e40,0x1
c001329b:	5e                   	pop    esi
c001329c:	5f                   	pop    edi
c001329d:	c3                   	ret    
c001329e:	66 90                	xchg   ax,ax

c00132a0 <Process::addArgs(char**)>:
c00132a0:	57                   	push   edi
c00132a1:	56                   	push   esi
c00132a2:	53                   	push   ebx
c00132a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00132a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00132ab:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00132b5:	85 ff                	test   edi,edi
c00132b7:	74 43                	je     c00132fc <Process::addArgs(char**)+0x5c>
c00132b9:	8b 07                	mov    eax,DWORD PTR [edi]
c00132bb:	85 c0                	test   eax,eax
c00132bd:	74 3d                	je     c00132fc <Process::addArgs(char**)+0x5c>
c00132bf:	31 db                	xor    ebx,ebx
c00132c1:	8d 76 00             	lea    esi,[esi+0x0]
c00132c4:	83 ec 0c             	sub    esp,0xc
c00132c7:	50                   	push   eax
c00132c8:	e8 93 d2 fe ff       	call   c0000560 <strlen>
c00132cd:	40                   	inc    eax
c00132ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00132d1:	e8 87 4b ff ff       	call   c0007e5d <malloc>
c00132d6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00132dd:	5a                   	pop    edx
c00132de:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00132e1:	59                   	pop    ecx
c00132e2:	43                   	inc    ebx
c00132e3:	52                   	push   edx
c00132e4:	50                   	push   eax
c00132e5:	e8 36 d3 fe ff       	call   c0000620 <strcpy>
c00132ea:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00132f0:	83 c4 10             	add    esp,0x10
c00132f3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00132f6:	85 c0                	test   eax,eax
c00132f8:	75 ca                	jne    c00132c4 <Process::addArgs(char**)+0x24>
c00132fa:	66 90                	xchg   ax,ax
c00132fc:	5b                   	pop    ebx
c00132fd:	5e                   	pop    esi
c00132fe:	5f                   	pop    edi
c00132ff:	c3                   	ret    

c0013300 <Process::Process(char const*, Process*, char**)>:
c0013300:	56                   	push   esi
c0013301:	53                   	push   ebx
c0013302:	83 ec 14             	sub    esp,0x14
c0013305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013309:	05 0c 02 00 00       	add    eax,0x20c
c001330e:	bb 07 00 00 00       	mov    ebx,0x7
c0013313:	89 c6                	mov    esi,eax
c0013315:	8d 76 00             	lea    esi,[esi+0x0]
c0013318:	85 db                	test   ebx,ebx
c001331a:	78 14                	js     c0013330 <Process::Process(char const*, Process*, char**)+0x30>
c001331c:	83 ec 0c             	sub    esp,0xc
c001331f:	56                   	push   esi
c0013320:	e8 e7 97 00 00       	call   c001cb0c <ThreadControlBlock::ThreadControlBlock()>
c0013325:	83 c4 10             	add    esp,0x10
c0013328:	83 c6 5f             	add    esi,0x5f
c001332b:	4b                   	dec    ebx
c001332c:	eb ea                	jmp    c0013318 <Process::Process(char const*, Process*, char**)+0x18>
c001332e:	66 90                	xchg   ax,ax
c0013330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013334:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001333b:	83 ec 0c             	sub    esp,0xc
c001333e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013342:	e8 05 d2 ff ff       	call   c001054c <Krnl::newProcessEnv(Process*)>
c0013347:	83 c4 10             	add    esp,0x10
c001334a:	89 c2                	mov    edx,eax
c001334c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013350:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001335a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013363:	a1 70 f9 01 c0       	mov    eax,ds:0xc001f970
c0013368:	8d 50 01             	lea    edx,[eax+0x1]
c001336b:	89 15 70 f9 01 c0    	mov    DWORD PTR ds:0xc001f970,edx
c0013371:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013375:	89 02                	mov    DWORD PTR [edx],eax
c0013377:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001337f:	83 ec 0c             	sub    esp,0xc
c0013382:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013386:	e8 d2 4a ff ff       	call   c0007e5d <malloc>
c001338b:	83 c4 10             	add    esp,0x10
c001338e:	89 c3                	mov    ebx,eax
c0013390:	83 ec 08             	sub    esp,0x8
c0013393:	6a 00                	push   0x0
c0013395:	53                   	push   ebx
c0013396:	e8 49 70 ff ff       	call   c000a3e4 <VAS::VAS(bool)>
c001339b:	83 c4 10             	add    esp,0x10
c001339e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133a2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00133a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133ac:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00133b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00133be:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00133c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133c8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00133ce:	85 c0                	test   eax,eax
c00133d0:	74 42                	je     c0013414 <Process::Process(char const*, Process*, char**)+0x114>
c00133d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133d6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00133dc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00133e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133e6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00133ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133f0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00133f6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013400:	05 0c 01 00 00       	add    eax,0x10c
c0013405:	83 ec 08             	sub    esp,0x8
c0013408:	52                   	push   edx
c0013409:	50                   	push   eax
c001340a:	e8 11 d2 fe ff       	call   c0000620 <strcpy>
c001340f:	83 c4 10             	add    esp,0x10
c0013412:	eb 64                	jmp    c0013478 <Process::Process(char const*, Process*, char**)+0x178>
c0013414:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c001341c:	83 ec 0c             	sub    esp,0xc
c001341f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013423:	e8 35 4a ff ff       	call   c0007e5d <malloc>
c0013428:	83 c4 10             	add    esp,0x10
c001342b:	89 c3                	mov    ebx,eax
c001342d:	83 ec 08             	sub    esp,0x8
c0013430:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013434:	53                   	push   ebx
c0013435:	e8 60 5b ff ff       	call   c0008f9a <VgaText::VgaText(char const*)>
c001343a:	83 c4 10             	add    esp,0x10
c001343d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013441:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001344b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013451:	83 ec 0c             	sub    esp,0xc
c0013454:	50                   	push   eax
c0013455:	e8 e0 53 ff ff       	call   c000883a <addToTerminalCycle(VgaText*)>
c001345a:	83 c4 10             	add    esp,0x10
c001345d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013461:	05 0c 01 00 00       	add    eax,0x10c
c0013466:	83 ec 08             	sub    esp,0x8
c0013469:	68 a3 ea 01 c0       	push   0xc001eaa3
c001346e:	50                   	push   eax
c001346f:	e8 ac d1 fe ff       	call   c0000620 <strcpy>
c0013474:	83 c4 10             	add    esp,0x10
c0013477:	90                   	nop
c0013478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001347c:	83 c0 0c             	add    eax,0xc
c001347f:	83 ec 08             	sub    esp,0x8
c0013482:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013486:	50                   	push   eax
c0013487:	e8 94 d1 fe ff       	call   c0000620 <strcpy>
c001348c:	83 c4 10             	add    esp,0x10
c001348f:	83 ec 08             	sub    esp,0x8
c0013492:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013496:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001349a:	e8 01 fe ff ff       	call   c00132a0 <Process::addArgs(char**)>
c001349f:	83 c4 10             	add    esp,0x10
c00134a2:	83 ec 08             	sub    esp,0x8
c00134a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134ad:	e8 89 ed ff ff       	call   c001223b <Thr::loadProgramIntoMemory(Process*, char const*)>
c00134b2:	83 c4 10             	add    esp,0x10
c00134b5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00134b9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00134bd:	83 f0 01             	xor    eax,0x1
c00134c0:	88 c2                	mov    dl,al
c00134c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134c6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00134cc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00134d0:	25 ff 00 00 00       	and    eax,0xff
c00134d5:	83 ec 08             	sub    esp,0x8
c00134d8:	50                   	push   eax
c00134d9:	68 fc ea 01 c0       	push   0xc001eafc
c00134de:	e8 11 76 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c00134e3:	83 c4 10             	add    esp,0x10
c00134e6:	90                   	nop
c00134e7:	83 c4 14             	add    esp,0x14
c00134ea:	5b                   	pop    ebx
c00134eb:	5e                   	pop    esi
c00134ec:	c3                   	ret    
c00134ed:	90                   	nop
c00134ee:	66 90                	xchg   ax,ax

c00134f0 <Process::Process(bool, char const*, Process*, char**)>:
c00134f0:	56                   	push   esi
c00134f1:	53                   	push   ebx
c00134f2:	83 ec 24             	sub    esp,0x24
c00134f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00134f9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00134fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013501:	05 0c 02 00 00       	add    eax,0x20c
c0013506:	bb 07 00 00 00       	mov    ebx,0x7
c001350b:	89 c6                	mov    esi,eax
c001350d:	8d 76 00             	lea    esi,[esi+0x0]
c0013510:	85 db                	test   ebx,ebx
c0013512:	78 14                	js     c0013528 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013514:	83 ec 0c             	sub    esp,0xc
c0013517:	56                   	push   esi
c0013518:	e8 ef 95 00 00       	call   c001cb0c <ThreadControlBlock::ThreadControlBlock()>
c001351d:	83 c4 10             	add    esp,0x10
c0013520:	83 c6 5f             	add    esi,0x5f
c0013523:	4b                   	dec    ebx
c0013524:	eb ea                	jmp    c0013510 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0013526:	66 90                	xchg   ax,ax
c0013528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001352c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013533:	83 ec 0c             	sub    esp,0xc
c0013536:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001353a:	e8 0d d0 ff ff       	call   c001054c <Krnl::newProcessEnv(Process*)>
c001353f:	83 c4 10             	add    esp,0x10
c0013542:	89 c2                	mov    edx,eax
c0013544:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013548:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001354e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013552:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001355b:	a1 70 f9 01 c0       	mov    eax,ds:0xc001f970
c0013560:	8d 50 01             	lea    edx,[eax+0x1]
c0013563:	89 15 70 f9 01 c0    	mov    DWORD PTR ds:0xc001f970,edx
c0013569:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001356d:	89 02                	mov    DWORD PTR [edx],eax
c001356f:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0013577:	83 ec 0c             	sub    esp,0xc
c001357a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001357e:	e8 da 48 ff ff       	call   c0007e5d <malloc>
c0013583:	83 c4 10             	add    esp,0x10
c0013586:	89 c3                	mov    ebx,eax
c0013588:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001358c:	25 ff 00 00 00       	and    eax,0xff
c0013591:	83 ec 08             	sub    esp,0x8
c0013594:	50                   	push   eax
c0013595:	53                   	push   ebx
c0013596:	e8 49 6e ff ff       	call   c000a3e4 <VAS::VAS(bool)>
c001359b:	83 c4 10             	add    esp,0x10
c001359e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135a2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00135a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135ac:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00135b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00135be:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00135c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135c8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00135ce:	85 c0                	test   eax,eax
c00135d0:	74 42                	je     c0013614 <Process::Process(bool, char const*, Process*, char**)+0x124>
c00135d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135d6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00135dc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00135e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135e6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00135ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135f0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00135f6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00135fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013600:	05 0c 01 00 00       	add    eax,0x10c
c0013605:	83 ec 08             	sub    esp,0x8
c0013608:	52                   	push   edx
c0013609:	50                   	push   eax
c001360a:	e8 11 d0 fe ff       	call   c0000620 <strcpy>
c001360f:	83 c4 10             	add    esp,0x10
c0013612:	eb 64                	jmp    c0013678 <Process::Process(bool, char const*, Process*, char**)+0x188>
c0013614:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c001361c:	83 ec 0c             	sub    esp,0xc
c001361f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013623:	e8 35 48 ff ff       	call   c0007e5d <malloc>
c0013628:	83 c4 10             	add    esp,0x10
c001362b:	89 c3                	mov    ebx,eax
c001362d:	83 ec 08             	sub    esp,0x8
c0013630:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013634:	53                   	push   ebx
c0013635:	e8 60 59 ff ff       	call   c0008f9a <VgaText::VgaText(char const*)>
c001363a:	83 c4 10             	add    esp,0x10
c001363d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013641:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013647:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001364b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013651:	83 ec 0c             	sub    esp,0xc
c0013654:	50                   	push   eax
c0013655:	e8 e0 51 ff ff       	call   c000883a <addToTerminalCycle(VgaText*)>
c001365a:	83 c4 10             	add    esp,0x10
c001365d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013661:	05 0c 01 00 00       	add    eax,0x10c
c0013666:	83 ec 08             	sub    esp,0x8
c0013669:	68 a3 ea 01 c0       	push   0xc001eaa3
c001366e:	50                   	push   eax
c001366f:	e8 ac cf fe ff       	call   c0000620 <strcpy>
c0013674:	83 c4 10             	add    esp,0x10
c0013677:	90                   	nop
c0013678:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001367c:	83 c0 0c             	add    eax,0xc
c001367f:	83 ec 08             	sub    esp,0x8
c0013682:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013686:	50                   	push   eax
c0013687:	e8 94 cf fe ff       	call   c0000620 <strcpy>
c001368c:	83 c4 10             	add    esp,0x10
c001368f:	83 ec 08             	sub    esp,0x8
c0013692:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013696:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001369a:	e8 01 fc ff ff       	call   c00132a0 <Process::addArgs(char**)>
c001369f:	83 c4 10             	add    esp,0x10
c00136a2:	90                   	nop
c00136a3:	83 c4 24             	add    esp,0x24
c00136a6:	5b                   	pop    ebx
c00136a7:	5e                   	pop    esi
c00136a8:	c3                   	ret    
c00136a9:	8d 76 00             	lea    esi,[esi+0x0]

c00136ac <taskStartupFunction>:
c00136ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136b1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00136b4:	c3                   	ret    
c00136b5:	90                   	nop
c00136b6:	66 90                	xchg   ax,ax

c00136b8 <Semaphore::Semaphore(int)>:
c00136b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00136c0:	89 10                	mov    DWORD PTR [eax],edx
c00136c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136c6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00136cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136dc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00136e3:	90                   	nop
c00136e4:	c3                   	ret    
c00136e5:	90                   	nop
c00136e6:	66 90                	xchg   ax,ax

c00136e8 <Mutex::Mutex()>:
c00136e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136ec:	6a 01                	push   0x1
c00136ee:	50                   	push   eax
c00136ef:	e8 c4 ff ff ff       	call   c00136b8 <Semaphore::Semaphore(int)>
c00136f4:	83 c4 08             	add    esp,0x8
c00136f7:	90                   	nop
c00136f8:	c3                   	ret    
c00136f9:	90                   	nop
c00136fa:	66 90                	xchg   ax,ax

c00136fc <Process::createThread(void (*)(void*), void*, int)>:
c00136fc:	57                   	push   edi
c00136fd:	31 c9                	xor    ecx,ecx
c00136ff:	56                   	push   esi
c0013700:	53                   	push   ebx
c0013701:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013705:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001370c:	89 f2                	mov    edx,esi
c001370e:	66 90                	xchg   ax,ax
c0013710:	31 c0                	xor    eax,eax
c0013712:	66 89 d0             	mov    ax,dx
c0013715:	83 e2 01             	and    edx,0x1
c0013718:	74 12                	je     c001372c <Process::createThread(void (*)(void*), void*, int)+0x30>
c001371a:	d1 f8                	sar    eax,1
c001371c:	41                   	inc    ecx
c001371d:	89 c2                	mov    edx,eax
c001371f:	83 f9 10             	cmp    ecx,0x10
c0013722:	75 ec                	jne    c0013710 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013724:	31 db                	xor    ebx,ebx
c0013726:	89 d8                	mov    eax,ebx
c0013728:	5b                   	pop    ebx
c0013729:	5e                   	pop    esi
c001372a:	5f                   	pop    edi
c001372b:	c3                   	ret    
c001372c:	b8 01 00 00 00       	mov    eax,0x1
c0013731:	d3 e0                	shl    eax,cl
c0013733:	09 c6                	or     esi,eax
c0013735:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013738:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001373f:	01 c0                	add    eax,eax
c0013741:	01 c8                	add    eax,ecx
c0013743:	8d 04 80             	lea    eax,[eax+eax*4]
c0013746:	01 d8                	add    eax,ebx
c0013748:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001374f:	75 0b                	jne    c001375c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013751:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001375b:	90                   	nop
c001375c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013762:	83 ec 08             	sub    esp,0x8
c0013765:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013768:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001376b:	01 c0                	add    eax,eax
c001376d:	01 c8                	add    eax,ecx
c001376f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013772:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013775:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001377b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013781:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013785:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001378b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013791:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013798:	89 ca                	mov    edx,ecx
c001379a:	f7 da                	neg    edx
c001379c:	c1 e2 15             	shl    edx,0x15
c001379f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00137a5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00137ab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00137af:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00137b9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00137bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00137c3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00137c9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00137d3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00137dd:	53                   	push   ebx
c00137de:	68 64 3e 02 c0       	push   0xc0023e64
c00137e3:	e8 c4 90 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00137e8:	83 c4 10             	add    esp,0x10
c00137eb:	89 d8                	mov    eax,ebx
c00137ed:	5b                   	pop    ebx
c00137ee:	5e                   	pop    esi
c00137ef:	5f                   	pop    edi
c00137f0:	c3                   	ret    
c00137f1:	90                   	nop
c00137f2:	66 90                	xchg   ax,ax

c00137f4 <Process::createUserThread()>:
c00137f4:	83 ec 0c             	sub    esp,0xc
c00137f7:	68 80 00 00 00       	push   0x80
c00137fc:	6a 00                	push   0x0
c00137fe:	68 94 31 01 c0       	push   0xc0013194
c0013803:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013807:	50                   	push   eax
c0013808:	e8 ef fe ff ff       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c001380d:	83 c4 1c             	add    esp,0x1c
c0013810:	c3                   	ret    
c0013811:	8d 76 00             	lea    esi,[esi+0x0]

c0013814 <setupMultitasking(void (*)())>:
c0013814:	56                   	push   esi
c0013815:	53                   	push   ebx
c0013816:	53                   	push   ebx
c0013817:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001381b:	eb 13                	jmp    c0013830 <setupMultitasking(void (*)())+0x1c>
c001381d:	8d 76 00             	lea    esi,[esi+0x0]
c0013820:	83 ec 0c             	sub    esp,0xc
c0013823:	68 64 3e 02 c0       	push   0xc0023e64
c0013828:	e8 c7 8f 00 00       	call   c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001382d:	83 c4 10             	add    esp,0x10
c0013830:	83 ec 0c             	sub    esp,0xc
c0013833:	68 64 3e 02 c0       	push   0xc0023e64
c0013838:	e8 93 8f 00 00       	call   c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001383d:	83 c4 10             	add    esp,0x10
c0013840:	84 c0                	test   al,al
c0013842:	74 dc                	je     c0013820 <setupMultitasking(void (*)())+0xc>
c0013844:	83 ec 0c             	sub    esp,0xc
c0013847:	68 1f 07 00 00       	push   0x71f
c001384c:	e8 0c 46 ff ff       	call   c0007e5d <malloc>
c0013851:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013858:	89 c3                	mov    ebx,eax
c001385a:	6a 00                	push   0x0
c001385c:	68 a7 ea 01 c0       	push   0xc001eaa7
c0013861:	6a 01                	push   0x1
c0013863:	50                   	push   eax
c0013864:	e8 87 fc ff ff       	call   c00134f0 <Process::Process(bool, char const*, Process*, char**)>
c0013869:	83 c4 14             	add    esp,0x14
c001386c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013872:	89 1d 70 3e 02 c0    	mov    DWORD PTR ds:0xc0023e70,ebx
c0013878:	50                   	push   eax
c0013879:	e8 19 52 ff ff       	call   c0008a97 <setActiveTerminal(VgaText*)>
c001387e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013886:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013890:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013896:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013899:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00138a3:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00138a9:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00138af:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00138b9:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00138c3:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00138cd:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00138d3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00138d9:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00138e3:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00138e9:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00138f3:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00138f9:	5a                   	pop    edx
c00138fa:	59                   	pop    ecx
c00138fb:	68 a3 ea 01 c0       	push   0xc001eaa3
c0013900:	50                   	push   eax
c0013901:	e8 1a cd fe ff       	call   c0000620 <strcpy>
c0013906:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001390d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013911:	83 c4 14             	add    esp,0x14
c0013914:	5b                   	pop    ebx
c0013915:	5e                   	pop    esi
c0013916:	e9 6e c9 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c001391b:	90                   	nop

c001391c <schedule()>:
c001391c:	8b 15 44 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e44
c0013922:	85 d2                	test   edx,edx
c0013924:	74 0e                	je     c0013934 <schedule()+0x18>
c0013926:	c7 05 40 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e40,0x1
c0013930:	c3                   	ret    
c0013931:	8d 76 00             	lea    esi,[esi+0x0]
c0013934:	53                   	push   ebx
c0013935:	83 ec 14             	sub    esp,0x14
c0013938:	68 64 3e 02 c0       	push   0xc0023e64
c001393d:	e8 8e 8e 00 00       	call   c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013942:	83 c4 10             	add    esp,0x10
c0013945:	84 c0                	test   al,al
c0013947:	75 3b                	jne    c0013984 <schedule()+0x68>
c0013949:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001394e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013951:	4a                   	dec    edx
c0013952:	74 38                	je     c001398c <schedule()+0x70>
c0013954:	83 ec 0c             	sub    esp,0xc
c0013957:	68 64 3e 02 c0       	push   0xc0023e64
c001395c:	e8 8b 8e 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013961:	c7 04 24 64 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e64
c0013968:	89 c3                	mov    ebx,eax
c001396a:	e8 85 8e 00 00       	call   c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001396f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013976:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013979:	e8 6e f8 ff ff       	call   c00131ec <switchToThread(ThreadControlBlock*)>
c001397e:	83 c4 10             	add    esp,0x10
c0013981:	8d 76 00             	lea    esi,[esi+0x0]
c0013984:	83 c4 08             	add    esp,0x8
c0013987:	5b                   	pop    ebx
c0013988:	c3                   	ret    
c0013989:	8d 76 00             	lea    esi,[esi+0x0]
c001398c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013993:	83 ec 08             	sub    esp,0x8
c0013996:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001399b:	50                   	push   eax
c001399c:	68 64 3e 02 c0       	push   0xc0023e64
c00139a1:	e8 06 8f 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00139a6:	83 c4 10             	add    esp,0x10
c00139a9:	eb a9                	jmp    c0013954 <schedule()+0x38>
c00139ab:	90                   	nop

c00139ac <Semaphore::tryAcquire()>:
c00139ac:	53                   	push   ebx
c00139ad:	83 ec 08             	sub    esp,0x8
c00139b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139b4:	fa                   	cli    
c00139b5:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c00139ba:	8d 50 01             	lea    edx,[eax+0x1]
c00139bd:	89 15 48 3e 02 c0    	mov    DWORD PTR ds:0xc0023e48,edx
c00139c3:	8b 15 44 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e44
c00139c9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00139cc:	89 1d 44 3e 02 c0    	mov    DWORD PTR ds:0xc0023e44,ebx
c00139d2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00139d5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00139d7:	7c 33                	jl     c0013a0c <Semaphore::tryAcquire()+0x60>
c00139d9:	89 15 44 3e 02 c0    	mov    DWORD PTR ds:0xc0023e44,edx
c00139df:	85 d2                	test   edx,edx
c00139e1:	75 0d                	jne    c00139f0 <Semaphore::tryAcquire()+0x44>
c00139e3:	8b 15 40 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e40
c00139e9:	85 d2                	test   edx,edx
c00139eb:	75 6b                	jne    c0013a58 <Semaphore::tryAcquire()+0xac>
c00139ed:	8d 76 00             	lea    esi,[esi+0x0]
c00139f0:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c00139f5:	85 c0                	test   eax,eax
c00139f7:	74 0b                	je     c0013a04 <Semaphore::tryAcquire()+0x58>
c00139f9:	8d 76 00             	lea    esi,[esi+0x0]
c00139fc:	31 c0                	xor    eax,eax
c00139fe:	83 c4 08             	add    esp,0x8
c0013a01:	5b                   	pop    ebx
c0013a02:	c3                   	ret    
c0013a03:	90                   	nop
c0013a04:	fb                   	sti    
c0013a05:	83 c4 08             	add    esp,0x8
c0013a08:	5b                   	pop    ebx
c0013a09:	c3                   	ret    
c0013a0a:	66 90                	xchg   ax,ax
c0013a0c:	43                   	inc    ebx
c0013a0d:	89 15 44 3e 02 c0    	mov    DWORD PTR ds:0xc0023e44,edx
c0013a13:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013a16:	85 d2                	test   edx,edx
c0013a18:	75 22                	jne    c0013a3c <Semaphore::tryAcquire()+0x90>
c0013a1a:	8b 0d 40 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e40
c0013a20:	85 c9                	test   ecx,ecx
c0013a22:	74 18                	je     c0013a3c <Semaphore::tryAcquire()+0x90>
c0013a24:	c7 05 40 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e40,0x0
c0013a2e:	e8 e9 fe ff ff       	call   c001391c <schedule()>
c0013a33:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0013a38:	48                   	dec    eax
c0013a39:	8d 76 00             	lea    esi,[esi+0x0]
c0013a3c:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013a41:	85 c0                	test   eax,eax
c0013a43:	75 0b                	jne    c0013a50 <Semaphore::tryAcquire()+0xa4>
c0013a45:	fb                   	sti    
c0013a46:	b0 01                	mov    al,0x1
c0013a48:	83 c4 08             	add    esp,0x8
c0013a4b:	5b                   	pop    ebx
c0013a4c:	c3                   	ret    
c0013a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a50:	b0 01                	mov    al,0x1
c0013a52:	83 c4 08             	add    esp,0x8
c0013a55:	5b                   	pop    ebx
c0013a56:	c3                   	ret    
c0013a57:	90                   	nop
c0013a58:	c7 05 40 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e40,0x0
c0013a62:	e8 b5 fe ff ff       	call   c001391c <schedule()>
c0013a67:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0013a6c:	48                   	dec    eax
c0013a6d:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013a72:	85 c0                	test   eax,eax
c0013a74:	75 86                	jne    c00139fc <Semaphore::tryAcquire()+0x50>
c0013a76:	eb 8c                	jmp    c0013a04 <Semaphore::tryAcquire()+0x58>

c0013a78 <Semaphore::assertLocked(char const*)>:
c0013a78:	83 ec 0c             	sub    esp,0xc
c0013a7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a7f:	fa                   	cli    
c0013a80:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0013a86:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c0013a8b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013a8e:	89 0d 44 3e 02 c0    	mov    DWORD PTR ds:0xc0023e44,ecx
c0013a94:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013a96:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013a99:	7c 29                	jl     c0013ac4 <Semaphore::assertLocked(char const*)+0x4c>
c0013a9b:	90                   	nop
c0013a9c:	a3 44 3e 02 c0       	mov    ds:0xc0023e44,eax
c0013aa1:	85 c0                	test   eax,eax
c0013aa3:	75 0b                	jne    c0013ab0 <Semaphore::assertLocked(char const*)+0x38>
c0013aa5:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c0013aaa:	85 c0                	test   eax,eax
c0013aac:	75 2e                	jne    c0013adc <Semaphore::assertLocked(char const*)+0x64>
c0013aae:	66 90                	xchg   ax,ax
c0013ab0:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0013ab5:	48                   	dec    eax
c0013ab6:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013abb:	75 03                	jne    c0013ac0 <Semaphore::assertLocked(char const*)+0x48>
c0013abd:	fb                   	sti    
c0013abe:	66 90                	xchg   ax,ax
c0013ac0:	83 c4 0c             	add    esp,0xc
c0013ac3:	c3                   	ret    
c0013ac4:	83 ec 0c             	sub    esp,0xc
c0013ac7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013acb:	52                   	push   edx
c0013acc:	e8 f2 cb ff ff       	call   c00106c3 <KePanic(char const*)>
c0013ad1:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c0013ad6:	83 c4 10             	add    esp,0x10
c0013ad9:	48                   	dec    eax
c0013ada:	eb c0                	jmp    c0013a9c <Semaphore::assertLocked(char const*)+0x24>
c0013adc:	c7 05 40 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e40,0x0
c0013ae6:	e8 31 fe ff ff       	call   c001391c <schedule()>
c0013aeb:	eb c3                	jmp    c0013ab0 <Semaphore::assertLocked(char const*)+0x38>
c0013aed:	8d 76 00             	lea    esi,[esi+0x0]

c0013af0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013af0:	83 ec 0c             	sub    esp,0xc
c0013af3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013af8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013afc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013aff:	e8 18 fe ff ff       	call   c001391c <schedule()>
c0013b04:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0013b09:	48                   	dec    eax
c0013b0a:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013b0f:	75 03                	jne    c0013b14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013b11:	fb                   	sti    
c0013b12:	66 90                	xchg   ax,ax
c0013b14:	83 c4 0c             	add    esp,0xc
c0013b17:	c3                   	ret    

c0013b18 <blockTask(TaskState)>:
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	fa                   	cli    
c0013b1c:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0013b22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b2b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013b2e:	e8 e9 fd ff ff       	call   c001391c <schedule()>
c0013b33:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0013b38:	48                   	dec    eax
c0013b39:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013b3e:	75 04                	jne    c0013b44 <blockTask(TaskState)+0x2c>
c0013b40:	fb                   	sti    
c0013b41:	8d 76 00             	lea    esi,[esi+0x0]
c0013b44:	83 c4 0c             	add    esp,0xc
c0013b47:	c3                   	ret    

c0013b48 <waitTask(int, int*, int)>:
c0013b48:	83 ec 18             	sub    esp,0x18
c0013b4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b54:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013b57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013b5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b60:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013b63:	6a 07                	push   0x7
c0013b65:	e8 ae ff ff ff       	call   c0013b18 <blockTask(TaskState)>
c0013b6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b6f:	83 c4 10             	add    esp,0x10
c0013b72:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013b75:	85 d2                	test   edx,edx
c0013b77:	74 0b                	je     c0013b84 <waitTask(int, int*, int)+0x3c>
c0013b79:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013b7c:	89 02                	mov    DWORD PTR [edx],eax
c0013b7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b83:	90                   	nop
c0013b84:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013b87:	83 c4 0c             	add    esp,0xc
c0013b8a:	c3                   	ret    
c0013b8b:	90                   	nop

c0013b8c <milliTenthSleepUntil(unsigned int)>:
c0013b8c:	83 ec 0c             	sub    esp,0xc
c0013b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b93:	39 05 6c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f6c,eax
c0013b99:	76 05                	jbe    c0013ba0 <milliTenthSleepUntil(unsigned int)+0x14>
c0013b9b:	90                   	nop
c0013b9c:	83 c4 0c             	add    esp,0xc
c0013b9f:	c3                   	ret    
c0013ba0:	fa                   	cli    
c0013ba1:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0013ba7:	83 ec 08             	sub    esp,0x8
c0013baa:	ff 05 44 3e 02 c0    	inc    DWORD PTR ds:0xc0023e44
c0013bb0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013bb6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013bb9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013bbf:	52                   	push   edx
c0013bc0:	68 58 3e 02 c0       	push   0xc0023e58
c0013bc5:	e8 e2 8c 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013bca:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013bd1:	e8 42 ff ff ff       	call   c0013b18 <blockTask(TaskState)>
c0013bd6:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c0013bdb:	83 c4 10             	add    esp,0x10
c0013bde:	48                   	dec    eax
c0013bdf:	a3 44 3e 02 c0       	mov    ds:0xc0023e44,eax
c0013be4:	85 c0                	test   eax,eax
c0013be6:	75 0c                	jne    c0013bf4 <milliTenthSleepUntil(unsigned int)+0x68>
c0013be8:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c0013bed:	85 c0                	test   eax,eax
c0013bef:	75 17                	jne    c0013c08 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0013bf4:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0013bf9:	48                   	dec    eax
c0013bfa:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013bff:	75 9b                	jne    c0013b9c <milliTenthSleepUntil(unsigned int)+0x10>
c0013c01:	fb                   	sti    
c0013c02:	83 c4 0c             	add    esp,0xc
c0013c05:	c3                   	ret    
c0013c06:	66 90                	xchg   ax,ax
c0013c08:	c7 05 40 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e40,0x0
c0013c12:	e8 05 fd ff ff       	call   c001391c <schedule()>
c0013c17:	eb db                	jmp    c0013bf4 <milliTenthSleepUntil(unsigned int)+0x68>
c0013c19:	8d 76 00             	lea    esi,[esi+0x0]

c0013c1c <milliTenthSleep(unsigned int)>:
c0013c1c:	a1 6c 2f 02 c0       	mov    eax,ds:0xc0022f6c
c0013c21:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013c25:	e9 62 ff ff ff       	jmp    c0013b8c <milliTenthSleepUntil(unsigned int)>
c0013c2a:	66 90                	xchg   ax,ax

c0013c2c <sleep(unsigned int)>:
c0013c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c30:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c33:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c36:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c39:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c3c:	c1 e0 04             	shl    eax,0x4
c0013c3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c43:	eb d7                	jmp    c0013c1c <milliTenthSleep(unsigned int)>
c0013c45:	90                   	nop
c0013c46:	66 90                	xchg   ax,ax

c0013c48 <Semaphore::acquire()>:
c0013c48:	83 ec 0c             	sub    esp,0xc
c0013c4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c4f:	fa                   	cli    
c0013c50:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c0013c55:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0013c5b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c5e:	89 0d 44 3e 02 c0    	mov    DWORD PTR ds:0xc0023e44,ecx
c0013c64:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013c67:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013c69:	7d 2d                	jge    c0013c98 <Semaphore::acquire()+0x50>
c0013c6b:	41                   	inc    ecx
c0013c6c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013c6f:	90                   	nop
c0013c70:	a3 44 3e 02 c0       	mov    ds:0xc0023e44,eax
c0013c75:	85 c0                	test   eax,eax
c0013c77:	75 0b                	jne    c0013c84 <Semaphore::acquire()+0x3c>
c0013c79:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c0013c7e:	85 c0                	test   eax,eax
c0013c80:	75 62                	jne    c0013ce4 <Semaphore::acquire()+0x9c>
c0013c82:	66 90                	xchg   ax,ax
c0013c84:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0013c89:	48                   	dec    eax
c0013c8a:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013c8f:	75 03                	jne    c0013c94 <Semaphore::acquire()+0x4c>
c0013c91:	fb                   	sti    
c0013c92:	66 90                	xchg   ax,ax
c0013c94:	83 c4 0c             	add    esp,0xc
c0013c97:	c3                   	ret    
c0013c98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c9d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013ca4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013ca7:	85 c9                	test   ecx,ecx
c0013ca9:	74 4d                	je     c0013cf8 <Semaphore::acquire()+0xb0>
c0013cab:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013cae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013cb4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013cb7:	90                   	nop
c0013cb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cbd:	83 ec 0c             	sub    esp,0xc
c0013cc0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013cc3:	68 24 eb 01 c0       	push   0xc001eb24
c0013cc8:	e8 27 6e ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0013ccd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013cd4:	e8 3f fe ff ff       	call   c0013b18 <blockTask(TaskState)>
c0013cd9:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c0013cde:	83 c4 10             	add    esp,0x10
c0013ce1:	48                   	dec    eax
c0013ce2:	eb 8c                	jmp    c0013c70 <Semaphore::acquire()+0x28>
c0013ce4:	c7 05 40 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e40,0x0
c0013cee:	e8 29 fc ff ff       	call   c001391c <schedule()>
c0013cf3:	eb 8f                	jmp    c0013c84 <Semaphore::acquire()+0x3c>
c0013cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0013cf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cfd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013d00:	eb b6                	jmp    c0013cb8 <Semaphore::acquire()+0x70>
c0013d02:	66 90                	xchg   ax,ax

c0013d04 <taskReturned>:
c0013d04:	83 ec 18             	sub    esp,0x18
c0013d07:	68 44 eb 01 c0       	push   0xc001eb44
c0013d0c:	e8 b2 c9 ff ff       	call   c00106c3 <KePanic(char const*)>
c0013d11:	83 c4 10             	add    esp,0x10
c0013d14:	83 ec 0c             	sub    esp,0xc
c0013d17:	6a 02                	push   0x2
c0013d19:	e8 fa fd ff ff       	call   c0013b18 <blockTask(TaskState)>
c0013d1e:	fa                   	cli    
c0013d1f:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0013d25:	e8 f2 fb ff ff       	call   c001391c <schedule()>
c0013d2a:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0013d2f:	83 c4 10             	add    esp,0x10
c0013d32:	48                   	dec    eax
c0013d33:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013d38:	85 c0                	test   eax,eax
c0013d3a:	75 d8                	jne    c0013d14 <taskReturned+0x10>
c0013d3c:	fb                   	sti    
c0013d3d:	eb d5                	jmp    c0013d14 <taskReturned+0x10>
c0013d3f:	90                   	nop

c0013d40 <Thr::processFromPID(int)>:
c0013d40:	57                   	push   edi
c0013d41:	56                   	push   esi
c0013d42:	53                   	push   ebx
c0013d43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d47:	fa                   	cli    
c0013d48:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0013d4e:	83 ec 0c             	sub    esp,0xc
c0013d51:	68 64 3e 02 c0       	push   0xc0023e64
c0013d56:	e8 91 8a 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d5b:	83 c4 10             	add    esp,0x10
c0013d5e:	89 c7                	mov    edi,eax
c0013d60:	eb 16                	jmp    c0013d78 <Thr::processFromPID(int)+0x38>
c0013d62:	66 90                	xchg   ax,ax
c0013d64:	83 ec 0c             	sub    esp,0xc
c0013d67:	68 64 3e 02 c0       	push   0xc0023e64
c0013d6c:	e8 7b 8a 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d71:	83 c4 10             	add    esp,0x10
c0013d74:	39 f8                	cmp    eax,edi
c0013d76:	74 4c                	je     c0013dc4 <Thr::processFromPID(int)+0x84>
c0013d78:	83 ec 0c             	sub    esp,0xc
c0013d7b:	68 64 3e 02 c0       	push   0xc0023e64
c0013d80:	e8 67 8a 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d85:	c7 04 24 64 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e64
c0013d8c:	89 c3                	mov    ebx,eax
c0013d8e:	e8 61 8a 00 00       	call   c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013d93:	58                   	pop    eax
c0013d94:	5a                   	pop    edx
c0013d95:	53                   	push   ebx
c0013d96:	68 64 3e 02 c0       	push   0xc0023e64
c0013d9b:	e8 0c 8b 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013da0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013da3:	83 c4 10             	add    esp,0x10
c0013da6:	39 30                	cmp    DWORD PTR [eax],esi
c0013da8:	75 ba                	jne    c0013d64 <Thr::processFromPID(int)+0x24>
c0013daa:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0013daf:	48                   	dec    eax
c0013db0:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013db5:	74 09                	je     c0013dc0 <Thr::processFromPID(int)+0x80>
c0013db7:	90                   	nop
c0013db8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013dbb:	5b                   	pop    ebx
c0013dbc:	5e                   	pop    esi
c0013dbd:	5f                   	pop    edi
c0013dbe:	c3                   	ret    
c0013dbf:	90                   	nop
c0013dc0:	fb                   	sti    
c0013dc1:	eb f5                	jmp    c0013db8 <Thr::processFromPID(int)+0x78>
c0013dc3:	90                   	nop
c0013dc4:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0013dc9:	48                   	dec    eax
c0013dca:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013dcf:	75 07                	jne    c0013dd8 <Thr::processFromPID(int)+0x98>
c0013dd1:	fb                   	sti    
c0013dd2:	5b                   	pop    ebx
c0013dd3:	5e                   	pop    esi
c0013dd4:	5f                   	pop    edi
c0013dd5:	c3                   	ret    
c0013dd6:	66 90                	xchg   ax,ax
c0013dd8:	5b                   	pop    ebx
c0013dd9:	31 c0                	xor    eax,eax
c0013ddb:	5e                   	pop    esi
c0013ddc:	5f                   	pop    edi
c0013ddd:	c3                   	ret    
c0013dde:	66 90                	xchg   ax,ax

c0013de0 <unblockTask(ThreadControlBlock*)>:
c0013de0:	53                   	push   ebx
c0013de1:	83 ec 08             	sub    esp,0x8
c0013de4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013de8:	fa                   	cli    
c0013de9:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0013def:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013df2:	85 c0                	test   eax,eax
c0013df4:	74 66                	je     c0013e5c <unblockTask(ThreadControlBlock*)+0x7c>
c0013df6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013df9:	48                   	dec    eax
c0013dfa:	74 38                	je     c0013e34 <unblockTask(ThreadControlBlock*)+0x54>
c0013dfc:	83 ec 0c             	sub    esp,0xc
c0013dff:	68 64 3e 02 c0       	push   0xc0023e64
c0013e04:	e8 e3 89 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e09:	83 c4 10             	add    esp,0x10
c0013e0c:	85 c0                	test   eax,eax
c0013e0e:	75 1c                	jne    c0013e2c <unblockTask(ThreadControlBlock*)+0x4c>
c0013e10:	eb 5e                	jmp    c0013e70 <unblockTask(ThreadControlBlock*)+0x90>
c0013e12:	66 90                	xchg   ax,ax
c0013e14:	83 ec 08             	sub    esp,0x8
c0013e17:	50                   	push   eax
c0013e18:	68 64 3e 02 c0       	push   0xc0023e64
c0013e1d:	e8 7a 8d 00 00       	call   c001cb9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013e22:	83 c4 10             	add    esp,0x10
c0013e25:	85 c0                	test   eax,eax
c0013e27:	74 47                	je     c0013e70 <unblockTask(ThreadControlBlock*)+0x90>
c0013e29:	8d 76 00             	lea    esi,[esi+0x0]
c0013e2c:	39 c3                	cmp    ebx,eax
c0013e2e:	75 e4                	jne    c0013e14 <unblockTask(ThreadControlBlock*)+0x34>
c0013e30:	eb 12                	jmp    c0013e44 <unblockTask(ThreadControlBlock*)+0x64>
c0013e32:	66 90                	xchg   ax,ax
c0013e34:	83 ec 0c             	sub    esp,0xc
c0013e37:	68 c5 ea 01 c0       	push   0xc001eac5
c0013e3c:	e8 b3 6c ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0013e41:	83 c4 10             	add    esp,0x10
c0013e44:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0013e49:	48                   	dec    eax
c0013e4a:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013e4f:	75 03                	jne    c0013e54 <unblockTask(ThreadControlBlock*)+0x74>
c0013e51:	fb                   	sti    
c0013e52:	66 90                	xchg   ax,ax
c0013e54:	83 c4 08             	add    esp,0x8
c0013e57:	5b                   	pop    ebx
c0013e58:	c3                   	ret    
c0013e59:	8d 76 00             	lea    esi,[esi+0x0]
c0013e5c:	83 ec 0c             	sub    esp,0xc
c0013e5f:	68 ae ea 01 c0       	push   0xc001eaae
c0013e64:	e8 8b 6c ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0013e69:	83 c4 10             	add    esp,0x10
c0013e6c:	eb d6                	jmp    c0013e44 <unblockTask(ThreadControlBlock*)+0x64>
c0013e6e:	66 90                	xchg   ax,ax
c0013e70:	83 ec 08             	sub    esp,0x8
c0013e73:	53                   	push   ebx
c0013e74:	68 64 3e 02 c0       	push   0xc0023e64
c0013e79:	e8 2e 8a 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013e7e:	83 c4 10             	add    esp,0x10
c0013e81:	eb c1                	jmp    c0013e44 <unblockTask(ThreadControlBlock*)+0x64>
c0013e83:	90                   	nop

c0013e84 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013e84:	55                   	push   ebp
c0013e85:	57                   	push   edi
c0013e86:	56                   	push   esi
c0013e87:	53                   	push   ebx
c0013e88:	83 ec 1c             	sub    esp,0x1c
c0013e8b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013e8f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e92:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013e98:	85 ed                	test   ebp,ebp
c0013e9a:	7e 24                	jle    c0013ec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013e9c:	31 f6                	xor    esi,esi
c0013e9e:	66 90                	xchg   ax,ax
c0013ea0:	83 ec 0c             	sub    esp,0xc
c0013ea3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013eaa:	46                   	inc    esi
c0013eab:	57                   	push   edi
c0013eac:	e8 bc 3f ff ff       	call   c0007e6d <free>
c0013eb1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013eb4:	83 c4 10             	add    esp,0x10
c0013eb7:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013ebd:	7f e1                	jg     c0013ea0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013ebf:	90                   	nop
c0013ec0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013eca:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013ecf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013ed2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013ed5:	d3 c0                	rol    eax,cl
c0013ed7:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013ede:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ee1:	89 f7                	mov    edi,esi
c0013ee3:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013eeb:	0f 85 77 01 00 00    	jne    c0014068 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013ef1:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013ef7:	85 ed                	test   ebp,ebp
c0013ef9:	74 1d                	je     c0013f18 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013efb:	83 ec 0c             	sub    esp,0xc
c0013efe:	55                   	push   ebp
c0013eff:	e8 64 c5 ff ff       	call   c0010468 <EnvVarContainer::~EnvVarContainer()>
c0013f04:	59                   	pop    ecx
c0013f05:	5e                   	pop    esi
c0013f06:	6a 0c                	push   0xc
c0013f08:	55                   	push   ebp
c0013f09:	e8 f0 6a ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c0013f0e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f11:	83 c4 10             	add    esp,0x10
c0013f14:	89 f7                	mov    edi,esi
c0013f16:	66 90                	xchg   ax,ax
c0013f18:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f1e:	85 c0                	test   eax,eax
c0013f20:	0f 84 b6 00 00 00    	je     c0013fdc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013f26:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013f29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f2d:	31 c9                	xor    ecx,ecx
c0013f2f:	eb 17                	jmp    c0013f48 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013f31:	8d 76 00             	lea    esi,[esi+0x0]
c0013f34:	41                   	inc    ecx
c0013f35:	83 f9 10             	cmp    ecx,0x10
c0013f38:	0f 84 9e 00 00 00    	je     c0013fdc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013f3e:	66 90                	xchg   ax,ax
c0013f40:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f46:	66 90                	xchg   ax,ax
c0013f48:	31 d2                	xor    edx,edx
c0013f4a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013f51:	d3 fa                	sar    edx,cl
c0013f53:	83 e2 01             	and    edx,0x1
c0013f56:	74 dc                	je     c0013f34 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f58:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013f5b:	01 d2                	add    edx,edx
c0013f5d:	01 ca                	add    edx,ecx
c0013f5f:	8d 14 92             	lea    edx,[edx+edx*4]
c0013f62:	01 d0                	add    eax,edx
c0013f64:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013f6a:	83 fd 07             	cmp    ebp,0x7
c0013f6d:	75 c5                	jne    c0013f34 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f6f:	05 40 02 00 00       	add    eax,0x240
c0013f74:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013f77:	83 fd ff             	cmp    ebp,0xffffffff
c0013f7a:	0f 8c f0 00 00 00    	jl     c0014070 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013f80:	0f 84 ae 01 00 00    	je     c0014134 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013f86:	85 ed                	test   ebp,ebp
c0013f88:	0f 84 92 01 00 00    	je     c0014120 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013f8e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013f90:	75 a2                	jne    c0013f34 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f92:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f9c:	01 d0                	add    eax,edx
c0013f9e:	66 90                	xchg   ax,ax
c0013fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013fa4:	83 ec 0c             	sub    esp,0xc
c0013fa7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013fad:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fb0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013fb6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013fbd:	50                   	push   eax
c0013fbe:	e8 1d fe ff ff       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c0013fc3:	83 c4 10             	add    esp,0x10
c0013fc6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013fc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fcd:	89 f7                	mov    edi,esi
c0013fcf:	41                   	inc    ecx
c0013fd0:	83 f9 10             	cmp    ecx,0x10
c0013fd3:	0f 85 67 ff ff ff    	jne    c0013f40 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fdc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013fe2:	85 c0                	test   eax,eax
c0013fe4:	74 62                	je     c0014048 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013fe6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013fec:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013ff2:	74 54                	je     c0014048 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013ff4:	83 ec 0c             	sub    esp,0xc
c0013ff7:	68 64 3e 02 c0       	push   0xc0023e64
c0013ffc:	e8 eb 87 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014001:	c7 04 24 64 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e64
c0014008:	89 c7                	mov    edi,eax
c001400a:	e8 c1 87 00 00       	call   c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001400f:	83 c4 10             	add    esp,0x10
c0014012:	84 c0                	test   al,al
c0014014:	0f 84 ce 00 00 00    	je     c00140e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001401a:	66 90                	xchg   ax,ax
c001401c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001401f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014025:	85 d2                	test   edx,edx
c0014027:	74 0f                	je     c0014038 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014029:	83 ec 0c             	sub    esp,0xc
c001402c:	8b 02                	mov    eax,DWORD PTR [edx]
c001402e:	52                   	push   edx
c001402f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014032:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014035:	83 c4 10             	add    esp,0x10
c0014038:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0014042:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014045:	8d 76 00             	lea    esi,[esi+0x0]
c0014048:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001404e:	85 db                	test   ebx,ebx
c0014050:	74 16                	je     c0014068 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014052:	83 ec 0c             	sub    esp,0xc
c0014055:	53                   	push   ebx
c0014056:	e8 77 5d ff ff       	call   c0009dd2 <VAS::~VAS()>
c001405b:	58                   	pop    eax
c001405c:	5a                   	pop    edx
c001405d:	6a 14                	push   0x14
c001405f:	53                   	push   ebx
c0014060:	e8 99 69 ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c0014065:	83 c4 10             	add    esp,0x10
c0014068:	83 c4 1c             	add    esp,0x1c
c001406b:	5b                   	pop    ebx
c001406c:	5e                   	pop    esi
c001406d:	5f                   	pop    edi
c001406e:	5d                   	pop    ebp
c001406f:	c3                   	ret    
c0014070:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014074:	83 ec 0c             	sub    esp,0xc
c0014077:	68 78 eb 01 c0       	push   0xc001eb78
c001407c:	e8 42 c6 ff ff       	call   c00106c3 <KePanic(char const*)>
c0014081:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014084:	83 c4 10             	add    esp,0x10
c0014087:	89 f7                	mov    edi,esi
c0014089:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001408d:	e9 a2 fe ff ff       	jmp    c0013f34 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014092:	66 90                	xchg   ax,ax
c0014094:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001409a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00140a0:	75 1e                	jne    c00140c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00140a2:	83 ec 0c             	sub    esp,0xc
c00140a5:	68 e0 eb 01 c0       	push   0xc001ebe0
c00140aa:	e8 45 6a ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c00140af:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00140b6:	e8 5d fa ff ff       	call   c0013b18 <blockTask(TaskState)>
c00140bb:	83 c4 10             	add    esp,0x10
c00140be:	66 90                	xchg   ax,ax
c00140c0:	83 ec 08             	sub    esp,0x8
c00140c3:	56                   	push   esi
c00140c4:	68 64 3e 02 c0       	push   0xc0023e64
c00140c9:	e8 de 87 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00140ce:	c7 04 24 64 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e64
c00140d5:	e8 12 87 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140da:	83 c4 10             	add    esp,0x10
c00140dd:	39 f8                	cmp    eax,edi
c00140df:	0f 84 37 ff ff ff    	je     c001401c <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c00140e5:	8d 76 00             	lea    esi,[esi+0x0]
c00140e8:	83 ec 0c             	sub    esp,0xc
c00140eb:	68 64 3e 02 c0       	push   0xc0023e64
c00140f0:	e8 f7 86 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140f5:	c7 04 24 64 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e64
c00140fc:	89 c6                	mov    esi,eax
c00140fe:	e8 f1 86 00 00       	call   c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014103:	83 c4 10             	add    esp,0x10
c0014106:	39 f3                	cmp    ebx,esi
c0014108:	74 b6                	je     c00140c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001410a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001410d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014110:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014116:	75 a8                	jne    c00140c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014118:	e9 77 ff ff ff       	jmp    c0014094 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c001411d:	8d 76 00             	lea    esi,[esi+0x0]
c0014120:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014124:	83 ec 0c             	sub    esp,0xc
c0014127:	68 ac eb 01 c0       	push   0xc001ebac
c001412c:	e9 4b ff ff ff       	jmp    c001407c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014131:	8d 76 00             	lea    esi,[esi+0x0]
c0014134:	8b 36                	mov    esi,DWORD PTR [esi]
c0014136:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001413a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001413d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014140:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014146:	01 d7                	add    edi,edx
c0014148:	89 f8                	mov    eax,edi
c001414a:	e9 51 fe ff ff       	jmp    c0013fa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001414f:	90                   	nop

c0014150 <cleanerTaskFunction(void*)>:
c0014150:	53                   	push   ebx
c0014151:	83 ec 08             	sub    esp,0x8
c0014154:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0014159:	48                   	dec    eax
c001415a:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c001415f:	75 03                	jne    c0014164 <cleanerTaskFunction(void*)+0x14>
c0014161:	fb                   	sti    
c0014162:	66 90                	xchg   ax,ax
c0014164:	fa                   	cli    
c0014165:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c001416a:	80 3d 2c 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e2c,0x0
c0014171:	8d 50 01             	lea    edx,[eax+0x1]
c0014174:	89 15 48 3e 02 c0    	mov    DWORD PTR ds:0xc0023e48,edx
c001417a:	0f 84 ac 00 00 00    	je     c001422c <cleanerTaskFunction(void*)+0xdc>
c0014180:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0014185:	85 c0                	test   eax,eax
c0014187:	75 03                	jne    c001418c <cleanerTaskFunction(void*)+0x3c>
c0014189:	fb                   	sti    
c001418a:	66 90                	xchg   ax,ax
c001418c:	c6 05 2c 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e2c,0x0
c0014193:	fa                   	cli    
c0014194:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c001419a:	ff 05 44 3e 02 c0    	inc    DWORD PTR ds:0xc0023e44
c00141a0:	fa                   	cli    
c00141a1:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c00141a7:	eb 2b                	jmp    c00141d4 <cleanerTaskFunction(void*)+0x84>
c00141a9:	8d 76 00             	lea    esi,[esi+0x0]
c00141ac:	83 ec 0c             	sub    esp,0xc
c00141af:	68 4c 3e 02 c0       	push   0xc0023e4c
c00141b4:	e8 33 86 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00141b9:	c7 04 24 4c 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e4c
c00141c0:	89 c3                	mov    ebx,eax
c00141c2:	e8 2d 86 00 00       	call   c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00141c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141ca:	e8 b5 fc ff ff       	call   c0013e84 <cleanupTerminatedTask(ThreadControlBlock*)>
c00141cf:	83 c4 10             	add    esp,0x10
c00141d2:	66 90                	xchg   ax,ax
c00141d4:	83 ec 0c             	sub    esp,0xc
c00141d7:	68 4c 3e 02 c0       	push   0xc0023e4c
c00141dc:	e8 ef 85 00 00       	call   c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00141e1:	83 c4 10             	add    esp,0x10
c00141e4:	84 c0                	test   al,al
c00141e6:	74 c4                	je     c00141ac <cleanerTaskFunction(void*)+0x5c>
c00141e8:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c00141ed:	48                   	dec    eax
c00141ee:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c00141f3:	75 03                	jne    c00141f8 <cleanerTaskFunction(void*)+0xa8>
c00141f5:	fb                   	sti    
c00141f6:	66 90                	xchg   ax,ax
c00141f8:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c00141fd:	48                   	dec    eax
c00141fe:	a3 44 3e 02 c0       	mov    ds:0xc0023e44,eax
c0014203:	0f 85 4b ff ff ff    	jne    c0014154 <cleanerTaskFunction(void*)+0x4>
c0014209:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c001420e:	85 c0                	test   eax,eax
c0014210:	0f 84 3e ff ff ff    	je     c0014154 <cleanerTaskFunction(void*)+0x4>
c0014216:	c7 05 40 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e40,0x0
c0014220:	e8 f7 f6 ff ff       	call   c001391c <schedule()>
c0014225:	e9 2a ff ff ff       	jmp    c0014154 <cleanerTaskFunction(void*)+0x4>
c001422a:	66 90                	xchg   ax,ax
c001422c:	83 ec 0c             	sub    esp,0xc
c001422f:	6a 02                	push   0x2
c0014231:	e8 ba f8 ff ff       	call   c0013af0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014236:	83 c4 10             	add    esp,0x10
c0014239:	e9 4e ff ff ff       	jmp    c001418c <cleanerTaskFunction(void*)+0x3c>
c001423e:	66 90                	xchg   ax,ax

c0014240 <terminateTask(int)>:
c0014240:	83 ec 14             	sub    esp,0x14
c0014243:	fa                   	cli    
c0014244:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c001424a:	ff 05 44 3e 02 c0    	inc    DWORD PTR ds:0xc0023e44
c0014250:	fa                   	cli    
c0014251:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0014257:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001425b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014260:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014263:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014268:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001426b:	50                   	push   eax
c001426c:	68 4c 3e 02 c0       	push   0xc0023e4c
c0014271:	e8 36 86 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001427b:	83 c4 10             	add    esp,0x10
c001427e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014285:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c001428a:	85 c0                	test   eax,eax
c001428c:	74 5e                	je     c00142ec <terminateTask(int)+0xac>
c001428e:	83 ec 0c             	sub    esp,0xc
c0014291:	c6 05 2c 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e2c,0x1
c0014298:	50                   	push   eax
c0014299:	e8 42 fb ff ff       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c001429e:	83 c4 10             	add    esp,0x10
c00142a1:	8d 76 00             	lea    esi,[esi+0x0]
c00142a4:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c00142a9:	48                   	dec    eax
c00142aa:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c00142af:	75 03                	jne    c00142b4 <terminateTask(int)+0x74>
c00142b1:	fb                   	sti    
c00142b2:	66 90                	xchg   ax,ax
c00142b4:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c00142b9:	48                   	dec    eax
c00142ba:	a3 44 3e 02 c0       	mov    ds:0xc0023e44,eax
c00142bf:	75 0b                	jne    c00142cc <terminateTask(int)+0x8c>
c00142c1:	83 3d 40 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e40,0x0
c00142c8:	75 36                	jne    c0014300 <terminateTask(int)+0xc0>
c00142ca:	66 90                	xchg   ax,ax
c00142cc:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c00142d1:	48                   	dec    eax
c00142d2:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c00142d7:	75 03                	jne    c00142dc <terminateTask(int)+0x9c>
c00142d9:	fb                   	sti    
c00142da:	66 90                	xchg   ax,ax
c00142dc:	fa                   	cli    
c00142dd:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c00142e3:	90                   	nop
c00142e4:	e8 33 f6 ff ff       	call   c001391c <schedule()>
c00142e9:	eb e1                	jmp    c00142cc <terminateTask(int)+0x8c>
c00142eb:	90                   	nop
c00142ec:	83 ec 0c             	sub    esp,0xc
c00142ef:	68 dc ea 01 c0       	push   0xc001eadc
c00142f4:	e8 fb 67 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c00142f9:	83 c4 10             	add    esp,0x10
c00142fc:	eb a6                	jmp    c00142a4 <terminateTask(int)+0x64>
c00142fe:	66 90                	xchg   ax,ax
c0014300:	c7 05 40 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e40,0x0
c001430a:	eb d8                	jmp    c00142e4 <terminateTask(int)+0xa4>

c001430c <Thr::terminateFromIRQ(int)>:
c001430c:	83 ec 18             	sub    esp,0x18
c001430f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014313:	50                   	push   eax
c0014314:	e8 27 ff ff ff       	call   c0014240 <terminateTask(int)>
c0014319:	90                   	nop
c001431a:	66 90                	xchg   ax,ax

c001431c <Semaphore::release()>:
c001431c:	83 ec 0c             	sub    esp,0xc
c001431f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014323:	fa                   	cli    
c0014324:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c0014329:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c001432f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014332:	89 0d 44 3e 02 c0    	mov    DWORD PTR ds:0xc0023e44,ecx
c0014338:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001433b:	85 c9                	test   ecx,ecx
c001433d:	74 41                	je     c0014380 <Semaphore::release()+0x64>
c001433f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014342:	83 ec 0c             	sub    esp,0xc
c0014345:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014348:	51                   	push   ecx
c0014349:	e8 92 fa ff ff       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c001434e:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c0014353:	83 c4 10             	add    esp,0x10
c0014356:	48                   	dec    eax
c0014357:	90                   	nop
c0014358:	a3 44 3e 02 c0       	mov    ds:0xc0023e44,eax
c001435d:	85 c0                	test   eax,eax
c001435f:	75 0b                	jne    c001436c <Semaphore::release()+0x50>
c0014361:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c0014366:	85 c0                	test   eax,eax
c0014368:	75 1e                	jne    c0014388 <Semaphore::release()+0x6c>
c001436a:	66 90                	xchg   ax,ax
c001436c:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0014371:	48                   	dec    eax
c0014372:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0014377:	75 03                	jne    c001437c <Semaphore::release()+0x60>
c0014379:	fb                   	sti    
c001437a:	66 90                	xchg   ax,ax
c001437c:	83 c4 0c             	add    esp,0xc
c001437f:	c3                   	ret    
c0014380:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0014383:	eb d3                	jmp    c0014358 <Semaphore::release()+0x3c>
c0014385:	8d 76 00             	lea    esi,[esi+0x0]
c0014388:	c7 05 40 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e40,0x0
c0014392:	e8 85 f5 ff ff       	call   c001391c <schedule()>
c0014397:	eb d3                	jmp    c001436c <Semaphore::release()+0x50>
c0014399:	8d 76 00             	lea    esi,[esi+0x0]

c001439c <__static_initialization_and_destruction_0(int, int)>:
c001439c:	83 ec 0c             	sub    esp,0xc
c001439f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00143a4:	0f 85 8e 00 00 00    	jne    c0014438 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00143aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00143b2:	0f 85 80 00 00 00    	jne    c0014438 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00143b8:	83 ec 0c             	sub    esp,0xc
c00143bb:	68 64 3e 02 c0       	push   0xc0023e64
c00143c0:	e8 93 87 00 00       	call   c001cb58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143c5:	83 c4 10             	add    esp,0x10
c00143c8:	83 ec 04             	sub    esp,0x4
c00143cb:	68 14 f7 01 c0       	push   0xc001f714
c00143d0:	68 64 3e 02 c0       	push   0xc0023e64
c00143d5:	68 08 cb 01 c0       	push   0xc001cb08
c00143da:	e8 cf 65 ff ff       	call   c000a9ae <__cxa_atexit>
c00143df:	83 c4 10             	add    esp,0x10
c00143e2:	83 ec 0c             	sub    esp,0xc
c00143e5:	68 58 3e 02 c0       	push   0xc0023e58
c00143ea:	e8 69 87 00 00       	call   c001cb58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143ef:	83 c4 10             	add    esp,0x10
c00143f2:	83 ec 04             	sub    esp,0x4
c00143f5:	68 14 f7 01 c0       	push   0xc001f714
c00143fa:	68 58 3e 02 c0       	push   0xc0023e58
c00143ff:	68 08 cb 01 c0       	push   0xc001cb08
c0014404:	e8 a5 65 ff ff       	call   c000a9ae <__cxa_atexit>
c0014409:	83 c4 10             	add    esp,0x10
c001440c:	83 ec 0c             	sub    esp,0xc
c001440f:	68 4c 3e 02 c0       	push   0xc0023e4c
c0014414:	e8 3f 87 00 00       	call   c001cb58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014419:	83 c4 10             	add    esp,0x10
c001441c:	83 ec 04             	sub    esp,0x4
c001441f:	68 14 f7 01 c0       	push   0xc001f714
c0014424:	68 4c 3e 02 c0       	push   0xc0023e4c
c0014429:	68 08 cb 01 c0       	push   0xc001cb08
c001442e:	e8 7b 65 ff ff       	call   c000a9ae <__cxa_atexit>
c0014433:	83 c4 10             	add    esp,0x10
c0014436:	66 90                	xchg   ax,ax
c0014438:	90                   	nop
c0014439:	83 c4 0c             	add    esp,0xc
c001443c:	c3                   	ret    
c001443d:	8d 76 00             	lea    esi,[esi+0x0]

c0014440 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014440:	83 ec 0c             	sub    esp,0xc
c0014443:	83 ec 08             	sub    esp,0x8
c0014446:	68 ff ff 00 00       	push   0xffff
c001444b:	6a 01                	push   0x1
c001444d:	e8 4a ff ff ff       	call   c001439c <__static_initialization_and_destruction_0(int, int)>
c0014452:	83 c4 10             	add    esp,0x10
c0014455:	83 c4 0c             	add    esp,0xc
c0014458:	c3                   	ret    

c0014459 <Vm::inbv(unsigned short)>:
c0014459:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001445d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014462:	75 06                	jne    c001446a <Vm::inbv(unsigned short)+0x11>
c0014464:	a0 ac 3e 02 c0       	mov    al,ds:0xc0023eac
c0014469:	c3                   	ret    
c001446a:	ec                   	in     al,dx
c001446b:	c3                   	ret    

c001446c <Vm::outbv(unsigned short, unsigned char)>:
c001446c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014474:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014479:	75 25                	jne    c00144a0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001447b:	8b 0d ac 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023eac
c0014481:	8d 51 01             	lea    edx,[ecx+0x1]
c0014484:	88 81 c0 3e 02 c0    	mov    BYTE PTR [ecx-0x3ffdc140],al
c001448a:	89 15 ac 3e 02 c0    	mov    DWORD PTR ds:0xc0023eac,edx
c0014490:	83 fa 20             	cmp    edx,0x20
c0014493:	75 0c                	jne    c00144a1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014495:	c7 05 ac 3e 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023eac,0x1f
c001449f:	c3                   	ret    
c00144a0:	ee                   	out    dx,al
c00144a1:	c3                   	ret    

c00144a2 <Vm::realToLinear(unsigned short, unsigned short)>:
c00144a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00144a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00144ac:	c1 e0 04             	shl    eax,0x4
c00144af:	01 d0                	add    eax,edx
c00144b1:	c3                   	ret    

c00144b2 <Vm::getSegment(unsigned int)>:
c00144b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144b6:	c1 e8 10             	shr    eax,0x10
c00144b9:	c3                   	ret    

c00144ba <Vm::getOffset(unsigned int)>:
c00144ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144be:	c3                   	ret    

c00144bf <Vm::mainloop2()>:
c00144bf:	83 ec 18             	sub    esp,0x18
c00144c2:	fa                   	cli    
c00144c3:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c00144c9:	6a 02                	push   0x2
c00144cb:	c6 05 a5 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ea5,0x1
c00144d2:	e8 19 f6 ff ff       	call   c0013af0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00144d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144dc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00144e0:	52                   	push   edx
c00144e1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00144e5:	52                   	push   edx
c00144e6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00144ea:	52                   	push   edx
c00144eb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00144ef:	50                   	push   eax
c00144f0:	e8 3a bd fe ff       	call   c000022f <goToVM86>
c00144f5:	83 c4 2c             	add    esp,0x2c
c00144f8:	c3                   	ret    

c00144f9 <Vm::mainVm8086Loop(void*)>:
c00144f9:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c00144fe:	48                   	dec    eax
c00144ff:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0014504:	75 01                	jne    c0014507 <Vm::mainVm8086Loop(void*)+0xe>
c0014506:	fb                   	sti    
c0014507:	eb b6                	jmp    c00144bf <Vm::mainloop2()>

c0014509 <Vm::mainloop3(unsigned long)>:
c0014509:	83 ec 18             	sub    esp,0x18
c001450c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014510:	fa                   	cli    
c0014511:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0014517:	6a 02                	push   0x2
c0014519:	c6 05 a4 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ea4,0x1
c0014520:	a3 a0 3e 02 c0       	mov    ds:0xc0023ea0,eax
c0014525:	e8 c6 f5 ff ff       	call   c0013af0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001452a:	83 c4 1c             	add    esp,0x1c
c001452d:	eb 90                	jmp    c00144bf <Vm::mainloop2()>

c001452f <Vm::initialise8086()>:
c001452f:	83 ec 0c             	sub    esp,0xc
c0014532:	68 80 00 00 00       	push   0x80
c0014537:	6a 00                	push   0x0
c0014539:	68 f9 44 01 c0       	push   0xc00144f9
c001453e:	ff 35 70 3e 02 c0    	push   DWORD PTR ds:0xc0023e70
c0014544:	e8 b3 f1 ff ff       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c0014549:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014550:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0014555:	68 00 01 00 00       	push   0x100
c001455a:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c001455f:	6a 00                	push   0x0
c0014561:	6a 00                	push   0x0
c0014563:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014569:	e8 c2 5c ff ff       	call   c000a230 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001456e:	83 c4 2c             	add    esp,0x2c
c0014571:	c3                   	ret    

c0014572 <Vm::finish8086()>:
c0014572:	53                   	push   ebx
c0014573:	83 ec 08             	sub    esp,0x8
c0014576:	fa                   	cli    
c0014577:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c001457d:	80 3d a4 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ea4,0x0
c0014584:	75 15                	jne    c001459b <Vm::finish8086()+0x29>
c0014586:	e8 91 f3 ff ff       	call   c001391c <schedule()>
c001458b:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0014590:	48                   	dec    eax
c0014591:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0014596:	75 de                	jne    c0014576 <Vm::finish8086()+0x4>
c0014598:	fb                   	sti    
c0014599:	eb db                	jmp    c0014576 <Vm::finish8086()+0x4>
c001459b:	83 ec 0c             	sub    esp,0xc
c001459e:	8b 1d a0 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ea0
c00145a4:	ff 35 a8 3e 02 c0    	push   DWORD PTR ds:0xc0023ea8
c00145aa:	c6 05 a4 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ea4,0x0
c00145b1:	e8 2a f8 ff ff       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c00145b6:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c00145bb:	83 c4 10             	add    esp,0x10
c00145be:	8d 50 ff             	lea    edx,[eax-0x1]
c00145c1:	89 15 48 3e 02 c0    	mov    DWORD PTR ds:0xc0023e48,edx
c00145c7:	85 d2                	test   edx,edx
c00145c9:	75 01                	jne    c00145cc <Vm::finish8086()+0x5a>
c00145cb:	fb                   	sti    
c00145cc:	89 d8                	mov    eax,ebx
c00145ce:	83 c4 08             	add    esp,0x8
c00145d1:	5b                   	pop    ebx
c00145d2:	c3                   	ret    

c00145d3 <Vm::getOutput8086(unsigned char*)>:
c00145d3:	57                   	push   edi
c00145d4:	8b 0d ac 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023eac
c00145da:	56                   	push   esi
c00145db:	be c0 3e 02 c0       	mov    esi,0xc0023ec0
c00145e0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00145e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145e6:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c00145eb:	5e                   	pop    esi
c00145ec:	c7 05 ac 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eac,0x0
c00145f6:	5f                   	pop    edi
c00145f7:	c3                   	ret    

c00145f8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00145f8:	55                   	push   ebp
c00145f9:	57                   	push   edi
c00145fa:	56                   	push   esi
c00145fb:	53                   	push   ebx
c00145fc:	83 ec 0c             	sub    esp,0xc
c00145ff:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014603:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014607:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001460b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001460f:	fa                   	cli    
c0014610:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c0014616:	80 3d a5 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ea5,0x0
c001461d:	75 15                	jne    c0014634 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001461f:	e8 f8 f2 ff ff       	call   c001391c <schedule()>
c0014624:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0014629:	48                   	dec    eax
c001462a:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c001462f:	75 de                	jne    c001460f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014631:	fb                   	sti    
c0014632:	eb db                	jmp    c001460f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014634:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0014639:	c7 05 ac 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eac,0x0
c0014643:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014647:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001464b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001464f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014653:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014657:	0f b7 ff             	movzx  edi,di
c001465a:	0f b7 f6             	movzx  esi,si
c001465d:	50                   	push   eax
c001465e:	6a 20                	push   0x20
c0014660:	6a 00                	push   0x0
c0014662:	68 c0 3e 02 c0       	push   0xc0023ec0
c0014667:	e8 84 be fe ff       	call   c00004f0 <memset>
c001466c:	5a                   	pop    edx
c001466d:	59                   	pop    ecx
c001466e:	57                   	push   edi
c001466f:	56                   	push   esi
c0014670:	e8 2d fe ff ff       	call   c00144a2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014675:	83 c4 10             	add    esp,0x10
c0014678:	89 c7                	mov    edi,eax
c001467a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001467e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014682:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014684:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0014689:	c6 05 a5 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ea5,0x0
c0014690:	48                   	dec    eax
c0014691:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0014696:	75 01                	jne    c0014699 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014698:	fb                   	sti    
c0014699:	83 ec 0c             	sub    esp,0xc
c001469c:	ff 35 a8 3e 02 c0    	push   DWORD PTR ds:0xc0023ea8
c00146a2:	e8 39 f7 ff ff       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c00146a7:	83 c4 1c             	add    esp,0x1c
c00146aa:	b0 01                	mov    al,0x1
c00146ac:	5b                   	pop    ebx
c00146ad:	5e                   	pop    esi
c00146ae:	5f                   	pop    edi
c00146af:	5d                   	pop    ebp
c00146b0:	c3                   	ret    

c00146b1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00146b1:	55                   	push   ebp
c00146b2:	57                   	push   edi
c00146b3:	56                   	push   esi
c00146b4:	53                   	push   ebx
c00146b5:	83 ec 2c             	sub    esp,0x2c
c00146b8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00146bc:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00146c0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00146c4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00146c8:	fa                   	cli    
c00146c9:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c00146cf:	0f b6 35 a5 3e 02 c0 	movzx  esi,BYTE PTR ds:0xc0023ea5
c00146d6:	89 f0                	mov    eax,esi
c00146d8:	84 c0                	test   al,al
c00146da:	75 1d                	jne    c00146f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00146dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00146e0:	e8 37 f2 ff ff       	call   c001391c <schedule()>
c00146e5:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c00146ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146ee:	48                   	dec    eax
c00146ef:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c00146f4:	75 d2                	jne    c00146c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00146f6:	fb                   	sti    
c00146f7:	eb cf                	jmp    c00146c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00146f9:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c00146fe:	c7 05 ac 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eac,0x0
c0014708:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001470c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014710:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014714:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014718:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001471c:	50                   	push   eax
c001471d:	6a 20                	push   0x20
c001471f:	6a 00                	push   0x0
c0014721:	68 c0 3e 02 c0       	push   0xc0023ec0
c0014726:	e8 c5 bd fe ff       	call   c00004f0 <memset>
c001472b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014732:	e8 26 37 ff ff       	call   c0007e5d <malloc>
c0014737:	83 c4 0c             	add    esp,0xc
c001473a:	89 c3                	mov    ebx,eax
c001473c:	ff 35 70 3e 02 c0    	push   DWORD PTR ds:0xc0023e70
c0014742:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014746:	50                   	push   eax
c0014747:	e8 1e 69 ff ff       	call   c000b06a <File::File(char const*, Process*)>
c001474c:	83 c4 10             	add    esp,0x10
c001474f:	85 db                	test   ebx,ebx
c0014751:	75 0a                	jne    c001475d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014753:	83 ec 0c             	sub    esp,0xc
c0014756:	68 08 ec 01 c0       	push   0xc001ec08
c001475b:	eb 3e                	jmp    c001479b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001475d:	50                   	push   eax
c001475e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014762:	50                   	push   eax
c0014763:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014767:	50                   	push   eax
c0014768:	53                   	push   ebx
c0014769:	e8 68 6c ff ff       	call   c000b3d6 <File::stat(unsigned long long*, bool*)>
c001476e:	83 c4 10             	add    esp,0x10
c0014771:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014776:	74 0a                	je     c0014782 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014778:	83 ec 0c             	sub    esp,0xc
c001477b:	68 1c ec 01 c0       	push   0xc001ec1c
c0014780:	eb 19                	jmp    c001479b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014782:	51                   	push   ecx
c0014783:	51                   	push   ecx
c0014784:	6a 01                	push   0x1
c0014786:	53                   	push   ebx
c0014787:	e8 9e 69 ff ff       	call   c000b12a <File::open(FileOpenMode)>
c001478c:	83 c4 10             	add    esp,0x10
c001478f:	85 c0                	test   eax,eax
c0014791:	74 24                	je     c00147b7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014793:	83 ec 0c             	sub    esp,0xc
c0014796:	68 35 ec 01 c0       	push   0xc001ec35
c001479b:	e8 23 bf ff ff       	call   c00106c3 <KePanic(char const*)>
c00147a0:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c00147a5:	83 c4 10             	add    esp,0x10
c00147a8:	48                   	dec    eax
c00147a9:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c00147ae:	85 c0                	test   eax,eax
c00147b0:	75 01                	jne    c00147b3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00147b2:	fb                   	sti    
c00147b3:	31 f6                	xor    esi,esi
c00147b5:	eb 58                	jmp    c001480f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00147b7:	0f b7 ed             	movzx  ebp,bp
c00147ba:	50                   	push   eax
c00147bb:	0f b7 ff             	movzx  edi,di
c00147be:	50                   	push   eax
c00147bf:	55                   	push   ebp
c00147c0:	57                   	push   edi
c00147c1:	e8 dc fc ff ff       	call   c00144a2 <Vm::realToLinear(unsigned short, unsigned short)>
c00147c6:	5a                   	pop    edx
c00147c7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00147c9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00147cd:	51                   	push   ecx
c00147ce:	50                   	push   eax
c00147cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00147d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00147d7:	53                   	push   ebx
c00147d8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00147db:	83 c4 14             	add    esp,0x14
c00147de:	53                   	push   ebx
c00147df:	e8 a4 69 ff ff       	call   c000b188 <File::close()>
c00147e4:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c00147e9:	83 c4 10             	add    esp,0x10
c00147ec:	48                   	dec    eax
c00147ed:	c6 05 a5 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ea5,0x0
c00147f4:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c00147f9:	85 c0                	test   eax,eax
c00147fb:	75 01                	jne    c00147fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00147fd:	fb                   	sti    
c00147fe:	83 ec 0c             	sub    esp,0xc
c0014801:	ff 35 a8 3e 02 c0    	push   DWORD PTR ds:0xc0023ea8
c0014807:	e8 d4 f5 ff ff       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c001480c:	83 c4 10             	add    esp,0x10
c001480f:	83 c4 2c             	add    esp,0x2c
c0014812:	89 f0                	mov    eax,esi
c0014814:	5b                   	pop    ebx
c0014815:	5e                   	pop    esi
c0014816:	5f                   	pop    edi
c0014817:	5d                   	pop    ebp
c0014818:	c3                   	ret    

c0014819 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014819:	57                   	push   edi
c001481a:	56                   	push   esi
c001481b:	53                   	push   ebx
c001481c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014824:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014828:	83 e8 06             	sub    eax,0x6
c001482b:	0f b7 c0             	movzx  eax,ax
c001482e:	50                   	push   eax
c001482f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014834:	50                   	push   eax
c0014835:	e8 68 fc ff ff       	call   c00144a2 <Vm::realToLinear(unsigned short, unsigned short)>
c001483a:	5a                   	pop    edx
c001483b:	5e                   	pop    esi
c001483c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001483f:	8d 56 fa             	lea    edx,[esi-0x6]
c0014842:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014848:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001484b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001484e:	83 c2 02             	add    edx,0x2
c0014851:	66 89 10             	mov    WORD PTR [eax],dx
c0014854:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014857:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001485b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001485e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014862:	89 d6                	mov    esi,edx
c0014864:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001486a:	66 81 e6 ff fd       	and    si,0xfdff
c001486f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014873:	74 07                	je     c001487c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014875:	89 d6                	mov    esi,edx
c0014877:	66 81 ce 00 02       	or     si,0x200
c001487c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014880:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014885:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014889:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014891:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014894:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001489c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001489f:	5b                   	pop    ebx
c00148a0:	5e                   	pop    esi
c00148a1:	5f                   	pop    edi
c00148a2:	c3                   	ret    

c00148a3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00148a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148ad:	c1 e0 04             	shl    eax,0x4
c00148b0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00148b3:	c3                   	ret    

c00148b4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00148b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148be:	c1 e0 04             	shl    eax,0x4
c00148c1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00148c5:	c3                   	ret    

c00148c6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00148c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148d0:	c1 e0 04             	shl    eax,0x4
c00148d3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00148d6:	c3                   	ret    

c00148d7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00148d7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148dc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148e1:	c1 e0 04             	shl    eax,0x4
c00148e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148e8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00148eb:	c3                   	ret    

c00148ec <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00148ec:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148f1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148f6:	c1 e0 04             	shl    eax,0x4
c00148f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148fd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014901:	c3                   	ret    

c0014902 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014902:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014907:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001490c:	c1 e0 04             	shl    eax,0x4
c001490f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014913:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014916:	c3                   	ret    

c0014917 <Vm::faultHandler(regs*)>:
c0014917:	55                   	push   ebp
c0014918:	57                   	push   edi
c0014919:	56                   	push   esi
c001491a:	53                   	push   ebx
c001491b:	83 ec 1c             	sub    esp,0x1c
c001491e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014922:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014925:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014929:	0f b7 f8             	movzx  edi,ax
c001492c:	52                   	push   edx
c001492d:	0f b7 c0             	movzx  eax,ax
c0014930:	50                   	push   eax
c0014931:	e8 6c fb ff ff       	call   c00144a2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014936:	5a                   	pop    edx
c0014937:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001493a:	59                   	pop    ecx
c001493b:	89 c1                	mov    ecx,eax
c001493d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014940:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014944:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014949:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001494d:	0f b7 c5             	movzx  eax,bp
c0014950:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014954:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014958:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001495c:	e8 41 fb ff ff       	call   c00144a2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014961:	5e                   	pop    esi
c0014962:	be 06 00 00 00       	mov    esi,0x6
c0014967:	5a                   	pop    edx
c0014968:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001496d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014972:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014975:	80 fa 9d             	cmp    dl,0x9d
c0014978:	0f 84 2c 02 00 00    	je     c0014baa <Vm::faultHandler(regs*)+0x293>
c001497e:	0f 87 91 00 00 00    	ja     c0014a15 <Vm::faultHandler(regs*)+0xfe>
c0014984:	80 fa 66             	cmp    dl,0x66
c0014987:	0f 84 98 01 00 00    	je     c0014b25 <Vm::faultHandler(regs*)+0x20e>
c001498d:	77 47                	ja     c00149d6 <Vm::faultHandler(regs*)+0xbf>
c001498f:	80 fa 36             	cmp    dl,0x36
c0014992:	0f 84 80 01 00 00    	je     c0014b18 <Vm::faultHandler(regs*)+0x201>
c0014998:	77 1a                	ja     c00149b4 <Vm::faultHandler(regs*)+0x9d>
c001499a:	80 fa 26             	cmp    dl,0x26
c001499d:	0f 84 4e 01 00 00    	je     c0014af1 <Vm::faultHandler(regs*)+0x1da>
c00149a3:	80 fa 2e             	cmp    dl,0x2e
c00149a6:	0f 85 e2 05 00 00    	jne    c0014f8e <Vm::faultHandler(regs*)+0x677>
c00149ac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149af:	31 f6                	xor    esi,esi
c00149b1:	41                   	inc    ecx
c00149b2:	eb be                	jmp    c0014972 <Vm::faultHandler(regs*)+0x5b>
c00149b4:	80 fa 64             	cmp    dl,0x64
c00149b7:	0f 84 41 01 00 00    	je     c0014afe <Vm::faultHandler(regs*)+0x1e7>
c00149bd:	0f 87 48 01 00 00    	ja     c0014b0b <Vm::faultHandler(regs*)+0x1f4>
c00149c3:	80 fa 3e             	cmp    dl,0x3e
c00149c6:	0f 85 c2 05 00 00    	jne    c0014f8e <Vm::faultHandler(regs*)+0x677>
c00149cc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149cf:	be 01 00 00 00       	mov    esi,0x1
c00149d4:	eb db                	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c00149d6:	80 fa 6d             	cmp    dl,0x6d
c00149d9:	0f 84 ec 02 00 00    	je     c0014ccb <Vm::faultHandler(regs*)+0x3b4>
c00149df:	77 17                	ja     c00149f8 <Vm::faultHandler(regs*)+0xe1>
c00149e1:	80 fa 67             	cmp    dl,0x67
c00149e4:	0f 84 48 01 00 00    	je     c0014b32 <Vm::faultHandler(regs*)+0x21b>
c00149ea:	80 fa 6c             	cmp    dl,0x6c
c00149ed:	0f 84 69 02 00 00    	je     c0014c5c <Vm::faultHandler(regs*)+0x345>
c00149f3:	e9 96 05 00 00       	jmp    c0014f8e <Vm::faultHandler(regs*)+0x677>
c00149f8:	80 fa 6f             	cmp    dl,0x6f
c00149fb:	0f 84 f4 03 00 00    	je     c0014df5 <Vm::faultHandler(regs*)+0x4de>
c0014a01:	0f 82 59 03 00 00    	jb     c0014d60 <Vm::faultHandler(regs*)+0x449>
c0014a07:	80 fa 9c             	cmp    dl,0x9c
c0014a0a:	0f 84 2f 01 00 00    	je     c0014b3f <Vm::faultHandler(regs*)+0x228>
c0014a10:	e9 79 05 00 00       	jmp    c0014f8e <Vm::faultHandler(regs*)+0x677>
c0014a15:	80 fa ec             	cmp    dl,0xec
c0014a18:	0f 84 14 05 00 00    	je     c0014f32 <Vm::faultHandler(regs*)+0x61b>
c0014a1e:	77 7b                	ja     c0014a9b <Vm::faultHandler(regs*)+0x184>
c0014a20:	80 fa e4             	cmp    dl,0xe4
c0014a23:	0f 84 93 04 00 00    	je     c0014ebc <Vm::faultHandler(regs*)+0x5a5>
c0014a29:	77 53                	ja     c0014a7e <Vm::faultHandler(regs*)+0x167>
c0014a2b:	80 fa cd             	cmp    dl,0xcd
c0014a2e:	0f 84 d9 01 00 00    	je     c0014c0d <Vm::faultHandler(regs*)+0x2f6>
c0014a34:	80 fa cf             	cmp    dl,0xcf
c0014a37:	0f 85 51 05 00 00    	jne    c0014f8e <Vm::faultHandler(regs*)+0x677>
c0014a3d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a40:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014a43:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014a47:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014a4a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014a4e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a54:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a57:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a5b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a61:	66 c1 e8 09          	shr    ax,0x9
c0014a65:	83 e0 01             	and    eax,0x1
c0014a68:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a6b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a6e:	83 c0 06             	add    eax,0x6
c0014a71:	25 ff ff 00 00       	and    eax,0xffff
c0014a76:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014a79:	e9 0c 05 00 00       	jmp    c0014f8a <Vm::faultHandler(regs*)+0x673>
c0014a7e:	80 fa e6             	cmp    dl,0xe6
c0014a81:	0f 84 7f 04 00 00    	je     c0014f06 <Vm::faultHandler(regs*)+0x5ef>
c0014a87:	0f 82 4b 04 00 00    	jb     c0014ed8 <Vm::faultHandler(regs*)+0x5c1>
c0014a8d:	80 fa e7             	cmp    dl,0xe7
c0014a90:	0f 84 87 04 00 00    	je     c0014f1d <Vm::faultHandler(regs*)+0x606>
c0014a96:	e9 f3 04 00 00       	jmp    c0014f8e <Vm::faultHandler(regs*)+0x677>
c0014a9b:	80 fa ef             	cmp    dl,0xef
c0014a9e:	0f 84 d1 04 00 00    	je     c0014f75 <Vm::faultHandler(regs*)+0x65e>
c0014aa4:	77 28                	ja     c0014ace <Vm::faultHandler(regs*)+0x1b7>
c0014aa6:	80 fa ed             	cmp    dl,0xed
c0014aa9:	0f 84 9f 04 00 00    	je     c0014f4e <Vm::faultHandler(regs*)+0x637>
c0014aaf:	80 fa ee             	cmp    dl,0xee
c0014ab2:	0f 85 d6 04 00 00    	jne    c0014f8e <Vm::faultHandler(regs*)+0x677>
c0014ab8:	50                   	push   eax
c0014ab9:	50                   	push   eax
c0014aba:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014abe:	50                   	push   eax
c0014abf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014ac3:	50                   	push   eax
c0014ac4:	e8 a3 f9 ff ff       	call   c001446c <Vm::outbv(unsigned short, unsigned char)>
c0014ac9:	e9 9f 04 00 00       	jmp    c0014f6d <Vm::faultHandler(regs*)+0x656>
c0014ace:	80 fa fa             	cmp    dl,0xfa
c0014ad1:	0f 84 69 01 00 00    	je     c0014c40 <Vm::faultHandler(regs*)+0x329>
c0014ad7:	80 fa fb             	cmp    dl,0xfb
c0014ada:	0f 84 6e 01 00 00    	je     c0014c4e <Vm::faultHandler(regs*)+0x337>
c0014ae0:	80 fa f3             	cmp    dl,0xf3
c0014ae3:	0f 85 a5 04 00 00    	jne    c0014f8e <Vm::faultHandler(regs*)+0x677>
c0014ae9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014aec:	e9 c0 fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014af1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014af4:	be 02 00 00 00       	mov    esi,0x2
c0014af9:	e9 b3 fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014afe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b01:	be 03 00 00 00       	mov    esi,0x3
c0014b06:	e9 a6 fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014b0b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b0e:	be 04 00 00 00       	mov    esi,0x4
c0014b13:	e9 99 fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014b18:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b1b:	be 05 00 00 00       	mov    esi,0x5
c0014b20:	e9 8c fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014b25:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b28:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014b2d:	e9 7f fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014b32:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b35:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014b3a:	e9 72 fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014b3f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014b42:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014b46:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b4b:	74 30                	je     c0014b7d <Vm::faultHandler(regs*)+0x266>
c0014b4d:	83 e9 04             	sub    ecx,0x4
c0014b50:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014b56:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014b5c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014b5f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014b62:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b68:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014b6c:	0f 84 15 04 00 00    	je     c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014b72:	80 ce 02             	or     dh,0x2
c0014b75:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014b78:	e9 0a 04 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014b7d:	83 e9 02             	sub    ecx,0x2
c0014b80:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014b86:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014b89:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014b8d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b93:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014b97:	74 05                	je     c0014b9e <Vm::faultHandler(regs*)+0x287>
c0014b99:	80 ce 02             	or     dh,0x2
c0014b9c:	eb 03                	jmp    c0014ba1 <Vm::faultHandler(regs*)+0x28a>
c0014b9e:	80 e6 fd             	and    dh,0xfd
c0014ba1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014ba5:	e9 dd 03 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014baa:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014baf:	74 2a                	je     c0014bdb <Vm::faultHandler(regs*)+0x2c4>
c0014bb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0014bb3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014bb9:	81 ca 00 02 02 00    	or     edx,0x20200
c0014bbf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014bc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bc4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014bca:	c1 e8 09             	shr    eax,0x9
c0014bcd:	83 e0 01             	and    eax,0x1
c0014bd0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014bd3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014bd6:	83 c0 04             	add    eax,0x4
c0014bd9:	eb 25                	jmp    c0014c00 <Vm::faultHandler(regs*)+0x2e9>
c0014bdb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014bde:	81 ca 00 02 02 00    	or     edx,0x20200
c0014be4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014be7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014bea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014bf0:	66 c1 e8 09          	shr    ax,0x9
c0014bf4:	83 e0 01             	and    eax,0x1
c0014bf7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014bfa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014bfd:	83 c0 02             	add    eax,0x2
c0014c00:	25 ff ff 00 00       	and    eax,0xffff
c0014c05:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014c08:	e9 7a 03 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014c0d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c11:	3c ee                	cmp    al,0xee
c0014c13:	75 10                	jne    c0014c25 <Vm::faultHandler(regs*)+0x30e>
c0014c15:	83 ec 0c             	sub    esp,0xc
c0014c18:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c1b:	e8 e9 f8 ff ff       	call   c0014509 <Vm::mainloop3(unsigned long)>
c0014c20:	e9 4b 03 00 00       	jmp    c0014f70 <Vm::faultHandler(regs*)+0x659>
c0014c25:	83 ec 0c             	sub    esp,0xc
c0014c28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c30:	51                   	push   ecx
c0014c31:	50                   	push   eax
c0014c32:	53                   	push   ebx
c0014c33:	e8 e1 fb ff ff       	call   c0014819 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014c38:	83 c4 20             	add    esp,0x20
c0014c3b:	e9 4a 03 00 00       	jmp    c0014f8a <Vm::faultHandler(regs*)+0x673>
c0014c40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c45:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014c49:	e9 39 03 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014c4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c53:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014c57:	e9 2b 03 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014c5c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014c5f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c64:	74 2b                	je     c0014c91 <Vm::faultHandler(regs*)+0x37a>
c0014c66:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014c6d:	76 22                	jbe    c0014c91 <Vm::faultHandler(regs*)+0x37a>
c0014c6f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c73:	50                   	push   eax
c0014c74:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c78:	50                   	push   eax
c0014c79:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c7d:	50                   	push   eax
c0014c7e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c82:	50                   	push   eax
c0014c83:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c87:	50                   	push   eax
c0014c88:	6a 6c                	push   0x6c
c0014c8a:	6a 6c                	push   0x6c
c0014c8c:	e9 b9 01 00 00       	jmp    c0014e4a <Vm::faultHandler(regs*)+0x533>
c0014c91:	83 ec 0c             	sub    esp,0xc
c0014c94:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c98:	0f b7 f6             	movzx  esi,si
c0014c9b:	50                   	push   eax
c0014c9c:	e8 b8 f7 ff ff       	call   c0014459 <Vm::inbv(unsigned short)>
c0014ca1:	83 c4 0c             	add    esp,0xc
c0014ca4:	0f b6 c0             	movzx  eax,al
c0014ca7:	50                   	push   eax
c0014ca8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014cac:	50                   	push   eax
c0014cad:	56                   	push   esi
c0014cae:	e8 24 fc ff ff       	call   c00148d7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014cb3:	83 c4 10             	add    esp,0x10
c0014cb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014cb9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014cbd:	74 03                	je     c0014cc2 <Vm::faultHandler(regs*)+0x3ab>
c0014cbf:	48                   	dec    eax
c0014cc0:	eb 01                	jmp    c0014cc3 <Vm::faultHandler(regs*)+0x3ac>
c0014cc2:	40                   	inc    eax
c0014cc3:	0f b7 c0             	movzx  eax,ax
c0014cc6:	e9 8d 00 00 00       	jmp    c0014d58 <Vm::faultHandler(regs*)+0x441>
c0014ccb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014cce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014cd1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014cd6:	74 29                	je     c0014d01 <Vm::faultHandler(regs*)+0x3ea>
c0014cd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0014cdd:	76 22                	jbe    c0014d01 <Vm::faultHandler(regs*)+0x3ea>
c0014cdf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014ce3:	50                   	push   eax
c0014ce4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014ce8:	50                   	push   eax
c0014ce9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014ced:	50                   	push   eax
c0014cee:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014cf2:	50                   	push   eax
c0014cf3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014cf7:	50                   	push   eax
c0014cf8:	6a 6d                	push   0x6d
c0014cfa:	6a 6d                	push   0x6d
c0014cfc:	e9 49 01 00 00       	jmp    c0014e4a <Vm::faultHandler(regs*)+0x533>
c0014d01:	0f b7 c8             	movzx  ecx,ax
c0014d04:	0f b7 f6             	movzx  esi,si
c0014d07:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014d0a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d0f:	74 20                	je     c0014d31 <Vm::faultHandler(regs*)+0x41a>
c0014d11:	ed                   	in     eax,dx
c0014d12:	55                   	push   ebp
c0014d13:	50                   	push   eax
c0014d14:	51                   	push   ecx
c0014d15:	56                   	push   esi
c0014d16:	e8 e7 fb ff ff       	call   c0014902 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014d1b:	83 c4 10             	add    esp,0x10
c0014d1e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d21:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d25:	74 05                	je     c0014d2c <Vm::faultHandler(regs*)+0x415>
c0014d27:	83 e8 04             	sub    eax,0x4
c0014d2a:	eb 27                	jmp    c0014d53 <Vm::faultHandler(regs*)+0x43c>
c0014d2c:	83 c0 04             	add    eax,0x4
c0014d2f:	eb 22                	jmp    c0014d53 <Vm::faultHandler(regs*)+0x43c>
c0014d31:	66 ed                	in     ax,dx
c0014d33:	0f b7 c0             	movzx  eax,ax
c0014d36:	57                   	push   edi
c0014d37:	50                   	push   eax
c0014d38:	51                   	push   ecx
c0014d39:	56                   	push   esi
c0014d3a:	e8 ad fb ff ff       	call   c00148ec <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014d3f:	83 c4 10             	add    esp,0x10
c0014d42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d45:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d49:	74 05                	je     c0014d50 <Vm::faultHandler(regs*)+0x439>
c0014d4b:	83 e8 02             	sub    eax,0x2
c0014d4e:	eb 03                	jmp    c0014d53 <Vm::faultHandler(regs*)+0x43c>
c0014d50:	83 c0 02             	add    eax,0x2
c0014d53:	25 ff ff 00 00       	and    eax,0xffff
c0014d58:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014d5b:	e9 27 02 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014d60:	8d 46 ff             	lea    eax,[esi-0x1]
c0014d63:	3c 05                	cmp    al,0x5
c0014d65:	77 24                	ja     c0014d8b <Vm::faultHandler(regs*)+0x474>
c0014d67:	0f b6 c0             	movzx  eax,al
c0014d6a:	ff 24 85 a8 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1358]
c0014d71:	0f b7 fd             	movzx  edi,bp
c0014d74:	eb 15                	jmp    c0014d8b <Vm::faultHandler(regs*)+0x474>
c0014d76:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014d7a:	eb 0f                	jmp    c0014d8b <Vm::faultHandler(regs*)+0x474>
c0014d7c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014d80:	eb 09                	jmp    c0014d8b <Vm::faultHandler(regs*)+0x474>
c0014d82:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014d86:	eb 03                	jmp    c0014d8b <Vm::faultHandler(regs*)+0x474>
c0014d88:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014d8e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d93:	74 29                	je     c0014dbe <Vm::faultHandler(regs*)+0x4a7>
c0014d95:	3d ff ff 00 00       	cmp    eax,0xffff
c0014d9a:	76 22                	jbe    c0014dbe <Vm::faultHandler(regs*)+0x4a7>
c0014d9c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014da0:	50                   	push   eax
c0014da1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014da5:	50                   	push   eax
c0014da6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014daa:	50                   	push   eax
c0014dab:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014daf:	50                   	push   eax
c0014db0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014db4:	50                   	push   eax
c0014db5:	6a 6e                	push   0x6e
c0014db7:	6a 6e                	push   0x6e
c0014db9:	e9 8c 00 00 00       	jmp    c0014e4a <Vm::faultHandler(regs*)+0x533>
c0014dbe:	0f b7 c0             	movzx  eax,ax
c0014dc1:	52                   	push   edx
c0014dc2:	52                   	push   edx
c0014dc3:	50                   	push   eax
c0014dc4:	57                   	push   edi
c0014dc5:	e8 d9 fa ff ff       	call   c00148a3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014dca:	59                   	pop    ecx
c0014dcb:	0f b6 c0             	movzx  eax,al
c0014dce:	5e                   	pop    esi
c0014dcf:	50                   	push   eax
c0014dd0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014dd4:	50                   	push   eax
c0014dd5:	e8 92 f6 ff ff       	call   c001446c <Vm::outbv(unsigned short, unsigned char)>
c0014dda:	83 c4 10             	add    esp,0x10
c0014ddd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014de0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014de4:	74 03                	je     c0014de9 <Vm::faultHandler(regs*)+0x4d2>
c0014de6:	48                   	dec    eax
c0014de7:	eb 01                	jmp    c0014dea <Vm::faultHandler(regs*)+0x4d3>
c0014de9:	40                   	inc    eax
c0014dea:	0f b7 c0             	movzx  eax,ax
c0014ded:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014df0:	e9 92 01 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014df5:	8d 46 ff             	lea    eax,[esi-0x1]
c0014df8:	3c 05                	cmp    al,0x5
c0014dfa:	77 1f                	ja     c0014e1b <Vm::faultHandler(regs*)+0x504>
c0014dfc:	0f b6 c0             	movzx  eax,al
c0014dff:	ff 24 85 c0 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1340]
c0014e06:	89 ef                	mov    edi,ebp
c0014e08:	eb 11                	jmp    c0014e1b <Vm::faultHandler(regs*)+0x504>
c0014e0a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014e0d:	eb 0c                	jmp    c0014e1b <Vm::faultHandler(regs*)+0x504>
c0014e0f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014e12:	eb 07                	jmp    c0014e1b <Vm::faultHandler(regs*)+0x504>
c0014e14:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014e17:	eb 02                	jmp    c0014e1b <Vm::faultHandler(regs*)+0x504>
c0014e19:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014e1b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014e1e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e23:	74 37                	je     c0014e5c <Vm::faultHandler(regs*)+0x545>
c0014e25:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014e2b:	76 2f                	jbe    c0014e5c <Vm::faultHandler(regs*)+0x545>
c0014e2d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e31:	50                   	push   eax
c0014e32:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e36:	50                   	push   eax
c0014e37:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e3b:	50                   	push   eax
c0014e3c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e40:	50                   	push   eax
c0014e41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e45:	50                   	push   eax
c0014e46:	6a 6f                	push   0x6f
c0014e48:	6a 6f                	push   0x6f
c0014e4a:	68 4e ec 01 c0       	push   0xc001ec4e
c0014e4f:	e8 a0 5c ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0014e54:	83 c4 20             	add    esp,0x20
c0014e57:	e9 86 01 00 00       	jmp    c0014fe2 <Vm::faultHandler(regs*)+0x6cb>
c0014e5c:	0f b7 d7             	movzx  edx,di
c0014e5f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014e62:	0f b7 c6             	movzx  eax,si
c0014e65:	81 e1 00 04 00 00    	and    ecx,0x400
c0014e6b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014e6e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e73:	74 1d                	je     c0014e92 <Vm::faultHandler(regs*)+0x57b>
c0014e75:	55                   	push   ebp
c0014e76:	55                   	push   ebp
c0014e77:	50                   	push   eax
c0014e78:	52                   	push   edx
c0014e79:	e8 48 fa ff ff       	call   c00148c6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014e7e:	83 c4 10             	add    esp,0x10
c0014e81:	89 fa                	mov    edx,edi
c0014e83:	ef                   	out    dx,eax
c0014e84:	85 c9                	test   ecx,ecx
c0014e86:	74 05                	je     c0014e8d <Vm::faultHandler(regs*)+0x576>
c0014e88:	83 ee 04             	sub    esi,0x4
c0014e8b:	eb 21                	jmp    c0014eae <Vm::faultHandler(regs*)+0x597>
c0014e8d:	83 c6 04             	add    esi,0x4
c0014e90:	eb 1c                	jmp    c0014eae <Vm::faultHandler(regs*)+0x597>
c0014e92:	55                   	push   ebp
c0014e93:	55                   	push   ebp
c0014e94:	50                   	push   eax
c0014e95:	52                   	push   edx
c0014e96:	e8 19 fa ff ff       	call   c00148b4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014e9b:	83 c4 10             	add    esp,0x10
c0014e9e:	89 fa                	mov    edx,edi
c0014ea0:	66 ef                	out    dx,ax
c0014ea2:	85 c9                	test   ecx,ecx
c0014ea4:	74 05                	je     c0014eab <Vm::faultHandler(regs*)+0x594>
c0014ea6:	83 ee 02             	sub    esi,0x2
c0014ea9:	eb 03                	jmp    c0014eae <Vm::faultHandler(regs*)+0x597>
c0014eab:	83 c6 02             	add    esi,0x2
c0014eae:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014eb4:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014eb7:	e9 cb 00 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014ebc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014ec3:	83 ec 0c             	sub    esp,0xc
c0014ec6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014eca:	50                   	push   eax
c0014ecb:	e8 89 f5 ff ff       	call   c0014459 <Vm::inbv(unsigned short)>
c0014ed0:	0f b6 c0             	movzx  eax,al
c0014ed3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014ed6:	eb 3f                	jmp    c0014f17 <Vm::faultHandler(regs*)+0x600>
c0014ed8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014edd:	74 07                	je     c0014ee6 <Vm::faultHandler(regs*)+0x5cf>
c0014edf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014ee3:	ed                   	in     eax,dx
c0014ee4:	eb 14                	jmp    c0014efa <Vm::faultHandler(regs*)+0x5e3>
c0014ee6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014ee9:	66 31 f6             	xor    si,si
c0014eec:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014eef:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014ef3:	66 ed                	in     ax,dx
c0014ef5:	0f b7 c0             	movzx  eax,ax
c0014ef8:	09 f0                	or     eax,esi
c0014efa:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014efd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014f01:	e9 84 00 00 00       	jmp    c0014f8a <Vm::faultHandler(regs*)+0x673>
c0014f06:	52                   	push   edx
c0014f07:	52                   	push   edx
c0014f08:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014f0c:	50                   	push   eax
c0014f0d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f11:	50                   	push   eax
c0014f12:	e8 55 f5 ff ff       	call   c001446c <Vm::outbv(unsigned short, unsigned char)>
c0014f17:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014f1b:	eb 53                	jmp    c0014f70 <Vm::faultHandler(regs*)+0x659>
c0014f1d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014f20:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014f24:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f29:	74 03                	je     c0014f2e <Vm::faultHandler(regs*)+0x617>
c0014f2b:	ef                   	out    dx,eax
c0014f2c:	eb cf                	jmp    c0014efd <Vm::faultHandler(regs*)+0x5e6>
c0014f2e:	66 ef                	out    dx,ax
c0014f30:	eb cb                	jmp    c0014efd <Vm::faultHandler(regs*)+0x5e6>
c0014f32:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014f39:	83 ec 0c             	sub    esp,0xc
c0014f3c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014f40:	50                   	push   eax
c0014f41:	e8 13 f5 ff ff       	call   c0014459 <Vm::inbv(unsigned short)>
c0014f46:	0f b6 c0             	movzx  eax,al
c0014f49:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014f4c:	eb 1f                	jmp    c0014f6d <Vm::faultHandler(regs*)+0x656>
c0014f4e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014f51:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f56:	74 03                	je     c0014f5b <Vm::faultHandler(regs*)+0x644>
c0014f58:	ed                   	in     eax,dx
c0014f59:	eb 0d                	jmp    c0014f68 <Vm::faultHandler(regs*)+0x651>
c0014f5b:	66 ed                	in     ax,dx
c0014f5d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014f60:	0f b7 c0             	movzx  eax,ax
c0014f63:	66 31 d2             	xor    dx,dx
c0014f66:	09 d0                	or     eax,edx
c0014f68:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014f6b:	eb 1a                	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014f6d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014f70:	83 c4 10             	add    esp,0x10
c0014f73:	eb 15                	jmp    c0014f8a <Vm::faultHandler(regs*)+0x673>
c0014f75:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014f78:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014f7b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f80:	74 03                	je     c0014f85 <Vm::faultHandler(regs*)+0x66e>
c0014f82:	ef                   	out    dx,eax
c0014f83:	eb 02                	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014f85:	66 ef                	out    dx,ax
c0014f87:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014f8a:	b0 01                	mov    al,0x1
c0014f8c:	eb 56                	jmp    c0014fe4 <Vm::faultHandler(regs*)+0x6cd>
c0014f8e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f92:	50                   	push   eax
c0014f93:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f97:	50                   	push   eax
c0014f98:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f9c:	50                   	push   eax
c0014f9d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014fa1:	50                   	push   eax
c0014fa2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014fa6:	50                   	push   eax
c0014fa7:	52                   	push   edx
c0014fa8:	52                   	push   edx
c0014fa9:	68 7b ec 01 c0       	push   0xc001ec7b
c0014fae:	e8 41 5b ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0014fb3:	83 c4 20             	add    esp,0x20
c0014fb6:	83 ec 0c             	sub    esp,0xc
c0014fb9:	6a 60                	push   0x60
c0014fbb:	e8 99 f4 ff ff       	call   c0014459 <Vm::inbv(unsigned short)>
c0014fc0:	83 c4 10             	add    esp,0x10
c0014fc3:	3c 1c                	cmp    al,0x1c
c0014fc5:	74 04                	je     c0014fcb <Vm::faultHandler(regs*)+0x6b4>
c0014fc7:	3c 5a                	cmp    al,0x5a
c0014fc9:	75 eb                	jne    c0014fb6 <Vm::faultHandler(regs*)+0x69f>
c0014fcb:	3c 5a                	cmp    al,0x5a
c0014fcd:	74 04                	je     c0014fd3 <Vm::faultHandler(regs*)+0x6bc>
c0014fcf:	3c 1c                	cmp    al,0x1c
c0014fd1:	75 0f                	jne    c0014fe2 <Vm::faultHandler(regs*)+0x6cb>
c0014fd3:	83 ec 0c             	sub    esp,0xc
c0014fd6:	6a 60                	push   0x60
c0014fd8:	e8 7c f4 ff ff       	call   c0014459 <Vm::inbv(unsigned short)>
c0014fdd:	83 c4 10             	add    esp,0x10
c0014fe0:	eb e9                	jmp    c0014fcb <Vm::faultHandler(regs*)+0x6b4>
c0014fe2:	31 c0                	xor    eax,eax
c0014fe4:	83 c4 1c             	add    esp,0x1c
c0014fe7:	5b                   	pop    ebx
c0014fe8:	5e                   	pop    esi
c0014fe9:	5f                   	pop    edi
c0014fea:	5d                   	pop    ebp
c0014feb:	c3                   	ret    

c0014fec <noCopro(unsigned long)>:
c0014fec:	c3                   	ret    

c0014fed <nmiHandler(regs*, void*)>:
c0014fed:	83 ec 0c             	sub    esp,0xc
c0014ff0:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c0014ff5:	83 ec 0c             	sub    esp,0xc
c0014ff8:	50                   	push   eax
c0014ff9:	e8 80 26 ff ff       	call   c000767e <Computer::handleNMI()>
c0014ffe:	83 c4 10             	add    esp,0x10
c0015001:	90                   	nop
c0015002:	83 c4 0c             	add    esp,0xc
c0015005:	c3                   	ret    

c0015006 <doubleFault(regs*, void*)>:
c0015006:	55                   	push   ebp
c0015007:	89 e5                	mov    ebp,esp
c0015009:	83 ec 08             	sub    esp,0x8
c001500c:	83 ec 0c             	sub    esp,0xc
c001500f:	68 d8 ec 01 c0       	push   0xc001ecd8
c0015014:	e8 aa b6 ff ff       	call   c00106c3 <KePanic(char const*)>
c0015019:	83 c4 10             	add    esp,0x10
c001501c:	90                   	nop
c001501d:	c9                   	leave  
c001501e:	c3                   	ret    

c001501f <displayDebugInfo(regs*)>:
c001501f:	83 ec 1c             	sub    esp,0x1c
c0015022:	0f 20 c0             	mov    eax,cr0
c0015025:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015029:	0f 20 d0             	mov    eax,cr2
c001502c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015030:	0f 20 d8             	mov    eax,cr3
c0015033:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015037:	0f 20 e0             	mov    eax,cr4
c001503a:	89 04 24             	mov    DWORD PTR [esp],eax
c001503d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015041:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015044:	83 ec 08             	sub    esp,0x8
c0015047:	50                   	push   eax
c0015048:	68 f4 ec 01 c0       	push   0xc001ecf4
c001504d:	e8 a2 5a ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0015052:	83 c4 10             	add    esp,0x10
c0015055:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015059:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001505c:	83 ec 08             	sub    esp,0x8
c001505f:	50                   	push   eax
c0015060:	68 e5 ec 01 c0       	push   0xc001ece5
c0015065:	e8 8a 5a ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001506a:	83 c4 10             	add    esp,0x10
c001506d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015071:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015074:	83 ec 08             	sub    esp,0x8
c0015077:	50                   	push   eax
c0015078:	68 f0 ec 01 c0       	push   0xc001ecf0
c001507d:	e8 72 5a ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0015082:	83 c4 10             	add    esp,0x10
c0015085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015089:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001508c:	83 ec 08             	sub    esp,0x8
c001508f:	50                   	push   eax
c0015090:	68 ff ec 01 c0       	push   0xc001ecff
c0015095:	e8 5a 5a ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001509a:	83 c4 10             	add    esp,0x10
c001509d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150a1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00150a4:	83 ec 08             	sub    esp,0x8
c00150a7:	50                   	push   eax
c00150a8:	68 0a ed 01 c0       	push   0xc001ed0a
c00150ad:	e8 42 5a ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c00150b2:	83 c4 10             	add    esp,0x10
c00150b5:	83 ec 08             	sub    esp,0x8
c00150b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00150bc:	68 15 ed 01 c0       	push   0xc001ed15
c00150c1:	e8 2e 5a ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c00150c6:	83 c4 10             	add    esp,0x10
c00150c9:	83 ec 08             	sub    esp,0x8
c00150cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00150d0:	68 20 ed 01 c0       	push   0xc001ed20
c00150d5:	e8 1a 5a ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c00150da:	83 c4 10             	add    esp,0x10
c00150dd:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c00150e2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150e8:	83 ec 0c             	sub    esp,0xc
c00150eb:	50                   	push   eax
c00150ec:	e8 a6 39 ff ff       	call   c0008a97 <setActiveTerminal(VgaText*)>
c00150f1:	83 c4 10             	add    esp,0x10
c00150f4:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c00150f9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150ff:	83 ec 08             	sub    esp,0x8
c0015102:	68 2b ed 01 c0       	push   0xc001ed2b
c0015107:	50                   	push   eax
c0015108:	e8 c9 3c ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c001510d:	83 c4 10             	add    esp,0x10
c0015110:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c0015115:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001511b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015120:	8b 12                	mov    edx,DWORD PTR [edx]
c0015122:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015125:	83 c2 0c             	add    edx,0xc
c0015128:	83 ec 08             	sub    esp,0x8
c001512b:	52                   	push   edx
c001512c:	50                   	push   eax
c001512d:	e8 a4 3c ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c0015132:	83 c4 10             	add    esp,0x10
c0015135:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c001513a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015140:	83 ec 08             	sub    esp,0x8
c0015143:	68 34 ed 01 c0       	push   0xc001ed34
c0015148:	50                   	push   eax
c0015149:	e8 88 3c ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c001514e:	83 c4 10             	add    esp,0x10
c0015151:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c0015156:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001515c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015160:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015163:	83 ec 08             	sub    esp,0x8
c0015166:	52                   	push   edx
c0015167:	50                   	push   eax
c0015168:	e8 23 3c ff ff       	call   c0008d90 <VgaText::putx(unsigned int)>
c001516d:	83 c4 10             	add    esp,0x10
c0015170:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c0015175:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001517b:	83 ec 08             	sub    esp,0x8
c001517e:	68 3c ed 01 c0       	push   0xc001ed3c
c0015183:	50                   	push   eax
c0015184:	e8 4d 3c ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c0015189:	83 c4 10             	add    esp,0x10
c001518c:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c0015191:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015197:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001519b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001519e:	83 ec 08             	sub    esp,0x8
c00151a1:	52                   	push   edx
c00151a2:	50                   	push   eax
c00151a3:	e8 e8 3b ff ff       	call   c0008d90 <VgaText::putx(unsigned int)>
c00151a8:	83 c4 10             	add    esp,0x10
c00151ab:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c00151b0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b6:	83 ec 08             	sub    esp,0x8
c00151b9:	68 44 ed 01 c0       	push   0xc001ed44
c00151be:	50                   	push   eax
c00151bf:	e8 12 3c ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c00151cc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151d2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151d6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00151d9:	83 ec 08             	sub    esp,0x8
c00151dc:	52                   	push   edx
c00151dd:	50                   	push   eax
c00151de:	e8 ad 3b ff ff       	call   c0008d90 <VgaText::putx(unsigned int)>
c00151e3:	83 c4 10             	add    esp,0x10
c00151e6:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c00151eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151f1:	83 ec 08             	sub    esp,0x8
c00151f4:	68 4c ed 01 c0       	push   0xc001ed4c
c00151f9:	50                   	push   eax
c00151fa:	e8 d7 3b ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c00151ff:	83 c4 10             	add    esp,0x10
c0015202:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c0015207:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001520d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015211:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015214:	83 ec 08             	sub    esp,0x8
c0015217:	52                   	push   edx
c0015218:	50                   	push   eax
c0015219:	e8 72 3b ff ff       	call   c0008d90 <VgaText::putx(unsigned int)>
c001521e:	83 c4 10             	add    esp,0x10
c0015221:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c0015226:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001522c:	83 ec 08             	sub    esp,0x8
c001522f:	68 54 ed 01 c0       	push   0xc001ed54
c0015234:	50                   	push   eax
c0015235:	e8 9c 3b ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c001523a:	83 c4 10             	add    esp,0x10
c001523d:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c0015242:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015248:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001524c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001524f:	83 ec 08             	sub    esp,0x8
c0015252:	52                   	push   edx
c0015253:	50                   	push   eax
c0015254:	e8 37 3b ff ff       	call   c0008d90 <VgaText::putx(unsigned int)>
c0015259:	83 c4 10             	add    esp,0x10
c001525c:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c0015261:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015267:	83 ec 08             	sub    esp,0x8
c001526a:	68 5c ed 01 c0       	push   0xc001ed5c
c001526f:	50                   	push   eax
c0015270:	e8 61 3b ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c0015275:	83 c4 10             	add    esp,0x10
c0015278:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c001527d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015283:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015287:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001528a:	83 ec 08             	sub    esp,0x8
c001528d:	52                   	push   edx
c001528e:	50                   	push   eax
c001528f:	e8 fc 3a ff ff       	call   c0008d90 <VgaText::putx(unsigned int)>
c0015294:	83 c4 10             	add    esp,0x10
c0015297:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c001529c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152a2:	83 ec 08             	sub    esp,0x8
c00152a5:	68 64 ed 01 c0       	push   0xc001ed64
c00152aa:	50                   	push   eax
c00152ab:	e8 26 3b ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c00152b0:	83 c4 10             	add    esp,0x10
c00152b3:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c00152b8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152be:	83 ec 08             	sub    esp,0x8
c00152c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00152c5:	50                   	push   eax
c00152c6:	e8 c5 3a ff ff       	call   c0008d90 <VgaText::putx(unsigned int)>
c00152cb:	83 c4 10             	add    esp,0x10
c00152ce:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c00152d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152d9:	83 ec 08             	sub    esp,0x8
c00152dc:	68 6d ed 01 c0       	push   0xc001ed6d
c00152e1:	50                   	push   eax
c00152e2:	e8 ef 3a ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c00152e7:	83 c4 10             	add    esp,0x10
c00152ea:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c00152ef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152f5:	83 ec 08             	sub    esp,0x8
c00152f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00152fc:	50                   	push   eax
c00152fd:	e8 8e 3a ff ff       	call   c0008d90 <VgaText::putx(unsigned int)>
c0015302:	83 c4 10             	add    esp,0x10
c0015305:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c001530a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015310:	83 ec 08             	sub    esp,0x8
c0015313:	68 75 ed 01 c0       	push   0xc001ed75
c0015318:	50                   	push   eax
c0015319:	e8 b8 3a ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c001531e:	83 c4 10             	add    esp,0x10
c0015321:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c0015326:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001532c:	83 ec 08             	sub    esp,0x8
c001532f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015333:	50                   	push   eax
c0015334:	e8 57 3a ff ff       	call   c0008d90 <VgaText::putx(unsigned int)>
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	fa                   	cli    
c001533d:	f4                   	hlt    
c001533e:	eb fe                	jmp    c001533e <displayDebugInfo(regs*)+0x31f>

c0015340 <HalSystemIdle()>:
c0015340:	56                   	push   esi
c0015341:	53                   	push   ebx
c0015342:	83 ec 14             	sub    esp,0x14
c0015345:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c001534a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015350:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0015356:	83 e0 04             	and    eax,0x4
c0015359:	84 c0                	test   al,al
c001535b:	0f 95 c0             	setne  al
c001535e:	84 c0                	test   al,al
c0015360:	74 4c                	je     c00153ae <HalSystemIdle()+0x6e>
c0015362:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c0015367:	83 ec 08             	sub    esp,0x8
c001536a:	68 e1 00 00 00       	push   0xe1
c001536f:	50                   	push   eax
c0015370:	e8 21 21 ff ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c0015375:	83 c4 10             	add    esp,0x10
c0015378:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001537c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015380:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c0015385:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015389:	83 e2 02             	and    edx,0x2
c001538c:	89 d3                	mov    ebx,edx
c001538e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015392:	83 e2 00             	and    edx,0x0
c0015395:	89 d6                	mov    esi,edx
c0015397:	56                   	push   esi
c0015398:	53                   	push   ebx
c0015399:	68 e1 00 00 00       	push   0xe1
c001539e:	50                   	push   eax
c001539f:	e8 1e 21 ff ff       	call   c00074c2 <Computer::wrmsr(unsigned int, unsigned long long)>
c00153a4:	83 c4 10             	add    esp,0x10
c00153a7:	e8 08 ae fe ff       	call   c00001b4 <doTPAUSE>
c00153ac:	eb 01                	jmp    c00153af <HalSystemIdle()+0x6f>
c00153ae:	f4                   	hlt    
c00153af:	90                   	nop
c00153b0:	83 c4 14             	add    esp,0x14
c00153b3:	5b                   	pop    ebx
c00153b4:	5e                   	pop    esi
c00153b5:	c3                   	ret    

c00153b6 <displayProgramFault(char const*)>:
c00153b6:	83 ec 0c             	sub    esp,0xc
c00153b9:	83 ec 0c             	sub    esp,0xc
c00153bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153c0:	e8 2f 57 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c00153c5:	83 c4 10             	add    esp,0x10
c00153c8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153d8:	85 c0                	test   eax,eax
c00153da:	74 21                	je     c00153fd <displayProgramFault(char const*)+0x47>
c00153dc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153ec:	6a 04                	push   0x4
c00153ee:	6a 0f                	push   0xf
c00153f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153f4:	50                   	push   eax
c00153f5:	e8 4e 3a ff ff       	call   c0008e48 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00153fa:	83 c4 10             	add    esp,0x10
c00153fd:	90                   	nop
c00153fe:	83 c4 0c             	add    esp,0xc
c0015401:	c3                   	ret    

c0015402 <gpFault(regs*, void*)>:
c0015402:	83 ec 1c             	sub    esp,0x1c
c0015405:	c7 05 f0 3e 02 c0 17 49 01 c0 	mov    DWORD PTR ds:0xc0023ef0,0xc0014917
c001540f:	a1 f0 3e 02 c0       	mov    eax,ds:0xc0023ef0
c0015414:	85 c0                	test   eax,eax
c0015416:	74 1c                	je     c0015434 <gpFault(regs*, void*)+0x32>
c0015418:	a1 f0 3e 02 c0       	mov    eax,ds:0xc0023ef0
c001541d:	83 ec 0c             	sub    esp,0xc
c0015420:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015424:	ff d0                	call   eax
c0015426:	83 c4 10             	add    esp,0x10
c0015429:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001542d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015432:	75 2e                	jne    c0015462 <gpFault(regs*, void*)+0x60>
c0015434:	83 ec 0c             	sub    esp,0xc
c0015437:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001543b:	e8 df fb ff ff       	call   c001501f <displayDebugInfo(regs*)>
c0015440:	83 c4 10             	add    esp,0x10
c0015443:	83 ec 0c             	sub    esp,0xc
c0015446:	68 7d ed 01 c0       	push   0xc001ed7d
c001544b:	e8 66 ff ff ff       	call   c00153b6 <displayProgramFault(char const*)>
c0015450:	83 c4 10             	add    esp,0x10
c0015453:	83 ec 0c             	sub    esp,0xc
c0015456:	6a 00                	push   0x0
c0015458:	e8 af ee ff ff       	call   c001430c <Thr::terminateFromIRQ(int)>
c001545d:	83 c4 10             	add    esp,0x10
c0015460:	eb 01                	jmp    c0015463 <gpFault(regs*, void*)+0x61>
c0015462:	90                   	nop
c0015463:	83 c4 1c             	add    esp,0x1c
c0015466:	c3                   	ret    

c0015467 <pgFault(regs*, void*)>:
c0015467:	83 ec 1c             	sub    esp,0x1c
c001546a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001546e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015471:	0f 20 d0             	mov    eax,cr2
c0015474:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015478:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001547c:	83 ec 04             	sub    esp,0x4
c001547f:	52                   	push   edx
c0015480:	50                   	push   eax
c0015481:	68 5c ee 01 c0       	push   0xc001ee5c
c0015486:	e8 69 56 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001548b:	83 c4 10             	add    esp,0x10
c001548e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015493:	8b 00                	mov    eax,DWORD PTR [eax]
c0015495:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015498:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001549e:	0f 20 d2             	mov    edx,cr2
c00154a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00154a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00154a9:	83 ec 08             	sub    esp,0x8
c00154ac:	52                   	push   edx
c00154ad:	50                   	push   eax
c00154ae:	e8 73 52 ff ff       	call   c000a726 <VAS::tryLoadBackOffDisk(unsigned long)>
c00154b3:	83 c4 10             	add    esp,0x10
c00154b6:	84 c0                	test   al,al
c00154b8:	75 2e                	jne    c00154e8 <pgFault(regs*, void*)+0x81>
c00154ba:	83 ec 0c             	sub    esp,0xc
c00154bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154c1:	e8 59 fb ff ff       	call   c001501f <displayDebugInfo(regs*)>
c00154c6:	83 c4 10             	add    esp,0x10
c00154c9:	83 ec 0c             	sub    esp,0xc
c00154cc:	68 96 ed 01 c0       	push   0xc001ed96
c00154d1:	e8 e0 fe ff ff       	call   c00153b6 <displayProgramFault(char const*)>
c00154d6:	83 c4 10             	add    esp,0x10
c00154d9:	83 ec 0c             	sub    esp,0xc
c00154dc:	6a 00                	push   0x0
c00154de:	e8 29 ee ff ff       	call   c001430c <Thr::terminateFromIRQ(int)>
c00154e3:	83 c4 10             	add    esp,0x10
c00154e6:	eb 01                	jmp    c00154e9 <pgFault(regs*, void*)+0x82>
c00154e8:	90                   	nop
c00154e9:	83 c4 1c             	add    esp,0x1c
c00154ec:	c3                   	ret    

c00154ed <otherISRHandler(regs*, void*)>:
c00154ed:	83 ec 0c             	sub    esp,0xc
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154f7:	e8 23 fb ff ff       	call   c001501f <displayDebugInfo(regs*)>
c00154fc:	83 c4 10             	add    esp,0x10
c00154ff:	83 ec 0c             	sub    esp,0xc
c0015502:	68 84 ee 01 c0       	push   0xc001ee84
c0015507:	e8 aa fe ff ff       	call   c00153b6 <displayProgramFault(char const*)>
c001550c:	83 c4 10             	add    esp,0x10
c001550f:	83 ec 0c             	sub    esp,0xc
c0015512:	6a 00                	push   0x0
c0015514:	e8 f3 ed ff ff       	call   c001430c <Thr::terminateFromIRQ(int)>
c0015519:	83 c4 10             	add    esp,0x10
c001551c:	90                   	nop
c001551d:	83 c4 0c             	add    esp,0xc
c0015520:	c3                   	ret    

c0015521 <opcodeFault(regs*, void*)>:
c0015521:	55                   	push   ebp
c0015522:	89 e5                	mov    ebp,esp
c0015524:	83 ec 08             	sub    esp,0x8
c0015527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001552d:	83 ec 08             	sub    esp,0x8
c0015530:	50                   	push   eax
c0015531:	68 a1 ed 01 c0       	push   0xc001eda1
c0015536:	e8 b9 55 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001553b:	83 c4 10             	add    esp,0x10
c001553e:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c0015543:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015549:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001554f:	84 c0                	test   al,al
c0015551:	74 21                	je     c0015574 <opcodeFault(regs*, void*)+0x53>
c0015553:	83 ec 0c             	sub    esp,0xc
c0015556:	68 ac ee 01 c0       	push   0xc001eeac
c001555b:	e8 94 55 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0015560:	83 c4 10             	add    esp,0x10
c0015563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015566:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015569:	8d 50 19             	lea    edx,[eax+0x19]
c001556c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015572:	eb 2b                	jmp    c001559f <opcodeFault(regs*, void*)+0x7e>
c0015574:	83 ec 0c             	sub    esp,0xc
c0015577:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001557a:	e8 a0 fa ff ff       	call   c001501f <displayDebugInfo(regs*)>
c001557f:	83 c4 10             	add    esp,0x10
c0015582:	83 ec 0c             	sub    esp,0xc
c0015585:	68 af ed 01 c0       	push   0xc001edaf
c001558a:	e8 27 fe ff ff       	call   c00153b6 <displayProgramFault(char const*)>
c001558f:	83 c4 10             	add    esp,0x10
c0015592:	83 ec 0c             	sub    esp,0xc
c0015595:	6a 00                	push   0x0
c0015597:	e8 70 ed ff ff       	call   c001430c <Thr::terminateFromIRQ(int)>
c001559c:	83 c4 10             	add    esp,0x10
c001559f:	c9                   	leave  
c00155a0:	c3                   	ret    

c00155a1 <i386SaveCoprocessor(void*)>:
c00155a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155a5:	83 c0 3f             	add    eax,0x3f
c00155a8:	83 e0 c0             	and    eax,0xffffffc0
c00155ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155af:	ff 25 ec 3e 02 c0    	jmp    DWORD PTR ds:0xc0023eec

c00155b5 <i386LoadCoprocessor(void*)>:
c00155b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155b9:	83 c0 3f             	add    eax,0x3f
c00155bc:	83 e0 c0             	and    eax,0xffffffc0
c00155bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155c3:	ff 25 e8 3e 02 c0    	jmp    DWORD PTR ds:0xc0023ee8

c00155c9 <x87EmulHandler(regs*, void*)>:
c00155c9:	53                   	push   ebx
c00155ca:	83 ec 08             	sub    esp,0x8
c00155cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155d2:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00155d6:	74 10                	je     c00155e8 <x87EmulHandler(regs*, void*)+0x1f>
c00155d8:	83 ec 0c             	sub    esp,0xc
c00155db:	68 bc ed 01 c0       	push   0xc001edbc
c00155e0:	e8 de b0 ff ff       	call   c00106c3 <KePanic(char const*)>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	0f 20 c0             	mov    eax,cr0
c00155eb:	a8 08                	test   al,0x8
c00155ed:	74 59                	je     c0015648 <x87EmulHandler(regs*, void*)+0x7f>
c00155ef:	0f 06                	clts   
c00155f1:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c00155f6:	85 c0                	test   eax,eax
c00155f8:	74 0e                	je     c0015608 <x87EmulHandler(regs*, void*)+0x3f>
c00155fa:	83 ec 0c             	sub    esp,0xc
c00155fd:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015600:	e8 9c ff ff ff       	call   c00155a1 <i386SaveCoprocessor(void*)>
c0015605:	83 c4 10             	add    esp,0x10
c0015608:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001560e:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015612:	75 12                	jne    c0015626 <x87EmulHandler(regs*, void*)+0x5d>
c0015614:	83 ec 0c             	sub    esp,0xc
c0015617:	68 40 02 00 00       	push   0x240
c001561c:	e8 3c 28 ff ff       	call   c0007e5d <malloc>
c0015621:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015624:	eb 10                	jmp    c0015636 <x87EmulHandler(regs*, void*)+0x6d>
c0015626:	83 ec 0c             	sub    esp,0xc
c0015629:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c001562e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015631:	e8 7f ff ff ff       	call   c00155b5 <i386LoadCoprocessor(void*)>
c0015636:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001563b:	83 c4 10             	add    esp,0x10
c001563e:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c0015643:	83 c4 08             	add    esp,0x8
c0015646:	5b                   	pop    ebx
c0015647:	c3                   	ret    
c0015648:	83 ec 0c             	sub    esp,0xc
c001564b:	68 d0 ed 01 c0       	push   0xc001edd0
c0015650:	e8 9f 54 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0015655:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001565d:	83 c4 18             	add    esp,0x18
c0015660:	5b                   	pop    ebx
c0015661:	e9 a6 ec ff ff       	jmp    c001430c <Thr::terminateFromIRQ(int)>

c0015666 <HalInitialiseCoprocessor()>:
c0015666:	83 ec 10             	sub    esp,0x10
c0015669:	c7 05 e4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ee4,0x0
c0015673:	6a 00                	push   0x0
c0015675:	68 c9 55 01 c0       	push   0xc00155c9
c001567a:	6a 07                	push   0x7
c001567c:	e8 e7 6d ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015681:	e8 7a 65 00 00       	call   c001bc00 <avxDetect>
c0015686:	83 c4 10             	add    esp,0x10
c0015689:	85 c0                	test   eax,eax
c001568b:	74 1c                	je     c00156a9 <HalInitialiseCoprocessor()+0x43>
c001568d:	c7 05 ec 3e 02 c0 2a bc 01 c0 	mov    DWORD PTR ds:0xc0023eec,0xc001bc2a
c0015697:	c7 05 e8 3e 02 c0 3b bc 01 c0 	mov    DWORD PTR ds:0xc0023ee8,0xc001bc3b
c00156a1:	83 c4 0c             	add    esp,0xc
c00156a4:	e9 a3 65 00 00       	jmp    c001bc4c <avxInit>
c00156a9:	e8 d2 67 00 00       	call   c001be80 <absolutelyNoChanceInHell>
c00156ae:	85 c0                	test   eax,eax
c00156b0:	74 1c                	je     c00156ce <HalInitialiseCoprocessor()+0x68>
c00156b2:	c7 05 ec 3e 02 c0 98 be 01 c0 	mov    DWORD PTR ds:0xc0023eec,0xc001be98
c00156bc:	c7 05 e8 3e 02 c0 a0 be 01 c0 	mov    DWORD PTR ds:0xc0023ee8,0xc001bea0
c00156c6:	83 c4 0c             	add    esp,0xc
c00156c9:	e9 da 67 00 00       	jmp    c001bea8 <sseInit>
c00156ce:	e8 f3 67 00 00       	call   c001bec6 <x87Detect>
c00156d3:	85 c0                	test   eax,eax
c00156d5:	74 1c                	je     c00156f3 <HalInitialiseCoprocessor()+0x8d>
c00156d7:	c7 05 ec 3e 02 c0 e1 be 01 c0 	mov    DWORD PTR ds:0xc0023eec,0xc001bee1
c00156e1:	c7 05 e8 3e 02 c0 e8 be 01 c0 	mov    DWORD PTR ds:0xc0023ee8,0xc001bee8
c00156eb:	83 c4 0c             	add    esp,0xc
c00156ee:	e9 fc 67 00 00       	jmp    c001beef <x87Init>
c00156f3:	c7 05 ec 3e 02 c0 ec 4f 01 c0 	mov    DWORD PTR ds:0xc0023eec,0xc0014fec
c00156fd:	c7 05 e8 3e 02 c0 ec 4f 01 c0 	mov    DWORD PTR ds:0xc0023ee8,0xc0014fec
c0015707:	0f 20 c0             	mov    eax,cr0
c001570a:	83 c8 04             	or     eax,0x4
c001570d:	0f 22 c0             	mov    cr0,eax
c0015710:	83 c4 0c             	add    esp,0xc
c0015713:	c3                   	ret    

c0015714 <HalPanic(char const*)>:
c0015714:	53                   	push   ebx
c0015715:	83 ec 10             	sub    esp,0x10
c0015718:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001571c:	fa                   	cli    
c001571d:	53                   	push   ebx
c001571e:	68 e6 ed 01 c0       	push   0xc001ede6
c0015723:	e8 cc 53 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0015728:	83 c4 0c             	add    esp,0xc
c001572b:	6a 01                	push   0x1
c001572d:	6a 0f                	push   0xf
c001572f:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c0015735:	e8 b0 31 ff ff       	call   c00088ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001573a:	58                   	pop    eax
c001573b:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c0015741:	e8 9c 33 ff ff       	call   c0008ae2 <VgaText::clearScreen()>
c0015746:	5a                   	pop    edx
c0015747:	59                   	pop    ecx
c0015748:	68 4e ee 01 c0       	push   0xc001ee4e
c001574d:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c0015753:	e8 ca 31 ff ff       	call   c0008922 <VgaText::setTitle(char*)>
c0015758:	83 c4 0c             	add    esp,0xc
c001575b:	6a 01                	push   0x1
c001575d:	6a 0f                	push   0xf
c001575f:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c0015765:	e8 80 31 ff ff       	call   c00088ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001576a:	58                   	pop    eax
c001576b:	5a                   	pop    edx
c001576c:	68 ff ed 01 c0       	push   0xc001edff
c0015771:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c0015777:	e8 5a 36 ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c001577c:	83 c4 0c             	add    esp,0xc
c001577f:	6a 0f                	push   0xf
c0015781:	6a 01                	push   0x1
c0015783:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c0015789:	e8 5c 31 ff ff       	call   c00088ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001578e:	59                   	pop    ecx
c001578f:	58                   	pop    eax
c0015790:	68 08 ee 01 c0       	push   0xc001ee08
c0015795:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c001579b:	e8 36 36 ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c00157a0:	83 c4 0c             	add    esp,0xc
c00157a3:	6a 01                	push   0x1
c00157a5:	6a 0f                	push   0xf
c00157a7:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c00157ad:	e8 38 31 ff ff       	call   c00088ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00157b2:	58                   	pop    eax
c00157b3:	5a                   	pop    edx
c00157b4:	68 4c ee 01 c0       	push   0xc001ee4c
c00157b9:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c00157bf:	e8 12 36 ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c00157c4:	59                   	pop    ecx
c00157c5:	58                   	pop    eax
c00157c6:	68 15 ee 01 c0       	push   0xc001ee15
c00157cb:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c00157d1:	e8 00 36 ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c00157d6:	58                   	pop    eax
c00157d7:	5a                   	pop    edx
c00157d8:	68 4f ee 01 c0       	push   0xc001ee4f
c00157dd:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c00157e3:	e8 ee 35 ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c00157e8:	59                   	pop    ecx
c00157e9:	58                   	pop    eax
c00157ea:	53                   	push   ebx
c00157eb:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c00157f1:	e8 e0 35 ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c00157f6:	58                   	pop    eax
c00157f7:	5a                   	pop    edx
c00157f8:	68 4c ee 01 c0       	push   0xc001ee4c
c00157fd:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c0015803:	e8 ce 35 ff ff       	call   c0008dd6 <VgaText::puts(char const*)>
c0015808:	83 c4 10             	add    esp,0x10
c001580b:	eb fe                	jmp    c001580b <HalPanic(char const*)+0xf7>

c001580d <HalQueryPerformanceCounter()>:
c001580d:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c0015812:	31 d2                	xor    edx,edx
c0015814:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001581a:	31 c0                	xor    eax,eax
c001581c:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015823:	74 02                	je     c0015827 <HalQueryPerformanceCounter()+0x1a>
c0015825:	0f 31                	rdtsc  
c0015827:	c3                   	ret    

c0015828 <HalInitialise()>:
c0015828:	53                   	push   ebx
c0015829:	83 ec 08             	sub    esp,0x8
c001582c:	e8 6a 6e ff ff       	call   c000c69b <setupINTS()>
c0015831:	80 3d 60 32 02 c0 00 	cmp    BYTE PTR ds:0xc0023260,0x0
c0015838:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c001583d:	75 07                	jne    c0015846 <HalInitialise()+0x1e>
c001583f:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015846:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001584c:	83 e0 01             	and    eax,0x1
c001584f:	a2 e0 3e 02 c0       	mov    ds:0xc0023ee0,al
c0015854:	e8 a7 02 00 00       	call   c0015b00 <picOpen()>
c0015859:	80 3d e0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ee0,0x0
c0015860:	74 0a                	je     c001586c <HalInitialise()+0x44>
c0015862:	e8 e1 01 00 00       	call   c0015a48 <picDisable()>
c0015867:	e8 08 5d 00 00       	call   c001b574 <apicOpen()>
c001586c:	bb 0f 00 00 00       	mov    ebx,0xf
c0015871:	50                   	push   eax
c0015872:	6a 00                	push   0x0
c0015874:	68 ed 54 01 c0       	push   0xc00154ed
c0015879:	6a 00                	push   0x0
c001587b:	e8 e8 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015880:	83 c4 0c             	add    esp,0xc
c0015883:	6a 00                	push   0x0
c0015885:	68 ed 54 01 c0       	push   0xc00154ed
c001588a:	6a 01                	push   0x1
c001588c:	e8 d7 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015891:	83 c4 0c             	add    esp,0xc
c0015894:	6a 00                	push   0x0
c0015896:	68 ed 4f 01 c0       	push   0xc0014fed
c001589b:	6a 02                	push   0x2
c001589d:	e8 c6 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158a2:	83 c4 0c             	add    esp,0xc
c00158a5:	6a 00                	push   0x0
c00158a7:	68 ed 54 01 c0       	push   0xc00154ed
c00158ac:	6a 03                	push   0x3
c00158ae:	e8 b5 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158b3:	83 c4 0c             	add    esp,0xc
c00158b6:	6a 00                	push   0x0
c00158b8:	68 ed 54 01 c0       	push   0xc00154ed
c00158bd:	6a 04                	push   0x4
c00158bf:	e8 a4 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158c4:	83 c4 0c             	add    esp,0xc
c00158c7:	6a 00                	push   0x0
c00158c9:	68 ed 54 01 c0       	push   0xc00154ed
c00158ce:	6a 05                	push   0x5
c00158d0:	e8 93 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158d5:	83 c4 0c             	add    esp,0xc
c00158d8:	6a 00                	push   0x0
c00158da:	68 21 55 01 c0       	push   0xc0015521
c00158df:	6a 06                	push   0x6
c00158e1:	e8 82 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158e6:	83 c4 0c             	add    esp,0xc
c00158e9:	6a 00                	push   0x0
c00158eb:	68 06 50 01 c0       	push   0xc0015006
c00158f0:	6a 08                	push   0x8
c00158f2:	e8 71 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158f7:	83 c4 0c             	add    esp,0xc
c00158fa:	6a 00                	push   0x0
c00158fc:	68 ed 54 01 c0       	push   0xc00154ed
c0015901:	6a 09                	push   0x9
c0015903:	e8 60 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015908:	83 c4 0c             	add    esp,0xc
c001590b:	6a 00                	push   0x0
c001590d:	68 ed 54 01 c0       	push   0xc00154ed
c0015912:	6a 0a                	push   0xa
c0015914:	e8 4f 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015919:	83 c4 0c             	add    esp,0xc
c001591c:	6a 00                	push   0x0
c001591e:	68 ed 54 01 c0       	push   0xc00154ed
c0015923:	6a 0b                	push   0xb
c0015925:	e8 3e 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001592a:	83 c4 0c             	add    esp,0xc
c001592d:	6a 00                	push   0x0
c001592f:	68 02 54 01 c0       	push   0xc0015402
c0015934:	6a 0d                	push   0xd
c0015936:	e8 2d 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001593b:	83 c4 0c             	add    esp,0xc
c001593e:	6a 00                	push   0x0
c0015940:	68 67 54 01 c0       	push   0xc0015467
c0015945:	6a 0e                	push   0xe
c0015947:	e8 1c 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001594c:	83 c4 10             	add    esp,0x10
c001594f:	50                   	push   eax
c0015950:	6a 00                	push   0x0
c0015952:	68 ed 54 01 c0       	push   0xc00154ed
c0015957:	53                   	push   ebx
c0015958:	43                   	inc    ebx
c0015959:	e8 0a 6b ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001595e:	83 c4 10             	add    esp,0x10
c0015961:	83 fb 1e             	cmp    ebx,0x1e
c0015964:	75 e9                	jne    c001594f <HalInitialise()+0x127>
c0015966:	50                   	push   eax
c0015967:	6a 00                	push   0x0
c0015969:	68 fb 15 01 c0       	push   0xc00115fb
c001596e:	6a 60                	push   0x60
c0015970:	e8 f3 6a ff ff       	call   c000c468 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015975:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c001597a:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015984:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001598b:	e8 cd 24 ff ff       	call   c0007e5d <malloc>
c0015990:	89 04 24             	mov    DWORD PTR [esp],eax
c0015993:	89 c3                	mov    ebx,eax
c0015995:	e8 2e 09 00 00       	call   c00162c8 <RTC::RTC()>
c001599a:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00159a4:	5a                   	pop    edx
c00159a5:	59                   	pop    ecx
c00159a6:	53                   	push   ebx
c00159a7:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c00159ad:	e8 82 65 ff ff       	call   c000bf34 <Device::addChild(Device*)>
c00159b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159b4:	6a 00                	push   0x0
c00159b6:	6a 00                	push   0x0
c00159b8:	6a 00                	push   0x0
c00159ba:	53                   	push   ebx
c00159bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159be:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c00159c3:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00159c9:	83 c4 28             	add    esp,0x28
c00159cc:	5b                   	pop    ebx
c00159cd:	c3                   	ret    

c00159ce <HalMakeBeep(int)>:
c00159ce:	53                   	push   ebx
c00159cf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00159d3:	85 db                	test   ebx,ebx
c00159d5:	75 07                	jne    c00159de <HalMakeBeep(int)+0x10>
c00159d7:	e4 61                	in     al,0x61
c00159d9:	83 e0 fc             	and    eax,0xfffffffc
c00159dc:	eb 26                	jmp    c0015a04 <HalMakeBeep(int)+0x36>
c00159de:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00159e3:	99                   	cdq    
c00159e4:	f7 fb                	idiv   ebx
c00159e6:	89 c1                	mov    ecx,eax
c00159e8:	b0 b6                	mov    al,0xb6
c00159ea:	e6 43                	out    0x43,al
c00159ec:	88 c8                	mov    al,cl
c00159ee:	e6 42                	out    0x42,al
c00159f0:	89 c8                	mov    eax,ecx
c00159f2:	c1 e8 08             	shr    eax,0x8
c00159f5:	e6 42                	out    0x42,al
c00159f7:	e4 61                	in     al,0x61
c00159f9:	88 c2                	mov    dl,al
c00159fb:	83 ca 03             	or     edx,0x3
c00159fe:	38 c2                	cmp    dl,al
c0015a00:	74 04                	je     c0015a06 <HalMakeBeep(int)+0x38>
c0015a02:	88 d0                	mov    al,dl
c0015a04:	e6 61                	out    0x61,al
c0015a06:	5b                   	pop    ebx
c0015a07:	c3                   	ret    

c0015a08 <HalGetRand()>:
c0015a08:	31 c0                	xor    eax,eax
c0015a0a:	c3                   	ret    

c0015a0b <HalEndOfInterrupt(int)>:
c0015a0b:	80 3d e0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ee0,0x0
c0015a12:	74 23                	je     c0015a37 <HalEndOfInterrupt(int)+0x2c>
c0015a14:	83 ec 14             	sub    esp,0x14
c0015a17:	6a 1b                	push   0x1b
c0015a19:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015a1f:	e8 72 1a ff ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c0015a24:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a29:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015a33:	83 c4 1c             	add    esp,0x1c
c0015a36:	c3                   	ret    
c0015a37:	e9 54 02 00 00       	jmp    c0015c90 <picEOI(int)>

c0015a3c <HalRestart()>:
c0015a3c:	c3                   	ret    

c0015a3d <HalShutdown()>:
c0015a3d:	c3                   	ret    

c0015a3e <HalSleep()>:
c0015a3e:	c3                   	ret    
c0015a3f:	90                   	nop

c0015a40 <picIoWait()>:
c0015a40:	eb 00                	jmp    c0015a42 <picIoWait()+0x2>
c0015a42:	eb 00                	jmp    c0015a44 <picIoWait()+0x4>
c0015a44:	90                   	nop
c0015a45:	c3                   	ret    
c0015a46:	66 90                	xchg   ax,ax

c0015a48 <picDisable()>:
c0015a48:	83 ec 10             	sub    esp,0x10
c0015a4b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a52:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a57:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a5b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a60:	ee                   	out    dx,al
c0015a61:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a68:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a6d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a71:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a76:	ee                   	out    dx,al
c0015a77:	90                   	nop
c0015a78:	83 c4 10             	add    esp,0x10
c0015a7b:	c3                   	ret    

c0015a7c <picGetIRQReg(int)>:
c0015a7c:	83 ec 10             	sub    esp,0x10
c0015a7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a83:	25 ff 00 00 00       	and    eax,0xff
c0015a88:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a8f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015a93:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015a97:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015a9c:	ee                   	out    dx,al
c0015a9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015aa1:	25 ff 00 00 00       	and    eax,0xff
c0015aa6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015aad:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015ab1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015ab5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015aba:	ee                   	out    dx,al
c0015abb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015ac2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015ac7:	89 c2                	mov    edx,eax
c0015ac9:	ec                   	in     al,dx
c0015aca:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015ace:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015ad2:	25 ff 00 00 00       	and    eax,0xff
c0015ad7:	c1 e0 08             	shl    eax,0x8
c0015ada:	89 c1                	mov    ecx,eax
c0015adc:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015ae3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015ae8:	89 c2                	mov    edx,eax
c0015aea:	ec                   	in     al,dx
c0015aeb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015aef:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015af3:	25 ff 00 00 00       	and    eax,0xff
c0015af8:	09 c8                	or     eax,ecx
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	c3                   	ret    
c0015afe:	66 90                	xchg   ax,ax

c0015b00 <picOpen()>:
c0015b00:	83 ec 50             	sub    esp,0x50
c0015b03:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015b0a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015b0f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b17:	ee                   	out    dx,al
c0015b18:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015b1f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015b24:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015b28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b2c:	ee                   	out    dx,al
c0015b2d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015b35:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b3d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b48:	89 c2                	mov    edx,eax
c0015b4a:	ec                   	in     al,dx
c0015b4b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b4f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b53:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b57:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b62:	89 c2                	mov    edx,eax
c0015b64:	ec                   	in     al,dx
c0015b65:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b69:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b6d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b71:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015b78:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015b7d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015b81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b85:	ee                   	out    dx,al
c0015b86:	e8 b5 fe ff ff       	call   c0015a40 <picIoWait()>
c0015b8b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015b92:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015b97:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015b9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b9f:	ee                   	out    dx,al
c0015ba0:	e8 9b fe ff ff       	call   c0015a40 <picIoWait()>
c0015ba5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015ba9:	25 ff 00 00 00       	and    eax,0xff
c0015bae:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015bb5:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015bb9:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015bbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bc1:	ee                   	out    dx,al
c0015bc2:	e8 79 fe ff ff       	call   c0015a40 <picIoWait()>
c0015bc7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015bcb:	25 ff 00 00 00       	and    eax,0xff
c0015bd0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015bd7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015bdb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015bdf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015be3:	ee                   	out    dx,al
c0015be4:	e8 57 fe ff ff       	call   c0015a40 <picIoWait()>
c0015be9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015bf0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015bf5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015bf9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015bfd:	ee                   	out    dx,al
c0015bfe:	e8 3d fe ff ff       	call   c0015a40 <picIoWait()>
c0015c03:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015c0a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015c0f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015c13:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015c17:	ee                   	out    dx,al
c0015c18:	e8 23 fe ff ff       	call   c0015a40 <picIoWait()>
c0015c1d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015c24:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015c29:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015c2d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015c31:	ee                   	out    dx,al
c0015c32:	e8 09 fe ff ff       	call   c0015a40 <picIoWait()>
c0015c37:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c3e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c43:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c47:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c4b:	ee                   	out    dx,al
c0015c4c:	e8 ef fd ff ff       	call   c0015a40 <picIoWait()>
c0015c51:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c55:	25 ff 00 00 00       	and    eax,0xff
c0015c5a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c61:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c65:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c69:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c6d:	ee                   	out    dx,al
c0015c6e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c72:	25 ff 00 00 00       	and    eax,0xff
c0015c77:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015c7e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015c82:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015c86:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015c8a:	ee                   	out    dx,al
c0015c8b:	90                   	nop
c0015c8c:	83 c4 50             	add    esp,0x50
c0015c8f:	c3                   	ret    

c0015c90 <picEOI(int)>:
c0015c90:	83 ec 10             	sub    esp,0x10
c0015c93:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c98:	75 22                	jne    c0015cbc <picEOI(int)+0x2c>
c0015c9a:	6a 0b                	push   0xb
c0015c9c:	e8 db fd ff ff       	call   c0015a7c <picGetIRQReg(int)>
c0015ca1:	83 c4 04             	add    esp,0x4
c0015ca4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015ca9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015cae:	25 ff ff 00 00       	and    eax,0xffff
c0015cb3:	25 80 00 00 00       	and    eax,0x80
c0015cb8:	74 72                	je     c0015d2c <picEOI(int)+0x9c>
c0015cba:	66 90                	xchg   ax,ax
c0015cbc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015cc1:	75 31                	jne    c0015cf4 <picEOI(int)+0x64>
c0015cc3:	6a 0b                	push   0xb
c0015cc5:	e8 b2 fd ff ff       	call   c0015a7c <picGetIRQReg(int)>
c0015cca:	83 c4 04             	add    esp,0x4
c0015ccd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015cd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cd6:	66 85 c0             	test   ax,ax
c0015cd9:	78 19                	js     c0015cf4 <picEOI(int)+0x64>
c0015cdb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015ce2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015ce7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015ceb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015cf0:	ee                   	out    dx,al
c0015cf1:	eb 3d                	jmp    c0015d30 <picEOI(int)+0xa0>
c0015cf3:	90                   	nop
c0015cf4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015cf9:	7e 19                	jle    c0015d14 <picEOI(int)+0x84>
c0015cfb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015d02:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015d07:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015d0b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015d10:	ee                   	out    dx,al
c0015d11:	8d 76 00             	lea    esi,[esi+0x0]
c0015d14:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015d1b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015d20:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015d24:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015d29:	ee                   	out    dx,al
c0015d2a:	eb 04                	jmp    c0015d30 <picEOI(int)+0xa0>
c0015d2c:	90                   	nop
c0015d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d30:	83 c4 10             	add    esp,0x10
c0015d33:	c3                   	ret    

c0015d34 <RTC::open(int, int, void*)>:
c0015d34:	31 c0                	xor    eax,eax
c0015d36:	c3                   	ret    
c0015d37:	90                   	nop

c0015d38 <RTC::close(int, int, void*)>:
c0015d38:	31 c0                	xor    eax,eax
c0015d3a:	c3                   	ret    
c0015d3b:	90                   	nop

c0015d3c <RTC::timeInSecondsUTC()>:
c0015d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d40:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d46:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d4c:	c3                   	ret    
c0015d4d:	90                   	nop

c0015d4e <RTC::timeInDatetimeUTC()>:
c0015d4e:	53                   	push   ebx
c0015d4f:	83 ec 14             	sub    esp,0x14
c0015d52:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d5c:	50                   	push   eax
c0015d5d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d60:	83 c4 0c             	add    esp,0xc
c0015d63:	52                   	push   edx
c0015d64:	50                   	push   eax
c0015d65:	53                   	push   ebx
c0015d66:	e8 3d 5f ff ff       	call   c000bca8 <secondsToDatetime(unsigned long long)>
c0015d6b:	89 d8                	mov    eax,ebx
c0015d6d:	83 c4 14             	add    esp,0x14
c0015d70:	5b                   	pop    ebx
c0015d71:	c2 04 00             	ret    0x4

c0015d74 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d74:	56                   	push   esi
c0015d75:	53                   	push   ebx
c0015d76:	83 ec 14             	sub    esp,0x14
c0015d79:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d7f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015d82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d86:	52                   	push   edx
c0015d87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d8f:	50                   	push   eax
c0015d90:	e8 13 5f ff ff       	call   c000bca8 <secondsToDatetime(unsigned long long)>
c0015d95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d9d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015da1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015da5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015da9:	89 f0                	mov    eax,esi
c0015dab:	83 c4 20             	add    esp,0x20
c0015dae:	5b                   	pop    ebx
c0015daf:	5e                   	pop    esi
c0015db0:	ff e0                	jmp    eax

c0015db2 <RTC::~RTC()>:
c0015db2:	83 ec 0c             	sub    esp,0xc
c0015db5:	ba ec ee 01 c0       	mov    edx,0xc001eeec
c0015dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dbe:	89 10                	mov    DWORD PTR [eax],edx
c0015dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dc4:	83 ec 0c             	sub    esp,0xc
c0015dc7:	50                   	push   eax
c0015dc8:	e8 5f 5c ff ff       	call   c000ba2c <Clock::~Clock()>
c0015dcd:	83 c4 10             	add    esp,0x10
c0015dd0:	90                   	nop
c0015dd1:	83 c4 0c             	add    esp,0xc
c0015dd4:	c3                   	ret    
c0015dd5:	90                   	nop

c0015dd6 <RTC::~RTC()>:
c0015dd6:	83 ec 0c             	sub    esp,0xc
c0015dd9:	83 ec 0c             	sub    esp,0xc
c0015ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015de0:	e8 cd ff ff ff       	call   c0015db2 <RTC::~RTC()>
c0015de5:	83 c4 10             	add    esp,0x10
c0015de8:	83 ec 08             	sub    esp,0x8
c0015deb:	68 60 01 00 00       	push   0x160
c0015df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015df4:	e8 05 4c ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c0015df9:	83 c4 10             	add    esp,0x10
c0015dfc:	83 c4 0c             	add    esp,0xc
c0015dff:	c3                   	ret    

c0015e00 <RTC::get_update_in_progress_flag()>:
c0015e00:	83 ec 14             	sub    esp,0x14
c0015e03:	6a 0a                	push   0xa
c0015e05:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015e0b:	e8 3a 17 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e10:	83 c4 1c             	add    esp,0x1c
c0015e13:	c0 e8 07             	shr    al,0x7
c0015e16:	c3                   	ret    
c0015e17:	90                   	nop

c0015e18 <RTC::completeRTCRefresh()>:
c0015e18:	55                   	push   ebp
c0015e19:	57                   	push   edi
c0015e1a:	56                   	push   esi
c0015e1b:	53                   	push   ebx
c0015e1c:	83 ec 2c             	sub    esp,0x2c
c0015e1f:	8b 1d 6c 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f6c
c0015e25:	83 ec 0c             	sub    esp,0xc
c0015e28:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e2c:	e8 cf ff ff ff       	call   c0015e00 <RTC::get_update_in_progress_flag()>
c0015e31:	83 c4 10             	add    esp,0x10
c0015e34:	84 c0                	test   al,al
c0015e36:	74 0e                	je     c0015e46 <RTC::completeRTCRefresh()+0x2e>
c0015e38:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e3e:	3b 05 6c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f6c
c0015e44:	73 df                	jae    c0015e25 <RTC::completeRTCRefresh()+0xd>
c0015e46:	55                   	push   ebp
c0015e47:	55                   	push   ebp
c0015e48:	6a 00                	push   0x0
c0015e4a:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015e50:	e8 f5 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e55:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e59:	58                   	pop    eax
c0015e5a:	5a                   	pop    edx
c0015e5b:	6a 02                	push   0x2
c0015e5d:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015e63:	e8 e2 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e68:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e6c:	59                   	pop    ecx
c0015e6d:	5b                   	pop    ebx
c0015e6e:	6a 04                	push   0x4
c0015e70:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015e76:	e8 cf 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e7b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015e7f:	5e                   	pop    esi
c0015e80:	5f                   	pop    edi
c0015e81:	6a 07                	push   0x7
c0015e83:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015e89:	e8 bc 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e8e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015e92:	5d                   	pop    ebp
c0015e93:	58                   	pop    eax
c0015e94:	6a 08                	push   0x8
c0015e96:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015e9c:	e8 a9 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ea1:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015ea5:	58                   	pop    eax
c0015ea6:	5a                   	pop    edx
c0015ea7:	6a 09                	push   0x9
c0015ea9:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015eaf:	e8 96 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015eb4:	83 c4 10             	add    esp,0x10
c0015eb7:	0f b6 e8             	movzx  ebp,al
c0015eba:	8b 1d 6c 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f6c
c0015ec0:	83 ec 0c             	sub    esp,0xc
c0015ec3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ec7:	e8 34 ff ff ff       	call   c0015e00 <RTC::get_update_in_progress_flag()>
c0015ecc:	83 c4 10             	add    esp,0x10
c0015ecf:	84 c0                	test   al,al
c0015ed1:	74 0e                	je     c0015ee1 <RTC::completeRTCRefresh()+0xc9>
c0015ed3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015ed9:	3b 05 6c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f6c
c0015edf:	73 df                	jae    c0015ec0 <RTC::completeRTCRefresh()+0xa8>
c0015ee1:	50                   	push   eax
c0015ee2:	50                   	push   eax
c0015ee3:	6a 00                	push   0x0
c0015ee5:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015eeb:	e8 5a 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ef0:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015ef4:	58                   	pop    eax
c0015ef5:	5a                   	pop    edx
c0015ef6:	6a 02                	push   0x2
c0015ef8:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015efe:	e8 47 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f03:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f07:	59                   	pop    ecx
c0015f08:	5b                   	pop    ebx
c0015f09:	6a 04                	push   0x4
c0015f0b:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015f11:	e8 34 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f16:	5e                   	pop    esi
c0015f17:	88 c3                	mov    bl,al
c0015f19:	5f                   	pop    edi
c0015f1a:	6a 07                	push   0x7
c0015f1c:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015f22:	e8 23 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f27:	89 c6                	mov    esi,eax
c0015f29:	58                   	pop    eax
c0015f2a:	5a                   	pop    edx
c0015f2b:	6a 08                	push   0x8
c0015f2d:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015f33:	e8 12 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f38:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f3c:	59                   	pop    ecx
c0015f3d:	5f                   	pop    edi
c0015f3e:	6a 09                	push   0x9
c0015f40:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015f46:	e8 ff 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f4b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f4f:	0f b6 f8             	movzx  edi,al
c0015f52:	83 c4 10             	add    esp,0x10
c0015f55:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f59:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f5d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f61:	89 f1                	mov    ecx,esi
c0015f63:	0f 94 c0             	sete   al
c0015f66:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f6a:	0f 94 c2             	sete   dl
c0015f6d:	21 d0                	and    eax,edx
c0015f6f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f73:	0f 94 c2             	sete   dl
c0015f76:	21 c2                	and    edx,eax
c0015f78:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015f7c:	0f 94 c0             	sete   al
c0015f7f:	21 d0                	and    eax,edx
c0015f81:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f85:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015f89:	0f 94 c1             	sete   cl
c0015f8c:	84 c8                	test   al,cl
c0015f8e:	75 29                	jne    c0015fb9 <RTC::completeRTCRefresh()+0x1a1>
c0015f90:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f94:	89 fd                	mov    ebp,edi
c0015f96:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f9a:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015f9e:	89 f0                	mov    eax,esi
c0015fa0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015fa4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fa8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015fac:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fb0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015fb4:	e9 01 ff ff ff       	jmp    c0015eba <RTC::completeRTCRefresh()+0xa2>
c0015fb9:	39 fd                	cmp    ebp,edi
c0015fbb:	75 d3                	jne    c0015f90 <RTC::completeRTCRefresh()+0x178>
c0015fbd:	55                   	push   ebp
c0015fbe:	55                   	push   ebp
c0015fbf:	6a 0b                	push   0xb
c0015fc1:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0015fc7:	e8 7e 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015fcc:	83 c4 10             	add    esp,0x10
c0015fcf:	89 c5                	mov    ebp,eax
c0015fd1:	a8 04                	test   al,0x4
c0015fd3:	75 78                	jne    c001604d <RTC::completeRTCRefresh()+0x235>
c0015fd5:	b1 0a                	mov    cl,0xa
c0015fd7:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015fdb:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fdf:	83 e2 0f             	and    edx,0xf
c0015fe2:	c0 e8 04             	shr    al,0x4
c0015fe5:	c1 ef 04             	shr    edi,0x4
c0015fe8:	f6 e1                	mul    cl
c0015fea:	6b ff 0a             	imul   edi,edi,0xa
c0015fed:	01 d0                	add    eax,edx
c0015fef:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015ff3:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015ff7:	83 e2 0f             	and    edx,0xf
c0015ffa:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015ffe:	c0 e8 04             	shr    al,0x4
c0016001:	f6 e1                	mul    cl
c0016003:	01 d0                	add    eax,edx
c0016005:	88 da                	mov    dl,bl
c0016007:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001600b:	83 e2 0f             	and    edx,0xf
c001600e:	88 d8                	mov    al,bl
c0016010:	83 e3 80             	and    ebx,0xffffff80
c0016013:	c0 e8 04             	shr    al,0x4
c0016016:	83 e0 07             	and    eax,0x7
c0016019:	f6 e1                	mul    cl
c001601b:	01 d0                	add    eax,edx
c001601d:	89 f2                	mov    edx,esi
c001601f:	09 c3                	or     ebx,eax
c0016021:	83 e2 0f             	and    edx,0xf
c0016024:	89 f0                	mov    eax,esi
c0016026:	c0 e8 04             	shr    al,0x4
c0016029:	f6 e1                	mul    cl
c001602b:	8d 34 02             	lea    esi,[edx+eax*1]
c001602e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016032:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016036:	83 e2 0f             	and    edx,0xf
c0016039:	c0 e8 04             	shr    al,0x4
c001603c:	f6 e1                	mul    cl
c001603e:	01 d0                	add    eax,edx
c0016040:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016044:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016048:	83 e0 0f             	and    eax,0xf
c001604b:	01 c7                	add    edi,eax
c001604d:	83 e5 02             	and    ebp,0x2
c0016050:	75 14                	jne    c0016066 <RTC::completeRTCRefresh()+0x24e>
c0016052:	84 db                	test   bl,bl
c0016054:	79 10                	jns    c0016066 <RTC::completeRTCRefresh()+0x24e>
c0016056:	83 e3 7f             	and    ebx,0x7f
c0016059:	b9 18 00 00 00       	mov    ecx,0x18
c001605e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016061:	99                   	cdq    
c0016062:	f7 f9                	idiv   ecx
c0016064:	88 d3                	mov    bl,dl
c0016066:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001606c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0016072:	77 06                	ja     c001607a <RTC::completeRTCRefresh()+0x262>
c0016074:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001607a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001607f:	31 d2                	xor    edx,edx
c0016081:	c1 e1 10             	shl    ecx,0x10
c0016084:	89 d7                	mov    edi,edx
c0016086:	c1 e5 10             	shl    ebp,0x10
c0016089:	31 c0                	xor    eax,eax
c001608b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016091:	09 cf                	or     edi,ecx
c0016093:	89 fa                	mov    edx,edi
c0016095:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016099:	88 da                	mov    dl,bl
c001609b:	89 f3                	mov    ebx,esi
c001609d:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c00160a1:	88 d8                	mov    al,bl
c00160a3:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c00160a7:	0f b7 c8             	movzx  ecx,ax
c00160aa:	09 e9                	or     ecx,ebp
c00160ac:	89 c8                	mov    eax,ecx
c00160ae:	51                   	push   ecx
c00160af:	51                   	push   ecx
c00160b0:	52                   	push   edx
c00160b1:	50                   	push   eax
c00160b2:	e8 64 5a ff ff       	call   c000bb1b <datetimeToSeconds(datetime_t)>
c00160b7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00160bb:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00160c1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00160c7:	83 c4 3c             	add    esp,0x3c
c00160ca:	5b                   	pop    ebx
c00160cb:	5e                   	pop    esi
c00160cc:	5f                   	pop    edi
c00160cd:	5d                   	pop    ebp
c00160ce:	c3                   	ret    
c00160cf:	90                   	nop

c00160d0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00160d0:	55                   	push   ebp
c00160d1:	57                   	push   edi
c00160d2:	56                   	push   esi
c00160d3:	53                   	push   ebx
c00160d4:	83 ec 30             	sub    esp,0x30
c00160d7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00160db:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00160df:	6a 00                	push   0x0
c00160e1:	6a 00                	push   0x0
c00160e3:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c00160e9:	e8 72 15 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00160ee:	83 c4 0c             	add    esp,0xc
c00160f1:	6a 00                	push   0x0
c00160f3:	6a 02                	push   0x2
c00160f5:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c00160fb:	e8 60 15 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016100:	31 d2                	xor    edx,edx
c0016102:	89 f9                	mov    ecx,edi
c0016104:	89 f8                	mov    eax,edi
c0016106:	c1 e9 10             	shr    ecx,0x10
c0016109:	0f b6 c4             	movzx  eax,ah
c001610c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016110:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016114:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016118:	b9 64 00 00 00       	mov    ecx,0x64
c001611d:	89 f0                	mov    eax,esi
c001611f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016123:	89 f0                	mov    eax,esi
c0016125:	0f b6 c4             	movzx  eax,ah
c0016128:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001612c:	89 f0                	mov    eax,esi
c001612e:	c1 e8 10             	shr    eax,0x10
c0016131:	66 f7 f1             	div    cx
c0016134:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016139:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001613e:	59                   	pop    ecx
c001613f:	5b                   	pop    ebx
c0016140:	89 fb                	mov    ebx,edi
c0016142:	6a 0b                	push   0xb
c0016144:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c001614a:	e8 fb 13 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c001614f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016153:	83 c4 10             	add    esp,0x10
c0016156:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001615b:	75 74                	jne    c00161d1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c001615d:	b2 0a                	mov    dl,0xa
c001615f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016163:	0f b6 c1             	movzx  eax,cl
c0016166:	f6 f2                	div    dl
c0016168:	88 c3                	mov    bl,al
c001616a:	88 e0                	mov    al,ah
c001616c:	c1 e3 04             	shl    ebx,0x4
c001616f:	09 c3                	or     ebx,eax
c0016171:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016176:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001617a:	f6 f2                	div    dl
c001617c:	88 c1                	mov    cl,al
c001617e:	88 e0                	mov    al,ah
c0016180:	c1 e1 04             	shl    ecx,0x4
c0016183:	09 c1                	or     ecx,eax
c0016185:	89 f8                	mov    eax,edi
c0016187:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001618b:	0f b6 c0             	movzx  eax,al
c001618e:	f6 f2                	div    dl
c0016190:	88 c3                	mov    bl,al
c0016192:	88 e0                	mov    al,ah
c0016194:	c1 e3 04             	shl    ebx,0x4
c0016197:	09 c3                	or     ebx,eax
c0016199:	89 f0                	mov    eax,esi
c001619b:	0f b6 c0             	movzx  eax,al
c001619e:	f6 f2                	div    dl
c00161a0:	88 c1                	mov    cl,al
c00161a2:	88 e0                	mov    al,ah
c00161a4:	c1 e1 04             	shl    ecx,0x4
c00161a7:	09 c1                	or     ecx,eax
c00161a9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161ae:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00161b2:	f6 f2                	div    dl
c00161b4:	88 c1                	mov    cl,al
c00161b6:	88 e0                	mov    al,ah
c00161b8:	c1 e1 04             	shl    ecx,0x4
c00161bb:	09 c1                	or     ecx,eax
c00161bd:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00161c2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00161c6:	f6 f2                	div    dl
c00161c8:	89 c5                	mov    ebp,eax
c00161ca:	88 e0                	mov    al,ah
c00161cc:	c1 e5 04             	shl    ebp,0x4
c00161cf:	09 c5                	or     ebp,eax
c00161d1:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00161d6:	75 17                	jne    c00161ef <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161d8:	80 fb 0b             	cmp    bl,0xb
c00161db:	76 0c                	jbe    c00161e9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00161dd:	80 eb 0c             	sub    bl,0xc
c00161e0:	75 02                	jne    c00161e4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00161e2:	b3 0c                	mov    bl,0xc
c00161e4:	83 cb 80             	or     ebx,0xffffff80
c00161e7:	eb 06                	jmp    c00161ef <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161e9:	84 db                	test   bl,bl
c00161eb:	75 02                	jne    c00161ef <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161ed:	b3 0c                	mov    bl,0xc
c00161ef:	0f b6 db             	movzx  ebx,bl
c00161f2:	50                   	push   eax
c00161f3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00161f8:	50                   	push   eax
c00161f9:	6a 00                	push   0x0
c00161fb:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0016201:	e8 5a 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016206:	83 c4 0c             	add    esp,0xc
c0016209:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001620e:	50                   	push   eax
c001620f:	6a 02                	push   0x2
c0016211:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0016217:	e8 44 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c001621c:	83 c4 0c             	add    esp,0xc
c001621f:	53                   	push   ebx
c0016220:	6a 04                	push   0x4
c0016222:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0016228:	e8 33 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c001622d:	83 c4 0c             	add    esp,0xc
c0016230:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016235:	50                   	push   eax
c0016236:	6a 07                	push   0x7
c0016238:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c001623e:	e8 1d 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016243:	83 c4 0c             	add    esp,0xc
c0016246:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001624b:	50                   	push   eax
c001624c:	6a 08                	push   0x8
c001624e:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0016254:	e8 07 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016259:	83 c4 0c             	add    esp,0xc
c001625c:	89 e8                	mov    eax,ebp
c001625e:	0f b6 e8             	movzx  ebp,al
c0016261:	55                   	push   ebp
c0016262:	6a 09                	push   0x9
c0016264:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c001626a:	e8 f1 13 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c001626f:	5a                   	pop    edx
c0016270:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016274:	e8 9f fb ff ff       	call   c0015e18 <RTC::completeRTCRefresh()>
c0016279:	83 c4 3c             	add    esp,0x3c
c001627c:	b0 01                	mov    al,0x1
c001627e:	5b                   	pop    ebx
c001627f:	5e                   	pop    esi
c0016280:	5f                   	pop    edi
c0016281:	5d                   	pop    ebp
c0016282:	c3                   	ret    

c0016283 <rtcIRQHandler(regs*, void*)>:
c0016283:	53                   	push   ebx
c0016284:	83 ec 10             	sub    esp,0x10
c0016287:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001628b:	6a 0c                	push   0xc
c001628d:	ff 35 98 09 02 c0    	push   DWORD PTR ds:0xc0020998
c0016293:	e8 b2 12 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0016298:	83 c4 10             	add    esp,0x10
c001629b:	84 c0                	test   al,al
c001629d:	79 24                	jns    c00162c3 <rtcIRQHandler(regs*, void*)+0x40>
c001629f:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00162a6:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00162ad:	66 ff 05 f4 3e 02 c0 	inc    WORD PTR ds:0xc0023ef4
c00162b4:	75 0d                	jne    c00162c3 <rtcIRQHandler(regs*, void*)+0x40>
c00162b6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00162ba:	83 c4 08             	add    esp,0x8
c00162bd:	5b                   	pop    ebx
c00162be:	e9 55 fb ff ff       	jmp    c0015e18 <RTC::completeRTCRefresh()>
c00162c3:	83 c4 08             	add    esp,0x8
c00162c6:	5b                   	pop    ebx
c00162c7:	c3                   	ret    

c00162c8 <RTC::RTC()>:
c00162c8:	83 ec 1c             	sub    esp,0x1c
c00162cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162cf:	83 ec 08             	sub    esp,0x8
c00162d2:	68 cf ee 01 c0       	push   0xc001eecf
c00162d7:	50                   	push   eax
c00162d8:	e8 19 57 ff ff       	call   c000b9f6 <Clock::Clock(char const*)>
c00162dd:	83 c4 10             	add    esp,0x10
c00162e0:	ba ec ee 01 c0       	mov    edx,0xc001eeec
c00162e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162e9:	89 10                	mov    DWORD PTR [eax],edx
c00162eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162ef:	83 ec 0c             	sub    esp,0xc
c00162f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162f6:	6a 01                	push   0x1
c00162f8:	68 83 62 01 c0       	push   0xc0016283
c00162fd:	6a 08                	push   0x8
c00162ff:	50                   	push   eax
c0016300:	e8 db 5b ff ff       	call   c000bee0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016305:	83 c4 20             	add    esp,0x20
c0016308:	89 c2                	mov    edx,eax
c001630a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001630e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016314:	fa                   	cli    
c0016315:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c001631a:	40                   	inc    eax
c001631b:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0016320:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c0016325:	83 ec 08             	sub    esp,0x8
c0016328:	6a 0b                	push   0xb
c001632a:	50                   	push   eax
c001632b:	e8 1a 12 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0016330:	83 c4 10             	add    esp,0x10
c0016333:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016337:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c001633c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016340:	83 ca 10             	or     edx,0x10
c0016343:	81 e2 ff 00 00 00    	and    edx,0xff
c0016349:	83 ec 04             	sub    esp,0x4
c001634c:	52                   	push   edx
c001634d:	6a 0b                	push   0xb
c001634f:	50                   	push   eax
c0016350:	e8 0b 13 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016355:	83 c4 10             	add    esp,0x10
c0016358:	83 ec 0c             	sub    esp,0xc
c001635b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001635f:	e8 b4 fa ff ff       	call   c0015e18 <RTC::completeRTCRefresh()>
c0016364:	83 c4 10             	add    esp,0x10
c0016367:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c001636c:	48                   	dec    eax
c001636d:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0016372:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0016377:	85 c0                	test   eax,eax
c0016379:	75 01                	jne    c001637c <RTC::RTC()+0xb4>
c001637b:	fb                   	sti    
c001637c:	90                   	nop
c001637d:	83 c4 1c             	add    esp,0x1c
c0016380:	c3                   	ret    
c0016381:	66 90                	xchg   ax,ax
c0016383:	90                   	nop

c0016384 <HalConsoleScroll(int, int)>:
c0016384:	83 ec 10             	sub    esp,0x10
c0016387:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001638f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0016397:	90                   	nop
c0016398:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001639d:	0f 8f e1 00 00 00    	jg     c0016484 <HalConsoleScroll(int, int)+0x100>
c00163a3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00163ab:	90                   	nop
c00163ac:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00163b4:	0f 8f be 00 00 00    	jg     c0016478 <HalConsoleScroll(int, int)+0xf4>
c00163ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163be:	89 d0                	mov    eax,edx
c00163c0:	c1 e0 02             	shl    eax,0x2
c00163c3:	01 d0                	add    eax,edx
c00163c5:	c1 e0 05             	shl    eax,0x5
c00163c8:	89 c2                	mov    edx,eax
c00163ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ce:	01 d0                	add    eax,edx
c00163d0:	89 c2                	mov    edx,eax
c00163d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163d6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00163d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163dd:	89 d0                	mov    eax,edx
c00163df:	c1 e0 02             	shl    eax,0x2
c00163e2:	01 d0                	add    eax,edx
c00163e4:	c1 e0 05             	shl    eax,0x5
c00163e7:	89 c2                	mov    edx,eax
c00163e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ed:	01 d0                	add    eax,edx
c00163ef:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00163f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163f9:	01 c2                	add    edx,eax
c00163fb:	8a 01                	mov    al,BYTE PTR [ecx]
c00163fd:	88 02                	mov    BYTE PTR [edx],al
c00163ff:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016404:	75 66                	jne    c001646c <HalConsoleScroll(int, int)+0xe8>
c0016406:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001640a:	83 e0 01             	and    eax,0x1
c001640d:	74 39                	je     c0016448 <HalConsoleScroll(int, int)+0xc4>
c001640f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016413:	83 e0 0f             	and    eax,0xf
c0016416:	88 c2                	mov    dl,al
c0016418:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001641c:	c1 e0 04             	shl    eax,0x4
c001641f:	88 d1                	mov    cl,dl
c0016421:	09 c1                	or     ecx,eax
c0016423:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016427:	89 d0                	mov    eax,edx
c0016429:	c1 e0 02             	shl    eax,0x2
c001642c:	01 d0                	add    eax,edx
c001642e:	c1 e0 05             	shl    eax,0x5
c0016431:	89 c2                	mov    edx,eax
c0016433:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016437:	01 d0                	add    eax,edx
c0016439:	89 c2                	mov    edx,eax
c001643b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001643f:	01 d0                	add    eax,edx
c0016441:	88 ca                	mov    dl,cl
c0016443:	88 10                	mov    BYTE PTR [eax],dl
c0016445:	eb 25                	jmp    c001646c <HalConsoleScroll(int, int)+0xe8>
c0016447:	90                   	nop
c0016448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001644c:	89 d0                	mov    eax,edx
c001644e:	c1 e0 02             	shl    eax,0x2
c0016451:	01 d0                	add    eax,edx
c0016453:	c1 e0 05             	shl    eax,0x5
c0016456:	89 c2                	mov    edx,eax
c0016458:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001645c:	01 d0                	add    eax,edx
c001645e:	89 c2                	mov    edx,eax
c0016460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016464:	01 d0                	add    eax,edx
c0016466:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016469:	8d 76 00             	lea    esi,[esi+0x0]
c001646c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016470:	e9 37 ff ff ff       	jmp    c00163ac <HalConsoleScroll(int, int)+0x28>
c0016475:	8d 76 00             	lea    esi,[esi+0x0]
c0016478:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001647c:	e9 17 ff ff ff       	jmp    c0016398 <HalConsoleScroll(int, int)+0x14>
c0016481:	8d 76 00             	lea    esi,[esi+0x0]
c0016484:	90                   	nop
c0016485:	83 c4 10             	add    esp,0x10
c0016488:	c3                   	ret    
c0016489:	8d 76 00             	lea    esi,[esi+0x0]

c001648c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001648c:	83 ec 14             	sub    esp,0x14
c001648f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016493:	88 04 24             	mov    BYTE PTR [esp],al
c0016496:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016499:	25 ff 00 00 00       	and    eax,0xff
c001649e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164a2:	89 d1                	mov    ecx,edx
c00164a4:	83 e1 0f             	and    ecx,0xf
c00164a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164ab:	c1 e2 04             	shl    edx,0x4
c00164ae:	81 e2 ff 00 00 00    	and    edx,0xff
c00164b4:	09 ca                	or     edx,ecx
c00164b6:	c1 e2 08             	shl    edx,0x8
c00164b9:	09 d0                	or     eax,edx
c00164bb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00164c0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00164c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164cc:	89 d0                	mov    eax,edx
c00164ce:	c1 e0 02             	shl    eax,0x2
c00164d1:	01 d0                	add    eax,edx
c00164d3:	c1 e0 04             	shl    eax,0x4
c00164d6:	89 c2                	mov    edx,eax
c00164d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164dc:	01 d0                	add    eax,edx
c00164de:	01 c0                	add    eax,eax
c00164e0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00164e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164e8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00164ed:	66 89 02             	mov    WORD PTR [edx],ax
c00164f0:	90                   	nop
c00164f1:	83 c4 14             	add    esp,0x14
c00164f4:	c3                   	ret    
c00164f5:	8d 76 00             	lea    esi,[esi+0x0]

c00164f8 <HalConsoleCursorUpdate(int, int)>:
c00164f8:	83 ec 20             	sub    esp,0x20
c00164fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164ff:	89 c2                	mov    edx,eax
c0016501:	89 d0                	mov    eax,edx
c0016503:	c1 e0 02             	shl    eax,0x2
c0016506:	01 d0                	add    eax,edx
c0016508:	c1 e0 04             	shl    eax,0x4
c001650b:	89 c2                	mov    edx,eax
c001650d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016511:	01 d0                	add    eax,edx
c0016513:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016518:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001651f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016524:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016528:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001652c:	ee                   	out    dx,al
c001652d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016532:	25 ff 00 00 00       	and    eax,0xff
c0016537:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001653e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016542:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016546:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001654a:	ee                   	out    dx,al
c001654b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0016552:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0016557:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001655b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001655f:	ee                   	out    dx,al
c0016560:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016565:	66 c1 e8 08          	shr    ax,0x8
c0016569:	25 ff 00 00 00       	and    eax,0xff
c001656e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016575:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016579:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001657d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016581:	ee                   	out    dx,al
c0016582:	90                   	nop
c0016583:	83 c4 20             	add    esp,0x20
c0016586:	c3                   	ret    
c0016587:	90                   	nop

c0016588 <FAT::getName()>:
c0016588:	b8 20 ef 01 c0       	mov    eax,0xc001ef20
c001658d:	c3                   	ret    
c001658e:	66 90                	xchg   ax,ax

c0016590 <FAT::tell(void*, unsigned long long*)>:
c0016590:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016595:	75 09                	jne    c00165a0 <FAT::tell(void*, unsigned long long*)+0x10>
c0016597:	b8 04 00 00 00       	mov    eax,0x4
c001659c:	c3                   	ret    
c001659d:	8d 76 00             	lea    esi,[esi+0x0]
c00165a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165a5:	75 09                	jne    c00165b0 <FAT::tell(void*, unsigned long long*)+0x20>
c00165a7:	b8 04 00 00 00       	mov    eax,0x4
c00165ac:	c3                   	ret    
c00165ad:	8d 76 00             	lea    esi,[esi+0x0]
c00165b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00165b7:	ba 00 00 00 00       	mov    edx,0x0
c00165bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165c0:	89 01                	mov    DWORD PTR [ecx],eax
c00165c2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165c5:	b8 00 00 00 00       	mov    eax,0x0
c00165ca:	c3                   	ret    
c00165cb:	90                   	nop

c00165cc <FAT::stat(void*, unsigned long long*)>:
c00165cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165d1:	75 09                	jne    c00165dc <FAT::stat(void*, unsigned long long*)+0x10>
c00165d3:	b8 04 00 00 00       	mov    eax,0x4
c00165d8:	c3                   	ret    
c00165d9:	8d 76 00             	lea    esi,[esi+0x0]
c00165dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165e1:	75 09                	jne    c00165ec <FAT::stat(void*, unsigned long long*)+0x20>
c00165e3:	b8 04 00 00 00       	mov    eax,0x4
c00165e8:	c3                   	ret    
c00165e9:	8d 76 00             	lea    esi,[esi+0x0]
c00165ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00165f3:	ba 00 00 00 00       	mov    edx,0x0
c00165f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165fc:	89 01                	mov    DWORD PTR [ecx],eax
c00165fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016601:	b8 00 00 00 00       	mov    eax,0x0
c0016606:	c3                   	ret    
c0016607:	90                   	nop

c0016608 <FAT::~FAT()>:
c0016608:	83 ec 0c             	sub    esp,0xc
c001660b:	ba 6c ef 01 c0       	mov    edx,0xc001ef6c
c0016610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016614:	89 10                	mov    DWORD PTR [eax],edx
c0016616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001661a:	83 ec 0c             	sub    esp,0xc
c001661d:	50                   	push   eax
c001661e:	e8 17 48 ff ff       	call   c000ae3a <Filesystem::~Filesystem()>
c0016623:	83 c4 10             	add    esp,0x10
c0016626:	90                   	nop
c0016627:	83 c4 0c             	add    esp,0xc
c001662a:	c3                   	ret    
c001662b:	90                   	nop

c001662c <FAT::~FAT()>:
c001662c:	83 ec 0c             	sub    esp,0xc
c001662f:	83 ec 0c             	sub    esp,0xc
c0016632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016636:	e8 cd ff ff ff       	call   c0016608 <FAT::~FAT()>
c001663b:	83 c4 10             	add    esp,0x10
c001663e:	83 ec 08             	sub    esp,0x8
c0016641:	6a 08                	push   0x8
c0016643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016647:	e8 b2 43 ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001664c:	83 c4 10             	add    esp,0x10
c001664f:	83 c4 0c             	add    esp,0xc
c0016652:	c3                   	ret    
c0016653:	90                   	nop

c0016654 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016654:	83 ec 1c             	sub    esp,0x1c
c0016657:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001665e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016663:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016667:	8b 04 85 20 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0e0]
c001666e:	83 f8 ff             	cmp    eax,0xffffffff
c0016671:	75 35                	jne    c00166a8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016673:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016677:	88 c2                	mov    dl,al
c0016679:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c001667e:	01 d0                	add    eax,edx
c0016680:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016684:	8b 15 00 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f00
c001668a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001668e:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c0016695:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c001669a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001669e:	89 14 85 a0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc060],edx
c00166a5:	eb 19                	jmp    c00166c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00166a7:	90                   	nop
c00166a8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00166ac:	88 c2                	mov    dl,al
c00166ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166b2:	8b 04 85 20 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0e0]
c00166b9:	01 d0                	add    eax,edx
c00166bb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166bf:	90                   	nop
c00166c0:	83 ec 04             	sub    esp,0x4
c00166c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166cb:	8d 44 24 15          	lea    eax,[esp+0x15]
c00166cf:	50                   	push   eax
c00166d0:	e8 9f e7 fe ff       	call   c0004e74 <f_getlabel>
c00166d5:	83 c4 10             	add    esp,0x10
c00166d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00166e1:	75 09                	jne    c00166ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00166e3:	b8 00 00 00 00       	mov    eax,0x0
c00166e8:	eb 0a                	jmp    c00166f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00166ea:	66 90                	xchg   ax,ax
c00166ec:	b8 01 00 00 00       	mov    eax,0x1
c00166f1:	8d 76 00             	lea    esi,[esi+0x0]
c00166f4:	83 c4 1c             	add    esp,0x1c
c00166f7:	c3                   	ret    

c00166f8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00166f8:	57                   	push   edi
c00166f9:	83 ec 58             	sub    esp,0x58
c00166fc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016704:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016708:	b8 00 00 00 00       	mov    eax,0x0
c001670d:	b9 0f 00 00 00       	mov    ecx,0xf
c0016712:	fc                   	cld    
c0016713:	89 d7                	mov    edi,edx
c0016715:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016717:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001671b:	8b 04 85 20 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0e0]
c0016722:	83 f8 ff             	cmp    eax,0xffffffff
c0016725:	75 35                	jne    c001675c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016727:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001672b:	88 c2                	mov    dl,al
c001672d:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c0016732:	01 d0                	add    eax,edx
c0016734:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016738:	8b 15 00 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f00
c001673e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016742:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c0016749:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c001674e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016752:	89 14 85 a0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc060],edx
c0016759:	eb 19                	jmp    c0016774 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001675b:	90                   	nop
c001675c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016760:	88 c2                	mov    dl,al
c0016762:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016766:	8b 04 85 20 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0e0]
c001676d:	01 d0                	add    eax,edx
c001676f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016773:	90                   	nop
c0016774:	83 ec 08             	sub    esp,0x8
c0016777:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001677b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001677f:	50                   	push   eax
c0016780:	e8 5b a0 fe ff       	call   c00007e0 <strcat>
c0016785:	83 c4 10             	add    esp,0x10
c0016788:	83 ec 0c             	sub    esp,0xc
c001678b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001678f:	50                   	push   eax
c0016790:	e8 30 e8 fe ff       	call   c0004fc5 <f_setlabel>
c0016795:	83 c4 10             	add    esp,0x10
c0016798:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001679c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00167a1:	75 09                	jne    c00167ac <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00167a3:	b8 00 00 00 00       	mov    eax,0x0
c00167a8:	eb 0a                	jmp    c00167b4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00167aa:	66 90                	xchg   ax,ax
c00167ac:	b8 01 00 00 00       	mov    eax,0x1
c00167b1:	8d 76 00             	lea    esi,[esi+0x0]
c00167b4:	83 c4 58             	add    esp,0x58
c00167b7:	5f                   	pop    edi
c00167b8:	c3                   	ret    
c00167b9:	90                   	nop
c00167ba:	66 90                	xchg   ax,ax

c00167bc <FAT::format(LogicalDisk*, int, char const*, int)>:
c00167bc:	83 ec 2c             	sub    esp,0x2c
c00167bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00167c7:	83 ec 08             	sub    esp,0x8
c00167ca:	68 44 ef 01 c0       	push   0xc001ef44
c00167cf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167d3:	e8 28 9f fe ff       	call   c0000700 <strcmp>
c00167d8:	83 c4 10             	add    esp,0x10
c00167db:	85 c0                	test   eax,eax
c00167dd:	0f 94 c0             	sete   al
c00167e0:	84 c0                	test   al,al
c00167e2:	74 10                	je     c00167f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00167e4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167ec:	e9 b3 00 00 00       	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167f1:	8d 76 00             	lea    esi,[esi+0x0]
c00167f4:	83 ec 08             	sub    esp,0x8
c00167f7:	68 36 ef 01 c0       	push   0xc001ef36
c00167fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016800:	e8 fb 9e fe ff       	call   c0000700 <strcmp>
c0016805:	83 c4 10             	add    esp,0x10
c0016808:	85 c0                	test   eax,eax
c001680a:	0f 94 c0             	sete   al
c001680d:	84 c0                	test   al,al
c001680f:	74 0f                	je     c0016820 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016811:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016819:	e9 86 00 00 00       	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001681e:	66 90                	xchg   ax,ax
c0016820:	83 ec 08             	sub    esp,0x8
c0016823:	68 3c ef 01 c0       	push   0xc001ef3c
c0016828:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001682c:	e8 cf 9e fe ff       	call   c0000700 <strcmp>
c0016831:	83 c4 10             	add    esp,0x10
c0016834:	85 c0                	test   eax,eax
c0016836:	0f 94 c0             	sete   al
c0016839:	84 c0                	test   al,al
c001683b:	74 0b                	je     c0016848 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001683d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016845:	eb 5d                	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016847:	90                   	nop
c0016848:	83 ec 08             	sub    esp,0x8
c001684b:	68 fc cf 01 c0       	push   0xc001cffc
c0016850:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016854:	e8 a7 9e fe ff       	call   c0000700 <strcmp>
c0016859:	83 c4 10             	add    esp,0x10
c001685c:	85 c0                	test   eax,eax
c001685e:	0f 94 c0             	sete   al
c0016861:	84 c0                	test   al,al
c0016863:	74 0b                	je     c0016870 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016865:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001686d:	eb 35                	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001686f:	90                   	nop
c0016870:	83 ec 08             	sub    esp,0x8
c0016873:	68 42 ef 01 c0       	push   0xc001ef42
c0016878:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001687c:	e8 7f 9e fe ff       	call   c0000700 <strcmp>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	85 c0                	test   eax,eax
c0016886:	0f 94 c0             	sete   al
c0016889:	84 c0                	test   al,al
c001688b:	74 0b                	je     c0016898 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001688d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016895:	eb 0d                	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016897:	90                   	nop
c0016898:	b8 08 00 00 00       	mov    eax,0x8
c001689d:	e9 ea 00 00 00       	jmp    c001698c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168a2:	66 90                	xchg   ax,ax
c00168a4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00168ab:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00168b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168b4:	8b 04 85 20 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0e0]
c00168bb:	83 f8 ff             	cmp    eax,0xffffffff
c00168be:	75 34                	jne    c00168f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00168c0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168c4:	88 c2                	mov    dl,al
c00168c6:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c00168cb:	01 d0                	add    eax,edx
c00168cd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168d1:	8b 15 00 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f00
c00168d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168db:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c00168e2:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c00168e7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00168eb:	89 14 85 a0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc060],edx
c00168f2:	eb 18                	jmp    c001690c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00168f4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168f8:	88 c2                	mov    dl,al
c00168fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168fe:	8b 04 85 20 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0e0]
c0016905:	01 d0                	add    eax,edx
c0016907:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001690b:	90                   	nop
c001690c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016910:	88 04 24             	mov    BYTE PTR [esp],al
c0016913:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016917:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001691b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016923:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016928:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016930:	83 ec 0c             	sub    esp,0xc
c0016933:	68 00 20 00 00       	push   0x2000
c0016938:	e8 20 15 ff ff       	call   c0007e5d <malloc>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016944:	68 00 20 00 00       	push   0x2000
c0016949:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001694d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016951:	50                   	push   eax
c0016952:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016956:	50                   	push   eax
c0016957:	e8 59 e9 fe ff       	call   c00052b5 <f_mkfs>
c001695c:	83 c4 10             	add    esp,0x10
c001695f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016963:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016968:	75 0a                	jne    c0016974 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001696a:	b8 00 00 00 00       	mov    eax,0x0
c001696f:	eb 1b                	jmp    c001698c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016971:	8d 76 00             	lea    esi,[esi+0x0]
c0016974:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016979:	75 09                	jne    c0016984 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001697b:	b8 09 00 00 00       	mov    eax,0x9
c0016980:	eb 0a                	jmp    c001698c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016982:	66 90                	xchg   ax,ax
c0016984:	b8 01 00 00 00       	mov    eax,0x1
c0016989:	8d 76 00             	lea    esi,[esi+0x0]
c001698c:	83 c4 2c             	add    esp,0x2c
c001698f:	c3                   	ret    

c0016990 <FAT::tryMount(LogicalDisk*, int)>:
c0016990:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016996:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c001699b:	83 f8 14             	cmp    eax,0x14
c001699e:	75 18                	jne    c00169b8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00169a0:	83 ec 0c             	sub    esp,0xc
c00169a3:	68 48 ef 01 c0       	push   0xc001ef48
c00169a8:	e8 16 9d ff ff       	call   c00106c3 <KePanic(char const*)>
c00169ad:	83 c4 10             	add    esp,0x10
c00169b0:	b0 00                	mov    al,0x0
c00169b2:	e9 e9 01 00 00       	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169b7:	90                   	nop
c00169b8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00169bf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00169c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169cb:	3d 00 02 00 00       	cmp    eax,0x200
c00169d0:	74 0a                	je     c00169dc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00169d2:	b0 00                	mov    al,0x0
c00169d4:	e9 c7 01 00 00       	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169d9:	8d 76 00             	lea    esi,[esi+0x0]
c00169dc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00169e4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169eb:	8b 04 85 20 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0e0]
c00169f2:	83 f8 ff             	cmp    eax,0xffffffff
c00169f5:	74 09                	je     c0016a00 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00169f7:	b0 01                	mov    al,0x1
c00169f9:	e9 a2 01 00 00       	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169fe:	66 90                	xchg   ax,ax
c0016a00:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016a0a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016a12:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016a19:	88 c2                	mov    dl,al
c0016a1b:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c0016a20:	01 d0                	add    eax,edx
c0016a22:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016a29:	8b 15 00 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f00
c0016a2f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a36:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c0016a3d:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c0016a42:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a49:	89 14 85 a0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc060],edx
c0016a50:	83 ec 0c             	sub    esp,0xc
c0016a53:	68 34 02 00 00       	push   0x234
c0016a58:	e8 00 14 ff ff       	call   c0007e5d <malloc>
c0016a5d:	83 c4 10             	add    esp,0x10
c0016a60:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a67:	83 ec 04             	sub    esp,0x4
c0016a6a:	6a 00                	push   0x0
c0016a6c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a73:	50                   	push   eax
c0016a74:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a7b:	e8 5b d0 fe ff       	call   c0003adb <f_mount>
c0016a80:	83 c4 10             	add    esp,0x10
c0016a83:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a8a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016a92:	74 1c                	je     c0016ab0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016a94:	83 ec 0c             	sub    esp,0xc
c0016a97:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a9e:	e8 da 13 ff ff       	call   c0007e7d <rfree>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	b0 00                	mov    al,0x0
c0016aa8:	e9 f3 00 00 00       	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016aad:	8d 76 00             	lea    esi,[esi+0x0]
c0016ab0:	83 ec 04             	sub    esp,0x4
c0016ab3:	68 00 01 00 00       	push   0x100
c0016ab8:	6a 00                	push   0x0
c0016aba:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016ac1:	50                   	push   eax
c0016ac2:	e8 29 9a fe ff       	call   c00004f0 <memset>
c0016ac7:	83 c4 10             	add    esp,0x10
c0016aca:	83 ec 08             	sub    esp,0x8
c0016acd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016ad4:	50                   	push   eax
c0016ad5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016adc:	50                   	push   eax
c0016add:	e8 fe 9c fe ff       	call   c00007e0 <strcat>
c0016ae2:	83 c4 10             	add    esp,0x10
c0016ae5:	83 ec 08             	sub    esp,0x8
c0016ae8:	68 56 ef 01 c0       	push   0xc001ef56
c0016aed:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016af4:	50                   	push   eax
c0016af5:	e8 e6 9c fe ff       	call   c00007e0 <strcat>
c0016afa:	83 c4 10             	add    esp,0x10
c0016afd:	83 ec 04             	sub    esp,0x4
c0016b00:	6a 01                	push   0x1
c0016b02:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016b09:	50                   	push   eax
c0016b0a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b0e:	50                   	push   eax
c0016b0f:	e8 29 d0 fe ff       	call   c0003b3d <f_open>
c0016b14:	83 c4 10             	add    esp,0x10
c0016b17:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016b1e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016b25:	85 c0                	test   eax,eax
c0016b27:	74 0b                	je     c0016b34 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016b29:	78 31                	js     c0016b5c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b2b:	83 e8 04             	sub    eax,0x4
c0016b2e:	83 f8 01             	cmp    eax,0x1
c0016b31:	77 29                	ja     c0016b5c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b33:	90                   	nop
c0016b34:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b3c:	83 ec 0c             	sub    esp,0xc
c0016b3f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b43:	50                   	push   eax
c0016b44:	e8 a7 d7 fe ff       	call   c00042f0 <f_close>
c0016b49:	83 c4 10             	add    esp,0x10
c0016b4c:	90                   	nop
c0016b4d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b55:	74 41                	je     c0016b98 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b57:	eb 33                	jmp    c0016b8c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b59:	8d 76 00             	lea    esi,[esi+0x0]
c0016b5c:	83 ec 0c             	sub    esp,0xc
c0016b5f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b66:	e8 12 13 ff ff       	call   c0007e7d <rfree>
c0016b6b:	83 c4 10             	add    esp,0x10
c0016b6e:	83 ec 04             	sub    esp,0x4
c0016b71:	6a 00                	push   0x0
c0016b73:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b7a:	50                   	push   eax
c0016b7b:	6a 00                	push   0x0
c0016b7d:	e8 59 cf fe ff       	call   c0003adb <f_mount>
c0016b82:	83 c4 10             	add    esp,0x10
c0016b85:	b0 00                	mov    al,0x0
c0016b87:	eb 17                	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b89:	8d 76 00             	lea    esi,[esi+0x0]
c0016b8c:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c0016b91:	40                   	inc    eax
c0016b92:	a3 00 3f 02 c0       	mov    ds:0xc0023f00,eax
c0016b97:	90                   	nop
c0016b98:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016b9f:	90                   	nop
c0016ba0:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016ba6:	c3                   	ret    
c0016ba7:	90                   	nop

c0016ba8 <FAT::allocateSwapfile(char const*, int)>:
c0016ba8:	55                   	push   ebp
c0016ba9:	57                   	push   edi
c0016baa:	56                   	push   esi
c0016bab:	53                   	push   ebx
c0016bac:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016bb2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016bbd:	83 ec 0c             	sub    esp,0xc
c0016bc0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016bc7:	e8 91 12 ff ff       	call   c0007e5d <malloc>
c0016bcc:	83 c4 10             	add    esp,0x10
c0016bcf:	89 c7                	mov    edi,eax
c0016bd1:	a1 70 3e 02 c0       	mov    eax,ds:0xc0023e70
c0016bd6:	83 ec 04             	sub    esp,0x4
c0016bd9:	50                   	push   eax
c0016bda:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016be1:	57                   	push   edi
c0016be2:	e8 83 44 ff ff       	call   c000b06a <File::File(char const*, Process*)>
c0016be7:	83 c4 10             	add    esp,0x10
c0016bea:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016bf1:	83 ec 04             	sub    esp,0x4
c0016bf4:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016bf8:	50                   	push   eax
c0016bf9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016bfd:	50                   	push   eax
c0016bfe:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c05:	e8 cc 47 ff ff       	call   c000b3d6 <File::stat(unsigned long long*, bool*)>
c0016c0a:	83 c4 10             	add    esp,0x10
c0016c0d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c14:	c1 e0 14             	shl    eax,0x14
c0016c17:	89 c7                	mov    edi,eax
c0016c19:	89 c5                	mov    ebp,eax
c0016c1b:	c1 fd 1f             	sar    ebp,0x1f
c0016c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c26:	89 f9                	mov    ecx,edi
c0016c28:	31 c1                	xor    ecx,eax
c0016c2a:	89 cb                	mov    ebx,ecx
c0016c2c:	89 e9                	mov    ecx,ebp
c0016c2e:	31 d1                	xor    ecx,edx
c0016c30:	89 ce                	mov    esi,ecx
c0016c32:	89 f0                	mov    eax,esi
c0016c34:	09 d8                	or     eax,ebx
c0016c36:	0f 84 9c 00 00 00    	je     c0016cd8 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c3c:	83 ec 0c             	sub    esp,0xc
c0016c3f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c46:	e8 57 46 ff ff       	call   c000b2a2 <File::unlink()>
c0016c4b:	83 c4 10             	add    esp,0x10
c0016c4e:	83 ec 08             	sub    esp,0x8
c0016c51:	6a 12                	push   0x12
c0016c53:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c5a:	e8 cb 44 ff ff       	call   c000b12a <File::open(FileOpenMode)>
c0016c5f:	83 c4 10             	add    esp,0x10
c0016c62:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c69:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c6f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c76:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c7d:	c1 e0 14             	shl    eax,0x14
c0016c80:	83 ec 04             	sub    esp,0x4
c0016c83:	6a 01                	push   0x1
c0016c85:	50                   	push   eax
c0016c86:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016c8d:	e8 c3 e4 fe ff       	call   c0005155 <f_expand>
c0016c92:	83 c4 10             	add    esp,0x10
c0016c95:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c9e:	83 c0 10             	add    eax,0x10
c0016ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ca3:	83 ec 0c             	sub    esp,0xc
c0016ca6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016caa:	52                   	push   edx
c0016cab:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016caf:	52                   	push   edx
c0016cb0:	6a 00                	push   0x0
c0016cb2:	68 00 04 00 00       	push   0x400
c0016cb7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cbe:	ff d0                	call   eax
c0016cc0:	83 c4 20             	add    esp,0x20
c0016cc3:	83 ec 0c             	sub    esp,0xc
c0016cc6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ccd:	e8 b6 44 ff ff       	call   c000b188 <File::close()>
c0016cd2:	83 c4 10             	add    esp,0x10
c0016cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0016cd8:	83 ec 08             	sub    esp,0x8
c0016cdb:	6a 01                	push   0x1
c0016cdd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ce4:	e8 41 44 ff ff       	call   c000b12a <File::open(FileOpenMode)>
c0016ce9:	83 c4 10             	add    esp,0x10
c0016cec:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cf5:	83 c0 0c             	add    eax,0xc
c0016cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cfa:	83 ec 0c             	sub    esp,0xc
c0016cfd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016d01:	52                   	push   edx
c0016d02:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016d06:	52                   	push   edx
c0016d07:	6a 00                	push   0x0
c0016d09:	6a 04                	push   0x4
c0016d0b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016d12:	ff d0                	call   eax
c0016d14:	83 c4 20             	add    esp,0x20
c0016d17:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d1e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016d24:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016d2b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016d32:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016d35:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d3c:	83 ec 0c             	sub    esp,0xc
c0016d3f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d46:	e8 3d 44 ff ff       	call   c000b188 <File::close()>
c0016d4b:	83 c4 10             	add    esp,0x10
c0016d4e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d55:	ba 00 00 00 00       	mov    edx,0x0
c0016d5a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d60:	5b                   	pop    ebx
c0016d61:	5e                   	pop    esi
c0016d62:	5f                   	pop    edi
c0016d63:	5d                   	pop    ebp
c0016d64:	c3                   	ret    
c0016d65:	90                   	nop
c0016d66:	66 90                	xchg   ax,ax

c0016d68 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d68:	57                   	push   edi
c0016d69:	56                   	push   esi
c0016d6a:	53                   	push   ebx
c0016d6b:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d71:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016d79:	74 0d                	je     c0016d88 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016d7b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016d83:	75 0f                	jne    c0016d94 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016d85:	8d 76 00             	lea    esi,[esi+0x0]
c0016d88:	b8 04 00 00 00       	mov    eax,0x4
c0016d8d:	e9 36 01 00 00       	jmp    c0016ec8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d92:	66 90                	xchg   ax,ax
c0016d94:	83 ec 08             	sub    esp,0x8
c0016d97:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d9e:	50                   	push   eax
c0016d9f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016da6:	e8 08 d8 fe ff       	call   c00045b3 <f_readdir>
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016db5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016dbc:	83 ec 0c             	sub    esp,0xc
c0016dbf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016dc6:	83 c0 16             	add    eax,0x16
c0016dc9:	50                   	push   eax
c0016dca:	e8 91 97 fe ff       	call   c0000560 <strlen>
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	ba 00 00 00 00       	mov    edx,0x0
c0016dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ddb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016ddf:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016de6:	25 ff 00 00 00       	and    eax,0xff
c0016deb:	83 e0 10             	and    eax,0x10
c0016dee:	74 08                	je     c0016df8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016df0:	b8 02 00 00 00       	mov    eax,0x2
c0016df5:	eb 09                	jmp    c0016e00 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016df7:	90                   	nop
c0016df8:	b8 01 00 00 00       	mov    eax,0x1
c0016dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0016e00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e04:	83 ec 08             	sub    esp,0x8
c0016e07:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016e0e:	83 c0 16             	add    eax,0x16
c0016e11:	50                   	push   eax
c0016e12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e16:	83 c0 10             	add    eax,0x10
c0016e19:	50                   	push   eax
c0016e1a:	e8 01 98 fe ff       	call   c0000620 <strcpy>
c0016e1f:	83 c4 10             	add    esp,0x10
c0016e22:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016e29:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016e30:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e34:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e3b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e42:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e49:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e50:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e57:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e5e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e65:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e6c:	89 c6                	mov    esi,eax
c0016e6e:	89 d7                	mov    edi,edx
c0016e70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e72:	89 c8                	mov    eax,ecx
c0016e74:	89 fa                	mov    edx,edi
c0016e76:	89 f3                	mov    ebx,esi
c0016e78:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016e7f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016e86:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016e8d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016e94:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016e9a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016ea1:	84 c0                	test   al,al
c0016ea3:	75 07                	jne    c0016eac <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016ea5:	b8 07 00 00 00       	mov    eax,0x7
c0016eaa:	eb 1c                	jmp    c0016ec8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016eac:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016eb3:	85 c0                	test   eax,eax
c0016eb5:	75 09                	jne    c0016ec0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016eb7:	b8 00 00 00 00       	mov    eax,0x0
c0016ebc:	eb 0a                	jmp    c0016ec8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016ebe:	66 90                	xchg   ax,ax
c0016ec0:	b8 01 00 00 00       	mov    eax,0x1
c0016ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ec8:	81 c4 50 02 00 00    	add    esp,0x250
c0016ece:	5b                   	pop    ebx
c0016ecf:	5e                   	pop    esi
c0016ed0:	5f                   	pop    edi
c0016ed1:	c3                   	ret    
c0016ed2:	66 90                	xchg   ax,ax

c0016ed4 <FAT::read(void*, unsigned long, void*, int*)>:
c0016ed4:	83 ec 1c             	sub    esp,0x1c
c0016ed7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016edc:	74 0a                	je     c0016ee8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016ede:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016ee3:	75 0b                	jne    c0016ef0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee8:	b8 04 00 00 00       	mov    eax,0x4
c0016eed:	eb 41                	jmp    c0016f30 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016eef:	90                   	nop
c0016ef0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ef4:	50                   	push   eax
c0016ef5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ef9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016efd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f01:	e8 02 cf fe ff       	call   c0003e08 <f_read>
c0016f06:	83 c4 10             	add    esp,0x10
c0016f09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f11:	89 c2                	mov    edx,eax
c0016f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f17:	89 10                	mov    DWORD PTR [eax],edx
c0016f19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f1d:	85 c0                	test   eax,eax
c0016f1f:	75 07                	jne    c0016f28 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016f21:	b8 00 00 00 00       	mov    eax,0x0
c0016f26:	eb 08                	jmp    c0016f30 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f28:	b8 01 00 00 00       	mov    eax,0x1
c0016f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f30:	83 c4 1c             	add    esp,0x1c
c0016f33:	c3                   	ret    

c0016f34 <FAT::write(void*, unsigned long, void*, int*)>:
c0016f34:	83 ec 1c             	sub    esp,0x1c
c0016f37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f3c:	74 0a                	je     c0016f48 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f3e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f43:	75 0b                	jne    c0016f50 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f45:	8d 76 00             	lea    esi,[esi+0x0]
c0016f48:	b8 04 00 00 00       	mov    eax,0x4
c0016f4d:	eb 41                	jmp    c0016f90 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f4f:	90                   	nop
c0016f50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f54:	50                   	push   eax
c0016f55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f61:	e8 a1 d0 fe ff       	call   c0004007 <f_write>
c0016f66:	83 c4 10             	add    esp,0x10
c0016f69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f71:	89 c2                	mov    edx,eax
c0016f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f77:	89 10                	mov    DWORD PTR [eax],edx
c0016f79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f7d:	85 c0                	test   eax,eax
c0016f7f:	75 07                	jne    c0016f88 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016f81:	b8 00 00 00 00       	mov    eax,0x0
c0016f86:	eb 08                	jmp    c0016f90 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f88:	b8 01 00 00 00       	mov    eax,0x1
c0016f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f90:	83 c4 1c             	add    esp,0x1c
c0016f93:	c3                   	ret    

c0016f94 <FAT::close(void*)>:
c0016f94:	83 ec 1c             	sub    esp,0x1c
c0016f97:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f9c:	75 0a                	jne    c0016fa8 <FAT::close(void*)+0x14>
c0016f9e:	b8 04 00 00 00       	mov    eax,0x4
c0016fa3:	eb 3f                	jmp    c0016fe4 <FAT::close(void*)+0x50>
c0016fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0016fa8:	83 ec 0c             	sub    esp,0xc
c0016fab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016faf:	e8 3c d3 fe ff       	call   c00042f0 <f_close>
c0016fb4:	83 c4 10             	add    esp,0x10
c0016fb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fbb:	83 ec 0c             	sub    esp,0xc
c0016fbe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fc2:	e8 a6 0e ff ff       	call   c0007e6d <free>
c0016fc7:	83 c4 10             	add    esp,0x10
c0016fca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fce:	85 c0                	test   eax,eax
c0016fd0:	75 0a                	jne    c0016fdc <FAT::close(void*)+0x48>
c0016fd2:	b8 00 00 00 00       	mov    eax,0x0
c0016fd7:	eb 0b                	jmp    c0016fe4 <FAT::close(void*)+0x50>
c0016fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fdc:	b8 01 00 00 00       	mov    eax,0x1
c0016fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fe4:	83 c4 1c             	add    esp,0x1c
c0016fe7:	c3                   	ret    

c0016fe8 <FAT::closeDir(void*)>:
c0016fe8:	83 ec 1c             	sub    esp,0x1c
c0016feb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ff0:	75 0a                	jne    c0016ffc <FAT::closeDir(void*)+0x14>
c0016ff2:	b8 04 00 00 00       	mov    eax,0x4
c0016ff7:	eb 3f                	jmp    c0017038 <FAT::closeDir(void*)+0x50>
c0016ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ffc:	83 ec 0c             	sub    esp,0xc
c0016fff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017003:	e8 89 d5 fe ff       	call   c0004591 <f_closedir>
c0017008:	83 c4 10             	add    esp,0x10
c001700b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001700f:	83 ec 0c             	sub    esp,0xc
c0017012:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017016:	e8 52 0e ff ff       	call   c0007e6d <free>
c001701b:	83 c4 10             	add    esp,0x10
c001701e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017022:	85 c0                	test   eax,eax
c0017024:	75 0a                	jne    c0017030 <FAT::closeDir(void*)+0x48>
c0017026:	b8 00 00 00 00       	mov    eax,0x0
c001702b:	eb 0b                	jmp    c0017038 <FAT::closeDir(void*)+0x50>
c001702d:	8d 76 00             	lea    esi,[esi+0x0]
c0017030:	b8 01 00 00 00       	mov    eax,0x1
c0017035:	8d 76 00             	lea    esi,[esi+0x0]
c0017038:	83 c4 1c             	add    esp,0x1c
c001703b:	c3                   	ret    

c001703c <FAT::seek(void*, unsigned long long)>:
c001703c:	83 ec 2c             	sub    esp,0x2c
c001703f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017043:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017047:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001704b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001704f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017054:	75 0a                	jne    c0017060 <FAT::seek(void*, unsigned long long)+0x24>
c0017056:	b8 04 00 00 00       	mov    eax,0x4
c001705b:	eb 33                	jmp    c0017090 <FAT::seek(void*, unsigned long long)+0x54>
c001705d:	8d 76 00             	lea    esi,[esi+0x0]
c0017060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017064:	83 ec 08             	sub    esp,0x8
c0017067:	50                   	push   eax
c0017068:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001706c:	e8 ae d2 fe ff       	call   c000431f <f_lseek>
c0017071:	83 c4 10             	add    esp,0x10
c0017074:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001707c:	85 c0                	test   eax,eax
c001707e:	75 08                	jne    c0017088 <FAT::seek(void*, unsigned long long)+0x4c>
c0017080:	b8 00 00 00 00       	mov    eax,0x0
c0017085:	eb 09                	jmp    c0017090 <FAT::seek(void*, unsigned long long)+0x54>
c0017087:	90                   	nop
c0017088:	b8 01 00 00 00       	mov    eax,0x1
c001708d:	8d 76 00             	lea    esi,[esi+0x0]
c0017090:	83 c4 2c             	add    esp,0x2c
c0017093:	c3                   	ret    

c0017094 <fatWrapperReadDisk>:
c0017094:	53                   	push   ebx
c0017095:	83 ec 18             	sub    esp,0x18
c0017098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170a0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170a4:	25 ff 00 00 00       	and    eax,0xff
c00170a9:	8b 0c 85 00 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd100]
c00170b0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170b8:	ba 00 00 00 00       	mov    edx,0x0
c00170bd:	83 ec 0c             	sub    esp,0xc
c00170c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170c4:	53                   	push   ebx
c00170c5:	52                   	push   edx
c00170c6:	50                   	push   eax
c00170c7:	51                   	push   ecx
c00170c8:	e8 0f 61 ff ff       	call   c000d1dc <LogicalDisk::read(unsigned long long, int, void*)>
c00170cd:	83 c4 20             	add    esp,0x20
c00170d0:	83 c4 18             	add    esp,0x18
c00170d3:	5b                   	pop    ebx
c00170d4:	c3                   	ret    
c00170d5:	8d 76 00             	lea    esi,[esi+0x0]

c00170d8 <fatWrapperWriteDisk>:
c00170d8:	53                   	push   ebx
c00170d9:	83 ec 18             	sub    esp,0x18
c00170dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170e8:	25 ff 00 00 00       	and    eax,0xff
c00170ed:	8b 0c 85 00 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd100]
c00170f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170fc:	ba 00 00 00 00       	mov    edx,0x0
c0017101:	83 ec 0c             	sub    esp,0xc
c0017104:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017108:	53                   	push   ebx
c0017109:	52                   	push   edx
c001710a:	50                   	push   eax
c001710b:	51                   	push   ecx
c001710c:	e8 37 61 ff ff       	call   c000d248 <LogicalDisk::write(unsigned long long, int, void*)>
c0017111:	83 c4 20             	add    esp,0x20
c0017114:	83 c4 18             	add    esp,0x18
c0017117:	5b                   	pop    ebx
c0017118:	c3                   	ret    
c0017119:	8d 76 00             	lea    esi,[esi+0x0]

c001711c <fatWrapperIoctl>:
c001711c:	53                   	push   ebx
c001711d:	83 ec 28             	sub    esp,0x28
c0017120:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017124:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017128:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001712c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017130:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017135:	75 35                	jne    c001716c <fatWrapperIoctl+0x50>
c0017137:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001713b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001713f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017143:	25 ff 00 00 00       	and    eax,0xff
c0017148:	8b 04 85 00 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd100]
c001714f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017155:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001715b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001715f:	66 89 02             	mov    WORD PTR [edx],ax
c0017162:	b8 00 00 00 00       	mov    eax,0x0
c0017167:	e9 c4 00 00 00       	jmp    c0017230 <fatWrapperIoctl+0x114>
c001716c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017171:	75 75                	jne    c00171e8 <fatWrapperIoctl+0xcc>
c0017173:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017177:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001717b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001717f:	25 ff 00 00 00       	and    eax,0xff
c0017184:	8b 04 85 00 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd100]
c001718b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017191:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017197:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001719d:	89 c8                	mov    eax,ecx
c001719f:	89 da                	mov    edx,ebx
c00171a1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00171a5:	c1 e0 0a             	shl    eax,0xa
c00171a8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00171ac:	81 e1 ff 00 00 00    	and    ecx,0xff
c00171b2:	8b 0c 8d 00 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd100]
c00171b9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00171bf:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00171c5:	89 cb                	mov    ebx,ecx
c00171c7:	c1 fb 1f             	sar    ebx,0x1f
c00171ca:	53                   	push   ebx
c00171cb:	51                   	push   ecx
c00171cc:	52                   	push   edx
c00171cd:	50                   	push   eax
c00171ce:	e8 2d 50 00 00       	call   c001c200 <__udivdi3>
c00171d3:	83 c4 10             	add    esp,0x10
c00171d6:	89 c2                	mov    edx,eax
c00171d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171dc:	89 10                	mov    DWORD PTR [eax],edx
c00171de:	b8 00 00 00 00       	mov    eax,0x0
c00171e3:	eb 4b                	jmp    c0017230 <fatWrapperIoctl+0x114>
c00171e5:	8d 76 00             	lea    esi,[esi+0x0]
c00171e8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00171ed:	75 09                	jne    c00171f8 <fatWrapperIoctl+0xdc>
c00171ef:	b8 00 00 00 00       	mov    eax,0x0
c00171f4:	eb 3a                	jmp    c0017230 <fatWrapperIoctl+0x114>
c00171f6:	66 90                	xchg   ax,ax
c00171f8:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00171fd:	75 19                	jne    c0017218 <fatWrapperIoctl+0xfc>
c00171ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017203:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017207:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001720b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017211:	b8 00 00 00 00       	mov    eax,0x0
c0017216:	eb 18                	jmp    c0017230 <fatWrapperIoctl+0x114>
c0017218:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001721d:	75 09                	jne    c0017228 <fatWrapperIoctl+0x10c>
c001721f:	b8 00 00 00 00       	mov    eax,0x0
c0017224:	eb 0a                	jmp    c0017230 <fatWrapperIoctl+0x114>
c0017226:	66 90                	xchg   ax,ax
c0017228:	b8 04 00 00 00       	mov    eax,0x4
c001722d:	8d 76 00             	lea    esi,[esi+0x0]
c0017230:	83 c4 28             	add    esp,0x28
c0017233:	5b                   	pop    ebx
c0017234:	c3                   	ret    
c0017235:	90                   	nop
c0017236:	66 90                	xchg   ax,ax

c0017238 <FAT::FAT()>:
c0017238:	83 ec 1c             	sub    esp,0x1c
c001723b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001723f:	83 ec 0c             	sub    esp,0xc
c0017242:	50                   	push   eax
c0017243:	e8 ce 3b ff ff       	call   c000ae16 <Filesystem::Filesystem()>
c0017248:	83 c4 10             	add    esp,0x10
c001724b:	ba 6c ef 01 c0       	mov    edx,0xc001ef6c
c0017250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017254:	89 10                	mov    DWORD PTR [eax],edx
c0017256:	c7 05 00 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f00,0x0
c0017260:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017268:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001726d:	7f 15                	jg     c0017284 <FAT::FAT()+0x4c>
c001726f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017273:	c7 04 85 20 3f 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc0e0],0xffffffff
c001727e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017282:	eb e4                	jmp    c0017268 <FAT::FAT()+0x30>
c0017284:	90                   	nop
c0017285:	83 c4 1c             	add    esp,0x1c
c0017288:	c3                   	ret    
c0017289:	90                   	nop
c001728a:	66 90                	xchg   ax,ax

c001728c <FAT::fixFilepath(char*)>:
c001728c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017290:	8a 00                	mov    al,BYTE PTR [eax]
c0017292:	3c 40                	cmp    al,0x40
c0017294:	7e 2e                	jle    c00172c4 <FAT::fixFilepath(char*)+0x38>
c0017296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001729a:	8a 00                	mov    al,BYTE PTR [eax]
c001729c:	83 e8 41             	sub    eax,0x41
c001729f:	88 c2                	mov    dl,al
c00172a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172a5:	88 10                	mov    BYTE PTR [eax],dl
c00172a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172ab:	8a 00                	mov    al,BYTE PTR [eax]
c00172ad:	0f be c0             	movsx  eax,al
c00172b0:	8b 04 85 20 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0e0]
c00172b7:	83 c0 30             	add    eax,0x30
c00172ba:	88 c2                	mov    dl,al
c00172bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172c0:	88 10                	mov    BYTE PTR [eax],dl
c00172c2:	66 90                	xchg   ax,ax
c00172c4:	90                   	nop
c00172c5:	c3                   	ret    
c00172c6:	66 90                	xchg   ax,ax

c00172c8 <FAT::open(char const*, void**, FileOpenMode)>:
c00172c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172d6:	74 0c                	je     c00172e4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00172d8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172e0:	75 0e                	jne    c00172f0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00172e2:	66 90                	xchg   ax,ax
c00172e4:	b8 04 00 00 00       	mov    eax,0x4
c00172e9:	e9 0a 01 00 00       	jmp    c00173f8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172ee:	66 90                	xchg   ax,ax
c00172f0:	83 ec 08             	sub    esp,0x8
c00172f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172fe:	50                   	push   eax
c00172ff:	e8 1c 93 fe ff       	call   c0000620 <strcpy>
c0017304:	83 c4 10             	add    esp,0x10
c0017307:	83 ec 08             	sub    esp,0x8
c001730a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001730e:	50                   	push   eax
c001730f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017316:	e8 71 ff ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c001731b:	83 c4 10             	add    esp,0x10
c001731e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017326:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001732d:	83 e0 01             	and    eax,0x1
c0017330:	74 0a                	je     c001733c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0017332:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001733a:	66 90                	xchg   ax,ax
c001733c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017343:	83 e0 04             	and    eax,0x4
c0017346:	74 10                	je     c0017358 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017348:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017350:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017358:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001735f:	83 e0 02             	and    eax,0x2
c0017362:	74 08                	je     c001736c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017364:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001736c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017373:	83 e0 08             	and    eax,0x8
c0017376:	74 08                	je     c0017380 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017378:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017380:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017387:	83 e0 10             	and    eax,0x10
c001738a:	74 08                	je     c0017394 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001738c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017394:	83 ec 0c             	sub    esp,0xc
c0017397:	68 28 02 00 00       	push   0x228
c001739c:	e8 bc 0a ff ff       	call   c0007e5d <malloc>
c00173a1:	83 c4 10             	add    esp,0x10
c00173a4:	89 c2                	mov    edx,eax
c00173a6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173ad:	89 10                	mov    DWORD PTR [eax],edx
c00173af:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00173b6:	31 d2                	xor    edx,edx
c00173b8:	88 c2                	mov    dl,al
c00173ba:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00173c3:	83 ec 04             	sub    esp,0x4
c00173c6:	52                   	push   edx
c00173c7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00173cb:	52                   	push   edx
c00173cc:	50                   	push   eax
c00173cd:	e8 6b c7 fe ff       	call   c0003b3d <f_open>
c00173d2:	83 c4 10             	add    esp,0x10
c00173d5:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00173dc:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00173e4:	74 0a                	je     c00173f0 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00173e6:	b8 01 00 00 00       	mov    eax,0x1
c00173eb:	eb 0b                	jmp    c00173f8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00173ed:	8d 76 00             	lea    esi,[esi+0x0]
c00173f0:	b8 00 00 00 00       	mov    eax,0x0
c00173f5:	8d 76 00             	lea    esi,[esi+0x0]
c00173f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173fe:	c3                   	ret    
c00173ff:	90                   	nop

c0017400 <FAT::openDir(char const*, void**)>:
c0017400:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017406:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001740e:	74 0c                	je     c001741c <FAT::openDir(char const*, void**)+0x1c>
c0017410:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017418:	75 0e                	jne    c0017428 <FAT::openDir(char const*, void**)+0x28>
c001741a:	66 90                	xchg   ax,ax
c001741c:	b8 04 00 00 00       	mov    eax,0x4
c0017421:	e9 82 00 00 00       	jmp    c00174a8 <FAT::openDir(char const*, void**)+0xa8>
c0017426:	66 90                	xchg   ax,ax
c0017428:	83 ec 08             	sub    esp,0x8
c001742b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017432:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017436:	50                   	push   eax
c0017437:	e8 e4 91 fe ff       	call   c0000620 <strcpy>
c001743c:	83 c4 10             	add    esp,0x10
c001743f:	83 ec 08             	sub    esp,0x8
c0017442:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017446:	50                   	push   eax
c0017447:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001744e:	e8 39 fe ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c0017453:	83 c4 10             	add    esp,0x10
c0017456:	83 ec 0c             	sub    esp,0xc
c0017459:	6a 30                	push   0x30
c001745b:	e8 fd 09 ff ff       	call   c0007e5d <malloc>
c0017460:	83 c4 10             	add    esp,0x10
c0017463:	89 c2                	mov    edx,eax
c0017465:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001746c:	89 10                	mov    DWORD PTR [eax],edx
c001746e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017475:	8b 00                	mov    eax,DWORD PTR [eax]
c0017477:	83 ec 08             	sub    esp,0x8
c001747a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001747e:	52                   	push   edx
c001747f:	50                   	push   eax
c0017480:	e8 41 d0 fe ff       	call   c00044c6 <f_opendir>
c0017485:	83 c4 10             	add    esp,0x10
c0017488:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001748f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0017497:	74 07                	je     c00174a0 <FAT::openDir(char const*, void**)+0xa0>
c0017499:	b8 01 00 00 00       	mov    eax,0x1
c001749e:	eb 08                	jmp    c00174a8 <FAT::openDir(char const*, void**)+0xa8>
c00174a0:	b8 00 00 00 00       	mov    eax,0x0
c00174a5:	8d 76 00             	lea    esi,[esi+0x0]
c00174a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174ae:	c3                   	ret    
c00174af:	90                   	nop

c00174b0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00174b0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00174b6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00174be:	75 0c                	jne    c00174cc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00174c0:	b8 04 00 00 00       	mov    eax,0x4
c00174c5:	e9 d6 00 00 00       	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174ca:	66 90                	xchg   ax,ax
c00174cc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00174d4:	75 0a                	jne    c00174e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00174d6:	b8 04 00 00 00       	mov    eax,0x4
c00174db:	e9 c0 00 00 00       	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174e0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00174e8:	75 0a                	jne    c00174f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00174ea:	b8 04 00 00 00       	mov    eax,0x4
c00174ef:	e9 ac 00 00 00       	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174f4:	83 ec 08             	sub    esp,0x8
c00174f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174fe:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017505:	50                   	push   eax
c0017506:	e8 15 91 fe ff       	call   c0000620 <strcpy>
c001750b:	83 c4 10             	add    esp,0x10
c001750e:	83 ec 08             	sub    esp,0x8
c0017511:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017518:	50                   	push   eax
c0017519:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017520:	e8 67 fd ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c0017525:	83 c4 10             	add    esp,0x10
c0017528:	83 ec 08             	sub    esp,0x8
c001752b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001752f:	50                   	push   eax
c0017530:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017537:	50                   	push   eax
c0017538:	e8 08 d1 fe ff       	call   c0004645 <f_stat>
c001753d:	83 c4 10             	add    esp,0x10
c0017540:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017547:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001754e:	85 c0                	test   eax,eax
c0017550:	74 0a                	je     c001755c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0017552:	83 f8 04             	cmp    eax,0x4
c0017555:	74 39                	je     c0017590 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017557:	eb 3f                	jmp    c0017598 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017559:	8d 76 00             	lea    esi,[esi+0x0]
c001755c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017560:	25 ff 00 00 00       	and    eax,0xff
c0017565:	83 e0 10             	and    eax,0x10
c0017568:	0f 95 c2             	setne  dl
c001756b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017572:	88 10                	mov    BYTE PTR [eax],dl
c0017574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017578:	ba 00 00 00 00       	mov    edx,0x0
c001757d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017584:	89 01                	mov    DWORD PTR [ecx],eax
c0017586:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017589:	b8 00 00 00 00       	mov    eax,0x0
c001758e:	eb 10                	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017590:	b8 02 00 00 00       	mov    eax,0x2
c0017595:	eb 09                	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017597:	90                   	nop
c0017598:	b8 01 00 00 00       	mov    eax,0x1
c001759d:	8d 76 00             	lea    esi,[esi+0x0]
c00175a0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00175a6:	c3                   	ret    
c00175a7:	90                   	nop

c00175a8 <FAT::unlink(char const*)>:
c00175a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00175ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00175b6:	75 08                	jne    c00175c0 <FAT::unlink(char const*)+0x18>
c00175b8:	b8 04 00 00 00       	mov    eax,0x4
c00175bd:	eb 61                	jmp    c0017620 <FAT::unlink(char const*)+0x78>
c00175bf:	90                   	nop
c00175c0:	83 ec 08             	sub    esp,0x8
c00175c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175ce:	50                   	push   eax
c00175cf:	e8 4c 90 fe ff       	call   c0000620 <strcpy>
c00175d4:	83 c4 10             	add    esp,0x10
c00175d7:	83 ec 08             	sub    esp,0x8
c00175da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00175de:	50                   	push   eax
c00175df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175e6:	e8 a1 fc ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c00175eb:	83 c4 10             	add    esp,0x10
c00175ee:	83 ec 0c             	sub    esp,0xc
c00175f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175f5:	50                   	push   eax
c00175f6:	e8 af d2 fe ff       	call   c00048aa <f_unlink>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017605:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001760c:	85 c0                	test   eax,eax
c001760e:	75 08                	jne    c0017618 <FAT::unlink(char const*)+0x70>
c0017610:	b8 00 00 00 00       	mov    eax,0x0
c0017615:	eb 09                	jmp    c0017620 <FAT::unlink(char const*)+0x78>
c0017617:	90                   	nop
c0017618:	b8 01 00 00 00       	mov    eax,0x1
c001761d:	8d 76 00             	lea    esi,[esi+0x0]
c0017620:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017626:	c3                   	ret    
c0017627:	90                   	nop

c0017628 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017628:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001762e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017635:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001763c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017640:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017644:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001764c:	75 0a                	jne    c0017658 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001764e:	b8 04 00 00 00       	mov    eax,0x4
c0017653:	e9 54 01 00 00       	jmp    c00177ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017658:	83 ec 08             	sub    esp,0x8
c001765b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017662:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017666:	50                   	push   eax
c0017667:	e8 b4 8f fe ff       	call   c0000620 <strcpy>
c001766c:	83 c4 10             	add    esp,0x10
c001766f:	83 ec 08             	sub    esp,0x8
c0017672:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017676:	50                   	push   eax
c0017677:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001767e:	e8 09 fc ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c0017683:	83 c4 10             	add    esp,0x10
c0017686:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001768e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0017696:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001769a:	25 ff 00 00 00       	and    eax,0xff
c001769f:	83 e0 01             	and    eax,0x1
c00176a2:	74 08                	je     c00176ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00176a4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00176ac:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176b0:	25 ff 00 00 00       	and    eax,0xff
c00176b5:	83 e0 02             	and    eax,0x2
c00176b8:	74 0a                	je     c00176c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00176ba:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00176c2:	66 90                	xchg   ax,ax
c00176c4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176c8:	25 ff 00 00 00       	and    eax,0xff
c00176cd:	83 e0 04             	and    eax,0x4
c00176d0:	74 0a                	je     c00176dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00176d2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00176da:	66 90                	xchg   ax,ax
c00176dc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176e0:	25 ff 00 00 00       	and    eax,0xff
c00176e5:	83 e0 08             	and    eax,0x8
c00176e8:	74 0a                	je     c00176f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00176ea:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00176f2:	66 90                	xchg   ax,ax
c00176f4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176f8:	25 ff 00 00 00       	and    eax,0xff
c00176fd:	83 e0 01             	and    eax,0x1
c0017700:	74 0a                	je     c001770c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017702:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001770a:	66 90                	xchg   ax,ax
c001770c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017710:	25 ff 00 00 00       	and    eax,0xff
c0017715:	83 e0 02             	and    eax,0x2
c0017718:	74 0a                	je     c0017724 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001771a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017722:	66 90                	xchg   ax,ax
c0017724:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017728:	25 ff 00 00 00       	and    eax,0xff
c001772d:	83 e0 04             	and    eax,0x4
c0017730:	74 0a                	je     c001773c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017732:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001773a:	66 90                	xchg   ax,ax
c001773c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017740:	25 ff 00 00 00       	and    eax,0xff
c0017745:	83 e0 08             	and    eax,0x8
c0017748:	74 0a                	je     c0017754 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001774a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017752:	66 90                	xchg   ax,ax
c0017754:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001775b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017762:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017769:	31 d2                	xor    edx,edx
c001776b:	88 c2                	mov    dl,al
c001776d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017774:	25 ff 00 00 00       	and    eax,0xff
c0017779:	83 ec 04             	sub    esp,0x4
c001777c:	52                   	push   edx
c001777d:	50                   	push   eax
c001777e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017782:	50                   	push   eax
c0017783:	e8 95 d5 fe ff       	call   c0004d1d <f_chmod>
c0017788:	83 c4 10             	add    esp,0x10
c001778b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017792:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017799:	85 c0                	test   eax,eax
c001779b:	75 07                	jne    c00177a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c001779d:	b8 00 00 00 00       	mov    eax,0x0
c00177a2:	eb 08                	jmp    c00177ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00177a4:	b8 01 00 00 00       	mov    eax,0x1
c00177a9:	8d 76 00             	lea    esi,[esi+0x0]
c00177ac:	81 c4 2c 01 00 00    	add    esp,0x12c
c00177b2:	c3                   	ret    
c00177b3:	90                   	nop

c00177b4 <FAT::rename(char const*, char const*)>:
c00177b4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00177ba:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00177c2:	74 0c                	je     c00177d0 <FAT::rename(char const*, char const*)+0x1c>
c00177c4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00177cc:	75 0e                	jne    c00177dc <FAT::rename(char const*, char const*)+0x28>
c00177ce:	66 90                	xchg   ax,ax
c00177d0:	b8 04 00 00 00       	mov    eax,0x4
c00177d5:	e9 9e 00 00 00       	jmp    c0017878 <FAT::rename(char const*, char const*)+0xc4>
c00177da:	66 90                	xchg   ax,ax
c00177dc:	83 ec 08             	sub    esp,0x8
c00177df:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177e6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177ed:	50                   	push   eax
c00177ee:	e8 2d 8e fe ff       	call   c0000620 <strcpy>
c00177f3:	83 c4 10             	add    esp,0x10
c00177f6:	83 ec 08             	sub    esp,0x8
c00177f9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017800:	50                   	push   eax
c0017801:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017808:	e8 7f fa ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	83 ec 08             	sub    esp,0x8
c0017813:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001781a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001781e:	50                   	push   eax
c001781f:	e8 fc 8d fe ff       	call   c0000620 <strcpy>
c0017824:	83 c4 10             	add    esp,0x10
c0017827:	83 ec 08             	sub    esp,0x8
c001782a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001782e:	50                   	push   eax
c001782f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017836:	e8 51 fa ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c001783b:	83 c4 10             	add    esp,0x10
c001783e:	83 ec 08             	sub    esp,0x8
c0017841:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017845:	50                   	push   eax
c0017846:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001784d:	50                   	push   eax
c001784e:	e8 14 d3 fe ff       	call   c0004b67 <f_rename>
c0017853:	83 c4 10             	add    esp,0x10
c0017856:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001785d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017864:	85 c0                	test   eax,eax
c0017866:	75 08                	jne    c0017870 <FAT::rename(char const*, char const*)+0xbc>
c0017868:	b8 00 00 00 00       	mov    eax,0x0
c001786d:	eb 09                	jmp    c0017878 <FAT::rename(char const*, char const*)+0xc4>
c001786f:	90                   	nop
c0017870:	b8 01 00 00 00       	mov    eax,0x1
c0017875:	8d 76 00             	lea    esi,[esi+0x0]
c0017878:	81 c4 1c 02 00 00    	add    esp,0x21c
c001787e:	c3                   	ret    
c001787f:	90                   	nop

c0017880 <FAT::mkdir(char const*)>:
c0017880:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017886:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001788e:	75 08                	jne    c0017898 <FAT::mkdir(char const*)+0x18>
c0017890:	b8 04 00 00 00       	mov    eax,0x4
c0017895:	eb 61                	jmp    c00178f8 <FAT::mkdir(char const*)+0x78>
c0017897:	90                   	nop
c0017898:	83 ec 08             	sub    esp,0x8
c001789b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178a6:	50                   	push   eax
c00178a7:	e8 74 8d fe ff       	call   c0000620 <strcpy>
c00178ac:	83 c4 10             	add    esp,0x10
c00178af:	83 ec 08             	sub    esp,0x8
c00178b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178b6:	50                   	push   eax
c00178b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178be:	e8 c9 f9 ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c00178c3:	83 c4 10             	add    esp,0x10
c00178c6:	83 ec 0c             	sub    esp,0xc
c00178c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178cd:	50                   	push   eax
c00178ce:	e8 f9 d0 fe ff       	call   c00049cc <f_mkdir>
c00178d3:	83 c4 10             	add    esp,0x10
c00178d6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00178dd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00178e4:	85 c0                	test   eax,eax
c00178e6:	75 08                	jne    c00178f0 <FAT::mkdir(char const*)+0x70>
c00178e8:	b8 00 00 00 00       	mov    eax,0x0
c00178ed:	eb 09                	jmp    c00178f8 <FAT::mkdir(char const*)+0x78>
c00178ef:	90                   	nop
c00178f0:	b8 01 00 00 00       	mov    eax,0x1
c00178f5:	8d 76 00             	lea    esi,[esi+0x0]
c00178f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00178fe:	c3                   	ret    
c00178ff:	90                   	nop

c0017900 <FAT::exists(char const*)>:
c0017900:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017906:	83 ec 08             	sub    esp,0x8
c0017909:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017910:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017914:	50                   	push   eax
c0017915:	e8 06 8d fe ff       	call   c0000620 <strcpy>
c001791a:	83 c4 10             	add    esp,0x10
c001791d:	83 ec 08             	sub    esp,0x8
c0017920:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017924:	50                   	push   eax
c0017925:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001792c:	e8 5b f9 ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	83 ec 08             	sub    esp,0x8
c0017937:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001793e:	50                   	push   eax
c001793f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017943:	50                   	push   eax
c0017944:	e8 fc cc fe ff       	call   c0004645 <f_stat>
c0017949:	83 c4 10             	add    esp,0x10
c001794c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017953:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001795a:	85 c0                	test   eax,eax
c001795c:	75 06                	jne    c0017964 <FAT::exists(char const*)+0x64>
c001795e:	b0 01                	mov    al,0x1
c0017960:	eb 06                	jmp    c0017968 <FAT::exists(char const*)+0x68>
c0017962:	66 90                	xchg   ax,ax
c0017964:	b0 00                	mov    al,0x0
c0017966:	66 90                	xchg   ax,ax
c0017968:	81 c4 2c 02 00 00    	add    esp,0x22c
c001796e:	c3                   	ret    
c001796f:	90                   	nop

c0017970 <isoReadDiscSectorHelper>:
c0017970:	83 ec 2c             	sub    esp,0x2c
c0017973:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017977:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001797b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017980:	83 e8 41             	sub    eax,0x41
c0017983:	8b 0c 85 00 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd100]
c001798a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001798e:	ba 00 00 00 00       	mov    edx,0x0
c0017993:	83 ec 0c             	sub    esp,0xc
c0017996:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001799a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001799e:	52                   	push   edx
c001799f:	50                   	push   eax
c00179a0:	51                   	push   ecx
c00179a1:	e8 36 58 ff ff       	call   c000d1dc <LogicalDisk::read(unsigned long long, int, void*)>
c00179a6:	83 c4 20             	add    esp,0x20
c00179a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179ad:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00179b2:	74 0c                	je     c00179c0 <isoReadDiscSectorHelper+0x50>
c00179b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179b8:	c1 e0 0b             	shl    eax,0xb
c00179bb:	eb 0b                	jmp    c00179c8 <isoReadDiscSectorHelper+0x58>
c00179bd:	8d 76 00             	lea    esi,[esi+0x0]
c00179c0:	b8 00 00 00 00       	mov    eax,0x0
c00179c5:	8d 76 00             	lea    esi,[esi+0x0]
c00179c8:	83 c4 2c             	add    esp,0x2c
c00179cb:	c3                   	ret    

c00179cc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00179cc:	b8 08 00 00 00       	mov    eax,0x8
c00179d1:	c3                   	ret    

c00179d2 <ISO9660::getName()>:
c00179d2:	b8 cc ef 01 c0       	mov    eax,0xc001efcc
c00179d7:	c3                   	ret    

c00179d8 <ISO9660::closeDir(void*)>:
c00179d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00179de:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00179e1:	90                   	nop

c00179e2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00179e2:	b8 01 00 00 00       	mov    eax,0x1
c00179e7:	c3                   	ret    

c00179e8 <ISO9660::unlink(char const*)>:
c00179e8:	b8 01 00 00 00       	mov    eax,0x1
c00179ed:	c3                   	ret    

c00179ee <ISO9660::write(void*, unsigned long, void*, int*)>:
c00179ee:	b8 03 00 00 00       	mov    eax,0x3
c00179f3:	c3                   	ret    

c00179f4 <ISO9660::rename(char const*, char const*)>:
c00179f4:	b8 01 00 00 00       	mov    eax,0x1
c00179f9:	c3                   	ret    

c00179fa <ISO9660::mkdir(char const*)>:
c00179fa:	b8 01 00 00 00       	mov    eax,0x1
c00179ff:	c3                   	ret    

c0017a00 <ISO9660::~ISO9660()>:
c0017a00:	83 ec 0c             	sub    esp,0xc
c0017a03:	ba 4c f0 01 c0       	mov    edx,0xc001f04c
c0017a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a0c:	89 10                	mov    DWORD PTR [eax],edx
c0017a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a12:	83 ec 0c             	sub    esp,0xc
c0017a15:	50                   	push   eax
c0017a16:	e8 1f 34 ff ff       	call   c000ae3a <Filesystem::~Filesystem()>
c0017a1b:	83 c4 10             	add    esp,0x10
c0017a1e:	90                   	nop
c0017a1f:	83 c4 0c             	add    esp,0xc
c0017a22:	c3                   	ret    
c0017a23:	90                   	nop

c0017a24 <ISO9660::~ISO9660()>:
c0017a24:	83 ec 0c             	sub    esp,0xc
c0017a27:	83 ec 0c             	sub    esp,0xc
c0017a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a2e:	e8 cd ff ff ff       	call   c0017a00 <ISO9660::~ISO9660()>
c0017a33:	83 c4 10             	add    esp,0x10
c0017a36:	83 ec 08             	sub    esp,0x8
c0017a39:	6a 08                	push   0x8
c0017a3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a3f:	e8 ba 2f ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c0017a44:	83 c4 10             	add    esp,0x10
c0017a47:	83 c4 0c             	add    esp,0xc
c0017a4a:	c3                   	ret    
c0017a4b:	90                   	nop

c0017a4c <ISO9660::exists(char const*)>:
c0017a4c:	83 ec 18             	sub    esp,0x18
c0017a4f:	68 e7 ef 01 c0       	push   0xc001efe7
c0017a54:	e8 6a 8c ff ff       	call   c00106c3 <KePanic(char const*)>
c0017a59:	31 c0                	xor    eax,eax
c0017a5b:	83 c4 1c             	add    esp,0x1c
c0017a5e:	c3                   	ret    
c0017a5f:	90                   	nop

c0017a60 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017a60:	56                   	push   esi
c0017a61:	53                   	push   ebx
c0017a62:	53                   	push   ebx
c0017a63:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a67:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a6b:	85 db                	test   ebx,ebx
c0017a6d:	74 72                	je     c0017ae1 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a6f:	85 f6                	test   esi,esi
c0017a71:	74 6e                	je     c0017ae1 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a73:	ba 03 00 00 00       	mov    edx,0x3
c0017a78:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017a7d:	75 67                	jne    c0017ae6 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a7f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a82:	3a 05 00 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024000
c0017a88:	74 34                	je     c0017abe <ISO9660::open(char const*, void**, FileOpenMode)+0x5e>
c0017a8a:	83 ec 0c             	sub    esp,0xc
c0017a8d:	50                   	push   eax
c0017a8e:	e8 ff f1 fe ff       	call   c0006c92 <init_percd>
c0017a93:	83 c4 10             	add    esp,0x10
c0017a96:	ba 0b 00 00 00       	mov    edx,0xb
c0017a9b:	40                   	inc    eax
c0017a9c:	74 48                	je     c0017ae6 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a9e:	80 3d 00 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024000,0x0
c0017aa5:	74 10                	je     c0017ab7 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0017aa7:	83 ec 0c             	sub    esp,0xc
c0017aaa:	68 05 f0 01 c0       	push   0xc001f005
c0017aaf:	e8 0f 8c ff ff       	call   c00106c3 <KePanic(char const*)>
c0017ab4:	83 c4 10             	add    esp,0x10
c0017ab7:	8a 03                	mov    al,BYTE PTR [ebx]
c0017ab9:	a2 00 40 02 c0       	mov    ds:0xc0024000,al
c0017abe:	83 c3 03             	add    ebx,0x3
c0017ac1:	51                   	push   ecx
c0017ac2:	51                   	push   ecx
c0017ac3:	6a 00                	push   0x0
c0017ac5:	53                   	push   ebx
c0017ac6:	e8 37 ea fe ff       	call   c0006502 <iso_open>
c0017acb:	83 c4 10             	add    esp,0x10
c0017ace:	ba 01 00 00 00       	mov    edx,0x1
c0017ad3:	83 f8 ff             	cmp    eax,0xffffffff
c0017ad6:	74 0e                	je     c0017ae6 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017ad8:	83 c0 64             	add    eax,0x64
c0017adb:	31 d2                	xor    edx,edx
c0017add:	89 06                	mov    DWORD PTR [esi],eax
c0017adf:	eb 05                	jmp    c0017ae6 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017ae1:	ba 04 00 00 00       	mov    edx,0x4
c0017ae6:	89 d0                	mov    eax,edx
c0017ae8:	5a                   	pop    edx
c0017ae9:	5b                   	pop    ebx
c0017aea:	5e                   	pop    esi
c0017aeb:	c3                   	ret    

c0017aec <ISO9660::openDir(char const*, void**)>:
c0017aec:	56                   	push   esi
c0017aed:	53                   	push   ebx
c0017aee:	53                   	push   ebx
c0017aef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017af3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017af7:	85 db                	test   ebx,ebx
c0017af9:	74 66                	je     c0017b61 <ISO9660::openDir(char const*, void**)+0x75>
c0017afb:	85 f6                	test   esi,esi
c0017afd:	74 62                	je     c0017b61 <ISO9660::openDir(char const*, void**)+0x75>
c0017aff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b02:	3a 05 00 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024000
c0017b08:	74 34                	je     c0017b3e <ISO9660::openDir(char const*, void**)+0x52>
c0017b0a:	83 ec 0c             	sub    esp,0xc
c0017b0d:	50                   	push   eax
c0017b0e:	e8 7f f1 fe ff       	call   c0006c92 <init_percd>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	ba 0b 00 00 00       	mov    edx,0xb
c0017b1b:	40                   	inc    eax
c0017b1c:	74 48                	je     c0017b66 <ISO9660::openDir(char const*, void**)+0x7a>
c0017b1e:	80 3d 00 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024000,0x0
c0017b25:	74 10                	je     c0017b37 <ISO9660::openDir(char const*, void**)+0x4b>
c0017b27:	83 ec 0c             	sub    esp,0xc
c0017b2a:	68 05 f0 01 c0       	push   0xc001f005
c0017b2f:	e8 8f 8b ff ff       	call   c00106c3 <KePanic(char const*)>
c0017b34:	83 c4 10             	add    esp,0x10
c0017b37:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b39:	a2 00 40 02 c0       	mov    ds:0xc0024000,al
c0017b3e:	83 c3 03             	add    ebx,0x3
c0017b41:	51                   	push   ecx
c0017b42:	51                   	push   ecx
c0017b43:	6a 01                	push   0x1
c0017b45:	53                   	push   ebx
c0017b46:	e8 b7 e9 fe ff       	call   c0006502 <iso_open>
c0017b4b:	83 c4 10             	add    esp,0x10
c0017b4e:	ba 01 00 00 00       	mov    edx,0x1
c0017b53:	83 f8 ff             	cmp    eax,0xffffffff
c0017b56:	74 0e                	je     c0017b66 <ISO9660::openDir(char const*, void**)+0x7a>
c0017b58:	83 c0 64             	add    eax,0x64
c0017b5b:	31 d2                	xor    edx,edx
c0017b5d:	89 06                	mov    DWORD PTR [esi],eax
c0017b5f:	eb 05                	jmp    c0017b66 <ISO9660::openDir(char const*, void**)+0x7a>
c0017b61:	ba 04 00 00 00       	mov    edx,0x4
c0017b66:	89 d0                	mov    eax,edx
c0017b68:	5a                   	pop    edx
c0017b69:	5b                   	pop    ebx
c0017b6a:	5e                   	pop    esi
c0017b6b:	c3                   	ret    

c0017b6c <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017b6c:	53                   	push   ebx
c0017b6d:	83 ec 08             	sub    esp,0x8
c0017b70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b74:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b78:	85 c0                	test   eax,eax
c0017b7a:	74 25                	je     c0017ba1 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b7c:	85 db                	test   ebx,ebx
c0017b7e:	74 21                	je     c0017ba1 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b80:	83 e8 64             	sub    eax,0x64
c0017b83:	52                   	push   edx
c0017b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b8c:	50                   	push   eax
c0017b8d:	e8 70 ea fe ff       	call   c0006602 <iso_read>
c0017b92:	83 c4 10             	add    esp,0x10
c0017b95:	89 03                	mov    DWORD PTR [ebx],eax
c0017b97:	09 d0                	or     eax,edx
c0017b99:	0f 94 c0             	sete   al
c0017b9c:	0f b6 c0             	movzx  eax,al
c0017b9f:	eb 05                	jmp    c0017ba6 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017ba1:	b8 04 00 00 00       	mov    eax,0x4
c0017ba6:	83 c4 08             	add    esp,0x8
c0017ba9:	5b                   	pop    ebx
c0017baa:	c3                   	ret    
c0017bab:	90                   	nop

c0017bac <ISO9660::seek(void*, unsigned long long)>:
c0017bac:	57                   	push   edi
c0017bad:	56                   	push   esi
c0017bae:	b8 04 00 00 00       	mov    eax,0x4
c0017bb3:	51                   	push   ecx
c0017bb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017bb8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017bbc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017bc0:	85 d2                	test   edx,edx
c0017bc2:	74 1c                	je     c0017be0 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017bc4:	6a 00                	push   0x0
c0017bc6:	83 ea 64             	sub    edx,0x64
c0017bc9:	57                   	push   edi
c0017bca:	56                   	push   esi
c0017bcb:	52                   	push   edx
c0017bcc:	e8 2f ec fe ff       	call   c0006800 <iso_seek>
c0017bd1:	83 c4 10             	add    esp,0x10
c0017bd4:	31 f0                	xor    eax,esi
c0017bd6:	31 fa                	xor    edx,edi
c0017bd8:	09 d0                	or     eax,edx
c0017bda:	0f 95 c0             	setne  al
c0017bdd:	0f b6 c0             	movzx  eax,al
c0017be0:	5a                   	pop    edx
c0017be1:	5e                   	pop    esi
c0017be2:	5f                   	pop    edi
c0017be3:	c3                   	ret    

c0017be4 <ISO9660::tell(void*, unsigned long long*)>:
c0017be4:	53                   	push   ebx
c0017be5:	83 ec 08             	sub    esp,0x8
c0017be8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017bf0:	85 c0                	test   eax,eax
c0017bf2:	74 1c                	je     c0017c10 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017bf4:	85 db                	test   ebx,ebx
c0017bf6:	74 18                	je     c0017c10 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017bf8:	83 ec 0c             	sub    esp,0xc
c0017bfb:	83 e8 64             	sub    eax,0x64
c0017bfe:	50                   	push   eax
c0017bff:	e8 da ec fe ff       	call   c00068de <iso_tell>
c0017c04:	83 c4 10             	add    esp,0x10
c0017c07:	89 03                	mov    DWORD PTR [ebx],eax
c0017c09:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c0c:	31 c0                	xor    eax,eax
c0017c0e:	eb 05                	jmp    c0017c15 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c10:	b8 04 00 00 00       	mov    eax,0x4
c0017c15:	83 c4 08             	add    esp,0x8
c0017c18:	5b                   	pop    ebx
c0017c19:	c3                   	ret    

c0017c1a <ISO9660::stat(void*, unsigned long long*)>:
c0017c1a:	53                   	push   ebx
c0017c1b:	83 ec 08             	sub    esp,0x8
c0017c1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c22:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c26:	85 c0                	test   eax,eax
c0017c28:	74 20                	je     c0017c4a <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c2a:	85 db                	test   ebx,ebx
c0017c2c:	74 1c                	je     c0017c4a <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c2e:	83 ec 0c             	sub    esp,0xc
c0017c31:	83 e8 64             	sub    eax,0x64
c0017c34:	50                   	push   eax
c0017c35:	e8 01 ed fe ff       	call   c000693b <iso_total>
c0017c3a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c41:	89 03                	mov    DWORD PTR [ebx],eax
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	31 c0                	xor    eax,eax
c0017c48:	eb 05                	jmp    c0017c4f <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017c4a:	b8 04 00 00 00       	mov    eax,0x4
c0017c4f:	83 c4 08             	add    esp,0x8
c0017c52:	5b                   	pop    ebx
c0017c53:	c3                   	ret    

c0017c54 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c54:	55                   	push   ebp
c0017c55:	57                   	push   edi
c0017c56:	56                   	push   esi
c0017c57:	53                   	push   ebx
c0017c58:	83 ec 0c             	sub    esp,0xc
c0017c5b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017c5f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017c63:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017c67:	85 ff                	test   edi,edi
c0017c69:	0f 94 c2             	sete   dl
c0017c6c:	85 f6                	test   esi,esi
c0017c6e:	0f 94 c0             	sete   al
c0017c71:	08 c2                	or     dl,al
c0017c73:	0f 85 b7 00 00 00    	jne    c0017d30 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017c79:	85 db                	test   ebx,ebx
c0017c7b:	0f 84 af 00 00 00    	je     c0017d30 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017c81:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017c84:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017c8a:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c91:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017c94:	3a 05 00 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024000
c0017c9a:	74 38                	je     c0017cd4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x80>
c0017c9c:	83 ec 0c             	sub    esp,0xc
c0017c9f:	50                   	push   eax
c0017ca0:	e8 ed ef fe ff       	call   c0006c92 <init_percd>
c0017ca5:	83 c4 10             	add    esp,0x10
c0017ca8:	ba 0b 00 00 00       	mov    edx,0xb
c0017cad:	40                   	inc    eax
c0017cae:	0f 84 81 00 00 00    	je     c0017d35 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017cb4:	80 3d 00 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024000,0x0
c0017cbb:	74 10                	je     c0017ccd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x79>
c0017cbd:	83 ec 0c             	sub    esp,0xc
c0017cc0:	68 05 f0 01 c0       	push   0xc001f005
c0017cc5:	e8 f9 89 ff ff       	call   c00106c3 <KePanic(char const*)>
c0017cca:	83 c4 10             	add    esp,0x10
c0017ccd:	8a 03                	mov    al,BYTE PTR [ebx]
c0017ccf:	a2 00 40 02 c0       	mov    ds:0xc0024000,al
c0017cd4:	83 c3 03             	add    ebx,0x3
c0017cd7:	55                   	push   ebp
c0017cd8:	55                   	push   ebp
c0017cd9:	6a 00                	push   0x0
c0017cdb:	53                   	push   ebx
c0017cdc:	e8 21 e8 fe ff       	call   c0006502 <iso_open>
c0017ce1:	83 c4 10             	add    esp,0x10
c0017ce4:	89 c5                	mov    ebp,eax
c0017ce6:	83 f8 ff             	cmp    eax,0xffffffff
c0017ce9:	75 0f                	jne    c0017cfa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa6>
c0017ceb:	56                   	push   esi
c0017cec:	56                   	push   esi
c0017ced:	6a 01                	push   0x1
c0017cef:	53                   	push   ebx
c0017cf0:	e8 0d e8 fe ff       	call   c0006502 <iso_open>
c0017cf5:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017cf8:	eb 2f                	jmp    c0017d29 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd5>
c0017cfa:	83 ec 0c             	sub    esp,0xc
c0017cfd:	50                   	push   eax
c0017cfe:	e8 38 ec fe ff       	call   c000693b <iso_total>
c0017d03:	5a                   	pop    edx
c0017d04:	59                   	pop    ecx
c0017d05:	50                   	push   eax
c0017d06:	68 15 f0 01 c0       	push   0xc001f015
c0017d0b:	e8 e4 2d ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0017d10:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d13:	e8 23 ec fe ff       	call   c000693b <iso_total>
c0017d18:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d1f:	89 06                	mov    DWORD PTR [esi],eax
c0017d21:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d24:	e8 b9 e8 fe ff       	call   c00065e2 <iso_close>
c0017d29:	83 c4 10             	add    esp,0x10
c0017d2c:	31 d2                	xor    edx,edx
c0017d2e:	eb 05                	jmp    c0017d35 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017d30:	ba 04 00 00 00       	mov    edx,0x4
c0017d35:	83 c4 0c             	add    esp,0xc
c0017d38:	89 d0                	mov    eax,edx
c0017d3a:	5b                   	pop    ebx
c0017d3b:	5e                   	pop    esi
c0017d3c:	5f                   	pop    edi
c0017d3d:	5d                   	pop    ebp
c0017d3e:	c3                   	ret    
c0017d3f:	90                   	nop

c0017d40 <ISO9660::close(void*)>:
c0017d40:	83 ec 0c             	sub    esp,0xc
c0017d43:	b8 04 00 00 00       	mov    eax,0x4
c0017d48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d4c:	85 d2                	test   edx,edx
c0017d4e:	74 11                	je     c0017d61 <ISO9660::close(void*)+0x21>
c0017d50:	83 ec 0c             	sub    esp,0xc
c0017d53:	83 ea 64             	sub    edx,0x64
c0017d56:	52                   	push   edx
c0017d57:	e8 86 e8 fe ff       	call   c00065e2 <iso_close>
c0017d5c:	83 c4 10             	add    esp,0x10
c0017d5f:	31 c0                	xor    eax,eax
c0017d61:	83 c4 0c             	add    esp,0xc
c0017d64:	c3                   	ret    
c0017d65:	90                   	nop

c0017d66 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d66:	55                   	push   ebp
c0017d67:	57                   	push   edi
c0017d68:	56                   	push   esi
c0017d69:	53                   	push   ebx
c0017d6a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d70:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017d77:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017d7e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017d85:	85 c0                	test   eax,eax
c0017d87:	0f 84 96 00 00 00    	je     c0017e23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d8d:	85 db                	test   ebx,ebx
c0017d8f:	0f 84 8e 00 00 00    	je     c0017e23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d95:	83 ec 0c             	sub    esp,0xc
c0017d98:	83 e8 64             	sub    eax,0x64
c0017d9b:	50                   	push   eax
c0017d9c:	e8 17 ec fe ff       	call   c00069b8 <iso_readdir>
c0017da1:	83 c4 10             	add    esp,0x10
c0017da4:	89 c6                	mov    esi,eax
c0017da6:	85 c0                	test   eax,eax
c0017da8:	75 18                	jne    c0017dc2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017daa:	52                   	push   edx
c0017dab:	68 10 01 00 00       	push   0x110
c0017db0:	6a 00                	push   0x0
c0017db2:	57                   	push   edi
c0017db3:	e8 38 87 fe ff       	call   c00004f0 <memset>
c0017db8:	83 c4 10             	add    esp,0x10
c0017dbb:	b8 01 00 00 00       	mov    eax,0x1
c0017dc0:	eb 66                	jmp    c0017e28 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017dc2:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017dc8:	8d 68 08             	lea    ebp,[eax+0x8]
c0017dcb:	83 ec 0c             	sub    esp,0xc
c0017dce:	55                   	push   ebp
c0017dcf:	e8 8c 87 fe ff       	call   c0000560 <strlen>
c0017dd4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017ddc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017de0:	83 c4 10             	add    esp,0x10
c0017de3:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017de7:	75 0a                	jne    c0017df3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017de9:	b8 02 00 00 00       	mov    eax,0x2
c0017dee:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017df1:	74 05                	je     c0017df8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017df3:	b8 01 00 00 00       	mov    eax,0x1
c0017df8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017dfc:	50                   	push   eax
c0017dfd:	50                   	push   eax
c0017dfe:	55                   	push   ebp
c0017dff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e03:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017e07:	50                   	push   eax
c0017e08:	e8 13 88 fe ff       	call   c0000620 <strcpy>
c0017e0d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017e14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e16:	31 c0                	xor    eax,eax
c0017e18:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017e1e:	83 c4 10             	add    esp,0x10
c0017e21:	eb 05                	jmp    c0017e28 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e23:	b8 04 00 00 00       	mov    eax,0x4
c0017e28:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017e2e:	5b                   	pop    ebx
c0017e2f:	5e                   	pop    esi
c0017e30:	5f                   	pop    edi
c0017e31:	5d                   	pop    ebp
c0017e32:	c3                   	ret    

c0017e33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e33:	57                   	push   edi
c0017e34:	56                   	push   esi
c0017e35:	53                   	push   ebx
c0017e36:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e3a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e3e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e42:	39 35 04 40 02 c0    	cmp    DWORD PTR ds:0xc0024004,esi
c0017e48:	75 08                	jne    c0017e52 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e4a:	38 1d 74 f9 01 c0    	cmp    BYTE PTR ds:0xc001f974,bl
c0017e50:	74 59                	je     c0017eab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e52:	83 ec 0c             	sub    esp,0xc
c0017e55:	31 d2                	xor    edx,edx
c0017e57:	68 20 40 02 c0       	push   0xc0024020
c0017e5c:	0f be c3             	movsx  eax,bl
c0017e5f:	6a 01                	push   0x1
c0017e61:	52                   	push   edx
c0017e62:	56                   	push   esi
c0017e63:	ff 34 85 fc 2d 02 c0 	push   DWORD PTR [eax*4-0x3ffdd204]
c0017e6a:	e8 6d 53 ff ff       	call   c000d1dc <LogicalDisk::read(unsigned long long, int, void*)>
c0017e6f:	83 c4 20             	add    esp,0x20
c0017e72:	85 c0                	test   eax,eax
c0017e74:	75 0e                	jne    c0017e84 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017e76:	89 35 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,esi
c0017e7c:	88 1d 74 f9 01 c0    	mov    BYTE PTR ds:0xc001f974,bl
c0017e82:	eb 27                	jmp    c0017eab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e84:	83 ec 0c             	sub    esp,0xc
c0017e87:	68 27 f0 01 c0       	push   0xc001f027
c0017e8c:	e8 63 2c ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0017e91:	83 c4 0c             	add    esp,0xc
c0017e94:	68 00 08 00 00       	push   0x800
c0017e99:	6a 00                	push   0x0
c0017e9b:	57                   	push   edi
c0017e9c:	e8 4f 86 fe ff       	call   c00004f0 <memset>
c0017ea1:	83 c4 10             	add    esp,0x10
c0017ea4:	b8 01 00 00 00       	mov    eax,0x1
c0017ea9:	eb 0e                	jmp    c0017eb9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017eab:	be 20 40 02 c0       	mov    esi,0xc0024020
c0017eb0:	b9 00 08 00 00       	mov    ecx,0x800
c0017eb5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017eb7:	31 c0                	xor    eax,eax
c0017eb9:	5b                   	pop    ebx
c0017eba:	5e                   	pop    esi
c0017ebb:	5f                   	pop    edi
c0017ebc:	c3                   	ret    
c0017ebd:	90                   	nop

c0017ebe <ISO9660::tryMount(LogicalDisk*, int)>:
c0017ebe:	53                   	push   ebx
c0017ebf:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017ec5:	c7 05 04 40 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0024004,0xdeadbeef
c0017ecf:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017ed6:	8d 58 41             	lea    ebx,[eax+0x41]
c0017ed9:	0f be db             	movsx  ebx,bl
c0017edc:	53                   	push   ebx
c0017edd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017ee1:	50                   	push   eax
c0017ee2:	6a 10                	push   0x10
c0017ee4:	e8 4a ff ff ff       	call   c0017e33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017ee9:	83 c4 10             	add    esp,0x10
c0017eec:	31 d2                	xor    edx,edx
c0017eee:	85 c0                	test   eax,eax
c0017ef0:	75 33                	jne    c0017f25 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ef2:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017ef7:	75 2c                	jne    c0017f25 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ef9:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017efe:	75 25                	jne    c0017f25 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f00:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017f05:	75 1e                	jne    c0017f25 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f07:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017f0c:	75 17                	jne    c0017f25 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f0e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017f13:	75 10                	jne    c0017f25 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f15:	83 ec 0c             	sub    esp,0xc
c0017f18:	53                   	push   ebx
c0017f19:	e8 74 ed fe ff       	call   c0006c92 <init_percd>
c0017f1e:	83 c4 10             	add    esp,0x10
c0017f21:	40                   	inc    eax
c0017f22:	0f 95 c2             	setne  dl
c0017f25:	88 d0                	mov    al,dl
c0017f27:	81 c4 08 08 00 00    	add    esp,0x808
c0017f2d:	5b                   	pop    ebx
c0017f2e:	c3                   	ret    
c0017f2f:	90                   	nop

c0017f30 <ISO9660::ISO9660()>:
c0017f30:	83 ec 0c             	sub    esp,0xc
c0017f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f37:	83 ec 0c             	sub    esp,0xc
c0017f3a:	50                   	push   eax
c0017f3b:	e8 d6 2e ff ff       	call   c000ae16 <Filesystem::Filesystem()>
c0017f40:	83 c4 10             	add    esp,0x10
c0017f43:	ba 4c f0 01 c0       	mov    edx,0xc001f04c
c0017f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f4c:	89 10                	mov    DWORD PTR [eax],edx
c0017f4e:	e8 4f ee fe ff       	call   c0006da2 <fs_iso9660_init>
c0017f53:	90                   	nop
c0017f54:	83 c4 0c             	add    esp,0xc
c0017f57:	c3                   	ret    

c0017f58 <SoundCard::beginPlayback()>:
c0017f58:	c7 44 24 04 ac f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f0ac
c0017f60:	e9 5e 87 ff ff       	jmp    c00106c3 <KePanic(char const*)>
c0017f65:	90                   	nop

c0017f66 <SoundCard::stopPlayback()>:
c0017f66:	c7 44 24 04 ac f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f0ac
c0017f6e:	e9 50 87 ff ff       	jmp    c00106c3 <KePanic(char const*)>
c0017f73:	90                   	nop

c0017f74 <SoundCard::SoundCard(char const*)>:
c0017f74:	83 ec 1c             	sub    esp,0x1c
c0017f77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f7b:	83 ec 08             	sub    esp,0x8
c0017f7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f82:	50                   	push   eax
c0017f83:	e8 44 41 ff ff       	call   c000c0cc <Device::Device(char const*)>
c0017f88:	83 c4 10             	add    esp,0x10
c0017f8b:	ba f8 f0 01 c0       	mov    edx,0xc001f0f8
c0017f90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f94:	89 10                	mov    DWORD PTR [eax],edx
c0017f96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f9a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017faf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fb3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017fbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fcf:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017fd9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017fe1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017fe6:	7f 19                	jg     c0018001 <SoundCard::SoundCard(char const*)+0x8d>
c0017fe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ff0:	83 c2 54             	add    edx,0x54
c0017ff3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017ffb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017fff:	eb e0                	jmp    c0017fe1 <SoundCard::SoundCard(char const*)+0x6d>
c0018001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018005:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001800c:	90                   	nop
c001800d:	83 c4 1c             	add    esp,0x1c
c0018010:	c3                   	ret    
c0018011:	90                   	nop

c0018012 <SoundCard::~SoundCard()>:
c0018012:	83 ec 0c             	sub    esp,0xc
c0018015:	ba f8 f0 01 c0       	mov    edx,0xc001f0f8
c001801a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001801e:	89 10                	mov    DWORD PTR [eax],edx
c0018020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018024:	83 ec 0c             	sub    esp,0xc
c0018027:	50                   	push   eax
c0018028:	e8 09 3e ff ff       	call   c000be36 <Device::~Device()>
c001802d:	83 c4 10             	add    esp,0x10
c0018030:	90                   	nop
c0018031:	83 c4 0c             	add    esp,0xc
c0018034:	c3                   	ret    
c0018035:	90                   	nop

c0018036 <SoundCard::~SoundCard()>:
c0018036:	83 ec 0c             	sub    esp,0xc
c0018039:	83 ec 0c             	sub    esp,0xc
c001803c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018040:	e8 cd ff ff ff       	call   c0018012 <SoundCard::~SoundCard()>
c0018045:	83 c4 10             	add    esp,0x10
c0018048:	83 ec 08             	sub    esp,0x8
c001804b:	68 e8 01 00 00       	push   0x1e8
c0018050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018054:	e8 a5 29 ff ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c0018059:	83 c4 10             	add    esp,0x10
c001805c:	83 c4 0c             	add    esp,0xc
c001805f:	c3                   	ret    

c0018060 <SoundCard::configureRates(int, int, int)>:
c0018060:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018064:	31 c0                	xor    eax,eax
c0018066:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001806d:	75 20                	jne    c001808f <SoundCard::configureRates(int, int, int)+0x2f>
c001806f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018073:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018079:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001807d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0018083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018087:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001808d:	b0 01                	mov    al,0x1
c001808f:	c3                   	ret    

c0018090 <SoundCard::getSamples16(int, short*)>:
c0018090:	55                   	push   ebp
c0018091:	57                   	push   edi
c0018092:	31 ff                	xor    edi,edi
c0018094:	56                   	push   esi
c0018095:	53                   	push   ebx
c0018096:	31 db                	xor    ebx,ebx
c0018098:	83 ec 10             	sub    esp,0x10
c001809b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001809f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180a3:	8d 04 36             	lea    eax,[esi+esi*1]
c00180a6:	50                   	push   eax
c00180a7:	6a 00                	push   0x0
c00180a9:	55                   	push   ebp
c00180aa:	e8 41 84 fe ff       	call   c00004f0 <memset>
c00180af:	83 c4 10             	add    esp,0x10
c00180b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180b6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00180bd:	85 c0                	test   eax,eax
c00180bf:	74 1b                	je     c00180dc <SoundCard::getSamples16(int, short*)+0x4c>
c00180c1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180c5:	75 15                	jne    c00180dc <SoundCard::getSamples16(int, short*)+0x4c>
c00180c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180cb:	55                   	push   ebp
c00180cc:	56                   	push   esi
c00180cd:	50                   	push   eax
c00180ce:	e8 ed 02 00 00       	call   c00183c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00180d3:	83 c4 10             	add    esp,0x10
c00180d6:	39 c7                	cmp    edi,eax
c00180d8:	7d 02                	jge    c00180dc <SoundCard::getSamples16(int, short*)+0x4c>
c00180da:	89 c7                	mov    edi,eax
c00180dc:	43                   	inc    ebx
c00180dd:	83 fb 20             	cmp    ebx,0x20
c00180e0:	75 d0                	jne    c00180b2 <SoundCard::getSamples16(int, short*)+0x22>
c00180e2:	83 c4 0c             	add    esp,0xc
c00180e5:	89 f8                	mov    eax,edi
c00180e7:	5b                   	pop    ebx
c00180e8:	5e                   	pop    esi
c00180e9:	5f                   	pop    edi
c00180ea:	5d                   	pop    ebp
c00180eb:	c3                   	ret    

c00180ec <SoundCard::getSamples32(int, int*)>:
c00180ec:	55                   	push   ebp
c00180ed:	57                   	push   edi
c00180ee:	31 ff                	xor    edi,edi
c00180f0:	56                   	push   esi
c00180f1:	31 f6                	xor    esi,esi
c00180f3:	53                   	push   ebx
c00180f4:	83 ec 10             	sub    esp,0x10
c00180f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180fb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00180ff:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018103:	c1 e0 02             	shl    eax,0x2
c0018106:	50                   	push   eax
c0018107:	6a 00                	push   0x0
c0018109:	55                   	push   ebp
c001810a:	e8 e1 83 fe ff       	call   c00004f0 <memset>
c001810f:	83 c4 10             	add    esp,0x10
c0018112:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018119:	85 c0                	test   eax,eax
c001811b:	74 1b                	je     c0018138 <SoundCard::getSamples32(int, int*)+0x4c>
c001811d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018121:	75 15                	jne    c0018138 <SoundCard::getSamples32(int, int*)+0x4c>
c0018123:	53                   	push   ebx
c0018124:	55                   	push   ebp
c0018125:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018129:	50                   	push   eax
c001812a:	e8 55 03 00 00       	call   c0018484 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001812f:	83 c4 10             	add    esp,0x10
c0018132:	39 c6                	cmp    esi,eax
c0018134:	7d 02                	jge    c0018138 <SoundCard::getSamples32(int, int*)+0x4c>
c0018136:	89 c6                	mov    esi,eax
c0018138:	47                   	inc    edi
c0018139:	83 ff 20             	cmp    edi,0x20
c001813c:	75 d4                	jne    c0018112 <SoundCard::getSamples32(int, int*)+0x26>
c001813e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018144:	85 f6                	test   esi,esi
c0018146:	75 0f                	jne    c0018157 <SoundCard::getSamples32(int, int*)+0x6b>
c0018148:	84 c0                	test   al,al
c001814a:	74 1b                	je     c0018167 <SoundCard::getSamples32(int, int*)+0x7b>
c001814c:	83 ec 0c             	sub    esp,0xc
c001814f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018151:	53                   	push   ebx
c0018152:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018155:	eb 0d                	jmp    c0018164 <SoundCard::getSamples32(int, int*)+0x78>
c0018157:	84 c0                	test   al,al
c0018159:	75 0c                	jne    c0018167 <SoundCard::getSamples32(int, int*)+0x7b>
c001815b:	83 ec 0c             	sub    esp,0xc
c001815e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018160:	53                   	push   ebx
c0018161:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018164:	83 c4 10             	add    esp,0x10
c0018167:	83 c4 0c             	add    esp,0xc
c001816a:	89 f0                	mov    eax,esi
c001816c:	5b                   	pop    ebx
c001816d:	5e                   	pop    esi
c001816e:	5f                   	pop    edi
c001816f:	5d                   	pop    ebp
c0018170:	c3                   	ret    
c0018171:	90                   	nop

c0018172 <SoundCard::addChannel(SoundPort*)>:
c0018172:	83 ec 0c             	sub    esp,0xc
c0018175:	31 c0                	xor    eax,eax
c0018177:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001817b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018183:	74 1b                	je     c00181a0 <SoundCard::addChannel(SoundPort*)+0x2e>
c0018185:	40                   	inc    eax
c0018186:	83 f8 20             	cmp    eax,0x20
c0018189:	75 f0                	jne    c001817b <SoundCard::addChannel(SoundPort*)+0x9>
c001818b:	83 ec 0c             	sub    esp,0xc
c001818e:	68 d1 f0 01 c0       	push   0xc001f0d1
c0018193:	e8 2b 85 ff ff       	call   c00106c3 <KePanic(char const*)>
c0018198:	83 c4 10             	add    esp,0x10
c001819b:	83 c8 ff             	or     eax,0xffffffff
c001819e:	eb 0b                	jmp    c00181ab <SoundCard::addChannel(SoundPort*)+0x39>
c00181a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181a4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00181ab:	83 c4 0c             	add    esp,0xc
c00181ae:	c3                   	ret    
c00181af:	90                   	nop

c00181b0 <SoundCard::removeChannel(int)>:
c00181b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00181b8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00181c3:	c3                   	ret    

c00181c4 <SoundPort::SoundPort(int, int, int, int)>:
c00181c4:	83 ec 0c             	sub    esp,0xc
c00181c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181cb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00181da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181e2:	89 10                	mov    DWORD PTR [eax],edx
c00181e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00181ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181f7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00181fa:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00181ff:	75 13                	jne    c0018214 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018205:	8b 00                	mov    eax,DWORD PTR [eax]
c0018207:	05 a0 0f 00 00       	add    eax,0xfa0
c001820c:	01 c0                	add    eax,eax
c001820e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018212:	66 90                	xchg   ax,ax
c0018214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018218:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001821c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001821f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018223:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001822a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018231:	c1 e0 02             	shl    eax,0x2
c0018234:	83 ec 0c             	sub    esp,0xc
c0018237:	50                   	push   eax
c0018238:	e8 20 fc fe ff       	call   c0007e5d <malloc>
c001823d:	83 c4 10             	add    esp,0x10
c0018240:	89 c2                	mov    edx,eax
c0018242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018246:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018249:	90                   	nop
c001824a:	83 c4 0c             	add    esp,0xc
c001824d:	c3                   	ret    
c001824e:	66 90                	xchg   ax,ax

c0018250 <SoundPort::~SoundPort()>:
c0018250:	83 ec 0c             	sub    esp,0xc
c0018253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018257:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001825a:	85 c0                	test   eax,eax
c001825c:	74 1e                	je     c001827c <SoundPort::~SoundPort()+0x2c>
c001825e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018262:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018265:	83 ec 0c             	sub    esp,0xc
c0018268:	50                   	push   eax
c0018269:	e8 ff fb fe ff       	call   c0007e6d <free>
c001826e:	83 c4 10             	add    esp,0x10
c0018271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018275:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001827c:	90                   	nop
c001827d:	83 c4 0c             	add    esp,0xc
c0018280:	c3                   	ret    
c0018281:	90                   	nop
c0018282:	66 90                	xchg   ax,ax

c0018284 <SoundPort::unpause()>:
c0018284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018288:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001828c:	c3                   	ret    
c001828d:	90                   	nop
c001828e:	66 90                	xchg   ax,ax

c0018290 <SoundPort::pause()>:
c0018290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018294:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018298:	c3                   	ret    
c0018299:	90                   	nop
c001829a:	66 90                	xchg   ax,ax

c001829c <SoundPort::getBufferUsed()>:
c001829c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182a0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00182a3:	c3                   	ret    

c00182a4 <SoundPort::getBufferSize()>:
c00182a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182ab:	c3                   	ret    

c00182ac <SoundPort::buffer16(short*, int)>:
c00182ac:	55                   	push   ebp
c00182ad:	57                   	push   edi
c00182ae:	56                   	push   esi
c00182af:	53                   	push   ebx
c00182b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00182b4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00182b8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00182bb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00182be:	74 68                	je     c0018328 <SoundPort::buffer16(short*, int)+0x7c>
c00182c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00182c4:	85 c9                	test   ecx,ecx
c00182c6:	7e 60                	jle    c0018328 <SoundPort::buffer16(short*, int)+0x7c>
c00182c8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00182cc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00182cf:	c1 e1 0f             	shl    ecx,0xf
c00182d2:	8d 70 01             	lea    esi,[eax+0x1]
c00182d5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00182d8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00182db:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182de:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182e1:	74 4d                	je     c0018330 <SoundPort::buffer16(short*, int)+0x84>
c00182e3:	31 f6                	xor    esi,esi
c00182e5:	eb 21                	jmp    c0018308 <SoundPort::buffer16(short*, int)+0x5c>
c00182e7:	90                   	nop
c00182e8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00182ed:	8d 79 01             	lea    edi,[ecx+0x1]
c00182f0:	c1 e3 0f             	shl    ebx,0xf
c00182f3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00182f6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00182f9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00182fc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182ff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018302:	74 1c                	je     c0018320 <SoundPort::buffer16(short*, int)+0x74>
c0018304:	89 c6                	mov    esi,eax
c0018306:	66 90                	xchg   ax,ax
c0018308:	8d 46 01             	lea    eax,[esi+0x1]
c001830b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001830f:	75 d7                	jne    c00182e8 <SoundPort::buffer16(short*, int)+0x3c>
c0018311:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018315:	8d 76 00             	lea    esi,[esi+0x0]
c0018318:	5b                   	pop    ebx
c0018319:	5e                   	pop    esi
c001831a:	5f                   	pop    edi
c001831b:	5d                   	pop    ebp
c001831c:	c3                   	ret    
c001831d:	8d 76 00             	lea    esi,[esi+0x0]
c0018320:	5b                   	pop    ebx
c0018321:	8d 46 02             	lea    eax,[esi+0x2]
c0018324:	5e                   	pop    esi
c0018325:	5f                   	pop    edi
c0018326:	5d                   	pop    ebp
c0018327:	c3                   	ret    
c0018328:	5b                   	pop    ebx
c0018329:	31 c0                	xor    eax,eax
c001832b:	5e                   	pop    esi
c001832c:	5f                   	pop    edi
c001832d:	5d                   	pop    ebp
c001832e:	c3                   	ret    
c001832f:	90                   	nop
c0018330:	b8 01 00 00 00       	mov    eax,0x1
c0018335:	eb e1                	jmp    c0018318 <SoundPort::buffer16(short*, int)+0x6c>
c0018337:	90                   	nop

c0018338 <SoundPort::buffer32(int*, int)>:
c0018338:	55                   	push   ebp
c0018339:	57                   	push   edi
c001833a:	56                   	push   esi
c001833b:	53                   	push   ebx
c001833c:	51                   	push   ecx
c001833d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018345:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018348:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001834c:	89 04 24             	mov    DWORD PTR [esp],eax
c001834f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018352:	74 5c                	je     c00183b0 <SoundPort::buffer32(int*, int)+0x78>
c0018354:	85 c0                	test   eax,eax
c0018356:	7e 58                	jle    c00183b0 <SoundPort::buffer32(int*, int)+0x78>
c0018358:	8d 71 01             	lea    esi,[ecx+0x1]
c001835b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001835e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018361:	8b 37                	mov    esi,DWORD PTR [edi]
c0018363:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018366:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018369:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001836c:	74 4a                	je     c00183b8 <SoundPort::buffer32(int*, int)+0x80>
c001836e:	31 f6                	xor    esi,esi
c0018370:	eb 1e                	jmp    c0018390 <SoundPort::buffer32(int*, int)+0x58>
c0018372:	66 90                	xchg   ax,ax
c0018374:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018377:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001837a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001837d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018380:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018384:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018387:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001838a:	74 18                	je     c00183a4 <SoundPort::buffer32(int*, int)+0x6c>
c001838c:	89 de                	mov    esi,ebx
c001838e:	66 90                	xchg   ax,ax
c0018390:	8d 5e 01             	lea    ebx,[esi+0x1]
c0018393:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018396:	75 dc                	jne    c0018374 <SoundPort::buffer32(int*, int)+0x3c>
c0018398:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001839b:	90                   	nop
c001839c:	5a                   	pop    edx
c001839d:	5b                   	pop    ebx
c001839e:	5e                   	pop    esi
c001839f:	5f                   	pop    edi
c00183a0:	5d                   	pop    ebp
c00183a1:	c3                   	ret    
c00183a2:	66 90                	xchg   ax,ax
c00183a4:	5a                   	pop    edx
c00183a5:	8d 46 02             	lea    eax,[esi+0x2]
c00183a8:	5b                   	pop    ebx
c00183a9:	5e                   	pop    esi
c00183aa:	5f                   	pop    edi
c00183ab:	5d                   	pop    ebp
c00183ac:	c3                   	ret    
c00183ad:	8d 76 00             	lea    esi,[esi+0x0]
c00183b0:	5a                   	pop    edx
c00183b1:	31 c0                	xor    eax,eax
c00183b3:	5b                   	pop    ebx
c00183b4:	5e                   	pop    esi
c00183b5:	5f                   	pop    edi
c00183b6:	5d                   	pop    ebp
c00183b7:	c3                   	ret    
c00183b8:	b8 01 00 00 00       	mov    eax,0x1
c00183bd:	eb dd                	jmp    c001839c <SoundPort::buffer32(int*, int)+0x64>
c00183bf:	90                   	nop

c00183c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00183c0:	57                   	push   edi
c00183c1:	56                   	push   esi
c00183c2:	53                   	push   ebx
c00183c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183c7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00183cb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00183d1:	39 03                	cmp    DWORD PTR [ebx],eax
c00183d3:	74 13                	je     c00183e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00183d5:	83 ec 0c             	sub    esp,0xc
c00183d8:	68 24 f1 01 c0       	push   0xc001f124
c00183dd:	e8 e1 82 ff ff       	call   c00106c3 <KePanic(char const*)>
c00183e2:	83 c4 10             	add    esp,0x10
c00183e5:	8d 76 00             	lea    esi,[esi+0x0]
c00183e8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00183ee:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00183f1:	74 11                	je     c0018404 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00183f3:	83 ec 0c             	sub    esp,0xc
c00183f6:	68 63 f1 01 c0       	push   0xc001f163
c00183fb:	e8 c3 82 ff ff       	call   c00106c3 <KePanic(char const*)>
c0018400:	83 c4 10             	add    esp,0x10
c0018403:	90                   	nop
c0018404:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001840a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001840d:	74 11                	je     c0018420 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001840f:	83 ec 0c             	sub    esp,0xc
c0018412:	68 63 f1 01 c0       	push   0xc001f163
c0018417:	e8 a7 82 ff ff       	call   c00106c3 <KePanic(char const*)>
c001841c:	83 c4 10             	add    esp,0x10
c001841f:	90                   	nop
c0018420:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018423:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018427:	7e 07                	jle    c0018430 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018429:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001842d:	8d 76 00             	lea    esi,[esi+0x0]
c0018430:	85 f6                	test   esi,esi
c0018432:	7e 2c                	jle    c0018460 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018434:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018438:	8d 3c 36             	lea    edi,[esi+esi*1]
c001843b:	31 c9                	xor    ecx,ecx
c001843d:	01 d7                	add    edi,edx
c001843f:	90                   	nop
c0018440:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018443:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018446:	85 c0                	test   eax,eax
c0018448:	79 06                	jns    c0018450 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001844a:	05 ff 7f 00 00       	add    eax,0x7fff
c001844f:	90                   	nop
c0018450:	c1 f8 0f             	sar    eax,0xf
c0018453:	83 c1 04             	add    ecx,0x4
c0018456:	66 01 02             	add    WORD PTR [edx],ax
c0018459:	83 c2 02             	add    edx,0x2
c001845c:	39 d7                	cmp    edi,edx
c001845e:	75 e0                	jne    c0018440 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018460:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0018463:	50                   	push   eax
c0018464:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018467:	29 f0                	sub    eax,esi
c0018469:	c1 e0 02             	shl    eax,0x2
c001846c:	50                   	push   eax
c001846d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018470:	50                   	push   eax
c0018471:	52                   	push   edx
c0018472:	e8 89 7f fe ff       	call   c0000400 <memmove>
c0018477:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001847a:	83 c4 10             	add    esp,0x10
c001847d:	89 f0                	mov    eax,esi
c001847f:	5b                   	pop    ebx
c0018480:	5e                   	pop    esi
c0018481:	5f                   	pop    edi
c0018482:	c3                   	ret    
c0018483:	90                   	nop

c0018484 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018484:	57                   	push   edi
c0018485:	56                   	push   esi
c0018486:	53                   	push   ebx
c0018487:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001848b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001848f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018493:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018499:	39 06                	cmp    DWORD PTR [esi],eax
c001849b:	74 13                	je     c00184b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001849d:	83 ec 0c             	sub    esp,0xc
c00184a0:	68 44 f1 01 c0       	push   0xc001f144
c00184a5:	e8 19 82 ff ff       	call   c00106c3 <KePanic(char const*)>
c00184aa:	83 c4 10             	add    esp,0x10
c00184ad:	8d 76 00             	lea    esi,[esi+0x0]
c00184b0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00184b6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00184b9:	74 11                	je     c00184cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00184bb:	83 ec 0c             	sub    esp,0xc
c00184be:	68 7f f1 01 c0       	push   0xc001f17f
c00184c3:	e8 fb 81 ff ff       	call   c00106c3 <KePanic(char const*)>
c00184c8:	83 c4 10             	add    esp,0x10
c00184cb:	90                   	nop
c00184cc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00184d2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00184d5:	74 11                	je     c00184e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00184d7:	83 ec 0c             	sub    esp,0xc
c00184da:	68 7f f1 01 c0       	push   0xc001f17f
c00184df:	e8 df 81 ff ff       	call   c00106c3 <KePanic(char const*)>
c00184e4:	83 c4 10             	add    esp,0x10
c00184e7:	90                   	nop
c00184e8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00184eb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00184ef:	7e 07                	jle    c00184f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00184f1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00184f5:	8d 76 00             	lea    esi,[esi+0x0]
c00184f8:	85 ff                	test   edi,edi
c00184fa:	7e 1c                	jle    c0018518 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00184fc:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0018503:	31 c0                	xor    eax,eax
c0018505:	8d 76 00             	lea    esi,[esi+0x0]
c0018508:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001850b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001850e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018511:	83 c0 04             	add    eax,0x4
c0018514:	39 c1                	cmp    ecx,eax
c0018516:	75 f0                	jne    c0018508 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018518:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001851b:	50                   	push   eax
c001851c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001851f:	29 f8                	sub    eax,edi
c0018521:	c1 e0 02             	shl    eax,0x2
c0018524:	50                   	push   eax
c0018525:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018528:	50                   	push   eax
c0018529:	52                   	push   edx
c001852a:	e8 d1 7e fe ff       	call   c0000400 <memmove>
c001852f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018532:	83 c4 10             	add    esp,0x10
c0018535:	89 f8                	mov    eax,edi
c0018537:	5b                   	pop    ebx
c0018538:	5e                   	pop    esi
c0018539:	5f                   	pop    edi
c001853a:	c3                   	ret    
c001853b:	90                   	nop

c001853c <PCI::open(int, int, void*)>:
c001853c:	83 ec 18             	sub    esp,0x18
c001853f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018543:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018547:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001854d:	8b 10                	mov    edx,DWORD PTR [eax]
c001854f:	50                   	push   eax
c0018550:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018553:	31 c0                	xor    eax,eax
c0018555:	83 c4 1c             	add    esp,0x1c
c0018558:	c3                   	ret    
c0018559:	90                   	nop

c001855a <PCI::close(int, int, void*)>:
c001855a:	31 c0                	xor    eax,eax
c001855c:	c3                   	ret    
c001855d:	90                   	nop

c001855e <PCI::PCI()>:
c001855e:	83 ec 0c             	sub    esp,0xc
c0018561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018565:	83 ec 08             	sub    esp,0x8
c0018568:	68 9b f1 01 c0       	push   0xc001f19b
c001856d:	50                   	push   eax
c001856e:	e8 15 33 ff ff       	call   c000b888 <Bus::Bus(char const*)>
c0018573:	83 c4 10             	add    esp,0x10
c0018576:	ba 44 f2 01 c0       	mov    edx,0xc001f244
c001857b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001857f:	89 10                	mov    DWORD PTR [eax],edx
c0018581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018585:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001858f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018593:	a3 20 48 02 c0       	mov    ds:0xc0024820,eax
c0018598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001859c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185a2:	31 d2                	xor    edx,edx
c00185a4:	88 c2                	mov    dl,al
c00185a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185aa:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00185b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185bb:	31 d2                	xor    edx,edx
c00185bd:	88 c2                	mov    dl,al
c00185bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00185c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185d2:	8d 50 01             	lea    edx,[eax+0x1]
c00185d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185d9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00185df:	31 d2                	xor    edx,edx
c00185e1:	88 c2                	mov    dl,al
c00185e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185e7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00185eb:	83 c9 c0             	or     ecx,0xffffffc0
c00185ee:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00185f2:	90                   	nop
c00185f3:	83 c4 0c             	add    esp,0xc
c00185f6:	c3                   	ret    
c00185f7:	90                   	nop

c00185f8 <PCI::readBAR8(unsigned int, int)>:
c00185f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018600:	f6 c2 01             	test   dl,0x1
c0018603:	74 07                	je     c001860c <PCI::readBAR8(unsigned int, int)+0x14>
c0018605:	83 e2 fc             	and    edx,0xfffffffc
c0018608:	01 c2                	add    edx,eax
c001860a:	ec                   	in     al,dx
c001860b:	c3                   	ret    
c001860c:	83 e2 f0             	and    edx,0xfffffff0
c001860f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018612:	c3                   	ret    
c0018613:	90                   	nop

c0018614 <PCI::readBAR16(unsigned int, int)>:
c0018614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018618:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001861c:	f6 c2 01             	test   dl,0x1
c001861f:	74 08                	je     c0018629 <PCI::readBAR16(unsigned int, int)+0x15>
c0018621:	83 e2 fc             	and    edx,0xfffffffc
c0018624:	01 c2                	add    edx,eax
c0018626:	66 ed                	in     ax,dx
c0018628:	c3                   	ret    
c0018629:	83 e2 f0             	and    edx,0xfffffff0
c001862c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018630:	c3                   	ret    
c0018631:	90                   	nop

c0018632 <PCI::readBAR32(unsigned int, int)>:
c0018632:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018636:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001863a:	f6 c2 01             	test   dl,0x1
c001863d:	74 07                	je     c0018646 <PCI::readBAR32(unsigned int, int)+0x14>
c001863f:	83 e2 fc             	and    edx,0xfffffffc
c0018642:	01 c2                	add    edx,eax
c0018644:	ed                   	in     eax,dx
c0018645:	c3                   	ret    
c0018646:	83 e2 f0             	and    edx,0xfffffff0
c0018649:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001864c:	c3                   	ret    
c001864d:	90                   	nop

c001864e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001864e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018656:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001865a:	f6 c2 01             	test   dl,0x1
c001865d:	74 07                	je     c0018666 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001865f:	83 e2 fc             	and    edx,0xfffffffc
c0018662:	01 ca                	add    edx,ecx
c0018664:	ee                   	out    dx,al
c0018665:	c3                   	ret    
c0018666:	83 e2 f0             	and    edx,0xfffffff0
c0018669:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001866c:	c3                   	ret    
c001866d:	90                   	nop

c001866e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001866e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018672:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018676:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001867a:	f6 c2 01             	test   dl,0x1
c001867d:	74 08                	je     c0018687 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001867f:	83 e2 fc             	and    edx,0xfffffffc
c0018682:	01 ca                	add    edx,ecx
c0018684:	66 ef                	out    dx,ax
c0018686:	c3                   	ret    
c0018687:	83 e2 f0             	and    edx,0xfffffff0
c001868a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001868e:	c3                   	ret    
c001868f:	90                   	nop

c0018690 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018690:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018694:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018698:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001869c:	f6 c2 01             	test   dl,0x1
c001869f:	74 07                	je     c00186a8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00186a1:	83 e2 fc             	and    edx,0xfffffffc
c00186a4:	01 ca                	add    edx,ecx
c00186a6:	ef                   	out    dx,eax
c00186a7:	c3                   	ret    
c00186a8:	83 e2 f0             	and    edx,0xfffffff0
c00186ab:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00186ae:	c3                   	ret    
c00186af:	90                   	nop

c00186b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186b0:	55                   	push   ebp
c00186b1:	57                   	push   edi
c00186b2:	56                   	push   esi
c00186b3:	53                   	push   ebx
c00186b4:	83 ec 0c             	sub    esp,0xc
c00186b7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00186bb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00186bf:	89 f0                	mov    eax,esi
c00186c1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00186c5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00186c9:	3c 07                	cmp    al,0x7
c00186cb:	76 10                	jbe    c00186dd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00186cd:	83 ec 0c             	sub    esp,0xc
c00186d0:	68 a3 f1 01 c0       	push   0xc001f1a3
c00186d5:	e8 e9 7f ff ff       	call   c00106c3 <KePanic(char const*)>
c00186da:	83 c4 10             	add    esp,0x10
c00186dd:	80 fb 0f             	cmp    bl,0xf
c00186e0:	76 10                	jbe    c00186f2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00186e2:	83 ec 0c             	sub    esp,0xc
c00186e5:	68 d3 f1 01 c0       	push   0xc001f1d3
c00186ea:	e8 d4 7f ff ff       	call   c00106c3 <KePanic(char const*)>
c00186ef:	83 c4 10             	add    esp,0x10
c00186f2:	8d 04 36             	lea    eax,[esi+esi*1]
c00186f5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186fa:	83 c8 f0             	or     eax,0xfffffff0
c00186fd:	ee                   	out    dx,al
c00186fe:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018703:	89 e8                	mov    eax,ebp
c0018705:	ee                   	out    dx,al
c0018706:	83 c4 0c             	add    esp,0xc
c0018709:	89 d8                	mov    eax,ebx
c001870b:	66 81 e7 fc 00       	and    di,0xfc
c0018710:	5b                   	pop    ebx
c0018711:	c1 e0 08             	shl    eax,0x8
c0018714:	5e                   	pop    esi
c0018715:	09 f8                	or     eax,edi
c0018717:	5f                   	pop    edi
c0018718:	66 0d 00 c0          	or     ax,0xc000
c001871c:	5d                   	pop    ebp
c001871d:	c3                   	ret    

c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001871e:	57                   	push   edi
c001871f:	56                   	push   esi
c0018720:	53                   	push   ebx
c0018721:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018725:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018729:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001872f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018733:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018737:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001873b:	83 ff 01             	cmp    edi,0x1
c001873e:	75 3e                	jne    c001877e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018740:	89 de                	mov    esi,ebx
c0018742:	0f b6 c0             	movzx  eax,al
c0018745:	81 e6 fc 00 00 00    	and    esi,0xfc
c001874b:	c1 e0 10             	shl    eax,0x10
c001874e:	0f b6 c9             	movzx  ecx,cl
c0018751:	09 f0                	or     eax,esi
c0018753:	c1 e1 08             	shl    ecx,0x8
c0018756:	0f b6 d2             	movzx  edx,dl
c0018759:	09 c8                	or     eax,ecx
c001875b:	c1 e2 0b             	shl    edx,0xb
c001875e:	09 d0                	or     eax,edx
c0018760:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018765:	0d 00 00 00 80       	or     eax,0x80000000
c001876a:	ef                   	out    dx,eax
c001876b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018770:	ed                   	in     eax,dx
c0018771:	83 e3 02             	and    ebx,0x2
c0018774:	0f b6 cb             	movzx  ecx,bl
c0018777:	c1 e1 03             	shl    ecx,0x3
c001877a:	d3 e8                	shr    eax,cl
c001877c:	eb 43                	jmp    c00187c1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001877e:	83 ff 02             	cmp    edi,0x2
c0018781:	75 2c                	jne    c00187af <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018783:	83 ec 0c             	sub    esp,0xc
c0018786:	0f b6 c9             	movzx  ecx,cl
c0018789:	0f b6 d2             	movzx  edx,dl
c001878c:	0f b6 fb             	movzx  edi,bl
c001878f:	0f b6 c0             	movzx  eax,al
c0018792:	57                   	push   edi
c0018793:	51                   	push   ecx
c0018794:	52                   	push   edx
c0018795:	50                   	push   eax
c0018796:	56                   	push   esi
c0018797:	e8 14 ff ff ff       	call   c00186b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001879c:	89 c2                	mov    edx,eax
c001879e:	ed                   	in     eax,dx
c001879f:	83 e3 02             	and    ebx,0x2
c00187a2:	83 c4 20             	add    esp,0x20
c00187a5:	0f b6 cb             	movzx  ecx,bl
c00187a8:	c1 e1 03             	shl    ecx,0x3
c00187ab:	d3 e8                	shr    eax,cl
c00187ad:	eb 12                	jmp    c00187c1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187af:	83 ec 0c             	sub    esp,0xc
c00187b2:	68 03 f2 01 c0       	push   0xc001f203
c00187b7:	e8 07 7f ff ff       	call   c00106c3 <KePanic(char const*)>
c00187bc:	83 c4 10             	add    esp,0x10
c00187bf:	31 c0                	xor    eax,eax
c00187c1:	5b                   	pop    ebx
c00187c2:	5e                   	pop    esi
c00187c3:	5f                   	pop    edi
c00187c4:	c3                   	ret    
c00187c5:	90                   	nop

c00187c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00187c6:	83 ec 18             	sub    esp,0x18
c00187c9:	6a 00                	push   0x0
c00187cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d0:	50                   	push   eax
c00187d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d6:	50                   	push   eax
c00187d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187dc:	50                   	push   eax
c00187dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187e1:	e8 38 ff ff ff       	call   c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187e6:	83 c4 2c             	add    esp,0x2c
c00187e9:	c3                   	ret    

c00187ea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00187ea:	83 ec 18             	sub    esp,0x18
c00187ed:	6a 0e                	push   0xe
c00187ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187f4:	50                   	push   eax
c00187f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187fa:	50                   	push   eax
c00187fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018800:	50                   	push   eax
c0018801:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018805:	e8 14 ff ff ff       	call   c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001880a:	83 c4 2c             	add    esp,0x2c
c001880d:	0f b6 c0             	movzx  eax,al
c0018810:	c3                   	ret    
c0018811:	90                   	nop

c0018812 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018812:	55                   	push   ebp
c0018813:	57                   	push   edi
c0018814:	56                   	push   esi
c0018815:	53                   	push   ebx
c0018816:	83 ec 18             	sub    esp,0x18
c0018819:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001881e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018823:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018828:	6a 0a                	push   0xa
c001882a:	56                   	push   esi
c001882b:	55                   	push   ebp
c001882c:	57                   	push   edi
c001882d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018831:	e8 e8 fe ff ff       	call   c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018836:	83 c4 14             	add    esp,0x14
c0018839:	89 c3                	mov    ebx,eax
c001883b:	6a 0a                	push   0xa
c001883d:	0f b6 db             	movzx  ebx,bl
c0018840:	56                   	push   esi
c0018841:	55                   	push   ebp
c0018842:	57                   	push   edi
c0018843:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018847:	e8 d2 fe ff ff       	call   c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001884c:	83 c4 2c             	add    esp,0x2c
c001884f:	25 00 ff 00 00       	and    eax,0xff00
c0018854:	09 d8                	or     eax,ebx
c0018856:	5b                   	pop    ebx
c0018857:	5e                   	pop    esi
c0018858:	5f                   	pop    edi
c0018859:	5d                   	pop    ebp
c001885a:	c3                   	ret    
c001885b:	90                   	nop

c001885c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001885c:	83 ec 18             	sub    esp,0x18
c001885f:	6a 08                	push   0x8
c0018861:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018866:	50                   	push   eax
c0018867:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001886c:	50                   	push   eax
c001886d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018872:	50                   	push   eax
c0018873:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018877:	e8 a2 fe ff ff       	call   c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001887c:	83 c4 2c             	add    esp,0x2c
c001887f:	0f b6 c4             	movzx  eax,ah
c0018882:	c3                   	ret    
c0018883:	90                   	nop

c0018884 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018884:	83 ec 18             	sub    esp,0x18
c0018887:	6a 08                	push   0x8
c0018889:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001888e:	50                   	push   eax
c001888f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018894:	50                   	push   eax
c0018895:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001889a:	50                   	push   eax
c001889b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001889f:	e8 7a fe ff ff       	call   c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188a4:	83 c4 2c             	add    esp,0x2c
c00188a7:	c3                   	ret    

c00188a8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00188a8:	83 ec 18             	sub    esp,0x18
c00188ab:	6a 3c                	push   0x3c
c00188ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188b2:	50                   	push   eax
c00188b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188b8:	50                   	push   eax
c00188b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188be:	50                   	push   eax
c00188bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188c3:	e8 56 fe ff ff       	call   c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188c8:	83 c4 2c             	add    esp,0x2c
c00188cb:	c3                   	ret    

c00188cc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00188cc:	83 ec 18             	sub    esp,0x18
c00188cf:	6a 18                	push   0x18
c00188d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188d6:	50                   	push   eax
c00188d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188dc:	50                   	push   eax
c00188dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e2:	50                   	push   eax
c00188e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188e7:	e8 32 fe ff ff       	call   c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188ec:	83 c4 2c             	add    esp,0x2c
c00188ef:	0f b6 c4             	movzx  eax,ah
c00188f2:	c3                   	ret    
c00188f3:	90                   	nop

c00188f4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00188f4:	55                   	push   ebp
c00188f5:	57                   	push   edi
c00188f6:	56                   	push   esi
c00188f7:	53                   	push   ebx
c00188f8:	83 ec 28             	sub    esp,0x28
c00188fb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00188ff:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018904:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018909:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001890e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018915:	8d 43 12             	lea    eax,[ebx+0x12]
c0018918:	83 c3 10             	add    ebx,0x10
c001891b:	0f b6 c0             	movzx  eax,al
c001891e:	0f b6 db             	movzx  ebx,bl
c0018921:	50                   	push   eax
c0018922:	51                   	push   ecx
c0018923:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018927:	57                   	push   edi
c0018928:	55                   	push   ebp
c0018929:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001892d:	e8 ec fd ff ff       	call   c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018932:	83 c4 14             	add    esp,0x14
c0018935:	89 c6                	mov    esi,eax
c0018937:	53                   	push   ebx
c0018938:	c1 e6 10             	shl    esi,0x10
c001893b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001893f:	51                   	push   ecx
c0018940:	57                   	push   edi
c0018941:	55                   	push   ebp
c0018942:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018946:	e8 d3 fd ff ff       	call   c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001894b:	83 c4 3c             	add    esp,0x3c
c001894e:	0f b7 c0             	movzx  eax,ax
c0018951:	5b                   	pop    ebx
c0018952:	09 f0                	or     eax,esi
c0018954:	5e                   	pop    esi
c0018955:	5f                   	pop    edi
c0018956:	5d                   	pop    ebp
c0018957:	c3                   	ret    

c0018958 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018958:	55                   	push   ebp
c0018959:	57                   	push   edi
c001895a:	56                   	push   esi
c001895b:	53                   	push   ebx
c001895c:	83 ec 0c             	sub    esp,0xc
c001895f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018963:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018967:	89 f5                	mov    ebp,esi
c0018969:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001896f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018973:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018977:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001897b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001897f:	83 f9 01             	cmp    ecx,0x1
c0018982:	75 5d                	jne    c00189e1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018984:	0f b6 c8             	movzx  ecx,al
c0018987:	0f b6 d2             	movzx  edx,dl
c001898a:	c1 e1 10             	shl    ecx,0x10
c001898d:	c1 e2 0b             	shl    edx,0xb
c0018990:	89 f0                	mov    eax,esi
c0018992:	25 fc 00 00 00       	and    eax,0xfc
c0018997:	09 c1                	or     ecx,eax
c0018999:	89 e8                	mov    eax,ebp
c001899b:	0f b6 c0             	movzx  eax,al
c001899e:	c1 e0 08             	shl    eax,0x8
c00189a1:	09 c1                	or     ecx,eax
c00189a3:	09 d1                	or     ecx,edx
c00189a5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189aa:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00189b0:	89 c8                	mov    eax,ecx
c00189b2:	ef                   	out    dx,eax
c00189b3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189b8:	ed                   	in     eax,dx
c00189b9:	0f b7 db             	movzx  ebx,bx
c00189bc:	83 e6 02             	and    esi,0x2
c00189bf:	74 0a                	je     c00189cb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00189c1:	0f b7 d0             	movzx  edx,ax
c00189c4:	c1 e3 10             	shl    ebx,0x10
c00189c7:	09 d3                	or     ebx,edx
c00189c9:	eb 05                	jmp    c00189d0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00189cb:	66 31 c0             	xor    ax,ax
c00189ce:	09 c3                	or     ebx,eax
c00189d0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189d5:	89 c8                	mov    eax,ecx
c00189d7:	ef                   	out    dx,eax
c00189d8:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189dd:	89 d8                	mov    eax,ebx
c00189df:	eb 41                	jmp    c0018a22 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189e1:	83 f9 02             	cmp    ecx,0x2
c00189e4:	75 45                	jne    c0018a2b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00189e6:	83 ec 0c             	sub    esp,0xc
c00189e9:	0f b6 d2             	movzx  edx,dl
c00189ec:	89 f1                	mov    ecx,esi
c00189ee:	0f b6 c0             	movzx  eax,al
c00189f1:	0f b6 f1             	movzx  esi,cl
c00189f4:	89 e9                	mov    ecx,ebp
c00189f6:	56                   	push   esi
c00189f7:	0f b6 c9             	movzx  ecx,cl
c00189fa:	51                   	push   ecx
c00189fb:	52                   	push   edx
c00189fc:	50                   	push   eax
c00189fd:	57                   	push   edi
c00189fe:	e8 ad fc ff ff       	call   c00186b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a03:	89 c2                	mov    edx,eax
c0018a05:	ed                   	in     eax,dx
c0018a06:	83 c4 20             	add    esp,0x20
c0018a09:	0f b7 db             	movzx  ebx,bx
c0018a0c:	f6 c2 02             	test   dl,0x2
c0018a0f:	74 0c                	je     c0018a1d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018a11:	0f b7 c8             	movzx  ecx,ax
c0018a14:	89 d8                	mov    eax,ebx
c0018a16:	c1 e0 10             	shl    eax,0x10
c0018a19:	09 c8                	or     eax,ecx
c0018a1b:	eb 05                	jmp    c0018a22 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a1d:	66 31 c0             	xor    ax,ax
c0018a20:	09 d8                	or     eax,ebx
c0018a22:	ef                   	out    dx,eax
c0018a23:	83 c4 0c             	add    esp,0xc
c0018a26:	5b                   	pop    ebx
c0018a27:	5e                   	pop    esi
c0018a28:	5f                   	pop    edi
c0018a29:	5d                   	pop    ebp
c0018a2a:	c3                   	ret    
c0018a2b:	c7 44 24 20 03 f2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f203
c0018a33:	83 c4 0c             	add    esp,0xc
c0018a36:	5b                   	pop    ebx
c0018a37:	5e                   	pop    esi
c0018a38:	5f                   	pop    edi
c0018a39:	5d                   	pop    ebp
c0018a3a:	e9 84 7c ff ff       	jmp    c00106c3 <KePanic(char const*)>
c0018a3f:	90                   	nop

c0018a40 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a40:	55                   	push   ebp
c0018a41:	57                   	push   edi
c0018a42:	56                   	push   esi
c0018a43:	53                   	push   ebx
c0018a44:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a4a:	80 3d 2c 48 02 c0 00 	cmp    BYTE PTR ds:0xc002482c,0x0
c0018a51:	0f 85 84 00 00 00    	jne    c0018adb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a57:	83 ec 0c             	sub    esp,0xc
c0018a5a:	68 14 01 00 00       	push   0x114
c0018a5f:	e8 f9 f3 fe ff       	call   c0007e5d <malloc>
c0018a64:	83 c4 0c             	add    esp,0xc
c0018a67:	89 c3                	mov    ebx,eax
c0018a69:	ff 35 70 3e 02 c0    	push   DWORD PTR ds:0xc0023e70
c0018a6f:	68 09 f2 01 c0       	push   0xc001f209
c0018a74:	50                   	push   eax
c0018a75:	e8 f0 25 ff ff       	call   c000b06a <File::File(char const*, Process*)>
c0018a7a:	5a                   	pop    edx
c0018a7b:	59                   	pop    ecx
c0018a7c:	6a 01                	push   0x1
c0018a7e:	53                   	push   ebx
c0018a7f:	e8 a6 26 ff ff       	call   c000b12a <File::open(FileOpenMode)>
c0018a84:	83 c4 0c             	add    esp,0xc
c0018a87:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018a8b:	50                   	push   eax
c0018a8c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a90:	50                   	push   eax
c0018a91:	53                   	push   ebx
c0018a92:	e8 3f 29 ff ff       	call   c000b3d6 <File::stat(unsigned long long*, bool*)>
c0018a97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a9b:	40                   	inc    eax
c0018a9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a9f:	e8 b9 f3 fe ff       	call   c0007e5d <malloc>
c0018aa4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018aa8:	a3 28 48 02 c0       	mov    ds:0xc0024828,eax
c0018aad:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018ab1:	5e                   	pop    esi
c0018ab2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018ab4:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018ab8:	51                   	push   ecx
c0018ab9:	50                   	push   eax
c0018aba:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018abe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018ac2:	53                   	push   ebx
c0018ac3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018ac6:	83 c4 14             	add    esp,0x14
c0018ac9:	53                   	push   ebx
c0018aca:	e8 b9 26 ff ff       	call   c000b188 <File::close()>
c0018acf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ad3:	83 c4 10             	add    esp,0x10
c0018ad6:	a3 24 48 02 c0       	mov    ds:0xc0024824,eax
c0018adb:	a1 24 48 02 c0       	mov    eax,ds:0xc0024824
c0018ae0:	8b 15 28 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024828
c0018ae6:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ae9:	31 ff                	xor    edi,edi
c0018aeb:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018af3:	31 f6                	xor    esi,esi
c0018af5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018afa:	31 db                	xor    ebx,ebx
c0018afc:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018b04:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018b09:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018b10:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018b14:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018b1b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018b1f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b22:	0f 8e 6b 01 00 00    	jle    c0018c93 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018b28:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b2b:	d4 40                	aam    0x40
c0018b2d:	d5 39                	aad    0x39
c0018b2f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b33:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b37:	d4 40                	aam    0x40
c0018b39:	d5 39                	aad    0x39
c0018b3b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b3f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b43:	d4 40                	aam    0x40
c0018b45:	d5 39                	aad    0x39
c0018b47:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b4b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b4f:	d4 40                	aam    0x40
c0018b51:	d5 39                	aad    0x39
c0018b53:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b57:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b5b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b5f:	3c 56                	cmp    al,0x56
c0018b61:	74 45                	je     c0018ba8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b63:	d4 40                	aam    0x40
c0018b65:	d5 39                	aad    0x39
c0018b67:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b6a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b6e:	0f b6 c9             	movzx  ecx,cl
c0018b71:	c1 e1 04             	shl    ecx,0x4
c0018b74:	d4 40                	aam    0x40
c0018b76:	d5 39                	aad    0x39
c0018b78:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b7b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018b7f:	0f b6 db             	movzx  ebx,bl
c0018b82:	09 cb                	or     ebx,ecx
c0018b84:	c1 e3 04             	shl    ebx,0x4
c0018b87:	d4 40                	aam    0x40
c0018b89:	d5 39                	aad    0x39
c0018b8b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b8e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018b92:	0f b6 c9             	movzx  ecx,cl
c0018b95:	09 cb                	or     ebx,ecx
c0018b97:	c1 e3 04             	shl    ebx,0x4
c0018b9a:	89 d9                	mov    ecx,ebx
c0018b9c:	d4 40                	aam    0x40
c0018b9e:	d5 39                	aad    0x39
c0018ba0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018ba3:	0f b6 db             	movzx  ebx,bl
c0018ba6:	09 cb                	or     ebx,ecx
c0018ba8:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018bac:	80 f9 44             	cmp    cl,0x44
c0018baf:	74 47                	je     c0018bf8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018bb1:	88 c8                	mov    al,cl
c0018bb3:	d4 40                	aam    0x40
c0018bb5:	d5 39                	aad    0x39
c0018bb7:	83 e8 30             	sub    eax,0x30
c0018bba:	0f b6 e8             	movzx  ebp,al
c0018bbd:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018bc1:	c1 e5 04             	shl    ebp,0x4
c0018bc4:	d4 40                	aam    0x40
c0018bc6:	d5 39                	aad    0x39
c0018bc8:	83 e8 30             	sub    eax,0x30
c0018bcb:	0f b6 f0             	movzx  esi,al
c0018bce:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018bd2:	09 ee                	or     esi,ebp
c0018bd4:	c1 e6 04             	shl    esi,0x4
c0018bd7:	d4 40                	aam    0x40
c0018bd9:	d5 39                	aad    0x39
c0018bdb:	83 e8 30             	sub    eax,0x30
c0018bde:	0f b6 e8             	movzx  ebp,al
c0018be1:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018be5:	09 ee                	or     esi,ebp
c0018be7:	c1 e6 04             	shl    esi,0x4
c0018bea:	89 f5                	mov    ebp,esi
c0018bec:	d4 40                	aam    0x40
c0018bee:	d5 39                	aad    0x39
c0018bf0:	83 e8 30             	sub    eax,0x30
c0018bf3:	0f b6 f0             	movzx  esi,al
c0018bf6:	09 ee                	or     esi,ebp
c0018bf8:	83 c7 10             	add    edi,0x10
c0018bfb:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018bff:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018c02:	3c 0a                	cmp    al,0xa
c0018c04:	74 09                	je     c0018c0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018c06:	45                   	inc    ebp
c0018c07:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018c0a:	75 16                	jne    c0018c22 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018c0c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018c0f:	3c 0a                	cmp    al,0xa
c0018c11:	0f 94 c0             	sete   al
c0018c14:	0f b6 c0             	movzx  eax,al
c0018c17:	01 c7                	add    edi,eax
c0018c19:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018c1e:	75 0c                	jne    c0018c2c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018c20:	eb 15                	jmp    c0018c37 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018c22:	47                   	inc    edi
c0018c23:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018c26:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018c2a:	eb d3                	jmp    c0018bff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018c2c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018c31:	0f 85 e8 fe ff ff    	jne    c0018b1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c37:	80 f9 44             	cmp    cl,0x44
c0018c3a:	74 0b                	je     c0018c47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018c3c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c41:	0f 85 d8 fe ff ff    	jne    c0018b1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c47:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c4b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c4f:	c1 e1 04             	shl    ecx,0x4
c0018c52:	83 e8 30             	sub    eax,0x30
c0018c55:	09 c8                	or     eax,ecx
c0018c57:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c5b:	0f 85 be fe ff ff    	jne    c0018b1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c61:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c69:	c1 e1 04             	shl    ecx,0x4
c0018c6c:	83 e8 30             	sub    eax,0x30
c0018c6f:	09 c8                	or     eax,ecx
c0018c71:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018c75:	0f 85 a4 fe ff ff    	jne    c0018b1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c7b:	50                   	push   eax
c0018c7c:	50                   	push   eax
c0018c7d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c81:	50                   	push   eax
c0018c82:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018c89:	e8 92 79 fe ff       	call   c0000620 <strcpy>
c0018c8e:	83 c4 10             	add    esp,0x10
c0018c91:	eb 15                	jmp    c0018ca8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018c93:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c9a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018ca5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018ca8:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018caf:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018cb5:	5b                   	pop    ebx
c0018cb6:	5e                   	pop    esi
c0018cb7:	5f                   	pop    edi
c0018cb8:	5d                   	pop    ebp
c0018cb9:	c3                   	ret    

c0018cba <PCI::checkBus(unsigned char)>:
c0018cba:	56                   	push   esi
c0018cbb:	53                   	push   ebx
c0018cbc:	31 f6                	xor    esi,esi
c0018cbe:	51                   	push   ecx
c0018cbf:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018cc3:	0f b6 c3             	movzx  eax,bl
c0018cc6:	52                   	push   edx
c0018cc7:	56                   	push   esi
c0018cc8:	46                   	inc    esi
c0018cc9:	50                   	push   eax
c0018cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cce:	e8 f3 02 00 00       	call   c0018fc6 <PCI::checkDevice(unsigned char, unsigned char)>
c0018cd3:	83 c4 10             	add    esp,0x10
c0018cd6:	83 fe 20             	cmp    esi,0x20
c0018cd9:	75 e8                	jne    c0018cc3 <PCI::checkBus(unsigned char)+0x9>
c0018cdb:	58                   	pop    eax
c0018cdc:	5b                   	pop    ebx
c0018cdd:	5e                   	pop    esi
c0018cde:	c3                   	ret    
c0018cdf:	90                   	nop

c0018ce0 <PCI::foundDevice(PCIDeviceInfo)>:
c0018ce0:	55                   	push   ebp
c0018ce1:	57                   	push   edi
c0018ce2:	56                   	push   esi
c0018ce3:	53                   	push   ebx
c0018ce4:	83 ec 1c             	sub    esp,0x1c
c0018ce7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018ceb:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018cf1:	0f 84 52 01 00 00    	je     c0018e49 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018cf7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018cfb:	66 81 f9 06 04       	cmp    cx,0x406
c0018d00:	75 2c                	jne    c0018d2e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018d02:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018d07:	50                   	push   eax
c0018d08:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018d0d:	50                   	push   eax
c0018d0e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018d13:	50                   	push   eax
c0018d14:	56                   	push   esi
c0018d15:	e8 b2 fb ff ff       	call   c00188cc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018d1a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d1e:	0f b6 c0             	movzx  eax,al
c0018d21:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018d25:	83 c4 2c             	add    esp,0x2c
c0018d28:	5b                   	pop    ebx
c0018d29:	5e                   	pop    esi
c0018d2a:	5f                   	pop    edi
c0018d2b:	5d                   	pop    ebp
c0018d2c:	eb 8c                	jmp    c0018cba <PCI::checkBus(unsigned char)>
c0018d2e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d32:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d3c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d40:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d44:	88 d3                	mov    bl,dl
c0018d46:	85 c0                	test   eax,eax
c0018d48:	74 33                	je     c0018d7d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d4a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d4d:	85 d2                	test   edx,edx
c0018d4f:	74 28                	je     c0018d79 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d51:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d57:	31 ef                	xor    edi,ebp
c0018d59:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d5f:	75 18                	jne    c0018d79 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d61:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d65:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d6b:	75 0c                	jne    c0018d79 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d6d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d73:	0f 84 d0 00 00 00    	je     c0018e49 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d79:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d7b:	eb c9                	jmp    c0018d46 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018d7d:	66 81 f9 01 06       	cmp    cx,0x601
c0018d82:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018d86:	75 19                	jne    c0018da1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018d88:	83 ec 0c             	sub    esp,0xc
c0018d8b:	68 64 01 00 00       	push   0x164
c0018d90:	e8 c8 f0 fe ff       	call   c0007e5d <malloc>
c0018d95:	89 c5                	mov    ebp,eax
c0018d97:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d9a:	e8 47 0e 00 00       	call   c0019be6 <SATABus::SATABus()>
c0018d9f:	eb 1e                	jmp    c0018dbf <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018da1:	66 81 f9 01 01       	cmp    cx,0x101
c0018da6:	75 60                	jne    c0018e08 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018da8:	83 ec 0c             	sub    esp,0xc
c0018dab:	68 70 02 00 00       	push   0x270
c0018db0:	e8 a8 f0 fe ff       	call   c0007e5d <malloc>
c0018db5:	89 c5                	mov    ebp,eax
c0018db7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dba:	e8 cb 02 00 00       	call   c001908a <IDE::IDE()>
c0018dbf:	58                   	pop    eax
c0018dc0:	5a                   	pop    edx
c0018dc1:	55                   	push   ebp
c0018dc2:	56                   	push   esi
c0018dc3:	e8 6c 31 ff ff       	call   c000bf34 <Device::addChild(Device*)>
c0018dc8:	83 ec 1c             	sub    esp,0x1c
c0018dcb:	b9 09 00 00 00       	mov    ecx,0x9
c0018dd0:	fc                   	cld    
c0018dd1:	89 e7                	mov    edi,esp
c0018dd3:	89 de                	mov    esi,ebx
c0018dd5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018dd7:	55                   	push   ebp
c0018dd8:	e8 9d 30 ff ff       	call   c000be7a <Device::preOpenPCI(PCIDeviceInfo)>
c0018ddd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018de0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018de4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018dec:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018df4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018dfc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018dff:	83 c4 4c             	add    esp,0x4c
c0018e02:	5b                   	pop    ebx
c0018e03:	5e                   	pop    esi
c0018e04:	5f                   	pop    edi
c0018e05:	5d                   	pop    ebp
c0018e06:	ff e0                	jmp    eax
c0018e08:	83 ec 0c             	sub    esp,0xc
c0018e0b:	68 58 01 00 00       	push   0x158
c0018e10:	e8 48 f0 fe ff       	call   c0007e5d <malloc>
c0018e15:	89 c5                	mov    ebp,eax
c0018e17:	58                   	pop    eax
c0018e18:	5a                   	pop    edx
c0018e19:	68 22 f2 01 c0       	push   0xc001f222
c0018e1e:	55                   	push   ebp
c0018e1f:	e8 ae 33 ff ff       	call   c000c1d2 <DriverlessDevice::DriverlessDevice(char const*)>
c0018e24:	59                   	pop    ecx
c0018e25:	5f                   	pop    edi
c0018e26:	55                   	push   ebp
c0018e27:	56                   	push   esi
c0018e28:	e8 07 31 ff ff       	call   c000bf34 <Device::addChild(Device*)>
c0018e2d:	b9 09 00 00 00       	mov    ecx,0x9
c0018e32:	fc                   	cld    
c0018e33:	89 df                	mov    edi,ebx
c0018e35:	89 de                	mov    esi,ebx
c0018e37:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e39:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018e3d:	83 c4 2c             	add    esp,0x2c
c0018e40:	5b                   	pop    ebx
c0018e41:	5e                   	pop    esi
c0018e42:	5f                   	pop    edi
c0018e43:	5d                   	pop    ebp
c0018e44:	e9 31 30 ff ff       	jmp    c000be7a <Device::preOpenPCI(PCIDeviceInfo)>
c0018e49:	83 c4 1c             	add    esp,0x1c
c0018e4c:	5b                   	pop    ebx
c0018e4d:	5e                   	pop    esi
c0018e4e:	5f                   	pop    edi
c0018e4f:	5d                   	pop    ebp
c0018e50:	c3                   	ret    
c0018e51:	90                   	nop

c0018e52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e52:	55                   	push   ebp
c0018e53:	57                   	push   edi
c0018e54:	56                   	push   esi
c0018e55:	53                   	push   ebx
c0018e56:	83 ec 68             	sub    esp,0x68
c0018e59:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e5d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e68:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e6f:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018e74:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018e78:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018e7f:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018e84:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018e88:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e8d:	6a 0c                	push   0xc
c0018e8f:	57                   	push   edi
c0018e90:	53                   	push   ebx
c0018e91:	56                   	push   esi
c0018e92:	55                   	push   ebp
c0018e93:	e8 86 f8 ff ff       	call   c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e98:	83 c4 20             	add    esp,0x20
c0018e9b:	57                   	push   edi
c0018e9c:	53                   	push   ebx
c0018e9d:	56                   	push   esi
c0018e9e:	55                   	push   ebp
c0018e9f:	e8 6e f9 ff ff       	call   c0018812 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018ea4:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018ea9:	57                   	push   edi
c0018eaa:	53                   	push   ebx
c0018eab:	56                   	push   esi
c0018eac:	55                   	push   ebp
c0018ead:	e8 f6 f9 ff ff       	call   c00188a8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018eb2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018eb6:	83 c4 14             	add    esp,0x14
c0018eb9:	6a 3c                	push   0x3c
c0018ebb:	57                   	push   edi
c0018ebc:	53                   	push   ebx
c0018ebd:	56                   	push   esi
c0018ebe:	55                   	push   ebp
c0018ebf:	e8 5a f8 ff ff       	call   c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ec4:	0f b6 c4             	movzx  eax,ah
c0018ec7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018ecb:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018ecf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018ed3:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c0018ed8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018ede:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018ee4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018ee8:	83 c4 20             	add    esp,0x20
c0018eeb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ef0:	74 30                	je     c0018f22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018ef2:	31 c0                	xor    eax,eax
c0018ef4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018ef8:	7e 28                	jle    c0018f22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018efa:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018f02:	39 cb                	cmp    ebx,ecx
c0018f04:	75 19                	jne    c0018f1f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f06:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018f0e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018f12:	75 0b                	jne    c0018f1f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f14:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018f1b:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018f1f:	40                   	inc    eax
c0018f20:	eb d2                	jmp    c0018ef4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018f22:	31 d2                	xor    edx,edx
c0018f24:	83 ec 0c             	sub    esp,0xc
c0018f27:	57                   	push   edi
c0018f28:	53                   	push   ebx
c0018f29:	56                   	push   esi
c0018f2a:	52                   	push   edx
c0018f2b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018f2f:	55                   	push   ebp
c0018f30:	e8 bf f9 ff ff       	call   c00188f4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f39:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018f3d:	42                   	inc    edx
c0018f3e:	83 c4 20             	add    esp,0x20
c0018f41:	83 fa 06             	cmp    edx,0x6
c0018f44:	75 de                	jne    c0018f24 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f46:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f4b:	83 ec 0c             	sub    esp,0xc
c0018f4e:	86 e0                	xchg   al,ah
c0018f50:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f55:	6a 02                	push   0x2
c0018f57:	57                   	push   edi
c0018f58:	53                   	push   ebx
c0018f59:	56                   	push   esi
c0018f5a:	55                   	push   ebp
c0018f5b:	e8 be f7 ff ff       	call   c001871e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f60:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f65:	83 c4 20             	add    esp,0x20
c0018f68:	57                   	push   edi
c0018f69:	53                   	push   ebx
c0018f6a:	56                   	push   esi
c0018f6b:	55                   	push   ebp
c0018f6c:	e8 eb f8 ff ff       	call   c001885c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f71:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018f75:	57                   	push   edi
c0018f76:	53                   	push   ebx
c0018f77:	56                   	push   esi
c0018f78:	55                   	push   ebp
c0018f79:	e8 48 f8 ff ff       	call   c00187c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f7e:	b9 09 00 00 00       	mov    ecx,0x9
c0018f83:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018f88:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018f8c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018f90:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018f94:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018f98:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018f9c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018fa0:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018fa4:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018fa8:	83 ec 0c             	sub    esp,0xc
c0018fab:	fc                   	cld    
c0018fac:	89 e7                	mov    edi,esp
c0018fae:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018fb2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018fb4:	55                   	push   ebp
c0018fb5:	e8 26 fd ff ff       	call   c0018ce0 <PCI::foundDevice(PCIDeviceInfo)>
c0018fba:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018fc0:	5b                   	pop    ebx
c0018fc1:	5e                   	pop    esi
c0018fc2:	5f                   	pop    edi
c0018fc3:	5d                   	pop    ebp
c0018fc4:	c3                   	ret    
c0018fc5:	90                   	nop

c0018fc6 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018fc6:	55                   	push   ebp
c0018fc7:	57                   	push   edi
c0018fc8:	56                   	push   esi
c0018fc9:	53                   	push   ebx
c0018fca:	83 ec 0c             	sub    esp,0xc
c0018fcd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018fd1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018fd6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018fdb:	6a 00                	push   0x0
c0018fdd:	56                   	push   esi
c0018fde:	57                   	push   edi
c0018fdf:	55                   	push   ebp
c0018fe0:	e8 e1 f7 ff ff       	call   c00187c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fe5:	6a 00                	push   0x0
c0018fe7:	56                   	push   esi
c0018fe8:	57                   	push   edi
c0018fe9:	55                   	push   ebp
c0018fea:	e8 63 fe ff ff       	call   c0018e52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fef:	83 c4 20             	add    esp,0x20
c0018ff2:	6a 00                	push   0x0
c0018ff4:	56                   	push   esi
c0018ff5:	57                   	push   edi
c0018ff6:	55                   	push   ebp
c0018ff7:	e8 ee f7 ff ff       	call   c00187ea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018ffc:	83 c4 10             	add    esp,0x10
c0018fff:	84 c0                	test   al,al
c0019001:	79 27                	jns    c001902a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0019003:	bb 01 00 00 00       	mov    ebx,0x1
c0019008:	53                   	push   ebx
c0019009:	56                   	push   esi
c001900a:	57                   	push   edi
c001900b:	55                   	push   ebp
c001900c:	e8 b5 f7 ff ff       	call   c00187c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019011:	83 c4 10             	add    esp,0x10
c0019014:	66 40                	inc    ax
c0019016:	74 0c                	je     c0019024 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0019018:	53                   	push   ebx
c0019019:	56                   	push   esi
c001901a:	57                   	push   edi
c001901b:	55                   	push   ebp
c001901c:	e8 31 fe ff ff       	call   c0018e52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019021:	83 c4 10             	add    esp,0x10
c0019024:	43                   	inc    ebx
c0019025:	83 fb 08             	cmp    ebx,0x8
c0019028:	75 de                	jne    c0019008 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001902a:	83 c4 0c             	add    esp,0xc
c001902d:	5b                   	pop    ebx
c001902e:	5e                   	pop    esi
c001902f:	5f                   	pop    edi
c0019030:	5d                   	pop    ebp
c0019031:	c3                   	ret    

c0019032 <PCI::detect()>:
c0019032:	56                   	push   esi
c0019033:	53                   	push   ebx
c0019034:	53                   	push   ebx
c0019035:	31 db                	xor    ebx,ebx
c0019037:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001903b:	6a 00                	push   0x0
c001903d:	6a 00                	push   0x0
c001903f:	6a 00                	push   0x0
c0019041:	56                   	push   esi
c0019042:	e8 a3 f7 ff ff       	call   c00187ea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019047:	83 c4 10             	add    esp,0x10
c001904a:	a8 80                	test   al,0x80
c001904c:	75 21                	jne    c001906f <PCI::detect()+0x3d>
c001904e:	51                   	push   ecx
c001904f:	51                   	push   ecx
c0019050:	6a 00                	push   0x0
c0019052:	56                   	push   esi
c0019053:	e8 62 fc ff ff       	call   c0018cba <PCI::checkBus(unsigned char)>
c0019058:	83 c4 10             	add    esp,0x10
c001905b:	eb 24                	jmp    c0019081 <PCI::detect()+0x4f>
c001905d:	52                   	push   edx
c001905e:	52                   	push   edx
c001905f:	53                   	push   ebx
c0019060:	43                   	inc    ebx
c0019061:	56                   	push   esi
c0019062:	e8 53 fc ff ff       	call   c0018cba <PCI::checkBus(unsigned char)>
c0019067:	83 c4 10             	add    esp,0x10
c001906a:	83 fb 08             	cmp    ebx,0x8
c001906d:	74 12                	je     c0019081 <PCI::detect()+0x4f>
c001906f:	53                   	push   ebx
c0019070:	6a 00                	push   0x0
c0019072:	6a 00                	push   0x0
c0019074:	56                   	push   esi
c0019075:	e8 4c f7 ff ff       	call   c00187c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001907a:	83 c4 10             	add    esp,0x10
c001907d:	66 40                	inc    ax
c001907f:	74 dc                	je     c001905d <PCI::detect()+0x2b>
c0019081:	58                   	pop    eax
c0019082:	5b                   	pop    ebx
c0019083:	5e                   	pop    esi
c0019084:	c3                   	ret    
c0019085:	90                   	nop

c0019086 <IDE::close(int, int, void*)>:
c0019086:	83 c8 ff             	or     eax,0xffffffff
c0019089:	c3                   	ret    

c001908a <IDE::IDE()>:
c001908a:	83 ec 0c             	sub    esp,0xc
c001908d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019091:	83 ec 08             	sub    esp,0x8
c0019094:	68 68 f2 01 c0       	push   0xc001f268
c0019099:	50                   	push   eax
c001909a:	e8 d9 31 ff ff       	call   c000c278 <HardDiskController::HardDiskController(char const*)>
c001909f:	83 c4 10             	add    esp,0x10
c00190a2:	ba f8 f2 01 c0       	mov    edx,0xc001f2f8
c00190a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190ab:	89 10                	mov    DWORD PTR [eax],edx
c00190ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190b1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00190b8:	90                   	nop
c00190b9:	83 c4 0c             	add    esp,0xc
c00190bc:	c3                   	ret    
c00190bd:	90                   	nop

c00190be <IDE::prepareInterrupt(unsigned char)>:
c00190be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00190c3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00190c7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00190cf:	c3                   	ret    

c00190d0 <selectDrive(unsigned char, unsigned char)>:
c00190d0:	c3                   	ret    
c00190d1:	90                   	nop

c00190d2 <IDE::getBase(unsigned char)>:
c00190d2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00190d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00190db:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00190e3:	c3                   	ret    

c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00190e4:	55                   	push   ebp
c00190e5:	57                   	push   edi
c00190e6:	56                   	push   esi
c00190e7:	53                   	push   ebx
c00190e8:	83 ec 1c             	sub    esp,0x1c
c00190eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00190ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190f3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00190f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00190fe:	80 f9 03             	cmp    cl,0x3
c0019101:	77 51                	ja     c0019154 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0019103:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019107:	0f b6 f2             	movzx  esi,dl
c001910a:	0f b6 db             	movzx  ebx,bl
c001910d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019110:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019114:	83 ca 80             	or     edx,0xffffff80
c0019117:	0f b6 d2             	movzx  edx,dl
c001911a:	52                   	push   edx
c001911b:	6a 0c                	push   0xc
c001911d:	56                   	push   esi
c001911e:	57                   	push   edi
c001911f:	e8 c0 ff ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019124:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019129:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001912d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019131:	ee                   	out    dx,al
c0019132:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019137:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001913b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001913f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019143:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001914b:	83 c4 2c             	add    esp,0x2c
c001914e:	5b                   	pop    ebx
c001914f:	5e                   	pop    esi
c0019150:	5f                   	pop    edi
c0019151:	5d                   	pop    ebp
c0019152:	eb 90                	jmp    c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019154:	80 fb 07             	cmp    bl,0x7
c0019157:	77 12                	ja     c001916b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019159:	0f b6 d2             	movzx  edx,dl
c001915c:	0f b6 db             	movzx  ebx,bl
c001915f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019167:	89 da                	mov    edx,ebx
c0019169:	eb 2f                	jmp    c001919a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001916b:	80 fb 0d             	cmp    bl,0xd
c001916e:	77 13                	ja     c0019183 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019170:	0f b6 d2             	movzx  edx,dl
c0019173:	0f b6 db             	movzx  ebx,bl
c0019176:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001917d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019181:	eb 17                	jmp    c001919a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019183:	80 fb 15             	cmp    bl,0x15
c0019186:	77 13                	ja     c001919b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019188:	0f b6 d2             	movzx  edx,dl
c001918b:	0f b6 db             	movzx  ebx,bl
c001918e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019196:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001919a:	ee                   	out    dx,al
c001919b:	83 c4 1c             	add    esp,0x1c
c001919e:	5b                   	pop    ebx
c001919f:	5e                   	pop    esi
c00191a0:	5f                   	pop    edi
c00191a1:	5d                   	pop    ebp
c00191a2:	c3                   	ret    
c00191a3:	90                   	nop

c00191a4 <IDE::read(unsigned char, unsigned char)>:
c00191a4:	55                   	push   ebp
c00191a5:	57                   	push   edi
c00191a6:	56                   	push   esi
c00191a7:	53                   	push   ebx
c00191a8:	83 ec 1c             	sub    esp,0x1c
c00191ab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00191af:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00191b3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00191b6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00191ba:	3c 03                	cmp    al,0x3
c00191bc:	77 43                	ja     c0019201 <IDE::read(unsigned char, unsigned char)+0x5d>
c00191be:	0f b6 f2             	movzx  esi,dl
c00191c1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00191c4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00191c8:	83 c8 80             	or     eax,0xffffff80
c00191cb:	0f b6 c0             	movzx  eax,al
c00191ce:	50                   	push   eax
c00191cf:	6a 0c                	push   0xc
c00191d1:	56                   	push   esi
c00191d2:	57                   	push   edi
c00191d3:	e8 0c ff ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191d8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00191dd:	0f b6 c3             	movzx  eax,bl
c00191e0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00191e4:	ec                   	in     al,dx
c00191e5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00191e9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00191ee:	52                   	push   edx
c00191ef:	6a 0c                	push   0xc
c00191f1:	56                   	push   esi
c00191f2:	57                   	push   edi
c00191f3:	e8 ec fe ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191f8:	83 c4 20             	add    esp,0x20
c00191fb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00191ff:	eb 49                	jmp    c001924a <IDE::read(unsigned char, unsigned char)+0xa6>
c0019201:	80 fb 07             	cmp    bl,0x7
c0019204:	77 12                	ja     c0019218 <IDE::read(unsigned char, unsigned char)+0x74>
c0019206:	0f b6 d2             	movzx  edx,dl
c0019209:	0f b6 c3             	movzx  eax,bl
c001920c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019214:	89 c2                	mov    edx,eax
c0019216:	eb 31                	jmp    c0019249 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019218:	80 fb 0d             	cmp    bl,0xd
c001921b:	77 13                	ja     c0019230 <IDE::read(unsigned char, unsigned char)+0x8c>
c001921d:	0f b6 d2             	movzx  edx,dl
c0019220:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019227:	0f b6 d3             	movzx  edx,bl
c001922a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001922e:	eb 19                	jmp    c0019249 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019230:	31 c0                	xor    eax,eax
c0019232:	80 fb 15             	cmp    bl,0x15
c0019235:	77 13                	ja     c001924a <IDE::read(unsigned char, unsigned char)+0xa6>
c0019237:	0f b6 d2             	movzx  edx,dl
c001923a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0019242:	0f b6 d3             	movzx  edx,bl
c0019245:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019249:	ec                   	in     al,dx
c001924a:	83 c4 1c             	add    esp,0x1c
c001924d:	5b                   	pop    ebx
c001924e:	5e                   	pop    esi
c001924f:	5f                   	pop    edi
c0019250:	5d                   	pop    ebp
c0019251:	c3                   	ret    

c0019252 <IDE::waitInterrupt(unsigned char)>:
c0019252:	57                   	push   edi
c0019253:	56                   	push   esi
c0019254:	31 f6                	xor    esi,esi
c0019256:	53                   	push   ebx
c0019257:	83 ec 10             	sub    esp,0x10
c001925a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001925e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019262:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019266:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001926b:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0019272:	84 db                	test   bl,bl
c0019274:	75 33                	jne    c00192a9 <IDE::waitInterrupt(unsigned char)+0x57>
c0019276:	52                   	push   edx
c0019277:	6a 0c                	push   0xc
c0019279:	50                   	push   eax
c001927a:	57                   	push   edi
c001927b:	e8 24 ff ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c0019280:	83 c4 10             	add    esp,0x10
c0019283:	a8 01                	test   al,0x1
c0019285:	75 2a                	jne    c00192b1 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019287:	f7 c6 04 00 00 00    	test   esi,0x4
c001928d:	75 12                	jne    c00192a1 <IDE::waitInterrupt(unsigned char)+0x4f>
c001928f:	83 fe 32             	cmp    esi,0x32
c0019292:	7e 0d                	jle    c00192a1 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019294:	83 ec 0c             	sub    esp,0xc
c0019297:	6a 64                	push   0x64
c0019299:	e8 7e a9 ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c001929e:	83 c4 10             	add    esp,0x10
c00192a1:	83 fe 3c             	cmp    esi,0x3c
c00192a4:	74 0b                	je     c00192b1 <IDE::waitInterrupt(unsigned char)+0x5f>
c00192a6:	46                   	inc    esi
c00192a7:	eb bd                	jmp    c0019266 <IDE::waitInterrupt(unsigned char)+0x14>
c00192a9:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00192b1:	83 c4 10             	add    esp,0x10
c00192b4:	88 d8                	mov    al,bl
c00192b6:	5b                   	pop    ebx
c00192b7:	5e                   	pop    esi
c00192b8:	5f                   	pop    edi
c00192b9:	c3                   	ret    

c00192ba <ideChannel0IRQHandler(regs*, void*)>:
c00192ba:	83 ec 10             	sub    esp,0x10
c00192bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192c1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00192c8:	6a 07                	push   0x7
c00192ca:	6a 00                	push   0x0
c00192cc:	50                   	push   eax
c00192cd:	e8 d2 fe ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c00192d2:	83 c4 1c             	add    esp,0x1c
c00192d5:	c3                   	ret    

c00192d6 <ideChannel1IRQHandler(regs*, void*)>:
c00192d6:	83 ec 10             	sub    esp,0x10
c00192d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192dd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00192e4:	6a 07                	push   0x7
c00192e6:	6a 01                	push   0x1
c00192e8:	50                   	push   eax
c00192e9:	e8 b6 fe ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c00192ee:	83 c4 1c             	add    esp,0x1c
c00192f1:	c3                   	ret    

c00192f2 <IDE::enableIRQs(unsigned char, bool)>:
c00192f2:	57                   	push   edi
c00192f3:	56                   	push   esi
c00192f4:	be 04 00 00 00       	mov    esi,0x4
c00192f9:	53                   	push   ebx
c00192fa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00192ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019303:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019308:	0f 94 c0             	sete   al
c001930b:	01 c0                	add    eax,eax
c001930d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019314:	0f b6 c0             	movzx  eax,al
c0019317:	50                   	push   eax
c0019318:	6a 0c                	push   0xc
c001931a:	57                   	push   edi
c001931b:	53                   	push   ebx
c001931c:	e8 c3 fd ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019321:	83 c4 10             	add    esp,0x10
c0019324:	50                   	push   eax
c0019325:	6a 0c                	push   0xc
c0019327:	57                   	push   edi
c0019328:	53                   	push   ebx
c0019329:	e8 76 fe ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c001932e:	83 c4 10             	add    esp,0x10
c0019331:	4e                   	dec    esi
c0019332:	75 f0                	jne    c0019324 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019334:	5b                   	pop    ebx
c0019335:	5e                   	pop    esi
c0019336:	5f                   	pop    edi
c0019337:	c3                   	ret    

c0019338 <IDE::open(int, int, void*)>:
c0019338:	55                   	push   ebp
c0019339:	57                   	push   edi
c001933a:	56                   	push   esi
c001933b:	53                   	push   ebx
c001933c:	83 ec 1c             	sub    esp,0x1c
c001933f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019343:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001934c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019355:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001935c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0019363:	0f 85 b0 02 00 00    	jne    c0019619 <IDE::open(int, int, void*)+0x2e1>
c0019369:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001936f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0019373:	83 e0 7f             	and    eax,0x7f
c0019376:	3c 05                	cmp    al,0x5
c0019378:	74 04                	je     c001937e <IDE::open(int, int, void*)+0x46>
c001937a:	3c 0f                	cmp    al,0xf
c001937c:	75 32                	jne    c00193b0 <IDE::open(int, int, void*)+0x78>
c001937e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019384:	83 e0 fc             	and    eax,0xfffffffc
c0019387:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001938e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019394:	83 e0 fc             	and    eax,0xfffffffc
c0019397:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001939e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00193a4:	83 e0 fc             	and    eax,0xfffffffc
c00193a7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00193ae:	eb 14                	jmp    c00193c4 <IDE::open(int, int, void*)+0x8c>
c00193b0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00193ba:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00193c4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00193cb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00193d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193d6:	89 c6                	mov    esi,eax
c00193d8:	bf f8 0c 00 00       	mov    edi,0xcf8
c00193dd:	c1 e6 10             	shl    esi,0x10
c00193e0:	89 e8                	mov    eax,ebp
c00193e2:	89 fa                	mov    edx,edi
c00193e4:	c1 e0 0b             	shl    eax,0xb
c00193e7:	09 f0                	or     eax,esi
c00193e9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00193f0:	c1 e6 08             	shl    esi,0x8
c00193f3:	09 c6                	or     esi,eax
c00193f5:	89 f0                	mov    eax,esi
c00193f7:	0d 08 00 00 80       	or     eax,0x80000008
c00193fc:	ef                   	out    dx,eax
c00193fd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0019402:	89 ca                	mov    edx,ecx
c0019404:	ed                   	in     eax,dx
c0019405:	c1 e8 10             	shr    eax,0x10
c0019408:	3d ff ff 00 00       	cmp    eax,0xffff
c001940d:	0f 84 f5 00 00 00    	je     c0019508 <IDE::open(int, int, void*)+0x1d0>
c0019413:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019419:	89 fa                	mov    edx,edi
c001941b:	89 f0                	mov    eax,esi
c001941d:	ef                   	out    dx,eax
c001941e:	b0 fe                	mov    al,0xfe
c0019420:	89 ca                	mov    edx,ecx
c0019422:	ee                   	out    dx,al
c0019423:	89 f0                	mov    eax,esi
c0019425:	89 fa                	mov    edx,edi
c0019427:	ef                   	out    dx,eax
c0019428:	89 ca                	mov    edx,ecx
c001942a:	ed                   	in     eax,dx
c001942b:	3c fe                	cmp    al,0xfe
c001942d:	0f 85 a9 00 00 00    	jne    c00194dc <IDE::open(int, int, void*)+0x1a4>
c0019433:	8b 15 98 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020998
c0019439:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019440:	74 33                	je     c0019475 <IDE::open(int, int, void*)+0x13d>
c0019442:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019448:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001944c:	40                   	inc    eax
c001944d:	83 ec 0c             	sub    esp,0xc
c0019450:	0f b6 c0             	movzx  eax,al
c0019453:	50                   	push   eax
c0019454:	55                   	push   ebp
c0019455:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019459:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001945f:	51                   	push   ecx
c0019460:	e8 0b 58 ff ff       	call   c000ec70 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019465:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001946a:	83 c4 1c             	add    esp,0x1c
c001946d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019473:	eb 0a                	jmp    c001947f <IDE::open(int, int, void*)+0x147>
c0019475:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001947f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019486:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001948d:	c1 e1 10             	shl    ecx,0x10
c0019490:	c1 e0 08             	shl    eax,0x8
c0019493:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019498:	09 c1                	or     ecx,eax
c001949a:	89 fa                	mov    edx,edi
c001949c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00194a3:	c1 e0 0b             	shl    eax,0xb
c00194a6:	09 c1                	or     ecx,eax
c00194a8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00194ae:	89 c8                	mov    eax,ecx
c00194b0:	ef                   	out    dx,eax
c00194b1:	be fc 0c 00 00       	mov    esi,0xcfc
c00194b6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00194bc:	89 f2                	mov    edx,esi
c00194be:	ee                   	out    dx,al
c00194bf:	89 c8                	mov    eax,ecx
c00194c1:	89 fa                	mov    edx,edi
c00194c3:	ef                   	out    dx,eax
c00194c4:	89 f2                	mov    edx,esi
c00194c6:	ed                   	in     eax,dx
c00194c7:	0f b6 c0             	movzx  eax,al
c00194ca:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00194d0:	74 46                	je     c0019518 <IDE::open(int, int, void*)+0x1e0>
c00194d2:	83 ec 0c             	sub    esp,0xc
c00194d5:	68 80 f2 01 c0       	push   0xc001f280
c00194da:	eb 34                	jmp    c0019510 <IDE::open(int, int, void*)+0x1d8>
c00194dc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00194e5:	75 17                	jne    c00194fe <IDE::open(int, int, void*)+0x1c6>
c00194e7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00194ec:	74 07                	je     c00194f5 <IDE::open(int, int, void*)+0x1bd>
c00194ee:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00194f3:	75 09                	jne    c00194fe <IDE::open(int, int, void*)+0x1c6>
c00194f5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194fc:	eb 1a                	jmp    c0019518 <IDE::open(int, int, void*)+0x1e0>
c00194fe:	83 ec 0c             	sub    esp,0xc
c0019501:	68 88 f2 01 c0       	push   0xc001f288
c0019506:	eb 08                	jmp    c0019510 <IDE::open(int, int, void*)+0x1d8>
c0019508:	83 ec 0c             	sub    esp,0xc
c001950b:	68 b9 f2 01 c0       	push   0xc001f2b9
c0019510:	e8 ae 71 ff ff       	call   c00106c3 <KePanic(char const*)>
c0019515:	83 c4 10             	add    esp,0x10
c0019518:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001951f:	79 1a                	jns    c001953b <IDE::open(int, int, void*)+0x203>
c0019521:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019527:	83 e0 fc             	and    eax,0xfffffffc
c001952a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019531:	83 c0 08             	add    eax,0x8
c0019534:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001953b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019541:	89 c2                	mov    edx,eax
c0019543:	83 e2 0f             	and    edx,0xf
c0019546:	66 83 fa 08          	cmp    dx,0x8
c001954a:	75 0a                	jne    c0019556 <IDE::open(int, int, void*)+0x21e>
c001954c:	83 e8 02             	sub    eax,0x2
c001954f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019556:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001955c:	89 c2                	mov    edx,eax
c001955e:	83 e2 0f             	and    edx,0xf
c0019561:	66 83 fa 08          	cmp    dx,0x8
c0019565:	75 0a                	jne    c0019571 <IDE::open(int, int, void*)+0x239>
c0019567:	83 e8 02             	sub    eax,0x2
c001956a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019571:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019578:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001957f:	89 d0                	mov    eax,edx
c0019581:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019584:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019588:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001958c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001958f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019594:	0f b6 c9             	movzx  ecx,cl
c0019597:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001959e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195a1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195a5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00195a9:	8d 50 02             	lea    edx,[eax+0x2]
c00195ac:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195b1:	0f b6 d2             	movzx  edx,dl
c00195b4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00195ba:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195bd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195c1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00195c5:	8d 48 03             	lea    ecx,[eax+0x3]
c00195c8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195cd:	0f b6 c9             	movzx  ecx,cl
c00195d0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00195d6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195d9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195dd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00195e1:	8d 50 04             	lea    edx,[eax+0x4]
c00195e4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00195ea:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195ef:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00195f6:	66 85 f6             	test   si,si
c00195f9:	74 5b                	je     c0019656 <IDE::open(int, int, void*)+0x31e>
c00195fb:	0f b6 d2             	movzx  edx,dl
c00195fe:	83 c0 05             	add    eax,0x5
c0019601:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019604:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019608:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001960c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019612:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019617:	eb 3d                	jmp    c0019656 <IDE::open(int, int, void*)+0x31e>
c0019619:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001961f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019626:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001962d:	66 05 06 02          	add    ax,0x206
c0019631:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019638:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001963f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019646:	66 05 06 02          	add    ax,0x206
c001964a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019651:	e9 e5 fe ff ff       	jmp    c001953b <IDE::open(int, int, void*)+0x203>
c0019656:	50                   	push   eax
c0019657:	50                   	push   eax
c0019658:	6a 00                	push   0x0
c001965a:	53                   	push   ebx
c001965b:	e8 5e fa ff ff       	call   c00190be <IDE::prepareInterrupt(unsigned char)>
c0019660:	5a                   	pop    edx
c0019661:	59                   	pop    ecx
c0019662:	6a 01                	push   0x1
c0019664:	53                   	push   ebx
c0019665:	e8 54 fa ff ff       	call   c00190be <IDE::prepareInterrupt(unsigned char)>
c001966a:	83 c4 0c             	add    esp,0xc
c001966d:	6a 00                	push   0x0
c001966f:	6a 00                	push   0x0
c0019671:	53                   	push   ebx
c0019672:	e8 7b fc ff ff       	call   c00192f2 <IDE::enableIRQs(unsigned char, bool)>
c0019677:	83 c4 0c             	add    esp,0xc
c001967a:	6a 00                	push   0x0
c001967c:	6a 01                	push   0x1
c001967e:	53                   	push   ebx
c001967f:	e8 6e fc ff ff       	call   c00192f2 <IDE::enableIRQs(unsigned char, bool)>
c0019684:	83 c4 10             	add    esp,0x10
c0019687:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001968e:	74 34                	je     c00196c4 <IDE::open(int, int, void*)+0x38c>
c0019690:	83 ec 0c             	sub    esp,0xc
c0019693:	53                   	push   ebx
c0019694:	6a 01                	push   0x1
c0019696:	68 ba 92 01 c0       	push   0xc00192ba
c001969b:	6a 0e                	push   0xe
c001969d:	53                   	push   ebx
c001969e:	e8 3d 28 ff ff       	call   c000bee0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196a3:	83 c4 14             	add    esp,0x14
c00196a6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00196ac:	53                   	push   ebx
c00196ad:	6a 01                	push   0x1
c00196af:	68 d6 92 01 c0       	push   0xc00192d6
c00196b4:	6a 0f                	push   0xf
c00196b6:	53                   	push   ebx
c00196b7:	e8 24 28 ff ff       	call   c000bee0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196bc:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00196c2:	eb 38                	jmp    c00196fc <IDE::open(int, int, void*)+0x3c4>
c00196c4:	83 ec 0c             	sub    esp,0xc
c00196c7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00196d1:	53                   	push   ebx
c00196d2:	6a 00                	push   0x0
c00196d4:	68 ba 92 01 c0       	push   0xc00192ba
c00196d9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00196df:	53                   	push   ebx
c00196e0:	e8 fb 27 ff ff       	call   c000bee0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196e5:	83 c4 14             	add    esp,0x14
c00196e8:	53                   	push   ebx
c00196e9:	6a 00                	push   0x0
c00196eb:	68 d6 92 01 c0       	push   0xc00192d6
c00196f0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00196f6:	53                   	push   ebx
c00196f7:	e8 e4 27 ff ff       	call   c000bee0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196fe:	83 c4 20             	add    esp,0x20
c0019701:	83 ec 0c             	sub    esp,0xc
c0019704:	53                   	push   ebx
c0019705:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019708:	83 c4 0c             	add    esp,0xc
c001970b:	6a 07                	push   0x7
c001970d:	6a 00                	push   0x0
c001970f:	53                   	push   ebx
c0019710:	e8 8f fa ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c0019715:	83 c4 0c             	add    esp,0xc
c0019718:	6a 07                	push   0x7
c001971a:	6a 01                	push   0x1
c001971c:	53                   	push   ebx
c001971d:	e8 82 fa ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c0019722:	83 c4 0c             	add    esp,0xc
c0019725:	6a 01                	push   0x1
c0019727:	6a 00                	push   0x0
c0019729:	53                   	push   ebx
c001972a:	e8 c3 fb ff ff       	call   c00192f2 <IDE::enableIRQs(unsigned char, bool)>
c001972f:	83 c4 0c             	add    esp,0xc
c0019732:	6a 01                	push   0x1
c0019734:	6a 01                	push   0x1
c0019736:	53                   	push   ebx
c0019737:	e8 b6 fb ff ff       	call   c00192f2 <IDE::enableIRQs(unsigned char, bool)>
c001973c:	83 c4 2c             	add    esp,0x2c
c001973f:	31 c0                	xor    eax,eax
c0019741:	5b                   	pop    ebx
c0019742:	5e                   	pop    esi
c0019743:	5f                   	pop    edi
c0019744:	5d                   	pop    ebp
c0019745:	c3                   	ret    

c0019746 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019746:	55                   	push   ebp
c0019747:	57                   	push   edi
c0019748:	56                   	push   esi
c0019749:	53                   	push   ebx
c001974a:	83 ec 1c             	sub    esp,0x1c
c001974d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019751:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019755:	8d 50 f8             	lea    edx,[eax-0x8]
c0019758:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001975c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019760:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019764:	80 fa 03             	cmp    dl,0x3
c0019767:	77 5d                	ja     c00197c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019769:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001976d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019771:	0f b6 db             	movzx  ebx,bl
c0019774:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019777:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001977b:	83 ca 80             	or     edx,0xffffff80
c001977e:	0f b6 d2             	movzx  edx,dl
c0019781:	52                   	push   edx
c0019782:	6a 0c                	push   0xc
c0019784:	53                   	push   ebx
c0019785:	56                   	push   esi
c0019786:	e8 59 f9 ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001978b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019790:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019794:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019798:	0f b6 c0             	movzx  eax,al
c001979b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001979f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197a1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00197a6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00197aa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00197ae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00197b2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00197ba:	83 c4 2c             	add    esp,0x2c
c00197bd:	5b                   	pop    ebx
c00197be:	5e                   	pop    esi
c00197bf:	5f                   	pop    edi
c00197c0:	5d                   	pop    ebp
c00197c1:	e9 1e f9 ff ff       	jmp    c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197c6:	3c 07                	cmp    al,0x7
c00197c8:	77 10                	ja     c00197da <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00197ca:	0f b6 db             	movzx  ebx,bl
c00197cd:	0f b6 d0             	movzx  edx,al
c00197d0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00197d8:	eb 2d                	jmp    c0019807 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197da:	3c 0d                	cmp    al,0xd
c00197dc:	77 13                	ja     c00197f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00197de:	0f b6 db             	movzx  ebx,bl
c00197e1:	0f b6 c0             	movzx  eax,al
c00197e4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00197eb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00197ef:	eb 16                	jmp    c0019807 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197f1:	3c 15                	cmp    al,0x15
c00197f3:	77 14                	ja     c0019809 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00197f5:	0f b6 db             	movzx  ebx,bl
c00197f8:	0f b6 c0             	movzx  eax,al
c00197fb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019803:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019807:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019809:	83 c4 1c             	add    esp,0x1c
c001980c:	5b                   	pop    ebx
c001980d:	5e                   	pop    esi
c001980e:	5f                   	pop    edi
c001980f:	5d                   	pop    ebp
c0019810:	c3                   	ret    
c0019811:	90                   	nop

c0019812 <IDE::detect()>:
c0019812:	55                   	push   ebp
c0019813:	57                   	push   edi
c0019814:	56                   	push   esi
c0019815:	53                   	push   ebx
c0019816:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001981c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019823:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001982a:	0f 85 97 02 00 00    	jne    c0019ac7 <IDE::detect()+0x2b5>
c0019830:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019837:	31 f6                	xor    esi,esi
c0019839:	31 ed                	xor    ebp,ebp
c001983b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019843:	89 e8                	mov    eax,ebp
c0019845:	c1 e0 06             	shl    eax,0x6
c0019848:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019850:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019854:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019858:	c1 e0 04             	shl    eax,0x4
c001985b:	83 c8 a0             	or     eax,0xffffffa0
c001985e:	0f b6 c0             	movzx  eax,al
c0019861:	50                   	push   eax
c0019862:	6a 06                	push   0x6
c0019864:	56                   	push   esi
c0019865:	53                   	push   ebx
c0019866:	e8 79 f8 ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001986b:	83 c4 0c             	add    esp,0xc
c001986e:	6a 0c                	push   0xc
c0019870:	56                   	push   esi
c0019871:	53                   	push   ebx
c0019872:	e8 2d f9 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c0019877:	83 c4 0c             	add    esp,0xc
c001987a:	6a 0c                	push   0xc
c001987c:	56                   	push   esi
c001987d:	53                   	push   ebx
c001987e:	e8 21 f9 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c0019883:	83 c4 0c             	add    esp,0xc
c0019886:	6a 0c                	push   0xc
c0019888:	56                   	push   esi
c0019889:	53                   	push   ebx
c001988a:	e8 15 f9 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c001988f:	83 c4 0c             	add    esp,0xc
c0019892:	6a 0c                	push   0xc
c0019894:	56                   	push   esi
c0019895:	53                   	push   ebx
c0019896:	e8 09 f9 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c001989b:	68 ec 00 00 00       	push   0xec
c00198a0:	6a 07                	push   0x7
c00198a2:	56                   	push   esi
c00198a3:	53                   	push   ebx
c00198a4:	e8 3b f8 ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198a9:	83 c4 1c             	add    esp,0x1c
c00198ac:	6a 0c                	push   0xc
c00198ae:	56                   	push   esi
c00198af:	53                   	push   ebx
c00198b0:	e8 ef f8 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c00198b5:	83 c4 0c             	add    esp,0xc
c00198b8:	6a 0c                	push   0xc
c00198ba:	56                   	push   esi
c00198bb:	53                   	push   ebx
c00198bc:	e8 e3 f8 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c00198c1:	83 c4 0c             	add    esp,0xc
c00198c4:	6a 0c                	push   0xc
c00198c6:	56                   	push   esi
c00198c7:	53                   	push   ebx
c00198c8:	e8 d7 f8 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c00198cd:	83 c4 0c             	add    esp,0xc
c00198d0:	6a 0c                	push   0xc
c00198d2:	56                   	push   esi
c00198d3:	53                   	push   ebx
c00198d4:	e8 cb f8 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c00198d9:	83 c4 0c             	add    esp,0xc
c00198dc:	6a 0c                	push   0xc
c00198de:	56                   	push   esi
c00198df:	53                   	push   ebx
c00198e0:	e8 bf f8 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c00198e5:	83 c4 10             	add    esp,0x10
c00198e8:	84 c0                	test   al,al
c00198ea:	0f 84 5f 01 00 00    	je     c0019a4f <IDE::detect()+0x23d>
c00198f0:	31 ff                	xor    edi,edi
c00198f2:	50                   	push   eax
c00198f3:	6a 0c                	push   0xc
c00198f5:	56                   	push   esi
c00198f6:	53                   	push   ebx
c00198f7:	e8 a8 f8 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c00198fc:	83 c4 10             	add    esp,0x10
c00198ff:	a8 01                	test   al,0x1
c0019901:	0f 85 69 01 00 00    	jne    c0019a70 <IDE::detect()+0x25e>
c0019907:	84 c0                	test   al,al
c0019909:	78 04                	js     c001990f <IDE::detect()+0xfd>
c001990b:	a8 08                	test   al,0x8
c001990d:	75 23                	jne    c0019932 <IDE::detect()+0x120>
c001990f:	47                   	inc    edi
c0019910:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019916:	7e da                	jle    c00198f2 <IDE::detect()+0xe0>
c0019918:	83 ec 0c             	sub    esp,0xc
c001991b:	6a 32                	push   0x32
c001991d:	e8 fa a2 ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c0019922:	83 c4 10             	add    esp,0x10
c0019925:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001992b:	75 c5                	jne    c00198f2 <IDE::detect()+0xe0>
c001992d:	e9 3e 01 00 00       	jmp    c0019a70 <IDE::detect()+0x25e>
c0019932:	31 c9                	xor    ecx,ecx
c0019934:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019938:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001993c:	83 ec 0c             	sub    esp,0xc
c001993f:	68 80 00 00 00       	push   0x80
c0019944:	57                   	push   edi
c0019945:	6a 00                	push   0x0
c0019947:	56                   	push   esi
c0019948:	53                   	push   ebx
c0019949:	e8 f8 fd ff ff       	call   c0019746 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001994e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019953:	89 e8                	mov    eax,ebp
c0019955:	89 d1                	mov    ecx,edx
c0019957:	c1 e0 06             	shl    eax,0x6
c001995a:	01 d8                	add    eax,ebx
c001995c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019963:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001996a:	89 f2                	mov    edx,esi
c001996c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019972:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019976:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001997c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019980:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019987:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001998f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019996:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001999e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00199a4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00199ab:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00199b1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00199b5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00199b9:	83 c4 20             	add    esp,0x20
c00199bc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00199bf:	83 c0 02             	add    eax,0x2
c00199c2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00199c8:	83 c7 02             	add    edi,0x2
c00199cb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00199ce:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00199d4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00199d8:	75 e2                	jne    c00199bc <IDE::detect()+0x1aa>
c00199da:	89 e8                	mov    eax,ebp
c00199dc:	c1 e0 06             	shl    eax,0x6
c00199df:	01 d8                	add    eax,ebx
c00199e1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00199e7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00199ee:	66 c1 ea 09          	shr    dx,0x9
c00199f2:	83 e2 01             	and    edx,0x1
c00199f5:	84 c9                	test   cl,cl
c00199f7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00199fd:	75 22                	jne    c0019a21 <IDE::detect()+0x20f>
c00199ff:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019a06:	74 46                	je     c0019a4e <IDE::detect()+0x23c>
c0019a08:	83 ec 0c             	sub    esp,0xc
c0019a0b:	68 7c 01 00 00       	push   0x17c
c0019a10:	e8 48 e4 fe ff       	call   c0007e5d <malloc>
c0019a15:	89 c7                	mov    edi,eax
c0019a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a1a:	e8 11 05 00 00       	call   c0019f30 <ATA::ATA()>
c0019a1f:	eb 17                	jmp    c0019a38 <IDE::detect()+0x226>
c0019a21:	83 ec 0c             	sub    esp,0xc
c0019a24:	68 84 01 00 00       	push   0x184
c0019a29:	e8 2f e4 fe ff       	call   c0007e5d <malloc>
c0019a2e:	89 c7                	mov    edi,eax
c0019a30:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a33:	e8 f0 0a 00 00       	call   c001a528 <ATAPI::ATAPI()>
c0019a38:	5a                   	pop    edx
c0019a39:	59                   	pop    ecx
c0019a3a:	57                   	push   edi
c0019a3b:	53                   	push   ebx
c0019a3c:	e8 f3 24 ff ff       	call   c000bf34 <Device::addChild(Device*)>
c0019a41:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a43:	53                   	push   ebx
c0019a44:	55                   	push   ebp
c0019a45:	6a 00                	push   0x0
c0019a47:	57                   	push   edi
c0019a48:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a4b:	83 c4 20             	add    esp,0x20
c0019a4e:	45                   	inc    ebp
c0019a4f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a54:	74 0d                	je     c0019a63 <IDE::detect()+0x251>
c0019a56:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a5e:	e9 e0 fd ff ff       	jmp    c0019843 <IDE::detect()+0x31>
c0019a63:	4e                   	dec    esi
c0019a64:	74 61                	je     c0019ac7 <IDE::detect()+0x2b5>
c0019a66:	be 01 00 00 00       	mov    esi,0x1
c0019a6b:	e9 cb fd ff ff       	jmp    c001983b <IDE::detect()+0x29>
c0019a70:	50                   	push   eax
c0019a71:	6a 04                	push   0x4
c0019a73:	56                   	push   esi
c0019a74:	53                   	push   ebx
c0019a75:	e8 2a f7 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c0019a7a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019a7e:	83 c4 0c             	add    esp,0xc
c0019a81:	6a 05                	push   0x5
c0019a83:	56                   	push   esi
c0019a84:	53                   	push   ebx
c0019a85:	e8 1a f7 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c0019a8a:	83 c4 10             	add    esp,0x10
c0019a8d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019a91:	80 fa 14             	cmp    dl,0x14
c0019a94:	75 04                	jne    c0019a9a <IDE::detect()+0x288>
c0019a96:	3c eb                	cmp    al,0xeb
c0019a98:	eb 07                	jmp    c0019aa1 <IDE::detect()+0x28f>
c0019a9a:	3c 96                	cmp    al,0x96
c0019a9c:	75 b1                	jne    c0019a4f <IDE::detect()+0x23d>
c0019a9e:	80 fa 69             	cmp    dl,0x69
c0019aa1:	75 ac                	jne    c0019a4f <IDE::detect()+0x23d>
c0019aa3:	68 a1 00 00 00       	push   0xa1
c0019aa8:	6a 07                	push   0x7
c0019aaa:	56                   	push   esi
c0019aab:	53                   	push   ebx
c0019aac:	e8 33 f6 ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ab1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019ab8:	e8 5f a1 ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c0019abd:	83 c4 10             	add    esp,0x10
c0019ac0:	b1 01                	mov    cl,0x1
c0019ac2:	e9 6d fe ff ff       	jmp    c0019934 <IDE::detect()+0x122>
c0019ac7:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019acd:	5b                   	pop    ebx
c0019ace:	5e                   	pop    esi
c0019acf:	5f                   	pop    edi
c0019ad0:	5d                   	pop    ebp
c0019ad1:	c3                   	ret    

c0019ad2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019ad2:	55                   	push   ebp
c0019ad3:	57                   	push   edi
c0019ad4:	56                   	push   esi
c0019ad5:	53                   	push   ebx
c0019ad6:	83 ec 1c             	sub    esp,0x1c
c0019ad9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019add:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019ae1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019ae5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019ae9:	88 c3                	mov    bl,al
c0019aeb:	84 c0                	test   al,al
c0019aed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019af1:	0f 84 81 00 00 00    	je     c0019b78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019af7:	83 ec 0c             	sub    esp,0xc
c0019afa:	68 e3 f2 01 c0       	push   0xc001f2e3
c0019aff:	e8 f0 0f ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c0019b04:	83 c4 10             	add    esp,0x10
c0019b07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b0b:	3c 01                	cmp    al,0x1
c0019b0d:	74 63                	je     c0019b72 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019b0f:	3c 02                	cmp    al,0x2
c0019b11:	75 53                	jne    c0019b66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019b13:	01 f6                	add    esi,esi
c0019b15:	09 ee                	or     esi,ebp
c0019b17:	50                   	push   eax
c0019b18:	89 f0                	mov    eax,esi
c0019b1a:	6a 01                	push   0x1
c0019b1c:	0f b6 f0             	movzx  esi,al
c0019b1f:	c1 e6 06             	shl    esi,0x6
c0019b22:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019b2a:	50                   	push   eax
c0019b2b:	57                   	push   edi
c0019b2c:	e8 73 f6 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c0019b31:	83 c4 10             	add    esp,0x10
c0019b34:	a8 01                	test   al,0x1
c0019b36:	74 02                	je     c0019b3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b38:	b3 07                	mov    bl,0x7
c0019b3a:	a8 02                	test   al,0x2
c0019b3c:	74 02                	je     c0019b40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019b3e:	b3 03                	mov    bl,0x3
c0019b40:	a8 04                	test   al,0x4
c0019b42:	74 02                	je     c0019b46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b44:	b3 14                	mov    bl,0x14
c0019b46:	a8 08                	test   al,0x8
c0019b48:	74 02                	je     c0019b4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b4a:	b3 03                	mov    bl,0x3
c0019b4c:	a8 10                	test   al,0x10
c0019b4e:	74 02                	je     c0019b52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b50:	b3 15                	mov    bl,0x15
c0019b52:	a8 20                	test   al,0x20
c0019b54:	74 02                	je     c0019b58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b56:	b3 03                	mov    bl,0x3
c0019b58:	a8 40                	test   al,0x40
c0019b5a:	74 02                	je     c0019b5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b5c:	b3 16                	mov    bl,0x16
c0019b5e:	84 c0                	test   al,al
c0019b60:	79 16                	jns    c0019b78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b62:	b3 0d                	mov    bl,0xd
c0019b64:	eb 12                	jmp    c0019b78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b66:	3c 03                	cmp    al,0x3
c0019b68:	74 0c                	je     c0019b76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b6a:	3c 04                	cmp    al,0x4
c0019b6c:	75 0a                	jne    c0019b78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b6e:	b3 08                	mov    bl,0x8
c0019b70:	eb 06                	jmp    c0019b78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b72:	b3 13                	mov    bl,0x13
c0019b74:	eb 02                	jmp    c0019b78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b76:	b3 17                	mov    bl,0x17
c0019b78:	83 c4 1c             	add    esp,0x1c
c0019b7b:	88 d8                	mov    al,bl
c0019b7d:	5b                   	pop    ebx
c0019b7e:	5e                   	pop    esi
c0019b7f:	5f                   	pop    edi
c0019b80:	5d                   	pop    ebp
c0019b81:	c3                   	ret    

c0019b82 <IDE::polling(unsigned char, unsigned int)>:
c0019b82:	55                   	push   ebp
c0019b83:	bd 04 00 00 00       	mov    ebp,0x4
c0019b88:	57                   	push   edi
c0019b89:	56                   	push   esi
c0019b8a:	53                   	push   ebx
c0019b8b:	83 ec 0c             	sub    esp,0xc
c0019b8e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b92:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019b96:	0f b6 f3             	movzx  esi,bl
c0019b99:	52                   	push   edx
c0019b9a:	6a 0c                	push   0xc
c0019b9c:	56                   	push   esi
c0019b9d:	57                   	push   edi
c0019b9e:	e8 01 f6 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c0019ba3:	83 c4 10             	add    esp,0x10
c0019ba6:	4d                   	dec    ebp
c0019ba7:	75 ed                	jne    c0019b96 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019ba9:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019bae:	50                   	push   eax
c0019baf:	6a 0c                	push   0xc
c0019bb1:	56                   	push   esi
c0019bb2:	57                   	push   edi
c0019bb3:	e8 ec f5 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c0019bb8:	83 c4 10             	add    esp,0x10
c0019bbb:	a8 01                	test   al,0x1
c0019bbd:	75 17                	jne    c0019bd6 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019bbf:	a8 20                	test   al,0x20
c0019bc1:	75 0f                	jne    c0019bd2 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019bc3:	4b                   	dec    ebx
c0019bc4:	74 10                	je     c0019bd6 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019bc6:	84 c0                	test   al,al
c0019bc8:	78 e4                	js     c0019bae <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bca:	a8 08                	test   al,0x8
c0019bcc:	74 e0                	je     c0019bae <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bce:	31 c0                	xor    eax,eax
c0019bd0:	eb 06                	jmp    c0019bd8 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019bd2:	b0 01                	mov    al,0x1
c0019bd4:	eb 02                	jmp    c0019bd8 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019bd6:	b0 02                	mov    al,0x2
c0019bd8:	83 c4 0c             	add    esp,0xc
c0019bdb:	5b                   	pop    ebx
c0019bdc:	5e                   	pop    esi
c0019bdd:	5f                   	pop    edi
c0019bde:	5d                   	pop    ebp
c0019bdf:	c3                   	ret    

c0019be0 <SATABus::close(int, int, void*)>:
c0019be0:	31 c0                	xor    eax,eax
c0019be2:	c3                   	ret    
c0019be3:	90                   	nop

c0019be4 <SATABus::detect()>:
c0019be4:	c3                   	ret    
c0019be5:	90                   	nop

c0019be6 <SATABus::SATABus()>:
c0019be6:	83 ec 0c             	sub    esp,0xc
c0019be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bed:	83 ec 08             	sub    esp,0x8
c0019bf0:	68 1c f3 01 c0       	push   0xc001f31c
c0019bf5:	50                   	push   eax
c0019bf6:	e8 7d 26 ff ff       	call   c000c278 <HardDiskController::HardDiskController(char const*)>
c0019bfb:	83 c4 10             	add    esp,0x10
c0019bfe:	ba 48 f3 01 c0       	mov    edx,0xc001f348
c0019c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c07:	89 10                	mov    DWORD PTR [eax],edx
c0019c09:	83 ec 0c             	sub    esp,0xc
c0019c0c:	6a 50                	push   0x50
c0019c0e:	e8 e0 e5 fe ff       	call   c00081f3 <Phys::allocateContiguousPages(int)>
c0019c13:	83 c4 10             	add    esp,0x10
c0019c16:	89 c2                	mov    edx,eax
c0019c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c1c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019c22:	83 ec 0c             	sub    esp,0xc
c0019c25:	6a 50                	push   0x50
c0019c27:	e8 75 fc fe ff       	call   c00098a1 <Virt::allocateKernelVirtualPages(int)>
c0019c2c:	83 c4 10             	add    esp,0x10
c0019c2f:	89 c2                	mov    edx,eax
c0019c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c35:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c3b:	a1 90 0a 02 c0       	mov    eax,ds:0xc0020a90
c0019c40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c44:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c4e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c54:	83 ec 0c             	sub    esp,0xc
c0019c57:	6a 03                	push   0x3
c0019c59:	6a 50                	push   0x50
c0019c5b:	51                   	push   ecx
c0019c5c:	52                   	push   edx
c0019c5d:	50                   	push   eax
c0019c5e:	e8 cd 05 ff ff       	call   c000a230 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c63:	83 c4 20             	add    esp,0x20
c0019c66:	90                   	nop
c0019c67:	83 c4 0c             	add    esp,0xc
c0019c6a:	c3                   	ret    
c0019c6b:	90                   	nop

c0019c6c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c70:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c73:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c76:	09 c2                	or     edx,eax
c0019c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019c82:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019c84:	31 c0                	xor    eax,eax
c0019c86:	c1 e9 08             	shr    ecx,0x8
c0019c89:	83 e1 0f             	and    ecx,0xf
c0019c8c:	39 c8                	cmp    eax,ecx
c0019c8e:	74 0a                	je     c0019c9a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019c90:	f6 c2 01             	test   dl,0x1
c0019c93:	74 08                	je     c0019c9d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019c95:	d1 ea                	shr    edx,1
c0019c97:	40                   	inc    eax
c0019c98:	eb f2                	jmp    c0019c8c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019c9a:	83 c8 ff             	or     eax,0xffffffff
c0019c9d:	c3                   	ret    

c0019c9e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019c9e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019ca2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019ca5:	89 c2                	mov    edx,eax
c0019ca7:	c1 ea 08             	shr    edx,0x8
c0019caa:	83 e2 0f             	and    edx,0xf
c0019cad:	fe ca                	dec    dl
c0019caf:	75 31                	jne    c0019ce2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019cb1:	83 e0 0f             	and    eax,0xf
c0019cb4:	3c 03                	cmp    al,0x3
c0019cb6:	75 2a                	jne    c0019ce2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019cb8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019cbb:	b8 02 00 00 00       	mov    eax,0x2
c0019cc0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019cc6:	74 1c                	je     c0019ce4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019cc8:	b8 04 00 00 00       	mov    eax,0x4
c0019ccd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019cd3:	74 0f                	je     c0019ce4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019cd5:	31 c0                	xor    eax,eax
c0019cd7:	83 fa 03             	cmp    edx,0x3
c0019cda:	0f 94 c0             	sete   al
c0019cdd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019ce1:	c3                   	ret    
c0019ce2:	31 c0                	xor    eax,eax
c0019ce4:	c3                   	ret    
c0019ce5:	90                   	nop

c0019ce6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019ce6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ced:	0f ba e2 0f          	bt     edx,0xf
c0019cf1:	72 f7                	jb     c0019cea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019cf3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cf6:	83 ca 10             	or     edx,0x10
c0019cf9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cfc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cff:	83 ca 01             	or     edx,0x1
c0019d02:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d05:	c3                   	ret    

c0019d06 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d0a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d0d:	83 e2 fe             	and    edx,0xfffffffe
c0019d10:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d13:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d16:	83 e2 ef             	and    edx,0xffffffef
c0019d19:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d1c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d1f:	0f ba e2 0e          	bt     edx,0xe
c0019d23:	72 f7                	jb     c0019d1c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d25:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d28:	0f ba e2 0f          	bt     edx,0xf
c0019d2c:	72 ee                	jb     c0019d1c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d2e:	c3                   	ret    
c0019d2f:	90                   	nop

c0019d30 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019d30:	55                   	push   ebp
c0019d31:	57                   	push   edi
c0019d32:	56                   	push   esi
c0019d33:	53                   	push   ebx
c0019d34:	83 ec 1c             	sub    esp,0x1c
c0019d37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d3f:	53                   	push   ebx
c0019d40:	56                   	push   esi
c0019d41:	e8 c0 ff ff ff       	call   c0019d06 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d46:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d4a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d50:	83 ec 0c             	sub    esp,0xc
c0019d53:	c1 e5 0a             	shl    ebp,0xa
c0019d56:	01 e8                	add    eax,ebp
c0019d58:	89 03                	mov    DWORD PTR [ebx],eax
c0019d5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d5c:	68 00 04 00 00       	push   0x400
c0019d61:	6a 00                	push   0x0
c0019d63:	50                   	push   eax
c0019d64:	e8 87 67 fe ff       	call   c00004f0 <memset>
c0019d69:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d6f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d73:	01 e8                	add    eax,ebp
c0019d75:	83 c4 1c             	add    esp,0x1c
c0019d78:	89 03                	mov    DWORD PTR [ebx],eax
c0019d7a:	c1 e2 08             	shl    edx,0x8
c0019d7d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d84:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019d8a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d90:	01 f8                	add    eax,edi
c0019d92:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019d95:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019d98:	68 00 01 00 00       	push   0x100
c0019d9d:	6a 00                	push   0x0
c0019d9f:	50                   	push   eax
c0019da0:	e8 4b 67 fe ff       	call   c00004f0 <memset>
c0019da5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019dab:	01 fa                	add    edx,edi
c0019dad:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019db1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019db4:	c1 e7 0d             	shl    edi,0xd
c0019db7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019dbe:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019dc4:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019dca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019dce:	31 ff                	xor    edi,edi
c0019dd0:	83 c4 10             	add    esp,0x10
c0019dd3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019dd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ddd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019de3:	83 c5 20             	add    ebp,0x20
c0019de6:	01 f8                	add    eax,edi
c0019de8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019deb:	52                   	push   edx
c0019dec:	68 00 01 00 00       	push   0x100
c0019df1:	6a 00                	push   0x0
c0019df3:	50                   	push   eax
c0019df4:	e8 f7 66 fe ff       	call   c00004f0 <memset>
c0019df9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019dfd:	83 c4 10             	add    esp,0x10
c0019e00:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019e06:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019e0d:	01 f8                	add    eax,edi
c0019e0f:	81 c7 00 01 00 00    	add    edi,0x100
c0019e15:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e18:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019e1e:	75 b3                	jne    c0019dd3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019e20:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e27:	50                   	push   eax
c0019e28:	50                   	push   eax
c0019e29:	53                   	push   ebx
c0019e2a:	56                   	push   esi
c0019e2b:	e8 b6 fe ff ff       	call   c0019ce6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019e30:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e37:	83 c4 2c             	add    esp,0x2c
c0019e3a:	5b                   	pop    ebx
c0019e3b:	5e                   	pop    esi
c0019e3c:	5f                   	pop    edi
c0019e3d:	5d                   	pop    ebp
c0019e3e:	c3                   	ret    
c0019e3f:	90                   	nop

c0019e40 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e40:	55                   	push   ebp
c0019e41:	57                   	push   edi
c0019e42:	56                   	push   esi
c0019e43:	53                   	push   ebx
c0019e44:	31 db                	xor    ebx,ebx
c0019e46:	83 ec 0c             	sub    esp,0xc
c0019e49:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e4d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e51:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e54:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e5a:	74 7a                	je     c0019ed6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e5c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e60:	89 d8                	mov    eax,ebx
c0019e62:	c1 e0 07             	shl    eax,0x7
c0019e65:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e6c:	55                   	push   ebp
c0019e6d:	56                   	push   esi
c0019e6e:	e8 2b fe ff ff       	call   c0019c9e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e73:	5a                   	pop    edx
c0019e74:	83 f8 01             	cmp    eax,0x1
c0019e77:	59                   	pop    ecx
c0019e78:	75 21                	jne    c0019e9b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019e7a:	50                   	push   eax
c0019e7b:	53                   	push   ebx
c0019e7c:	55                   	push   ebp
c0019e7d:	56                   	push   esi
c0019e7e:	e8 ad fe ff ff       	call   c0019d30 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e83:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019e8a:	e8 ce df fe ff       	call   c0007e5d <malloc>
c0019e8f:	89 c5                	mov    ebp,eax
c0019e91:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e94:	e8 43 0d 00 00       	call   c001abdc <SATA::SATA()>
c0019e99:	eb 24                	jmp    c0019ebf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019e9b:	83 f8 04             	cmp    eax,0x4
c0019e9e:	75 36                	jne    c0019ed6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ea0:	51                   	push   ecx
c0019ea1:	53                   	push   ebx
c0019ea2:	55                   	push   ebp
c0019ea3:	56                   	push   esi
c0019ea4:	e8 87 fe ff ff       	call   c0019d30 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ea9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019eb0:	e8 a8 df fe ff       	call   c0007e5d <malloc>
c0019eb5:	89 c5                	mov    ebp,eax
c0019eb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eba:	e8 79 10 00 00       	call   c001af38 <SATAPI::SATAPI()>
c0019ebf:	58                   	pop    eax
c0019ec0:	5a                   	pop    edx
c0019ec1:	55                   	push   ebp
c0019ec2:	56                   	push   esi
c0019ec3:	e8 6c 20 ff ff       	call   c000bf34 <Device::addChild(Device*)>
c0019ec8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ecb:	56                   	push   esi
c0019ecc:	6a 00                	push   0x0
c0019ece:	53                   	push   ebx
c0019ecf:	55                   	push   ebp
c0019ed0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019ed3:	83 c4 20             	add    esp,0x20
c0019ed6:	d1 ef                	shr    edi,1
c0019ed8:	43                   	inc    ebx
c0019ed9:	83 fb 20             	cmp    ebx,0x20
c0019edc:	0f 85 72 ff ff ff    	jne    c0019e54 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019ee2:	83 c4 0c             	add    esp,0xc
c0019ee5:	5b                   	pop    ebx
c0019ee6:	5e                   	pop    esi
c0019ee7:	5f                   	pop    edi
c0019ee8:	5d                   	pop    ebp
c0019ee9:	c3                   	ret    

c0019eea <SATABus::open(int, int, void*)>:
c0019eea:	83 ec 14             	sub    esp,0x14
c0019eed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ef1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019ef7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019efd:	52                   	push   edx
c0019efe:	50                   	push   eax
c0019eff:	e8 3c ff ff ff       	call   c0019e40 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019f04:	31 c0                	xor    eax,eax
c0019f06:	83 c4 1c             	add    esp,0x1c
c0019f09:	c3                   	ret    

c0019f0a <ATA::close(int, int, void*)>:
c0019f0a:	83 ec 0c             	sub    esp,0xc
c0019f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f11:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f17:	85 c0                	test   eax,eax
c0019f19:	74 0c                	je     c0019f27 <ATA::close(int, int, void*)+0x1d>
c0019f1b:	83 ec 0c             	sub    esp,0xc
c0019f1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f20:	50                   	push   eax
c0019f21:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f24:	83 c4 10             	add    esp,0x10
c0019f27:	31 c0                	xor    eax,eax
c0019f29:	83 c4 0c             	add    esp,0xc
c0019f2c:	c3                   	ret    
c0019f2d:	90                   	nop

c0019f2e <ATA::powerSaving(PowerSavingLevel)>:
c0019f2e:	c3                   	ret    
c0019f2f:	90                   	nop

c0019f30 <ATA::ATA()>:
c0019f30:	83 ec 0c             	sub    esp,0xc
c0019f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f37:	83 ec 04             	sub    esp,0x4
c0019f3a:	68 00 02 00 00       	push   0x200
c0019f3f:	68 15 f4 01 c0       	push   0xc001f415
c0019f44:	50                   	push   eax
c0019f45:	e8 b8 23 ff ff       	call   c000c302 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f4a:	83 c4 10             	add    esp,0x10
c0019f4d:	ba 88 f3 01 c0       	mov    edx,0xc001f388
c0019f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f56:	89 10                	mov    DWORD PTR [eax],edx
c0019f58:	90                   	nop
c0019f59:	83 c4 0c             	add    esp,0xc
c0019f5c:	c3                   	ret    
c0019f5d:	90                   	nop

c0019f5e <ATA::flush(bool)>:
c0019f5e:	53                   	push   ebx
c0019f5f:	83 ec 08             	sub    esp,0x8
c0019f62:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f6b:	19 c0                	sbb    eax,eax
c0019f6d:	83 e0 fd             	and    eax,0xfffffffd
c0019f70:	05 ea 00 00 00       	add    eax,0xea
c0019f75:	50                   	push   eax
c0019f76:	6a 07                	push   0x7
c0019f78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f7f:	50                   	push   eax
c0019f80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f86:	e8 59 f1 ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f8b:	83 c4 0c             	add    esp,0xc
c0019f8e:	6a 00                	push   0x0
c0019f90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f97:	50                   	push   eax
c0019f98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f9e:	e8 df fb ff ff       	call   c0019b82 <IDE::polling(unsigned char, unsigned int)>
c0019fa3:	83 c4 18             	add    esp,0x18
c0019fa6:	5b                   	pop    ebx
c0019fa7:	c3                   	ret    

c0019fa8 <ATA::readyForCommand()>:
c0019fa8:	56                   	push   esi
c0019fa9:	53                   	push   ebx
c0019faa:	53                   	push   ebx
c0019fab:	31 db                	xor    ebx,ebx
c0019fad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fb1:	51                   	push   ecx
c0019fb2:	6a 0c                	push   0xc
c0019fb4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019fbb:	50                   	push   eax
c0019fbc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019fc2:	e8 dd f1 ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c0019fc7:	83 c4 10             	add    esp,0x10
c0019fca:	a8 88                	test   al,0x88
c0019fcc:	74 1f                	je     c0019fed <ATA::readyForCommand()+0x45>
c0019fce:	43                   	inc    ebx
c0019fcf:	83 fb 63             	cmp    ebx,0x63
c0019fd2:	7e dd                	jle    c0019fb1 <ATA::readyForCommand()+0x9>
c0019fd4:	83 ec 0c             	sub    esp,0xc
c0019fd7:	6a 0a                	push   0xa
c0019fd9:	e8 3e 9c ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c0019fde:	83 c4 10             	add    esp,0x10
c0019fe1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019fe7:	75 c8                	jne    c0019fb1 <ATA::readyForCommand()+0x9>
c0019fe9:	31 c0                	xor    eax,eax
c0019feb:	eb 02                	jmp    c0019fef <ATA::readyForCommand()+0x47>
c0019fed:	b0 01                	mov    al,0x1
c0019fef:	5a                   	pop    edx
c0019ff0:	5b                   	pop    ebx
c0019ff1:	5e                   	pop    esi
c0019ff2:	c3                   	ret    
c0019ff3:	90                   	nop

c0019ff4 <ATA::access(unsigned long long, int, void*, bool)>:
c0019ff4:	55                   	push   ebp
c0019ff5:	57                   	push   edi
c0019ff6:	56                   	push   esi
c0019ff7:	53                   	push   ebx
c0019ff8:	83 ec 2c             	sub    esp,0x2c
c0019ffb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019fff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a003:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a007:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a00b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a00f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a013:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a017:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a01d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a021:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a027:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a02b:	c1 e0 06             	shl    eax,0x6
c001a02e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a036:	74 5d                	je     c001a095 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a038:	89 fa                	mov    edx,edi
c001a03a:	89 f0                	mov    eax,esi
c001a03c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a040:	c1 ea 1c             	shr    edx,0x1c
c001a043:	89 d1                	mov    ecx,edx
c001a045:	09 c1                	or     ecx,eax
c001a047:	74 25                	je     c001a06e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a049:	31 ed                	xor    ebp,ebp
c001a04b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a052:	89 fa                	mov    edx,edi
c001a054:	89 f0                	mov    eax,esi
c001a056:	0f ad d0             	shrd   eax,edx,cl
c001a059:	d3 ea                	shr    edx,cl
c001a05b:	f6 c1 20             	test   cl,0x20
c001a05e:	74 02                	je     c001a062 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a060:	89 d0                	mov    eax,edx
c001a062:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a066:	45                   	inc    ebp
c001a067:	83 fd 06             	cmp    ebp,0x6
c001a06a:	75 df                	jne    c001a04b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a06c:	eb 76                	jmp    c001a0e4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a06e:	89 f0                	mov    eax,esi
c001a070:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a075:	89 fa                	mov    edx,edi
c001a077:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a07e:	0f ac d0 10          	shrd   eax,edx,0x10
c001a082:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a087:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a08b:	c1 ee 18             	shr    esi,0x18
c001a08e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a093:	eb 56                	jmp    c001a0eb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a095:	6a 00                	push   0x0
c001a097:	6a 3f                	push   0x3f
c001a099:	57                   	push   edi
c001a09a:	56                   	push   esi
c001a09b:	e8 60 22 00 00       	call   c001c300 <__umoddi3>
c001a0a0:	83 c4 10             	add    esp,0x10
c001a0a3:	40                   	inc    eax
c001a0a4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a0a8:	6a 00                	push   0x0
c001a0aa:	68 f0 03 00 00       	push   0x3f0
c001a0af:	57                   	push   edi
c001a0b0:	56                   	push   esi
c001a0b1:	e8 4a 21 00 00       	call   c001c200 <__udivdi3>
c001a0b6:	83 c4 10             	add    esp,0x10
c001a0b9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a0be:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0c5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0ca:	6a 00                	push   0x0
c001a0cc:	6a 3f                	push   0x3f
c001a0ce:	57                   	push   edi
c001a0cf:	56                   	push   esi
c001a0d0:	e8 2b 21 00 00       	call   c001c200 <__udivdi3>
c001a0d5:	83 c4 10             	add    esp,0x10
c001a0d8:	89 c6                	mov    esi,eax
c001a0da:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a0df:	83 e6 0f             	and    esi,0xf
c001a0e2:	eb 07                	jmp    c001a0eb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0e4:	31 f6                	xor    esi,esi
c001a0e6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a0eb:	bf 01 00 00 00       	mov    edi,0x1
c001a0f0:	50                   	push   eax
c001a0f1:	6a 00                	push   0x0
c001a0f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0fa:	50                   	push   eax
c001a0fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0ff:	e8 ee f1 ff ff       	call   c00192f2 <IDE::enableIRQs(unsigned char, bool)>
c001a104:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a107:	e8 9c fe ff ff       	call   c0019fa8 <ATA::readyForCommand()>
c001a10c:	83 c4 10             	add    esp,0x10
c001a10f:	84 c0                	test   al,al
c001a111:	0f 84 4e 02 00 00    	je     c001a365 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a117:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a11d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a123:	c1 e0 04             	shl    eax,0x4
c001a126:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a12d:	09 c6                	or     esi,eax
c001a12f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a134:	75 05                	jne    c001a13b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a136:	83 ce a0             	or     esi,0xffffffa0
c001a139:	eb 03                	jmp    c001a13e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a13b:	83 ce e0             	or     esi,0xffffffe0
c001a13e:	89 f0                	mov    eax,esi
c001a140:	0f b6 f0             	movzx  esi,al
c001a143:	56                   	push   esi
c001a144:	6a 06                	push   0x6
c001a146:	51                   	push   ecx
c001a147:	52                   	push   edx
c001a148:	e8 97 ef ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a14d:	83 c4 10             	add    esp,0x10
c001a150:	6a 00                	push   0x0
c001a152:	6a 01                	push   0x1
c001a154:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a15b:	50                   	push   eax
c001a15c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a162:	e8 7d ef ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a167:	83 c4 10             	add    esp,0x10
c001a16a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a16f:	75 6e                	jne    c001a1df <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a171:	6a 00                	push   0x0
c001a173:	6a 08                	push   0x8
c001a175:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a17c:	50                   	push   eax
c001a17d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a183:	e8 5c ef ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a188:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a18d:	50                   	push   eax
c001a18e:	6a 09                	push   0x9
c001a190:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a197:	50                   	push   eax
c001a198:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a19e:	e8 41 ef ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1a3:	83 c4 20             	add    esp,0x20
c001a1a6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a1ab:	50                   	push   eax
c001a1ac:	6a 0a                	push   0xa
c001a1ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1b5:	50                   	push   eax
c001a1b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1bc:	e8 23 ef ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1c1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a1c6:	50                   	push   eax
c001a1c7:	6a 0b                	push   0xb
c001a1c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1d0:	50                   	push   eax
c001a1d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1d7:	e8 08 ef ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1dc:	83 c4 20             	add    esp,0x20
c001a1df:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a1e4:	50                   	push   eax
c001a1e5:	6a 02                	push   0x2
c001a1e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1ee:	50                   	push   eax
c001a1ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1f5:	e8 ea ee ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1fa:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a1ff:	50                   	push   eax
c001a200:	6a 03                	push   0x3
c001a202:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a209:	50                   	push   eax
c001a20a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a210:	e8 cf ee ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a215:	83 c4 20             	add    esp,0x20
c001a218:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a21d:	50                   	push   eax
c001a21e:	6a 04                	push   0x4
c001a220:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a227:	50                   	push   eax
c001a228:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a22e:	e8 b1 ee ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a233:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a238:	50                   	push   eax
c001a239:	6a 05                	push   0x5
c001a23b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a242:	50                   	push   eax
c001a243:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a249:	e8 96 ee ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a24e:	83 c4 20             	add    esp,0x20
c001a251:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a256:	0f 94 c0             	sete   al
c001a259:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a25e:	74 09                	je     c001a269 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a260:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a267:	eb 07                	jmp    c001a270 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a269:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a270:	0f b6 c0             	movzx  eax,al
c001a273:	50                   	push   eax
c001a274:	6a 07                	push   0x7
c001a276:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a27d:	50                   	push   eax
c001a27e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a284:	e8 5b ee ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a289:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a28d:	83 c4 10             	add    esp,0x10
c001a290:	85 f6                	test   esi,esi
c001a292:	0f 84 ae 00 00 00    	je     c001a346 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a298:	50                   	push   eax
c001a299:	6a 01                	push   0x1
c001a29b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2a2:	50                   	push   eax
c001a2a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2a9:	e8 d4 f8 ff ff       	call   c0019b82 <IDE::polling(unsigned char, unsigned int)>
c001a2ae:	83 c4 10             	add    esp,0x10
c001a2b1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a2b7:	84 c0                	test   al,al
c001a2b9:	74 20                	je     c001a2db <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a2bb:	0f b6 f8             	movzx  edi,al
c001a2be:	0f b6 d2             	movzx  edx,dl
c001a2c1:	57                   	push   edi
c001a2c2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a2c9:	50                   	push   eax
c001a2ca:	52                   	push   edx
c001a2cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2d1:	e8 fc f7 ff ff       	call   c0019ad2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a2d6:	e9 87 00 00 00       	jmp    c001a362 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a2db:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a2e0:	74 33                	je     c001a315 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a2e2:	31 ed                	xor    ebp,ebp
c001a2e4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a2e8:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a2ec:	50                   	push   eax
c001a2ed:	50                   	push   eax
c001a2ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2f5:	50                   	push   eax
c001a2f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2fc:	e8 d1 ed ff ff       	call   c00190d2 <IDE::getBase(unsigned char)>
c001a301:	89 c2                	mov    edx,eax
c001a303:	89 f8                	mov    eax,edi
c001a305:	66 ef                	out    dx,ax
c001a307:	45                   	inc    ebp
c001a308:	83 c4 10             	add    esp,0x10
c001a30b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a311:	75 d1                	jne    c001a2e4 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a313:	eb 23                	jmp    c001a338 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a315:	0f b6 d2             	movzx  edx,dl
c001a318:	51                   	push   ecx
c001a319:	51                   	push   ecx
c001a31a:	52                   	push   edx
c001a31b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a321:	e8 ac ed ff ff       	call   c00190d2 <IDE::getBase(unsigned char)>
c001a326:	b9 00 01 00 00       	mov    ecx,0x100
c001a32b:	89 c2                	mov    edx,eax
c001a32d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a331:	fc                   	cld    
c001a332:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a335:	83 c4 10             	add    esp,0x10
c001a338:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a340:	4e                   	dec    esi
c001a341:	e9 4a ff ff ff       	jmp    c001a290 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a346:	31 ff                	xor    edi,edi
c001a348:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a34d:	74 16                	je     c001a365 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a34f:	50                   	push   eax
c001a350:	50                   	push   eax
c001a351:	31 c0                	xor    eax,eax
c001a353:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a358:	0f 94 c0             	sete   al
c001a35b:	50                   	push   eax
c001a35c:	53                   	push   ebx
c001a35d:	e8 fc fb ff ff       	call   c0019f5e <ATA::flush(bool)>
c001a362:	83 c4 10             	add    esp,0x10
c001a365:	83 c4 2c             	add    esp,0x2c
c001a368:	89 f8                	mov    eax,edi
c001a36a:	5b                   	pop    ebx
c001a36b:	5e                   	pop    esi
c001a36c:	5f                   	pop    edi
c001a36d:	5d                   	pop    ebp
c001a36e:	c3                   	ret    
c001a36f:	90                   	nop

c001a370 <ATA::read(unsigned long long, int, void*)>:
c001a370:	57                   	push   edi
c001a371:	b8 04 00 00 00       	mov    eax,0x4
c001a376:	56                   	push   esi
c001a377:	53                   	push   ebx
c001a378:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a37c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a380:	8d 7a ff             	lea    edi,[edx-0x1]
c001a383:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a387:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a38b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a391:	77 25                	ja     c001a3b8 <ATA::read(unsigned long long, int, void*)+0x48>
c001a393:	b8 06 00 00 00       	mov    eax,0x6
c001a398:	85 f6                	test   esi,esi
c001a39a:	74 1c                	je     c001a3b8 <ATA::read(unsigned long long, int, void*)+0x48>
c001a39c:	50                   	push   eax
c001a39d:	50                   	push   eax
c001a39e:	6a 00                	push   0x0
c001a3a0:	56                   	push   esi
c001a3a1:	52                   	push   edx
c001a3a2:	53                   	push   ebx
c001a3a3:	51                   	push   ecx
c001a3a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3a8:	e8 47 fc ff ff       	call   c0019ff4 <ATA::access(unsigned long long, int, void*, bool)>
c001a3ad:	83 c4 20             	add    esp,0x20
c001a3b0:	85 c0                	test   eax,eax
c001a3b2:	0f 95 c0             	setne  al
c001a3b5:	0f b6 c0             	movzx  eax,al
c001a3b8:	5b                   	pop    ebx
c001a3b9:	5e                   	pop    esi
c001a3ba:	5f                   	pop    edi
c001a3bb:	c3                   	ret    

c001a3bc <ATA::write(unsigned long long, int, void*)>:
c001a3bc:	57                   	push   edi
c001a3bd:	b8 04 00 00 00       	mov    eax,0x4
c001a3c2:	56                   	push   esi
c001a3c3:	53                   	push   ebx
c001a3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3cc:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3d3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3d7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a3dd:	77 25                	ja     c001a404 <ATA::write(unsigned long long, int, void*)+0x48>
c001a3df:	b8 06 00 00 00       	mov    eax,0x6
c001a3e4:	85 f6                	test   esi,esi
c001a3e6:	74 1c                	je     c001a404 <ATA::write(unsigned long long, int, void*)+0x48>
c001a3e8:	50                   	push   eax
c001a3e9:	50                   	push   eax
c001a3ea:	6a 01                	push   0x1
c001a3ec:	56                   	push   esi
c001a3ed:	52                   	push   edx
c001a3ee:	53                   	push   ebx
c001a3ef:	51                   	push   ecx
c001a3f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3f4:	e8 fb fb ff ff       	call   c0019ff4 <ATA::access(unsigned long long, int, void*, bool)>
c001a3f9:	83 c4 20             	add    esp,0x20
c001a3fc:	85 c0                	test   eax,eax
c001a3fe:	0f 95 c0             	setne  al
c001a401:	0f b6 c0             	movzx  eax,al
c001a404:	5b                   	pop    ebx
c001a405:	5e                   	pop    esi
c001a406:	5f                   	pop    edi
c001a407:	c3                   	ret    

c001a408 <ATA::detectCHS()>:
c001a408:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a40c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a412:	c1 e0 06             	shl    eax,0x6
c001a415:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a41b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a425:	c7 44 24 04 6c f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f36c
c001a42d:	e9 91 62 ff ff       	jmp    c00106c3 <KePanic(char const*)>

c001a432 <ATA::open(int, int, void*)>:
c001a432:	53                   	push   ebx
c001a433:	83 ec 08             	sub    esp,0x8
c001a436:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a43a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a43e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a442:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a448:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a44e:	c1 e0 06             	shl    eax,0x6
c001a451:	01 d0                	add    eax,edx
c001a453:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a45a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a460:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a467:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a471:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a477:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a47e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a485:	75 0c                	jne    c001a493 <ATA::open(int, int, void*)+0x61>
c001a487:	83 ec 0c             	sub    esp,0xc
c001a48a:	53                   	push   ebx
c001a48b:	e8 78 ff ff ff       	call   c001a408 <ATA::detectCHS()>
c001a490:	83 c4 10             	add    esp,0x10
c001a493:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a499:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a49f:	c1 e0 06             	shl    eax,0x6
c001a4a2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a4a9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a4b3:	d1 e8                	shr    eax,1
c001a4b5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a4bb:	6a 04                	push   0x4
c001a4bd:	6a 0c                	push   0xc
c001a4bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4c6:	50                   	push   eax
c001a4c7:	52                   	push   edx
c001a4c8:	e8 17 ec ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4cd:	90                   	nop
c001a4ce:	90                   	nop
c001a4cf:	6a 00                	push   0x0
c001a4d1:	6a 0c                	push   0xc
c001a4d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4da:	50                   	push   eax
c001a4db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4e1:	e8 fe eb ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4e6:	83 c4 14             	add    esp,0x14
c001a4e9:	53                   	push   ebx
c001a4ea:	e8 7b 1e ff ff       	call   c000c36a <PhysicalDisk::startCache()>
c001a4ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4f2:	e8 eb 2e ff ff       	call   c000d3e2 <createPartitionsForDisk(PhysicalDisk*)>
c001a4f7:	31 c0                	xor    eax,eax
c001a4f9:	83 c4 18             	add    esp,0x18
c001a4fc:	5b                   	pop    ebx
c001a4fd:	c3                   	ret    

c001a4fe <ATAPI::write(unsigned long long, int, void*)>:
c001a4fe:	b8 03 00 00 00       	mov    eax,0x3
c001a503:	c3                   	ret    

c001a504 <ATAPI::close(int, int, void*)>:
c001a504:	83 ec 0c             	sub    esp,0xc
c001a507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a50b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a511:	85 c0                	test   eax,eax
c001a513:	74 0c                	je     c001a521 <ATAPI::close(int, int, void*)+0x1d>
c001a515:	83 ec 0c             	sub    esp,0xc
c001a518:	8b 10                	mov    edx,DWORD PTR [eax]
c001a51a:	50                   	push   eax
c001a51b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a51e:	83 c4 10             	add    esp,0x10
c001a521:	31 c0                	xor    eax,eax
c001a523:	83 c4 0c             	add    esp,0xc
c001a526:	c3                   	ret    
c001a527:	90                   	nop

c001a528 <ATAPI::ATAPI()>:
c001a528:	83 ec 0c             	sub    esp,0xc
c001a52b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a52f:	83 ec 04             	sub    esp,0x4
c001a532:	68 00 08 00 00       	push   0x800
c001a537:	68 b5 f4 01 c0       	push   0xc001f4b5
c001a53c:	50                   	push   eax
c001a53d:	e8 c0 1d ff ff       	call   c000c302 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a542:	83 c4 10             	add    esp,0x10
c001a545:	ba d0 f3 01 c0       	mov    edx,0xc001f3d0
c001a54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a54e:	89 10                	mov    DWORD PTR [eax],edx
c001a550:	90                   	nop
c001a551:	83 c4 0c             	add    esp,0xc
c001a554:	c3                   	ret    
c001a555:	90                   	nop

c001a556 <ATAPI::readyForCommand()>:
c001a556:	56                   	push   esi
c001a557:	53                   	push   ebx
c001a558:	53                   	push   ebx
c001a559:	31 db                	xor    ebx,ebx
c001a55b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a55f:	51                   	push   ecx
c001a560:	6a 0c                	push   0xc
c001a562:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a569:	50                   	push   eax
c001a56a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a570:	e8 2f ec ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c001a575:	83 c4 10             	add    esp,0x10
c001a578:	a8 88                	test   al,0x88
c001a57a:	74 25                	je     c001a5a1 <ATAPI::readyForCommand()+0x4b>
c001a57c:	43                   	inc    ebx
c001a57d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a583:	7e da                	jle    c001a55f <ATAPI::readyForCommand()+0x9>
c001a585:	83 ec 0c             	sub    esp,0xc
c001a588:	68 5e 01 00 00       	push   0x15e
c001a58d:	e8 8a 96 ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c001a592:	83 c4 10             	add    esp,0x10
c001a595:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a59b:	75 c2                	jne    c001a55f <ATAPI::readyForCommand()+0x9>
c001a59d:	31 c0                	xor    eax,eax
c001a59f:	eb 02                	jmp    c001a5a3 <ATAPI::readyForCommand()+0x4d>
c001a5a1:	b0 01                	mov    al,0x1
c001a5a3:	5a                   	pop    edx
c001a5a4:	5b                   	pop    ebx
c001a5a5:	5e                   	pop    esi
c001a5a6:	c3                   	ret    
c001a5a7:	90                   	nop

c001a5a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a5a8:	55                   	push   ebp
c001a5a9:	57                   	push   edi
c001a5aa:	56                   	push   esi
c001a5ab:	53                   	push   ebx
c001a5ac:	83 ec 20             	sub    esp,0x20
c001a5af:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a5b3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a5b7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a5bb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a5bf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a5c3:	6a 01                	push   0x1
c001a5c5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5cc:	50                   	push   eax
c001a5cd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5d3:	e8 1a ed ff ff       	call   c00192f2 <IDE::enableIRQs(unsigned char, bool)>
c001a5d8:	5e                   	pop    esi
c001a5d9:	58                   	pop    eax
c001a5da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5e1:	50                   	push   eax
c001a5e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5e8:	e8 d1 ea ff ff       	call   c00190be <IDE::prepareInterrupt(unsigned char)>
c001a5ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a5f0:	e8 61 ff ff ff       	call   c001a556 <ATAPI::readyForCommand()>
c001a5f5:	83 c4 10             	add    esp,0x10
c001a5f8:	84 c0                	test   al,al
c001a5fa:	75 0a                	jne    c001a606 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a5fc:	bb 01 00 00 00       	mov    ebx,0x1
c001a601:	e9 57 02 00 00       	jmp    c001a85d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a606:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a60c:	c1 e0 04             	shl    eax,0x4
c001a60f:	0f b6 c0             	movzx  eax,al
c001a612:	50                   	push   eax
c001a613:	6a 06                	push   0x6
c001a615:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a61c:	50                   	push   eax
c001a61d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a623:	e8 bc ea ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a628:	6a 00                	push   0x0
c001a62a:	6a 01                	push   0x1
c001a62c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a633:	50                   	push   eax
c001a634:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a63a:	e8 a5 ea ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a63f:	83 c4 20             	add    esp,0x20
c001a642:	0f b6 c3             	movzx  eax,bl
c001a645:	0f b6 df             	movzx  ebx,bh
c001a648:	50                   	push   eax
c001a649:	6a 04                	push   0x4
c001a64b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a652:	50                   	push   eax
c001a653:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a659:	e8 86 ea ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a65e:	53                   	push   ebx
c001a65f:	6a 05                	push   0x5
c001a661:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a668:	50                   	push   eax
c001a669:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a66f:	e8 70 ea ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a674:	83 c4 20             	add    esp,0x20
c001a677:	68 a0 00 00 00       	push   0xa0
c001a67c:	6a 07                	push   0x7
c001a67e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a685:	50                   	push   eax
c001a686:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a68c:	e8 53 ea ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a691:	83 c4 0c             	add    esp,0xc
c001a694:	6a 01                	push   0x1
c001a696:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a69d:	50                   	push   eax
c001a69e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6a4:	e8 d9 f4 ff ff       	call   c0019b82 <IDE::polling(unsigned char, unsigned int)>
c001a6a9:	83 c4 10             	add    esp,0x10
c001a6ac:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a6b2:	84 c0                	test   al,al
c001a6b4:	74 23                	je     c001a6d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a6b6:	0f b6 d8             	movzx  ebx,al
c001a6b9:	0f b6 d2             	movzx  edx,dl
c001a6bc:	53                   	push   ebx
c001a6bd:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a6c4:	50                   	push   eax
c001a6c5:	52                   	push   edx
c001a6c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6cc:	e8 01 f4 ff ff       	call   c0019ad2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a6d1:	83 c4 10             	add    esp,0x10
c001a6d4:	e9 84 01 00 00       	jmp    c001a85d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a6d9:	0f b6 d2             	movzx  edx,dl
c001a6dc:	53                   	push   ebx
c001a6dd:	53                   	push   ebx
c001a6de:	52                   	push   edx
c001a6df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6e5:	e8 e8 e9 ff ff       	call   c00190d2 <IDE::getBase(unsigned char)>
c001a6ea:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a6ee:	b9 06 00 00 00       	mov    ecx,0x6
c001a6f3:	89 c2                	mov    edx,eax
c001a6f5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a6f8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a6fc:	83 c4 10             	add    esp,0x10
c001a6ff:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a705:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a70c:	85 db                	test   ebx,ebx
c001a70e:	0f 84 ec 00 00 00    	je     c001a800 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a714:	51                   	push   ecx
c001a715:	51                   	push   ecx
c001a716:	52                   	push   edx
c001a717:	50                   	push   eax
c001a718:	e8 35 eb ff ff       	call   c0019252 <IDE::waitInterrupt(unsigned char)>
c001a71d:	83 c4 10             	add    esp,0x10
c001a720:	84 c0                	test   al,al
c001a722:	0f 84 d4 fe ff ff    	je     c001a5fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a728:	56                   	push   esi
c001a729:	56                   	push   esi
c001a72a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a731:	50                   	push   eax
c001a732:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a738:	e8 81 e9 ff ff       	call   c00190be <IDE::prepareInterrupt(unsigned char)>
c001a73d:	83 c4 0c             	add    esp,0xc
c001a740:	6a 04                	push   0x4
c001a742:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a749:	50                   	push   eax
c001a74a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a750:	e8 4f ea ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c001a755:	83 c4 0c             	add    esp,0xc
c001a758:	89 c6                	mov    esi,eax
c001a75a:	6a 05                	push   0x5
c001a75c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a763:	50                   	push   eax
c001a764:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a76a:	e8 35 ea ff ff       	call   c00191a4 <IDE::read(unsigned char, unsigned char)>
c001a76f:	89 f1                	mov    ecx,esi
c001a771:	0f b6 c0             	movzx  eax,al
c001a774:	0f b6 f1             	movzx  esi,cl
c001a777:	c1 e0 08             	shl    eax,0x8
c001a77a:	09 c6                	or     esi,eax
c001a77c:	d1 fe                	sar    esi,1
c001a77e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a782:	83 c4 10             	add    esp,0x10
c001a785:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a78a:	74 41                	je     c001a7cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a78c:	31 c9                	xor    ecx,ecx
c001a78e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a794:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a79b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a79f:	75 0a                	jne    c001a7ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a7a1:	01 c9                	add    ecx,ecx
c001a7a3:	01 cd                	add    ebp,ecx
c001a7a5:	4b                   	dec    ebx
c001a7a6:	e9 54 ff ff ff       	jmp    c001a6ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a7ab:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a7b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a7b4:	51                   	push   ecx
c001a7b5:	51                   	push   ecx
c001a7b6:	52                   	push   edx
c001a7b7:	50                   	push   eax
c001a7b8:	e8 15 e9 ff ff       	call   c00190d2 <IDE::getBase(unsigned char)>
c001a7bd:	89 c2                	mov    edx,eax
c001a7bf:	89 f0                	mov    eax,esi
c001a7c1:	66 ef                	out    dx,ax
c001a7c3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a7c7:	83 c4 10             	add    esp,0x10
c001a7ca:	41                   	inc    ecx
c001a7cb:	eb c1                	jmp    c001a78e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a7cd:	31 f6                	xor    esi,esi
c001a7cf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a7d5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a7dc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a7e0:	75 06                	jne    c001a7e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a7e2:	01 f6                	add    esi,esi
c001a7e4:	01 f5                	add    ebp,esi
c001a7e6:	eb bd                	jmp    c001a7a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a7e8:	51                   	push   ecx
c001a7e9:	51                   	push   ecx
c001a7ea:	52                   	push   edx
c001a7eb:	50                   	push   eax
c001a7ec:	e8 e1 e8 ff ff       	call   c00190d2 <IDE::getBase(unsigned char)>
c001a7f1:	89 c2                	mov    edx,eax
c001a7f3:	66 ed                	in     ax,dx
c001a7f5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a7fa:	83 c4 10             	add    esp,0x10
c001a7fd:	46                   	inc    esi
c001a7fe:	eb cf                	jmp    c001a7cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a800:	51                   	push   ecx
c001a801:	51                   	push   ecx
c001a802:	52                   	push   edx
c001a803:	50                   	push   eax
c001a804:	e8 49 ea ff ff       	call   c0019252 <IDE::waitInterrupt(unsigned char)>
c001a809:	83 c4 10             	add    esp,0x10
c001a80c:	84 c0                	test   al,al
c001a80e:	0f 84 e8 fd ff ff    	je     c001a5fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a814:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a819:	52                   	push   edx
c001a81a:	52                   	push   edx
c001a81b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a822:	50                   	push   eax
c001a823:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a829:	e8 90 e8 ff ff       	call   c00190be <IDE::prepareInterrupt(unsigned char)>
c001a82e:	83 c4 10             	add    esp,0x10
c001a831:	50                   	push   eax
c001a832:	50                   	push   eax
c001a833:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a83a:	50                   	push   eax
c001a83b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a841:	e8 8c e8 ff ff       	call   c00190d2 <IDE::getBase(unsigned char)>
c001a846:	8d 50 07             	lea    edx,[eax+0x7]
c001a849:	ec                   	in     al,dx
c001a84a:	83 c4 10             	add    esp,0x10
c001a84d:	a8 88                	test   al,0x88
c001a84f:	74 0a                	je     c001a85b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a851:	4b                   	dec    ebx
c001a852:	75 dd                	jne    c001a831 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a854:	bb 02 00 00 00       	mov    ebx,0x2
c001a859:	eb 02                	jmp    c001a85d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a85b:	31 db                	xor    ebx,ebx
c001a85d:	83 c4 1c             	add    esp,0x1c
c001a860:	89 d8                	mov    eax,ebx
c001a862:	5b                   	pop    ebx
c001a863:	5e                   	pop    esi
c001a864:	5f                   	pop    edi
c001a865:	5d                   	pop    ebp
c001a866:	c3                   	ret    
c001a867:	90                   	nop

c001a868 <ATAPI::diskRemoved()>:
c001a868:	53                   	push   ebx
c001a869:	83 ec 14             	sub    esp,0x14
c001a86c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a870:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a877:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a87d:	e8 e0 28 ff ff       	call   c000d162 <LogicalDisk::unmount()>
c001a882:	58                   	pop    eax
c001a883:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a889:	e8 1a 32 ff ff       	call   c000daa8 <VCache::writeWriteBuffer()>
c001a88e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a894:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a898:	83 c4 18             	add    esp,0x18
c001a89b:	5b                   	pop    ebx
c001a89c:	e9 f7 31 ff ff       	jmp    c000da98 <VCache::invalidateReadBuffer()>
c001a8a1:	90                   	nop

c001a8a2 <ATAPI::eject()>:
c001a8a2:	57                   	push   edi
c001a8a3:	b9 03 00 00 00       	mov    ecx,0x3
c001a8a8:	53                   	push   ebx
c001a8a9:	83 ec 14             	sub    esp,0x14
c001a8ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a8b0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a8b4:	fc                   	cld    
c001a8b5:	31 c0                	xor    eax,eax
c001a8b7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a8b9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a8be:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a8c3:	50                   	push   eax
c001a8c4:	50                   	push   eax
c001a8c5:	6a 00                	push   0x0
c001a8c7:	6a 00                	push   0x0
c001a8c9:	6a 00                	push   0x0
c001a8cb:	6a 02                	push   0x2
c001a8cd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8d1:	50                   	push   eax
c001a8d2:	53                   	push   ebx
c001a8d3:	e8 d0 fc ff ff       	call   c001a5a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8d8:	83 c4 14             	add    esp,0x14
c001a8db:	53                   	push   ebx
c001a8dc:	e8 87 ff ff ff       	call   c001a868 <ATAPI::diskRemoved()>
c001a8e1:	83 c4 24             	add    esp,0x24
c001a8e4:	31 c0                	xor    eax,eax
c001a8e6:	5b                   	pop    ebx
c001a8e7:	5f                   	pop    edi
c001a8e8:	c3                   	ret    
c001a8e9:	90                   	nop

c001a8ea <ATAPI::diskInserted()>:
c001a8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8ee:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a8f5:	c3                   	ret    

c001a8f6 <ATAPI::detectMedia()>:
c001a8f6:	56                   	push   esi
c001a8f7:	53                   	push   ebx
c001a8f8:	83 ec 28             	sub    esp,0x28
c001a8fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a8ff:	6a 0c                	push   0xc
c001a901:	6a 00                	push   0x0
c001a903:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a907:	56                   	push   esi
c001a908:	e8 e3 5b fe ff       	call   c00004f0 <memset>
c001a90d:	58                   	pop    eax
c001a90e:	5a                   	pop    edx
c001a90f:	6a 00                	push   0x0
c001a911:	6a 00                	push   0x0
c001a913:	6a 00                	push   0x0
c001a915:	6a 00                	push   0x0
c001a917:	56                   	push   esi
c001a918:	53                   	push   ebx
c001a919:	e8 8a fc ff ff       	call   c001a5a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a91e:	83 c4 1c             	add    esp,0x1c
c001a921:	6a 0c                	push   0xc
c001a923:	6a 00                	push   0x0
c001a925:	56                   	push   esi
c001a926:	e8 c5 5b fe ff       	call   c00004f0 <memset>
c001a92b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a930:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a935:	59                   	pop    ecx
c001a936:	58                   	pop    eax
c001a937:	6a 01                	push   0x1
c001a939:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a93d:	50                   	push   eax
c001a93e:	6a 00                	push   0x0
c001a940:	6a 12                	push   0x12
c001a942:	56                   	push   esi
c001a943:	53                   	push   ebx
c001a944:	e8 5f fc ff ff       	call   c001a5a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a949:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a94d:	83 c4 20             	add    esp,0x20
c001a950:	83 e0 7f             	and    eax,0x7f
c001a953:	3c 70                	cmp    al,0x70
c001a955:	74 15                	je     c001a96c <ATAPI::detectMedia()+0x76>
c001a957:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a95e:	75 0c                	jne    c001a96c <ATAPI::detectMedia()+0x76>
c001a960:	83 ec 0c             	sub    esp,0xc
c001a963:	53                   	push   ebx
c001a964:	e8 81 ff ff ff       	call   c001a8ea <ATAPI::diskInserted()>
c001a969:	83 c4 10             	add    esp,0x10
c001a96c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a970:	83 e0 0f             	and    eax,0xf
c001a973:	3c 02                	cmp    al,0x2
c001a975:	75 1b                	jne    c001a992 <ATAPI::detectMedia()+0x9c>
c001a977:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a97c:	75 2d                	jne    c001a9ab <ATAPI::detectMedia()+0xb5>
c001a97e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a985:	74 24                	je     c001a9ab <ATAPI::detectMedia()+0xb5>
c001a987:	83 ec 0c             	sub    esp,0xc
c001a98a:	53                   	push   ebx
c001a98b:	e8 d8 fe ff ff       	call   c001a868 <ATAPI::diskRemoved()>
c001a990:	eb 16                	jmp    c001a9a8 <ATAPI::detectMedia()+0xb2>
c001a992:	84 c0                	test   al,al
c001a994:	75 15                	jne    c001a9ab <ATAPI::detectMedia()+0xb5>
c001a996:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a99d:	75 0c                	jne    c001a9ab <ATAPI::detectMedia()+0xb5>
c001a99f:	83 ec 0c             	sub    esp,0xc
c001a9a2:	53                   	push   ebx
c001a9a3:	e8 42 ff ff ff       	call   c001a8ea <ATAPI::diskInserted()>
c001a9a8:	83 c4 10             	add    esp,0x10
c001a9ab:	83 c4 24             	add    esp,0x24
c001a9ae:	5b                   	pop    ebx
c001a9af:	5e                   	pop    esi
c001a9b0:	c3                   	ret    
c001a9b1:	90                   	nop

c001a9b2 <ATAPI::open(int, int, void*)>:
c001a9b2:	56                   	push   esi
c001a9b3:	53                   	push   ebx
c001a9b4:	50                   	push   eax
c001a9b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a9bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9c1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a9c7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a9cd:	c1 e0 06             	shl    eax,0x6
c001a9d0:	01 d0                	add    eax,edx
c001a9d2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a9d9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a9df:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a9e6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a9f0:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a9f6:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a9fd:	6a 04                	push   0x4
c001a9ff:	6a 0c                	push   0xc
c001aa01:	51                   	push   ecx
c001aa02:	52                   	push   edx
c001aa03:	e8 dc e6 ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa08:	90                   	nop
c001aa09:	90                   	nop
c001aa0a:	6a 00                	push   0x0
c001aa0c:	6a 0c                	push   0xc
c001aa0e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001aa15:	50                   	push   eax
c001aa16:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001aa1c:	e8 c3 e6 ff ff       	call   c00190e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa21:	83 c4 14             	add    esp,0x14
c001aa24:	68 74 01 00 00       	push   0x174
c001aa29:	e8 2f d4 fe ff       	call   c0007e5d <malloc>
c001aa2e:	83 c4 0c             	add    esp,0xc
c001aa31:	89 c6                	mov    esi,eax
c001aa33:	6a 00                	push   0x0
c001aa35:	68 ff ff ff 7f       	push   0x7fffffff
c001aa3a:	6a 00                	push   0x0
c001aa3c:	6a 00                	push   0x0
c001aa3e:	53                   	push   ebx
c001aa3f:	68 a0 f5 01 c0       	push   0xc001f5a0
c001aa44:	50                   	push   eax
c001aa45:	e8 64 25 ff ff       	call   c000cfae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001aa4a:	83 c4 14             	add    esp,0x14
c001aa4d:	56                   	push   esi
c001aa4e:	e8 11 26 ff ff       	call   c000d064 <LogicalDisk::assignDriveLetter()>
c001aa53:	5a                   	pop    edx
c001aa54:	0f be c0             	movsx  eax,al
c001aa57:	59                   	pop    ecx
c001aa58:	50                   	push   eax
c001aa59:	68 b8 f3 01 c0       	push   0xc001f3b8
c001aa5e:	e8 91 00 ff ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001aa63:	58                   	pop    eax
c001aa64:	5a                   	pop    edx
c001aa65:	56                   	push   esi
c001aa66:	53                   	push   ebx
c001aa67:	e8 c8 14 ff ff       	call   c000bf34 <Device::addChild(Device*)>
c001aa6c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aa72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa75:	e8 f0 18 ff ff       	call   c000c36a <PhysicalDisk::startCache()>
c001aa7a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aa81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa84:	e8 6d fe ff ff       	call   c001a8f6 <ATAPI::detectMedia()>
c001aa89:	83 c4 14             	add    esp,0x14
c001aa8c:	31 c0                	xor    eax,eax
c001aa8e:	5b                   	pop    ebx
c001aa8f:	5e                   	pop    esi
c001aa90:	c3                   	ret    
c001aa91:	90                   	nop

c001aa92 <ATAPI::read(unsigned long long, int, void*)>:
c001aa92:	55                   	push   ebp
c001aa93:	57                   	push   edi
c001aa94:	56                   	push   esi
c001aa95:	53                   	push   ebx
c001aa96:	83 ec 1c             	sub    esp,0x1c
c001aa99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa9d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aaa1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aaa5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aaac:	74 3c                	je     c001aaea <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aaae:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aab2:	b9 03 00 00 00       	mov    ecx,0x3
c001aab7:	fc                   	cld    
c001aab8:	31 c0                	xor    eax,eax
c001aaba:	0f ce                	bswap  esi
c001aabc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aabe:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aac3:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aac7:	89 e8                	mov    eax,ebp
c001aac9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aacd:	50                   	push   eax
c001aace:	50                   	push   eax
c001aacf:	55                   	push   ebp
c001aad0:	c1 e5 0b             	shl    ebp,0xb
c001aad3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aad7:	6a 00                	push   0x0
c001aad9:	55                   	push   ebp
c001aada:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aade:	50                   	push   eax
c001aadf:	53                   	push   ebx
c001aae0:	e8 c3 fa ff ff       	call   c001a5a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aae5:	83 c4 20             	add    esp,0x20
c001aae8:	eb 1a                	jmp    c001ab04 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aaea:	83 ec 0c             	sub    esp,0xc
c001aaed:	53                   	push   ebx
c001aaee:	e8 03 fe ff ff       	call   c001a8f6 <ATAPI::detectMedia()>
c001aaf3:	83 c4 10             	add    esp,0x10
c001aaf6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aafd:	75 af                	jne    c001aaae <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aaff:	b8 02 00 00 00       	mov    eax,0x2
c001ab04:	83 c4 1c             	add    esp,0x1c
c001ab07:	5b                   	pop    ebx
c001ab08:	5e                   	pop    esi
c001ab09:	5f                   	pop    edi
c001ab0a:	5d                   	pop    ebp
c001ab0b:	c3                   	ret    

c001ab0c <SATA::close(int, int, void*)>:
c001ab0c:	83 ec 0c             	sub    esp,0xc
c001ab0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab13:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ab19:	85 c0                	test   eax,eax
c001ab1b:	74 0c                	je     c001ab29 <SATA::close(int, int, void*)+0x1d>
c001ab1d:	83 ec 0c             	sub    esp,0xc
c001ab20:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab22:	50                   	push   eax
c001ab23:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ab26:	83 c4 10             	add    esp,0x10
c001ab29:	31 c0                	xor    eax,eax
c001ab2b:	83 c4 0c             	add    esp,0xc
c001ab2e:	c3                   	ret    
c001ab2f:	90                   	nop

c001ab30 <SATA::powerSaving(PowerSavingLevel)>:
c001ab30:	c3                   	ret    
c001ab31:	90                   	nop

c001ab32 <SATA::open(int, int, void*)>:
c001ab32:	56                   	push   esi
c001ab33:	53                   	push   ebx
c001ab34:	50                   	push   eax
c001ab35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab3d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ab47:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ab4d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ab57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab5b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ab65:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ab6b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ab72:	e8 be d5 fe ff       	call   c0008135 <Phys::allocatePage()>
c001ab77:	89 c6                	mov    esi,eax
c001ab79:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ab7f:	81 c6 00 10 00 00    	add    esi,0x1000
c001ab85:	e8 ab d5 fe ff       	call   c0008135 <Phys::allocatePage()>
c001ab8a:	39 c6                	cmp    esi,eax
c001ab8c:	74 10                	je     c001ab9e <SATA::open(int, int, void*)+0x6c>
c001ab8e:	83 ec 0c             	sub    esp,0xc
c001ab91:	68 00 f4 01 c0       	push   0xc001f400
c001ab96:	e8 28 5b ff ff       	call   c00106c3 <KePanic(char const*)>
c001ab9b:	83 c4 10             	add    esp,0x10
c001ab9e:	83 ec 0c             	sub    esp,0xc
c001aba1:	6a 02                	push   0x2
c001aba3:	e8 f9 ec fe ff       	call   c00098a1 <Virt::allocateKernelVirtualPages(int)>
c001aba8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001abae:	6a 03                	push   0x3
c001abb0:	50                   	push   eax
c001abb1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001abb7:	ff 35 90 0a 02 c0    	push   DWORD PTR ds:0xc0020a90
c001abbd:	e8 74 f3 fe ff       	call   c0009f36 <VAS::mapPage(unsigned long, unsigned long, int)>
c001abc2:	83 c4 14             	add    esp,0x14
c001abc5:	53                   	push   ebx
c001abc6:	e8 9f 17 ff ff       	call   c000c36a <PhysicalDisk::startCache()>
c001abcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abce:	e8 0f 28 ff ff       	call   c000d3e2 <createPartitionsForDisk(PhysicalDisk*)>
c001abd3:	83 c4 14             	add    esp,0x14
c001abd6:	31 c0                	xor    eax,eax
c001abd8:	5b                   	pop    ebx
c001abd9:	5e                   	pop    esi
c001abda:	c3                   	ret    
c001abdb:	90                   	nop

c001abdc <SATA::SATA()>:
c001abdc:	83 ec 0c             	sub    esp,0xc
c001abdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe3:	83 ec 04             	sub    esp,0x4
c001abe6:	68 00 02 00 00       	push   0x200
c001abeb:	68 14 f4 01 c0       	push   0xc001f414
c001abf0:	50                   	push   eax
c001abf1:	e8 0c 17 ff ff       	call   c000c302 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001abf6:	83 c4 10             	add    esp,0x10
c001abf9:	ba 84 f4 01 c0       	mov    edx,0xc001f484
c001abfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac02:	89 10                	mov    DWORD PTR [eax],edx
c001ac04:	90                   	nop
c001ac05:	83 c4 0c             	add    esp,0xc
c001ac08:	c3                   	ret    
c001ac09:	90                   	nop

c001ac0a <SATA::access(unsigned long long, int, void*, bool)>:
c001ac0a:	55                   	push   ebp
c001ac0b:	57                   	push   edi
c001ac0c:	56                   	push   esi
c001ac0d:	53                   	push   ebx
c001ac0e:	83 ec 2c             	sub    esp,0x2c
c001ac11:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ac15:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ac19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac1d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ac25:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ac2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac2e:	7e 10                	jle    c001ac40 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ac30:	83 ec 0c             	sub    esp,0xc
c001ac33:	68 24 f4 01 c0       	push   0xc001f424
c001ac38:	e8 86 5a ff ff       	call   c00106c3 <KePanic(char const*)>
c001ac3d:	83 c4 10             	add    esp,0x10
c001ac40:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ac46:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ac4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ac52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac56:	89 d0                	mov    eax,edx
c001ac58:	c1 e0 07             	shl    eax,0x7
c001ac5b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac5f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ac69:	51                   	push   ecx
c001ac6a:	8d 42 02             	lea    eax,[edx+0x2]
c001ac6d:	51                   	push   ecx
c001ac6e:	c1 e0 07             	shl    eax,0x7
c001ac71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac75:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ac79:	50                   	push   eax
c001ac7a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ac80:	e8 e7 ef ff ff       	call   c0019c6c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ac85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac89:	83 c4 10             	add    esp,0x10
c001ac8c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ac91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac95:	0f 84 4f 01 00 00    	je     c001adea <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ac9b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac9f:	c1 e0 09             	shl    eax,0x9
c001aca2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001aca7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acab:	74 0e                	je     c001acbb <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001acad:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001acb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001acb7:	89 c1                	mov    ecx,eax
c001acb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001acbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001acbf:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001acc5:	8d 42 02             	lea    eax,[edx+0x2]
c001acc8:	c1 e0 07             	shl    eax,0x7
c001accb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001accf:	8b 00                	mov    eax,DWORD PTR [eax]
c001acd1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001acd7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001acdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ace1:	c1 e1 05             	shl    ecx,0x5
c001ace4:	01 c8                	add    eax,ecx
c001ace6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001acea:	83 e1 01             	and    ecx,0x1
c001aced:	89 ce                	mov    esi,ecx
c001acef:	8a 08                	mov    cl,BYTE PTR [eax]
c001acf1:	c1 e6 06             	shl    esi,0x6
c001acf4:	83 e1 bf             	and    ecx,0xffffffbf
c001acf7:	09 f1                	or     ecx,esi
c001acf9:	88 08                	mov    BYTE PTR [eax],cl
c001acfb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001acfd:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ad03:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ad09:	89 08                	mov    DWORD PTR [eax],ecx
c001ad0b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ad11:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ad17:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ad1d:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ad20:	50                   	push   eax
c001ad21:	68 90 00 00 00       	push   0x90
c001ad26:	6a 00                	push   0x0
c001ad28:	56                   	push   esi
c001ad29:	e8 c2 57 fe ff       	call   c00004f0 <memset>
c001ad2e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ad34:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ad38:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ad3e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ad42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad46:	83 c4 10             	add    esp,0x10
c001ad49:	48                   	dec    eax
c001ad4a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ad4f:	89 c1                	mov    ecx,eax
c001ad51:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ad57:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ad5c:	09 c8                	or     eax,ecx
c001ad5e:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ad64:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ad67:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ad6e:	66 25 00 7f          	and    ax,0x7f00
c001ad72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad76:	66 0d 27 80          	or     ax,0x8027
c001ad7a:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ad7f:	66 89 06             	mov    WORD PTR [esi],ax
c001ad82:	19 c0                	sbb    eax,eax
c001ad84:	83 e0 f0             	and    eax,0xfffffff0
c001ad87:	83 c0 35             	add    eax,0x35
c001ad8a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ad8d:	89 e8                	mov    eax,ebp
c001ad8f:	c1 e8 10             	shr    eax,0x10
c001ad92:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ad95:	89 e8                	mov    eax,ebp
c001ad97:	c1 e8 18             	shr    eax,0x18
c001ad9a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ad9d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ada1:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ada4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ada8:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001adab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001adaf:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001adb3:	89 d6                	mov    esi,edx
c001adb5:	31 c0                	xor    eax,eax
c001adb7:	c1 e6 07             	shl    esi,0x7
c001adba:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001adbe:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001adc4:	80 e1 88             	and    cl,0x88
c001adc7:	74 0a                	je     c001add3 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001adc9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001adce:	74 0a                	je     c001adda <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001add0:	40                   	inc    eax
c001add1:	eb eb                	jmp    c001adbe <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001add3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001add8:	75 17                	jne    c001adf1 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001adda:	83 ec 0c             	sub    esp,0xc
c001addd:	68 5d f4 01 c0       	push   0xc001f45d
c001ade2:	e8 0d fd fe ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001ade7:	83 c4 10             	add    esp,0x10
c001adea:	b8 01 00 00 00       	mov    eax,0x1
c001adef:	eb 5d                	jmp    c001ae4e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001adf1:	b8 01 00 00 00       	mov    eax,0x1
c001adf6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001adfa:	c1 e2 07             	shl    edx,0x7
c001adfd:	d3 e0                	shl    eax,cl
c001adff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ae03:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ae09:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ae0f:	85 c8                	test   eax,ecx
c001ae11:	74 16                	je     c001ae29 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ae13:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ae19:	0f ba e1 1e          	bt     ecx,0x1e
c001ae1d:	73 ea                	jae    c001ae09 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ae1f:	83 ec 0c             	sub    esp,0xc
c001ae22:	68 6b f4 01 c0       	push   0xc001f46b
c001ae27:	eb b9                	jmp    c001ade2 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ae29:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ae2f:	0f ba e0 1e          	bt     eax,0x1e
c001ae33:	72 b5                	jb     c001adea <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ae35:	31 c0                	xor    eax,eax
c001ae37:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ae3c:	75 10                	jne    c001ae4e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae3e:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ae44:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ae48:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae4e:	83 c4 2c             	add    esp,0x2c
c001ae51:	5b                   	pop    ebx
c001ae52:	5e                   	pop    esi
c001ae53:	5f                   	pop    edi
c001ae54:	5d                   	pop    ebp
c001ae55:	c3                   	ret    

c001ae56 <SATA::read(unsigned long long, int, void*)>:
c001ae56:	57                   	push   edi
c001ae57:	b8 04 00 00 00       	mov    eax,0x4
c001ae5c:	56                   	push   esi
c001ae5d:	53                   	push   ebx
c001ae5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae62:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae66:	8d 7a ff             	lea    edi,[edx-0x1]
c001ae69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae6d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ae71:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ae77:	77 25                	ja     c001ae9e <SATA::read(unsigned long long, int, void*)+0x48>
c001ae79:	b8 06 00 00 00       	mov    eax,0x6
c001ae7e:	85 f6                	test   esi,esi
c001ae80:	74 1c                	je     c001ae9e <SATA::read(unsigned long long, int, void*)+0x48>
c001ae82:	50                   	push   eax
c001ae83:	50                   	push   eax
c001ae84:	6a 00                	push   0x0
c001ae86:	56                   	push   esi
c001ae87:	52                   	push   edx
c001ae88:	53                   	push   ebx
c001ae89:	51                   	push   ecx
c001ae8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae8e:	e8 77 fd ff ff       	call   c001ac0a <SATA::access(unsigned long long, int, void*, bool)>
c001ae93:	83 c4 20             	add    esp,0x20
c001ae96:	85 c0                	test   eax,eax
c001ae98:	0f 95 c0             	setne  al
c001ae9b:	0f b6 c0             	movzx  eax,al
c001ae9e:	5b                   	pop    ebx
c001ae9f:	5e                   	pop    esi
c001aea0:	5f                   	pop    edi
c001aea1:	c3                   	ret    

c001aea2 <SATA::write(unsigned long long, int, void*)>:
c001aea2:	55                   	push   ebp
c001aea3:	b8 04 00 00 00       	mov    eax,0x4
c001aea8:	57                   	push   edi
c001aea9:	56                   	push   esi
c001aeaa:	53                   	push   ebx
c001aeab:	83 ec 0c             	sub    esp,0xc
c001aeae:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aeb2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aeb6:	8d 73 ff             	lea    esi,[ebx-0x1]
c001aeb9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001aebd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001aec1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001aec7:	77 3d                	ja     c001af06 <SATA::write(unsigned long long, int, void*)+0x64>
c001aec9:	b8 06 00 00 00       	mov    eax,0x6
c001aece:	85 ed                	test   ebp,ebp
c001aed0:	74 34                	je     c001af06 <SATA::write(unsigned long long, int, void*)+0x64>
c001aed2:	c1 e3 09             	shl    ebx,0x9
c001aed5:	01 eb                	add    ebx,ebp
c001aed7:	89 d6                	mov    esi,edx
c001aed9:	89 cf                	mov    edi,ecx
c001aedb:	83 c6 01             	add    esi,0x1
c001aede:	83 d7 00             	adc    edi,0x0
c001aee1:	50                   	push   eax
c001aee2:	50                   	push   eax
c001aee3:	6a 01                	push   0x1
c001aee5:	55                   	push   ebp
c001aee6:	81 c5 00 02 00 00    	add    ebp,0x200
c001aeec:	6a 01                	push   0x1
c001aeee:	51                   	push   ecx
c001aeef:	52                   	push   edx
c001aef0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aef4:	e8 11 fd ff ff       	call   c001ac0a <SATA::access(unsigned long long, int, void*, bool)>
c001aef9:	83 c4 20             	add    esp,0x20
c001aefc:	89 f2                	mov    edx,esi
c001aefe:	89 f9                	mov    ecx,edi
c001af00:	39 dd                	cmp    ebp,ebx
c001af02:	75 d3                	jne    c001aed7 <SATA::write(unsigned long long, int, void*)+0x35>
c001af04:	31 c0                	xor    eax,eax
c001af06:	83 c4 0c             	add    esp,0xc
c001af09:	5b                   	pop    ebx
c001af0a:	5e                   	pop    esi
c001af0b:	5f                   	pop    edi
c001af0c:	5d                   	pop    ebp
c001af0d:	c3                   	ret    

c001af0e <SATAPI::write(unsigned long long, int, void*)>:
c001af0e:	b8 03 00 00 00       	mov    eax,0x3
c001af13:	c3                   	ret    

c001af14 <SATAPI::close(int, int, void*)>:
c001af14:	83 ec 0c             	sub    esp,0xc
c001af17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af1b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001af21:	85 c0                	test   eax,eax
c001af23:	74 0c                	je     c001af31 <SATAPI::close(int, int, void*)+0x1d>
c001af25:	83 ec 0c             	sub    esp,0xc
c001af28:	8b 10                	mov    edx,DWORD PTR [eax]
c001af2a:	50                   	push   eax
c001af2b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001af2e:	83 c4 10             	add    esp,0x10
c001af31:	31 c0                	xor    eax,eax
c001af33:	83 c4 0c             	add    esp,0xc
c001af36:	c3                   	ret    
c001af37:	90                   	nop

c001af38 <SATAPI::SATAPI()>:
c001af38:	83 ec 0c             	sub    esp,0xc
c001af3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af3f:	83 ec 04             	sub    esp,0x4
c001af42:	68 00 08 00 00       	push   0x800
c001af47:	68 b4 f4 01 c0       	push   0xc001f4b4
c001af4c:	50                   	push   eax
c001af4d:	e8 b0 13 ff ff       	call   c000c302 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001af52:	83 c4 10             	add    esp,0x10
c001af55:	ba 14 f6 01 c0       	mov    edx,0xc001f614
c001af5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af5e:	89 10                	mov    DWORD PTR [eax],edx
c001af60:	90                   	nop
c001af61:	83 c4 0c             	add    esp,0xc
c001af64:	c3                   	ret    
c001af65:	90                   	nop

c001af66 <SATAPI::diskRemoved()>:
c001af66:	c3                   	ret    
c001af67:	90                   	nop

c001af68 <SATAPI::diskInserted()>:
c001af68:	83 ec 18             	sub    esp,0x18
c001af6b:	68 c0 f4 01 c0       	push   0xc001f4c0
c001af70:	e8 7f fb fe ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001af75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af79:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001af80:	83 c4 1c             	add    esp,0x1c
c001af83:	c3                   	ret    

c001af84 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001af84:	55                   	push   ebp
c001af85:	57                   	push   edi
c001af86:	56                   	push   esi
c001af87:	53                   	push   ebx
c001af88:	83 ec 38             	sub    esp,0x38
c001af8b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001af8f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001af93:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001af97:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af9b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001af9f:	68 d8 f4 01 c0       	push   0xc001f4d8
c001afa4:	e8 4b fb fe ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001afa9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001afaf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001afb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afb9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001afbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afc3:	c1 e0 07             	shl    eax,0x7
c001afc6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001afca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001afce:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001afd8:	58                   	pop    eax
c001afd9:	5a                   	pop    edx
c001afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afde:	8d 58 02             	lea    ebx,[eax+0x2]
c001afe1:	c1 e3 07             	shl    ebx,0x7
c001afe4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001afe8:	53                   	push   ebx
c001afe9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001afef:	e8 78 ec ff ff       	call   c0019c6c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aff4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aff8:	83 c4 10             	add    esp,0x10
c001affb:	b8 01 00 00 00       	mov    eax,0x1
c001b000:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b005:	0f 84 4c 02 00 00    	je     c001b257 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b00b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b011:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b013:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b019:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b01f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b023:	c1 e1 05             	shl    ecx,0x5
c001b026:	01 c8                	add    eax,ecx
c001b028:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b02a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b030:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b036:	89 08                	mov    DWORD PTR [eax],ecx
c001b038:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b03e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b044:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b04a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b04d:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b050:	50                   	push   eax
c001b051:	68 90 00 00 00       	push   0x90
c001b056:	6a 00                	push   0x0
c001b058:	53                   	push   ebx
c001b059:	e8 92 54 fe ff       	call   c00004f0 <memset>
c001b05e:	b9 0c 00 00 00       	mov    ecx,0xc
c001b063:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b067:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b069:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b06f:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b073:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b079:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b07d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b081:	48                   	dec    eax
c001b082:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b087:	89 c1                	mov    ecx,eax
c001b089:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b08f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b094:	09 c8                	or     eax,ecx
c001b096:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b09c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b09f:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b0a6:	66 25 00 7f          	and    ax,0x7f00
c001b0aa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b0ae:	66 0d 27 80          	or     ax,0x8027
c001b0b2:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b0b6:	66 89 03             	mov    WORD PTR [ebx],ax
c001b0b9:	89 d0                	mov    eax,edx
c001b0bb:	c1 ea 18             	shr    edx,0x18
c001b0be:	c1 e8 10             	shr    eax,0x10
c001b0c1:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b0c4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b0c7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b0cb:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b0ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b0d2:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b0d5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b0d9:	83 c4 10             	add    esp,0x10
c001b0dc:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b0e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0e4:	31 c0                	xor    eax,eax
c001b0e6:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b0ec:	80 e1 88             	and    cl,0x88
c001b0ef:	74 0a                	je     c001b0fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b0f1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0f6:	74 0a                	je     c001b102 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b0f8:	40                   	inc    eax
c001b0f9:	eb eb                	jmp    c001b0e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b0fb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b100:	75 16                	jne    c001b118 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001b102:	83 ec 0c             	sub    esp,0xc
c001b105:	68 f2 f4 01 c0       	push   0xc001f4f2
c001b10a:	e8 e5 f9 fe ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001b10f:	5f                   	pop    edi
c001b110:	5d                   	pop    ebp
c001b111:	68 07 f5 01 c0       	push   0xc001f507
c001b116:	eb 4f                	jmp    c001b167 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b118:	be 01 00 00 00       	mov    esi,0x1
c001b11d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b121:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b125:	d3 e6                	shl    esi,cl
c001b127:	c1 e7 07             	shl    edi,0x7
c001b12a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b130:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b135:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b139:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b13f:	85 c6                	test   esi,eax
c001b141:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b147:	0f 84 cb 00 00 00    	je     c001b218 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001b14d:	0f ba e0 1e          	bt     eax,0x1e
c001b151:	73 2c                	jae    c001b17f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001b153:	83 ec 0c             	sub    esp,0xc
c001b156:	68 19 f5 01 c0       	push   0xc001f519
c001b15b:	e8 94 f9 fe ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001b160:	5b                   	pop    ebx
c001b161:	5e                   	pop    esi
c001b162:	68 2c f5 01 c0       	push   0xc001f52c
c001b167:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c001b16d:	e8 64 dc fe ff       	call   c0008dd6 <VgaText::puts(char const*)>
c001b172:	83 c4 10             	add    esp,0x10
c001b175:	b8 01 00 00 00       	mov    eax,0x1
c001b17a:	e9 d8 00 00 00       	jmp    c001b257 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b17f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b185:	83 f8 0d             	cmp    eax,0xd
c001b188:	77 0a                	ja     c001b194 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001b18a:	83 ec 0c             	sub    esp,0xc
c001b18d:	68 c8 00 00 00       	push   0xc8
c001b192:	eb 28                	jmp    c001b1bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b194:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b19a:	83 f8 0d             	cmp    eax,0xd
c001b19d:	77 0a                	ja     c001b1a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001b19f:	83 ec 0c             	sub    esp,0xc
c001b1a2:	68 58 02 00 00       	push   0x258
c001b1a7:	eb 13                	jmp    c001b1bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b1a9:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b1af:	83 f8 06             	cmp    eax,0x6
c001b1b2:	77 10                	ja     c001b1c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001b1b4:	83 ec 0c             	sub    esp,0xc
c001b1b7:	68 dc 05 00 00       	push   0x5dc
c001b1bc:	e8 5b 8a ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c001b1c1:	83 c4 10             	add    esp,0x10
c001b1c4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b1c8:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b1cb:	75 06                	jne    c001b1d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001b1cd:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b1d1:	74 15                	je     c001b1e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b1d3:	83 fb 06             	cmp    ebx,0x6
c001b1d6:	77 10                	ja     c001b1e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b1d8:	83 ec 0c             	sub    esp,0xc
c001b1db:	68 c4 09 00 00       	push   0x9c4
c001b1e0:	e8 37 8a ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c001b1e5:	83 c4 10             	add    esp,0x10
c001b1e8:	43                   	inc    ebx
c001b1e9:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b1ef:	0f 85 44 ff ff ff    	jne    c001b139 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001b1f5:	51                   	push   ecx
c001b1f6:	51                   	push   ecx
c001b1f7:	68 3d f5 01 c0       	push   0xc001f53d
c001b1fc:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c001b202:	e8 cf db fe ff       	call   c0008dd6 <VgaText::puts(char const*)>
c001b207:	c7 04 24 4d f5 01 c0 	mov    DWORD PTR [esp],0xc001f54d
c001b20e:	e8 e1 f8 fe ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001b213:	e9 5a ff ff ff       	jmp    c001b172 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001b218:	0f ba e0 1e          	bt     eax,0x1e
c001b21c:	73 19                	jae    c001b237 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001b21e:	83 ec 0c             	sub    esp,0xc
c001b221:	68 61 f5 01 c0       	push   0xc001f561
c001b226:	e8 c9 f8 fe ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001b22b:	58                   	pop    eax
c001b22c:	5a                   	pop    edx
c001b22d:	68 76 f5 01 c0       	push   0xc001f576
c001b232:	e9 30 ff ff ff       	jmp    c001b167 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b237:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b23c:	74 17                	je     c001b255 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b23e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b243:	74 10                	je     c001b255 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b245:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b24b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b24f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b253:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b255:	31 c0                	xor    eax,eax
c001b257:	83 c4 2c             	add    esp,0x2c
c001b25a:	5b                   	pop    ebx
c001b25b:	5e                   	pop    esi
c001b25c:	5f                   	pop    edi
c001b25d:	5d                   	pop    ebp
c001b25e:	c3                   	ret    
c001b25f:	90                   	nop

c001b260 <SATAPI::eject()>:
c001b260:	57                   	push   edi
c001b261:	b9 03 00 00 00       	mov    ecx,0x3
c001b266:	83 ec 18             	sub    esp,0x18
c001b269:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b26d:	fc                   	cld    
c001b26e:	31 c0                	xor    eax,eax
c001b270:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b272:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b277:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b27c:	50                   	push   eax
c001b27d:	6a 00                	push   0x0
c001b27f:	6a 00                	push   0x0
c001b281:	6a 00                	push   0x0
c001b283:	6a 00                	push   0x0
c001b285:	6a 02                	push   0x2
c001b287:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b28b:	50                   	push   eax
c001b28c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b290:	e8 ef fc ff ff       	call   c001af84 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b295:	31 c0                	xor    eax,eax
c001b297:	83 c4 38             	add    esp,0x38
c001b29a:	5f                   	pop    edi
c001b29b:	c3                   	ret    

c001b29c <SATAPI::detectMedia()>:
c001b29c:	53                   	push   ebx
c001b29d:	83 ec 14             	sub    esp,0x14
c001b2a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2a4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b2aa:	e8 f9 27 ff ff       	call   c000daa8 <VCache::writeWriteBuffer()>
c001b2af:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b2b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b2b9:	83 c4 18             	add    esp,0x18
c001b2bc:	5b                   	pop    ebx
c001b2bd:	e9 d6 27 ff ff       	jmp    c000da98 <VCache::invalidateReadBuffer()>

c001b2c2 <SATAPI::open(int, int, void*)>:
c001b2c2:	56                   	push   esi
c001b2c3:	53                   	push   ebx
c001b2c4:	51                   	push   ecx
c001b2c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2cd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b2d7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b2dd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b2e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2eb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b2f5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b2fb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b302:	e8 2e ce fe ff       	call   c0008135 <Phys::allocatePage()>
c001b307:	89 c6                	mov    esi,eax
c001b309:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b30f:	81 c6 00 10 00 00    	add    esi,0x1000
c001b315:	e8 1b ce fe ff       	call   c0008135 <Phys::allocatePage()>
c001b31a:	39 c6                	cmp    esi,eax
c001b31c:	74 10                	je     c001b32e <SATAPI::open(int, int, void*)+0x6c>
c001b31e:	83 ec 0c             	sub    esp,0xc
c001b321:	68 89 f5 01 c0       	push   0xc001f589
c001b326:	e8 98 53 ff ff       	call   c00106c3 <KePanic(char const*)>
c001b32b:	83 c4 10             	add    esp,0x10
c001b32e:	83 ec 0c             	sub    esp,0xc
c001b331:	6a 02                	push   0x2
c001b333:	e8 69 e5 fe ff       	call   c00098a1 <Virt::allocateKernelVirtualPages(int)>
c001b338:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b33e:	6a 03                	push   0x3
c001b340:	50                   	push   eax
c001b341:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b347:	ff 35 90 0a 02 c0    	push   DWORD PTR ds:0xc0020a90
c001b34d:	e8 e4 eb fe ff       	call   c0009f36 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b352:	83 c4 14             	add    esp,0x14
c001b355:	68 74 01 00 00       	push   0x174
c001b35a:	e8 fe ca fe ff       	call   c0007e5d <malloc>
c001b35f:	83 c4 0c             	add    esp,0xc
c001b362:	89 c6                	mov    esi,eax
c001b364:	6a 00                	push   0x0
c001b366:	68 ff ff ff 7f       	push   0x7fffffff
c001b36b:	6a 00                	push   0x0
c001b36d:	6a 00                	push   0x0
c001b36f:	53                   	push   ebx
c001b370:	68 9f f5 01 c0       	push   0xc001f59f
c001b375:	50                   	push   eax
c001b376:	e8 33 1c ff ff       	call   c000cfae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b37b:	83 c4 14             	add    esp,0x14
c001b37e:	56                   	push   esi
c001b37f:	e8 e0 1c ff ff       	call   c000d064 <LogicalDisk::assignDriveLetter()>
c001b384:	5a                   	pop    edx
c001b385:	0f be c0             	movsx  eax,al
c001b388:	59                   	pop    ecx
c001b389:	50                   	push   eax
c001b38a:	68 b8 f3 01 c0       	push   0xc001f3b8
c001b38f:	e8 60 f7 fe ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001b394:	58                   	pop    eax
c001b395:	5a                   	pop    edx
c001b396:	56                   	push   esi
c001b397:	53                   	push   ebx
c001b398:	e8 97 0b ff ff       	call   c000bf34 <Device::addChild(Device*)>
c001b39d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b3a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3a6:	e8 bf 0f ff ff       	call   c000c36a <PhysicalDisk::startCache()>
c001b3ab:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b3b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3b5:	e8 e2 fe ff ff       	call   c001b29c <SATAPI::detectMedia()>
c001b3ba:	83 c4 14             	add    esp,0x14
c001b3bd:	31 c0                	xor    eax,eax
c001b3bf:	5b                   	pop    ebx
c001b3c0:	5e                   	pop    esi
c001b3c1:	c3                   	ret    

c001b3c2 <SATAPI::read(unsigned long long, int, void*)>:
c001b3c2:	57                   	push   edi
c001b3c3:	56                   	push   esi
c001b3c4:	53                   	push   ebx
c001b3c5:	83 ec 3c             	sub    esp,0x3c
c001b3c8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b3cc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b3d0:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b3d4:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b3d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b3dc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b3e0:	68 ad f5 01 c0       	push   0xc001f5ad
c001b3e5:	e8 0a f7 fe ff       	call   c000aaf4 <Dbg::kprintf(char const*, ...)>
c001b3ea:	83 c4 10             	add    esp,0x10
c001b3ed:	83 fe 04             	cmp    esi,0x4
c001b3f0:	7e 10                	jle    c001b402 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b3f2:	83 ec 0c             	sub    esp,0xc
c001b3f5:	68 be f5 01 c0       	push   0xc001f5be
c001b3fa:	e8 c4 52 ff ff       	call   c00106c3 <KePanic(char const*)>
c001b3ff:	83 c4 10             	add    esp,0x10
c001b402:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b408:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b40e:	51                   	push   ecx
c001b40f:	50                   	push   eax
c001b410:	83 c0 02             	add    eax,0x2
c001b413:	c1 e0 07             	shl    eax,0x7
c001b416:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b41c:	50                   	push   eax
c001b41d:	52                   	push   edx
c001b41e:	e8 0d e9 ff ff       	call   c0019d30 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b423:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b427:	b9 03 00 00 00       	mov    ecx,0x3
c001b42c:	fc                   	cld    
c001b42d:	31 c0                	xor    eax,eax
c001b42f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b431:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b436:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b43b:	83 c4 0c             	add    esp,0xc
c001b43e:	6a 00                	push   0x0
c001b440:	6a 00                	push   0x0
c001b442:	6a 00                	push   0x0
c001b444:	6a 00                	push   0x0
c001b446:	6a 02                	push   0x2
c001b448:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b44c:	50                   	push   eax
c001b44d:	53                   	push   ebx
c001b44e:	e8 31 fb ff ff       	call   c001af84 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b453:	83 c4 20             	add    esp,0x20
c001b456:	85 c0                	test   eax,eax
c001b458:	74 27                	je     c001b481 <SATAPI::read(unsigned long long, int, void*)+0xbf>
c001b45a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b45e:	50                   	push   eax
c001b45f:	50                   	push   eax
c001b460:	68 e8 f5 01 c0       	push   0xc001f5e8
c001b465:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c001b46b:	e8 66 d9 fe ff       	call   c0008dd6 <VgaText::puts(char const*)>
c001b470:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b473:	e8 24 fe ff ff       	call   c001b29c <SATAPI::detectMedia()>
c001b478:	58                   	pop    eax
c001b479:	5a                   	pop    edx
c001b47a:	68 f0 f5 01 c0       	push   0xc001f5f0
c001b47f:	eb 69                	jmp    c001b4ea <SATAPI::read(unsigned long long, int, void*)+0x128>
c001b481:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b485:	b9 03 00 00 00       	mov    ecx,0x3
c001b48a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b48c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b490:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b495:	0f c8                	bswap  eax
c001b497:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b49b:	89 f0                	mov    eax,esi
c001b49d:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b4a1:	57                   	push   edi
c001b4a2:	56                   	push   esi
c001b4a3:	c1 e6 0b             	shl    esi,0xb
c001b4a6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b4aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4b2:	56                   	push   esi
c001b4b3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b4b7:	50                   	push   eax
c001b4b8:	53                   	push   ebx
c001b4b9:	e8 c6 fa ff ff       	call   c001af84 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b4be:	83 c4 20             	add    esp,0x20
c001b4c1:	85 c0                	test   eax,eax
c001b4c3:	74 37                	je     c001b4fc <SATAPI::read(unsigned long long, int, void*)+0x13a>
c001b4c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4c9:	50                   	push   eax
c001b4ca:	50                   	push   eax
c001b4cb:	68 fa f5 01 c0       	push   0xc001f5fa
c001b4d0:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c001b4d6:	e8 fb d8 fe ff       	call   c0008dd6 <VgaText::puts(char const*)>
c001b4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4de:	e8 b9 fd ff ff       	call   c001b29c <SATAPI::detectMedia()>
c001b4e3:	5a                   	pop    edx
c001b4e4:	59                   	pop    ecx
c001b4e5:	68 02 f6 01 c0       	push   0xc001f602
c001b4ea:	ff 35 e4 09 02 c0    	push   DWORD PTR ds:0xc00209e4
c001b4f0:	e8 e1 d8 fe ff       	call   c0008dd6 <VgaText::puts(char const*)>
c001b4f5:	83 c4 10             	add    esp,0x10
c001b4f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4fc:	83 c4 30             	add    esp,0x30
c001b4ff:	5b                   	pop    ebx
c001b500:	5e                   	pop    esi
c001b501:	5f                   	pop    edi
c001b502:	c3                   	ret    
c001b503:	90                   	nop

c001b504 <IOAPIC::close(int, int, void*)>:
c001b504:	b8 00 00 00 00       	mov    eax,0x0
c001b509:	c3                   	ret    

c001b50a <apicGetBase()>:
c001b50a:	55                   	push   ebp
c001b50b:	89 e5                	mov    ebp,esp
c001b50d:	83 ec 18             	sub    esp,0x18
c001b510:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c001b515:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b51b:	83 e0 08             	and    eax,0x8
c001b51e:	84 c0                	test   al,al
c001b520:	75 07                	jne    c001b529 <apicGetBase()+0x1f>
c001b522:	b8 00 00 00 00       	mov    eax,0x0
c001b527:	eb 21                	jmp    c001b54a <apicGetBase()+0x40>
c001b529:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c001b52e:	83 ec 08             	sub    esp,0x8
c001b531:	6a 1b                	push   0x1b
c001b533:	50                   	push   eax
c001b534:	e8 5d bf fe ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c001b539:	83 c4 10             	add    esp,0x10
c001b53c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b53f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b542:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b545:	25 00 00 ff ff       	and    eax,0xffff0000
c001b54a:	c9                   	leave  
c001b54b:	c3                   	ret    

c001b54c <IOAPIC::IOAPIC()>:
c001b54c:	83 ec 0c             	sub    esp,0xc
c001b54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b553:	83 ec 08             	sub    esp,0x8
c001b556:	68 44 f6 01 c0       	push   0xc001f644
c001b55b:	50                   	push   eax
c001b55c:	e8 6b 0b ff ff       	call   c000c0cc <Device::Device(char const*)>
c001b561:	83 c4 10             	add    esp,0x10
c001b564:	ba 54 f6 01 c0       	mov    edx,0xc001f654
c001b569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b56d:	89 10                	mov    DWORD PTR [eax],edx
c001b56f:	90                   	nop
c001b570:	83 c4 0c             	add    esp,0xc
c001b573:	c3                   	ret    

c001b574 <apicOpen()>:
c001b574:	55                   	push   ebp
c001b575:	89 e5                	mov    ebp,esp
c001b577:	53                   	push   ebx
c001b578:	83 ec 34             	sub    esp,0x34
c001b57b:	a0 80 48 02 c0       	mov    al,ds:0xc0024880
c001b580:	83 f0 01             	xor    eax,0x1
c001b583:	84 c0                	test   al,al
c001b585:	0f 84 9d 00 00 00    	je     c001b628 <apicOpen()+0xb4>
c001b58b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b58f:	a0 60 32 02 c0       	mov    al,ds:0xc0023260
c001b594:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b597:	0f 83 84 00 00 00    	jae    c001b621 <apicOpen()+0xad>
c001b59d:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b5a4:	83 ec 0c             	sub    esp,0xc
c001b5a7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b5aa:	e8 ae c8 fe ff       	call   c0007e5d <malloc>
c001b5af:	83 c4 10             	add    esp,0x10
c001b5b2:	89 c3                	mov    ebx,eax
c001b5b4:	83 ec 0c             	sub    esp,0xc
c001b5b7:	53                   	push   ebx
c001b5b8:	e8 8f ff ff ff       	call   c001b54c <IOAPIC::IOAPIC()>
c001b5bd:	83 c4 10             	add    esp,0x10
c001b5c0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b5c3:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b5c6:	25 ff 00 00 00       	and    eax,0xff
c001b5cb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b5ce:	89 14 85 60 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7a0],edx
c001b5d5:	a1 40 48 02 c0       	mov    eax,ds:0xc0024840
c001b5da:	40                   	inc    eax
c001b5db:	a3 40 48 02 c0       	mov    ds:0xc0024840,eax
c001b5e0:	a1 98 09 02 c0       	mov    eax,ds:0xc0020998
c001b5e5:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b5eb:	83 ec 08             	sub    esp,0x8
c001b5ee:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b5f1:	50                   	push   eax
c001b5f2:	e8 3d 09 ff ff       	call   c000bf34 <Device::addChild(Device*)>
c001b5f7:	83 c4 10             	add    esp,0x10
c001b5fa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b5fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5ff:	83 c0 08             	add    eax,0x8
c001b602:	8b 10                	mov    edx,DWORD PTR [eax]
c001b604:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b607:	25 ff 00 00 00       	and    eax,0xff
c001b60c:	6a 00                	push   0x0
c001b60e:	6a 00                	push   0x0
c001b610:	50                   	push   eax
c001b611:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b614:	ff d2                	call   edx
c001b616:	83 c4 10             	add    esp,0x10
c001b619:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b61c:	e9 6e ff ff ff       	jmp    c001b58f <apicOpen()+0x1b>
c001b621:	c6 05 80 48 02 c0 01 	mov    BYTE PTR ds:0xc0024880,0x1
c001b628:	e8 dd fe ff ff       	call   c001b50a <apicGetBase()>
c001b62d:	05 f0 00 00 00       	add    eax,0xf0
c001b632:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b635:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b638:	8b 00                	mov    eax,DWORD PTR [eax]
c001b63a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b63d:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b644:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b64b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b64e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b651:	89 10                	mov    DWORD PTR [eax],edx
c001b653:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b65a:	a1 b0 31 02 c0       	mov    eax,ds:0xc00231b0
c001b65f:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b662:	7d 70                	jge    c001b6d4 <apicOpen()+0x160>
c001b664:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b667:	8b 04 85 c0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce40]
c001b66e:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b671:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b674:	8b 04 85 c0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce40]
c001b67b:	c1 e8 08             	shr    eax,0x8
c001b67e:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b682:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b685:	8b 04 85 c0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce40]
c001b68c:	c1 e8 18             	shr    eax,0x18
c001b68f:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b692:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b696:	75 37                	jne    c001b6cf <apicOpen()+0x15b>
c001b698:	e8 6d fe ff ff       	call   c001b50a <apicGetBase()>
c001b69d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b6a1:	75 07                	jne    c001b6aa <apicOpen()+0x136>
c001b6a3:	ba 60 03 00 00       	mov    edx,0x360
c001b6a8:	eb 05                	jmp    c001b6af <apicOpen()+0x13b>
c001b6aa:	ba 50 03 00 00       	mov    edx,0x350
c001b6af:	01 d0                	add    eax,edx
c001b6b1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b6b4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6b9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b6bc:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b6c3:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b6c7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6ca:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b6cd:	89 10                	mov    DWORD PTR [eax],edx
c001b6cf:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b6d2:	eb 86                	jmp    c001b65a <apicOpen()+0xe6>
c001b6d4:	90                   	nop
c001b6d5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b6d8:	c9                   	leave  
c001b6d9:	c3                   	ret    

c001b6da <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b6da:	55                   	push   ebp
c001b6db:	89 e5                	mov    ebp,esp
c001b6dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b6e6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b6e9:	72 1d                	jb     c001b708 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b6eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ee:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b6f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6f7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b6fd:	01 d0                	add    eax,edx
c001b6ff:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b702:	73 04                	jae    c001b708 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b704:	b0 01                	mov    al,0x1
c001b706:	eb 02                	jmp    c001b70a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b708:	b0 00                	mov    al,0x0
c001b70a:	5d                   	pop    ebp
c001b70b:	c3                   	ret    

c001b70c <IOAPIC::read(int)>:
c001b70c:	55                   	push   ebp
c001b70d:	89 e5                	mov    ebp,esp
c001b70f:	83 ec 10             	sub    esp,0x10
c001b712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b715:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b71b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b71e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b721:	31 d2                	xor    edx,edx
c001b723:	88 c2                	mov    dl,al
c001b725:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b728:	89 10                	mov    DWORD PTR [eax],edx
c001b72a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b72d:	83 c0 10             	add    eax,0x10
c001b730:	8b 00                	mov    eax,DWORD PTR [eax]
c001b732:	c9                   	leave  
c001b733:	c3                   	ret    

c001b734 <IOAPIC::open(int, int, void*)>:
c001b734:	55                   	push   ebp
c001b735:	89 e5                	mov    ebp,esp
c001b737:	57                   	push   edi
c001b738:	56                   	push   esi
c001b739:	53                   	push   ebx
c001b73a:	83 ec 04             	sub    esp,0x4
c001b73d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b740:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b743:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b74c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b752:	8b 14 85 a0 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd60]
c001b759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b75c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b765:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b76b:	8b 14 85 20 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcce0]
c001b772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b775:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b77b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b77e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b787:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b78d:	89 c6                	mov    esi,eax
c001b78f:	81 e6 ff 00 00 00    	and    esi,0xff
c001b795:	89 d0                	mov    eax,edx
c001b797:	ba 00 00 00 00       	mov    edx,0x0
c001b79c:	89 c7                	mov    edi,eax
c001b79e:	83 e7 ff             	and    edi,0xffffffff
c001b7a1:	89 f9                	mov    ecx,edi
c001b7a3:	89 d0                	mov    eax,edx
c001b7a5:	25 ff 00 00 00       	and    eax,0xff
c001b7aa:	89 c3                	mov    ebx,eax
c001b7ac:	89 c8                	mov    eax,ecx
c001b7ae:	89 da                	mov    edx,ebx
c001b7b0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7b3:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b7b6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b7ba:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b7be:	83 e0 00             	and    eax,0x0
c001b7c1:	09 d0                	or     eax,edx
c001b7c3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b7c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7ca:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b7d0:	8d 50 01             	lea    edx,[eax+0x1]
c001b7d3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7d6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b7dc:	31 d2                	xor    edx,edx
c001b7de:	88 c2                	mov    dl,al
c001b7e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7e3:	83 c2 08             	add    edx,0x8
c001b7e6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b7ea:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b7f0:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b7f6:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b7fa:	6a 01                	push   0x1
c001b7fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7ff:	e8 08 ff ff ff       	call   c001b70c <IOAPIC::read(int)>
c001b804:	83 c4 08             	add    esp,0x8
c001b807:	c1 f8 10             	sar    eax,0x10
c001b80a:	25 ff 00 00 00       	and    eax,0xff
c001b80f:	8d 50 01             	lea    edx,[eax+0x1]
c001b812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b815:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b81b:	b8 00 00 00 00       	mov    eax,0x0
c001b820:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b823:	5b                   	pop    ebx
c001b824:	5e                   	pop    esi
c001b825:	5f                   	pop    edi
c001b826:	5d                   	pop    ebp
c001b827:	c3                   	ret    

c001b828 <IOAPIC::write(int, int)>:
c001b828:	55                   	push   ebp
c001b829:	89 e5                	mov    ebp,esp
c001b82b:	83 ec 10             	sub    esp,0x10
c001b82e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b831:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b837:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b83a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b83d:	31 d2                	xor    edx,edx
c001b83f:	88 c2                	mov    dl,al
c001b841:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b844:	89 10                	mov    DWORD PTR [eax],edx
c001b846:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b849:	8d 50 10             	lea    edx,[eax+0x10]
c001b84c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b84f:	89 02                	mov    DWORD PTR [edx],eax
c001b851:	90                   	nop
c001b852:	c9                   	leave  
c001b853:	c3                   	ret    

c001b854 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b854:	55                   	push   ebp
c001b855:	89 e5                	mov    ebp,esp
c001b857:	53                   	push   ebx
c001b858:	83 ec 2c             	sub    esp,0x2c
c001b85b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b85e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b861:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b864:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b867:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b86a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b86d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b870:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b873:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b876:	88 d8                	mov    al,bl
c001b878:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b87b:	88 c8                	mov    al,cl
c001b87d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b880:	88 d0                	mov    al,dl
c001b882:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b885:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b888:	25 ff 00 00 00       	and    eax,0xff
c001b88d:	83 c0 08             	add    eax,0x8
c001b890:	01 c0                	add    eax,eax
c001b892:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b895:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b898:	25 ff 00 00 00       	and    eax,0xff
c001b89d:	83 c0 08             	add    eax,0x8
c001b8a0:	01 c0                	add    eax,eax
c001b8a2:	40                   	inc    eax
c001b8a3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b8a6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8a9:	50                   	push   eax
c001b8aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8ad:	e8 5a fe ff ff       	call   c001b70c <IOAPIC::read(int)>
c001b8b2:	83 c4 08             	add    esp,0x8
c001b8b5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b8b8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b8bf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b8c2:	c1 e0 18             	shl    eax,0x18
c001b8c5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b8c8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b8cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8ce:	52                   	push   edx
c001b8cf:	50                   	push   eax
c001b8d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8d3:	e8 50 ff ff ff       	call   c001b828 <IOAPIC::write(int, int)>
c001b8d8:	83 c4 0c             	add    esp,0xc
c001b8db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b8de:	50                   	push   eax
c001b8df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8e2:	e8 25 fe ff ff       	call   c001b70c <IOAPIC::read(int)>
c001b8e7:	83 c4 08             	add    esp,0x8
c001b8ea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b8ed:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b8f4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b8fb:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b902:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b906:	74 09                	je     c001b911 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b908:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b90f:	eb 07                	jmp    c001b918 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b911:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b918:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b91c:	74 09                	je     c001b927 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b91e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b925:	eb 07                	jmp    c001b92e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b927:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b92e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b935:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b938:	25 ff 00 00 00       	and    eax,0xff
c001b93d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b940:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b943:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b946:	52                   	push   edx
c001b947:	50                   	push   eax
c001b948:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b94b:	e8 d8 fe ff ff       	call   c001b828 <IOAPIC::write(int, int)>
c001b950:	83 c4 0c             	add    esp,0xc
c001b953:	90                   	nop
c001b954:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b957:	c9                   	leave  
c001b958:	c3                   	ret    
c001b959:	66 90                	xchg   ax,ax
c001b95b:	90                   	nop

c001b95c <APICTimer::close(int, int, void*)>:
c001b95c:	b8 00 00 00 00       	mov    eax,0x0
c001b961:	c3                   	ret    
c001b962:	66 90                	xchg   ax,ax

c001b964 <apicTimerHandler(regs*, void*)>:
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b96b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b96d:	b8 10 27 00 00       	mov    eax,0x2710
c001b972:	ba 00 00 00 00       	mov    edx,0x0
c001b977:	f7 f1                	div    ecx
c001b979:	83 ec 0c             	sub    esp,0xc
c001b97c:	50                   	push   eax
c001b97d:	e8 46 1e ff ff       	call   c000d7c8 <timerHandler(unsigned int)>
c001b982:	83 c4 10             	add    esp,0x10
c001b985:	90                   	nop
c001b986:	83 c4 0c             	add    esp,0xc
c001b989:	c3                   	ret    
c001b98a:	66 90                	xchg   ax,ax

c001b98c <APICTimer::open(int, int, void*)>:
c001b98c:	83 ec 0c             	sub    esp,0xc
c001b98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b993:	8b 00                	mov    eax,DWORD PTR [eax]
c001b995:	83 c0 24             	add    eax,0x24
c001b998:	8b 00                	mov    eax,DWORD PTR [eax]
c001b99a:	83 ec 08             	sub    esp,0x8
c001b99d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9a5:	ff d0                	call   eax
c001b9a7:	83 c4 10             	add    esp,0x10
c001b9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9b2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9c0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b9c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9ca:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b9d0:	83 ec 0c             	sub    esp,0xc
c001b9d3:	51                   	push   ecx
c001b9d4:	6a 01                	push   0x1
c001b9d6:	68 64 b9 01 c0       	push   0xc001b964
c001b9db:	52                   	push   edx
c001b9dc:	50                   	push   eax
c001b9dd:	e8 fe 04 ff ff       	call   c000bee0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9e2:	83 c4 20             	add    esp,0x20
c001b9e5:	89 c2                	mov    edx,eax
c001b9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9eb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b9f1:	b8 00 00 00 00       	mov    eax,0x0
c001b9f6:	83 c4 0c             	add    esp,0xc
c001b9f9:	c3                   	ret    
c001b9fa:	66 90                	xchg   ax,ax

c001b9fc <APICTimer::write(int)>:
c001b9fc:	83 ec 0c             	sub    esp,0xc
c001b9ff:	83 ec 0c             	sub    esp,0xc
c001ba02:	68 78 f6 01 c0       	push   0xc001f678
c001ba07:	e8 b7 4c ff ff       	call   c00106c3 <KePanic(char const*)>
c001ba0c:	83 c4 10             	add    esp,0x10
c001ba0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba17:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba1d:	90                   	nop
c001ba1e:	83 c4 0c             	add    esp,0xc
c001ba21:	c3                   	ret    
c001ba22:	66 90                	xchg   ax,ax

c001ba24 <APICTimer::APICTimer()>:
c001ba24:	83 ec 0c             	sub    esp,0xc
c001ba27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2b:	83 ec 08             	sub    esp,0x8
c001ba2e:	68 88 f6 01 c0       	push   0xc001f688
c001ba33:	50                   	push   eax
c001ba34:	e8 c3 1c ff ff       	call   c000d6fc <Timer::Timer(char const*)>
c001ba39:	83 c4 10             	add    esp,0x10
c001ba3c:	ba 9c f6 01 c0       	mov    edx,0xc001f69c
c001ba41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba45:	89 10                	mov    DWORD PTR [eax],edx
c001ba47:	90                   	nop
c001ba48:	83 c4 0c             	add    esp,0xc
c001ba4b:	c3                   	ret    

c001ba4c <PIT::write(int)>:
c001ba4c:	83 ec 10             	sub    esp,0x10
c001ba4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba57:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba61:	a3 84 48 02 c0       	mov    ds:0xc0024884,eax
c001ba66:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ba6b:	99                   	cdq    
c001ba6c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ba70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba74:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ba7b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ba80:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ba84:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ba89:	ee                   	out    dx,al
c001ba8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba8e:	25 ff 00 00 00       	and    eax,0xff
c001ba93:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ba9a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ba9e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001baa2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001baa7:	ee                   	out    dx,al
c001baa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baac:	c1 f8 08             	sar    eax,0x8
c001baaf:	25 ff 00 00 00       	and    eax,0xff
c001bab4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001babb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001babf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bac3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bac8:	ee                   	out    dx,al
c001bac9:	90                   	nop
c001baca:	83 c4 10             	add    esp,0x10
c001bacd:	c3                   	ret    
c001bace:	66 90                	xchg   ax,ax

c001bad0 <pitHandler(regs*, void*)>:
c001bad0:	83 ec 0c             	sub    esp,0xc
c001bad3:	8b 0d 84 48 02 c0    	mov    ecx,DWORD PTR ds:0xc0024884
c001bad9:	b8 10 27 00 00       	mov    eax,0x2710
c001bade:	99                   	cdq    
c001badf:	f7 f9                	idiv   ecx
c001bae1:	83 ec 0c             	sub    esp,0xc
c001bae4:	50                   	push   eax
c001bae5:	e8 de 1c ff ff       	call   c000d7c8 <timerHandler(unsigned int)>
c001baea:	83 c4 10             	add    esp,0x10
c001baed:	90                   	nop
c001baee:	83 c4 0c             	add    esp,0xc
c001baf1:	c3                   	ret    
c001baf2:	66 90                	xchg   ax,ax

c001baf4 <PIT::open(int, int, void*)>:
c001baf4:	83 ec 0c             	sub    esp,0xc
c001baf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bafb:	8b 00                	mov    eax,DWORD PTR [eax]
c001bafd:	83 c0 24             	add    eax,0x24
c001bb00:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb02:	83 ec 08             	sub    esp,0x8
c001bb05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb0d:	ff d0                	call   eax
c001bb0f:	83 c4 10             	add    esp,0x10
c001bb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb16:	83 ec 0c             	sub    esp,0xc
c001bb19:	6a 00                	push   0x0
c001bb1b:	6a 01                	push   0x1
c001bb1d:	68 d0 ba 01 c0       	push   0xc001bad0
c001bb22:	6a 00                	push   0x0
c001bb24:	50                   	push   eax
c001bb25:	e8 b6 03 ff ff       	call   c000bee0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb2a:	83 c4 20             	add    esp,0x20
c001bb2d:	89 c2                	mov    edx,eax
c001bb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb33:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bb39:	b8 00 00 00 00       	mov    eax,0x0
c001bb3e:	83 c4 0c             	add    esp,0xc
c001bb41:	c3                   	ret    
c001bb42:	66 90                	xchg   ax,ax

c001bb44 <PIT::close(int, int, void*)>:
c001bb44:	83 ec 0c             	sub    esp,0xc
c001bb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb59:	6a 01                	push   0x1
c001bb5b:	68 d0 ba 01 c0       	push   0xc001bad0
c001bb60:	6a 00                	push   0x0
c001bb62:	50                   	push   eax
c001bb63:	e8 ae 03 ff ff       	call   c000bf16 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bb68:	83 c4 10             	add    esp,0x10
c001bb6b:	b8 00 00 00 00       	mov    eax,0x0
c001bb70:	83 c4 0c             	add    esp,0xc
c001bb73:	c3                   	ret    

c001bb74 <PIT::PIT()>:
c001bb74:	83 ec 0c             	sub    esp,0xc
c001bb77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7b:	83 ec 08             	sub    esp,0x8
c001bb7e:	68 c4 f6 01 c0       	push   0xc001f6c4
c001bb83:	50                   	push   eax
c001bb84:	e8 73 1b ff ff       	call   c000d6fc <Timer::Timer(char const*)>
c001bb89:	83 c4 10             	add    esp,0x10
c001bb8c:	ba ec f6 01 c0       	mov    edx,0xc001f6ec
c001bb91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb95:	89 10                	mov    DWORD PTR [eax],edx
c001bb97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bba1:	31 d2                	xor    edx,edx
c001bba3:	88 c2                	mov    dl,al
c001bba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba9:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbba:	31 d2                	xor    edx,edx
c001bbbc:	88 c2                	mov    dl,al
c001bbbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bbc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbcb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbd1:	8d 50 01             	lea    edx,[eax+0x1]
c001bbd4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bbd8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bbde:	31 d2                	xor    edx,edx
c001bbe0:	88 c2                	mov    dl,al
c001bbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bbea:	83 e1 3f             	and    ecx,0x3f
c001bbed:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bbf1:	90                   	nop
c001bbf2:	83 c4 0c             	add    esp,0xc
c001bbf5:	c3                   	ret    
c001bbf6:	66 90                	xchg   ax,ax
c001bbf8:	66 90                	xchg   ax,ax
c001bbfa:	66 90                	xchg   ax,ax
c001bbfc:	66 90                	xchg   ax,ax
c001bbfe:	66 90                	xchg   ax,ax

c001bc00 <avxDetect>:
c001bc00:	b8 01 00 00 00       	mov    eax,0x1
c001bc05:	0f a2                	cpuid  
c001bc07:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bc0d:	74 15                	je     c001bc24 <avxDetect.noAVX>
c001bc0f:	b8 01 00 00 00       	mov    eax,0x1
c001bc14:	0f a2                	cpuid  
c001bc16:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bc1c:	74 06                	je     c001bc24 <avxDetect.noAVX>
c001bc1e:	b8 01 00 00 00       	mov    eax,0x1
c001bc23:	c3                   	ret    

c001bc24 <avxDetect.noAVX>:
c001bc24:	b8 00 00 00 00       	mov    eax,0x0
c001bc29:	c3                   	ret    

c001bc2a <avxSave>:
c001bc2a:	53                   	push   ebx
c001bc2b:	52                   	push   edx
c001bc2c:	31 c0                	xor    eax,eax
c001bc2e:	48                   	dec    eax
c001bc2f:	89 c2                	mov    edx,eax
c001bc31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc35:	0f ae 23             	xsave  [ebx]
c001bc38:	5a                   	pop    edx
c001bc39:	5b                   	pop    ebx
c001bc3a:	c3                   	ret    

c001bc3b <avxLoad>:
c001bc3b:	53                   	push   ebx
c001bc3c:	52                   	push   edx
c001bc3d:	31 c0                	xor    eax,eax
c001bc3f:	48                   	dec    eax
c001bc40:	89 c2                	mov    edx,eax
c001bc42:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc46:	0f ae 2b             	xrstor [ebx]
c001bc49:	5a                   	pop    edx
c001bc4a:	5b                   	pop    ebx
c001bc4b:	c3                   	ret    

c001bc4c <avxInit>:
c001bc4c:	e8 57 02 00 00       	call   c001bea8 <sseInit>
c001bc51:	50                   	push   eax
c001bc52:	51                   	push   ecx
c001bc53:	0f 20 e0             	mov    eax,cr4
c001bc56:	0d 00 00 04 00       	or     eax,0x40000
c001bc5b:	0f 22 e0             	mov    cr4,eax
c001bc5e:	31 c9                	xor    ecx,ecx
c001bc60:	0f 01 d0             	xgetbv 
c001bc63:	0d 07 00 00 00       	or     eax,0x7
c001bc68:	0f 01 d1             	xsetbv 
c001bc6b:	59                   	pop    ecx
c001bc6c:	58                   	pop    eax
c001bc6d:	c3                   	ret    

c001bc6e <avxClose>:
c001bc6e:	c3                   	ret    

c001bc6f <wouldSheSayYes>:
c001bc6f:	c3                   	ret    
c001bc70:	49                   	dec    ecx
c001bc71:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bc75:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bc79:	75 20                	jne    c001bc9b <isr0+0xb>
c001bc7b:	4e                   	dec    esi
c001bc7c:	79 61                	jns    c001bcdf <isr7+0x3>
c001bc7e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bc83:	66 90                	xchg   ax,ax
c001bc85:	66 90                	xchg   ax,ax
c001bc87:	66 90                	xchg   ax,ax
c001bc89:	66 90                	xchg   ax,ax
c001bc8b:	66 90                	xchg   ax,ax
c001bc8d:	66 90                	xchg   ax,ax
c001bc8f:	90                   	nop

c001bc90 <isr0>:
c001bc90:	fa                   	cli    
c001bc91:	68 00 00 00 00       	push   0x0
c001bc96:	68 00 00 00 00       	push   0x0
c001bc9b:	e9 44 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bca0 <isr1>:
c001bca0:	fa                   	cli    
c001bca1:	6a 00                	push   0x0
c001bca3:	6a 01                	push   0x1
c001bca5:	e9 3a 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bcaa <isr2>:
c001bcaa:	fa                   	cli    
c001bcab:	6a 00                	push   0x0
c001bcad:	6a 02                	push   0x2
c001bcaf:	e9 30 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bcb4 <isr3>:
c001bcb4:	fa                   	cli    
c001bcb5:	6a 00                	push   0x0
c001bcb7:	6a 03                	push   0x3
c001bcb9:	e9 26 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bcbe <isr4>:
c001bcbe:	fa                   	cli    
c001bcbf:	6a 00                	push   0x0
c001bcc1:	6a 04                	push   0x4
c001bcc3:	e9 1c 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bcc8 <isr5>:
c001bcc8:	fa                   	cli    
c001bcc9:	6a 00                	push   0x0
c001bccb:	6a 05                	push   0x5
c001bccd:	e9 12 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bcd2 <isr6>:
c001bcd2:	fa                   	cli    
c001bcd3:	6a 00                	push   0x0
c001bcd5:	6a 06                	push   0x6
c001bcd7:	e9 08 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bcdc <isr7>:
c001bcdc:	fa                   	cli    
c001bcdd:	6a 00                	push   0x0
c001bcdf:	6a 07                	push   0x7
c001bce1:	e9 fe 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bce6 <isr8>:
c001bce6:	fa                   	cli    
c001bce7:	6a 08                	push   0x8
c001bce9:	e9 f6 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bcee <isr9>:
c001bcee:	fa                   	cli    
c001bcef:	6a 00                	push   0x0
c001bcf1:	6a 09                	push   0x9
c001bcf3:	e9 ec 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bcf8 <isr10>:
c001bcf8:	fa                   	cli    
c001bcf9:	6a 0a                	push   0xa
c001bcfb:	e9 e4 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd00 <isr11>:
c001bd00:	fa                   	cli    
c001bd01:	6a 0b                	push   0xb
c001bd03:	e9 dc 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd08 <isr12>:
c001bd08:	fa                   	cli    
c001bd09:	6a 0c                	push   0xc
c001bd0b:	e9 d4 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd10 <isr13>:
c001bd10:	fa                   	cli    
c001bd11:	6a 0d                	push   0xd
c001bd13:	e9 cc 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd18 <isr14>:
c001bd18:	fa                   	cli    
c001bd19:	6a 0e                	push   0xe
c001bd1b:	e9 c4 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd20 <isr15>:
c001bd20:	fa                   	cli    
c001bd21:	6a 00                	push   0x0
c001bd23:	6a 0f                	push   0xf
c001bd25:	e9 ba 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd2a <isr16>:
c001bd2a:	fa                   	cli    
c001bd2b:	6a 00                	push   0x0
c001bd2d:	6a 10                	push   0x10
c001bd2f:	e9 b0 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd34 <isr17>:
c001bd34:	fa                   	cli    
c001bd35:	6a 00                	push   0x0
c001bd37:	6a 11                	push   0x11
c001bd39:	e9 a6 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd3e <isr18>:
c001bd3e:	fa                   	cli    
c001bd3f:	6a 00                	push   0x0
c001bd41:	6a 12                	push   0x12
c001bd43:	e9 9c 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd48 <irq3>:
c001bd48:	fa                   	cli    
c001bd49:	6a 00                	push   0x0
c001bd4b:	6a 23                	push   0x23
c001bd4d:	e9 92 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd52 <irq4>:
c001bd52:	fa                   	cli    
c001bd53:	6a 00                	push   0x0
c001bd55:	6a 24                	push   0x24
c001bd57:	e9 88 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd5c <irq5>:
c001bd5c:	fa                   	cli    
c001bd5d:	6a 00                	push   0x0
c001bd5f:	6a 25                	push   0x25
c001bd61:	e9 7e 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd66 <irq6>:
c001bd66:	fa                   	cli    
c001bd67:	6a 00                	push   0x0
c001bd69:	6a 26                	push   0x26
c001bd6b:	e9 74 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd70 <irq7>:
c001bd70:	fa                   	cli    
c001bd71:	6a 00                	push   0x0
c001bd73:	6a 27                	push   0x27
c001bd75:	e9 6a 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd7a <irq8>:
c001bd7a:	fa                   	cli    
c001bd7b:	6a 00                	push   0x0
c001bd7d:	6a 28                	push   0x28
c001bd7f:	e9 60 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd84 <irq9>:
c001bd84:	fa                   	cli    
c001bd85:	6a 00                	push   0x0
c001bd87:	6a 29                	push   0x29
c001bd89:	e9 56 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd8e <irq10>:
c001bd8e:	fa                   	cli    
c001bd8f:	6a 00                	push   0x0
c001bd91:	6a 2a                	push   0x2a
c001bd93:	e9 4c 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd98 <irq11>:
c001bd98:	fa                   	cli    
c001bd99:	6a 00                	push   0x0
c001bd9b:	6a 2b                	push   0x2b
c001bd9d:	e9 42 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bda2 <irq12>:
c001bda2:	fa                   	cli    
c001bda3:	6a 00                	push   0x0
c001bda5:	6a 2c                	push   0x2c
c001bda7:	e9 38 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bdac <irq13>:
c001bdac:	fa                   	cli    
c001bdad:	6a 00                	push   0x0
c001bdaf:	6a 2d                	push   0x2d
c001bdb1:	e9 2e 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bdb6 <irq14>:
c001bdb6:	fa                   	cli    
c001bdb7:	6a 00                	push   0x0
c001bdb9:	6a 2e                	push   0x2e
c001bdbb:	e9 24 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bdc0 <irq15>:
c001bdc0:	fa                   	cli    
c001bdc1:	6a 00                	push   0x0
c001bdc3:	6a 2f                	push   0x2f
c001bdc5:	e9 1a 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bdca <irq1>:
c001bdca:	fa                   	cli    
c001bdcb:	6a 00                	push   0x0
c001bdcd:	6a 21                	push   0x21
c001bdcf:	eb 13                	jmp    c001bde4 <int_common_stub>

c001bdd1 <irq2>:
c001bdd1:	fa                   	cli    
c001bdd2:	6a 00                	push   0x0
c001bdd4:	6a 22                	push   0x22
c001bdd6:	eb 0c                	jmp    c001bde4 <int_common_stub>

c001bdd8 <isr96>:
c001bdd8:	6a 00                	push   0x0
c001bdda:	6a 60                	push   0x60
c001bddc:	fb                   	sti    
c001bddd:	eb 05                	jmp    c001bde4 <int_common_stub>

c001bddf <irq0>:
c001bddf:	fa                   	cli    
c001bde0:	6a 00                	push   0x0
c001bde2:	6a 20                	push   0x20

c001bde4 <int_common_stub>:
c001bde4:	60                   	pusha  
c001bde5:	1e                   	push   ds
c001bde6:	06                   	push   es
c001bde7:	0f a0                	push   fs
c001bde9:	0f a8                	push   gs
c001bdeb:	66 b8 10 00          	mov    ax,0x10
c001bdef:	66 8e d8             	mov    ds,ax
c001bdf2:	66 8e c0             	mov    es,ax
c001bdf5:	66 8e e0             	mov    fs,ax
c001bdf8:	66 8e e8             	mov    gs,ax
c001bdfb:	54                   	push   esp
c001bdfc:	fc                   	cld    
c001bdfd:	e8 de 05 ff ff       	call   c000c3e0 <int_handler>
c001be02:	81 c4 04 00 00 00    	add    esp,0x4
c001be08:	0f a9                	pop    gs
c001be0a:	0f a1                	pop    fs
c001be0c:	07                   	pop    es
c001be0d:	1f                   	pop    ds
c001be0e:	61                   	popa   
c001be0f:	81 c4 08 00 00 00    	add    esp,0x8
c001be15:	cf                   	iret   

c001be16 <irq16>:
c001be16:	fa                   	cli    
c001be17:	6a 00                	push   0x0
c001be19:	6a 30                	push   0x30
c001be1b:	e9 c4 ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be20 <irq17>:
c001be20:	fa                   	cli    
c001be21:	6a 00                	push   0x0
c001be23:	6a 31                	push   0x31
c001be25:	e9 ba ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be2a <irq18>:
c001be2a:	fa                   	cli    
c001be2b:	6a 00                	push   0x0
c001be2d:	6a 32                	push   0x32
c001be2f:	e9 b0 ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be34 <irq19>:
c001be34:	fa                   	cli    
c001be35:	6a 00                	push   0x0
c001be37:	6a 33                	push   0x33
c001be39:	e9 a6 ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be3e <irq20>:
c001be3e:	fa                   	cli    
c001be3f:	6a 00                	push   0x0
c001be41:	6a 34                	push   0x34
c001be43:	e9 9c ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be48 <irq21>:
c001be48:	fa                   	cli    
c001be49:	6a 00                	push   0x0
c001be4b:	6a 35                	push   0x35
c001be4d:	e9 92 ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be52 <irq22>:
c001be52:	fa                   	cli    
c001be53:	6a 00                	push   0x0
c001be55:	6a 36                	push   0x36
c001be57:	e9 88 ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be5c <irq23>:
c001be5c:	fa                   	cli    
c001be5d:	6a 00                	push   0x0
c001be5f:	6a 37                	push   0x37
c001be61:	e9 7e ff ff ff       	jmp    c001bde4 <int_common_stub>
c001be66:	66 90                	xchg   ax,ax
c001be68:	66 90                	xchg   ax,ax
c001be6a:	66 90                	xchg   ax,ax
c001be6c:	66 90                	xchg   ax,ax
c001be6e:	66 90                	xchg   ax,ax

c001be70 <i386GetRDRAND>:
c001be70:	b9 64 00 00 00       	mov    ecx,0x64

c001be75 <retry>:
c001be75:	0f c7 f0             	rdrand eax
c001be78:	72 05                	jb     c001be7f <retry.done>
c001be7a:	e2 f9                	loop   c001be75 <retry>

c001be7c <retry.fail>:
c001be7c:	31 c0                	xor    eax,eax
c001be7e:	c3                   	ret    

c001be7f <retry.done>:
c001be7f:	c3                   	ret    

c001be80 <absolutelyNoChanceInHell>:
c001be80:	b8 01 00 00 00       	mov    eax,0x1
c001be85:	0f a2                	cpuid  
c001be87:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001be8d:	74 06                	je     c001be95 <sseDetect.noSSE>
c001be8f:	b8 01 00 00 00       	mov    eax,0x1
c001be94:	c3                   	ret    

c001be95 <sseDetect.noSSE>:
c001be95:	31 c0                	xor    eax,eax
c001be97:	c3                   	ret    

c001be98 <sseSave>:
c001be98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be9c:	0f ae 00             	fxsave [eax]
c001be9f:	c3                   	ret    

c001bea0 <sseLoad>:
c001bea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bea4:	0f ae 08             	fxrstor [eax]
c001bea7:	c3                   	ret    

c001bea8 <sseInit>:
c001bea8:	e8 42 00 00 00       	call   c001beef <x87Init>
c001bead:	0f 20 e0             	mov    eax,cr4
c001beb0:	66 0d 00 06          	or     ax,0x600
c001beb4:	0f 22 e0             	mov    cr4,eax
c001beb7:	c3                   	ret    

c001beb8 <sseClose>:
c001beb8:	c3                   	ret    
c001beb9:	66 90                	xchg   ax,ax
c001bebb:	66 90                	xchg   ax,ax
c001bebd:	66 90                	xchg   ax,ax
c001bebf:	90                   	nop

c001bec0 <value_37F>:
c001bec0:	7f 03                	jg     c001bec5 <value_37A+0x1>

c001bec2 <value_37E>:
c001bec2:	7e 03                	jle    c001bec7 <x87Detect+0x1>

c001bec4 <value_37A>:
c001bec4:	7a 03                	jp     c001bec9 <x87Detect+0x3>

c001bec6 <x87Detect>:
c001bec6:	b8 01 00 00 00       	mov    eax,0x1
c001becb:	0f a2                	cpuid  
c001becd:	f7 c2 01 00 00 00    	test   edx,0x1
c001bed3:	74 06                	je     c001bedb <x87Detect.nox87>
c001bed5:	b8 01 00 00 00       	mov    eax,0x1
c001beda:	c3                   	ret    

c001bedb <x87Detect.nox87>:
c001bedb:	b8 00 00 00 00       	mov    eax,0x0
c001bee0:	c3                   	ret    

c001bee1 <x87Save>:
c001bee1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bee5:	dd 30                	fnsave [eax]
c001bee7:	c3                   	ret    

c001bee8 <x87Load>:
c001bee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beec:	dd 20                	frstor [eax]
c001beee:	c3                   	ret    

c001beef <x87Init>:
c001beef:	0f 20 c0             	mov    eax,cr0
c001bef2:	66 25 fb ff          	and    ax,0xfffb
c001bef6:	66 0d 22 00          	or     ax,0x22
c001befa:	0f 22 c0             	mov    cr0,eax
c001befd:	db e3                	fninit 
c001beff:	0f 06                	clts   
c001bf01:	d9 2d c4 be 01 c0    	fldcw  WORD PTR ds:0xc001bec4
c001bf07:	c3                   	ret    

c001bf08 <x87Close>:
c001bf08:	c3                   	ret    
c001bf09:	66 90                	xchg   ax,ax
c001bf0b:	90                   	nop

c001bf0c <__do_global_ctors_aux>:
c001bf0c:	a1 bc ce 01 c0       	mov    eax,ds:0xc001cebc
c001bf11:	83 f8 ff             	cmp    eax,0xffffffff
c001bf14:	74 1a                	je     c001bf30 <__do_global_ctors_aux+0x24>
c001bf16:	55                   	push   ebp
c001bf17:	89 e5                	mov    ebp,esp
c001bf19:	53                   	push   ebx
c001bf1a:	52                   	push   edx
c001bf1b:	bb bc ce 01 c0       	mov    ebx,0xc001cebc
c001bf20:	ff d0                	call   eax
c001bf22:	83 eb 04             	sub    ebx,0x4
c001bf25:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf27:	83 f8 ff             	cmp    eax,0xffffffff
c001bf2a:	75 f4                	jne    c001bf20 <__do_global_ctors_aux+0x14>
c001bf2c:	58                   	pop    eax
c001bf2d:	5b                   	pop    ebx
c001bf2e:	5d                   	pop    ebp
c001bf2f:	c3                   	ret    
c001bf30:	c3                   	ret    
c001bf31:	66 90                	xchg   ax,ax
c001bf33:	90                   	nop

c001bf34 <__divdi3>:
c001bf34:	55                   	push   ebp
c001bf35:	57                   	push   edi
c001bf36:	56                   	push   esi
c001bf37:	53                   	push   ebx
c001bf38:	83 ec 1c             	sub    esp,0x1c
c001bf3b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf43:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf46:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf4e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf52:	85 db                	test   ebx,ebx
c001bf54:	0f 88 8e 00 00 00    	js     c001bfe8 <__divdi3+0xb4>
c001bf5a:	89 dd                	mov    ebp,ebx
c001bf5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf64:	89 d3                	mov    ebx,edx
c001bf66:	85 d2                	test   edx,edx
c001bf68:	79 0d                	jns    c001bf77 <__divdi3+0x43>
c001bf6a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bf6e:	f7 d8                	neg    eax
c001bf70:	83 d2 00             	adc    edx,0x0
c001bf73:	f7 da                	neg    edx
c001bf75:	89 d3                	mov    ebx,edx
c001bf77:	89 c7                	mov    edi,eax
c001bf79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf7c:	85 db                	test   ebx,ebx
c001bf7e:	75 48                	jne    c001bfc8 <__divdi3+0x94>
c001bf80:	39 ef                	cmp    edi,ebp
c001bf82:	76 24                	jbe    c001bfa8 <__divdi3+0x74>
c001bf84:	89 ea                	mov    edx,ebp
c001bf86:	f7 f7                	div    edi
c001bf88:	89 c1                	mov    ecx,eax
c001bf8a:	31 f6                	xor    esi,esi
c001bf8c:	89 c8                	mov    eax,ecx
c001bf8e:	89 f2                	mov    edx,esi
c001bf90:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf94:	85 c9                	test   ecx,ecx
c001bf96:	74 07                	je     c001bf9f <__divdi3+0x6b>
c001bf98:	f7 d8                	neg    eax
c001bf9a:	83 d2 00             	adc    edx,0x0
c001bf9d:	f7 da                	neg    edx
c001bf9f:	83 c4 1c             	add    esp,0x1c
c001bfa2:	5b                   	pop    ebx
c001bfa3:	5e                   	pop    esi
c001bfa4:	5f                   	pop    edi
c001bfa5:	5d                   	pop    ebp
c001bfa6:	c3                   	ret    
c001bfa7:	90                   	nop
c001bfa8:	85 ff                	test   edi,edi
c001bfaa:	75 0b                	jne    c001bfb7 <__divdi3+0x83>
c001bfac:	b8 01 00 00 00       	mov    eax,0x1
c001bfb1:	31 d2                	xor    edx,edx
c001bfb3:	f7 f3                	div    ebx
c001bfb5:	89 c7                	mov    edi,eax
c001bfb7:	31 d2                	xor    edx,edx
c001bfb9:	89 e8                	mov    eax,ebp
c001bfbb:	f7 f7                	div    edi
c001bfbd:	89 c6                	mov    esi,eax
c001bfbf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfc2:	f7 f7                	div    edi
c001bfc4:	89 c1                	mov    ecx,eax
c001bfc6:	eb c4                	jmp    c001bf8c <__divdi3+0x58>
c001bfc8:	39 eb                	cmp    ebx,ebp
c001bfca:	77 3c                	ja     c001c008 <__divdi3+0xd4>
c001bfcc:	0f bd f3             	bsr    esi,ebx
c001bfcf:	83 f6 1f             	xor    esi,0x1f
c001bfd2:	75 40                	jne    c001c014 <__divdi3+0xe0>
c001bfd4:	39 eb                	cmp    ebx,ebp
c001bfd6:	72 09                	jb     c001bfe1 <__divdi3+0xad>
c001bfd8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bfdb:	0f 87 97 00 00 00    	ja     c001c078 <__divdi3+0x144>
c001bfe1:	b9 01 00 00 00       	mov    ecx,0x1
c001bfe6:	eb a4                	jmp    c001bf8c <__divdi3+0x58>
c001bfe8:	f7 d9                	neg    ecx
c001bfea:	83 d3 00             	adc    ebx,0x0
c001bfed:	f7 db                	neg    ebx
c001bfef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bff2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bff6:	89 dd                	mov    ebp,ebx
c001bff8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c000:	e9 5f ff ff ff       	jmp    c001bf64 <__divdi3+0x30>
c001c005:	8d 76 00             	lea    esi,[esi+0x0]
c001c008:	31 f6                	xor    esi,esi
c001c00a:	31 c9                	xor    ecx,ecx
c001c00c:	e9 7b ff ff ff       	jmp    c001bf8c <__divdi3+0x58>
c001c011:	8d 76 00             	lea    esi,[esi+0x0]
c001c014:	b8 20 00 00 00       	mov    eax,0x20
c001c019:	29 f0                	sub    eax,esi
c001c01b:	89 f1                	mov    ecx,esi
c001c01d:	d3 e3                	shl    ebx,cl
c001c01f:	89 fa                	mov    edx,edi
c001c021:	88 c1                	mov    cl,al
c001c023:	d3 ea                	shr    edx,cl
c001c025:	09 da                	or     edx,ebx
c001c027:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c02b:	89 f1                	mov    ecx,esi
c001c02d:	d3 e7                	shl    edi,cl
c001c02f:	89 eb                	mov    ebx,ebp
c001c031:	88 c1                	mov    cl,al
c001c033:	d3 eb                	shr    ebx,cl
c001c035:	89 f1                	mov    ecx,esi
c001c037:	d3 e5                	shl    ebp,cl
c001c039:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c03c:	88 c1                	mov    cl,al
c001c03e:	d3 ea                	shr    edx,cl
c001c040:	09 d5                	or     ebp,edx
c001c042:	89 e8                	mov    eax,ebp
c001c044:	89 da                	mov    edx,ebx
c001c046:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c04a:	89 d3                	mov    ebx,edx
c001c04c:	89 c5                	mov    ebp,eax
c001c04e:	f7 e7                	mul    edi
c001c050:	39 d3                	cmp    ebx,edx
c001c052:	72 18                	jb     c001c06c <__divdi3+0x138>
c001c054:	74 0a                	je     c001c060 <__divdi3+0x12c>
c001c056:	89 e9                	mov    ecx,ebp
c001c058:	31 f6                	xor    esi,esi
c001c05a:	e9 2d ff ff ff       	jmp    c001bf8c <__divdi3+0x58>
c001c05f:	90                   	nop
c001c060:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c063:	89 f1                	mov    ecx,esi
c001c065:	d3 e7                	shl    edi,cl
c001c067:	39 c7                	cmp    edi,eax
c001c069:	73 eb                	jae    c001c056 <__divdi3+0x122>
c001c06b:	90                   	nop
c001c06c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c06f:	31 f6                	xor    esi,esi
c001c071:	e9 16 ff ff ff       	jmp    c001bf8c <__divdi3+0x58>
c001c076:	66 90                	xchg   ax,ax
c001c078:	31 c9                	xor    ecx,ecx
c001c07a:	e9 0d ff ff ff       	jmp    c001bf8c <__divdi3+0x58>
c001c07f:	90                   	nop

c001c080 <__moddi3>:
c001c080:	55                   	push   ebp
c001c081:	57                   	push   edi
c001c082:	56                   	push   esi
c001c083:	53                   	push   ebx
c001c084:	83 ec 2c             	sub    esp,0x2c
c001c087:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c08b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c08f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c093:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c097:	85 db                	test   ebx,ebx
c001c099:	0f 88 85 00 00 00    	js     c001c124 <__moddi3+0xa4>
c001c09f:	89 de                	mov    esi,ebx
c001c0a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0a9:	89 d7                	mov    edi,edx
c001c0ab:	85 d2                	test   edx,edx
c001c0ad:	79 09                	jns    c001c0b8 <__moddi3+0x38>
c001c0af:	f7 d8                	neg    eax
c001c0b1:	83 d2 00             	adc    edx,0x0
c001c0b4:	f7 da                	neg    edx
c001c0b6:	89 d7                	mov    edi,edx
c001c0b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0bc:	89 cd                	mov    ebp,ecx
c001c0be:	85 ff                	test   edi,edi
c001c0c0:	75 52                	jne    c001c114 <__moddi3+0x94>
c001c0c2:	89 c3                	mov    ebx,eax
c001c0c4:	39 f0                	cmp    eax,esi
c001c0c6:	76 24                	jbe    c001c0ec <__moddi3+0x6c>
c001c0c8:	89 c8                	mov    eax,ecx
c001c0ca:	89 f2                	mov    edx,esi
c001c0cc:	f7 f3                	div    ebx
c001c0ce:	89 d6                	mov    esi,edx
c001c0d0:	89 f0                	mov    eax,esi
c001c0d2:	31 d2                	xor    edx,edx
c001c0d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0d8:	85 c9                	test   ecx,ecx
c001c0da:	74 07                	je     c001c0e3 <__moddi3+0x63>
c001c0dc:	f7 d8                	neg    eax
c001c0de:	83 d2 00             	adc    edx,0x0
c001c0e1:	f7 da                	neg    edx
c001c0e3:	83 c4 2c             	add    esp,0x2c
c001c0e6:	5b                   	pop    ebx
c001c0e7:	5e                   	pop    esi
c001c0e8:	5f                   	pop    edi
c001c0e9:	5d                   	pop    ebp
c001c0ea:	c3                   	ret    
c001c0eb:	90                   	nop
c001c0ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c0f0:	85 db                	test   ebx,ebx
c001c0f2:	75 0d                	jne    c001c101 <__moddi3+0x81>
c001c0f4:	b8 01 00 00 00       	mov    eax,0x1
c001c0f9:	31 d2                	xor    edx,edx
c001c0fb:	f7 f7                	div    edi
c001c0fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c101:	89 f0                	mov    eax,esi
c001c103:	31 d2                	xor    edx,edx
c001c105:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c109:	f7 f7                	div    edi
c001c10b:	89 e8                	mov    eax,ebp
c001c10d:	f7 f7                	div    edi
c001c10f:	89 d6                	mov    esi,edx
c001c111:	eb bd                	jmp    c001c0d0 <__moddi3+0x50>
c001c113:	90                   	nop
c001c114:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c118:	39 f7                	cmp    edi,esi
c001c11a:	76 20                	jbe    c001c13c <__moddi3+0xbc>
c001c11c:	89 c8                	mov    eax,ecx
c001c11e:	89 f2                	mov    edx,esi
c001c120:	eb b2                	jmp    c001c0d4 <__moddi3+0x54>
c001c122:	66 90                	xchg   ax,ax
c001c124:	f7 d9                	neg    ecx
c001c126:	83 d3 00             	adc    ebx,0x0
c001c129:	f7 db                	neg    ebx
c001c12b:	89 de                	mov    esi,ebx
c001c12d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c135:	e9 6f ff ff ff       	jmp    c001c0a9 <__moddi3+0x29>
c001c13a:	66 90                	xchg   ax,ax
c001c13c:	0f bd c7             	bsr    eax,edi
c001c13f:	83 f0 1f             	xor    eax,0x1f
c001c142:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c146:	75 24                	jne    c001c16c <__moddi3+0xec>
c001c148:	39 f7                	cmp    edi,esi
c001c14a:	72 06                	jb     c001c152 <__moddi3+0xd2>
c001c14c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c150:	77 0c                	ja     c001c15e <__moddi3+0xde>
c001c152:	89 e9                	mov    ecx,ebp
c001c154:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c158:	19 fe                	sbb    esi,edi
c001c15a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c15e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c162:	89 f2                	mov    edx,esi
c001c164:	e9 6b ff ff ff       	jmp    c001c0d4 <__moddi3+0x54>
c001c169:	8d 76 00             	lea    esi,[esi+0x0]
c001c16c:	b8 20 00 00 00       	mov    eax,0x20
c001c171:	89 c2                	mov    edx,eax
c001c173:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c177:	29 da                	sub    edx,ebx
c001c179:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c17d:	88 d9                	mov    cl,bl
c001c17f:	d3 e7                	shl    edi,cl
c001c181:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c185:	88 d1                	mov    cl,dl
c001c187:	d3 e8                	shr    eax,cl
c001c189:	09 c7                	or     edi,eax
c001c18b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c18f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c193:	89 d8                	mov    eax,ebx
c001c195:	88 d9                	mov    cl,bl
c001c197:	d3 e7                	shl    edi,cl
c001c199:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c19d:	89 f3                	mov    ebx,esi
c001c19f:	88 d1                	mov    cl,dl
c001c1a1:	d3 eb                	shr    ebx,cl
c001c1a3:	89 c7                	mov    edi,eax
c001c1a5:	88 c1                	mov    cl,al
c001c1a7:	d3 e6                	shl    esi,cl
c001c1a9:	89 e8                	mov    eax,ebp
c001c1ab:	88 d1                	mov    cl,dl
c001c1ad:	d3 e8                	shr    eax,cl
c001c1af:	09 f0                	or     eax,esi
c001c1b1:	89 f9                	mov    ecx,edi
c001c1b3:	d3 e5                	shl    ebp,cl
c001c1b5:	89 da                	mov    edx,ebx
c001c1b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c1bb:	89 d3                	mov    ebx,edx
c001c1bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1c1:	89 c6                	mov    esi,eax
c001c1c3:	89 d1                	mov    ecx,edx
c001c1c5:	39 d3                	cmp    ebx,edx
c001c1c7:	72 27                	jb     c001c1f0 <__moddi3+0x170>
c001c1c9:	74 21                	je     c001c1ec <__moddi3+0x16c>
c001c1cb:	29 f5                	sub    ebp,esi
c001c1cd:	19 cb                	sbb    ebx,ecx
c001c1cf:	89 de                	mov    esi,ebx
c001c1d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c1d5:	d3 e6                	shl    esi,cl
c001c1d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c1db:	89 f9                	mov    ecx,edi
c001c1dd:	d3 ed                	shr    ebp,cl
c001c1df:	09 ee                	or     esi,ebp
c001c1e1:	89 f0                	mov    eax,esi
c001c1e3:	d3 eb                	shr    ebx,cl
c001c1e5:	89 da                	mov    edx,ebx
c001c1e7:	e9 e8 fe ff ff       	jmp    c001c0d4 <__moddi3+0x54>
c001c1ec:	39 c5                	cmp    ebp,eax
c001c1ee:	73 db                	jae    c001c1cb <__moddi3+0x14b>
c001c1f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c1f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c1f8:	89 d1                	mov    ecx,edx
c001c1fa:	89 c6                	mov    esi,eax
c001c1fc:	eb cd                	jmp    c001c1cb <__moddi3+0x14b>
c001c1fe:	66 90                	xchg   ax,ax

c001c200 <__udivdi3>:
c001c200:	55                   	push   ebp
c001c201:	57                   	push   edi
c001c202:	56                   	push   esi
c001c203:	53                   	push   ebx
c001c204:	83 ec 1c             	sub    esp,0x1c
c001c207:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c20b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c20f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c213:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c217:	85 d2                	test   edx,edx
c001c219:	75 41                	jne    c001c25c <__udivdi3+0x5c>
c001c21b:	39 f7                	cmp    edi,esi
c001c21d:	76 15                	jbe    c001c234 <__udivdi3+0x34>
c001c21f:	89 e8                	mov    eax,ebp
c001c221:	89 f2                	mov    edx,esi
c001c223:	f7 f7                	div    edi
c001c225:	31 db                	xor    ebx,ebx
c001c227:	89 da                	mov    edx,ebx
c001c229:	83 c4 1c             	add    esp,0x1c
c001c22c:	5b                   	pop    ebx
c001c22d:	5e                   	pop    esi
c001c22e:	5f                   	pop    edi
c001c22f:	5d                   	pop    ebp
c001c230:	c3                   	ret    
c001c231:	8d 76 00             	lea    esi,[esi+0x0]
c001c234:	89 f9                	mov    ecx,edi
c001c236:	85 ff                	test   edi,edi
c001c238:	75 0b                	jne    c001c245 <__udivdi3+0x45>
c001c23a:	b8 01 00 00 00       	mov    eax,0x1
c001c23f:	31 d2                	xor    edx,edx
c001c241:	f7 f7                	div    edi
c001c243:	89 c1                	mov    ecx,eax
c001c245:	31 d2                	xor    edx,edx
c001c247:	89 f0                	mov    eax,esi
c001c249:	f7 f1                	div    ecx
c001c24b:	89 c3                	mov    ebx,eax
c001c24d:	89 e8                	mov    eax,ebp
c001c24f:	f7 f1                	div    ecx
c001c251:	89 da                	mov    edx,ebx
c001c253:	83 c4 1c             	add    esp,0x1c
c001c256:	5b                   	pop    ebx
c001c257:	5e                   	pop    esi
c001c258:	5f                   	pop    edi
c001c259:	5d                   	pop    ebp
c001c25a:	c3                   	ret    
c001c25b:	90                   	nop
c001c25c:	39 f2                	cmp    edx,esi
c001c25e:	77 1c                	ja     c001c27c <__udivdi3+0x7c>
c001c260:	0f bd da             	bsr    ebx,edx
c001c263:	83 f3 1f             	xor    ebx,0x1f
c001c266:	75 24                	jne    c001c28c <__udivdi3+0x8c>
c001c268:	39 f2                	cmp    edx,esi
c001c26a:	72 08                	jb     c001c274 <__udivdi3+0x74>
c001c26c:	39 ef                	cmp    edi,ebp
c001c26e:	0f 87 84 00 00 00    	ja     c001c2f8 <__udivdi3+0xf8>
c001c274:	b8 01 00 00 00       	mov    eax,0x1
c001c279:	eb ac                	jmp    c001c227 <__udivdi3+0x27>
c001c27b:	90                   	nop
c001c27c:	31 db                	xor    ebx,ebx
c001c27e:	31 c0                	xor    eax,eax
c001c280:	89 da                	mov    edx,ebx
c001c282:	83 c4 1c             	add    esp,0x1c
c001c285:	5b                   	pop    ebx
c001c286:	5e                   	pop    esi
c001c287:	5f                   	pop    edi
c001c288:	5d                   	pop    ebp
c001c289:	c3                   	ret    
c001c28a:	66 90                	xchg   ax,ax
c001c28c:	b8 20 00 00 00       	mov    eax,0x20
c001c291:	29 d8                	sub    eax,ebx
c001c293:	88 d9                	mov    cl,bl
c001c295:	d3 e2                	shl    edx,cl
c001c297:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c29b:	89 fa                	mov    edx,edi
c001c29d:	88 c1                	mov    cl,al
c001c29f:	d3 ea                	shr    edx,cl
c001c2a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2a5:	09 d1                	or     ecx,edx
c001c2a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2ab:	88 d9                	mov    cl,bl
c001c2ad:	d3 e7                	shl    edi,cl
c001c2af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2b3:	89 f7                	mov    edi,esi
c001c2b5:	88 c1                	mov    cl,al
c001c2b7:	d3 ef                	shr    edi,cl
c001c2b9:	88 d9                	mov    cl,bl
c001c2bb:	d3 e6                	shl    esi,cl
c001c2bd:	89 ea                	mov    edx,ebp
c001c2bf:	88 c1                	mov    cl,al
c001c2c1:	d3 ea                	shr    edx,cl
c001c2c3:	09 d6                	or     esi,edx
c001c2c5:	89 f0                	mov    eax,esi
c001c2c7:	89 fa                	mov    edx,edi
c001c2c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2cd:	89 d7                	mov    edi,edx
c001c2cf:	89 c6                	mov    esi,eax
c001c2d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2d5:	39 d7                	cmp    edi,edx
c001c2d7:	72 13                	jb     c001c2ec <__udivdi3+0xec>
c001c2d9:	74 09                	je     c001c2e4 <__udivdi3+0xe4>
c001c2db:	89 f0                	mov    eax,esi
c001c2dd:	31 db                	xor    ebx,ebx
c001c2df:	e9 43 ff ff ff       	jmp    c001c227 <__udivdi3+0x27>
c001c2e4:	88 d9                	mov    cl,bl
c001c2e6:	d3 e5                	shl    ebp,cl
c001c2e8:	39 c5                	cmp    ebp,eax
c001c2ea:	73 ef                	jae    c001c2db <__udivdi3+0xdb>
c001c2ec:	8d 46 ff             	lea    eax,[esi-0x1]
c001c2ef:	31 db                	xor    ebx,ebx
c001c2f1:	e9 31 ff ff ff       	jmp    c001c227 <__udivdi3+0x27>
c001c2f6:	66 90                	xchg   ax,ax
c001c2f8:	31 c0                	xor    eax,eax
c001c2fa:	e9 28 ff ff ff       	jmp    c001c227 <__udivdi3+0x27>
c001c2ff:	90                   	nop

c001c300 <__umoddi3>:
c001c300:	55                   	push   ebp
c001c301:	57                   	push   edi
c001c302:	56                   	push   esi
c001c303:	53                   	push   ebx
c001c304:	83 ec 1c             	sub    esp,0x1c
c001c307:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c30b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c30f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c313:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c317:	89 da                	mov    edx,ebx
c001c319:	85 c0                	test   eax,eax
c001c31b:	75 37                	jne    c001c354 <__umoddi3+0x54>
c001c31d:	39 df                	cmp    edi,ebx
c001c31f:	76 13                	jbe    c001c334 <__umoddi3+0x34>
c001c321:	89 f0                	mov    eax,esi
c001c323:	f7 f7                	div    edi
c001c325:	89 d0                	mov    eax,edx
c001c327:	31 d2                	xor    edx,edx
c001c329:	83 c4 1c             	add    esp,0x1c
c001c32c:	5b                   	pop    ebx
c001c32d:	5e                   	pop    esi
c001c32e:	5f                   	pop    edi
c001c32f:	5d                   	pop    ebp
c001c330:	c3                   	ret    
c001c331:	8d 76 00             	lea    esi,[esi+0x0]
c001c334:	89 fd                	mov    ebp,edi
c001c336:	85 ff                	test   edi,edi
c001c338:	75 0b                	jne    c001c345 <__umoddi3+0x45>
c001c33a:	b8 01 00 00 00       	mov    eax,0x1
c001c33f:	31 d2                	xor    edx,edx
c001c341:	f7 f7                	div    edi
c001c343:	89 c5                	mov    ebp,eax
c001c345:	89 d8                	mov    eax,ebx
c001c347:	31 d2                	xor    edx,edx
c001c349:	f7 f5                	div    ebp
c001c34b:	89 f0                	mov    eax,esi
c001c34d:	f7 f5                	div    ebp
c001c34f:	89 d0                	mov    eax,edx
c001c351:	eb d4                	jmp    c001c327 <__umoddi3+0x27>
c001c353:	90                   	nop
c001c354:	89 f1                	mov    ecx,esi
c001c356:	39 d8                	cmp    eax,ebx
c001c358:	76 0a                	jbe    c001c364 <__umoddi3+0x64>
c001c35a:	89 f0                	mov    eax,esi
c001c35c:	83 c4 1c             	add    esp,0x1c
c001c35f:	5b                   	pop    ebx
c001c360:	5e                   	pop    esi
c001c361:	5f                   	pop    edi
c001c362:	5d                   	pop    ebp
c001c363:	c3                   	ret    
c001c364:	0f bd e8             	bsr    ebp,eax
c001c367:	83 f5 1f             	xor    ebp,0x1f
c001c36a:	75 1c                	jne    c001c388 <__umoddi3+0x88>
c001c36c:	39 d8                	cmp    eax,ebx
c001c36e:	72 04                	jb     c001c374 <__umoddi3+0x74>
c001c370:	39 f7                	cmp    edi,esi
c001c372:	77 08                	ja     c001c37c <__umoddi3+0x7c>
c001c374:	89 da                	mov    edx,ebx
c001c376:	29 fe                	sub    esi,edi
c001c378:	19 c2                	sbb    edx,eax
c001c37a:	89 f1                	mov    ecx,esi
c001c37c:	89 c8                	mov    eax,ecx
c001c37e:	83 c4 1c             	add    esp,0x1c
c001c381:	5b                   	pop    ebx
c001c382:	5e                   	pop    esi
c001c383:	5f                   	pop    edi
c001c384:	5d                   	pop    ebp
c001c385:	c3                   	ret    
c001c386:	66 90                	xchg   ax,ax
c001c388:	ba 20 00 00 00       	mov    edx,0x20
c001c38d:	29 ea                	sub    edx,ebp
c001c38f:	89 e9                	mov    ecx,ebp
c001c391:	d3 e0                	shl    eax,cl
c001c393:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c397:	89 f8                	mov    eax,edi
c001c399:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c39d:	88 d1                	mov    cl,dl
c001c39f:	d3 e8                	shr    eax,cl
c001c3a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3a5:	09 c1                	or     ecx,eax
c001c3a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3ab:	89 e9                	mov    ecx,ebp
c001c3ad:	d3 e7                	shl    edi,cl
c001c3af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c3b3:	89 d8                	mov    eax,ebx
c001c3b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3b9:	88 d1                	mov    cl,dl
c001c3bb:	d3 e8                	shr    eax,cl
c001c3bd:	89 c7                	mov    edi,eax
c001c3bf:	89 e9                	mov    ecx,ebp
c001c3c1:	d3 e3                	shl    ebx,cl
c001c3c3:	89 f0                	mov    eax,esi
c001c3c5:	88 d1                	mov    cl,dl
c001c3c7:	d3 e8                	shr    eax,cl
c001c3c9:	09 d8                	or     eax,ebx
c001c3cb:	89 e9                	mov    ecx,ebp
c001c3cd:	d3 e6                	shl    esi,cl
c001c3cf:	89 f3                	mov    ebx,esi
c001c3d1:	89 fa                	mov    edx,edi
c001c3d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c3d7:	89 d1                	mov    ecx,edx
c001c3d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c3dd:	89 c6                	mov    esi,eax
c001c3df:	89 d7                	mov    edi,edx
c001c3e1:	39 d1                	cmp    ecx,edx
c001c3e3:	72 27                	jb     c001c40c <__umoddi3+0x10c>
c001c3e5:	74 21                	je     c001c408 <__umoddi3+0x108>
c001c3e7:	89 ca                	mov    edx,ecx
c001c3e9:	29 f3                	sub    ebx,esi
c001c3eb:	19 fa                	sbb    edx,edi
c001c3ed:	89 d0                	mov    eax,edx
c001c3ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c3f3:	d3 e0                	shl    eax,cl
c001c3f5:	89 e9                	mov    ecx,ebp
c001c3f7:	d3 eb                	shr    ebx,cl
c001c3f9:	09 d8                	or     eax,ebx
c001c3fb:	d3 ea                	shr    edx,cl
c001c3fd:	83 c4 1c             	add    esp,0x1c
c001c400:	5b                   	pop    ebx
c001c401:	5e                   	pop    esi
c001c402:	5f                   	pop    edi
c001c403:	5d                   	pop    ebp
c001c404:	c3                   	ret    
c001c405:	8d 76 00             	lea    esi,[esi+0x0]
c001c408:	39 c3                	cmp    ebx,eax
c001c40a:	73 db                	jae    c001c3e7 <__umoddi3+0xe7>
c001c40c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c410:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c414:	89 d7                	mov    edi,edx
c001c416:	89 c6                	mov    esi,eax
c001c418:	eb cd                	jmp    c001c3e7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c41a <_init>:
c001c41a:	55                   	push   ebp
c001c41b:	89 e5                	mov    ebp,esp
c001c41d:	e8 f6 3c fe ff       	call   c0000118 <frame_dummy>
c001c422:	e8 e5 fa ff ff       	call   c001bf0c <__do_global_ctors_aux>
c001c427:	5d                   	pop    ebp
c001c428:	c3                   	ret    

Disassembly of section .fini:

c001c429 <_fini>:
c001c429:	55                   	push   ebp
c001c42a:	89 e5                	mov    ebp,esp
c001c42c:	e8 77 3c fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c431:	5d                   	pop    ebp
c001c432:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c434 <Computer::~Computer()>:
c001c434:	83 ec 0c             	sub    esp,0xc
c001c437:	ba 40 d7 01 c0       	mov    edx,0xc001d740
c001c43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c440:	89 10                	mov    DWORD PTR [eax],edx
c001c442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c446:	83 ec 0c             	sub    esp,0xc
c001c449:	50                   	push   eax
c001c44a:	e8 e7 f9 fe ff       	call   c000be36 <Device::~Device()>
c001c44f:	83 c4 10             	add    esp,0x10
c001c452:	90                   	nop
c001c453:	83 c4 0c             	add    esp,0xc
c001c456:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c458 <Computer::~Computer()>:
c001c458:	83 ec 0c             	sub    esp,0xc
c001c45b:	83 ec 0c             	sub    esp,0xc
c001c45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c462:	e8 cd ff ff ff       	call   c001c434 <Computer::~Computer()>
c001c467:	83 c4 10             	add    esp,0x10
c001c46a:	83 ec 08             	sub    esp,0x8
c001c46d:	68 70 01 00 00       	push   0x170
c001c472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c476:	e8 83 e5 fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001c47b:	83 c4 10             	add    esp,0x10
c001c47e:	83 c4 0c             	add    esp,0xc
c001c481:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c482 <idleCommon()>:
c001c482:	83 ec 0c             	sub    esp,0xc
c001c485:	fa                   	cli    
c001c486:	ff 05 48 3e 02 c0    	inc    DWORD PTR ds:0xc0023e48
c001c48c:	e8 8b 74 ff ff       	call   c001391c <schedule()>
c001c491:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c001c496:	48                   	dec    eax
c001c497:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c001c49c:	75 01                	jne    c001c49f <idleCommon()+0x1d>
c001c49e:	fb                   	sti    
c001c49f:	83 c4 0c             	add    esp,0xc
c001c4a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c4a4 <LinkedList<UnixFile>::~LinkedList()>:
c001c4a4:	90                   	nop
c001c4a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c4a6 <LinkedList<UnixFile>::LinkedList()>:
c001c4a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4e6:	90                   	nop
c001c4e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c4e8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c4e8:	83 ec 0c             	sub    esp,0xc
c001c4eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c4f0:	75 10                	jne    c001c502 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c4f2:	83 ec 0c             	sub    esp,0xc
c001c4f5:	68 94 d9 01 c0       	push   0xc001d994
c001c4fa:	e8 c4 41 ff ff       	call   c00106c3 <KePanic(char const*)>
c001c4ff:	83 c4 10             	add    esp,0x10
c001c502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c506:	8b 00                	mov    eax,DWORD PTR [eax]
c001c508:	85 c0                	test   eax,eax
c001c50a:	74 34                	je     c001c540 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c50c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c513:	85 c0                	test   eax,eax
c001c515:	74 29                	je     c001c540 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c51e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c522:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c529:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c52d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c537:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c53e:	eb 65                	jmp    c001c5a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c544:	8b 00                	mov    eax,DWORD PTR [eax]
c001c546:	85 c0                	test   eax,eax
c001c548:	75 4b                	jne    c001c595 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c551:	85 c0                	test   eax,eax
c001c553:	75 40                	jne    c001c595 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c559:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c55d:	89 10                	mov    DWORD PTR [eax],edx
c001c55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c563:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c567:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c56e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c571:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c57f:	85 c0                	test   eax,eax
c001c581:	74 22                	je     c001c5a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c583:	83 ec 0c             	sub    esp,0xc
c001c586:	68 b6 d9 01 c0       	push   0xc001d9b6
c001c58b:	e8 33 41 ff ff       	call   c00106c3 <KePanic(char const*)>
c001c590:	83 c4 10             	add    esp,0x10
c001c593:	eb 10                	jmp    c001c5a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c595:	83 ec 0c             	sub    esp,0xc
c001c598:	68 c0 d9 01 c0       	push   0xc001d9c0
c001c59d:	e8 21 41 ff ff       	call   c00106c3 <KePanic(char const*)>
c001c5a2:	83 c4 10             	add    esp,0x10
c001c5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5ac:	8d 50 01             	lea    edx,[eax+0x1]
c001c5af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5b6:	90                   	nop
c001c5b7:	83 c4 0c             	add    esp,0xc
c001c5ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c5bc <LinkedList<UnixFile>::getFirstElement()>:
c001c5bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c5c4 <LinkedList<UnixFile>::removeFirst()>:
c001c5c4:	83 ec 0c             	sub    esp,0xc
c001c5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5cd:	85 c0                	test   eax,eax
c001c5cf:	75 12                	jne    c001c5e3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c5d1:	83 ec 0c             	sub    esp,0xc
c001c5d4:	68 cc d9 01 c0       	push   0xc001d9cc
c001c5d9:	e8 e5 40 ff ff       	call   c00106c3 <KePanic(char const*)>
c001c5de:	83 c4 10             	add    esp,0x10
c001c5e1:	eb 7e                	jmp    c001c661 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5ed:	85 c0                	test   eax,eax
c001c5ef:	74 10                	je     c001c601 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c5f1:	83 ec 0c             	sub    esp,0xc
c001c5f4:	68 17 da 01 c0       	push   0xc001da17
c001c5f9:	e8 c5 40 ff ff       	call   c00106c3 <KePanic(char const*)>
c001c5fe:	83 c4 10             	add    esp,0x10
c001c601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c605:	8b 00                	mov    eax,DWORD PTR [eax]
c001c607:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c60a:	85 c0                	test   eax,eax
c001c60c:	75 33                	jne    c001c641 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c612:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c61c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c627:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c62a:	83 f8 01             	cmp    eax,0x1
c001c62d:	74 21                	je     c001c650 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c62f:	83 ec 0c             	sub    esp,0xc
c001c632:	68 f0 d9 01 c0       	push   0xc001d9f0
c001c637:	e8 87 40 ff ff       	call   c00106c3 <KePanic(char const*)>
c001c63c:	83 c4 10             	add    esp,0x10
c001c63f:	eb 0f                	jmp    c001c650 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c645:	8b 00                	mov    eax,DWORD PTR [eax]
c001c647:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64e:	89 10                	mov    DWORD PTR [eax],edx
c001c650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c654:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c657:	8d 50 ff             	lea    edx,[eax-0x1]
c001c65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c661:	83 c4 0c             	add    esp,0xc
c001c664:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c666 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c666:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c66a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c66d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c66e <DriverlessDevice::~DriverlessDevice()>:
c001c66e:	ba 5c e0 01 c0       	mov    edx,0xc001e05c
c001c673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c677:	89 10                	mov    DWORD PTR [eax],edx
c001c679:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c67d:	50                   	push   eax
c001c67e:	e8 b3 f7 fe ff       	call   c000be36 <Device::~Device()>
c001c683:	83 c4 04             	add    esp,0x4
c001c686:	90                   	nop
c001c687:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c688 <DriverlessDevice::~DriverlessDevice()>:
c001c688:	83 ec 0c             	sub    esp,0xc
c001c68b:	83 ec 0c             	sub    esp,0xc
c001c68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c692:	e8 d7 ff ff ff       	call   c001c66e <DriverlessDevice::~DriverlessDevice()>
c001c697:	83 c4 10             	add    esp,0x10
c001c69a:	83 ec 08             	sub    esp,0x8
c001c69d:	68 58 01 00 00       	push   0x158
c001c6a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6a6:	e8 53 e3 fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001c6ab:	83 c4 10             	add    esp,0x10
c001c6ae:	83 c4 0c             	add    esp,0xc
c001c6b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c6b2 <LinkedList<Device>::addElement(Device*)>:
c001c6b2:	83 ec 0c             	sub    esp,0xc
c001c6b5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c6ba:	75 10                	jne    c001c6cc <LinkedList<Device>::addElement(Device*)+0x1a>
c001c6bc:	83 ec 0c             	sub    esp,0xc
c001c6bf:	68 94 d9 01 c0       	push   0xc001d994
c001c6c4:	e8 fa 3f ff ff       	call   c00106c3 <KePanic(char const*)>
c001c6c9:	83 c4 10             	add    esp,0x10
c001c6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6d2:	85 c0                	test   eax,eax
c001c6d4:	74 3a                	je     c001c710 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6dd:	85 c0                	test   eax,eax
c001c6df:	74 2f                	je     c001c710 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6ec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c701:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c704:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c70e:	eb 68                	jmp    c001c778 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c714:	8b 00                	mov    eax,DWORD PTR [eax]
c001c716:	85 c0                	test   eax,eax
c001c718:	75 4e                	jne    c001c768 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c721:	85 c0                	test   eax,eax
c001c723:	75 43                	jne    c001c768 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c729:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c72d:	89 10                	mov    DWORD PTR [eax],edx
c001c72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c733:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c741:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c752:	85 c0                	test   eax,eax
c001c754:	74 22                	je     c001c778 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c756:	83 ec 0c             	sub    esp,0xc
c001c759:	68 b6 d9 01 c0       	push   0xc001d9b6
c001c75e:	e8 60 3f ff ff       	call   c00106c3 <KePanic(char const*)>
c001c763:	83 c4 10             	add    esp,0x10
c001c766:	eb 10                	jmp    c001c778 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c768:	83 ec 0c             	sub    esp,0xc
c001c76b:	68 c0 d9 01 c0       	push   0xc001d9c0
c001c770:	e8 4e 3f ff ff       	call   c00106c3 <KePanic(char const*)>
c001c775:	83 c4 10             	add    esp,0x10
c001c778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c77f:	8d 50 01             	lea    edx,[eax+0x1]
c001c782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c786:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c789:	90                   	nop
c001c78a:	83 c4 0c             	add    esp,0xc
c001c78d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c78e <LinkedList<Device>::LinkedList()>:
c001c78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c792:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c79c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7ce:	90                   	nop
c001c7cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c7d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7d6:	85 c0                	test   eax,eax
c001c7d8:	75 0e                	jne    c001c7e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7e1:	85 c0                	test   eax,eax
c001c7e3:	75 03                	jne    c001c7e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7e5:	b0 01                	mov    al,0x1
c001c7e7:	c3                   	ret    
c001c7e8:	b0 00                	mov    al,0x0
c001c7ea:	90                   	nop
c001c7eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c7ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c7f4:	83 ec 0c             	sub    esp,0xc
c001c7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7fd:	85 c0                	test   eax,eax
c001c7ff:	75 17                	jne    c001c818 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c801:	83 ec 0c             	sub    esp,0xc
c001c804:	68 cc d9 01 c0       	push   0xc001d9cc
c001c809:	e8 b5 3e ff ff       	call   c00106c3 <KePanic(char const*)>
c001c80e:	83 c4 10             	add    esp,0x10
c001c811:	e9 92 00 00 00       	jmp    c001c8a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c816:	66 90                	xchg   ax,ax
c001c818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c81f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c822:	85 c0                	test   eax,eax
c001c824:	0f 95 c0             	setne  al
c001c827:	84 c0                	test   al,al
c001c829:	74 11                	je     c001c83c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c82b:	83 ec 0c             	sub    esp,0xc
c001c82e:	68 17 da 01 c0       	push   0xc001da17
c001c833:	e8 8b 3e ff ff       	call   c00106c3 <KePanic(char const*)>
c001c838:	83 c4 10             	add    esp,0x10
c001c83b:	90                   	nop
c001c83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c840:	8b 00                	mov    eax,DWORD PTR [eax]
c001c842:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c845:	85 c0                	test   eax,eax
c001c847:	0f 94 c0             	sete   al
c001c84a:	84 c0                	test   al,al
c001c84c:	74 36                	je     c001c884 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c852:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c867:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c86a:	83 f8 01             	cmp    eax,0x1
c001c86d:	74 25                	je     c001c894 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c86f:	83 ec 0c             	sub    esp,0xc
c001c872:	68 f0 d9 01 c0       	push   0xc001d9f0
c001c877:	e8 47 3e ff ff       	call   c00106c3 <KePanic(char const*)>
c001c87c:	83 c4 10             	add    esp,0x10
c001c87f:	eb 13                	jmp    c001c894 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c881:	8d 76 00             	lea    esi,[esi+0x0]
c001c884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c888:	8b 00                	mov    eax,DWORD PTR [eax]
c001c88a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c891:	89 10                	mov    DWORD PTR [eax],edx
c001c893:	90                   	nop
c001c894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c898:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c89b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8a8:	83 c4 0c             	add    esp,0xc
c001c8ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c8ac:	83 ec 0c             	sub    esp,0xc
c001c8af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c8b4:	75 12                	jne    c001c8c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c8b6:	83 ec 0c             	sub    esp,0xc
c001c8b9:	68 94 d9 01 c0       	push   0xc001d994
c001c8be:	e8 00 3e ff ff       	call   c00106c3 <KePanic(char const*)>
c001c8c3:	83 c4 10             	add    esp,0x10
c001c8c6:	66 90                	xchg   ax,ax
c001c8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8ce:	85 c0                	test   eax,eax
c001c8d0:	74 36                	je     c001c908 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8d9:	85 c0                	test   eax,eax
c001c8db:	74 2b                	je     c001c908 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8e8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c904:	eb 6a                	jmp    c001c970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c906:	66 90                	xchg   ax,ax
c001c908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c90e:	85 c0                	test   eax,eax
c001c910:	75 4e                	jne    c001c960 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c916:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c919:	85 c0                	test   eax,eax
c001c91b:	75 43                	jne    c001c960 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c921:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c925:	89 10                	mov    DWORD PTR [eax],edx
c001c927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c92f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c936:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c939:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c944:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c947:	85 c0                	test   eax,eax
c001c949:	74 25                	je     c001c970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c94b:	83 ec 0c             	sub    esp,0xc
c001c94e:	68 b6 d9 01 c0       	push   0xc001d9b6
c001c953:	e8 6b 3d ff ff       	call   c00106c3 <KePanic(char const*)>
c001c958:	83 c4 10             	add    esp,0x10
c001c95b:	eb 13                	jmp    c001c970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c95d:	8d 76 00             	lea    esi,[esi+0x0]
c001c960:	83 ec 0c             	sub    esp,0xc
c001c963:	68 c0 d9 01 c0       	push   0xc001d9c0
c001c968:	e8 56 3d ff ff       	call   c00106c3 <KePanic(char const*)>
c001c96d:	83 c4 10             	add    esp,0x10
c001c970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c974:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c977:	8d 50 01             	lea    edx,[eax+0x1]
c001c97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c97e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c981:	90                   	nop
c001c982:	83 c4 0c             	add    esp,0xc
c001c985:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c988 <ACPI::~ACPI()>:
c001c988:	83 ec 0c             	sub    esp,0xc
c001c98b:	ba c4 e5 01 c0       	mov    edx,0xc001e5c4
c001c990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c994:	89 10                	mov    DWORD PTR [eax],edx
c001c996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c99a:	83 ec 0c             	sub    esp,0xc
c001c99d:	50                   	push   eax
c001c99e:	e8 93 f4 fe ff       	call   c000be36 <Device::~Device()>
c001c9a3:	83 c4 10             	add    esp,0x10
c001c9a6:	90                   	nop
c001c9a7:	83 c4 0c             	add    esp,0xc
c001c9aa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c9ac <ACPI::~ACPI()>:
c001c9ac:	83 ec 0c             	sub    esp,0xc
c001c9af:	83 ec 0c             	sub    esp,0xc
c001c9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9b6:	e8 cd ff ff ff       	call   c001c988 <ACPI::~ACPI()>
c001c9bb:	83 c4 10             	add    esp,0x10
c001c9be:	83 ec 08             	sub    esp,0x8
c001c9c1:	68 64 12 00 00       	push   0x1264
c001c9c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9ca:	e8 2f e0 fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001c9cf:	83 c4 10             	add    esp,0x10
c001c9d2:	83 c4 0c             	add    esp,0xc
c001c9d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c9d8 <LinkedList<Device>::~LinkedList()>:
c001c9d8:	90                   	nop
c001c9d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c9dc <LinkedList<Device>::isEmpty()>:
c001c9dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9e2:	85 c0                	test   eax,eax
c001c9e4:	75 0e                	jne    c001c9f4 <LinkedList<Device>::isEmpty()+0x18>
c001c9e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9ed:	85 c0                	test   eax,eax
c001c9ef:	75 03                	jne    c001c9f4 <LinkedList<Device>::isEmpty()+0x18>
c001c9f1:	b0 01                	mov    al,0x1
c001c9f3:	c3                   	ret    
c001c9f4:	b0 00                	mov    al,0x0
c001c9f6:	90                   	nop
c001c9f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c9f8 <LinkedList<Device>::getFirstElement()>:
c001c9f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ca00 <LinkedList<Device>::removeFirst()>:
c001ca00:	83 ec 0c             	sub    esp,0xc
c001ca03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca07:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca09:	85 c0                	test   eax,eax
c001ca0b:	75 17                	jne    c001ca24 <LinkedList<Device>::removeFirst()+0x24>
c001ca0d:	83 ec 0c             	sub    esp,0xc
c001ca10:	68 cc d9 01 c0       	push   0xc001d9cc
c001ca15:	e8 a9 3c ff ff       	call   c00106c3 <KePanic(char const*)>
c001ca1a:	83 c4 10             	add    esp,0x10
c001ca1d:	e9 92 00 00 00       	jmp    c001cab4 <LinkedList<Device>::removeFirst()+0xb4>
c001ca22:	66 90                	xchg   ax,ax
c001ca24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca2b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca31:	85 c0                	test   eax,eax
c001ca33:	74 13                	je     c001ca48 <LinkedList<Device>::removeFirst()+0x48>
c001ca35:	83 ec 0c             	sub    esp,0xc
c001ca38:	68 17 da 01 c0       	push   0xc001da17
c001ca3d:	e8 81 3c ff ff       	call   c00106c3 <KePanic(char const*)>
c001ca42:	83 c4 10             	add    esp,0x10
c001ca45:	8d 76 00             	lea    esi,[esi+0x0]
c001ca48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca4e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca54:	85 c0                	test   eax,eax
c001ca56:	75 34                	jne    c001ca8c <LinkedList<Device>::removeFirst()+0x8c>
c001ca58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca74:	83 f8 01             	cmp    eax,0x1
c001ca77:	74 27                	je     c001caa0 <LinkedList<Device>::removeFirst()+0xa0>
c001ca79:	83 ec 0c             	sub    esp,0xc
c001ca7c:	68 f0 d9 01 c0       	push   0xc001d9f0
c001ca81:	e8 3d 3c ff ff       	call   c00106c3 <KePanic(char const*)>
c001ca86:	83 c4 10             	add    esp,0x10
c001ca89:	eb 15                	jmp    c001caa0 <LinkedList<Device>::removeFirst()+0xa0>
c001ca8b:	90                   	nop
c001ca8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca92:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ca98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca9c:	89 10                	mov    DWORD PTR [eax],edx
c001ca9e:	66 90                	xchg   ax,ax
c001caa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001caa7:	8d 50 ff             	lea    edx,[eax-0x1]
c001caaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cab1:	8d 76 00             	lea    esi,[esi+0x0]
c001cab4:	83 c4 0c             	add    esp,0xc
c001cab7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001cab8 <CPU::~CPU()>:
c001cab8:	83 ec 0c             	sub    esp,0xc
c001cabb:	ba 60 e7 01 c0       	mov    edx,0xc001e760
c001cac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cac4:	89 10                	mov    DWORD PTR [eax],edx
c001cac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caca:	83 ec 0c             	sub    esp,0xc
c001cacd:	50                   	push   eax
c001cace:	e8 63 f3 fe ff       	call   c000be36 <Device::~Device()>
c001cad3:	83 c4 10             	add    esp,0x10
c001cad6:	90                   	nop
c001cad7:	83 c4 0c             	add    esp,0xc
c001cada:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001cadc <CPU::~CPU()>:
c001cadc:	83 ec 0c             	sub    esp,0xc
c001cadf:	83 ec 0c             	sub    esp,0xc
c001cae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cae6:	e8 cd ff ff ff       	call   c001cab8 <CPU::~CPU()>
c001caeb:	83 c4 10             	add    esp,0x10
c001caee:	83 ec 08             	sub    esp,0x8
c001caf1:	68 94 11 00 00       	push   0x1194
c001caf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cafa:	e8 ff de fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001caff:	83 c4 10             	add    esp,0x10
c001cb02:	83 c4 0c             	add    esp,0xc
c001cb05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cb08 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cb08:	90                   	nop
c001cb09:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cb0c <ThreadControlBlock::ThreadControlBlock()>:
c001cb0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb10:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cb17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb1b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cb22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb26:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cb2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb31:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cb38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb3c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cb43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb47:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cb4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb4f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb53:	90                   	nop
c001cb54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb98:	90                   	nop
c001cb99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cb9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cb9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cba0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cba3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cba4 <PCI::~PCI()>:
c001cba4:	83 ec 0c             	sub    esp,0xc
c001cba7:	ba 44 f2 01 c0       	mov    edx,0xc001f244
c001cbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb0:	89 10                	mov    DWORD PTR [eax],edx
c001cbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb6:	83 ec 0c             	sub    esp,0xc
c001cbb9:	50                   	push   eax
c001cbba:	e8 01 ed fe ff       	call   c000b8c0 <Bus::~Bus()>
c001cbbf:	83 c4 10             	add    esp,0x10
c001cbc2:	90                   	nop
c001cbc3:	83 c4 0c             	add    esp,0xc
c001cbc6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cbc8 <PCI::~PCI()>:
c001cbc8:	83 ec 0c             	sub    esp,0xc
c001cbcb:	83 ec 0c             	sub    esp,0xc
c001cbce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd2:	e8 cd ff ff ff       	call   c001cba4 <PCI::~PCI()>
c001cbd7:	83 c4 10             	add    esp,0x10
c001cbda:	83 ec 08             	sub    esp,0x8
c001cbdd:	68 5c 01 00 00       	push   0x15c
c001cbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe6:	e8 13 de fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001cbeb:	83 c4 10             	add    esp,0x10
c001cbee:	83 c4 0c             	add    esp,0xc
c001cbf1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cbf2 <IDE::~IDE()>:
c001cbf2:	83 ec 0c             	sub    esp,0xc
c001cbf5:	ba f8 f2 01 c0       	mov    edx,0xc001f2f8
c001cbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfe:	89 10                	mov    DWORD PTR [eax],edx
c001cc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc04:	83 ec 0c             	sub    esp,0xc
c001cc07:	50                   	push   eax
c001cc08:	e8 a3 f6 fe ff       	call   c000c2b0 <HardDiskController::~HardDiskController()>
c001cc0d:	83 c4 10             	add    esp,0x10
c001cc10:	90                   	nop
c001cc11:	83 c4 0c             	add    esp,0xc
c001cc14:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cc16 <IDE::~IDE()>:
c001cc16:	83 ec 0c             	sub    esp,0xc
c001cc19:	83 ec 0c             	sub    esp,0xc
c001cc1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc20:	e8 cd ff ff ff       	call   c001cbf2 <IDE::~IDE()>
c001cc25:	83 c4 10             	add    esp,0x10
c001cc28:	83 ec 08             	sub    esp,0x8
c001cc2b:	68 70 02 00 00       	push   0x270
c001cc30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc34:	e8 c5 dd fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001cc39:	83 c4 10             	add    esp,0x10
c001cc3c:	83 c4 0c             	add    esp,0xc
c001cc3f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cc40 <SATABus::~SATABus()>:
c001cc40:	83 ec 0c             	sub    esp,0xc
c001cc43:	ba 48 f3 01 c0       	mov    edx,0xc001f348
c001cc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc4c:	89 10                	mov    DWORD PTR [eax],edx
c001cc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc52:	83 ec 0c             	sub    esp,0xc
c001cc55:	50                   	push   eax
c001cc56:	e8 55 f6 fe ff       	call   c000c2b0 <HardDiskController::~HardDiskController()>
c001cc5b:	83 c4 10             	add    esp,0x10
c001cc5e:	90                   	nop
c001cc5f:	83 c4 0c             	add    esp,0xc
c001cc62:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cc64 <SATABus::~SATABus()>:
c001cc64:	83 ec 0c             	sub    esp,0xc
c001cc67:	83 ec 0c             	sub    esp,0xc
c001cc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6e:	e8 cd ff ff ff       	call   c001cc40 <SATABus::~SATABus()>
c001cc73:	83 c4 10             	add    esp,0x10
c001cc76:	83 ec 08             	sub    esp,0x8
c001cc79:	68 64 01 00 00       	push   0x164
c001cc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc82:	e8 77 dd fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001cc87:	83 c4 10             	add    esp,0x10
c001cc8a:	83 c4 0c             	add    esp,0xc
c001cc8d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cc8e <ATA::~ATA()>:
c001cc8e:	83 ec 0c             	sub    esp,0xc
c001cc91:	ba 88 f3 01 c0       	mov    edx,0xc001f388
c001cc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc9a:	89 10                	mov    DWORD PTR [eax],edx
c001cc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca0:	83 ec 0c             	sub    esp,0xc
c001cca3:	50                   	push   eax
c001cca4:	e8 e9 f6 fe ff       	call   c000c392 <PhysicalDisk::~PhysicalDisk()>
c001cca9:	83 c4 10             	add    esp,0x10
c001ccac:	90                   	nop
c001ccad:	83 c4 0c             	add    esp,0xc
c001ccb0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ccb2 <ATA::~ATA()>:
c001ccb2:	83 ec 0c             	sub    esp,0xc
c001ccb5:	83 ec 0c             	sub    esp,0xc
c001ccb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccbc:	e8 cd ff ff ff       	call   c001cc8e <ATA::~ATA()>
c001ccc1:	83 c4 10             	add    esp,0x10
c001ccc4:	83 ec 08             	sub    esp,0x8
c001ccc7:	68 7c 01 00 00       	push   0x17c
c001cccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccd0:	e8 29 dd fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001ccd5:	83 c4 10             	add    esp,0x10
c001ccd8:	83 c4 0c             	add    esp,0xc
c001ccdb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ccdc <ATAPI::~ATAPI()>:
c001ccdc:	83 ec 0c             	sub    esp,0xc
c001ccdf:	ba d0 f3 01 c0       	mov    edx,0xc001f3d0
c001cce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce8:	89 10                	mov    DWORD PTR [eax],edx
c001ccea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccee:	83 ec 0c             	sub    esp,0xc
c001ccf1:	50                   	push   eax
c001ccf2:	e8 9b f6 fe ff       	call   c000c392 <PhysicalDisk::~PhysicalDisk()>
c001ccf7:	83 c4 10             	add    esp,0x10
c001ccfa:	90                   	nop
c001ccfb:	83 c4 0c             	add    esp,0xc
c001ccfe:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cd00 <ATAPI::~ATAPI()>:
c001cd00:	83 ec 0c             	sub    esp,0xc
c001cd03:	83 ec 0c             	sub    esp,0xc
c001cd06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd0a:	e8 cd ff ff ff       	call   c001ccdc <ATAPI::~ATAPI()>
c001cd0f:	83 c4 10             	add    esp,0x10
c001cd12:	83 ec 08             	sub    esp,0x8
c001cd15:	68 84 01 00 00       	push   0x184
c001cd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd1e:	e8 db dc fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001cd23:	83 c4 10             	add    esp,0x10
c001cd26:	83 c4 0c             	add    esp,0xc
c001cd29:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cd2a <SATA::~SATA()>:
c001cd2a:	83 ec 0c             	sub    esp,0xc
c001cd2d:	ba 84 f4 01 c0       	mov    edx,0xc001f484
c001cd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd36:	89 10                	mov    DWORD PTR [eax],edx
c001cd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd3c:	83 ec 0c             	sub    esp,0xc
c001cd3f:	50                   	push   eax
c001cd40:	e8 4d f6 fe ff       	call   c000c392 <PhysicalDisk::~PhysicalDisk()>
c001cd45:	83 c4 10             	add    esp,0x10
c001cd48:	90                   	nop
c001cd49:	83 c4 0c             	add    esp,0xc
c001cd4c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cd4e <SATA::~SATA()>:
c001cd4e:	83 ec 0c             	sub    esp,0xc
c001cd51:	83 ec 0c             	sub    esp,0xc
c001cd54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd58:	e8 cd ff ff ff       	call   c001cd2a <SATA::~SATA()>
c001cd5d:	83 c4 10             	add    esp,0x10
c001cd60:	83 ec 08             	sub    esp,0x8
c001cd63:	68 7c 01 00 00       	push   0x17c
c001cd68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd6c:	e8 8d dc fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001cd71:	83 c4 10             	add    esp,0x10
c001cd74:	83 c4 0c             	add    esp,0xc
c001cd77:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cd78 <SATAPI::~SATAPI()>:
c001cd78:	83 ec 0c             	sub    esp,0xc
c001cd7b:	ba 14 f6 01 c0       	mov    edx,0xc001f614
c001cd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd84:	89 10                	mov    DWORD PTR [eax],edx
c001cd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd8a:	83 ec 0c             	sub    esp,0xc
c001cd8d:	50                   	push   eax
c001cd8e:	e8 ff f5 fe ff       	call   c000c392 <PhysicalDisk::~PhysicalDisk()>
c001cd93:	83 c4 10             	add    esp,0x10
c001cd96:	90                   	nop
c001cd97:	83 c4 0c             	add    esp,0xc
c001cd9a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cd9c <SATAPI::~SATAPI()>:
c001cd9c:	83 ec 0c             	sub    esp,0xc
c001cd9f:	83 ec 0c             	sub    esp,0xc
c001cda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda6:	e8 cd ff ff ff       	call   c001cd78 <SATAPI::~SATAPI()>
c001cdab:	83 c4 10             	add    esp,0x10
c001cdae:	83 ec 08             	sub    esp,0x8
c001cdb1:	68 84 01 00 00       	push   0x184
c001cdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdba:	e8 3f dc fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001cdbf:	83 c4 10             	add    esp,0x10
c001cdc2:	83 c4 0c             	add    esp,0xc
c001cdc5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cdc6 <IOAPIC::~IOAPIC()>:
c001cdc6:	83 ec 0c             	sub    esp,0xc
c001cdc9:	ba 54 f6 01 c0       	mov    edx,0xc001f654
c001cdce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd2:	89 10                	mov    DWORD PTR [eax],edx
c001cdd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd8:	83 ec 0c             	sub    esp,0xc
c001cddb:	50                   	push   eax
c001cddc:	e8 55 f0 fe ff       	call   c000be36 <Device::~Device()>
c001cde1:	83 c4 10             	add    esp,0x10
c001cde4:	90                   	nop
c001cde5:	83 c4 0c             	add    esp,0xc
c001cde8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cdea <IOAPIC::~IOAPIC()>:
c001cdea:	83 ec 0c             	sub    esp,0xc
c001cded:	83 ec 0c             	sub    esp,0xc
c001cdf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdf4:	e8 cd ff ff ff       	call   c001cdc6 <IOAPIC::~IOAPIC()>
c001cdf9:	83 c4 10             	add    esp,0x10
c001cdfc:	83 ec 08             	sub    esp,0x8
c001cdff:	68 68 01 00 00       	push   0x168
c001ce04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce08:	e8 f1 db fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001ce0d:	83 c4 10             	add    esp,0x10
c001ce10:	83 c4 0c             	add    esp,0xc
c001ce13:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ce14 <APICTimer::~APICTimer()>:
c001ce14:	83 ec 0c             	sub    esp,0xc
c001ce17:	ba 9c f6 01 c0       	mov    edx,0xc001f69c
c001ce1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce20:	89 10                	mov    DWORD PTR [eax],edx
c001ce22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce26:	83 ec 0c             	sub    esp,0xc
c001ce29:	50                   	push   eax
c001ce2a:	e8 05 09 ff ff       	call   c000d734 <Timer::~Timer()>
c001ce2f:	83 c4 10             	add    esp,0x10
c001ce32:	90                   	nop
c001ce33:	83 c4 0c             	add    esp,0xc
c001ce36:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ce38 <APICTimer::~APICTimer()>:
c001ce38:	83 ec 0c             	sub    esp,0xc
c001ce3b:	83 ec 0c             	sub    esp,0xc
c001ce3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce42:	e8 cd ff ff ff       	call   c001ce14 <APICTimer::~APICTimer()>
c001ce47:	83 c4 10             	add    esp,0x10
c001ce4a:	83 ec 08             	sub    esp,0x8
c001ce4d:	68 60 01 00 00       	push   0x160
c001ce52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce56:	e8 a3 db fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001ce5b:	83 c4 10             	add    esp,0x10
c001ce5e:	83 c4 0c             	add    esp,0xc
c001ce61:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ce64 <PIT::~PIT()>:
c001ce64:	83 ec 0c             	sub    esp,0xc
c001ce67:	ba ec f6 01 c0       	mov    edx,0xc001f6ec
c001ce6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce70:	89 10                	mov    DWORD PTR [eax],edx
c001ce72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce76:	83 ec 0c             	sub    esp,0xc
c001ce79:	50                   	push   eax
c001ce7a:	e8 b5 08 ff ff       	call   c000d734 <Timer::~Timer()>
c001ce7f:	83 c4 10             	add    esp,0x10
c001ce82:	90                   	nop
c001ce83:	83 c4 0c             	add    esp,0xc
c001ce86:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ce88 <PIT::~PIT()>:
c001ce88:	83 ec 0c             	sub    esp,0xc
c001ce8b:	83 ec 0c             	sub    esp,0xc
c001ce8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce92:	e8 cd ff ff ff       	call   c001ce64 <PIT::~PIT()>
c001ce97:	83 c4 10             	add    esp,0x10
c001ce9a:	83 ec 08             	sub    esp,0x8
c001ce9d:	68 5c 01 00 00       	push   0x15c
c001cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cea6:	e8 53 db fe ff       	call   c000a9fe <operator delete(void*, unsigned long)>
c001ceab:	83 c4 10             	add    esp,0x10
c001ceae:	83 c4 0c             	add    esp,0xc
c001ceb1:	c3                   	ret    
