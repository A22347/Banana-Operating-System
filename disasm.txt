
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 a3 82 02 00       	call   c00282c8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 72 8e 02 c0       	mov    ebx,0xc0028e72
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 80 8e 02 c0    	cmp    ebx,0xc0028e80
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 d6 02 c0       	mov    eax,0xc002d638
c0000049:	3d 38 d6 02 c0       	cmp    eax,0xc002d638
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 d6 02 c0       	push   0xc002d638
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 d6 02 c0       	mov    eax,0xc002d638
c0000075:	2d 38 d6 02 c0       	sub    eax,0xc002d638
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 d6 02 c0       	push   0xc002d638
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc68,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 88 8e 02 c0       	mov    ebx,0xc0028e88
c00000bb:	81 eb 84 8e 02 c0    	sub    ebx,0xc0028e84
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 84 8e 02 c0       	mov    esi,0xc0028e84
c00000ca:	a1 6c dc 02 c0       	mov    eax,ds:0xc002dc6c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c dc 02 c0       	mov    ds:0xc002dc6c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c dc 02 c0       	mov    eax,ds:0xc002dc6c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 d6 02 c0       	push   0xc002d638
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc68,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 dc 02 c0       	push   0xc002dc70
c000012c:	68 38 d6 02 c0       	push   0xc002d638
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 79 d2 01 00       	call   c001d614 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 cd 25 01 00       	call   c0012980 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 57 d2 01 00       	call   c001d614 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 a5 d6 01 00       	call   c001da81 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 53 dc 01 00       	call   c001e038 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 b0 e0 02 c0 	lgdtd  ds:0xc002e0b0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 b6 42 01 00       	call   c001488f <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 88 dc 02 c0       	mov    ds:0xc002dc88,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 88 dc 02 c0    	mov    DWORD PTR ds:0xc002dc88,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 88 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc88
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 a0 8e 02 c0 02 	test   BYTE PTR [edx-0x3ffd7160],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 a0 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd7160],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 a0 8e 02 c0 08 	test   BYTE PTR [edx-0x3ffd7160],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 a0 8e 02 c0 04 	test   BYTE PTR [ebx-0x3ffd7160],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 a0 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd7160],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d a0 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dca0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d a0 dc 02 c0    	mov    DWORD PTR ds:0xc002dca0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 a4 dc 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd235c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 a4 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd235c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d a0 dc 02 c0    	mov    DWORD PTR ds:0xc002dca0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 cc dc 02 c0    	cmp    DWORD PTR ds:0xc002dccc,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d dc dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dcdc
c0000e60:	c7 42 0c d4 dc 02 c0 	mov    DWORD PTR [edx+0xc],0xc002dcd4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 dc dc 02 c0    	mov    DWORD PTR ds:0xc002dcdc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 cc dc 02 c0    	mov    DWORD PTR ds:0xc002dccc,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 a0 dc 02 c0 02 	test   BYTE PTR ds:0xc002dca0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 a0 dc 02 c0       	mov    eax,0xc002dca0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d a0 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dca0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 a0 dc 02 c0       	mov    eax,0xc002dca0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 a4 dc 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd235c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 a4 dc 02 c0 	mov    DWORD PTR [edx*4-0x3ffd235c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 d4 dc 02 c0 	lea    edx,[eax*8-0x3ffd232c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 a0 dc 02 c0       	mov    eax,0xc002dca0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d e0 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dce0
c00011e2:	81 fb d4 dc 02 c0    	cmp    ebx,0xc002dcd4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d d4 dc 02 c0       	cmp    eax,0xc002dcd4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d d0 dc 02 c0    	cmp    DWORD PTR ds:0xc002dcd0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 dc dc 02 c0       	mov    ds:0xc002dcdc,eax
c000121e:	a3 e0 dc 02 c0       	mov    ds:0xc002dce0,eax
c0001223:	a3 d0 dc 02 c0       	mov    ds:0xc002dcd0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 d4 dc 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dcd4
c0001231:	c7 40 0c d4 dc 02 c0 	mov    DWORD PTR [eax+0xc],0xc002dcd4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 e0 dc 02 c0       	mov    ds:0xc002dce0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 d4 dc 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dcd4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 98 dc 02 c0 	lea    ebp,[edx*4-0x3ffd2368]
c0001282:	8b 14 95 a0 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2360]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 a0 dc 02 c0 	lea    ecx,[edx*4-0x3ffd2360]
c000129d:	8b 14 95 a0 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2360]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd d4 df 02 c0 	or     DWORD PTR [edi*4-0x3ffd202c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 d4 dc 02 c0 	lea    eax,[eax*8-0x3ffd232c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d dc dc 02 c0    	mov    DWORD PTR ds:0xc002dcdc,ecx
c0001357:	89 0d e0 dc 02 c0    	mov    DWORD PTR ds:0xc002dce0,ecx
c000135d:	c7 41 08 d4 dc 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002dcd4
c0001364:	c7 41 0c d4 dc 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002dcd4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd cc dc 02 c0 	lea    edx,[ecx*8-0x3ffd2334]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d d4 df 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd202c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d d4 df 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd202c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 cc dc 02 c0 	lea    edx,[eax*4-0x3ffd2334]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d d4 df 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd202c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d dc dc 02 c0    	mov    DWORD PTR ds:0xc002dcdc,edi
c000142a:	89 3d e0 dc 02 c0    	mov    DWORD PTR ds:0xc002dce0,edi
c0001430:	c7 47 08 d4 dc 02 c0 	mov    DWORD PTR [edi+0x8],0xc002dcd4
c0001437:	c7 47 0c d4 dc 02 c0 	mov    DWORD PTR [edi+0xc],0xc002dcd4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d d0 dc 02 c0    	mov    DWORD PTR ds:0xc002dcd0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 cc dc 02 c0       	mov    eax,ds:0xc002dccc
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d cc dc 02 c0    	mov    DWORD PTR ds:0xc002dccc,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba a0 dc 02 c0       	mov    edx,0xc002dca0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d a0 dc 02 c0 00 	cmp    DWORD PTR ds:0xc002dca0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 a0 dc 02 c0       	mov    eax,0xc002dca0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d f4 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dff4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 f4 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dff4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d f4 df 02 c0    	mov    DWORD PTR ds:0xc002dff4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 cc dc 02 c0    	cmp    DWORD PTR ds:0xc002dccc,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d cc dc 02 c0    	mov    DWORD PTR ds:0xc002dccc,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d a0 dc 02 c0 00 	cmp    DWORD PTR ds:0xc002dca0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 a0 dc 02 c0       	mov    eax,0xc002dca0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 fc df 02 c0    	push   DWORD PTR ds:0xc002dffc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d a0 dc 02 c0 00 	cmp    DWORD PTR ds:0xc002dca0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 a0 dc 02 c0       	mov    eax,0xc002dca0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 fc df 02 c0       	mov    eax,ds:0xc002dffc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 a0 dc 02 c0       	mov    eax,0xc002dca0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d cc dc 02 c0 00 	cmp    DWORD PTR ds:0xc002dccc,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 a0 dc 02 c0       	mov    eax,0xc002dca0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 cc dc 02 c0       	mov    eax,ds:0xc002dccc
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 a4 dc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd235c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 d4 dc 02 c0       	mov    eax,0xc002dcd4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d cc df 02 c0       	cmp    eax,0xc002dfcc
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 f0 df 02 c0    	mov    esi,DWORD PTR ds:0xc002dff0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 04 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e004
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 14 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e014
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 a0 dc 02 c0       	mov    eax,0xc002dca0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 a4 8f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd705c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 a0 dc 02 c0       	mov    eax,ds:0xc002dca0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 a0 dc 02 c0       	mov    ds:0xc002dca0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d e4 df 02 c0    	mov    DWORD PTR ds:0xc002dfe4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d e8 df 02 c0    	mov    DWORD PTR ds:0xc002dfe8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d ec df 02 c0    	mov    DWORD PTR ds:0xc002dfec,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 f4 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dff4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 80 17 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce880]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 04 ee 01 00       	jmp    c0020a30 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 80 17 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce880]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 35 ee 01 00       	jmp    c0020a77 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 80 17 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce880]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 5d ee 01 00       	jmp    c0020abe <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 e8 46 02 00       	call   c002662c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 c0 90 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6f40]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 c0 90 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6f40]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba c0 8f 02 c0       	mov    edx,0xc0028fc0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba e0 90 02 c0       	mov    edx,0xc00290e0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba ac c4 02 c0       	mov    edx,0xc002c4ac
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ec 90 02 c0       	mov    edx,0xc00290ec
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba d0 90 02 c0       	mov    edx,0xc00290d0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 40 e0 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1fc0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 20 e0 02 c0    	mov    ax,ds:0xc002e020
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 20 e0 02 c0    	mov    ds:0xc002e020,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 e5 34 02 00       	call   c002662c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 f2 90 02 c0       	mov    eax,0xc00290f2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 40 90 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6fc0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 fb 90 02 c0       	mov    eax,0xc00290fb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 c0 90 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6f40]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 b0 1e 02 00       	call   c002662c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba d0 90 02 c0       	mov    edx,0xc00290d0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba c0 8f 02 c0       	mov    edx,0xc0028fc0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba d0 8f 02 c0       	mov    edx,0xc0028fd0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 40 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1fc0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 40 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1fc0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 77 08 02 00       	call   c002662c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 5d 08 02 00       	call   c002662c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 17 90 02 c0       	mov    eax,0xc0029017
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 10 90 02 c0       	mov    eax,0xc0029010
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 40 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1fc0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 00 90 02 c0       	mov    esi,0xc0029000
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 a0 ef 01 00       	call   c002662c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba e0 90 02 c0       	mov    edx,0xc00290e0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba e0 8f 02 c0       	mov    edx,0xc0028fe0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba f0 8f 02 c0       	mov    edx,0xc0028ff0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 02 91 02 c0       	mov    edx,0xc0029102
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 0e 91 02 c0       	mov    edx,0xc002910e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 22 91 02 c0       	mov    edx,0xc0029122
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 40 94 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029440
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 40 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029440
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 40 92 02 c0       	mov    eax,0xc0029240
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 80 91 02 c0       	mov    eax,0xc0029180
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 40 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ec0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 f4 f8 01 00       	call   c00280ff <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 b7 f8 01 00       	call   c00280e1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 8b f8 01 00       	call   c00280ff <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 3e ef 01 00       	call   c0027804 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 b8 f9 01 00       	call   c0028290 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 05 f8 01 00       	call   c00280ff <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 47 f7 01 00       	call   c00280ff <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 14 f7 01 00       	call   c00280e1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 01 f6 01 00       	call   c00280ff <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 c9 f5 01 00       	call   c00280e1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 40 95 02 c0       	mov    eax,0xc0029540
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 d5 f3 01 00       	call   c00280ff <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 9a f3 01 00       	call   c00280e1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 a0 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6660]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 aa f0 01 00       	call   c0027e93 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 28 ea 01 00       	call   c0027830 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 e4 f2 01 00       	call   c0028103 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 d2 f3 01 00       	call   c0028227 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 bc e9 01 00       	call   c0027830 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 67 f2 01 00       	call   c00280fd <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 48 f2 01 00       	call   c0028101 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 d6 f3 01 00       	call   c00282b0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 88 ef 01 00       	call   c0027e93 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 06 e9 01 00       	call   c0027830 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 c2 f1 01 00       	call   c0028103 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 b0 f2 01 00       	call   c0028227 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 9a e8 01 00       	call   c0027830 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 45 f1 01 00       	call   c00280fd <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 25 f1 01 00       	call   c0028101 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 b2 f2 01 00       	call   c00282b0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 60 f0 01 00       	call   c00280ff <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 1e f0 01 00       	call   c00280e1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 06 f0 01 00       	call   c00280ff <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 78 ed 01 00       	call   c0027e93 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 7a e0 01 00       	call   c00271b3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 dd e6 01 00       	call   c0027830 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 2f ed 01 00       	call   c0027e93 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 35 e0 01 00       	call   c00271b3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 04 ed 01 00       	call   c0027e93 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 54 ef 01 00       	call   c00280fd <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 31 e6 01 00       	call   c0027804 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 ab f0 01 00       	call   c0028290 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 da ee 01 00       	call   c00280e1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 d5 e5 01 00       	call   c0027804 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 53 ec 01 00       	call   c0027e93 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 d6 e5 01 00       	call   c0027830 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 28 ec 01 00       	call   c0027e93 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 8f e8 01 00       	call   c0027b14 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 0e df 01 00       	call   c00271b3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 6e d8 01 00       	call   c0026b48 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 45 ef 01 00       	call   c0028227 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 2e e5 01 00       	call   c0027830 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 15 ef 01 00       	call   c0028227 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 87 de 01 00       	call   c00271b3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 c0 ed 01 00       	call   c0028103 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 a8 e7 01 00       	call   c0027b14 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 2e de 01 00       	call   c00271b3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 14 ef 01 00       	call   c00282b0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 ee ea 01 00       	call   c0027e93 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 45 e4 01 00       	call   c0027804 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 24 ed 01 00       	call   c00280ff <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 bd dd 01 00       	call   c00271b3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 e9 e3 01 00       	call   c0027804 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 83 ee 01 00       	call   c00282b0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 3c ea 01 00       	call   c0027e93 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 b9 e3 01 00       	call   c0027830 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 0c ea 01 00       	call   c0027e93 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 12 dd 01 00       	call   c00271b3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 e2 e9 01 00       	call   c0027e93 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 34 ec 01 00       	call   c00280ff <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 0b e3 01 00       	call   c0027804 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 85 ed 01 00       	call   c0028290 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 b4 eb 01 00       	call   c00280e1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 ae e2 01 00       	call   c0027804 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 2c e9 01 00       	call   c0027e93 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 af e2 01 00       	call   c0027830 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 01 e9 01 00       	call   c0027e93 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 68 e5 01 00       	call   c0027b14 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 e7 db 01 00       	call   c00271b3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 37 d5 01 00       	call   c0026b48 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 0e ec 01 00       	call   c0028227 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 f7 e1 01 00       	call   c0027830 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 de eb 01 00       	call   c0028227 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 50 db 01 00       	call   c00271b3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 89 ea 01 00       	call   c0028103 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 70 e4 01 00       	call   c0027b14 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 ef da 01 00       	call   c00271b3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 d5 eb 01 00       	call   c00282b0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 af e7 01 00       	call   c0027e93 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 06 e1 01 00       	call   c0027804 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 e5 e9 01 00       	call   c00280ff <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 7e da 01 00       	call   c00271b3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 aa e0 01 00       	call   c0027804 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 1f e7 01 00       	call   c0027e93 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 25 da 01 00       	call   c00271b3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 00 9a 02 c0       	mov    eax,0xc0029a00
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 14 9a 02 c0       	mov    eax,0xc0029a14
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 9a e5 01 00       	call   c0027e93 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 18 df 01 00       	call   c0027830 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 aa d1 01 00       	call   c0026b48 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 81 e8 01 00       	call   c0028227 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 6a de 01 00       	call   c0027830 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 4d e8 01 00       	call   c0028227 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 bf d7 01 00       	call   c00271b3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 1f e8 01 00       	call   c0028227 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 0e de 01 00       	call   c0027830 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 77 d7 01 00       	call   c00271b3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 98 d0 01 00       	call   c0026b48 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 6f e7 01 00       	call   c0028227 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 58 dd 01 00       	call   c0027830 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 3b e7 01 00       	call   c0028227 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 ad d6 01 00       	call   c00271b3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 0d e7 01 00       	call   c0028227 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 fc dc 01 00       	call   c0027830 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 65 d6 01 00       	call   c00271b3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 43 d6 01 00       	call   c00271b3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 1f cf 01 00       	call   c0026b48 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 f6 e5 01 00       	call   c0028227 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 df db 01 00       	call   c0027830 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 c2 e5 01 00       	call   c0028227 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 34 d5 01 00       	call   c00271b3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 94 e5 01 00       	call   c0028227 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 7d db 01 00       	call   c0027830 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 e6 d4 01 00       	call   c00271b3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 46 e5 01 00       	call   c0028227 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 2f db 01 00       	call   c0027830 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 98 d4 01 00       	call   c00271b3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 ad cd 01 00       	call   c0026b48 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 84 e4 01 00       	call   c0028227 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 6d da 01 00       	call   c0027830 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 54 e4 01 00       	call   c0028227 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 c6 d3 01 00       	call   c00271b3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 26 e4 01 00       	call   c0028227 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 0f da 01 00       	call   c0027830 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 78 d3 01 00       	call   c00271b3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 d8 e3 01 00       	call   c0028227 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 c1 d9 01 00       	call   c0027830 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 2a d3 01 00       	call   c00271b3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 fe d2 01 00       	call   c00271b3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 5b d9 01 00       	call   c0027830 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 17 e2 01 00       	call   c0028103 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 a6 d2 01 00       	call   c00271b3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 03 d9 01 00       	call   c0027830 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 bf e1 01 00       	call   c0028103 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 39 cb 01 00       	call   c0026b48 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 10 e2 01 00       	call   c0028227 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 f9 d7 01 00       	call   c0027830 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 dc e1 01 00       	call   c0028227 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 4e d1 01 00       	call   c00271b3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 ae e1 01 00       	call   c0028227 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 97 d7 01 00       	call   c0027830 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 00 d1 01 00       	call   c00271b3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 60 e1 01 00       	call   c0028227 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 49 d7 01 00       	call   c0027830 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 b2 d0 01 00       	call   c00271b3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 12 e1 01 00       	call   c0028227 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 fb d6 01 00       	call   c0027830 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 64 d0 01 00       	call   c00271b3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 c4 e0 01 00       	call   c0028227 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 ad d6 01 00       	call   c0027830 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 16 d0 01 00       	call   c00271b3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 18 c9 01 00       	call   c0026b48 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 ef df 01 00       	call   c0028227 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 d8 d5 01 00       	call   c0027830 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 bf df 01 00       	call   c0028227 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 31 cf 01 00       	call   c00271b3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 91 df 01 00       	call   c0028227 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 7a d5 01 00       	call   c0027830 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 e3 ce 01 00       	call   c00271b3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 43 df 01 00       	call   c0028227 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 2c d5 01 00       	call   c0027830 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 95 ce 01 00       	call   c00271b3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 f5 de 01 00       	call   c0028227 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 de d4 01 00       	call   c0027830 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 47 ce 01 00       	call   c00271b3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 a7 de 01 00       	call   c0028227 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 90 d4 01 00       	call   c0027830 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 f9 cd 01 00       	call   c00271b3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 cd cd 01 00       	call   c00271b3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 2a d4 01 00       	call   c0027830 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 e6 dc 01 00       	call   c0028103 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 75 cd 01 00       	call   c00271b3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 d2 d3 01 00       	call   c0027830 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 8e dc 01 00       	call   c0028103 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 1c cd 01 00       	call   c00271b3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 79 d3 01 00       	call   c0027830 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 35 dc 01 00       	call   c0028103 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 c3 cc 01 00       	call   c00271b3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 20 d3 01 00       	call   c0027830 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 dc db 01 00       	call   c0028103 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 3a c5 01 00       	call   c0026b48 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 11 dc 01 00       	call   c0028227 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 fa d1 01 00       	call   c0027830 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 dd db 01 00       	call   c0028227 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 4f cb 01 00       	call   c00271b3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 af db 01 00       	call   c0028227 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 98 d1 01 00       	call   c0027830 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 01 cb 01 00       	call   c00271b3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 61 db 01 00       	call   c0028227 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 4a d1 01 00       	call   c0027830 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 b3 ca 01 00       	call   c00271b3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 13 db 01 00       	call   c0028227 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 fc d0 01 00       	call   c0027830 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 65 ca 01 00       	call   c00271b3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 c5 da 01 00       	call   c0028227 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 ae d0 01 00       	call   c0027830 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 17 ca 01 00       	call   c00271b3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 77 da 01 00       	call   c0028227 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 60 d0 01 00       	call   c0027830 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 c6 c9 01 00       	call   c00271b3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 26 da 01 00       	call   c0028227 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 0f d0 01 00       	call   c0027830 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 78 c9 01 00       	call   c00271b3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 72 c2 01 00       	call   c0026b48 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 49 d9 01 00       	call   c0028227 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 32 cf 01 00       	call   c0027830 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 12 d9 01 00       	call   c0028227 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 84 c8 01 00       	call   c00271b3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 e4 d8 01 00       	call   c0028227 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 cd ce 01 00       	call   c0027830 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 36 c8 01 00       	call   c00271b3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 96 d8 01 00       	call   c0028227 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 7f ce 01 00       	call   c0027830 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 e8 c7 01 00       	call   c00271b3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 48 d8 01 00       	call   c0028227 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 31 ce 01 00       	call   c0027830 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 9a c7 01 00       	call   c00271b3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 fa d7 01 00       	call   c0028227 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 e3 cd 01 00       	call   c0027830 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 4c c7 01 00       	call   c00271b3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 ac d7 01 00       	call   c0028227 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 95 cd 01 00       	call   c0027830 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 fb c6 01 00       	call   c00271b3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 5b d7 01 00       	call   c0028227 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 44 cd 01 00       	call   c0027830 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 b3 c6 01 00       	call   c00271b3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 8c c6 01 00       	call   c00271b3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 ea cc 01 00       	call   c0027830 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 a6 d5 01 00       	call   c0028103 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 35 c6 01 00       	call   c00271b3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 93 cc 01 00       	call   c0027830 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 4f d5 01 00       	call   c0028103 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 dd c5 01 00       	call   c00271b3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 3b cc 01 00       	call   c0027830 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 f7 d4 01 00       	call   c0028103 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 85 c5 01 00       	call   c00271b3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 e3 cb 01 00       	call   c0027830 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 9f d4 01 00       	call   c0028103 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 2d c5 01 00       	call   c00271b3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 8b cb 01 00       	call   c0027830 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 47 d4 01 00       	call   c0028103 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 db c4 01 00       	call   c00271b3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 39 cb 01 00       	call   c0027830 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 f5 d3 01 00       	call   c0028103 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 09 bd 01 00       	call   c0026b48 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 e0 d3 01 00       	call   c0028227 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 c9 c9 01 00       	call   c0027830 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 b0 d3 01 00       	call   c0028227 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 22 c3 01 00       	call   c00271b3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 44 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65bc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 56 d3 01 00       	call   c0028227 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 3f c9 01 00       	call   c0027830 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 aa c2 01 00       	call   c00271b3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 f7 d2 01 00       	call   c0028227 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 e0 c8 01 00       	call   c0027830 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 4b c2 01 00       	call   c00271b3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 98 d2 01 00       	call   c0028227 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 81 c8 01 00       	call   c0027830 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 ec c1 01 00       	call   c00271b3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 39 d2 01 00       	call   c0028227 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 22 c8 01 00       	call   c0027830 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 8d c1 01 00       	call   c00271b3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 da d1 01 00       	call   c0028227 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 c3 c7 01 00       	call   c0027830 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 2e c1 01 00       	call   c00271b3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 7b d1 01 00       	call   c0028227 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 64 c7 01 00       	call   c0027830 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 cf c0 01 00       	call   c00271b3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 1c d1 01 00       	call   c0028227 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 05 c7 01 00       	call   c0027830 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 70 c0 01 00       	call   c00271b3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 bd d0 01 00       	call   c0028227 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 a6 c6 01 00       	call   c0027830 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 11 c0 01 00       	call   c00271b3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 1b b9 01 00       	call   c0026b48 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 f2 cf 01 00       	call   c0028227 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 db c5 01 00       	call   c0027830 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 c2 cf 01 00       	call   c0028227 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 34 bf 01 00       	call   c00271b3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 60 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65a0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 67 cf 01 00       	call   c0028227 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 50 c5 01 00       	call   c0027830 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 bb be 01 00       	call   c00271b3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 07 cf 01 00       	call   c0028227 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 f0 c4 01 00       	call   c0027830 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 5b be 01 00       	call   c00271b3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 a7 ce 01 00       	call   c0028227 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 90 c4 01 00       	call   c0027830 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 fb bd 01 00       	call   c00271b3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 47 ce 01 00       	call   c0028227 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 30 c4 01 00       	call   c0027830 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 9b bd 01 00       	call   c00271b3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 e7 cd 01 00       	call   c0028227 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 d0 c3 01 00       	call   c0027830 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 3b bd 01 00       	call   c00271b3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 87 cd 01 00       	call   c0028227 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 70 c3 01 00       	call   c0027830 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 db bc 01 00       	call   c00271b3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 27 cd 01 00       	call   c0028227 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 10 c3 01 00       	call   c0027830 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 7b bc 01 00       	call   c00271b3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 c7 cc 01 00       	call   c0028227 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 b0 c2 01 00       	call   c0027830 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 1b bc 01 00       	call   c00271b3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 7c 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6584]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 c0 bb 01 00       	call   c00271b3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 1d c2 01 00       	call   c0027830 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 d9 ca 01 00       	call   c0028103 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 63 bb 01 00       	call   c00271b3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 c0 c1 01 00       	call   c0027830 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 7c ca 01 00       	call   c0028103 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 06 bb 01 00       	call   c00271b3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 63 c1 01 00       	call   c0027830 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 1f ca 01 00       	call   c0028103 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 a9 ba 01 00       	call   c00271b3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 06 c1 01 00       	call   c0027830 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 c2 c9 01 00       	call   c0028103 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 4c ba 01 00       	call   c00271b3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 a9 c0 01 00       	call   c0027830 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 65 c9 01 00       	call   c0028103 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 ef b9 01 00       	call   c00271b3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 4c c0 01 00       	call   c0027830 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 08 c9 01 00       	call   c0028103 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 92 b9 01 00       	call   c00271b3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 ef bf 01 00       	call   c0027830 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 ab c8 01 00       	call   c0028103 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 35 b9 01 00       	call   c00271b3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 92 bf 01 00       	call   c0027830 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 4e c8 01 00       	call   c0028103 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 4a bf 01 00       	call   c0027830 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 ba c9 01 00       	jmp    c00282b0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 2c c6 01 00       	call   c00280ff <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 ea c5 01 00       	call   c00280e1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 81 c3 01 00       	call   c0027e93 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 82 b6 01 00       	call   c00271b3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 51 c3 01 00       	call   c0027e93 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 b8 bf 01 00       	call   c0027b14 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 57 c5 01 00       	call   c00280e1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 5a c5 01 00       	call   c00280ff <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 2d c5 01 00       	call   c00280ff <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 26 bf 01 00       	call   c0027b14 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 a8 c6 01 00       	call   c00282b0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 83 c6 01 00       	call   c00282b0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 5d c2 01 00       	call   c0027e93 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 b4 bb 01 00       	call   c0027804 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 93 c4 01 00       	call   c00280ff <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 2c b5 01 00       	call   c00271b3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 50 bb 01 00       	call   c0027804 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 ea c5 01 00       	call   c00282b0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 2a be 01 00       	call   c0027b14 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 a7 b4 01 00       	call   c00271b3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 d3 c0 01 00       	call   c0027e93 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 d3 b3 01 00       	call   c00271b3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 b3 b3 01 00       	call   c00271b3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 83 c0 01 00       	call   c0027e93 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 d3 c2 01 00       	call   c00280fd <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 b2 b9 01 00       	call   c0027804 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 2c c4 01 00       	call   c0028290 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 5b c2 01 00       	call   c00280e1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 59 b9 01 00       	call   c0027804 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 d7 bf 01 00       	call   c0027e93 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 5a b9 01 00       	call   c0027830 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 ac bf 01 00       	call   c0027e93 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 13 bc 01 00       	call   c0027b14 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 92 b2 01 00       	call   c00271b3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 5c bf 01 00       	call   c0027e93 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 a8 c1 01 00       	call   c00280ff <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 9d b8 01 00       	call   c0027830 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 6f b8 01 00       	call   c0027830 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 a8 be 01 00       	call   c0027e93 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 0c bb 01 00       	call   c0027b14 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 d4 ba 01 00       	call   c0027b14 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 53 b1 01 00       	call   c00271b3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 38 c2 01 00       	call   c00282b0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 12 be 01 00       	call   c0027e93 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 69 b7 01 00       	call   c0027804 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 48 c0 01 00       	call   c00280ff <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 e0 b0 01 00       	call   c00271b3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 04 b7 01 00       	call   c0027804 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 9e c1 01 00       	call   c00282b0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 67 bf 01 00       	call   c00280ff <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 25 bf 01 00       	call   c00280e1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 bc bc 01 00       	call   c0027e93 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 bd af 01 00       	call   c00271b3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 8c bc 01 00       	call   c0027e93 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 f3 b8 01 00       	call   c0027b14 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 92 be 01 00       	call   c00280e1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 95 be 01 00       	call   c00280ff <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 68 be 01 00       	call   c00280ff <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 61 b8 01 00       	call   c0027b14 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 e3 bf 01 00       	call   c00282b0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 be bf 01 00       	call   c00282b0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 98 bb 01 00       	call   c0027e93 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 ef b4 01 00       	call   c0027804 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 ce bd 01 00       	call   c00280ff <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 67 ae 01 00       	call   c00271b3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 8b b4 01 00       	call   c0027804 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 25 bf 01 00       	call   c00282b0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 65 b7 01 00       	call   c0027b14 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 e2 ad 01 00       	call   c00271b3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 0d ba 01 00       	call   c0027e93 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 0d ad 01 00       	call   c00271b3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 ed ac 01 00       	call   c00271b3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 bd b9 01 00       	call   c0027e93 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 0d bc 01 00       	call   c00280fd <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 eb b2 01 00       	call   c0027804 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 65 bd 01 00       	call   c0028290 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 94 bb 01 00       	call   c00280e1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 91 b2 01 00       	call   c0027804 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 0f b9 01 00       	call   c0027e93 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 92 b2 01 00       	call   c0027830 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 e4 b8 01 00       	call   c0027e93 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 4b b5 01 00       	call   c0027b14 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 ca ab 01 00       	call   c00271b3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 94 b8 01 00       	call   c0027e93 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 e0 ba 01 00       	call   c00280ff <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 d5 b1 01 00       	call   c0027830 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 a7 b1 01 00       	call   c0027830 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 de b7 01 00       	call   c0027e93 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 42 b4 01 00       	call   c0027b14 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 0f b4 01 00       	call   c0027b14 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 8e aa 01 00       	call   c00271b3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 73 bb 01 00       	call   c00282b0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 4d b7 01 00       	call   c0027e93 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 a4 b0 01 00       	call   c0027804 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 83 b9 01 00       	call   c00280ff <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 1b aa 01 00       	call   c00271b3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 3f b0 01 00       	call   c0027804 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 d9 ba 01 00       	call   c00282b0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 a2 b8 01 00       	call   c00280ff <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 60 b8 01 00       	call   c00280e1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 f7 b5 01 00       	call   c0027e93 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 f8 a8 01 00       	call   c00271b3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 c7 b5 01 00       	call   c0027e93 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 2e b2 01 00       	call   c0027b14 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 cd b7 01 00       	call   c00280e1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 d0 b7 01 00       	call   c00280ff <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 a3 b7 01 00       	call   c00280ff <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 9c b1 01 00       	call   c0027b14 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 1e b9 01 00       	call   c00282b0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 f9 b8 01 00       	call   c00282b0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 d3 b4 01 00       	call   c0027e93 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 2a ae 01 00       	call   c0027804 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 09 b7 01 00       	call   c00280ff <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 a2 a7 01 00       	call   c00271b3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 c6 ad 01 00       	call   c0027804 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 60 b8 01 00       	call   c00282b0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 a0 b0 01 00       	call   c0027b14 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 1d a7 01 00       	call   c00271b3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 48 b3 01 00       	call   c0027e93 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 48 a6 01 00       	call   c00271b3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 28 a6 01 00       	call   c00271b3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 f8 b2 01 00       	call   c0027e93 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 48 b5 01 00       	call   c00280fd <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 26 ac 01 00       	call   c0027804 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 a0 b6 01 00       	call   c0028290 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 cf b4 01 00       	call   c00280e1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 cc ab 01 00       	call   c0027804 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 4a b2 01 00       	call   c0027e93 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 cd ab 01 00       	call   c0027830 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 1f b2 01 00       	call   c0027e93 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 86 ae 01 00       	call   c0027b14 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 05 a5 01 00       	call   c00271b3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 cf b1 01 00       	call   c0027e93 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 1b b4 01 00       	call   c00280ff <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 10 ab 01 00       	call   c0027830 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 e2 aa 01 00       	call   c0027830 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 19 b1 01 00       	call   c0027e93 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 7d ad 01 00       	call   c0027b14 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 4a ad 01 00       	call   c0027b14 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 c9 a3 01 00       	call   c00271b3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 ae b4 01 00       	call   c00282b0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 88 b0 01 00       	call   c0027e93 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 df a9 01 00       	call   c0027804 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 be b2 01 00       	call   c00280ff <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 56 a3 01 00       	call   c00271b3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 7a a9 01 00       	call   c0027804 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 14 b4 01 00       	call   c00282b0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 dd b1 01 00       	call   c00280ff <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 9b b1 01 00       	call   c00280e1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 32 af 01 00       	call   c0027e93 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 33 a2 01 00       	call   c00271b3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 02 af 01 00       	call   c0027e93 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 69 ab 01 00       	call   c0027b14 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 08 b1 01 00       	call   c00280e1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 0b b1 01 00       	call   c00280ff <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 de b0 01 00       	call   c00280ff <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 d7 aa 01 00       	call   c0027b14 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 59 b2 01 00       	call   c00282b0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 34 b2 01 00       	call   c00282b0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 0e ae 01 00       	call   c0027e93 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 65 a7 01 00       	call   c0027804 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 44 b0 01 00       	call   c00280ff <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 dd a0 01 00       	call   c00271b3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 01 a7 01 00       	call   c0027804 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 9b b1 01 00       	call   c00282b0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 db a9 01 00       	call   c0027b14 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 58 a0 01 00       	call   c00271b3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 83 ac 01 00       	call   c0027e93 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 83 9f 01 00       	call   c00271b3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 63 9f 01 00       	call   c00271b3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 33 ac 01 00       	call   c0027e93 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 83 ae 01 00       	call   c00280fd <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 61 a5 01 00       	call   c0027804 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 db af 01 00       	call   c0028290 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 0a ae 01 00       	call   c00280e1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 07 a5 01 00       	call   c0027804 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 85 ab 01 00       	call   c0027e93 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 08 a5 01 00       	call   c0027830 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 5a ab 01 00       	call   c0027e93 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 c1 a7 01 00       	call   c0027b14 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 40 9e 01 00       	call   c00271b3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 0a ab 01 00       	call   c0027e93 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 56 ad 01 00       	call   c00280ff <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 4b a4 01 00       	call   c0027830 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 1d a4 01 00       	call   c0027830 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 54 aa 01 00       	call   c0027e93 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 b8 a6 01 00       	call   c0027b14 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 85 a6 01 00       	call   c0027b14 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 04 9d 01 00       	call   c00271b3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 e9 ad 01 00       	call   c00282b0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 c3 a9 01 00       	call   c0027e93 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 1a a3 01 00       	call   c0027804 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 f9 ab 01 00       	call   c00280ff <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 91 9c 01 00       	call   c00271b3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 b5 a2 01 00       	call   c0027804 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 4f ad 01 00       	call   c00282b0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 15 ab 01 00       	call   c00280ff <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 d3 aa 01 00       	call   c00280e1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 6a a8 01 00       	call   c0027e93 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 6b 9b 01 00       	call   c00271b3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 3a a8 01 00       	call   c0027e93 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 a1 a4 01 00       	call   c0027b14 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 40 aa 01 00       	call   c00280e1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 43 aa 01 00       	call   c00280ff <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 16 aa 01 00       	call   c00280ff <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 0f a4 01 00       	call   c0027b14 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 91 ab 01 00       	call   c00282b0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 68 ab 01 00       	call   c00282b0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 42 a7 01 00       	call   c0027e93 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 99 a0 01 00       	call   c0027804 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 78 a9 01 00       	call   c00280ff <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 11 9a 01 00       	call   c00271b3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 39 a0 01 00       	call   c0027804 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 d3 aa 01 00       	call   c00282b0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 14 a3 01 00       	call   c0027b14 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 91 99 01 00       	call   c00271b3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 bd a5 01 00       	call   c0027e93 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 bd 98 01 00       	call   c00271b3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 9d 98 01 00       	call   c00271b3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 6d a5 01 00       	call   c0027e93 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 a1 a7 01 00       	call   c00280e1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 98 9e 01 00       	call   c0027804 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 12 a9 01 00       	call   c0028290 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 41 a7 01 00       	call   c00280e1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 3b 9e 01 00       	call   c0027804 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 b9 a4 01 00       	call   c0027e93 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 3c 9e 01 00       	call   c0027830 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 8e a4 01 00       	call   c0027e93 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 f5 a0 01 00       	call   c0027b14 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 74 97 01 00       	call   c00271b3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 3e a4 01 00       	call   c0027e93 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 8a a6 01 00       	call   c00280ff <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 7f 9d 01 00       	call   c0027830 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 51 9d 01 00       	call   c0027830 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 95 a3 01 00       	call   c0027e93 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 fc 9f 01 00       	call   c0027b14 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 e5 9c 01 00       	call   c0027830 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 a1 a5 01 00       	call   c0028103 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 94 9f 01 00       	call   c0027b14 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 13 96 01 00       	call   c00271b3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 f8 a6 01 00       	call   c00282b0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 d2 a2 01 00       	call   c0027e93 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 29 9c 01 00       	call   c0027804 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 08 a5 01 00       	call   c00280ff <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 a0 95 01 00       	call   c00271b3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 c8 9b 01 00       	call   c0027804 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 62 a6 01 00       	call   c00282b0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 a4 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd655c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 98 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6568]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 1d a3 01 00       	call   c00280ff <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 db a2 01 00       	call   c00280e1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 c7 a2 01 00       	call   c00280ff <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 39 a0 01 00       	call   c0027e93 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 b7 99 01 00       	call   c0027830 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 09 a0 01 00       	call   c0027e93 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 0f 93 01 00       	call   c00271b3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 de 9f 01 00       	call   c0027e93 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 2e a2 01 00       	call   c00280fd <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 0f 99 01 00       	call   c0027804 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 89 a3 01 00       	call   c0028290 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 b8 a1 01 00       	call   c00280e1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 b7 98 01 00       	call   c0027804 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 35 9f 01 00       	call   c0027e93 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 b8 98 01 00       	call   c0027830 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 0a 9f 01 00       	call   c0027e93 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 71 9b 01 00       	call   c0027b14 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 f0 91 01 00       	call   c00271b3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 18 9b 01 00       	call   c0027b14 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 9e 91 01 00       	call   c00271b3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 84 a2 01 00       	call   c00282b0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 5e 9e 01 00       	call   c0027e93 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 b5 97 01 00       	call   c0027804 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 94 a0 01 00       	call   c00280ff <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 2d 91 01 00       	call   c00271b3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 59 97 01 00       	call   c0027804 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 f3 a1 01 00       	call   c00282b0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 a8 9d 01 00       	call   c0027e93 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 25 97 01 00       	call   c0027830 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 76 9d 01 00       	call   c0027e93 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 7c 90 01 00       	call   c00271b3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 4c 9d 01 00       	call   c0027e93 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 a0 9f 01 00       	call   c0028101 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 79 96 01 00       	call   c0027804 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 f3 a0 01 00       	call   c0028290 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 22 9f 01 00       	call   c00280e1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 20 96 01 00       	call   c0027804 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 9e 9c 01 00       	call   c0027e93 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 21 96 01 00       	call   c0027830 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 73 9c 01 00       	call   c0027e93 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 da 98 01 00       	call   c0027b14 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 59 8f 01 00       	call   c00271b3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 75 98 01 00       	call   c0027b14 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 f4 8e 01 00       	call   c00271b3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 da 9f 01 00       	call   c00282b0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 b4 9b 01 00       	call   c0027e93 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 0b 95 01 00       	call   c0027804 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 ea 9d 01 00       	call   c00280ff <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 83 8e 01 00       	call   c00271b3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 af 94 01 00       	call   c0027804 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 20 9b 01 00       	call   c0027e93 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 26 8e 01 00       	call   c00271b3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 be 9b 02 c0       	mov    eax,0xc0029bbe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 cf 9b 02 c0       	mov    eax,0xc0029bcf
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 06 9c 02 c0       	push   0xc0029c06
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 a8 e0 02 c0       	mov    eax,0xc002e0a8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 0f 9c 02 c0       	push   0xc0029c0f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 2c 66 02 c0       	mov    eax,0xc002662c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 19 9c 02 c0       	push   0xc0029c19
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 60 63 02 c0       	mov    eax,0xc0026360
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 22 9c 02 c0       	push   0xc0029c22
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 2c 67 02 c0       	mov    eax,0xc002672c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 2c 9c 02 c0       	push   0xc0029c2c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 ac 64 02 c0       	mov    eax,0xc00264ac
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 35 9c 02 c0       	push   0xc0029c35
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 ac e0 02 c0       	mov    eax,0xc002e0ac
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 42 9c 02 c0       	push   0xc0029c42
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 ad e0 02 c0       	mov    eax,0xc002e0ad
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 27 5b 00 00       	call   c001414a <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 14 16 03 c0    	push   DWORD PTR ds:0xc0031614
c000e668:	68 4f 9c 02 c0       	push   0xc0029c4f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 0d f2 00 00       	call   c001d882 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 f6 f4 00 00       	call   c001db80 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 de e3 01 c0       	push   0xc001e3de
c000e693:	ff 35 14 16 03 c0    	push   DWORD PTR ds:0xc0031614
c000e699:	e8 e2 f4 00 00       	call   c001db80 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 c8 15 03 c0       	mov    ds:0xc00315c8,eax
c000e6a6:	c6 05 ad e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0ad,0x1
c000e6ad:	e8 ad 00 01 00       	call   c001e75f <Vm::initialise8086()>
c000e6b2:	e8 7b 48 00 00       	call   c0012f32 <Fs::initVFS()>
c000e6b7:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 3f db 00 00       	call   c001c212 <Sys::loadSyscalls()>
c000e6d3:	e8 18 ba 00 00       	call   c001a0f0 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 5c 9c 02 c0       	push   0xc0029c5c
c000e6e2:	68 65 9c 02 c0       	push   0xc0029c65
c000e6e7:	e8 2a c7 00 00       	call   c001ae16 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 26 53 00 00       	call   c0013a1a <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 19 5a 00 00       	call   c001411e <Device::loadDriversForAll()>
c000e705:	e8 2c b5 00 00       	call   c0019c36 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d a8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0a8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 6d 9c 02 c0       	push   0xc0029c6d
c000e719:	e8 88 ec 00 00       	call   c001d3a6 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 b3 ee 00 00       	call   c001d5da <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 b0 f7 00 00       	call   c001dee4 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 89 9c 02 c0       	push   0xc0029c89
c000e749:	50                   	push   eax
c000e74a:	e8 75 5a 00 00       	call   c00141c4 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 28 9e 02 c0       	mov    edx,0xc0029e28
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 c1 e0 02 c0 04 	test   BYTE PTR ds:0xc002e0c1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 13 7a 01 00       	call   c00262f6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 2a a0 00 00       	call   c0018948 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 03 a0 00 00       	call   c0018948 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 e1 9f 00 00       	call   c0018948 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 bf 9f 00 00       	call   c0018948 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 c0 e0 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e0c0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 cd 9e 00 00       	call   c00188c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 a8 9e 00 00       	call   c00188c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 7d 78 01 00       	call   c00262b0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 3a 78 01 00       	call   c0026290 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 c4 9e 00 00       	call   c0018948 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 99 9c 02 c0       	push   0xc0029c99
c000eaaf:	e8 fa 40 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ac 9c 02 c0       	push   0xc0029cac
c000ead2:	e8 d7 40 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 bd 9c 02 c0       	push   0xc0029cbd
c000eaf5:	e8 b4 40 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 ce 9c 02 c0       	push   0xc0029cce
c000eb18:	e8 91 40 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 df 9c 02 c0       	push   0xc0029cdf
c000eb3b:	e8 6e 40 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 f0 9c 02 c0       	push   0xc0029cf0
c000eb5e:	e8 4b 40 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 01 9d 02 c0       	push   0xc0029d01
c000eb81:	e8 28 40 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 12 9d 02 c0       	push   0xc0029d12
c000eba4:	e8 05 40 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 23 9d 02 c0       	push   0xc0029d23
c000ebc7:	e8 e2 3f 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 34 9d 02 c0       	push   0xc0029d34
c000ebea:	e8 bf 3f 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 45 9d 02 c0       	push   0xc0029d45
c000ec0d:	e8 9c 3f 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 56 9d 02 c0       	push   0xc0029d56
c000ec30:	e8 79 3f 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 67 9d 02 c0       	push   0xc0029d67
c000ec53:	e8 56 3f 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 78 9d 02 c0       	push   0xc0029d78
c000ec76:	e8 33 3f 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 89 9d 02 c0       	push   0xc0029d89
c000ec99:	e8 10 3f 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 9a 9d 02 c0       	push   0xc0029d9a
c000ecbc:	e8 ed 3e 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 ab 9d 02 c0       	push   0xc0029dab
c000ecdf:	e8 ca 3e 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 bc 9d 02 c0       	push   0xc0029dbc
c000ed02:	e8 a7 3e 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 cd 9d 02 c0       	push   0xc0029dcd
c000ed21:	e8 88 3e 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 10 b7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b710
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 77 3e 00 00       	jmp    c0012bae <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 de 9d 02 c0       	push   0xc0029dde
c000ee0a:	e8 1a b4 00 00       	call   c001a229 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 e4 9d 02 c0       	push   0xc0029de4
c000ee42:	e8 e2 b3 00 00       	call   c001a229 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 c0 e0 02 c0 04 	test   BYTE PTR ds:0xc002e0c0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 e4 cf 02 c0 	sete   BYTE PTR ds:0xc002cfe4
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 63 8f 00 00       	call   c0017e18 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 10 51 00 00       	call   c0013fd4 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 0c 9b 00 00       	call   c0018a00 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 d1 50 00 00       	call   c0013fd4 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 3b 56 00 00       	call   c001455a <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 a1 50 00 00       	call   c0013fd4 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 2b ed 00 00       	call   c001dc80 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 ea 9d 02 c0       	push   0xc0029dea
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 0b 3c 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 fb 9d 02 c0       	push   0xc0029dfb
c000efc0:	e8 64 b2 00 00       	call   c001a229 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 08 9e 02 c0       	push   0xc0029e08
c000efd5:	e8 4f b2 00 00       	call   c001a229 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 12 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029e12
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 38 b2 00 00       	jmp    c001a229 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 4c 9e 02 c0       	push   0xc0029e4c
c000f086:	e8 23 3b 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 b2 e0 02 c0       	mov    ds:0xc002e0b2,eax
c000f0c7:	66 89 15 b0 e0 02 c0 	mov    WORD PTR ds:0xc002e0b0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 72 e8 00 00       	call   c001da50 <unlockScheduler()>
c000f1de:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 a8 e0 02 c0    	push   DWORD PTR ds:0xc002e0a8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 04 91 01 00       	call   c0028330 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 fb 90 01 00       	call   c0028330 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 b8 e0 02 c0 ff 07 	mov    WORD PTR ds:0xc002e0b8,0x7ff
c000f323:	a3 ba e0 02 c0       	mov    ds:0xc002e0ba,eax
c000f328:	0f 01 1d b8 e0 02 c0 	lidtd  ds:0xc002e0b8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 9c 26 00 00       	call   c0011cb1 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 cc 2c 00 00       	call   c00122ec <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 14 1e 00 00       	call   c0011452 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 45 1e 00 00       	call   c0011492 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 a8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0a8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d c0 cf 02 c0    	mov    ecx,DWORD PTR ds:0xc002cfc0
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 c0 cf 02 c0       	mov    eax,ds:0xc002cfc0
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 68 9e 02 c0       	push   0xc0029e68
c000f6f4:	e8 b5 34 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 c0 cf 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002cfc0,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 92 25 00 00       	call   c0011cb1 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d c0 cf 02 c0    	mov    ebp,DWORD PTR ds:0xc002cfc0
c000f727:	e8 b3 07 00 00       	call   c000fedf <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 b3 2a 00 00       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d c0 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cfc0
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 98 9e 02 c0       	push   0xc0029e98
c000f7ad:	e8 77 aa 00 00       	call   c001a229 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 9d 9e 02 c0       	push   0xc0029e9d
c000f7c3:	e8 61 aa 00 00       	call   c001a229 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 75 e2 00 00       	call   c001da4e <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 66 e2 00 00       	call   c001da50 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 b6 24 00 00       	call   c0011cb1 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 e2 2a 00 00       	call   c00122ec <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 9b 24 00 00       	call   c0011cb1 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 85 27 00 00       	call   c0011fa8 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 40 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e140,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 e0 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cfe0
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 40 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e140,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 40 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e140,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 40 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e140,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 40 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e140,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 34 0c 00 00       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 40 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e140,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 f6 0b 00 00       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 8d 0c 00 00       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 e0 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cfe0
c000fb46:	80 3d 40 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e140,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d e0 cf 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002cfe0,0x8000
c000fba0:	c6 05 40 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e140,0x1
c000fba7:	c7 05 78 e1 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e178,0xc000fa13
c000fbb1:	c7 05 64 e1 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e164,0xc000f89a
c000fbbb:	c7 05 60 e1 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e160,0xc000f8e5
c000fbc5:	c7 05 6c e1 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e16c,0xc000fa59
c000fbcf:	c7 05 74 e1 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e174,0xc000f963
c000fbd9:	c7 05 68 e1 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e168,0xc000f9c1
c000fbe3:	c7 05 70 e1 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e170,0xc000f9c2
c000fbed:	c7 05 7c e1 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e17c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 74 09 00 00       	call   c001057e <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 a4 9e 02 c0       	push   0xc0029ea4
c000fc4a:	e8 5f 2f 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	8d 98 ff 0f 00 00    	lea    ebx,[eax+0xfff]
c000fc5a:	e8 d3 1f 00 00       	call   c0011c32 <Virt::virtualMemorySetup()>
c000fc5f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000fc65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc68:	e8 cc 03 00 00       	call   c0010039 <Phys::physicalMemorySetup(unsigned int)>
c000fc6d:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc73:	83 c4 10             	add    esp,0x10
c000fc76:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7c:	75 0e                	jne    c000fc8c <kernel_main+0x94>
c000fc7e:	89 d8                	mov    eax,ebx
c000fc80:	25 48 03 00 00       	and    eax,0x348
c000fc85:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8a:	74 10                	je     c000fc9c <kernel_main+0xa4>
c000fc8c:	83 ec 0c             	sub    esp,0xc
c000fc8f:	68 11 b7 02 c0       	push   0xc002b711
c000fc94:	e8 90 a5 00 00       	call   c001a229 <Krnl::panic(char const*)>
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	83 ec 0c             	sub    esp,0xc
c000fc9f:	89 1d c0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c0,ebx
c000fca5:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca9:	53                   	push   ebx
c000fcaa:	e8 37 21 00 00       	call   c0011de6 <VAS::VAS()>
c000fcaf:	89 1d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,ebx
c000fcb5:	e8 66 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcba:	c7 04 24 bb 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ebb
c000fcc1:	e8 e8 2e 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000fcc6:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fccd:	e8 6e fb ff ff       	call   c000f840 <malloc>
c000fcd2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd5:	89 c6                	mov    esi,eax
c000fcd7:	e8 5e ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdc:	58                   	pop    eax
c000fcdd:	89 35 a8 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a8,esi
c000fce3:	5a                   	pop    edx
c000fce4:	56                   	push   esi
c000fce5:	68 d8 9e 02 c0       	push   0xc0029ed8
c000fcea:	e8 bf 2e 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000fcef:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c000fcf4:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf6:	6a 00                	push   0x0
c000fcf8:	6a 00                	push   0x0
c000fcfa:	6a 00                	push   0x0
c000fcfc:	50                   	push   eax
c000fcfd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd00:	83 c4 14             	add    esp,0x14
c000fd03:	53                   	push   ebx
c000fd04:	e8 77 23 00 00       	call   c0012080 <VAS::~VAS()>
c000fd09:	c7 04 24 eb 9e 02 c0 	mov    DWORD PTR [esp],0xc0029eeb
c000fd10:	e8 14 a5 00 00       	call   c001a229 <Krnl::panic(char const*)>
c000fd15:	83 c4 20             	add    esp,0x20
c000fd18:	5b                   	pop    ebx
c000fd19:	5e                   	pop    esi
c000fd1a:	5f                   	pop    edi
c000fd1b:	c3                   	ret    

c000fd1c <Phys::allocateDMA(unsigned long)>:
c000fd1c:	55                   	push   ebp
c000fd1d:	31 d2                	xor    edx,edx
c000fd1f:	57                   	push   edi
c000fd20:	31 ed                	xor    ebp,ebp
c000fd22:	56                   	push   esi
c000fd23:	31 c9                	xor    ecx,ecx
c000fd25:	53                   	push   ebx
c000fd26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd30:	31 c0                	xor    eax,eax
c000fd32:	c1 ee 0c             	shr    esi,0xc
c000fd35:	eb 17                	jmp    c000fd4e <Phys::allocateDMA(unsigned long)+0x32>
c000fd37:	85 c9                	test   ecx,ecx
c000fd39:	75 04                	jne    c000fd3f <Phys::allocateDMA(unsigned long)+0x23>
c000fd3b:	89 d5                	mov    ebp,edx
c000fd3d:	89 d0                	mov    eax,edx
c000fd3f:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd42:	39 de                	cmp    esi,ebx
c000fd44:	74 20                	je     c000fd66 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd46:	42                   	inc    edx
c000fd47:	89 d9                	mov    ecx,ebx
c000fd49:	83 fa 2f             	cmp    edx,0x2f
c000fd4c:	7f 11                	jg     c000fd5f <Phys::allocateDMA(unsigned long)+0x43>
c000fd4e:	80 ba 00 e1 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1f00],0x0
c000fd55:	74 e0                	je     c000fd37 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd57:	31 c9                	xor    ecx,ecx
c000fd59:	42                   	inc    edx
c000fd5a:	83 fa 2f             	cmp    edx,0x2f
c000fd5d:	7e ef                	jle    c000fd4e <Phys::allocateDMA(unsigned long)+0x32>
c000fd5f:	5b                   	pop    ebx
c000fd60:	31 c0                	xor    eax,eax
c000fd62:	5e                   	pop    esi
c000fd63:	5f                   	pop    edi
c000fd64:	5d                   	pop    ebp
c000fd65:	c3                   	ret    
c000fd66:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd69:	89 d7                	mov    edi,edx
c000fd6b:	4f                   	dec    edi
c000fd6c:	79 03                	jns    c000fd71 <Phys::allocateDMA(unsigned long)+0x55>
c000fd6e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd71:	c1 ff 04             	sar    edi,0x4
c000fd74:	89 c2                	mov    edx,eax
c000fd76:	c1 fa 04             	sar    edx,0x4
c000fd79:	39 fa                	cmp    edx,edi
c000fd7b:	75 2f                	jne    c000fdac <Phys::allocateDMA(unsigned long)+0x90>
c000fd7d:	85 db                	test   ebx,ebx
c000fd7f:	74 1a                	je     c000fd9b <Phys::allocateDMA(unsigned long)+0x7f>
c000fd81:	be 00 e1 02 c0       	mov    esi,0xc002e100
c000fd86:	8d 90 00 e1 02 c0    	lea    edx,[eax-0x3ffd1f00]
c000fd8c:	f7 d6                	not    esi
c000fd8e:	29 c6                	sub    esi,eax
c000fd90:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd93:	42                   	inc    edx
c000fd94:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd97:	39 d9                	cmp    ecx,ebx
c000fd99:	7f f5                	jg     c000fd90 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9b:	85 ff                	test   edi,edi
c000fd9d:	74 13                	je     c000fdb2 <Phys::allocateDMA(unsigned long)+0x96>
c000fd9f:	5b                   	pop    ebx
c000fda0:	05 50 20 0c 00       	add    eax,0xc2050
c000fda5:	5e                   	pop    esi
c000fda6:	c1 e0 0c             	shl    eax,0xc
c000fda9:	5f                   	pop    edi
c000fdaa:	5d                   	pop    ebp
c000fdab:	c3                   	ret    
c000fdac:	89 ea                	mov    edx,ebp
c000fdae:	31 c9                	xor    ecx,ecx
c000fdb0:	eb a7                	jmp    c000fd59 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb2:	5b                   	pop    ebx
c000fdb3:	c1 e0 0c             	shl    eax,0xc
c000fdb6:	5e                   	pop    esi
c000fdb7:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbc:	5f                   	pop    edi
c000fdbd:	5d                   	pop    ebp
c000fdbe:	c3                   	ret    

c000fdbf <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc7:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdcd:	c1 e9 0c             	shr    ecx,0xc
c000fdd0:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd5:	76 25                	jbe    c000fdfc <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd7:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddc:	c1 e8 0c             	shr    eax,0xc
c000fddf:	8d 50 10             	lea    edx,[eax+0x10]
c000fde2:	85 c9                	test   ecx,ecx
c000fde4:	74 15                	je     c000fdfb <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde6:	8d 82 00 e1 02 c0    	lea    eax,[edx-0x3ffd1f00]
c000fdec:	8d 94 11 00 e1 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1f00]
c000fdf3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf6:	40                   	inc    eax
c000fdf7:	39 d0                	cmp    eax,edx
c000fdf9:	75 f8                	jne    c000fdf3 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfb:	c3                   	ret    
c000fdfc:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe02:	c1 ea 0c             	shr    edx,0xc
c000fe05:	eb db                	jmp    c000fde2 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe07 <Phys::setPageState(unsigned long, bool)>:
c000fe07:	56                   	push   esi
c000fe08:	ba 01 00 00 00       	mov    edx,0x1
c000fe0d:	53                   	push   ebx
c000fe0e:	8b 35 c4 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cfc4
c000fe14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1c:	89 c8                	mov    eax,ecx
c000fe1e:	83 e1 07             	and    ecx,0x7
c000fe21:	c1 e8 03             	shr    eax,0x3
c000fe24:	d3 e3                	shl    ebx,cl
c000fe26:	01 c6                	add    esi,eax
c000fe28:	d3 e2                	shl    edx,cl
c000fe2a:	f7 d2                	not    edx
c000fe2c:	20 16                	and    BYTE PTR [esi],dl
c000fe2e:	03 05 c4 cf 02 c0    	add    eax,DWORD PTR ds:0xc002cfc4
c000fe34:	08 18                	or     BYTE PTR [eax],bl
c000fe36:	5b                   	pop    ebx
c000fe37:	5e                   	pop    esi
c000fe38:	c3                   	ret    

c000fe39 <Phys::getPageState(unsigned long)>:
c000fe39:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3d:	8b 15 c4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cfc4
c000fe43:	89 c8                	mov    eax,ecx
c000fe45:	83 e1 07             	and    ecx,0x7
c000fe48:	c1 e8 03             	shr    eax,0x3
c000fe4b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe4f:	d3 f8                	sar    eax,cl
c000fe51:	83 e0 01             	and    eax,0x1
c000fe54:	c3                   	ret    

c000fe55 <Phys::freePage(unsigned long)>:
c000fe55:	53                   	push   ebx
c000fe56:	83 ec 08             	sub    esp,0x8
c000fe59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5d:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe63:	76 57                	jbe    c000febc <Phys::freePage(unsigned long)+0x67>
c000fe65:	c1 eb 0c             	shr    ebx,0xc
c000fe68:	53                   	push   ebx
c000fe69:	e8 cb ff ff ff       	call   c000fe39 <Phys::getPageState(unsigned long)>
c000fe6e:	5a                   	pop    edx
c000fe6f:	84 c0                	test   al,al
c000fe71:	74 5b                	je     c000fece <Phys::freePage(unsigned long)+0x79>
c000fe73:	a1 ec e0 02 c0       	mov    eax,ds:0xc002e0ec
c000fe78:	48                   	dec    eax
c000fe79:	a3 ec e0 02 c0       	mov    ds:0xc002e0ec,eax
c000fe7e:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	c1 e0 02             	shl    eax,0x2
c000fe87:	99                   	cdq    
c000fe88:	f7 3d f0 e0 02 c0    	idiv   DWORD PTR ds:0xc002e0f0
c000fe8e:	39 05 e8 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e8,eax
c000fe94:	75 13                	jne    c000fea9 <Phys::freePage(unsigned long)+0x54>
c000fe96:	83 ec 08             	sub    esp,0x8
c000fe99:	6a 00                	push   0x0
c000fe9b:	53                   	push   ebx
c000fe9c:	e8 66 ff ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c000fea1:	83 c4 10             	add    esp,0x10
c000fea4:	83 c4 08             	add    esp,0x8
c000fea7:	5b                   	pop    ebx
c000fea8:	c3                   	ret    
c000fea9:	83 ec 0c             	sub    esp,0xc
c000feac:	a3 e8 e0 02 c0       	mov    ds:0xc002e0e8,eax
c000feb1:	50                   	push   eax
c000feb2:	e8 5b 0a 00 00       	call   c0010912 <VgaText::updateRAMUsageDisplay(int)>
c000feb7:	83 c4 10             	add    esp,0x10
c000feba:	eb da                	jmp    c000fe96 <Phys::freePage(unsigned long)+0x41>
c000febc:	68 00 10 00 00       	push   0x1000
c000fec1:	53                   	push   ebx
c000fec2:	e8 f8 fe ff ff       	call   c000fdbf <Phys::freeDMA(unsigned long, unsigned long)>
c000fec7:	59                   	pop    ecx
c000fec8:	5b                   	pop    ebx
c000fec9:	83 c4 08             	add    esp,0x8
c000fecc:	5b                   	pop    ebx
c000fecd:	c3                   	ret    
c000fece:	c7 44 24 10 06 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029f06
c000fed6:	83 c4 08             	add    esp,0x8
c000fed9:	5b                   	pop    ebx
c000feda:	e9 4a a3 00 00       	jmp    c001a229 <Krnl::panic(char const*)>

c000fedf <Phys::allocatePage()>:
c000fedf:	56                   	push   esi
c000fee0:	53                   	push   ebx
c000fee1:	51                   	push   ecx
c000fee2:	8b 35 e0 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e0e0
c000fee8:	89 f3                	mov    ebx,esi
c000feea:	eb 0a                	jmp    c000fef6 <Phys::allocatePage()+0x17>
c000feec:	89 1d e0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0e0,ebx
c000fef2:	39 de                	cmp    esi,ebx
c000fef4:	74 24                	je     c000ff1a <Phys::allocatePage()+0x3b>
c000fef6:	53                   	push   ebx
c000fef7:	e8 3d ff ff ff       	call   c000fe39 <Phys::getPageState(unsigned long)>
c000fefc:	5a                   	pop    edx
c000fefd:	84 c0                	test   al,al
c000feff:	74 5a                	je     c000ff5b <Phys::allocatePage()+0x7c>
c000ff01:	43                   	inc    ebx
c000ff02:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff08:	75 e2                	jne    c000feec <Phys::allocatePage()+0xd>
c000ff0a:	31 db                	xor    ebx,ebx
c000ff0c:	c7 05 e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0e0,0x0
c000ff16:	39 de                	cmp    esi,ebx
c000ff18:	75 dc                	jne    c000fef6 <Phys::allocatePage()+0x17>
c000ff1a:	83 ec 0c             	sub    esp,0xc
c000ff1d:	68 1c 9f 02 c0       	push   0xc0029f1c
c000ff22:	e8 87 2c 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c000ff27:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff2e:	e8 e9 fd ff ff       	call   c000fd1c <Phys::allocateDMA(unsigned long)>
c000ff33:	83 c4 10             	add    esp,0x10
c000ff36:	85 c0                	test   eax,eax
c000ff38:	75 56                	jne    c000ff90 <Phys::allocatePage()+0xb1>
c000ff3a:	83 ec 0c             	sub    esp,0xc
c000ff3d:	68 2d 9f 02 c0       	push   0xc0029f2d
c000ff42:	e8 e2 a2 00 00       	call   c001a229 <Krnl::panic(char const*)>
c000ff47:	83 c4 10             	add    esp,0x10
c000ff4a:	8b 1d e0 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0e0
c000ff50:	53                   	push   ebx
c000ff51:	e8 e3 fe ff ff       	call   c000fe39 <Phys::getPageState(unsigned long)>
c000ff56:	5a                   	pop    edx
c000ff57:	84 c0                	test   al,al
c000ff59:	75 a6                	jne    c000ff01 <Phys::allocatePage()+0x22>
c000ff5b:	6a 01                	push   0x1
c000ff5d:	53                   	push   ebx
c000ff5e:	e8 a4 fe ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c000ff63:	a1 ec e0 02 c0       	mov    eax,ds:0xc002e0ec
c000ff68:	59                   	pop    ecx
c000ff69:	40                   	inc    eax
c000ff6a:	5b                   	pop    ebx
c000ff6b:	a3 ec e0 02 c0       	mov    ds:0xc002e0ec,eax
c000ff70:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff73:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff76:	c1 e0 02             	shl    eax,0x2
c000ff79:	99                   	cdq    
c000ff7a:	f7 3d f0 e0 02 c0    	idiv   DWORD PTR ds:0xc002e0f0
c000ff80:	39 05 e8 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e8,eax
c000ff86:	75 0c                	jne    c000ff94 <Phys::allocatePage()+0xb5>
c000ff88:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c000ff8d:	c1 e0 0c             	shl    eax,0xc
c000ff90:	5a                   	pop    edx
c000ff91:	5b                   	pop    ebx
c000ff92:	5e                   	pop    esi
c000ff93:	c3                   	ret    
c000ff94:	83 ec 0c             	sub    esp,0xc
c000ff97:	a3 e8 e0 02 c0       	mov    ds:0xc002e0e8,eax
c000ff9c:	50                   	push   eax
c000ff9d:	e8 70 09 00 00       	call   c0010912 <VgaText::updateRAMUsageDisplay(int)>
c000ffa2:	83 c4 10             	add    esp,0x10
c000ffa5:	eb e1                	jmp    c000ff88 <Phys::allocatePage()+0xa9>

c000ffa7 <Phys::allocateContiguousPages(int)>:
c000ffa7:	57                   	push   edi
c000ffa8:	56                   	push   esi
c000ffa9:	53                   	push   ebx
c000ffaa:	31 db                	xor    ebx,ebx
c000ffac:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffb0:	e8 99 da 00 00       	call   c001da4e <lockScheduler()>
c000ffb5:	85 db                	test   ebx,ebx
c000ffb7:	75 11                	jne    c000ffca <Phys::allocateContiguousPages(int)+0x23>
c000ffb9:	e8 21 ff ff ff       	call   c000fedf <Phys::allocatePage()>
c000ffbe:	83 ff 01             	cmp    edi,0x1
c000ffc1:	89 c6                	mov    esi,eax
c000ffc3:	74 21                	je     c000ffe6 <Phys::allocateContiguousPages(int)+0x3f>
c000ffc5:	bb 01 00 00 00       	mov    ebx,0x1
c000ffca:	e8 10 ff ff ff       	call   c000fedf <Phys::allocatePage()>
c000ffcf:	89 da                	mov    edx,ebx
c000ffd1:	c1 e2 0c             	shl    edx,0xc
c000ffd4:	01 f2                	add    edx,esi
c000ffd6:	39 c2                	cmp    edx,eax
c000ffd8:	74 17                	je     c000fff1 <Phys::allocateContiguousPages(int)+0x4a>
c000ffda:	bb 01 00 00 00       	mov    ebx,0x1
c000ffdf:	89 c6                	mov    esi,eax
c000ffe1:	83 ff 01             	cmp    edi,0x1
c000ffe4:	75 e4                	jne    c000ffca <Phys::allocateContiguousPages(int)+0x23>
c000ffe6:	e8 65 da 00 00       	call   c001da50 <unlockScheduler()>
c000ffeb:	89 f0                	mov    eax,esi
c000ffed:	5b                   	pop    ebx
c000ffee:	5e                   	pop    esi
c000ffef:	5f                   	pop    edi
c000fff0:	c3                   	ret    
c000fff1:	43                   	inc    ebx
c000fff2:	39 fb                	cmp    ebx,edi
c000fff4:	75 bf                	jne    c000ffb5 <Phys::allocateContiguousPages(int)+0xe>
c000fff6:	e8 55 da 00 00       	call   c001da50 <unlockScheduler()>
c000fffb:	89 f0                	mov    eax,esi
c000fffd:	5b                   	pop    ebx
c000fffe:	5e                   	pop    esi
c000ffff:	5f                   	pop    edi
c0010000:	c3                   	ret    

c0010001 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010001:	56                   	push   esi
c0010002:	53                   	push   ebx
c0010003:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010007:	39 1d e4 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e4,ebx
c001000d:	73 06                	jae    c0010015 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001000f:	89 1d e4 e0 02 c0    	mov    DWORD PTR ds:0xc002e0e4,ebx
c0010015:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010019:	c1 eb 0c             	shr    ebx,0xc
c001001c:	c1 e8 0c             	shr    eax,0xc
c001001f:	39 d8                	cmp    eax,ebx
c0010021:	73 13                	jae    c0010036 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010023:	6a 00                	push   0x0
c0010025:	8d 70 01             	lea    esi,[eax+0x1]
c0010028:	50                   	push   eax
c0010029:	e8 d9 fd ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c001002e:	5a                   	pop    edx
c001002f:	89 f0                	mov    eax,esi
c0010031:	59                   	pop    ecx
c0010032:	39 f3                	cmp    ebx,esi
c0010034:	75 ed                	jne    c0010023 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010036:	5b                   	pop    ebx
c0010037:	5e                   	pop    esi
c0010038:	c3                   	ret    

c0010039 <Phys::physicalMemorySetup(unsigned int)>:
c0010039:	55                   	push   ebp
c001003a:	57                   	push   edi
c001003b:	56                   	push   esi
c001003c:	53                   	push   ebx
c001003d:	31 db                	xor    ebx,ebx
c001003f:	83 ec 40             	sub    esp,0x40
c0010042:	6a 30                	push   0x30
c0010044:	6a 00                	push   0x0
c0010046:	68 00 e1 02 c0       	push   0xc002e100
c001004b:	e8 28 07 ff ff       	call   c0000778 <memset>
c0010050:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010054:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010059:	05 00 10 00 00       	add    eax,0x1000
c001005e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010062:	83 c4 10             	add    esp,0x10
c0010065:	83 ec 08             	sub    esp,0x8
c0010068:	6a 01                	push   0x1
c001006a:	53                   	push   ebx
c001006b:	43                   	inc    ebx
c001006c:	e8 96 fd ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c0010071:	83 c4 10             	add    esp,0x10
c0010074:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001007a:	75 e9                	jne    c0010065 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001007c:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010083:	66 85 c0             	test   ax,ax
c0010086:	0f 84 8e 01 00 00    	je     c001021a <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001008c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010090:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010098:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001009c:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100a5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100ad:	eb 15                	jmp    c00100c4 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100af:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100b3:	83 c3 18             	add    ebx,0x18
c00100b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100ba:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100be:	0f 84 66 01 00 00    	je     c001022a <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100c4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100c7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100d1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100d5:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100d7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100da:	01 f0                	add    eax,esi
c00100dc:	55                   	push   ebp
c00100dd:	11 fa                	adc    edx,edi
c00100df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100e3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00100eb:	56                   	push   esi
c00100ec:	68 68 9f 02 c0       	push   0xc0029f68
c00100f1:	e8 b8 2a 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00100f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100fa:	83 c4 10             	add    esp,0x10
c00100fd:	09 f8                	or     eax,edi
c00100ff:	0f 85 25 01 00 00    	jne    c001022a <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010105:	4d                   	dec    ebp
c0010106:	75 a7                	jne    c00100af <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010108:	ba 00 00 08 00       	mov    edx,0x80000
c001010d:	89 c1                	mov    ecx,eax
c001010f:	39 f2                	cmp    edx,esi
c0010111:	19 f9                	sbb    ecx,edi
c0010113:	0f 82 a7 00 00 00    	jb     c00101c0 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010119:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001011d:	89 c1                	mov    ecx,eax
c001011f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010123:	0f 83 97 00 00 00    	jae    c00101c0 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010129:	ba 00 00 0a 00       	mov    edx,0xa0000
c001012e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010132:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010136:	39 fa                	cmp    edx,edi
c0010138:	19 e8                	sbb    eax,ebp
c001013a:	0f 82 14 01 00 00    	jb     c0010254 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010140:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010144:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010148:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001014e:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010153:	83 d5 ff             	adc    ebp,0xffffffff
c0010156:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001015a:	31 c0                	xor    eax,eax
c001015c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010160:	39 fa                	cmp    edx,edi
c0010162:	89 c1                	mov    ecx,eax
c0010164:	19 e9                	sbb    ecx,ebp
c0010166:	0f 83 43 ff ff ff    	jae    c00100af <Phys::physicalMemorySetup(unsigned int)+0x76>
c001016c:	be 00 00 08 00       	mov    esi,0x80000
c0010171:	50                   	push   eax
c0010172:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010176:	57                   	push   edi
c0010177:	56                   	push   esi
c0010178:	68 8c 9f 02 c0       	push   0xc0029f8c
c001017d:	e8 2c 2a 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0010182:	5a                   	pop    edx
c0010183:	59                   	pop    ecx
c0010184:	57                   	push   edi
c0010185:	56                   	push   esi
c0010186:	e8 76 fe ff ff       	call   c0010001 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001018b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001018f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010193:	83 c4 0c             	add    esp,0xc
c0010196:	0f ac d0 0c          	shrd   eax,edx,0xc
c001019a:	03 05 f0 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e0f0
c00101a0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101a7:	a3 f0 e0 02 c0       	mov    ds:0xc002e0f0,eax
c00101ac:	52                   	push   edx
c00101ad:	50                   	push   eax
c00101ae:	68 49 9f 02 c0       	push   0xc0029f49
c00101b3:	e8 f6 29 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00101b8:	83 c4 10             	add    esp,0x10
c00101bb:	e9 ef fe ff ff       	jmp    c00100af <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101cc:	39 ea                	cmp    edx,ebp
c00101ce:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101d2:	0f 82 d7 fe ff ff    	jb     c00100af <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101dd:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101e1:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101e5:	0f 83 c4 fe ff ff    	jae    c00100af <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101eb:	39 ee                	cmp    esi,ebp
c00101ed:	89 f8                	mov    eax,edi
c00101ef:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00101f3:	0f 83 78 ff ff ff    	jae    c0010171 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00101f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010201:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010205:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010209:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001020d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010215:	e9 57 ff ff ff       	jmp    c0010171 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001021a:	83 ec 0c             	sub    esp,0xc
c001021d:	68 3b 9f 02 c0       	push   0xc0029f3b
c0010222:	e8 02 a0 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0010227:	83 c4 10             	add    esp,0x10
c001022a:	bb 40 01 00 00       	mov    ebx,0x140
c001022f:	83 ec 08             	sub    esp,0x8
c0010232:	6a 00                	push   0x0
c0010234:	53                   	push   ebx
c0010235:	43                   	inc    ebx
c0010236:	e8 cc fb ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c001023b:	ff 05 f0 e0 02 c0    	inc    DWORD PTR ds:0xc002e0f0
c0010241:	83 c4 10             	add    esp,0x10
c0010244:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001024a:	75 e3                	jne    c001022f <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001024c:	83 c4 3c             	add    esp,0x3c
c001024f:	5b                   	pop    ebx
c0010250:	5e                   	pop    esi
c0010251:	5f                   	pop    edi
c0010252:	5d                   	pop    ebp
c0010253:	c3                   	ret    
c0010254:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001025c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010264:	e9 d7 fe ff ff       	jmp    c0010140 <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010269:	90                   	nop

c001026a <Pipe::isAtty()>:
c001026a:	31 c0                	xor    eax,eax
c001026c:	c3                   	ret    
c001026d:	90                   	nop

c001026e <Pipe::~Pipe()>:
c001026e:	83 ec 0c             	sub    esp,0xc
c0010271:	ba f8 9f 02 c0       	mov    edx,0xc0029ff8
c0010276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027a:	89 10                	mov    DWORD PTR [eax],edx
c001027c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010280:	83 ec 0c             	sub    esp,0xc
c0010283:	50                   	push   eax
c0010284:	e8 37 16 00 00       	call   c00118c0 <UnixFile::~UnixFile()>
c0010289:	83 c4 10             	add    esp,0x10
c001028c:	90                   	nop
c001028d:	83 c4 0c             	add    esp,0xc
c0010290:	c3                   	ret    
c0010291:	90                   	nop

c0010292 <Pipe::~Pipe()>:
c0010292:	83 ec 0c             	sub    esp,0xc
c0010295:	83 ec 0c             	sub    esp,0xc
c0010298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001029c:	e8 cd ff ff ff       	call   c001026e <Pipe::~Pipe()>
c00102a1:	83 c4 10             	add    esp,0x10
c00102a4:	83 ec 08             	sub    esp,0x8
c00102a7:	6a 20                	push   0x20
c00102a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ad:	e8 1c 28 00 00       	call   c0012ace <operator delete(void*, unsigned long)>
c00102b2:	83 c4 10             	add    esp,0x10
c00102b5:	83 c4 0c             	add    esp,0xc
c00102b8:	c3                   	ret    
c00102b9:	90                   	nop

c00102ba <Pipe::read(unsigned long long, void*, int*)>:
c00102ba:	55                   	push   ebp
c00102bb:	57                   	push   edi
c00102bc:	56                   	push   esi
c00102bd:	53                   	push   ebx
c00102be:	83 ec 1c             	sub    esp,0x1c
c00102c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102c5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102cd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102d0:	89 c8                	mov    eax,ecx
c00102d2:	99                   	cdq    
c00102d3:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102d7:	74 19                	je     c00102f2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102d9:	39 f9                	cmp    ecx,edi
c00102db:	89 d1                	mov    ecx,edx
c00102dd:	19 f1                	sbb    ecx,esi
c00102df:	73 11                	jae    c00102f2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102e1:	e8 68 d7 00 00       	call   c001da4e <lockScheduler()>
c00102e6:	e8 9f da 00 00       	call   c001dd8a <schedule()>
c00102eb:	e8 60 d7 00 00       	call   c001da50 <unlockScheduler()>
c00102f0:	eb db                	jmp    c00102cd <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102f2:	39 f8                	cmp    eax,edi
c00102f4:	89 d1                	mov    ecx,edx
c00102f6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102fa:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00102fe:	19 f1                	sbb    ecx,esi
c0010300:	73 08                	jae    c001030a <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010302:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010306:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001030a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001030d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010310:	29 c6                	sub    esi,eax
c0010312:	89 f1                	mov    ecx,esi
c0010314:	c1 f9 1f             	sar    ecx,0x1f
c0010317:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001031b:	89 ca                	mov    edx,ecx
c001031d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010321:	19 d1                	sbb    ecx,edx
c0010323:	73 04                	jae    c0010329 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010325:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010329:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001032d:	89 fd                	mov    ebp,edi
c001032f:	29 f5                	sub    ebp,esi
c0010331:	85 f6                	test   esi,esi
c0010333:	74 12                	je     c0010347 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010335:	52                   	push   edx
c0010336:	56                   	push   esi
c0010337:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001033a:	50                   	push   eax
c001033b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001033f:	e8 00 04 ff ff       	call   c0000744 <memcpy>
c0010344:	83 c4 10             	add    esp,0x10
c0010347:	85 ed                	test   ebp,ebp
c0010349:	74 12                	je     c001035d <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001034b:	50                   	push   eax
c001034c:	55                   	push   ebp
c001034d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010350:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010354:	56                   	push   esi
c0010355:	e8 ea 03 ff ff       	call   c0000744 <memcpy>
c001035a:	83 c4 10             	add    esp,0x10
c001035d:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010360:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010363:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010366:	99                   	cdq    
c0010367:	89 f7                	mov    edi,esi
c0010369:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001036d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010371:	c1 ff 1f             	sar    edi,0x1f
c0010374:	57                   	push   edi
c0010375:	56                   	push   esi
c0010376:	52                   	push   edx
c0010377:	50                   	push   eax
c0010378:	e8 af 63 01 00       	call   c002672c <__umoddi3>
c001037d:	83 c4 10             	add    esp,0x10
c0010380:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010383:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010388:	75 10                	jne    c001039a <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001038a:	83 ec 0c             	sub    esp,0xc
c001038d:	68 b5 9f 02 c0       	push   0xc0029fb5
c0010392:	e8 92 9e 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0010397:	83 c4 10             	add    esp,0x10
c001039a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001039e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103a2:	89 10                	mov    DWORD PTR [eax],edx
c00103a4:	83 c4 1c             	add    esp,0x1c
c00103a7:	31 c0                	xor    eax,eax
c00103a9:	5b                   	pop    ebx
c00103aa:	5e                   	pop    esi
c00103ab:	5f                   	pop    edi
c00103ac:	5d                   	pop    ebp
c00103ad:	c3                   	ret    

c00103ae <Pipe::write(unsigned long long, void*, int*)>:
c00103ae:	55                   	push   ebp
c00103af:	57                   	push   edi
c00103b0:	56                   	push   esi
c00103b1:	53                   	push   ebx
c00103b2:	83 ec 1c             	sub    esp,0x1c
c00103b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103b9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103bd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00103c4:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103c7:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103ce:	89 de                	mov    esi,ebx
c00103d0:	89 df                	mov    edi,ebx
c00103d2:	c1 ff 1f             	sar    edi,0x1f
c00103d5:	01 c6                	add    esi,eax
c00103d7:	89 c8                	mov    eax,ecx
c00103d9:	11 d7                	adc    edi,edx
c00103db:	99                   	cdq    
c00103dc:	39 f1                	cmp    ecx,esi
c00103de:	89 d0                	mov    eax,edx
c00103e0:	19 f8                	sbb    eax,edi
c00103e2:	b8 01 00 00 00       	mov    eax,0x1
c00103e7:	0f 82 80 00 00 00    	jb     c001046d <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00103ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103f0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00103f3:	01 d8                	add    eax,ebx
c00103f5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00103f9:	99                   	cdq    
c00103fa:	f7 f9                	idiv   ecx
c00103fc:	29 d1                	sub    ecx,edx
c00103fe:	89 d7                	mov    edi,edx
c0010400:	89 c8                	mov    eax,ecx
c0010402:	99                   	cdq    
c0010403:	39 ce                	cmp    esi,ecx
c0010405:	19 d3                	sbb    ebx,edx
c0010407:	bb 00 00 00 00       	mov    ebx,0x0
c001040c:	72 04                	jb     c0010412 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001040e:	89 f3                	mov    ebx,esi
c0010410:	29 cb                	sub    ebx,ecx
c0010412:	89 f1                	mov    ecx,esi
c0010414:	29 d9                	sub    ecx,ebx
c0010416:	74 1a                	je     c0010432 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010418:	52                   	push   edx
c0010419:	51                   	push   ecx
c001041a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001041e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010422:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010425:	57                   	push   edi
c0010426:	e8 19 03 ff ff       	call   c0000744 <memcpy>
c001042b:	83 c4 10             	add    esp,0x10
c001042e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010432:	85 db                	test   ebx,ebx
c0010434:	74 12                	je     c0010448 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010436:	50                   	push   eax
c0010437:	53                   	push   ebx
c0010438:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001043c:	51                   	push   ecx
c001043d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010440:	e8 ff 02 ff ff       	call   c0000744 <memcpy>
c0010445:	83 c4 10             	add    esp,0x10
c0010448:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001044b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010450:	75 10                	jne    c0010462 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010452:	83 ec 0c             	sub    esp,0xc
c0010455:	68 d1 9f 02 c0       	push   0xc0029fd1
c001045a:	e8 ca 9d 00 00       	call   c001a229 <Krnl::panic(char const*)>
c001045f:	83 c4 10             	add    esp,0x10
c0010462:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010466:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010469:	89 38                	mov    DWORD PTR [eax],edi
c001046b:	31 c0                	xor    eax,eax
c001046d:	83 c4 1c             	add    esp,0x1c
c0010470:	5b                   	pop    ebx
c0010471:	5e                   	pop    esi
c0010472:	5f                   	pop    edi
c0010473:	5d                   	pop    ebp
c0010474:	c3                   	ret    
c0010475:	90                   	nop

c0010476 <Pipe::Pipe(int)>:
c0010476:	83 ec 0c             	sub    esp,0xc
c0010479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047d:	83 ec 08             	sub    esp,0x8
c0010480:	6a 00                	push   0x0
c0010482:	50                   	push   eax
c0010483:	e8 56 12 00 00       	call   c00116de <UnixFile::UnixFile(int)>
c0010488:	83 c4 10             	add    esp,0x10
c001048b:	ba f8 9f 02 c0       	mov    edx,0xc0029ff8
c0010490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010494:	89 10                	mov    DWORD PTR [eax],edx
c0010496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001049e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a5:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b0:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104bb:	83 ec 0c             	sub    esp,0xc
c00104be:	50                   	push   eax
c00104bf:	e8 7c f3 ff ff       	call   c000f840 <malloc>
c00104c4:	83 c4 10             	add    esp,0x10
c00104c7:	89 c2                	mov    edx,eax
c00104c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104d8:	90                   	nop
c00104d9:	83 c4 0c             	add    esp,0xc
c00104dc:	c3                   	ret    
c00104dd:	90                   	nop

c00104de <VgaText::isAtty()>:
c00104de:	b0 01                	mov    al,0x1
c00104e0:	c3                   	ret    
c00104e1:	90                   	nop

c00104e2 <VgaText::~VgaText()>:
c00104e2:	83 ec 0c             	sub    esp,0xc
c00104e5:	ba b4 a0 02 c0       	mov    edx,0xc002a0b4
c00104ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ee:	89 10                	mov    DWORD PTR [eax],edx
c00104f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f4:	83 ec 0c             	sub    esp,0xc
c00104f7:	50                   	push   eax
c00104f8:	e8 c3 13 00 00       	call   c00118c0 <UnixFile::~UnixFile()>
c00104fd:	83 c4 10             	add    esp,0x10
c0010500:	90                   	nop
c0010501:	83 c4 0c             	add    esp,0xc
c0010504:	c3                   	ret    
c0010505:	90                   	nop

c0010506 <VgaText::~VgaText()>:
c0010506:	83 ec 0c             	sub    esp,0xc
c0010509:	83 ec 0c             	sub    esp,0xc
c001050c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010510:	e8 cd ff ff ff       	call   c00104e2 <VgaText::~VgaText()>
c0010515:	83 c4 10             	add    esp,0x10
c0010518:	83 ec 08             	sub    esp,0x8
c001051b:	68 60 12 00 00       	push   0x1260
c0010520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010524:	e8 a5 25 00 00       	call   c0012ace <operator delete(void*, unsigned long)>
c0010529:	83 c4 10             	add    esp,0x10
c001052c:	83 c4 0c             	add    esp,0xc
c001052f:	c3                   	ret    

c0010530 <VgaText::read(unsigned long long, void*, int*)>:
c0010530:	83 ec 10             	sub    esp,0x10
c0010533:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010537:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001053b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053f:	e8 e6 59 00 00       	call   c0015f2a <readKeyboard(VgaText*, char*, unsigned long)>
c0010544:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010548:	89 02                	mov    DWORD PTR [edx],eax
c001054a:	31 c0                	xor    eax,eax
c001054c:	83 c4 1c             	add    esp,0x1c
c001054f:	c3                   	ret    

c0010550 <setTerminalScrollLock(bool)>:
c0010550:	c3                   	ret    

c0010551 <addToTerminalCycle(VgaText*)>:
c0010551:	8b 15 80 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e180
c0010557:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001055b:	85 d2                	test   edx,edx
c001055d:	75 0c                	jne    c001056b <addToTerminalCycle(VgaText*)+0x1a>
c001055f:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010565:	a3 80 e1 02 c0       	mov    ds:0xc002e180,eax
c001056a:	c3                   	ret    
c001056b:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010571:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010577:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001057d:	c3                   	ret    

c001057e <installVgaTextImplementation()>:
c001057e:	83 ec 10             	sub    esp,0x10
c0010581:	6a 20                	push   0x20
c0010583:	6a 00                	push   0x0
c0010585:	68 60 e1 02 c0       	push   0xc002e160
c001058a:	e8 e9 01 ff ff       	call   c0000778 <memset>
c001058f:	83 c4 1c             	add    esp,0x1c
c0010592:	c3                   	ret    

c0010593 <scrollTerminalScrollLock(int)>:
c0010593:	c3                   	ret    

c0010594 <VgaText::load()>:
c0010594:	53                   	push   ebx
c0010595:	31 c0                	xor    eax,eax
c0010597:	83 ec 58             	sub    esp,0x58
c001059a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001059e:	89 e2                	mov    edx,esp
c00105a0:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105a4:	40                   	inc    eax
c00105a5:	83 f8 50             	cmp    eax,0x50
c00105a8:	75 f6                	jne    c00105a0 <VgaText::load()+0xc>
c00105aa:	31 c0                	xor    eax,eax
c00105ac:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105b3:	84 c9                	test   cl,cl
c00105b5:	74 06                	je     c00105bd <VgaText::load()+0x29>
c00105b7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105ba:	40                   	inc    eax
c00105bb:	eb ef                	jmp    c00105ac <VgaText::load()+0x18>
c00105bd:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105c3:	85 c0                	test   eax,eax
c00105c5:	74 09                	je     c00105d0 <VgaText::load()+0x3c>
c00105c7:	51                   	push   ecx
c00105c8:	51                   	push   ecx
c00105c9:	52                   	push   edx
c00105ca:	53                   	push   ebx
c00105cb:	ff d0                	call   eax
c00105cd:	83 c4 10             	add    esp,0x10
c00105d0:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105d6:	85 c0                	test   eax,eax
c00105d8:	74 09                	je     c00105e3 <VgaText::load()+0x4f>
c00105da:	83 ec 0c             	sub    esp,0xc
c00105dd:	53                   	push   ebx
c00105de:	ff d0                	call   eax
c00105e0:	83 c4 10             	add    esp,0x10
c00105e3:	83 c4 58             	add    esp,0x58
c00105e6:	5b                   	pop    ebx
c00105e7:	c3                   	ret    

c00105e8 <VgaText::updateCursor()>:
c00105e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ec:	39 05 84 e1 02 c0    	cmp    DWORD PTR ds:0xc002e184,eax
c00105f2:	75 0c                	jne    c0010600 <VgaText::updateCursor()+0x18>
c00105f4:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00105fa:	85 c0                	test   eax,eax
c00105fc:	74 02                	je     c0010600 <VgaText::updateCursor()+0x18>
c00105fe:	ff e0                	jmp    eax
c0010600:	c3                   	ret    
c0010601:	90                   	nop

c0010602 <VgaText::showCursor(bool)>:
c0010602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010606:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001060a:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010610:	c3                   	ret    
c0010611:	90                   	nop

c0010612 <VgaText::disableBlink(bool)>:
c0010612:	56                   	push   esi
c0010613:	53                   	push   ebx
c0010614:	51                   	push   ecx
c0010615:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010619:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001061d:	39 1d 84 e1 02 c0    	cmp    DWORD PTR ds:0xc002e184,ebx
c0010623:	75 18                	jne    c001063d <VgaText::disableBlink(bool)+0x2b>
c0010625:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001062b:	85 c0                	test   eax,eax
c001062d:	74 0e                	je     c001063d <VgaText::disableBlink(bool)+0x2b>
c001062f:	89 f1                	mov    ecx,esi
c0010631:	52                   	push   edx
c0010632:	52                   	push   edx
c0010633:	0f b6 d1             	movzx  edx,cl
c0010636:	52                   	push   edx
c0010637:	53                   	push   ebx
c0010638:	ff d0                	call   eax
c001063a:	83 c4 10             	add    esp,0x10
c001063d:	89 f0                	mov    eax,esi
c001063f:	83 f0 01             	xor    eax,0x1
c0010642:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010648:	58                   	pop    eax
c0010649:	5b                   	pop    ebx
c001064a:	5e                   	pop    esi
c001064b:	c3                   	ret    

c001064c <VgaText::doANSI_SGR(int)>:
c001064c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010654:	85 d2                	test   edx,edx
c0010656:	75 14                	jne    c001066c <VgaText::doANSI_SGR(int)+0x20>
c0010658:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001065e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010664:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001066a:	eb 65                	jmp    c00106d1 <VgaText::doANSI_SGR(int)+0x85>
c001066c:	83 fa 07             	cmp    edx,0x7
c001066f:	75 14                	jne    c0010685 <VgaText::doANSI_SGR(int)+0x39>
c0010671:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010677:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001067d:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010683:	eb 4c                	jmp    c00106d1 <VgaText::doANSI_SGR(int)+0x85>
c0010685:	83 fa 1b             	cmp    edx,0x1b
c0010688:	74 ce                	je     c0010658 <VgaText::doANSI_SGR(int)+0xc>
c001068a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001068d:	83 f9 07             	cmp    ecx,0x7
c0010690:	77 09                	ja     c001069b <VgaText::doANSI_SGR(int)+0x4f>
c0010692:	8b 14 8d 00 d0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3000]
c0010699:	eb 20                	jmp    c00106bb <VgaText::doANSI_SGR(int)+0x6f>
c001069b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001069e:	83 f9 07             	cmp    ecx,0x7
c00106a1:	77 09                	ja     c00106ac <VgaText::doANSI_SGR(int)+0x60>
c00106a3:	8b 14 8d 00 d0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3000]
c00106aa:	eb 25                	jmp    c00106d1 <VgaText::doANSI_SGR(int)+0x85>
c00106ac:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106af:	83 f9 07             	cmp    ecx,0x7
c00106b2:	77 0e                	ja     c00106c2 <VgaText::doANSI_SGR(int)+0x76>
c00106b4:	8b 14 95 b8 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3148]
c00106bb:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106c1:	c3                   	ret    
c00106c2:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106c5:	83 f9 07             	cmp    ecx,0x7
c00106c8:	77 0d                	ja     c00106d7 <VgaText::doANSI_SGR(int)+0x8b>
c00106ca:	8b 14 95 90 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3170]
c00106d1:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106d7:	c3                   	ret    

c00106d8 <VgaText::setDefaultBgColour(VgaColour)>:
c00106d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106e0:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00106e6:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106ec:	c3                   	ret    
c00106ed:	90                   	nop

c00106ee <VgaText::setDefaultFgColour(VgaColour)>:
c00106ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106f6:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00106fc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010702:	c3                   	ret    
c0010703:	90                   	nop

c0010704 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010704:	53                   	push   ebx
c0010705:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010709:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001070d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010711:	51                   	push   ecx
c0010712:	e8 c1 ff ff ff       	call   c00106d8 <VgaText::setDefaultBgColour(VgaColour)>
c0010717:	58                   	pop    eax
c0010718:	5a                   	pop    edx
c0010719:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001071d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010721:	5b                   	pop    ebx
c0010722:	eb ca                	jmp    c00106ee <VgaText::setDefaultFgColour(VgaColour)>

c0010724 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010724:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010728:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001072d:	83 e0 0f             	and    eax,0xf
c0010730:	c1 e2 04             	shl    edx,0x4
c0010733:	09 d0                	or     eax,edx
c0010735:	c3                   	ret    

c0010736 <VgaText::scrollScreen()>:
c0010736:	57                   	push   edi
c0010737:	56                   	push   esi
c0010738:	be 01 00 00 00       	mov    esi,0x1
c001073d:	53                   	push   ebx
c001073e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010742:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010748:	31 ff                	xor    edi,edi
c001074a:	01 d9                	add    ecx,ebx
c001074c:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c001074f:	83 fe 17             	cmp    esi,0x17
c0010752:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010758:	75 28                	jne    c0010782 <VgaText::scrollScreen()+0x4c>
c001075a:	f7 c7 01 00 00 00    	test   edi,0x1
c0010760:	74 1c                	je     c001077e <VgaText::scrollScreen()+0x48>
c0010762:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010769:	50                   	push   eax
c001076a:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010771:	50                   	push   eax
c0010772:	e8 ad ff ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c0010777:	5a                   	pop    edx
c0010778:	5a                   	pop    edx
c0010779:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001077c:	eb 04                	jmp    c0010782 <VgaText::scrollScreen()+0x4c>
c001077e:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010782:	47                   	inc    edi
c0010783:	41                   	inc    ecx
c0010784:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001078a:	75 c0                	jne    c001074c <VgaText::scrollScreen()+0x16>
c001078c:	46                   	inc    esi
c001078d:	83 fe 18             	cmp    esi,0x18
c0010790:	75 b0                	jne    c0010742 <VgaText::scrollScreen()+0xc>
c0010792:	39 1d 84 e1 02 c0    	cmp    DWORD PTR ds:0xc002e184,ebx
c0010798:	75 24                	jne    c00107be <VgaText::scrollScreen()+0x88>
c001079a:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107a1:	74 08                	je     c00107ab <VgaText::scrollScreen()+0x75>
c00107a3:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107a9:	eb 13                	jmp    c00107be <VgaText::scrollScreen()+0x88>
c00107ab:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107b1:	85 c0                	test   eax,eax
c00107b3:	74 09                	je     c00107be <VgaText::scrollScreen()+0x88>
c00107b5:	83 ec 0c             	sub    esp,0xc
c00107b8:	53                   	push   ebx
c00107b9:	ff d0                	call   eax
c00107bb:	83 c4 10             	add    esp,0x10
c00107be:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107c2:	5b                   	pop    ebx
c00107c3:	5e                   	pop    esi
c00107c4:	5f                   	pop    edi
c00107c5:	e9 1e fe ff ff       	jmp    c00105e8 <VgaText::updateCursor()>

c00107ca <VgaText::combineCharAndColour(char, unsigned char)>:
c00107ca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107cf:	c1 e0 08             	shl    eax,0x8
c00107d2:	89 c2                	mov    edx,eax
c00107d4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107d9:	09 d0                	or     eax,edx
c00107db:	c3                   	ret    

c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107dc:	53                   	push   ebx
c00107dd:	83 ec 08             	sub    esp,0x8
c00107e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107e4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e9:	50                   	push   eax
c00107ea:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107ef:	50                   	push   eax
c00107f0:	e8 2f ff ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f5:	5a                   	pop    edx
c00107f6:	0f b6 c0             	movzx  eax,al
c00107f9:	5b                   	pop    ebx
c00107fa:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107ff:	50                   	push   eax
c0010800:	53                   	push   ebx
c0010801:	e8 c4 ff ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010806:	5a                   	pop    edx
c0010807:	5a                   	pop    edx
c0010808:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001080e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010812:	0f b7 d2             	movzx  edx,dx
c0010815:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001081a:	39 0d 84 e1 02 c0    	cmp    DWORD PTR ds:0xc002e184,ecx
c0010820:	75 14                	jne    c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010822:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010828:	85 c0                	test   eax,eax
c001082a:	74 0a                	je     c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001082c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010830:	83 c4 08             	add    esp,0x8
c0010833:	5b                   	pop    ebx
c0010834:	ff e0                	jmp    eax
c0010836:	83 c4 08             	add    esp,0x8
c0010839:	5b                   	pop    ebx
c001083a:	c3                   	ret    
c001083b:	90                   	nop

c001083c <VgaText::getCursorX()>:
c001083c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010840:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010846:	c3                   	ret    
c0010847:	90                   	nop

c0010848 <VgaText::getCursorY()>:
c0010848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001084c:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010852:	c3                   	ret    
c0010853:	90                   	nop

c0010854 <VgaText::setCursor(int, int)>:
c0010854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010858:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001085c:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010862:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010866:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001086c:	e9 77 fd ff ff       	jmp    c00105e8 <VgaText::updateCursor()>
c0010871:	90                   	nop

c0010872 <VgaText::setCursorX(int)>:
c0010872:	83 ec 10             	sub    esp,0x10
c0010875:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010879:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001087f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010883:	50                   	push   eax
c0010884:	e8 cb ff ff ff       	call   c0010854 <VgaText::setCursor(int, int)>
c0010889:	83 c4 1c             	add    esp,0x1c
c001088c:	c3                   	ret    
c001088d:	90                   	nop

c001088e <VgaText::setCursorY(int)>:
c001088e:	83 ec 10             	sub    esp,0x10
c0010891:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010895:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010899:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001089f:	50                   	push   eax
c00108a0:	e8 af ff ff ff       	call   c0010854 <VgaText::setCursor(int, int)>
c00108a5:	83 c4 1c             	add    esp,0x1c
c00108a8:	c3                   	ret    
c00108a9:	90                   	nop

c00108aa <VgaText::incrementCursor(bool)>:
c00108aa:	56                   	push   esi
c00108ab:	53                   	push   ebx
c00108ac:	51                   	push   ecx
c00108ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108b5:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108bb:	40                   	inc    eax
c00108bc:	83 f8 50             	cmp    eax,0x50
c00108bf:	74 08                	je     c00108c9 <VgaText::incrementCursor(bool)+0x1f>
c00108c1:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108c7:	eb 33                	jmp    c00108fc <VgaText::incrementCursor(bool)+0x52>
c00108c9:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108cf:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108d9:	8d 50 01             	lea    edx,[eax+0x1]
c00108dc:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00108e2:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00108e8:	75 12                	jne    c00108fc <VgaText::incrementCursor(bool)+0x52>
c00108ea:	83 ec 0c             	sub    esp,0xc
c00108ed:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00108f3:	53                   	push   ebx
c00108f4:	e8 3d fe ff ff       	call   c0010736 <VgaText::scrollScreen()>
c00108f9:	83 c4 10             	add    esp,0x10
c00108fc:	89 f0                	mov    eax,esi
c00108fe:	84 c0                	test   al,al
c0010900:	74 0c                	je     c001090e <VgaText::incrementCursor(bool)+0x64>
c0010902:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010906:	5a                   	pop    edx
c0010907:	5b                   	pop    ebx
c0010908:	5e                   	pop    esi
c0010909:	e9 da fc ff ff       	jmp    c00105e8 <VgaText::updateCursor()>
c001090e:	58                   	pop    eax
c001090f:	5b                   	pop    ebx
c0010910:	5e                   	pop    esi
c0010911:	c3                   	ret    

c0010912 <VgaText::updateRAMUsageDisplay(int)>:
c0010912:	56                   	push   esi
c0010913:	8b 35 e0 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cfe0
c0010919:	53                   	push   ebx
c001091a:	bb 0a 00 00 00       	mov    ebx,0xa
c001091f:	6a 0f                	push   0xf
c0010921:	6a 00                	push   0x0
c0010923:	e8 fc fd ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c0010928:	5a                   	pop    edx
c0010929:	59                   	pop    ecx
c001092a:	0f b6 c8             	movzx  ecx,al
c001092d:	51                   	push   ecx
c001092e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010932:	99                   	cdq    
c0010933:	f7 fb                	idiv   ebx
c0010935:	89 d3                	mov    ebx,edx
c0010937:	83 c0 30             	add    eax,0x30
c001093a:	83 c3 30             	add    ebx,0x30
c001093d:	0f be c0             	movsx  eax,al
c0010940:	0f b6 db             	movzx  ebx,bl
c0010943:	50                   	push   eax
c0010944:	e8 81 fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010949:	5a                   	pop    edx
c001094a:	5a                   	pop    edx
c001094b:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010952:	51                   	push   ecx
c0010953:	53                   	push   ebx
c0010954:	e8 71 fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010959:	5b                   	pop    ebx
c001095a:	5a                   	pop    edx
c001095b:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010962:	51                   	push   ecx
c0010963:	6a 25                	push   0x25
c0010965:	e8 60 fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c001096a:	59                   	pop    ecx
c001096b:	5b                   	pop    ebx
c001096c:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010973:	5b                   	pop    ebx
c0010974:	5e                   	pop    esi
c0010975:	c3                   	ret    

c0010976 <VgaText::updateDiskUsage()>:
c0010976:	55                   	push   ebp
c0010977:	bd 10 27 00 00       	mov    ebp,0x2710
c001097c:	57                   	push   edi
c001097d:	8b 3d e0 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cfe0
c0010983:	56                   	push   esi
c0010984:	53                   	push   ebx
c0010985:	6a 0f                	push   0xf
c0010987:	6a 00                	push   0x0
c0010989:	e8 96 fd ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c001098e:	5a                   	pop    edx
c001098f:	0f b6 d8             	movzx  ebx,al
c0010992:	59                   	pop    ecx
c0010993:	8b 35 08 24 03 c0    	mov    esi,DWORD PTR ds:0xc0032408
c0010999:	53                   	push   ebx
c001099a:	b9 0a 00 00 00       	mov    ecx,0xa
c001099f:	89 f0                	mov    eax,esi
c00109a1:	99                   	cdq    
c00109a2:	f7 fd                	idiv   ebp
c00109a4:	99                   	cdq    
c00109a5:	f7 f9                	idiv   ecx
c00109a7:	8d 42 30             	lea    eax,[edx+0x30]
c00109aa:	0f b6 c0             	movzx  eax,al
c00109ad:	50                   	push   eax
c00109ae:	e8 17 fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c00109b3:	5d                   	pop    ebp
c00109b4:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109b9:	5a                   	pop    edx
c00109ba:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109be:	53                   	push   ebx
c00109bf:	89 f0                	mov    eax,esi
c00109c1:	99                   	cdq    
c00109c2:	f7 fd                	idiv   ebp
c00109c4:	99                   	cdq    
c00109c5:	f7 f9                	idiv   ecx
c00109c7:	8d 42 30             	lea    eax,[edx+0x30]
c00109ca:	0f b6 c0             	movzx  eax,al
c00109cd:	50                   	push   eax
c00109ce:	e8 f7 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c00109d3:	5d                   	pop    ebp
c00109d4:	bd 64 00 00 00       	mov    ebp,0x64
c00109d9:	5a                   	pop    edx
c00109da:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109e1:	53                   	push   ebx
c00109e2:	89 f0                	mov    eax,esi
c00109e4:	99                   	cdq    
c00109e5:	f7 fd                	idiv   ebp
c00109e7:	99                   	cdq    
c00109e8:	f7 f9                	idiv   ecx
c00109ea:	8d 42 30             	lea    eax,[edx+0x30]
c00109ed:	0f b6 c0             	movzx  eax,al
c00109f0:	50                   	push   eax
c00109f1:	e8 d4 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c00109f6:	5d                   	pop    ebp
c00109f7:	5a                   	pop    edx
c00109f8:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109ff:	53                   	push   ebx
c0010a00:	89 f0                	mov    eax,esi
c0010a02:	99                   	cdq    
c0010a03:	f7 f9                	idiv   ecx
c0010a05:	89 d6                	mov    esi,edx
c0010a07:	99                   	cdq    
c0010a08:	f7 f9                	idiv   ecx
c0010a0a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a0d:	0f b6 c0             	movzx  eax,al
c0010a10:	50                   	push   eax
c0010a11:	e8 b4 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a16:	5d                   	pop    ebp
c0010a17:	5a                   	pop    edx
c0010a18:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a1f:	53                   	push   ebx
c0010a20:	8d 46 30             	lea    eax,[esi+0x30]
c0010a23:	0f b6 f0             	movzx  esi,al
c0010a26:	56                   	push   esi
c0010a27:	e8 9e fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2c:	5e                   	pop    esi
c0010a2d:	8b 35 04 24 03 c0    	mov    esi,DWORD PTR ds:0xc0032404
c0010a33:	5d                   	pop    ebp
c0010a34:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a3b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a40:	53                   	push   ebx
c0010a41:	89 f0                	mov    eax,esi
c0010a43:	99                   	cdq    
c0010a44:	f7 fd                	idiv   ebp
c0010a46:	99                   	cdq    
c0010a47:	f7 f9                	idiv   ecx
c0010a49:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4c:	0f b6 c0             	movzx  eax,al
c0010a4f:	50                   	push   eax
c0010a50:	e8 75 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a55:	5a                   	pop    edx
c0010a56:	5d                   	pop    ebp
c0010a57:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a5e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a63:	53                   	push   ebx
c0010a64:	89 f0                	mov    eax,esi
c0010a66:	99                   	cdq    
c0010a67:	f7 fd                	idiv   ebp
c0010a69:	99                   	cdq    
c0010a6a:	f7 f9                	idiv   ecx
c0010a6c:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6f:	0f b6 c0             	movzx  eax,al
c0010a72:	50                   	push   eax
c0010a73:	e8 52 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a78:	5a                   	pop    edx
c0010a79:	5d                   	pop    ebp
c0010a7a:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a81:	bd 64 00 00 00       	mov    ebp,0x64
c0010a86:	53                   	push   ebx
c0010a87:	89 f0                	mov    eax,esi
c0010a89:	99                   	cdq    
c0010a8a:	f7 fd                	idiv   ebp
c0010a8c:	99                   	cdq    
c0010a8d:	f7 f9                	idiv   ecx
c0010a8f:	83 c2 30             	add    edx,0x30
c0010a92:	0f b6 d2             	movzx  edx,dl
c0010a95:	52                   	push   edx
c0010a96:	e8 2f fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a9b:	5a                   	pop    edx
c0010a9c:	5d                   	pop    ebp
c0010a9d:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010aa4:	53                   	push   ebx
c0010aa5:	89 f0                	mov    eax,esi
c0010aa7:	99                   	cdq    
c0010aa8:	f7 f9                	idiv   ecx
c0010aaa:	89 d6                	mov    esi,edx
c0010aac:	99                   	cdq    
c0010aad:	f7 f9                	idiv   ecx
c0010aaf:	8d 42 30             	lea    eax,[edx+0x30]
c0010ab2:	0f b6 c0             	movzx  eax,al
c0010ab5:	50                   	push   eax
c0010ab6:	e8 0f fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010abb:	5a                   	pop    edx
c0010abc:	59                   	pop    ecx
c0010abd:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ac4:	53                   	push   ebx
c0010ac5:	8d 46 30             	lea    eax,[esi+0x30]
c0010ac8:	0f b6 f0             	movzx  esi,al
c0010acb:	56                   	push   esi
c0010acc:	e8 f9 fc ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad1:	5b                   	pop    ebx
c0010ad2:	5e                   	pop    esi
c0010ad3:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010ada:	5b                   	pop    ebx
c0010adb:	5e                   	pop    esi
c0010adc:	5f                   	pop    edi
c0010add:	5d                   	pop    ebp
c0010ade:	c3                   	ret    
c0010adf:	90                   	nop

c0010ae0 <VgaText::updateTitle()>:
c0010ae0:	53                   	push   ebx
c0010ae1:	31 c0                	xor    eax,eax
c0010ae3:	83 ec 58             	sub    esp,0x58
c0010ae6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010aea:	89 e1                	mov    ecx,esp
c0010aec:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010af0:	40                   	inc    eax
c0010af1:	83 f8 50             	cmp    eax,0x50
c0010af4:	75 f6                	jne    c0010aec <VgaText::updateTitle()+0xc>
c0010af6:	31 c0                	xor    eax,eax
c0010af8:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010aff:	84 db                	test   bl,bl
c0010b01:	74 06                	je     c0010b09 <VgaText::updateTitle()+0x29>
c0010b03:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b06:	40                   	inc    eax
c0010b07:	eb ef                	jmp    c0010af8 <VgaText::updateTitle()+0x18>
c0010b09:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b0f:	85 c0                	test   eax,eax
c0010b11:	74 09                	je     c0010b1c <VgaText::updateTitle()+0x3c>
c0010b13:	53                   	push   ebx
c0010b14:	53                   	push   ebx
c0010b15:	51                   	push   ecx
c0010b16:	52                   	push   edx
c0010b17:	ff d0                	call   eax
c0010b19:	83 c4 10             	add    esp,0x10
c0010b1c:	e8 55 fe ff ff       	call   c0010976 <VgaText::updateDiskUsage()>
c0010b21:	83 c4 58             	add    esp,0x58
c0010b24:	5b                   	pop    ebx
c0010b25:	c3                   	ret    

c0010b26 <VgaText::setTitleTextColour(VgaColour)>:
c0010b26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b2e:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b34:	eb aa                	jmp    c0010ae0 <VgaText::updateTitle()>

c0010b36 <VgaText::setTitleColour(VgaColour)>:
c0010b36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b3e:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b44:	eb 9a                	jmp    c0010ae0 <VgaText::updateTitle()>

c0010b46 <VgaText::setTitle(char*)>:
c0010b46:	53                   	push   ebx
c0010b47:	83 ec 10             	sub    esp,0x10
c0010b4a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b52:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b58:	50                   	push   eax
c0010b59:	e8 d6 fc fe ff       	call   c0000834 <strcpy>
c0010b5e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b62:	83 c4 18             	add    esp,0x18
c0010b65:	5b                   	pop    ebx
c0010b66:	e9 75 ff ff ff       	jmp    c0010ae0 <VgaText::updateTitle()>
c0010b6b:	90                   	nop

c0010b6c <VgaText::decrementCursor(bool)>:
c0010b6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b74:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b7a:	85 c0                	test   eax,eax
c0010b7c:	74 07                	je     c0010b85 <VgaText::decrementCursor(bool)+0x19>
c0010b7e:	48                   	dec    eax
c0010b7f:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010b85:	84 c9                	test   cl,cl
c0010b87:	74 09                	je     c0010b92 <VgaText::decrementCursor(bool)+0x26>
c0010b89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b8d:	e9 56 fa ff ff       	jmp    c00105e8 <VgaText::updateCursor()>
c0010b92:	c3                   	ret    
c0010b93:	90                   	nop

c0010b94 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b94:	53                   	push   ebx
c0010b95:	83 ec 08             	sub    esp,0x8
c0010b98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ba4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010ba8:	3c 07                	cmp    al,0x7
c0010baa:	75 2a                	jne    c0010bd6 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bac:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c0010bb1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bb9:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bc1:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bc9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bcd:	83 c4 08             	add    esp,0x8
c0010bd0:	5b                   	pop    ebx
c0010bd1:	e9 d6 2d 00 00       	jmp    c00139ac <Buzzer::beep(int, int, bool)>
c0010bd6:	3c 0d                	cmp    al,0xd
c0010bd8:	75 0c                	jne    c0010be6 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bda:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010be4:	eb 3b                	jmp    c0010c21 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010be6:	3c 0a                	cmp    al,0xa
c0010be8:	75 40                	jne    c0010c2a <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010bea:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010bf0:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010bfa:	8d 50 01             	lea    edx,[eax+0x1]
c0010bfd:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c03:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c09:	75 12                	jne    c0010c1d <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c0b:	83 ec 0c             	sub    esp,0xc
c0010c0e:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c14:	53                   	push   ebx
c0010c15:	e8 1c fb ff ff       	call   c0010736 <VgaText::scrollScreen()>
c0010c1a:	83 c4 10             	add    esp,0x10
c0010c1d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c21:	83 c4 08             	add    esp,0x8
c0010c24:	5b                   	pop    ebx
c0010c25:	e9 be f9 ff ff       	jmp    c00105e8 <VgaText::updateCursor()>
c0010c2a:	3c 08                	cmp    al,0x8
c0010c2c:	75 31                	jne    c0010c5f <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c2e:	50                   	push   eax
c0010c2f:	50                   	push   eax
c0010c30:	6a 01                	push   0x1
c0010c32:	53                   	push   ebx
c0010c33:	e8 34 ff ff ff       	call   c0010b6c <VgaText::decrementCursor(bool)>
c0010c38:	5a                   	pop    edx
c0010c39:	59                   	pop    ecx
c0010c3a:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c40:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c46:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c4c:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c52:	6a 20                	push   0x20
c0010c54:	53                   	push   ebx
c0010c55:	e8 82 fb ff ff       	call   c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c5a:	83 c4 28             	add    esp,0x28
c0010c5d:	5b                   	pop    ebx
c0010c5e:	c3                   	ret    
c0010c5f:	83 ec 08             	sub    esp,0x8
c0010c62:	0f be c0             	movsx  eax,al
c0010c65:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c6b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c71:	51                   	push   ecx
c0010c72:	52                   	push   edx
c0010c73:	50                   	push   eax
c0010c74:	53                   	push   ebx
c0010c75:	e8 62 fb ff ff       	call   c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c7a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c7e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c86:	83 c4 28             	add    esp,0x28
c0010c89:	5b                   	pop    ebx
c0010c8a:	e9 1b fc ff ff       	jmp    c00108aa <VgaText::incrementCursor(bool)>
c0010c8f:	90                   	nop

c0010c90 <VgaText::isShowingCursor()>:
c0010c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c94:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010c9a:	c3                   	ret    
c0010c9b:	90                   	nop

c0010c9c <VgaText::isBlinkDisabled()>:
c0010c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ca0:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010ca6:	83 f0 01             	xor    eax,0x1
c0010ca9:	c3                   	ret    

c0010caa <VgaText::setCursorHeight(int)>:
c0010caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cb2:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cb8:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cc3:	e9 3a f9 ff ff       	jmp    c0010602 <VgaText::showCursor(bool)>

c0010cc8 <VgaText::getCursorHeight()>:
c0010cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ccc:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cd2:	c3                   	ret    

c0010cd3 <setActiveTerminal(VgaText*)>:
c0010cd3:	53                   	push   ebx
c0010cd4:	83 ec 08             	sub    esp,0x8
c0010cd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cdb:	85 db                	test   ebx,ebx
c0010cdd:	75 11                	jne    c0010cf0 <setActiveTerminal(VgaText*)+0x1d>
c0010cdf:	c7 44 24 10 0c a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a00c
c0010ce7:	83 c4 08             	add    esp,0x8
c0010cea:	5b                   	pop    ebx
c0010ceb:	e9 39 95 00 00       	jmp    c001a229 <Krnl::panic(char const*)>
c0010cf0:	50                   	push   eax
c0010cf1:	50                   	push   eax
c0010cf2:	53                   	push   ebx
c0010cf3:	68 1a a0 02 c0       	push   0xc002a01a
c0010cf8:	e8 b1 1e 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0010cfd:	a1 84 e1 02 c0       	mov    eax,ds:0xc002e184
c0010d02:	83 c4 10             	add    esp,0x10
c0010d05:	85 c0                	test   eax,eax
c0010d07:	74 0c                	je     c0010d15 <setActiveTerminal(VgaText*)+0x42>
c0010d09:	83 ec 0c             	sub    esp,0xc
c0010d0c:	50                   	push   eax
c0010d0d:	e8 d6 f8 ff ff       	call   c00105e8 <VgaText::updateCursor()>
c0010d12:	83 c4 10             	add    esp,0x10
c0010d15:	89 1d 84 e1 02 c0    	mov    DWORD PTR ds:0xc002e184,ebx
c0010d1b:	51                   	push   ecx
c0010d1c:	51                   	push   ecx
c0010d1d:	53                   	push   ebx
c0010d1e:	68 32 a0 02 c0       	push   0xc002a032
c0010d23:	e8 86 1e 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0010d28:	83 c4 0c             	add    esp,0xc
c0010d2b:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d31:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d37:	53                   	push   ebx
c0010d38:	e8 17 fb ff ff       	call   c0010854 <VgaText::setCursor(int, int)>
c0010d3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d40:	e8 57 ff ff ff       	call   c0010c9c <VgaText::isBlinkDisabled()>
c0010d45:	5a                   	pop    edx
c0010d46:	0f b6 c0             	movzx  eax,al
c0010d49:	59                   	pop    ecx
c0010d4a:	50                   	push   eax
c0010d4b:	53                   	push   ebx
c0010d4c:	e8 c1 f8 ff ff       	call   c0010612 <VgaText::disableBlink(bool)>
c0010d51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d54:	e8 6f ff ff ff       	call   c0010cc8 <VgaText::getCursorHeight()>
c0010d59:	5a                   	pop    edx
c0010d5a:	59                   	pop    ecx
c0010d5b:	50                   	push   eax
c0010d5c:	53                   	push   ebx
c0010d5d:	e8 48 ff ff ff       	call   c0010caa <VgaText::setCursorHeight(int)>
c0010d62:	83 c4 10             	add    esp,0x10
c0010d65:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d6c:	75 0a                	jne    c0010d78 <setActiveTerminal(VgaText*)+0xa5>
c0010d6e:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d78:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d7c:	83 c4 08             	add    esp,0x8
c0010d7f:	5b                   	pop    ebx
c0010d80:	e9 0f f8 ff ff       	jmp    c0010594 <VgaText::load()>

c0010d85 <doTerminalCycle()>:
c0010d85:	83 ec 18             	sub    esp,0x18
c0010d88:	a1 80 e1 02 c0       	mov    eax,ds:0xc002e180
c0010d8d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010d93:	50                   	push   eax
c0010d94:	a3 80 e1 02 c0       	mov    ds:0xc002e180,eax
c0010d99:	e8 35 ff ff ff       	call   c0010cd3 <setActiveTerminal(VgaText*)>
c0010d9e:	83 c4 1c             	add    esp,0x1c
c0010da1:	c3                   	ret    

c0010da2 <VgaText::doUpdate()>:
c0010da2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da6:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dac:	85 c0                	test   eax,eax
c0010dae:	74 02                	je     c0010db2 <VgaText::doUpdate()+0x10>
c0010db0:	ff e0                	jmp    eax
c0010db2:	c3                   	ret    
c0010db3:	90                   	nop

c0010db4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010db4:	55                   	push   ebp
c0010db5:	57                   	push   edi
c0010db6:	56                   	push   esi
c0010db7:	53                   	push   ebx
c0010db8:	83 ec 1c             	sub    esp,0x1c
c0010dbb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010dbf:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dc4:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010dcb:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010dce:	50                   	push   eax
c0010dcf:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dd4:	50                   	push   eax
c0010dd5:	e8 4a f9 ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c0010dda:	59                   	pop    ecx
c0010ddb:	0f b6 c0             	movzx  eax,al
c0010dde:	5b                   	pop    ebx
c0010ddf:	31 c9                	xor    ecx,ecx
c0010de1:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010de9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010ded:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010df3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010df7:	0f b7 db             	movzx  ebx,bx
c0010dfa:	01 db                	add    ebx,ebx
c0010dfc:	01 fb                	add    ebx,edi
c0010dfe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e01:	84 c0                	test   al,al
c0010e03:	0f 84 38 01 00 00    	je     c0010f41 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e09:	3c 0d                	cmp    al,0xd
c0010e0b:	75 0f                	jne    c0010e1c <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e0d:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e17:	e9 1f 01 00 00       	jmp    c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e1c:	3c 0a                	cmp    al,0xa
c0010e1e:	75 5b                	jne    c0010e7b <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e20:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e26:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e30:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e33:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e39:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e3f:	75 12                	jne    c0010e53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e41:	83 ec 0c             	sub    esp,0xc
c0010e44:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e4a:	55                   	push   ebp
c0010e4b:	e8 e6 f8 ff ff       	call   c0010736 <VgaText::scrollScreen()>
c0010e50:	83 c4 10             	add    esp,0x10
c0010e53:	83 ec 0c             	sub    esp,0xc
c0010e56:	55                   	push   ebp
c0010e57:	e8 8c f7 ff ff       	call   c00105e8 <VgaText::updateCursor()>
c0010e5c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e64:	83 c4 10             	add    esp,0x10
c0010e67:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e6d:	31 c9                	xor    ecx,ecx
c0010e6f:	0f b7 db             	movzx  ebx,bx
c0010e72:	01 db                	add    ebx,ebx
c0010e74:	01 fb                	add    ebx,edi
c0010e76:	e9 c0 00 00 00       	jmp    c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e7b:	3c 08                	cmp    al,0x8
c0010e7d:	75 4e                	jne    c0010ecd <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e7f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e83:	53                   	push   ebx
c0010e84:	53                   	push   ebx
c0010e85:	6a 01                	push   0x1
c0010e87:	55                   	push   ebp
c0010e88:	e8 df fc ff ff       	call   c0010b6c <VgaText::decrementCursor(bool)>
c0010e8d:	58                   	pop    eax
c0010e8e:	5a                   	pop    edx
c0010e8f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010e95:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010e9b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ea1:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ea7:	6a 20                	push   0x20
c0010ea9:	55                   	push   ebp
c0010eaa:	e8 2d f9 ff ff       	call   c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010eaf:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010eb7:	83 c4 20             	add    esp,0x20
c0010eba:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ec0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ec4:	0f b7 db             	movzx  ebx,bx
c0010ec7:	01 db                	add    ebx,ebx
c0010ec9:	01 fb                	add    ebx,edi
c0010ecb:	eb 6e                	jmp    c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ecd:	51                   	push   ecx
c0010ece:	51                   	push   ecx
c0010ecf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ed3:	50                   	push   eax
c0010ed4:	e8 f1 f8 ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010ed9:	83 c4 10             	add    esp,0x10
c0010edc:	66 89 03             	mov    WORD PTR [ebx],ax
c0010edf:	39 2d 84 e1 02 c0    	cmp    DWORD PTR ds:0xc002e184,ebp
c0010ee5:	75 2a                	jne    c0010f11 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010ee7:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010eed:	85 c0                	test   eax,eax
c0010eef:	74 20                	je     c0010f11 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010ef1:	52                   	push   edx
c0010ef2:	52                   	push   edx
c0010ef3:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ef9:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010eff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f07:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f0a:	51                   	push   ecx
c0010f0b:	55                   	push   ebp
c0010f0c:	ff d0                	call   eax
c0010f0e:	83 c4 20             	add    esp,0x20
c0010f11:	83 c3 02             	add    ebx,0x2
c0010f14:	50                   	push   eax
c0010f15:	50                   	push   eax
c0010f16:	6a 00                	push   0x0
c0010f18:	55                   	push   ebp
c0010f19:	e8 8c f9 ff ff       	call   c00108aa <VgaText::incrementCursor(bool)>
c0010f1e:	83 c4 10             	add    esp,0x10
c0010f21:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f28:	75 0f                	jne    c0010f39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f2a:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f32:	0f b7 db             	movzx  ebx,bx
c0010f35:	01 db                	add    ebx,ebx
c0010f37:	01 fb                	add    ebx,edi
c0010f39:	b1 01                	mov    cl,0x1
c0010f3b:	46                   	inc    esi
c0010f3c:	e9 bd fe ff ff       	jmp    c0010dfe <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f41:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f45:	83 ec 0c             	sub    esp,0xc
c0010f48:	55                   	push   ebp
c0010f49:	e8 9a f6 ff ff       	call   c00105e8 <VgaText::updateCursor()>
c0010f4e:	83 c4 10             	add    esp,0x10
c0010f51:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f55:	84 c9                	test   cl,cl
c0010f57:	74 0c                	je     c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f59:	83 ec 0c             	sub    esp,0xc
c0010f5c:	55                   	push   ebp
c0010f5d:	e8 40 fe ff ff       	call   c0010da2 <VgaText::doUpdate()>
c0010f62:	83 c4 10             	add    esp,0x10
c0010f65:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f6c:	83 c4 1c             	add    esp,0x1c
c0010f6f:	5b                   	pop    ebx
c0010f70:	5e                   	pop    esi
c0010f71:	5f                   	pop    edi
c0010f72:	5d                   	pop    ebp
c0010f73:	c3                   	ret    

c0010f74 <VgaText::clearScreen()>:
c0010f74:	57                   	push   edi
c0010f75:	56                   	push   esi
c0010f76:	31 f6                	xor    esi,esi
c0010f78:	53                   	push   ebx
c0010f79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f7d:	52                   	push   edx
c0010f7e:	6a 00                	push   0x0
c0010f80:	6a 00                	push   0x0
c0010f82:	53                   	push   ebx
c0010f83:	e8 cc f8 ff ff       	call   c0010854 <VgaText::setCursor(int, int)>
c0010f88:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010f8f:	83 c4 10             	add    esp,0x10
c0010f92:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010f98:	7e 26                	jle    c0010fc0 <VgaText::clearScreen()+0x4c>
c0010f9a:	31 ff                	xor    edi,edi
c0010f9c:	50                   	push   eax
c0010f9d:	50                   	push   eax
c0010f9e:	56                   	push   esi
c0010f9f:	57                   	push   edi
c0010fa0:	47                   	inc    edi
c0010fa1:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fa7:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fad:	6a 20                	push   0x20
c0010faf:	53                   	push   ebx
c0010fb0:	e8 27 f8 ff ff       	call   c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fb5:	83 c4 20             	add    esp,0x20
c0010fb8:	83 ff 50             	cmp    edi,0x50
c0010fbb:	75 df                	jne    c0010f9c <VgaText::clearScreen()+0x28>
c0010fbd:	46                   	inc    esi
c0010fbe:	eb d2                	jmp    c0010f92 <VgaText::clearScreen()+0x1e>
c0010fc0:	83 ec 0c             	sub    esp,0xc
c0010fc3:	53                   	push   ebx
c0010fc4:	e8 d9 fd ff ff       	call   c0010da2 <VgaText::doUpdate()>
c0010fc9:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fd0:	83 c4 10             	add    esp,0x10
c0010fd3:	5b                   	pop    ebx
c0010fd4:	5e                   	pop    esi
c0010fd5:	5f                   	pop    edi
c0010fd6:	c3                   	ret    
c0010fd7:	90                   	nop

c0010fd8 <VgaText::putchar(char)>:
c0010fd8:	56                   	push   esi
c0010fd9:	53                   	push   ebx
c0010fda:	83 ec 14             	sub    esp,0x14
c0010fdd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fe1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fe5:	3c 5b                	cmp    al,0x5b
c0010fe7:	75 21                	jne    c001100a <VgaText::putchar(char)+0x32>
c0010fe9:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010ff0:	74 28                	je     c001101a <VgaText::putchar(char)+0x42>
c0010ff2:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010ffb:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011005:	e9 e2 00 00 00       	jmp    c00110ec <VgaText::putchar(char)+0x114>
c001100a:	3c 1b                	cmp    al,0x1b
c001100c:	75 0c                	jne    c001101a <VgaText::putchar(char)+0x42>
c001100e:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011015:	e9 d2 00 00 00       	jmp    c00110ec <VgaText::putchar(char)+0x114>
c001101a:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011020:	84 c9                	test   cl,cl
c0011022:	0f 84 ab 00 00 00    	je     c00110d3 <VgaText::putchar(char)+0xfb>
c0011028:	8d 50 c0             	lea    edx,[eax-0x40]
c001102b:	80 fa 3e             	cmp    dl,0x3e
c001102e:	0f 87 82 00 00 00    	ja     c00110b6 <VgaText::putchar(char)+0xde>
c0011034:	3c 6d                	cmp    al,0x6d
c0011036:	75 4d                	jne    c0011085 <VgaText::putchar(char)+0xad>
c0011038:	31 f6                	xor    esi,esi
c001103a:	31 d2                	xor    edx,edx
c001103c:	31 c0                	xor    eax,eax
c001103e:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011044:	7e 30                	jle    c0011076 <VgaText::putchar(char)+0x9e>
c0011046:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c001104e:	80 fa 3b             	cmp    dl,0x3b
c0011051:	75 17                	jne    c001106a <VgaText::putchar(char)+0x92>
c0011053:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011057:	50                   	push   eax
c0011058:	53                   	push   ebx
c0011059:	e8 ee f5 ff ff       	call   c001064c <VgaText::doANSI_SGR(int)>
c001105e:	59                   	pop    ecx
c001105f:	31 d2                	xor    edx,edx
c0011061:	58                   	pop    eax
c0011062:	31 c0                	xor    eax,eax
c0011064:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011068:	eb 09                	jmp    c0011073 <VgaText::putchar(char)+0x9b>
c001106a:	6b c0 0a             	imul   eax,eax,0xa
c001106d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011071:	88 ca                	mov    dl,cl
c0011073:	46                   	inc    esi
c0011074:	eb c8                	jmp    c001103e <VgaText::putchar(char)+0x66>
c0011076:	84 d2                	test   dl,dl
c0011078:	74 31                	je     c00110ab <VgaText::putchar(char)+0xd3>
c001107a:	50                   	push   eax
c001107b:	53                   	push   ebx
c001107c:	e8 cb f5 ff ff       	call   c001064c <VgaText::doANSI_SGR(int)>
c0011081:	58                   	pop    eax
c0011082:	5a                   	pop    edx
c0011083:	eb 26                	jmp    c00110ab <VgaText::putchar(char)+0xd3>
c0011085:	3c 4a                	cmp    al,0x4a
c0011087:	75 22                	jne    c00110ab <VgaText::putchar(char)+0xd3>
c0011089:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011090:	75 19                	jne    c00110ab <VgaText::putchar(char)+0xd3>
c0011092:	83 ec 0c             	sub    esp,0xc
c0011095:	53                   	push   ebx
c0011096:	e8 d9 fe ff ff       	call   c0010f74 <VgaText::clearScreen()>
c001109b:	83 c4 0c             	add    esp,0xc
c001109e:	6a 00                	push   0x0
c00110a0:	6a 00                	push   0x0
c00110a2:	53                   	push   ebx
c00110a3:	e8 ac f7 ff ff       	call   c0010854 <VgaText::setCursor(int, int)>
c00110a8:	83 c4 10             	add    esp,0x10
c00110ab:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110b4:	eb 36                	jmp    c00110ec <VgaText::putchar(char)+0x114>
c00110b6:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110bc:	83 fa 0e             	cmp    edx,0xe
c00110bf:	7f 2b                	jg     c00110ec <VgaText::putchar(char)+0x114>
c00110c1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110c4:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110ca:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110d1:	eb 19                	jmp    c00110ec <VgaText::putchar(char)+0x114>
c00110d3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110d9:	0f be c0             	movsx  eax,al
c00110dc:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110e2:	50                   	push   eax
c00110e3:	53                   	push   ebx
c00110e4:	e8 ab fa ff ff       	call   c0010b94 <VgaText::putchar(char, VgaColour, VgaColour)>
c00110e9:	83 c4 10             	add    esp,0x10
c00110ec:	83 c4 14             	add    esp,0x14
c00110ef:	5b                   	pop    ebx
c00110f0:	5e                   	pop    esi
c00110f1:	c3                   	ret    

c00110f2 <VgaText::puts(char const*)>:
c00110f2:	53                   	push   ebx
c00110f3:	83 ec 08             	sub    esp,0x8
c00110f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110fa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00110fd:	84 c0                	test   al,al
c00110ff:	74 12                	je     c0011113 <VgaText::puts(char const*)+0x21>
c0011101:	43                   	inc    ebx
c0011102:	51                   	push   ecx
c0011103:	51                   	push   ecx
c0011104:	50                   	push   eax
c0011105:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011109:	e8 ca fe ff ff       	call   c0010fd8 <VgaText::putchar(char)>
c001110e:	83 c4 10             	add    esp,0x10
c0011111:	eb e7                	jmp    c00110fa <VgaText::puts(char const*)+0x8>
c0011113:	83 c4 08             	add    esp,0x8
c0011116:	5b                   	pop    ebx
c0011117:	c3                   	ret    

c0011118 <VgaText::putx(unsigned int)>:
c0011118:	57                   	push   edi
c0011119:	b9 11 00 00 00       	mov    ecx,0x11
c001111e:	56                   	push   esi
c001111f:	be 4e a0 02 c0       	mov    esi,0xc002a04e
c0011124:	53                   	push   ebx
c0011125:	83 ec 20             	sub    esp,0x20
c0011128:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001112c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011130:	fc                   	cld    
c0011131:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011133:	be 08 00 00 00       	mov    esi,0x8
c0011138:	50                   	push   eax
c0011139:	50                   	push   eax
c001113a:	89 d8                	mov    eax,ebx
c001113c:	c1 e3 04             	shl    ebx,0x4
c001113f:	c1 e8 1c             	shr    eax,0x1c
c0011142:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011147:	50                   	push   eax
c0011148:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001114c:	e8 87 fe ff ff       	call   c0010fd8 <VgaText::putchar(char)>
c0011151:	83 c4 10             	add    esp,0x10
c0011154:	4e                   	dec    esi
c0011155:	75 e1                	jne    c0011138 <VgaText::putx(unsigned int)+0x20>
c0011157:	83 c4 20             	add    esp,0x20
c001115a:	5b                   	pop    ebx
c001115b:	5e                   	pop    esi
c001115c:	5f                   	pop    edi
c001115d:	c3                   	ret    

c001115e <VgaText::VgaText(char const*)>:
c001115e:	57                   	push   edi
c001115f:	56                   	push   esi
c0011160:	53                   	push   ebx
c0011161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011165:	83 ec 08             	sub    esp,0x8
c0011168:	6a 00                	push   0x0
c001116a:	50                   	push   eax
c001116b:	e8 6e 05 00 00       	call   c00116de <UnixFile::UnixFile(int)>
c0011170:	83 c4 10             	add    esp,0x10
c0011173:	ba b4 a0 02 c0       	mov    edx,0xc002a0b4
c0011178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117c:	89 10                	mov    DWORD PTR [eax],edx
c001117e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011182:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001118c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011190:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001119a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119e:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a9:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b4:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c2:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d0:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111db:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00111e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e6:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00111ec:	bb 60 e1 02 c0       	mov    ebx,0xc002e160
c00111f1:	b8 08 00 00 00       	mov    eax,0x8
c00111f6:	fc                   	cld    
c00111f7:	89 d7                	mov    edi,edx
c00111f9:	89 de                	mov    esi,ebx
c00111fb:	89 c1                	mov    ecx,eax
c00111fd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00111ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011203:	05 1e 10 00 00       	add    eax,0x101e
c0011208:	83 ec 08             	sub    esp,0x8
c001120b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001120f:	50                   	push   eax
c0011210:	e8 1f f6 fe ff       	call   c0000834 <strcpy>
c0011215:	83 c4 10             	add    esp,0x10
c0011218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121c:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122a:	83 c0 0c             	add    eax,0xc
c001122d:	83 ec 04             	sub    esp,0x4
c0011230:	68 00 0f 00 00       	push   0xf00
c0011235:	6a 00                	push   0x0
c0011237:	50                   	push   eax
c0011238:	e8 3b f5 fe ff       	call   c0000778 <memset>
c001123d:	83 c4 10             	add    esp,0x10
c0011240:	83 ec 04             	sub    esp,0x4
c0011243:	6a 00                	push   0x0
c0011245:	6a 07                	push   0x7
c0011247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001124b:	e8 b4 f4 ff ff       	call   c0010704 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011250:	83 c4 10             	add    esp,0x10
c0011253:	83 ec 08             	sub    esp,0x8
c0011256:	6a 02                	push   0x2
c0011258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001125c:	e8 49 fa ff ff       	call   c0010caa <VgaText::setCursorHeight(int)>
c0011261:	83 c4 10             	add    esp,0x10
c0011264:	83 ec 04             	sub    esp,0x4
c0011267:	6a 00                	push   0x0
c0011269:	6a 00                	push   0x0
c001126b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001126f:	e8 e0 f5 ff ff       	call   c0010854 <VgaText::setCursor(int, int)>
c0011274:	83 c4 10             	add    esp,0x10
c0011277:	83 ec 08             	sub    esp,0x8
c001127a:	6a 01                	push   0x1
c001127c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011280:	e8 7d f3 ff ff       	call   c0010602 <VgaText::showCursor(bool)>
c0011285:	83 c4 10             	add    esp,0x10
c0011288:	83 ec 08             	sub    esp,0x8
c001128b:	6a 01                	push   0x1
c001128d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011291:	e8 7c f3 ff ff       	call   c0010612 <VgaText::disableBlink(bool)>
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	83 ec 0c             	sub    esp,0xc
c001129c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a0:	e8 cf fc ff ff       	call   c0010f74 <VgaText::clearScreen()>
c00112a5:	83 c4 10             	add    esp,0x10
c00112a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ac:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b7:	05 9e 10 00 00       	add    eax,0x109e
c00112bc:	83 ec 04             	sub    esp,0x4
c00112bf:	68 96 00 00 00       	push   0x96
c00112c4:	6a 00                	push   0x0
c00112c6:	50                   	push   eax
c00112c7:	e8 ac f4 fe ff       	call   c0000778 <memset>
c00112cc:	83 c4 10             	add    esp,0x10
c00112cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d3:	05 34 11 00 00       	add    eax,0x1134
c00112d8:	83 ec 04             	sub    esp,0x4
c00112db:	68 2c 01 00 00       	push   0x12c
c00112e0:	6a 00                	push   0x0
c00112e2:	50                   	push   eax
c00112e3:	e8 90 f4 fe ff       	call   c0000778 <memset>
c00112e8:	83 c4 10             	add    esp,0x10
c00112eb:	90                   	nop
c00112ec:	5b                   	pop    ebx
c00112ed:	5e                   	pop    esi
c00112ee:	5f                   	pop    edi
c00112ef:	c3                   	ret    

c00112f0 <VgaText::receiveKey(unsigned char)>:
c00112f0:	55                   	push   ebp
c00112f1:	57                   	push   edi
c00112f2:	56                   	push   esi
c00112f3:	53                   	push   ebx
c00112f4:	83 ec 1c             	sub    esp,0x1c
c00112f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00112fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112ff:	84 db                	test   bl,bl
c0011301:	0f 84 c9 00 00 00    	je     c00113d0 <VgaText::receiveKey(unsigned char)+0xe0>
c0011307:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001130d:	80 fb 08             	cmp    bl,0x8
c0011310:	75 2c                	jne    c001133e <VgaText::receiveKey(unsigned char)+0x4e>
c0011312:	83 ec 0c             	sub    esp,0xc
c0011315:	57                   	push   edi
c0011316:	e8 79 f4 fe ff       	call   c0000794 <strlen>
c001131b:	83 c4 10             	add    esp,0x10
c001131e:	85 c0                	test   eax,eax
c0011320:	74 41                	je     c0011363 <VgaText::receiveKey(unsigned char)+0x73>
c0011322:	50                   	push   eax
c0011323:	50                   	push   eax
c0011324:	6a 08                	push   0x8
c0011326:	56                   	push   esi
c0011327:	e8 ac fc ff ff       	call   c0010fd8 <VgaText::putchar(char)>
c001132c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001132f:	e8 60 f4 fe ff       	call   c0000794 <strlen>
c0011334:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001133c:	eb 22                	jmp    c0011360 <VgaText::receiveKey(unsigned char)+0x70>
c001133e:	0f be c3             	movsx  eax,bl
c0011341:	52                   	push   edx
c0011342:	52                   	push   edx
c0011343:	50                   	push   eax
c0011344:	56                   	push   esi
c0011345:	e8 8e fc ff ff       	call   c0010fd8 <VgaText::putchar(char)>
c001134a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001134e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011353:	59                   	pop    ecx
c0011354:	5d                   	pop    ebp
c0011355:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011359:	50                   	push   eax
c001135a:	57                   	push   edi
c001135b:	e8 14 f6 fe ff       	call   c0000974 <strcat>
c0011360:	83 c4 10             	add    esp,0x10
c0011363:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001136a:	75 05                	jne    c0011371 <VgaText::receiveKey(unsigned char)+0x81>
c001136c:	80 fb 0a             	cmp    bl,0xa
c001136f:	75 53                	jne    c00113c4 <VgaText::receiveKey(unsigned char)+0xd4>
c0011371:	83 ec 0c             	sub    esp,0xc
c0011374:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001137a:	53                   	push   ebx
c001137b:	e8 14 f4 fe ff       	call   c0000794 <strlen>
c0011380:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011383:	89 c5                	mov    ebp,eax
c0011385:	e8 0a f4 fe ff       	call   c0000794 <strlen>
c001138a:	83 c4 10             	add    esp,0x10
c001138d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011391:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011396:	76 10                	jbe    c00113a8 <VgaText::receiveKey(unsigned char)+0xb8>
c0011398:	83 ec 0c             	sub    esp,0xc
c001139b:	68 5f a0 02 c0       	push   0xc002a05f
c00113a0:	e8 84 8e 00 00       	call   c001a229 <Krnl::panic(char const*)>
c00113a5:	83 c4 10             	add    esp,0x10
c00113a8:	50                   	push   eax
c00113a9:	50                   	push   eax
c00113aa:	57                   	push   edi
c00113ab:	53                   	push   ebx
c00113ac:	e8 c3 f5 fe ff       	call   c0000974 <strcat>
c00113b1:	83 c4 0c             	add    esp,0xc
c00113b4:	68 96 00 00 00       	push   0x96
c00113b9:	6a 00                	push   0x0
c00113bb:	57                   	push   edi
c00113bc:	e8 b7 f3 fe ff       	call   c0000778 <memset>
c00113c1:	83 c4 10             	add    esp,0x10
c00113c4:	83 ec 0c             	sub    esp,0xc
c00113c7:	56                   	push   esi
c00113c8:	e8 d5 f9 ff ff       	call   c0010da2 <VgaText::doUpdate()>
c00113cd:	83 c4 10             	add    esp,0x10
c00113d0:	83 c4 1c             	add    esp,0x1c
c00113d3:	5b                   	pop    ebx
c00113d4:	5e                   	pop    esi
c00113d5:	5f                   	pop    edi
c00113d6:	5d                   	pop    ebp
c00113d7:	c3                   	ret    

c00113d8 <VgaText::write(unsigned long long, void*, int*)>:
c00113d8:	55                   	push   ebp
c00113d9:	57                   	push   edi
c00113da:	56                   	push   esi
c00113db:	53                   	push   ebx
c00113dc:	83 ec 0c             	sub    esp,0xc
c00113df:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113e3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113e7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113eb:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00113f2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113f5:	39 eb                	cmp    ebx,ebp
c00113f7:	74 13                	je     c001140c <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113f9:	43                   	inc    ebx
c00113fa:	50                   	push   eax
c00113fb:	50                   	push   eax
c00113fc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011400:	50                   	push   eax
c0011401:	56                   	push   esi
c0011402:	e8 d1 fb ff ff       	call   c0010fd8 <VgaText::putchar(char)>
c0011407:	83 c4 10             	add    esp,0x10
c001140a:	eb e9                	jmp    c00113f5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001140c:	83 ec 0c             	sub    esp,0xc
c001140f:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011416:	56                   	push   esi
c0011417:	e8 86 f9 ff ff       	call   c0010da2 <VgaText::doUpdate()>
c001141c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011420:	89 38                	mov    DWORD PTR [eax],edi
c0011422:	83 c4 1c             	add    esp,0x1c
c0011425:	31 c0                	xor    eax,eax
c0011427:	5b                   	pop    ebx
c0011428:	5e                   	pop    esi
c0011429:	5f                   	pop    edi
c001142a:	5d                   	pop    ebp
c001142b:	c3                   	ret    

c001142c <newTerminal(char*)>:
c001142c:	83 ec 28             	sub    esp,0x28
c001142f:	68 60 12 00 00       	push   0x1260
c0011434:	e8 07 e4 ff ff       	call   c000f840 <malloc>
c0011439:	5a                   	pop    edx
c001143a:	59                   	pop    ecx
c001143b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001143f:	50                   	push   eax
c0011440:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011444:	e8 15 fd ff ff       	call   c001115e <VgaText::VgaText(char const*)>
c0011449:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001144d:	83 c4 2c             	add    esp,0x2c
c0011450:	c3                   	ret    
c0011451:	90                   	nop

c0011452 <TSS::TSS()>:
c0011452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011456:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001145d:	90                   	nop
c001145e:	c3                   	ret    
c001145f:	90                   	nop

c0011460 <TSS::setESP(unsigned long)>:
c0011460:	55                   	push   ebp
c0011461:	89 e5                	mov    ebp,esp
c0011463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011466:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011469:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001146c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001146f:	90                   	nop
c0011470:	5d                   	pop    ebp
c0011471:	c3                   	ret    

c0011472 <TSS::flush()>:
c0011472:	55                   	push   ebp
c0011473:	89 e5                	mov    ebp,esp
c0011475:	83 ec 10             	sub    esp,0x10
c0011478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001147b:	8b 00                	mov    eax,DWORD PTR [eax]
c001147d:	83 c8 03             	or     eax,0x3
c0011480:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011484:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011488:	66 89 d0             	mov    ax,dx
c001148b:	0f 00 d8             	ltr    ax
c001148e:	90                   	nop
c001148f:	c9                   	leave  
c0011490:	c3                   	ret    
c0011491:	90                   	nop

c0011492 <TSS::setup(unsigned long, unsigned long)>:
c0011492:	55                   	push   ebp
c0011493:	89 e5                	mov    ebp,esp
c0011495:	83 ec 18             	sub    esp,0x18
c0011498:	83 ec 0c             	sub    esp,0xc
c001149b:	6a 68                	push   0x68
c001149d:	e8 9e e3 ff ff       	call   c000f840 <malloc>
c00114a2:	83 c4 10             	add    esp,0x10
c00114a5:	89 c2                	mov    edx,eax
c00114a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114aa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b3:	83 ec 04             	sub    esp,0x4
c00114b6:	6a 68                	push   0x68
c00114b8:	6a 00                	push   0x0
c00114ba:	50                   	push   eax
c00114bb:	e8 b8 f2 fe ff       	call   c0000778 <memset>
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c9:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d5:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ed:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00114f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f9:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00114ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011502:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011505:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001150b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011511:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151d:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011526:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011529:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001152f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011532:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011535:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011538:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001153b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011541:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011544:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011557:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155a:	0f 20 da             	mov    edx,cr3
c001155d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011560:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011563:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011569:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156c:	83 ec 08             	sub    esp,0x8
c001156f:	50                   	push   eax
c0011570:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011573:	50                   	push   eax
c0011574:	e8 a5 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c0011579:	83 c4 10             	add    esp,0x10
c001157c:	83 ec 08             	sub    esp,0x8
c001157f:	6a 68                	push   0x68
c0011581:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011584:	50                   	push   eax
c0011585:	e8 b0 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c001158a:	83 c4 10             	add    esp,0x10
c001158d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011591:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011594:	83 e0 0f             	and    eax,0xf
c0011597:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001159a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001159d:	83 c8 40             	or     eax,0x40
c00115a0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115a3:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00115a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115ae:	05 78 01 00 00       	add    eax,0x178
c00115b3:	83 ec 04             	sub    esp,0x4
c00115b6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115b9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115bc:	50                   	push   eax
c00115bd:	e8 ac da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115c2:	83 c4 10             	add    esp,0x10
c00115c5:	89 c2                	mov    edx,eax
c00115c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ca:	89 10                	mov    DWORD PTR [eax],edx
c00115cc:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00115d1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115d7:	05 78 01 00 00       	add    eax,0x178
c00115dc:	83 ec 0c             	sub    esp,0xc
c00115df:	50                   	push   eax
c00115e0:	e8 cd da ff ff       	call   c000f0b2 <GDT::flush()>
c00115e5:	83 c4 10             	add    esp,0x10
c00115e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00115ed:	83 ec 08             	sub    esp,0x8
c00115f0:	50                   	push   eax
c00115f1:	68 c8 a0 02 c0       	push   0xc002a0c8
c00115f6:	e8 b3 15 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00115fb:	83 c4 10             	add    esp,0x10
c00115fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011601:	8b 00                	mov    eax,DWORD PTR [eax]
c0011603:	c9                   	leave  
c0011604:	c3                   	ret    
c0011605:	90                   	nop

c0011606 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001160a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001160e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011611:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011616:	75 08                	jne    c0011620 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011618:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001161e:	eb 38                	jmp    c0011658 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011620:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011625:	75 17                	jne    c001163e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011627:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001162c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001162f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011635:	8b 10                	mov    edx,DWORD PTR [eax]
c0011637:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001163b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001163e:	89 c1                	mov    ecx,eax
c0011640:	83 e1 fd             	and    ecx,0xfffffffd
c0011643:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011649:	74 cd                	je     c0011618 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001164b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011650:	83 e0 ef             	and    eax,0xffffffef
c0011653:	83 f8 08             	cmp    eax,0x8
c0011656:	76 c0                	jbe    c0011618 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011658:	31 c0                	xor    eax,eax
c001165a:	c3                   	ret    
c001165b:	90                   	nop

c001165c <ReservedFilename::isAtty()>:
c001165c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011660:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011663:	31 c0                	xor    eax,eax
c0011665:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001166b:	74 09                	je     c0011676 <ReservedFilename::isAtty()+0x1a>
c001166d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011673:	0f 94 c0             	sete   al
c0011676:	c3                   	ret    
c0011677:	90                   	nop

c0011678 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001167c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011680:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011683:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011687:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001168c:	75 08                	jne    c0011696 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001168e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011694:	eb 3d                	jmp    c00116d3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011696:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001169b:	75 17                	jne    c00116b4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001169d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116a5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00116ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116b1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116b4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116b9:	75 04                	jne    c00116bf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116bb:	89 0a                	mov    DWORD PTR [edx],ecx
c00116bd:	eb 14                	jmp    c00116d3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116bf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116c4:	74 c8                	je     c001168e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116c6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116cb:	83 e0 ef             	and    eax,0xffffffef
c00116ce:	83 f8 08             	cmp    eax,0x8
c00116d1:	76 bb                	jbe    c001168e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116d3:	31 c0                	xor    eax,eax
c00116d5:	c3                   	ret    

c00116d6 <UnixFile::getFileDescriptor()>:
c00116d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116dd:	c3                   	ret    

c00116de <UnixFile::UnixFile(int)>:
c00116de:	53                   	push   ebx
c00116df:	83 ec 28             	sub    esp,0x28
c00116e2:	ba b4 a1 02 c0       	mov    edx,0xc002a1b4
c00116e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116eb:	89 10                	mov    DWORD PTR [eax],edx
c00116ed:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00116f5:	0f 8f 8c 01 00 00    	jg     c0011887 <UnixFile::UnixFile(int)+0x1a9>
c00116fb:	a1 40 d0 02 c0       	mov    eax,ds:0xc002d040
c0011700:	8d 50 01             	lea    edx,[eax+0x1]
c0011703:	89 15 40 d0 02 c0    	mov    DWORD PTR ds:0xc002d040,edx
c0011709:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001170d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011710:	83 ec 08             	sub    esp,0x8
c0011713:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011717:	68 18 e2 02 c0       	push   0xc002e218
c001171c:	e8 7f 6c 01 00       	call   c00283a0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011721:	83 c4 10             	add    esp,0x10
c0011724:	a0 14 e2 02 c0       	mov    al,ds:0xc002e214
c0011729:	83 f0 01             	xor    eax,0x1
c001172c:	84 c0                	test   al,al
c001172e:	0f 84 54 01 00 00    	je     c0011888 <UnixFile::UnixFile(int)+0x1aa>
c0011734:	c6 05 14 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e214,0x1
c001173b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011743:	83 ec 0c             	sub    esp,0xc
c0011746:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001174a:	e8 f1 e0 ff ff       	call   c000f840 <malloc>
c001174f:	83 c4 10             	add    esp,0x10
c0011752:	89 c3                	mov    ebx,eax
c0011754:	83 ec 08             	sub    esp,0x8
c0011757:	68 03 ff ff 0f       	push   0xfffff03
c001175c:	53                   	push   ebx
c001175d:	e8 2c 01 00 00       	call   c001188e <ReservedFilename::ReservedFilename(int)>
c0011762:	83 c4 10             	add    esp,0x10
c0011765:	89 1d 0c e2 02 c0    	mov    DWORD PTR ds:0xc002e20c,ebx
c001176b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011773:	83 ec 0c             	sub    esp,0xc
c0011776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001177a:	e8 c1 e0 ff ff       	call   c000f840 <malloc>
c001177f:	83 c4 10             	add    esp,0x10
c0011782:	89 c3                	mov    ebx,eax
c0011784:	83 ec 08             	sub    esp,0x8
c0011787:	68 01 ff ff 0f       	push   0xfffff01
c001178c:	53                   	push   ebx
c001178d:	e8 fc 00 00 00       	call   c001188e <ReservedFilename::ReservedFilename(int)>
c0011792:	83 c4 10             	add    esp,0x10
c0011795:	89 1d 10 e2 02 c0    	mov    DWORD PTR ds:0xc002e210,ebx
c001179b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117a3:	83 ec 0c             	sub    esp,0xc
c00117a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117aa:	e8 91 e0 ff ff       	call   c000f840 <malloc>
c00117af:	83 c4 10             	add    esp,0x10
c00117b2:	89 c3                	mov    ebx,eax
c00117b4:	83 ec 08             	sub    esp,0x8
c00117b7:	68 00 ff ff 0f       	push   0xfffff00
c00117bc:	53                   	push   ebx
c00117bd:	e8 cc 00 00 00       	call   c001188e <ReservedFilename::ReservedFilename(int)>
c00117c2:	83 c4 10             	add    esp,0x10
c00117c5:	89 1d 04 e2 02 c0    	mov    DWORD PTR ds:0xc002e204,ebx
c00117cb:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117d3:	83 ec 0c             	sub    esp,0xc
c00117d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117da:	e8 61 e0 ff ff       	call   c000f840 <malloc>
c00117df:	83 c4 10             	add    esp,0x10
c00117e2:	89 c3                	mov    ebx,eax
c00117e4:	83 ec 08             	sub    esp,0x8
c00117e7:	68 02 ff ff 0f       	push   0xfffff02
c00117ec:	53                   	push   ebx
c00117ed:	e8 9c 00 00 00       	call   c001188e <ReservedFilename::ReservedFilename(int)>
c00117f2:	83 c4 10             	add    esp,0x10
c00117f5:	89 1d 08 e2 02 c0    	mov    DWORD PTR ds:0xc002e208,ebx
c00117fb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011803:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011808:	7f 7e                	jg     c0011888 <UnixFile::UnixFile(int)+0x1aa>
c001180a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011812:	83 ec 0c             	sub    esp,0xc
c0011815:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011819:	e8 22 e0 ff ff       	call   c000f840 <malloc>
c001181e:	83 c4 10             	add    esp,0x10
c0011821:	89 c3                	mov    ebx,eax
c0011823:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011827:	05 10 ff ff 0f       	add    eax,0xfffff10
c001182c:	83 ec 08             	sub    esp,0x8
c001182f:	50                   	push   eax
c0011830:	53                   	push   ebx
c0011831:	e8 58 00 00 00       	call   c001188e <ReservedFilename::ReservedFilename(int)>
c0011836:	83 c4 10             	add    esp,0x10
c0011839:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001183d:	89 1c 85 e0 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e20],ebx
c0011844:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001184c:	83 ec 0c             	sub    esp,0xc
c001184f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011853:	e8 e8 df ff ff       	call   c000f840 <malloc>
c0011858:	83 c4 10             	add    esp,0x10
c001185b:	89 c3                	mov    ebx,eax
c001185d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011861:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011866:	83 ec 08             	sub    esp,0x8
c0011869:	50                   	push   eax
c001186a:	53                   	push   ebx
c001186b:	e8 1e 00 00 00       	call   c001188e <ReservedFilename::ReservedFilename(int)>
c0011870:	83 c4 10             	add    esp,0x10
c0011873:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011877:	89 1c 85 a0 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e60],ebx
c001187e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011882:	e9 7c ff ff ff       	jmp    c0011803 <UnixFile::UnixFile(int)+0x125>
c0011887:	90                   	nop
c0011888:	83 c4 28             	add    esp,0x28
c001188b:	5b                   	pop    ebx
c001188c:	c3                   	ret    
c001188d:	90                   	nop

c001188e <ReservedFilename::ReservedFilename(int)>:
c001188e:	83 ec 0c             	sub    esp,0xc
c0011891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011895:	83 ec 08             	sub    esp,0x8
c0011898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001189c:	50                   	push   eax
c001189d:	e8 3c fe ff ff       	call   c00116de <UnixFile::UnixFile(int)>
c00118a2:	83 c4 10             	add    esp,0x10
c00118a5:	ba d0 a1 02 c0       	mov    edx,0xc002a1d0
c00118aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ae:	89 10                	mov    DWORD PTR [eax],edx
c00118b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118bb:	90                   	nop
c00118bc:	83 c4 0c             	add    esp,0xc
c00118bf:	c3                   	ret    

c00118c0 <UnixFile::~UnixFile()>:
c00118c0:	83 ec 1c             	sub    esp,0x1c
c00118c3:	ba b4 a1 02 c0       	mov    edx,0xc002a1b4
c00118c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118cc:	89 10                	mov    DWORD PTR [eax],edx
c00118ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118d5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118da:	7f 73                	jg     c001194f <UnixFile::~UnixFile()+0x8f>
c00118dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118e4:	83 ec 0c             	sub    esp,0xc
c00118e7:	68 18 e2 02 c0       	push   0xc002e218
c00118ec:	e8 83 6b 01 00       	call   c0028474 <LinkedList<UnixFile>::getFirstElement()>
c00118f1:	83 c4 10             	add    esp,0x10
c00118f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118f8:	83 ec 0c             	sub    esp,0xc
c00118fb:	68 18 e2 02 c0       	push   0xc002e218
c0011900:	e8 77 6b 01 00       	call   c002847c <LinkedList<UnixFile>::removeFirst()>
c0011905:	83 c4 10             	add    esp,0x10
c0011908:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001190c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011910:	74 40                	je     c0011952 <UnixFile::~UnixFile()+0x92>
c0011912:	83 ec 08             	sub    esp,0x8
c0011915:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011919:	68 18 e2 02 c0       	push   0xc002e218
c001191e:	e8 7d 6a 01 00       	call   c00283a0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011923:	83 c4 10             	add    esp,0x10
c0011926:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001192a:	8d 50 01             	lea    edx,[eax+0x1]
c001192d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011931:	3d 88 13 00 00       	cmp    eax,0x1388
c0011936:	0f 94 c0             	sete   al
c0011939:	84 c0                	test   al,al
c001193b:	74 a7                	je     c00118e4 <UnixFile::~UnixFile()+0x24>
c001193d:	83 ec 0c             	sub    esp,0xc
c0011940:	68 8c a1 02 c0       	push   0xc002a18c
c0011945:	e8 df 88 00 00       	call   c001a229 <Krnl::panic(char const*)>
c001194a:	83 c4 10             	add    esp,0x10
c001194d:	eb 95                	jmp    c00118e4 <UnixFile::~UnixFile()+0x24>
c001194f:	90                   	nop
c0011950:	eb 01                	jmp    c0011953 <UnixFile::~UnixFile()+0x93>
c0011952:	90                   	nop
c0011953:	90                   	nop
c0011954:	83 c4 1c             	add    esp,0x1c
c0011957:	c3                   	ret    

c0011958 <UnixFile::~UnixFile()>:
c0011958:	83 ec 0c             	sub    esp,0xc
c001195b:	83 ec 0c             	sub    esp,0xc
c001195e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011962:	e8 59 ff ff ff       	call   c00118c0 <UnixFile::~UnixFile()>
c0011967:	83 c4 10             	add    esp,0x10
c001196a:	83 ec 08             	sub    esp,0x8
c001196d:	6a 0c                	push   0xc
c001196f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011973:	e8 56 11 00 00       	call   c0012ace <operator delete(void*, unsigned long)>
c0011978:	83 c4 10             	add    esp,0x10
c001197b:	83 c4 0c             	add    esp,0xc
c001197e:	c3                   	ret    
c001197f:	90                   	nop

c0011980 <ReservedFilename::~ReservedFilename()>:
c0011980:	83 ec 0c             	sub    esp,0xc
c0011983:	ba d0 a1 02 c0       	mov    edx,0xc002a1d0
c0011988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001198c:	89 10                	mov    DWORD PTR [eax],edx
c001198e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011992:	83 ec 0c             	sub    esp,0xc
c0011995:	50                   	push   eax
c0011996:	e8 25 ff ff ff       	call   c00118c0 <UnixFile::~UnixFile()>
c001199b:	83 c4 10             	add    esp,0x10
c001199e:	90                   	nop
c001199f:	83 c4 0c             	add    esp,0xc
c00119a2:	c3                   	ret    
c00119a3:	90                   	nop

c00119a4 <ReservedFilename::~ReservedFilename()>:
c00119a4:	83 ec 0c             	sub    esp,0xc
c00119a7:	83 ec 0c             	sub    esp,0xc
c00119aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ae:	e8 cd ff ff ff       	call   c0011980 <ReservedFilename::~ReservedFilename()>
c00119b3:	83 c4 10             	add    esp,0x10
c00119b6:	83 ec 08             	sub    esp,0x8
c00119b9:	6a 0c                	push   0xc
c00119bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119bf:	e8 0a 11 00 00       	call   c0012ace <operator delete(void*, unsigned long)>
c00119c4:	83 c4 10             	add    esp,0x10
c00119c7:	83 c4 0c             	add    esp,0xc
c00119ca:	c3                   	ret    

c00119cb <getFromFileDescriptor(int)>:
c00119cb:	53                   	push   ebx
c00119cc:	83 ec 08             	sub    esp,0x8
c00119cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119d3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119d9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119df:	7f 2c                	jg     c0011a0d <getFromFileDescriptor(int)+0x42>
c00119e1:	83 ec 0c             	sub    esp,0xc
c00119e4:	68 18 e2 02 c0       	push   0xc002e218
c00119e9:	e8 86 6a 01 00       	call   c0028474 <LinkedList<UnixFile>::getFirstElement()>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	85 c0                	test   eax,eax
c00119f3:	75 04                	jne    c00119f9 <getFromFileDescriptor(int)+0x2e>
c00119f5:	31 c0                	xor    eax,eax
c00119f7:	eb 6e                	jmp    c0011a67 <getFromFileDescriptor(int)+0x9c>
c00119f9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00119fc:	74 69                	je     c0011a67 <getFromFileDescriptor(int)+0x9c>
c00119fe:	52                   	push   edx
c00119ff:	52                   	push   edx
c0011a00:	50                   	push   eax
c0011a01:	68 18 e2 02 c0       	push   0xc002e218
c0011a06:	e8 13 6b 01 00       	call   c002851e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a0b:	eb e1                	jmp    c00119ee <getFromFileDescriptor(int)+0x23>
c0011a0d:	a1 0c e2 02 c0       	mov    eax,ds:0xc002e20c
c0011a12:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a18:	74 4d                	je     c0011a67 <getFromFileDescriptor(int)+0x9c>
c0011a1a:	a1 10 e2 02 c0       	mov    eax,ds:0xc002e210
c0011a1f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a25:	74 40                	je     c0011a67 <getFromFileDescriptor(int)+0x9c>
c0011a27:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0011a2c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a32:	74 33                	je     c0011a67 <getFromFileDescriptor(int)+0x9c>
c0011a34:	a1 04 e2 02 c0       	mov    eax,ds:0xc002e204
c0011a39:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a3f:	74 26                	je     c0011a67 <getFromFileDescriptor(int)+0x9c>
c0011a41:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a47:	83 f8 08             	cmp    eax,0x8
c0011a4a:	77 09                	ja     c0011a55 <getFromFileDescriptor(int)+0x8a>
c0011a4c:	8b 04 85 e0 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e20]
c0011a53:	eb 12                	jmp    c0011a67 <getFromFileDescriptor(int)+0x9c>
c0011a55:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a5b:	83 fb 08             	cmp    ebx,0x8
c0011a5e:	77 95                	ja     c00119f5 <getFromFileDescriptor(int)+0x2a>
c0011a60:	8b 04 9d a0 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1e60]
c0011a67:	83 c4 08             	add    esp,0x8
c0011a6a:	5b                   	pop    ebx
c0011a6b:	c3                   	ret    

c0011a6c <__static_initialization_and_destruction_0(int, int)>:
c0011a6c:	83 ec 0c             	sub    esp,0xc
c0011a6f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a74:	75 34                	jne    c0011aaa <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a76:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a7e:	75 2a                	jne    c0011aaa <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a80:	83 ec 0c             	sub    esp,0xc
c0011a83:	68 18 e2 02 c0       	push   0xc002e218
c0011a88:	e8 bb 68 01 00       	call   c0028348 <LinkedList<UnixFile>::LinkedList()>
c0011a8d:	83 c4 10             	add    esp,0x10
c0011a90:	83 ec 04             	sub    esp,0x4
c0011a93:	68 bc cf 02 c0       	push   0xc002cfbc
c0011a98:	68 18 e2 02 c0       	push   0xc002e218
c0011a9d:	68 46 83 02 c0       	push   0xc0028346
c0011aa2:	e8 a1 0f 00 00       	call   c0012a48 <__cxa_atexit>
c0011aa7:	83 c4 10             	add    esp,0x10
c0011aaa:	90                   	nop
c0011aab:	83 c4 0c             	add    esp,0xc
c0011aae:	c3                   	ret    

c0011aaf <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011aaf:	83 ec 0c             	sub    esp,0xc
c0011ab2:	83 ec 08             	sub    esp,0x8
c0011ab5:	68 ff ff 00 00       	push   0xffff
c0011aba:	6a 01                	push   0x1
c0011abc:	e8 ab ff ff ff       	call   c0011a6c <__static_initialization_and_destruction_0(int, int)>
c0011ac1:	83 c4 10             	add    esp,0x10
c0011ac4:	83 c4 0c             	add    esp,0xc
c0011ac7:	c3                   	ret    

c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ac8:	53                   	push   ebx
c0011ac9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011acd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ad1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011ad7:	89 c8                	mov    eax,ecx
c0011ad9:	d1 e8                	shr    eax,1
c0011adb:	03 05 48 d0 02 c0    	add    eax,DWORD PTR ds:0xc002d048
c0011ae1:	83 e1 01             	and    ecx,0x1
c0011ae4:	8a 10                	mov    dl,BYTE PTR [eax]
c0011ae6:	75 09                	jne    c0011af1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011ae8:	83 e2 f0             	and    edx,0xfffffff0
c0011aeb:	09 da                	or     edx,ebx
c0011aed:	88 10                	mov    BYTE PTR [eax],dl
c0011aef:	5b                   	pop    ebx
c0011af0:	c3                   	ret    
c0011af1:	c1 e3 04             	shl    ebx,0x4
c0011af4:	83 e2 0f             	and    edx,0xf
c0011af7:	09 da                	or     edx,ebx
c0011af9:	88 10                	mov    BYTE PTR [eax],dl
c0011afb:	5b                   	pop    ebx
c0011afc:	c3                   	ret    

c0011afd <Virt::getPageState(unsigned long)>:
c0011afd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b01:	8b 0d 48 d0 02 c0    	mov    ecx,DWORD PTR ds:0xc002d048
c0011b07:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b0d:	89 d0                	mov    eax,edx
c0011b0f:	d1 e8                	shr    eax,1
c0011b11:	83 e2 01             	and    edx,0x1
c0011b14:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b17:	75 04                	jne    c0011b1d <Virt::getPageState(unsigned long)+0x20>
c0011b19:	83 e0 0f             	and    eax,0xf
c0011b1c:	c3                   	ret    
c0011b1d:	c0 e8 04             	shr    al,0x4
c0011b20:	c3                   	ret    

c0011b21 <Virt::allocateKernelVirtualPages(int)>:
c0011b21:	55                   	push   ebp
c0011b22:	31 ed                	xor    ebp,ebp
c0011b24:	57                   	push   edi
c0011b25:	56                   	push   esi
c0011b26:	53                   	push   ebx
c0011b27:	31 db                	xor    ebx,ebx
c0011b29:	83 ec 1c             	sub    esp,0x1c
c0011b2c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b30:	8b 3d 44 d0 02 c0    	mov    edi,DWORD PTR ds:0xc002d044
c0011b36:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b3b:	57                   	push   edi
c0011b3c:	e8 bc ff ff ff       	call   c0011afd <Virt::getPageState(unsigned long)>
c0011b41:	5a                   	pop    edx
c0011b42:	84 c0                	test   al,al
c0011b44:	75 3a                	jne    c0011b80 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b46:	85 db                	test   ebx,ebx
c0011b48:	75 02                	jne    c0011b4c <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b4a:	89 fd                	mov    ebp,edi
c0011b4c:	43                   	inc    ebx
c0011b4d:	39 f3                	cmp    ebx,esi
c0011b4f:	74 5a                	je     c0011bab <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b51:	47                   	inc    edi
c0011b52:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b58:	76 31                	jbe    c0011b8b <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b5a:	c7 05 44 d0 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d044,0xc8000
c0011b64:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b69:	75 28                	jne    c0011b93 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b6b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b70:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b75:	57                   	push   edi
c0011b76:	e8 82 ff ff ff       	call   c0011afd <Virt::getPageState(unsigned long)>
c0011b7b:	5a                   	pop    edx
c0011b7c:	84 c0                	test   al,al
c0011b7e:	74 c6                	je     c0011b46 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b80:	31 db                	xor    ebx,ebx
c0011b82:	47                   	inc    edi
c0011b83:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b89:	77 cf                	ja     c0011b5a <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b8b:	89 3d 44 d0 02 c0    	mov    DWORD PTR ds:0xc002d044,edi
c0011b91:	eb a8                	jmp    c0011b3b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b93:	83 ec 0c             	sub    esp,0xc
c0011b96:	68 e4 a1 02 c0       	push   0xc002a1e4
c0011b9b:	e8 89 86 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0011ba0:	8b 3d 44 d0 02 c0    	mov    edi,DWORD PTR ds:0xc002d044
c0011ba6:	83 c4 10             	add    esp,0x10
c0011ba9:	eb 90                	jmp    c0011b3b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bab:	89 2d 44 d0 02 c0    	mov    DWORD PTR ds:0xc002d044,ebp
c0011bb1:	4b                   	dec    ebx
c0011bb2:	74 5f                	je     c0011c13 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bb4:	85 f6                	test   esi,esi
c0011bb6:	74 3d                	je     c0011bf5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bb8:	89 e8                	mov    eax,ebp
c0011bba:	31 db                	xor    ebx,ebx
c0011bbc:	8d 7e ff             	lea    edi,[esi-0x1]
c0011bbf:	eb 14                	jmp    c0011bd5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011bc1:	6a 01                	push   0x1
c0011bc3:	43                   	inc    ebx
c0011bc4:	50                   	push   eax
c0011bc5:	e8 fe fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bca:	58                   	pop    eax
c0011bcb:	39 f3                	cmp    ebx,esi
c0011bcd:	5a                   	pop    edx
c0011bce:	74 25                	je     c0011bf5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bd0:	a1 44 d0 02 c0       	mov    eax,ds:0xc002d044
c0011bd5:	8d 50 01             	lea    edx,[eax+0x1]
c0011bd8:	85 db                	test   ebx,ebx
c0011bda:	89 15 44 d0 02 c0    	mov    DWORD PTR ds:0xc002d044,edx
c0011be0:	74 20                	je     c0011c02 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011be2:	39 df                	cmp    edi,ebx
c0011be4:	75 db                	jne    c0011bc1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011be6:	6a 03                	push   0x3
c0011be8:	43                   	inc    ebx
c0011be9:	50                   	push   eax
c0011bea:	e8 d9 fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bef:	59                   	pop    ecx
c0011bf0:	39 f3                	cmp    ebx,esi
c0011bf2:	58                   	pop    eax
c0011bf3:	75 db                	jne    c0011bd0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bf5:	83 c4 1c             	add    esp,0x1c
c0011bf8:	89 e8                	mov    eax,ebp
c0011bfa:	5b                   	pop    ebx
c0011bfb:	c1 e0 0c             	shl    eax,0xc
c0011bfe:	5e                   	pop    esi
c0011bff:	5f                   	pop    edi
c0011c00:	5d                   	pop    ebp
c0011c01:	c3                   	ret    
c0011c02:	6a 02                	push   0x2
c0011c04:	bb 01 00 00 00       	mov    ebx,0x1
c0011c09:	50                   	push   eax
c0011c0a:	e8 b9 fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c0f:	58                   	pop    eax
c0011c10:	5a                   	pop    edx
c0011c11:	eb bd                	jmp    c0011bd0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c13:	6a 04                	push   0x4
c0011c15:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c18:	55                   	push   ebp
c0011c19:	a3 44 d0 02 c0       	mov    ds:0xc002d044,eax
c0011c1e:	e8 a5 fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c23:	59                   	pop    ecx
c0011c24:	89 e8                	mov    eax,ebp
c0011c26:	5b                   	pop    ebx
c0011c27:	c1 e0 0c             	shl    eax,0xc
c0011c2a:	83 c4 1c             	add    esp,0x1c
c0011c2d:	5b                   	pop    ebx
c0011c2e:	5e                   	pop    esi
c0011c2f:	5f                   	pop    edi
c0011c30:	5d                   	pop    ebp
c0011c31:	c3                   	ret    

c0011c32 <Virt::virtualMemorySetup()>:
c0011c32:	53                   	push   ebx
c0011c33:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c38:	83 ec 08             	sub    esp,0x8
c0011c3b:	6a 0f                	push   0xf
c0011c3d:	53                   	push   ebx
c0011c3e:	43                   	inc    ebx
c0011c3f:	e8 84 fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c44:	59                   	pop    ecx
c0011c45:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c4b:	58                   	pop    eax
c0011c4c:	75 ed                	jne    c0011c3b <Virt::virtualMemorySetup()+0x9>
c0011c4e:	83 ec 08             	sub    esp,0x8
c0011c51:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c56:	68 00 00 00 c8       	push   0xc8000000
c0011c5b:	68 c6 a3 02 c0       	push   0xc002a3c6
c0011c60:	e8 49 0f 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0011c65:	58                   	pop    eax
c0011c66:	5a                   	pop    edx
c0011c67:	68 00 f0 ff ef       	push   0xeffff000
c0011c6c:	68 da a3 02 c0       	push   0xc002a3da
c0011c71:	e8 38 0f 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0011c76:	83 c4 10             	add    esp,0x10
c0011c79:	83 ec 08             	sub    esp,0x8
c0011c7c:	6a 00                	push   0x0
c0011c7e:	53                   	push   ebx
c0011c7f:	43                   	inc    ebx
c0011c80:	e8 43 fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c85:	83 c4 10             	add    esp,0x10
c0011c88:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c8e:	75 e9                	jne    c0011c79 <Virt::virtualMemorySetup()+0x47>
c0011c90:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c95:	83 ec 08             	sub    esp,0x8
c0011c98:	6a 0f                	push   0xf
c0011c9a:	53                   	push   ebx
c0011c9b:	43                   	inc    ebx
c0011c9c:	e8 27 fe ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca1:	83 c4 10             	add    esp,0x10
c0011ca4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011caa:	75 e9                	jne    c0011c95 <Virt::virtualMemorySetup()+0x63>
c0011cac:	83 c4 08             	add    esp,0x8
c0011caf:	5b                   	pop    ebx
c0011cb0:	c3                   	ret    

c0011cb1 <Virt::getAKernelVAS()>:
c0011cb1:	a1 24 e2 02 c0       	mov    eax,ds:0xc002e224
c0011cb6:	c3                   	ret    

c0011cb7 <Virt::setupPageSwapping(int)>:
c0011cb7:	57                   	push   edi
c0011cb8:	56                   	push   esi
c0011cb9:	53                   	push   ebx
c0011cba:	83 ec 1c             	sub    esp,0x1c
c0011cbd:	68 14 01 00 00       	push   0x114
c0011cc2:	e8 79 db ff ff       	call   c000f840 <malloc>
c0011cc7:	83 c4 0c             	add    esp,0xc
c0011cca:	89 c6                	mov    esi,eax
c0011ccc:	ff 35 14 16 03 c0    	push   DWORD PTR ds:0xc0031614
c0011cd2:	68 ee a3 02 c0       	push   0xc002a3ee
c0011cd7:	50                   	push   eax
c0011cd8:	e8 29 14 00 00       	call   c0013106 <File::File(char const*, Process*)>
c0011cdd:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ce0:	e8 fd 15 00 00       	call   c00132e2 <File::unlink()>
c0011ce5:	58                   	pop    eax
c0011ce6:	5a                   	pop    edx
c0011ce7:	6a 12                	push   0x12
c0011ce9:	56                   	push   esi
c0011cea:	e8 7b 14 00 00       	call   c001316a <File::open(FileOpenMode)>
c0011cef:	83 c4 10             	add    esp,0x10
c0011cf2:	85 c0                	test   eax,eax
c0011cf4:	0f 85 ca 00 00 00    	jne    c0011dc4 <Virt::setupPageSwapping(int)+0x10d>
c0011cfa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cfe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d06:	c1 e3 08             	shl    ebx,0x8
c0011d09:	83 ec 0c             	sub    esp,0xc
c0011d0c:	68 00 00 01 00       	push   0x10000
c0011d11:	e8 2a db ff ff       	call   c000f840 <malloc>
c0011d16:	83 c4 0c             	add    esp,0xc
c0011d19:	89 c7                	mov    edi,eax
c0011d1b:	68 00 00 01 00       	push   0x10000
c0011d20:	6a 00                	push   0x0
c0011d22:	50                   	push   eax
c0011d23:	e8 50 ea fe ff       	call   c0000778 <memset>
c0011d28:	83 c4 10             	add    esp,0x10
c0011d2b:	85 db                	test   ebx,ebx
c0011d2d:	79 03                	jns    c0011d32 <Virt::setupPageSwapping(int)+0x7b>
c0011d2f:	83 c3 0f             	add    ebx,0xf
c0011d32:	c1 fb 04             	sar    ebx,0x4
c0011d35:	4b                   	dec    ebx
c0011d36:	83 fb ff             	cmp    ebx,0xffffffff
c0011d39:	74 4b                	je     c0011d86 <Virt::setupPageSwapping(int)+0xcf>
c0011d3b:	83 ec 0c             	sub    esp,0xc
c0011d3e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d40:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d44:	52                   	push   edx
c0011d45:	57                   	push   edi
c0011d46:	6a 00                	push   0x0
c0011d48:	68 00 00 01 00       	push   0x10000
c0011d4d:	56                   	push   esi
c0011d4e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d51:	83 c4 20             	add    esp,0x20
c0011d54:	85 c0                	test   eax,eax
c0011d56:	75 59                	jne    c0011db1 <Virt::setupPageSwapping(int)+0xfa>
c0011d58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d5c:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d61:	74 d2                	je     c0011d35 <Virt::setupPageSwapping(int)+0x7e>
c0011d63:	83 ec 08             	sub    esp,0x8
c0011d66:	4b                   	dec    ebx
c0011d67:	50                   	push   eax
c0011d68:	68 41 a4 02 c0       	push   0xc002a441
c0011d6d:	e8 3c 0e 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0011d72:	c7 04 24 4a a4 02 c0 	mov    DWORD PTR [esp],0xc002a44a
c0011d79:	e8 ab 84 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0011d7e:	83 c4 10             	add    esp,0x10
c0011d81:	83 fb ff             	cmp    ebx,0xffffffff
c0011d84:	75 b5                	jne    c0011d3b <Virt::setupPageSwapping(int)+0x84>
c0011d86:	83 ec 0c             	sub    esp,0xc
c0011d89:	56                   	push   esi
c0011d8a:	e8 39 14 00 00       	call   c00131c8 <File::close()>
c0011d8f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d92:	e8 c9 da ff ff       	call   c000f860 <rfree>
c0011d97:	83 c4 10             	add    esp,0x10
c0011d9a:	85 f6                	test   esi,esi
c0011d9c:	74 0c                	je     c0011daa <Virt::setupPageSwapping(int)+0xf3>
c0011d9e:	83 ec 0c             	sub    esp,0xc
c0011da1:	8b 06                	mov    eax,DWORD PTR [esi]
c0011da3:	56                   	push   esi
c0011da4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011da7:	83 c4 10             	add    esp,0x10
c0011daa:	83 c4 10             	add    esp,0x10
c0011dad:	5b                   	pop    ebx
c0011dae:	5e                   	pop    esi
c0011daf:	5f                   	pop    edi
c0011db0:	c3                   	ret    
c0011db1:	83 ec 08             	sub    esp,0x8
c0011db4:	50                   	push   eax
c0011db5:	68 29 a4 02 c0       	push   0xc002a429
c0011dba:	e8 ef 0d 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0011dbf:	83 c4 10             	add    esp,0x10
c0011dc2:	eb 94                	jmp    c0011d58 <Virt::setupPageSwapping(int)+0xa1>
c0011dc4:	83 ec 08             	sub    esp,0x8
c0011dc7:	50                   	push   eax
c0011dc8:	68 05 a4 02 c0       	push   0xc002a405
c0011dcd:	e8 dc 0d 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0011dd2:	c7 04 24 0e a4 02 c0 	mov    DWORD PTR [esp],0xc002a40e
c0011dd9:	e8 4b 84 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0011dde:	83 c4 10             	add    esp,0x10
c0011de1:	e9 14 ff ff ff       	jmp    c0011cfa <Virt::setupPageSwapping(int)+0x43>

c0011de6 <VAS::VAS()>:
c0011de6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011df1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df5:	a3 24 e2 02 c0       	mov    ds:0xc002e224,eax
c0011dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dfe:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e06:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0d:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e14:	90                   	nop
c0011e15:	c3                   	ret    

c0011e16 <VAS::VAS(VAS*)>:
c0011e16:	83 ec 0c             	sub    esp,0xc
c0011e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e1d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e24:	83 ec 0c             	sub    esp,0xc
c0011e27:	68 04 a2 02 c0       	push   0xc002a204
c0011e2c:	e8 f8 83 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0011e31:	83 c4 10             	add    esp,0x10
c0011e34:	90                   	nop
c0011e35:	83 c4 0c             	add    esp,0xc
c0011e38:	c3                   	ret    
c0011e39:	90                   	nop

c0011e3a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e3e:	89 c2                	mov    edx,eax
c0011e40:	c1 e8 0a             	shr    eax,0xa
c0011e43:	c1 ea 16             	shr    edx,0x16
c0011e46:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e4b:	19 c9                	sbb    ecx,ecx
c0011e4d:	c1 e2 0c             	shl    edx,0xc
c0011e50:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e56:	25 fc 0f 00 00       	and    eax,0xffc
c0011e5b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e62:	01 d0                	add    eax,edx
c0011e64:	c3                   	ret    
c0011e65:	90                   	nop

c0011e66 <VAS::getPageTableEntry(unsigned long)>:
c0011e66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e6a:	89 ca                	mov    edx,ecx
c0011e6c:	c1 e9 0a             	shr    ecx,0xa
c0011e6f:	c1 ea 16             	shr    edx,0x16
c0011e72:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011e78:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011e7e:	c1 e0 0c             	shl    eax,0xc
c0011e81:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011e84:	c3                   	ret    

c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011e85:	57                   	push   edi
c0011e86:	56                   	push   esi
c0011e87:	be 01 00 00 00       	mov    esi,0x1
c0011e8c:	53                   	push   ebx
c0011e8d:	83 ec 10             	sub    esp,0x10
c0011e90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e94:	c1 eb 0c             	shr    ebx,0xc
c0011e97:	eb 3f                	jmp    c0011ed8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011e99:	e8 13 fe ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0011e9e:	83 ec 08             	sub    esp,0x8
c0011ea1:	57                   	push   edi
c0011ea2:	50                   	push   eax
c0011ea3:	e8 be ff ff ff       	call   c0011e66 <VAS::getPageTableEntry(unsigned long)>
c0011ea8:	83 c4 10             	add    esp,0x10
c0011eab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ead:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011eb1:	f6 c4 04             	test   ah,0x4
c0011eb4:	75 5f                	jne    c0011f15 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011eb6:	80 fa 04             	cmp    dl,0x4
c0011eb9:	74 78                	je     c0011f33 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011ebb:	80 fa 02             	cmp    dl,0x2
c0011ebe:	0f 84 88 00 00 00    	je     c0011f4c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ec4:	80 fa 03             	cmp    dl,0x3
c0011ec7:	0f 84 ad 00 00 00    	je     c0011f7a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ecd:	fe ca                	dec    dl
c0011ecf:	0f 84 92 00 00 00    	je     c0011f67 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ed5:	43                   	inc    ebx
c0011ed6:	31 f6                	xor    esi,esi
c0011ed8:	53                   	push   ebx
c0011ed9:	e8 1f fc ff ff       	call   c0011afd <Virt::getPageState(unsigned long)>
c0011ede:	5f                   	pop    edi
c0011edf:	89 df                	mov    edi,ebx
c0011ee1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011ee5:	c1 e7 0c             	shl    edi,0xc
c0011ee8:	84 c0                	test   al,al
c0011eea:	75 ad                	jne    c0011e99 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011eec:	83 ec 0c             	sub    esp,0xc
c0011eef:	68 50 a4 02 c0       	push   0xc002a450
c0011ef4:	e8 30 83 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0011ef9:	e8 b3 fd ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0011efe:	5a                   	pop    edx
c0011eff:	59                   	pop    ecx
c0011f00:	57                   	push   edi
c0011f01:	50                   	push   eax
c0011f02:	e8 5f ff ff ff       	call   c0011e66 <VAS::getPageTableEntry(unsigned long)>
c0011f07:	83 c4 10             	add    esp,0x10
c0011f0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f0c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f10:	f6 c4 04             	test   ah,0x4
c0011f13:	74 c0                	je     c0011ed5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f15:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f19:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f1e:	83 ec 0c             	sub    esp,0xc
c0011f21:	50                   	push   eax
c0011f22:	e8 2e df ff ff       	call   c000fe55 <Phys::freePage(unsigned long)>
c0011f27:	83 c4 10             	add    esp,0x10
c0011f2a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f2e:	80 fa 04             	cmp    dl,0x4
c0011f31:	75 88                	jne    c0011ebb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f33:	89 f0                	mov    eax,esi
c0011f35:	84 c0                	test   al,al
c0011f37:	75 47                	jne    c0011f80 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f39:	c7 44 24 20 28 a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a228
c0011f41:	83 c4 10             	add    esp,0x10
c0011f44:	5b                   	pop    ebx
c0011f45:	5e                   	pop    esi
c0011f46:	5f                   	pop    edi
c0011f47:	e9 dd 82 00 00       	jmp    c001a229 <Krnl::panic(char const*)>
c0011f4c:	89 f0                	mov    eax,esi
c0011f4e:	84 c0                	test   al,al
c0011f50:	75 15                	jne    c0011f67 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f52:	83 ec 0c             	sub    esp,0xc
c0011f55:	68 6c a4 02 c0       	push   0xc002a46c
c0011f5a:	e8 ca 82 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0011f5f:	83 c4 10             	add    esp,0x10
c0011f62:	e9 6e ff ff ff       	jmp    c0011ed5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f67:	83 ec 08             	sub    esp,0x8
c0011f6a:	6a 00                	push   0x0
c0011f6c:	53                   	push   ebx
c0011f6d:	e8 56 fb ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f72:	83 c4 10             	add    esp,0x10
c0011f75:	e9 5b ff ff ff       	jmp    c0011ed5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f7a:	89 f0                	mov    eax,esi
c0011f7c:	84 c0                	test   al,al
c0011f7e:	75 15                	jne    c0011f95 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011f80:	83 ec 08             	sub    esp,0x8
c0011f83:	6a 00                	push   0x0
c0011f85:	53                   	push   ebx
c0011f86:	e8 3d fb ff ff       	call   c0011ac8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f8b:	83 c4 10             	add    esp,0x10
c0011f8e:	83 c4 10             	add    esp,0x10
c0011f91:	5b                   	pop    ebx
c0011f92:	5e                   	pop    esi
c0011f93:	5f                   	pop    edi
c0011f94:	c3                   	ret    
c0011f95:	c7 44 24 20 88 a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a488
c0011f9d:	83 c4 10             	add    esp,0x10
c0011fa0:	5b                   	pop    ebx
c0011fa1:	5e                   	pop    esi
c0011fa2:	5f                   	pop    edi
c0011fa3:	e9 81 82 00 00       	jmp    c001a229 <Krnl::panic(char const*)>

c0011fa8 <VAS::freeAllocatedPages(unsigned long)>:
c0011fa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fb0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fb4:	74 09                	je     c0011fbf <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fb6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fba:	e9 c6 fe ff ff       	jmp    c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fbf:	c7 44 24 04 4c a2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a24c
c0011fc7:	e9 e2 0b 00 00       	jmp    c0012bae <Dbg::kprintf(char const*, ...)>

c0011fcc <VAS::virtualToPhysical(unsigned long)>:
c0011fcc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fd0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fd4:	e8 8d fe ff ff       	call   c0011e66 <VAS::getPageTableEntry(unsigned long)>
c0011fd9:	5a                   	pop    edx
c0011fda:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fdc:	59                   	pop    ecx
c0011fdd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fe2:	c3                   	ret    
c0011fe3:	90                   	nop

c0011fe4 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011fe4:	55                   	push   ebp
c0011fe5:	57                   	push   edi
c0011fe6:	56                   	push   esi
c0011fe7:	53                   	push   ebx
c0011fe8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011fec:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011ff0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011ff4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011ff8:	85 db                	test   ebx,ebx
c0011ffa:	7e 22                	jle    c001201e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011ffc:	c1 e3 0c             	shl    ebx,0xc
c0011fff:	01 f3                	add    ebx,esi
c0012001:	56                   	push   esi
c0012002:	81 c6 00 10 00 00    	add    esi,0x1000
c0012008:	55                   	push   ebp
c0012009:	e8 58 fe ff ff       	call   c0011e66 <VAS::getPageTableEntry(unsigned long)>
c001200e:	5a                   	pop    edx
c001200f:	59                   	pop    ecx
c0012010:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012012:	21 f9                	and    ecx,edi
c0012014:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012018:	39 f3                	cmp    ebx,esi
c001201a:	89 08                	mov    DWORD PTR [eax],ecx
c001201c:	75 e3                	jne    c0012001 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001201e:	5b                   	pop    ebx
c001201f:	5e                   	pop    esi
c0012020:	5f                   	pop    edi
c0012021:	5d                   	pop    ebp
c0012022:	c3                   	ret    
c0012023:	90                   	nop

c0012024 <VAS::setToWriteCombining(unsigned long, int)>:
c0012024:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0012029:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001202f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012036:	75 01                	jne    c0012039 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012038:	c3                   	ret    
c0012039:	68 80 00 00 00       	push   0x80
c001203e:	6a ff                	push   0xffffffff
c0012040:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012044:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012048:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001204c:	e8 93 ff ff ff       	call   c0011fe4 <VAS::reflagRange(unsigned long, int, int, int)>
c0012051:	83 c4 14             	add    esp,0x14
c0012054:	c3                   	ret    
c0012055:	90                   	nop

c0012056 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012056:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001205b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001205f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012066:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012069:	19 c0                	sbb    eax,eax
c001206b:	83 ca 03             	or     edx,0x3
c001206e:	83 e0 fc             	and    eax,0xfffffffc
c0012071:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012078:	0f 20 d8             	mov    eax,cr3
c001207b:	0f 22 d8             	mov    cr3,eax
c001207e:	c3                   	ret    
c001207f:	90                   	nop

c0012080 <VAS::~VAS()>:
c0012080:	83 ec 2c             	sub    esp,0x2c
c0012083:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001208b:	e8 be b9 00 00       	call   c001da4e <lockScheduler()>
c0012090:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012095:	8b 00                	mov    eax,DWORD PTR [eax]
c0012097:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001209a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00120a0:	83 ec 04             	sub    esp,0x4
c00120a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120a7:	6a 01                	push   0x1
c00120a9:	50                   	push   eax
c00120aa:	e8 a7 ff ff ff       	call   c0012056 <VAS::mapOtherVASIn(bool, VAS*)>
c00120af:	83 c4 10             	add    esp,0x10
c00120b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120ba:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120c2:	0f 8f d7 00 00 00    	jg     c001219f <VAS::~VAS()+0x11f>
c00120c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00120cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120d3:	c1 e2 02             	shl    edx,0x2
c00120d6:	01 d0                	add    eax,edx
c00120d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00120da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120e2:	83 e0 01             	and    eax,0x1
c00120e5:	0f 84 ab 00 00 00    	je     c0012196 <VAS::~VAS()+0x116>
c00120eb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00120f3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00120fb:	7f 75                	jg     c0012172 <VAS::~VAS()+0xf2>
c00120fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012101:	c1 e0 0a             	shl    eax,0xa
c0012104:	89 c2                	mov    edx,eax
c0012106:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001210a:	01 d0                	add    eax,edx
c001210c:	c1 e0 0c             	shl    eax,0xc
c001210f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012113:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012118:	8b 00                	mov    eax,DWORD PTR [eax]
c001211a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001211d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012123:	83 ec 04             	sub    esp,0x4
c0012126:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001212a:	6a 01                	push   0x1
c001212c:	50                   	push   eax
c001212d:	e8 08 fd ff ff       	call   c0011e3a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012132:	83 c4 10             	add    esp,0x10
c0012135:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012139:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001213d:	8b 00                	mov    eax,DWORD PTR [eax]
c001213f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012147:	25 01 04 00 00       	and    eax,0x401
c001214c:	3d 01 04 00 00       	cmp    eax,0x401
c0012151:	75 19                	jne    c001216c <VAS::~VAS()+0xec>
c0012153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012157:	25 00 f0 ff ff       	and    eax,0xfffff000
c001215c:	83 ec 0c             	sub    esp,0xc
c001215f:	50                   	push   eax
c0012160:	e8 f0 dc ff ff       	call   c000fe55 <Phys::freePage(unsigned long)>
c0012165:	83 c4 10             	add    esp,0x10
c0012168:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001216c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012170:	eb 81                	jmp    c00120f3 <VAS::~VAS()+0x73>
c0012172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012176:	25 00 04 00 00       	and    eax,0x400
c001217b:	74 19                	je     c0012196 <VAS::~VAS()+0x116>
c001217d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012181:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012186:	83 ec 0c             	sub    esp,0xc
c0012189:	50                   	push   eax
c001218a:	e8 c6 dc ff ff       	call   c000fe55 <Phys::freePage(unsigned long)>
c001218f:	83 c4 10             	add    esp,0x10
c0012192:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012196:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001219a:	e9 1b ff ff ff       	jmp    c00120ba <VAS::~VAS()+0x3a>
c001219f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121a6:	83 ec 0c             	sub    esp,0xc
c00121a9:	50                   	push   eax
c00121aa:	e8 d6 fc ff ff       	call   c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c00121af:	83 c4 10             	add    esp,0x10
c00121b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121b9:	83 ec 0c             	sub    esp,0xc
c00121bc:	50                   	push   eax
c00121bd:	e8 93 dc ff ff       	call   c000fe55 <Phys::freePage(unsigned long)>
c00121c2:	83 c4 10             	add    esp,0x10
c00121c5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121cd:	c1 e0 02             	shl    eax,0x2
c00121d0:	83 ec 08             	sub    esp,0x8
c00121d3:	50                   	push   eax
c00121d4:	68 70 a2 02 c0       	push   0xc002a270
c00121d9:	e8 d0 09 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00121de:	83 c4 10             	add    esp,0x10
c00121e1:	e8 6a b8 00 00       	call   c001da50 <unlockScheduler()>
c00121e6:	90                   	nop
c00121e7:	83 c4 2c             	add    esp,0x2c
c00121ea:	c3                   	ret    
c00121eb:	90                   	nop

c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>:
c00121ec:	55                   	push   ebp
c00121ed:	57                   	push   edi
c00121ee:	56                   	push   esi
c00121ef:	53                   	push   ebx
c00121f0:	83 ec 1c             	sub    esp,0x1c
c00121f3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00121f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00121fb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012201:	77 08                	ja     c001220b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012203:	0f 20 d8             	mov    eax,cr3
c0012206:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012209:	75 47                	jne    c0012252 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001220b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001220f:	09 d8                	or     eax,ebx
c0012211:	a9 ff 0f 00 00       	test   eax,0xfff
c0012216:	75 57                	jne    c001226f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012218:	89 de                	mov    esi,ebx
c001221a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001221d:	c1 ee 16             	shr    esi,0x16
c0012220:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012227:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001222b:	74 54                	je     c0012281 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001222d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012231:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012237:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001223b:	c1 e6 0c             	shl    esi,0xc
c001223e:	c1 eb 0a             	shr    ebx,0xa
c0012241:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012247:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001224a:	83 c4 1c             	add    esp,0x1c
c001224d:	5b                   	pop    ebx
c001224e:	5e                   	pop    esi
c001224f:	5f                   	pop    edi
c0012250:	5d                   	pop    ebp
c0012251:	c3                   	ret    
c0012252:	83 ec 0c             	sub    esp,0xc
c0012255:	68 90 a2 02 c0       	push   0xc002a290
c001225a:	e8 4f 09 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001225f:	83 c4 10             	add    esp,0x10
c0012262:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012266:	09 d8                	or     eax,ebx
c0012268:	a9 ff 0f 00 00       	test   eax,0xfff
c001226d:	74 a9                	je     c0012218 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001226f:	83 ec 0c             	sub    esp,0xc
c0012272:	68 f8 a2 02 c0       	push   0xc002a2f8
c0012277:	e8 ad 7f 00 00       	call   c001a229 <Krnl::panic(char const*)>
c001227c:	83 c4 10             	add    esp,0x10
c001227f:	eb 97                	jmp    c0012218 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012281:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012285:	e8 55 dc ff ff       	call   c000fedf <Phys::allocatePage()>
c001228a:	89 c5                	mov    ebp,eax
c001228c:	e8 20 fa ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0012291:	83 ec 0c             	sub    esp,0xc
c0012294:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012298:	6a 01                	push   0x1
c001229a:	e8 82 f8 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c001229f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122a6:	6a 01                	push   0x1
c00122a8:	50                   	push   eax
c00122a9:	55                   	push   ebp
c00122aa:	81 cd 07 04 00 00    	or     ebp,0x407
c00122b0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122b4:	51                   	push   ecx
c00122b5:	e8 26 02 00 00       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122ba:	83 c4 1c             	add    esp,0x1c
c00122bd:	68 00 10 00 00       	push   0x1000
c00122c2:	6a 00                	push   0x0
c00122c4:	50                   	push   eax
c00122c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122c9:	e8 aa e4 fe ff       	call   c0000778 <memset>
c00122ce:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122d2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122d5:	e8 ab fb ff ff       	call   c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c00122da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122de:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122e1:	83 c4 10             	add    esp,0x10
c00122e4:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00122e7:	e9 41 ff ff ff       	jmp    c001222d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00122ec <VAS::allocatePages(int, int)>:
c00122ec:	55                   	push   ebp
c00122ed:	57                   	push   edi
c00122ee:	56                   	push   esi
c00122ef:	53                   	push   ebx
c00122f0:	83 ec 1c             	sub    esp,0x1c
c00122f3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122f7:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00122fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012302:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012308:	83 e0 01             	and    eax,0x1
c001230b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001230f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012313:	0f 85 cc 00 00 00    	jne    c00123e5 <VAS::allocatePages(int, int)+0xf9>
c0012319:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001231c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012320:	85 c0                	test   eax,eax
c0012322:	0f 84 a1 00 00 00    	je     c00123c9 <VAS::allocatePages(int, int)+0xdd>
c0012328:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001232c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012330:	c1 e6 0c             	shl    esi,0xc
c0012333:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012337:	85 c0                	test   eax,eax
c0012339:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001233c:	7e 33                	jle    c0012371 <VAS::allocatePages(int, int)+0x85>
c001233e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012342:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012346:	81 cd 00 04 00 00    	or     ebp,0x400
c001234c:	e8 8e db ff ff       	call   c000fedf <Phys::allocatePage()>
c0012351:	55                   	push   ebp
c0012352:	53                   	push   ebx
c0012353:	50                   	push   eax
c0012354:	57                   	push   edi
c0012355:	e8 92 fe ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c001235a:	83 c4 10             	add    esp,0x10
c001235d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012362:	74 03                	je     c0012367 <VAS::allocatePages(int, int)+0x7b>
c0012364:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012367:	81 c3 00 10 00 00    	add    ebx,0x1000
c001236d:	39 de                	cmp    esi,ebx
c001236f:	75 db                	jne    c001234c <VAS::allocatePages(int, int)+0x60>
c0012371:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012376:	75 12                	jne    c001238a <VAS::allocatePages(int, int)+0x9e>
c0012378:	0f 20 d8             	mov    eax,cr3
c001237b:	0f 22 d8             	mov    cr3,eax
c001237e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012382:	83 c4 1c             	add    esp,0x1c
c0012385:	5b                   	pop    ebx
c0012386:	5e                   	pop    esi
c0012387:	5f                   	pop    edi
c0012388:	5d                   	pop    ebp
c0012389:	c3                   	ret    
c001238a:	c1 ee 0a             	shr    esi,0xa
c001238d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012391:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012397:	c1 eb 0a             	shr    ebx,0xa
c001239a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123a0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123a6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123ac:	39 c3                	cmp    ebx,eax
c00123ae:	77 ce                	ja     c001237e <VAS::allocatePages(int, int)+0x92>
c00123b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123b9:	39 d8                	cmp    eax,ebx
c00123bb:	73 f3                	jae    c00123b0 <VAS::allocatePages(int, int)+0xc4>
c00123bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123c1:	83 c4 1c             	add    esp,0x1c
c00123c4:	5b                   	pop    ebx
c00123c5:	5e                   	pop    esi
c00123c6:	5f                   	pop    edi
c00123c7:	5d                   	pop    ebp
c00123c8:	c3                   	ret    
c00123c9:	83 ec 0c             	sub    esp,0xc
c00123cc:	68 1c a3 02 c0       	push   0xc002a31c
c00123d1:	e8 53 7e 00 00       	call   c001a229 <Krnl::panic(char const*)>
c00123d6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123dd:	83 c4 10             	add    esp,0x10
c00123e0:	e9 43 ff ff ff       	jmp    c0012328 <VAS::allocatePages(int, int)+0x3c>
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123ec:	e8 30 f7 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c00123f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123f5:	83 c4 10             	add    esp,0x10
c00123f8:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00123fd:	0f 87 9b 00 00 00    	ja     c001249e <VAS::allocatePages(int, int)+0x1b2>
c0012403:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012407:	85 d2                	test   edx,edx
c0012409:	7e 3c                	jle    c0012447 <VAS::allocatePages(int, int)+0x15b>
c001240b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001240f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012413:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012417:	c1 e5 0c             	shl    ebp,0xc
c001241a:	81 ce 00 04 00 00    	or     esi,0x400
c0012420:	01 dd                	add    ebp,ebx
c0012422:	e8 b8 da ff ff       	call   c000fedf <Phys::allocatePage()>
c0012427:	56                   	push   esi
c0012428:	53                   	push   ebx
c0012429:	50                   	push   eax
c001242a:	57                   	push   edi
c001242b:	e8 bc fd ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c0012430:	83 c4 10             	add    esp,0x10
c0012433:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012438:	74 03                	je     c001243d <VAS::allocatePages(int, int)+0x151>
c001243a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001243d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012443:	39 dd                	cmp    ebp,ebx
c0012445:	75 db                	jne    c0012422 <VAS::allocatePages(int, int)+0x136>
c0012447:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001244c:	0f 84 26 ff ff ff    	je     c0012378 <VAS::allocatePages(int, int)+0x8c>
c0012452:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012456:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001245a:	89 d3                	mov    ebx,edx
c001245c:	c1 e0 0c             	shl    eax,0xc
c001245f:	c1 eb 0a             	shr    ebx,0xa
c0012462:	01 d0                	add    eax,edx
c0012464:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001246a:	c1 e8 0a             	shr    eax,0xa
c001246d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012473:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012478:	2d 00 00 40 00       	sub    eax,0x400000
c001247d:	39 c3                	cmp    ebx,eax
c001247f:	0f 87 f9 fe ff ff    	ja     c001237e <VAS::allocatePages(int, int)+0x92>
c0012485:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012488:	81 c3 00 10 00 00    	add    ebx,0x1000
c001248e:	39 d8                	cmp    eax,ebx
c0012490:	73 f3                	jae    c0012485 <VAS::allocatePages(int, int)+0x199>
c0012492:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012496:	83 c4 1c             	add    esp,0x1c
c0012499:	5b                   	pop    ebx
c001249a:	5e                   	pop    esi
c001249b:	5f                   	pop    edi
c001249c:	5d                   	pop    ebp
c001249d:	c3                   	ret    
c001249e:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00124a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124a9:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124b0:	0f 84 4d ff ff ff    	je     c0012403 <VAS::allocatePages(int, int)+0x117>
c00124b6:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124be:	e9 40 ff ff ff       	jmp    c0012403 <VAS::allocatePages(int, int)+0x117>
c00124c3:	90                   	nop

c00124c4 <VAS::setCPUSpecific(unsigned long)>:
c00124c4:	83 ec 0c             	sub    esp,0xc
c00124c7:	6a 05                	push   0x5
c00124c9:	68 00 00 40 c2       	push   0xc2400000
c00124ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d6:	e8 11 fd ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c00124db:	83 c4 1c             	add    esp,0x1c
c00124de:	c3                   	ret    
c00124df:	90                   	nop

c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00124e0:	55                   	push   ebp
c00124e1:	57                   	push   edi
c00124e2:	56                   	push   esi
c00124e3:	53                   	push   ebx
c00124e4:	83 ec 1c             	sub    esp,0x1c
c00124e7:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00124ec:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00124f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124f6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124fa:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012500:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012504:	83 e0 01             	and    eax,0x1
c0012507:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001250b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001250f:	85 c0                	test   eax,eax
c0012511:	7e 39                	jle    c001254c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012513:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012517:	89 f3                	mov    ebx,esi
c0012519:	c1 e0 0c             	shl    eax,0xc
c001251c:	01 f0                	add    eax,esi
c001251e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012522:	55                   	push   ebp
c0012523:	53                   	push   ebx
c0012524:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012528:	29 f0                	sub    eax,esi
c001252a:	01 d8                	add    eax,ebx
c001252c:	50                   	push   eax
c001252d:	57                   	push   edi
c001252e:	e8 b9 fc ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c0012533:	83 c4 10             	add    esp,0x10
c0012536:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001253b:	74 03                	je     c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001253d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012540:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012546:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001254a:	75 d6                	jne    c0012522 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001254c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012551:	75 10                	jne    c0012563 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012553:	0f 20 d8             	mov    eax,cr3
c0012556:	0f 22 d8             	mov    cr3,eax
c0012559:	83 c4 1c             	add    esp,0x1c
c001255c:	89 f0                	mov    eax,esi
c001255e:	5b                   	pop    ebx
c001255f:	5e                   	pop    esi
c0012560:	5f                   	pop    edi
c0012561:	5d                   	pop    ebp
c0012562:	c3                   	ret    
c0012563:	89 f3                	mov    ebx,esi
c0012565:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012569:	c1 eb 0a             	shr    ebx,0xa
c001256c:	c1 e0 0c             	shl    eax,0xc
c001256f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012575:	01 f0                	add    eax,esi
c0012577:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001257d:	c1 e8 0a             	shr    eax,0xa
c0012580:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012585:	2d 00 00 40 00       	sub    eax,0x400000
c001258a:	39 c3                	cmp    ebx,eax
c001258c:	77 cb                	ja     c0012559 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001258e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012591:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012597:	39 d8                	cmp    eax,ebx
c0012599:	73 f3                	jae    c001258e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001259b:	83 c4 1c             	add    esp,0x1c
c001259e:	89 f0                	mov    eax,esi
c00125a0:	5b                   	pop    ebx
c00125a1:	5e                   	pop    esi
c00125a2:	5f                   	pop    edi
c00125a3:	5d                   	pop    ebp
c00125a4:	c3                   	ret    
c00125a5:	90                   	nop

c00125a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125a6:	55                   	push   ebp
c00125a7:	57                   	push   edi
c00125a8:	56                   	push   esi
c00125a9:	53                   	push   ebx
c00125aa:	83 ec 1c             	sub    esp,0x1c
c00125ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125b1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125b5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125b9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125bd:	a9 ff 0f 00 00       	test   eax,0xfff
c00125c2:	75 4a                	jne    c001260e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125c8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00125cb:	c1 eb 16             	shr    ebx,0x16
c00125ce:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00125d5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00125d9:	74 4d                	je     c0012628 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00125db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125df:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00125e3:	c1 e8 0a             	shr    eax,0xa
c00125e6:	80 fa 01             	cmp    dl,0x1
c00125e9:	19 d2                	sbb    edx,edx
c00125eb:	c1 e3 0c             	shl    ebx,0xc
c00125ee:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00125f2:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00125f8:	25 fc 0f 00 00       	and    eax,0xffc
c00125fd:	01 d8                	add    eax,ebx
c00125ff:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012606:	83 c4 1c             	add    esp,0x1c
c0012609:	5b                   	pop    ebx
c001260a:	5e                   	pop    esi
c001260b:	5f                   	pop    edi
c001260c:	5d                   	pop    ebp
c001260d:	c3                   	ret    
c001260e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012612:	83 ec 0c             	sub    esp,0xc
c0012615:	68 48 a3 02 c0       	push   0xc002a348
c001261a:	e8 0a 7c 00 00       	call   c001a229 <Krnl::panic(char const*)>
c001261f:	83 c4 10             	add    esp,0x10
c0012622:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012626:	eb 9c                	jmp    c00125c4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012628:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001262c:	e8 ae d8 ff ff       	call   c000fedf <Phys::allocatePage()>
c0012631:	89 c5                	mov    ebp,eax
c0012633:	e8 79 f6 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0012638:	83 ec 0c             	sub    esp,0xc
c001263b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001263f:	6a 01                	push   0x1
c0012641:	e8 db f4 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c0012646:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001264d:	6a 01                	push   0x1
c001264f:	50                   	push   eax
c0012650:	55                   	push   ebp
c0012651:	81 cd 07 04 00 00    	or     ebp,0x407
c0012657:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001265b:	51                   	push   ecx
c001265c:	e8 7f fe ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012661:	83 c4 1c             	add    esp,0x1c
c0012664:	68 00 10 00 00       	push   0x1000
c0012669:	6a 00                	push   0x0
c001266b:	50                   	push   eax
c001266c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012670:	e8 03 e1 fe ff       	call   c0000778 <memset>
c0012675:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012679:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001267c:	e8 04 f8 ff ff       	call   c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c0012681:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012684:	83 c4 10             	add    esp,0x10
c0012687:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001268a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001268e:	e9 48 ff ff ff       	jmp    c00125db <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012693:	90                   	nop

c0012694 <VAS::VAS(bool)>:
c0012694:	53                   	push   ebx
c0012695:	83 ec 28             	sub    esp,0x28
c0012698:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001269c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126af:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126b3:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126b6:	e8 24 d8 ff ff       	call   c000fedf <Phys::allocatePage()>
c00126bb:	89 c2                	mov    edx,eax
c00126bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00126c4:	e8 e8 f5 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c00126c9:	89 c3                	mov    ebx,eax
c00126cb:	83 ec 0c             	sub    esp,0xc
c00126ce:	6a 01                	push   0x1
c00126d0:	e8 4c f4 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c00126d5:	83 c4 10             	add    esp,0x10
c00126d8:	89 c2                	mov    edx,eax
c00126da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126de:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126e1:	83 ec 0c             	sub    esp,0xc
c00126e4:	6a 03                	push   0x3
c00126e6:	6a 01                	push   0x1
c00126e8:	52                   	push   edx
c00126e9:	50                   	push   eax
c00126ea:	53                   	push   ebx
c00126eb:	e8 f0 fd ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126f0:	83 c4 20             	add    esp,0x20
c00126f3:	89 c2                	mov    edx,eax
c00126f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00126fc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012704:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001270c:	7f 1c                	jg     c001272a <VAS::VAS(bool)+0x96>
c001270e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012712:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012715:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012719:	c1 e2 02             	shl    edx,0x2
c001271c:	01 d0                	add    eax,edx
c001271e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012724:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012728:	eb da                	jmp    c0012704 <VAS::VAS(bool)+0x70>
c001272a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012732:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001273a:	7f 7a                	jg     c00127b6 <VAS::VAS(bool)+0x122>
c001273c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012740:	2d 00 02 00 00       	sub    eax,0x200
c0012745:	c1 e0 0c             	shl    eax,0xc
c0012748:	83 c8 03             	or     eax,0x3
c001274b:	89 c2                	mov    edx,eax
c001274d:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0012752:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012758:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001275e:	83 e0 10             	and    eax,0x10
c0012761:	84 c0                	test   al,al
c0012763:	74 07                	je     c001276c <VAS::VAS(bool)+0xd8>
c0012765:	b8 00 01 00 00       	mov    eax,0x100
c001276a:	eb 05                	jmp    c0012771 <VAS::VAS(bool)+0xdd>
c001276c:	b8 00 00 00 00       	mov    eax,0x0
c0012771:	09 d0                	or     eax,edx
c0012773:	89 c1                	mov    ecx,eax
c0012775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012779:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001277c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012780:	c1 e2 02             	shl    edx,0x2
c0012783:	01 d0                	add    eax,edx
c0012785:	89 ca                	mov    edx,ecx
c0012787:	89 10                	mov    DWORD PTR [eax],edx
c0012789:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001278d:	2d 40 03 00 00       	sub    eax,0x340
c0012792:	83 f8 7f             	cmp    eax,0x7f
c0012795:	77 16                	ja     c00127ad <VAS::VAS(bool)+0x119>
c0012797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001279b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001279e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127a2:	c1 e2 02             	shl    edx,0x2
c00127a5:	01 d0                	add    eax,edx
c00127a7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127ad:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127b1:	e9 7c ff ff ff       	jmp    c0012732 <VAS::VAS(bool)+0x9e>
c00127b6:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00127bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127c1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127c7:	83 e0 10             	and    eax,0x10
c00127ca:	84 c0                	test   al,al
c00127cc:	74 07                	je     c00127d5 <VAS::VAS(bool)+0x141>
c00127ce:	b8 03 41 00 00       	mov    eax,0x4103
c00127d3:	eb 05                	jmp    c00127da <VAS::VAS(bool)+0x146>
c00127d5:	b8 03 40 00 00       	mov    eax,0x4003
c00127da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127de:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00127e1:	81 c2 20 0c 00 00    	add    edx,0xc20
c00127e7:	89 02                	mov    DWORD PTR [edx],eax
c00127e9:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00127ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127f4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00127fa:	83 ec 08             	sub    esp,0x8
c00127fd:	50                   	push   eax
c00127fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012802:	e8 bd fc ff ff       	call   c00124c4 <VAS::setCPUSpecific(unsigned long)>
c0012807:	83 c4 10             	add    esp,0x10
c001280a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001280e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012811:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0012816:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001281c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012822:	83 e0 10             	and    eax,0x10
c0012825:	84 c0                	test   al,al
c0012827:	74 07                	je     c0012830 <VAS::VAS(bool)+0x19c>
c0012829:	b8 00 01 00 00       	mov    eax,0x100
c001282e:	eb 05                	jmp    c0012835 <VAS::VAS(bool)+0x1a1>
c0012830:	b8 00 00 00 00       	mov    eax,0x0
c0012835:	09 c2                	or     edx,eax
c0012837:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001283e:	05 fc 0f 00 00       	add    eax,0xffc
c0012843:	83 ca 03             	or     edx,0x3
c0012846:	89 10                	mov    DWORD PTR [eax],edx
c0012848:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c001284d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012853:	83 ec 0c             	sub    esp,0xc
c0012856:	50                   	push   eax
c0012857:	e8 64 1a 00 00       	call   c00142c0 <Device::getName()>
c001285c:	83 c4 10             	add    esp,0x10
c001285f:	83 ec 08             	sub    esp,0x8
c0012862:	68 a2 a4 02 c0       	push   0xc002a4a2
c0012867:	50                   	push   eax
c0012868:	e8 53 e0 fe ff       	call   c00008c0 <strcmp>
c001286d:	83 c4 10             	add    esp,0x10
c0012870:	85 c0                	test   eax,eax
c0012872:	0f 94 c0             	sete   al
c0012875:	84 c0                	test   al,al
c0012877:	74 70                	je     c00128e9 <VAS::VAS(bool)+0x255>
c0012879:	e8 b3 b1 00 00       	call   c001da31 <disableIRQs()>
c001287e:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0012883:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012889:	05 7c 09 00 00       	add    eax,0x97c
c001288e:	83 ec 0c             	sub    esp,0xc
c0012891:	50                   	push   eax
c0012892:	e8 25 ca ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012897:	83 c4 10             	add    esp,0x10
c001289a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001289f:	89 c3                	mov    ebx,eax
c00128a1:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00128a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128ac:	05 7c 09 00 00       	add    eax,0x97c
c00128b1:	83 ec 0c             	sub    esp,0xc
c00128b4:	50                   	push   eax
c00128b5:	e8 02 ca ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128ba:	83 c4 10             	add    esp,0x10
c00128bd:	83 ec 08             	sub    esp,0x8
c00128c0:	50                   	push   eax
c00128c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128c5:	e8 9c f5 ff ff       	call   c0011e66 <VAS::getPageTableEntry(unsigned long)>
c00128ca:	83 c4 10             	add    esp,0x10
c00128cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00128cf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128d4:	6a 11                	push   0x11
c00128d6:	53                   	push   ebx
c00128d7:	50                   	push   eax
c00128d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128dc:	e8 0b f9 ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c00128e1:	83 c4 10             	add    esp,0x10
c00128e4:	e8 56 b1 00 00       	call   c001da3f <enableIRQs()>
c00128e9:	90                   	nop
c00128ea:	83 c4 28             	add    esp,0x28
c00128ed:	5b                   	pop    ebx
c00128ee:	c3                   	ret    
c00128ef:	90                   	nop

c00128f0 <VAS::scanForSwappable()>:
c00128f0:	55                   	push   ebp
c00128f1:	57                   	push   edi
c00128f2:	31 ff                	xor    edi,edi
c00128f4:	56                   	push   esi
c00128f5:	be 00 00 40 00       	mov    esi,0x400000
c00128fa:	53                   	push   ebx
c00128fb:	83 ec 0c             	sub    esp,0xc
c00128fe:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012902:	eb 11                	jmp    c0012915 <VAS::scanForSwappable()+0x25>
c0012904:	83 c7 04             	add    edi,0x4
c0012907:	81 c6 00 00 40 00    	add    esi,0x400000
c001290d:	81 fe 00 00 40 c0    	cmp    esi,0xc0400000
c0012913:	74 63                	je     c0012978 <VAS::scanForSwappable()+0x88>
c0012915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012918:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c001291c:	74 e6                	je     c0012904 <VAS::scanForSwappable()+0x14>
c001291e:	8d 9e 00 00 c0 ff    	lea    ebx,[esi-0x400000]
c0012924:	eb 1b                	jmp    c0012941 <VAS::scanForSwappable()+0x51>
c0012926:	83 ec 08             	sub    esp,0x8
c0012929:	53                   	push   ebx
c001292a:	68 6c a3 02 c0       	push   0xc002a36c
c001292f:	e8 7a 02 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0012934:	83 c4 10             	add    esp,0x10
c0012937:	81 c3 00 10 00 00    	add    ebx,0x1000
c001293d:	39 de                	cmp    esi,ebx
c001293f:	74 c3                	je     c0012904 <VAS::scanForSwappable()+0x14>
c0012941:	53                   	push   ebx
c0012942:	6a 01                	push   0x1
c0012944:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012949:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001294c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0012952:	e8 e3 f4 ff ff       	call   c0011e3a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012957:	83 c4 0c             	add    esp,0xc
c001295a:	8b 00                	mov    eax,DWORD PTR [eax]
c001295c:	f6 c4 08             	test   ah,0x8
c001295f:	74 d6                	je     c0012937 <VAS::scanForSwappable()+0x47>
c0012961:	a8 01                	test   al,0x1
c0012963:	75 c1                	jne    c0012926 <VAS::scanForSwappable()+0x36>
c0012965:	83 ec 08             	sub    esp,0x8
c0012968:	53                   	push   ebx
c0012969:	68 98 a3 02 c0       	push   0xc002a398
c001296e:	e8 3b 02 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0012973:	83 c4 10             	add    esp,0x10
c0012976:	eb bf                	jmp    c0012937 <VAS::scanForSwappable()+0x47>
c0012978:	83 c4 0c             	add    esp,0xc
c001297b:	5b                   	pop    ebx
c001297c:	5e                   	pop    esi
c001297d:	5f                   	pop    edi
c001297e:	5d                   	pop    ebp
c001297f:	c3                   	ret    

c0012980 <mapVASFirstTime>:
c0012980:	55                   	push   ebp
c0012981:	57                   	push   edi
c0012982:	56                   	push   esi
c0012983:	53                   	push   ebx
c0012984:	83 ec 0c             	sub    esp,0xc
c0012987:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001298c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001298f:	4a                   	dec    edx
c0012990:	0f 84 9a 00 00 00    	je     c0012a30 <mapVASFirstTime+0xb0>
c0012996:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012999:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001299c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00129a1:	c1 e5 15             	shl    ebp,0x15
c00129a4:	be 00 90 e7 01       	mov    esi,0x1e79000
c00129a9:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00129af:	29 eb                	sub    ebx,ebp
c00129b1:	29 ee                	sub    esi,ebp
c00129b3:	e8 27 d5 ff ff       	call   c000fedf <Phys::allocatePage()>
c00129b8:	83 ec 0c             	sub    esp,0xc
c00129bb:	68 03 04 00 00       	push   0x403
c00129c0:	6a 01                	push   0x1
c00129c2:	53                   	push   ebx
c00129c3:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00129c9:	50                   	push   eax
c00129ca:	57                   	push   edi
c00129cb:	e8 10 fb ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00129d0:	83 c4 20             	add    esp,0x20
c00129d3:	39 f3                	cmp    ebx,esi
c00129d5:	75 dc                	jne    c00129b3 <mapVASFirstTime+0x33>
c00129d7:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00129dc:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00129e1:	29 ee                	sub    esi,ebp
c00129e3:	29 e8                	sub    eax,ebp
c00129e5:	89 c5                	mov    ebp,eax
c00129e7:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00129eb:	19 db                	sbb    ebx,ebx
c00129ed:	e8 ed d4 ff ff       	call   c000fedf <Phys::allocatePage()>
c00129f2:	83 e3 04             	and    ebx,0x4
c00129f5:	83 ec 0c             	sub    esp,0xc
c00129f8:	81 c3 03 04 00 00    	add    ebx,0x403
c00129fe:	53                   	push   ebx
c00129ff:	6a 01                	push   0x1
c0012a01:	56                   	push   esi
c0012a02:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012a08:	50                   	push   eax
c0012a09:	57                   	push   edi
c0012a0a:	e8 d1 fa ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012a0f:	83 c4 20             	add    esp,0x20
c0012a12:	39 f5                	cmp    ebp,esi
c0012a14:	75 d1                	jne    c00129e7 <mapVASFirstTime+0x67>
c0012a16:	83 ec 0c             	sub    esp,0xc
c0012a19:	57                   	push   edi
c0012a1a:	e8 d1 fe ff ff       	call   c00128f0 <VAS::scanForSwappable()>
c0012a1f:	0f 20 d8             	mov    eax,cr3
c0012a22:	0f 22 d8             	mov    cr3,eax
c0012a25:	83 c4 10             	add    esp,0x10
c0012a28:	83 c4 0c             	add    esp,0xc
c0012a2b:	5b                   	pop    ebx
c0012a2c:	5e                   	pop    esi
c0012a2d:	5f                   	pop    edi
c0012a2e:	5d                   	pop    ebp
c0012a2f:	c3                   	ret    
c0012a30:	83 ec 0c             	sub    esp,0xc
c0012a33:	68 b0 a4 02 c0       	push   0xc002a4b0
c0012a38:	e8 71 01 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0012a3d:	83 c4 10             	add    esp,0x10
c0012a40:	83 c4 0c             	add    esp,0xc
c0012a43:	5b                   	pop    ebx
c0012a44:	5e                   	pop    esi
c0012a45:	5f                   	pop    edi
c0012a46:	5d                   	pop    ebp
c0012a47:	c3                   	ret    

c0012a48 <__cxa_atexit>:
c0012a48:	31 c0                	xor    eax,eax
c0012a4a:	c3                   	ret    

c0012a4b <__cxa_finalize>:
c0012a4b:	c3                   	ret    

c0012a4c <__stack_chk_fail>:
c0012a4c:	55                   	push   ebp
c0012a4d:	89 e5                	mov    ebp,esp
c0012a4f:	83 ec 14             	sub    esp,0x14
c0012a52:	68 c9 a4 02 c0       	push   0xc002a4c9
c0012a57:	e8 52 01 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0012a5c:	58                   	pop    eax
c0012a5d:	5a                   	pop    edx
c0012a5e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012a61:	68 19 a5 02 c0       	push   0xc002a519
c0012a66:	e8 43 01 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0012a6b:	59                   	pop    ecx
c0012a6c:	58                   	pop    eax
c0012a6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a70:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012a73:	68 19 a5 02 c0       	push   0xc002a519
c0012a78:	e8 31 01 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0012a7d:	5a                   	pop    edx
c0012a7e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a81:	59                   	pop    ecx
c0012a82:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a84:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012a87:	68 19 a5 02 c0       	push   0xc002a519
c0012a8c:	e8 1d 01 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0012a91:	5a                   	pop    edx
c0012a92:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a95:	59                   	pop    ecx
c0012a96:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a9a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012a9d:	68 19 a5 02 c0       	push   0xc002a519
c0012aa2:	e8 07 01 00 00       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0012aa7:	c7 04 24 21 a5 02 c0 	mov    DWORD PTR [esp],0xc002a521
c0012aae:	e8 76 77 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0012ab3:	83 c4 10             	add    esp,0x10
c0012ab6:	c9                   	leave  
c0012ab7:	c3                   	ret    

c0012ab8 <__cxa_pure_virtual>:
c0012ab8:	83 ec 18             	sub    esp,0x18
c0012abb:	68 39 a5 02 c0       	push   0xc002a539
c0012ac0:	e8 64 77 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0012ac5:	83 c4 1c             	add    esp,0x1c
c0012ac8:	c3                   	ret    

c0012ac9 <operator new[](unsigned long)>:
c0012ac9:	e9 72 cd ff ff       	jmp    c000f840 <malloc>

c0012ace <operator delete(void*, unsigned long)>:
c0012ace:	e9 8d cd ff ff       	jmp    c000f860 <rfree>

c0012ad3 <operator delete[](void*)>:
c0012ad3:	e9 88 cd ff ff       	jmp    c000f860 <rfree>

c0012ad8 <operator delete[](void*, unsigned long)>:
c0012ad8:	e9 83 cd ff ff       	jmp    c000f860 <rfree>

c0012add <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012add:	57                   	push   edi
c0012ade:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012ae3:	56                   	push   esi
c0012ae4:	be 4c a5 02 c0       	mov    esi,0xc002a54c
c0012ae9:	53                   	push   ebx
c0012aea:	83 ec 40             	sub    esp,0x40
c0012aed:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012af1:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012af5:	fc                   	cld    
c0012af6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012af8:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012afc:	83 f9 3e             	cmp    ecx,0x3e
c0012aff:	7e 05                	jle    c0012b06 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012b01:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012b06:	89 df                	mov    edi,ebx
c0012b08:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012b0c:	eb 02                	jmp    c0012b10 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012b0e:	89 c7                	mov    edi,eax
c0012b10:	31 d2                	xor    edx,edx
c0012b12:	46                   	inc    esi
c0012b13:	89 f8                	mov    eax,edi
c0012b15:	f7 f1                	div    ecx
c0012b17:	39 cf                	cmp    edi,ecx
c0012b19:	73 f3                	jae    c0012b0e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012b1b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012b1e:	eb 02                	jmp    c0012b22 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012b20:	89 c3                	mov    ebx,eax
c0012b22:	31 d2                	xor    edx,edx
c0012b24:	4e                   	dec    esi
c0012b25:	89 d8                	mov    eax,ebx
c0012b27:	f7 f1                	div    ecx
c0012b29:	39 cb                	cmp    ebx,ecx
c0012b2b:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012b2f:	88 16                	mov    BYTE PTR [esi],dl
c0012b31:	73 ed                	jae    c0012b20 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012b33:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012b37:	83 c4 40             	add    esp,0x40
c0012b3a:	5b                   	pop    ebx
c0012b3b:	5e                   	pop    esi
c0012b3c:	5f                   	pop    edi
c0012b3d:	c3                   	ret    

c0012b3e <Dbg::logc(char)>:
c0012b3e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b42:	ba fd 03 00 00       	mov    edx,0x3fd
c0012b47:	ec                   	in     al,dx
c0012b48:	a8 20                	test   al,0x20
c0012b4a:	74 fb                	je     c0012b47 <Dbg::logc(char)+0x9>
c0012b4c:	ba f8 03 00 00       	mov    edx,0x3f8
c0012b51:	88 c8                	mov    al,cl
c0012b53:	ee                   	out    dx,al
c0012b54:	c3                   	ret    

c0012b55 <Dbg::logs(char*)>:
c0012b55:	53                   	push   ebx
c0012b56:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012b5a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012b5d:	84 c0                	test   al,al
c0012b5f:	74 0f                	je     c0012b70 <Dbg::logs(char*)+0x1b>
c0012b61:	50                   	push   eax
c0012b62:	43                   	inc    ebx
c0012b63:	e8 d6 ff ff ff       	call   c0012b3e <Dbg::logc(char)>
c0012b68:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012b6b:	5a                   	pop    edx
c0012b6c:	84 c0                	test   al,al
c0012b6e:	75 f1                	jne    c0012b61 <Dbg::logs(char*)+0xc>
c0012b70:	5b                   	pop    ebx
c0012b71:	c3                   	ret    

c0012b72 <Dbg::logWriteInt(unsigned int)>:
c0012b72:	83 ec 10             	sub    esp,0x10
c0012b75:	6a 0a                	push   0xa
c0012b77:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012b7b:	50                   	push   eax
c0012b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b80:	e8 58 ff ff ff       	call   c0012add <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012b85:	50                   	push   eax
c0012b86:	e8 ca ff ff ff       	call   c0012b55 <Dbg::logs(char*)>
c0012b8b:	83 c4 20             	add    esp,0x20
c0012b8e:	c3                   	ret    

c0012b8f <Dbg::logWriteIntBase(unsigned int, int)>:
c0012b8f:	83 ec 10             	sub    esp,0x10
c0012b92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b96:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012b9a:	50                   	push   eax
c0012b9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b9f:	e8 39 ff ff ff       	call   c0012add <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ba4:	50                   	push   eax
c0012ba5:	e8 ab ff ff ff       	call   c0012b55 <Dbg::logs(char*)>
c0012baa:	83 c4 20             	add    esp,0x20
c0012bad:	c3                   	ret    

c0012bae <Dbg::kprintf(char const*, ...)>:
c0012bae:	55                   	push   ebp
c0012baf:	57                   	push   edi
c0012bb0:	56                   	push   esi
c0012bb1:	53                   	push   ebx
c0012bb2:	83 ec 0c             	sub    esp,0xc
c0012bb5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012bb9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012bbd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bc1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012bc4:	84 c0                	test   al,al
c0012bc6:	74 4a                	je     c0012c12 <Dbg::kprintf(char const*, ...)+0x64>
c0012bc8:	31 db                	xor    ebx,ebx
c0012bca:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012bcd:	3c 25                	cmp    al,0x25
c0012bcf:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012bd2:	0f 85 e4 00 00 00    	jne    c0012cbc <Dbg::kprintf(char const*, ...)+0x10e>
c0012bd8:	83 c3 02             	add    ebx,0x2
c0012bdb:	8a 07                	mov    al,BYTE PTR [edi]
c0012bdd:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012be0:	83 e8 25             	sub    eax,0x25
c0012be3:	3c 53                	cmp    al,0x53
c0012be5:	0f 87 ba 00 00 00    	ja     c0012ca5 <Dbg::kprintf(char const*, ...)+0xf7>
c0012beb:	0f b6 c0             	movzx  eax,al
c0012bee:	ff 24 85 8c a5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5a74]
c0012bf5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bf9:	89 c8                	mov    eax,ecx
c0012bfb:	83 c1 04             	add    ecx,0x4
c0012bfe:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012c02:	ff 30                	push   DWORD PTR [eax]
c0012c04:	e8 4c ff ff ff       	call   c0012b55 <Dbg::logs(char*)>
c0012c09:	58                   	pop    eax
c0012c0a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012c0e:	84 c0                	test   al,al
c0012c10:	75 b8                	jne    c0012bca <Dbg::kprintf(char const*, ...)+0x1c>
c0012c12:	83 c4 0c             	add    esp,0xc
c0012c15:	5b                   	pop    ebx
c0012c16:	5e                   	pop    esi
c0012c17:	5f                   	pop    edi
c0012c18:	5d                   	pop    ebp
c0012c19:	c3                   	ret    
c0012c1a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012c1e:	89 d0                	mov    eax,edx
c0012c20:	83 c2 04             	add    edx,0x4
c0012c23:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012c27:	ff 30                	push   DWORD PTR [eax]
c0012c29:	e8 44 ff ff ff       	call   c0012b72 <Dbg::logWriteInt(unsigned int)>
c0012c2e:	58                   	pop    eax
c0012c2f:	eb d9                	jmp    c0012c0a <Dbg::kprintf(char const*, ...)+0x5c>
c0012c31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012c35:	89 d0                	mov    eax,edx
c0012c37:	83 c2 04             	add    edx,0x4
c0012c3a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012c3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012c41:	50                   	push   eax
c0012c42:	e8 f7 fe ff ff       	call   c0012b3e <Dbg::logc(char)>
c0012c47:	58                   	pop    eax
c0012c48:	eb c0                	jmp    c0012c0a <Dbg::kprintf(char const*, ...)+0x5c>
c0012c4a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c4e:	89 c8                	mov    eax,ecx
c0012c50:	83 c1 04             	add    ecx,0x4
c0012c53:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012c57:	ff 30                	push   DWORD PTR [eax]
c0012c59:	e8 14 ff ff ff       	call   c0012b72 <Dbg::logWriteInt(unsigned int)>
c0012c5e:	5f                   	pop    edi
c0012c5f:	eb a9                	jmp    c0012c0a <Dbg::kprintf(char const*, ...)+0x5c>
c0012c61:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c65:	89 c8                	mov    eax,ecx
c0012c67:	83 c1 04             	add    ecx,0x4
c0012c6a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012c6e:	6a 10                	push   0x10
c0012c70:	ff 30                	push   DWORD PTR [eax]
c0012c72:	e8 18 ff ff ff       	call   c0012b8f <Dbg::logWriteIntBase(unsigned int, int)>
c0012c77:	59                   	pop    ecx
c0012c78:	5f                   	pop    edi
c0012c79:	eb 8f                	jmp    c0012c0a <Dbg::kprintf(char const*, ...)+0x5c>
c0012c7b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012c7f:	89 d0                	mov    eax,edx
c0012c81:	83 c2 08             	add    edx,0x8
c0012c84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012c88:	6a 10                	push   0x10
c0012c8a:	ff 30                	push   DWORD PTR [eax]
c0012c8c:	e8 fe fe ff ff       	call   c0012b8f <Dbg::logWriteIntBase(unsigned int, int)>
c0012c91:	58                   	pop    eax
c0012c92:	5a                   	pop    edx
c0012c93:	e9 72 ff ff ff       	jmp    c0012c0a <Dbg::kprintf(char const*, ...)+0x5c>
c0012c98:	6a 25                	push   0x25
c0012c9a:	e8 9f fe ff ff       	call   c0012b3e <Dbg::logc(char)>
c0012c9f:	58                   	pop    eax
c0012ca0:	e9 65 ff ff ff       	jmp    c0012c0a <Dbg::kprintf(char const*, ...)+0x5c>
c0012ca5:	6a 25                	push   0x25
c0012ca7:	e8 92 fe ff ff       	call   c0012b3e <Dbg::logc(char)>
c0012cac:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012caf:	50                   	push   eax
c0012cb0:	e8 89 fe ff ff       	call   c0012b3e <Dbg::logc(char)>
c0012cb5:	5a                   	pop    edx
c0012cb6:	59                   	pop    ecx
c0012cb7:	e9 4e ff ff ff       	jmp    c0012c0a <Dbg::kprintf(char const*, ...)+0x5c>
c0012cbc:	50                   	push   eax
c0012cbd:	89 eb                	mov    ebx,ebp
c0012cbf:	e8 7a fe ff ff       	call   c0012b3e <Dbg::logc(char)>
c0012cc4:	89 fd                	mov    ebp,edi
c0012cc6:	58                   	pop    eax
c0012cc7:	e9 3e ff ff ff       	jmp    c0012c0a <Dbg::kprintf(char const*, ...)+0x5c>

c0012ccc <File::read(unsigned long long, void*, int*)>:
c0012ccc:	53                   	push   ebx
c0012ccd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012cd1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012cd5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012cdc:	3c 19                	cmp    al,0x19
c0012cde:	77 35                	ja     c0012d15 <File::read(unsigned long long, void*, int*)+0x49>
c0012ce0:	8b 04 85 c0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1940]
c0012ce7:	85 c0                	test   eax,eax
c0012ce9:	74 2a                	je     c0012d15 <File::read(unsigned long long, void*, int*)+0x49>
c0012ceb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cf1:	85 c0                	test   eax,eax
c0012cf3:	74 20                	je     c0012d15 <File::read(unsigned long long, void*, int*)+0x49>
c0012cf5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cf9:	74 21                	je     c0012d1c <File::read(unsigned long long, void*, int*)+0x50>
c0012cfb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012cfd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d01:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012d07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d0f:	5b                   	pop    ebx
c0012d10:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012d13:	ff e0                	jmp    eax
c0012d15:	b8 0b 00 00 00       	mov    eax,0xb
c0012d1a:	eb 05                	jmp    c0012d21 <File::read(unsigned long long, void*, int*)+0x55>
c0012d1c:	b8 05 00 00 00       	mov    eax,0x5
c0012d21:	5b                   	pop    ebx
c0012d22:	c3                   	ret    
c0012d23:	90                   	nop

c0012d24 <File::write(unsigned long long, void*, int*)>:
c0012d24:	53                   	push   ebx
c0012d25:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d29:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012d2d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012d34:	3c 19                	cmp    al,0x19
c0012d36:	77 35                	ja     c0012d6d <File::write(unsigned long long, void*, int*)+0x49>
c0012d38:	8b 04 85 c0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1940]
c0012d3f:	85 c0                	test   eax,eax
c0012d41:	74 2a                	je     c0012d6d <File::write(unsigned long long, void*, int*)+0x49>
c0012d43:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d49:	85 c0                	test   eax,eax
c0012d4b:	74 20                	je     c0012d6d <File::write(unsigned long long, void*, int*)+0x49>
c0012d4d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d51:	74 21                	je     c0012d74 <File::write(unsigned long long, void*, int*)+0x50>
c0012d53:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d55:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d59:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012d5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d67:	5b                   	pop    ebx
c0012d68:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012d6b:	ff e0                	jmp    eax
c0012d6d:	b8 0b 00 00 00       	mov    eax,0xb
c0012d72:	eb 05                	jmp    c0012d79 <File::write(unsigned long long, void*, int*)+0x55>
c0012d74:	b8 05 00 00 00       	mov    eax,0x5
c0012d79:	5b                   	pop    ebx
c0012d7a:	c3                   	ret    
c0012d7b:	90                   	nop

c0012d7c <Directory::read(unsigned long long, void*, int*)>:
c0012d7c:	53                   	push   ebx
c0012d7d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d81:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012d85:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012d8c:	3c 19                	cmp    al,0x19
c0012d8e:	77 35                	ja     c0012dc5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d90:	8b 04 85 c0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1940]
c0012d97:	85 c0                	test   eax,eax
c0012d99:	74 2a                	je     c0012dc5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d9b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012da1:	85 c0                	test   eax,eax
c0012da3:	74 20                	je     c0012dc5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012da5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012da9:	74 21                	je     c0012dcc <Directory::read(unsigned long long, void*, int*)+0x50>
c0012dab:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012dad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012db1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012db7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012dbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012dbf:	5b                   	pop    ebx
c0012dc0:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012dc3:	ff e0                	jmp    eax
c0012dc5:	b8 0b 00 00 00       	mov    eax,0xb
c0012dca:	eb 05                	jmp    c0012dd1 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012dcc:	b8 05 00 00 00       	mov    eax,0x5
c0012dd1:	5b                   	pop    ebx
c0012dd2:	c3                   	ret    
c0012dd3:	90                   	nop

c0012dd4 <Directory::write(unsigned long long, void*, int*)>:
c0012dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012dd8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012ddf:	b8 0b 00 00 00       	mov    eax,0xb
c0012de4:	80 fa 19             	cmp    dl,0x19
c0012de7:	77 18                	ja     c0012e01 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012de9:	8b 14 95 c0 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1940]
c0012df0:	85 d2                	test   edx,edx
c0012df2:	74 0d                	je     c0012e01 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012df4:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012dfb:	19 c0                	sbb    eax,eax
c0012dfd:	83 e0 0a             	and    eax,0xa
c0012e00:	40                   	inc    eax
c0012e01:	c3                   	ret    

c0012e02 <File::isAtty()>:
c0012e02:	31 c0                	xor    eax,eax
c0012e04:	c3                   	ret    
c0012e05:	90                   	nop

c0012e06 <Directory::isAtty()>:
c0012e06:	31 c0                	xor    eax,eax
c0012e08:	c3                   	ret    
c0012e09:	90                   	nop

c0012e0a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012e0a:	b8 0a 00 00 00       	mov    eax,0xa
c0012e0f:	c3                   	ret    

c0012e10 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012e10:	b8 0a 00 00 00       	mov    eax,0xa
c0012e15:	c3                   	ret    

c0012e16 <File::~File()>:
c0012e16:	83 ec 0c             	sub    esp,0xc
c0012e19:	ba 48 a7 02 c0       	mov    edx,0xc002a748
c0012e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e22:	89 10                	mov    DWORD PTR [eax],edx
c0012e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e28:	83 ec 0c             	sub    esp,0xc
c0012e2b:	50                   	push   eax
c0012e2c:	e8 8f ea ff ff       	call   c00118c0 <UnixFile::~UnixFile()>
c0012e31:	83 c4 10             	add    esp,0x10
c0012e34:	90                   	nop
c0012e35:	83 c4 0c             	add    esp,0xc
c0012e38:	c3                   	ret    
c0012e39:	90                   	nop

c0012e3a <File::~File()>:
c0012e3a:	83 ec 0c             	sub    esp,0xc
c0012e3d:	83 ec 0c             	sub    esp,0xc
c0012e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e44:	e8 cd ff ff ff       	call   c0012e16 <File::~File()>
c0012e49:	83 c4 10             	add    esp,0x10
c0012e4c:	83 ec 08             	sub    esp,0x8
c0012e4f:	68 14 01 00 00       	push   0x114
c0012e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e58:	e8 71 fc ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0012e5d:	83 c4 10             	add    esp,0x10
c0012e60:	83 c4 0c             	add    esp,0xc
c0012e63:	c3                   	ret    

c0012e64 <Directory::~Directory()>:
c0012e64:	83 ec 0c             	sub    esp,0xc
c0012e67:	ba 64 a7 02 c0       	mov    edx,0xc002a764
c0012e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e70:	89 10                	mov    DWORD PTR [eax],edx
c0012e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e76:	83 ec 0c             	sub    esp,0xc
c0012e79:	50                   	push   eax
c0012e7a:	e8 41 ea ff ff       	call   c00118c0 <UnixFile::~UnixFile()>
c0012e7f:	83 c4 10             	add    esp,0x10
c0012e82:	90                   	nop
c0012e83:	83 c4 0c             	add    esp,0xc
c0012e86:	c3                   	ret    
c0012e87:	90                   	nop

c0012e88 <Directory::~Directory()>:
c0012e88:	83 ec 0c             	sub    esp,0xc
c0012e8b:	83 ec 0c             	sub    esp,0xc
c0012e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e92:	e8 cd ff ff ff       	call   c0012e64 <Directory::~Directory()>
c0012e97:	83 c4 10             	add    esp,0x10
c0012e9a:	83 ec 08             	sub    esp,0x8
c0012e9d:	68 14 01 00 00       	push   0x114
c0012ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ea6:	e8 23 fc ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0012eab:	83 c4 10             	add    esp,0x10
c0012eae:	83 c4 0c             	add    esp,0xc
c0012eb1:	c3                   	ret    

c0012eb2 <Filesystem::Filesystem()>:
c0012eb2:	ba e4 a6 02 c0       	mov    edx,0xc002a6e4
c0012eb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ebb:	89 10                	mov    DWORD PTR [eax],edx
c0012ebd:	8b 15 28 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e228
c0012ec3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ec7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012eca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ece:	a3 28 e2 02 c0       	mov    ds:0xc002e228,eax
c0012ed3:	90                   	nop
c0012ed4:	c3                   	ret    
c0012ed5:	90                   	nop

c0012ed6 <Filesystem::~Filesystem()>:
c0012ed6:	ba e4 a6 02 c0       	mov    edx,0xc002a6e4
c0012edb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012edf:	89 10                	mov    DWORD PTR [eax],edx
c0012ee1:	90                   	nop
c0012ee2:	c3                   	ret    
c0012ee3:	90                   	nop

c0012ee4 <Filesystem::~Filesystem()>:
c0012ee4:	83 ec 0c             	sub    esp,0xc
c0012ee7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012eeb:	e8 e6 ff ff ff       	call   c0012ed6 <Filesystem::~Filesystem()>
c0012ef0:	83 c4 04             	add    esp,0x4
c0012ef3:	83 ec 08             	sub    esp,0x8
c0012ef6:	6a 08                	push   0x8
c0012ef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012efc:	e8 cd fb ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0012f01:	83 c4 10             	add    esp,0x10
c0012f04:	83 c4 0c             	add    esp,0xc
c0012f07:	c3                   	ret    

c0012f08 <Fs::getcwd(Process*, char*, int)>:
c0012f08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f0c:	31 c0                	xor    eax,eax
c0012f0e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012f11:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012f15:	7d 15                	jge    c0012f2c <Fs::getcwd(Process*, char*, int)+0x24>
c0012f17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f1b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012f22:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012f25:	84 c9                	test   cl,cl
c0012f27:	74 06                	je     c0012f2f <Fs::getcwd(Process*, char*, int)+0x27>
c0012f29:	40                   	inc    eax
c0012f2a:	eb e2                	jmp    c0012f0e <Fs::getcwd(Process*, char*, int)+0x6>
c0012f2c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012f2f:	31 c0                	xor    eax,eax
c0012f31:	c3                   	ret    

c0012f32 <Fs::initVFS()>:
c0012f32:	83 ec 18             	sub    esp,0x18
c0012f35:	6a 08                	push   0x8
c0012f37:	e8 04 c9 ff ff       	call   c000f840 <malloc>
c0012f3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f3f:	e8 7e dc 00 00       	call   c0020bc2 <FAT::FAT()>
c0012f44:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012f4b:	e8 f0 c8 ff ff       	call   c000f840 <malloc>
c0012f50:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f53:	e8 c2 ee 00 00       	call   c0021e1a <ISO9660::ISO9660()>
c0012f58:	83 c4 1c             	add    esp,0x1c
c0012f5b:	c3                   	ret    

c0012f5c <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012f5c:	55                   	push   ebp
c0012f5d:	57                   	push   edi
c0012f5e:	56                   	push   esi
c0012f5f:	53                   	push   ebx
c0012f60:	81 ec 10 04 00 00    	sub    esp,0x410
c0012f66:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012f6d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012f74:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012f7b:	68 00 04 00 00       	push   0x400
c0012f80:	6a 00                	push   0x0
c0012f82:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012f86:	56                   	push   esi
c0012f87:	e8 ec d7 fe ff       	call   c0000778 <memset>
c0012f8c:	83 c4 10             	add    esp,0x10
c0012f8f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012f93:	75 0b                	jne    c0012fa0 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012f95:	50                   	push   eax
c0012f96:	50                   	push   eax
c0012f97:	57                   	push   edi
c0012f98:	56                   	push   esi
c0012f99:	e8 96 d8 fe ff       	call   c0000834 <strcpy>
c0012f9e:	eb 41                	jmp    c0012fe1 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012fa0:	8a 07                	mov    al,BYTE PTR [edi]
c0012fa2:	3c 5c                	cmp    al,0x5c
c0012fa4:	74 04                	je     c0012faa <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012fa6:	3c 2f                	cmp    al,0x2f
c0012fa8:	75 18                	jne    c0012fc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012faa:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012fad:	3c 60                	cmp    al,0x60
c0012faf:	7e 03                	jle    c0012fb4 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012fb1:	83 e8 20             	sub    eax,0x20
c0012fb4:	88 04 24             	mov    BYTE PTR [esp],al
c0012fb7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012fbe:	50                   	push   eax
c0012fbf:	50                   	push   eax
c0012fc0:	eb 18                	jmp    c0012fda <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012fc2:	50                   	push   eax
c0012fc3:	50                   	push   eax
c0012fc4:	55                   	push   ebp
c0012fc5:	56                   	push   esi
c0012fc6:	e8 69 d8 fe ff       	call   c0000834 <strcpy>
c0012fcb:	5a                   	pop    edx
c0012fcc:	59                   	pop    ecx
c0012fcd:	68 81 be 02 c0       	push   0xc002be81
c0012fd2:	56                   	push   esi
c0012fd3:	e8 9c d9 fe ff       	call   c0000974 <strcat>
c0012fd8:	5d                   	pop    ebp
c0012fd9:	58                   	pop    eax
c0012fda:	57                   	push   edi
c0012fdb:	56                   	push   esi
c0012fdc:	e8 93 d9 fe ff       	call   c0000974 <strcat>
c0012fe1:	83 c4 10             	add    esp,0x10
c0012fe4:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012fe7:	3c 60                	cmp    al,0x60
c0012fe9:	7e 03                	jle    c0012fee <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012feb:	83 e8 20             	sub    eax,0x20
c0012fee:	88 04 24             	mov    BYTE PTR [esp],al
c0012ff1:	88 03                	mov    BYTE PTR [ebx],al
c0012ff3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ffa:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013000:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013004:	bf 03 00 00 00       	mov    edi,0x3
c0013009:	b8 03 00 00 00       	mov    eax,0x3
c001300e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013011:	84 d2                	test   dl,dl
c0013013:	0f 84 91 00 00 00    	je     c00130aa <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013019:	8d 4f 01             	lea    ecx,[edi+0x1]
c001301c:	80 fa 5c             	cmp    dl,0x5c
c001301f:	74 05                	je     c0013026 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013021:	80 fa 2f             	cmp    dl,0x2f
c0013024:	75 12                	jne    c0013038 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013026:	89 c5                	mov    ebp,eax
c0013028:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001302d:	74 09                	je     c0013038 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001302f:	40                   	inc    eax
c0013030:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013034:	89 cf                	mov    edi,ecx
c0013036:	eb d6                	jmp    c001300e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013038:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001303d:	75 5b                	jne    c001309a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001303f:	80 fa 2e             	cmp    dl,0x2e
c0013042:	75 56                	jne    c001309a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013044:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013048:	74 19                	je     c0013063 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001304a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001304f:	74 53                	je     c00130a4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013051:	89 f9                	mov    ecx,edi
c0013053:	41                   	inc    ecx
c0013054:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013057:	80 fa 2f             	cmp    dl,0x2f
c001305a:	74 f7                	je     c0013053 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001305c:	80 fa 5c             	cmp    dl,0x5c
c001305f:	74 f2                	je     c0013053 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013061:	eb d1                	jmp    c0013034 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013063:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013068:	74 3a                	je     c00130a4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001306a:	83 f8 03             	cmp    eax,0x3
c001306d:	74 c5                	je     c0013034 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001306f:	41                   	inc    ecx
c0013070:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013073:	80 fa 2f             	cmp    dl,0x2f
c0013076:	74 f7                	je     c001306f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013078:	80 fa 5c             	cmp    dl,0x5c
c001307b:	74 f2                	je     c001306f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001307d:	48                   	dec    eax
c001307e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013082:	75 06                	jne    c001308a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013084:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013088:	eb f3                	jmp    c001307d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001308a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001308e:	74 07                	je     c0013097 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013090:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013094:	48                   	dec    eax
c0013095:	eb f3                	jmp    c001308a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013097:	40                   	inc    eax
c0013098:	eb 9a                	jmp    c0013034 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001309a:	80 fa 2f             	cmp    dl,0x2f
c001309d:	74 95                	je     c0013034 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001309f:	80 fa 5c             	cmp    dl,0x5c
c00130a2:	74 90                	je     c0013034 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00130a4:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00130a7:	40                   	inc    eax
c00130a8:	eb 8a                	jmp    c0013034 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00130aa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00130ae:	83 ec 0c             	sub    esp,0xc
c00130b1:	53                   	push   ebx
c00130b2:	e8 dd d6 fe ff       	call   c0000794 <strlen>
c00130b7:	83 c4 10             	add    esp,0x10
c00130ba:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00130bf:	75 26                	jne    c00130e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00130c1:	83 ec 0c             	sub    esp,0xc
c00130c4:	53                   	push   ebx
c00130c5:	e8 ca d6 fe ff       	call   c0000794 <strlen>
c00130ca:	83 c4 10             	add    esp,0x10
c00130cd:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00130d2:	74 26                	je     c00130fa <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00130d4:	83 ec 0c             	sub    esp,0xc
c00130d7:	53                   	push   ebx
c00130d8:	e8 b7 d6 fe ff       	call   c0000794 <strlen>
c00130dd:	83 c4 10             	add    esp,0x10
c00130e0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00130e5:	eb c7                	jmp    c00130ae <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00130e7:	83 ec 0c             	sub    esp,0xc
c00130ea:	53                   	push   ebx
c00130eb:	e8 a4 d6 fe ff       	call   c0000794 <strlen>
c00130f0:	83 c4 10             	add    esp,0x10
c00130f3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00130f8:	74 c7                	je     c00130c1 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00130fa:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013100:	5b                   	pop    ebx
c0013101:	5e                   	pop    esi
c0013102:	5f                   	pop    edi
c0013103:	5d                   	pop    ebp
c0013104:	c3                   	ret    
c0013105:	90                   	nop

c0013106 <File::File(char const*, Process*)>:
c0013106:	83 ec 0c             	sub    esp,0xc
c0013109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310d:	83 ec 08             	sub    esp,0x8
c0013110:	6a 00                	push   0x0
c0013112:	50                   	push   eax
c0013113:	e8 c6 e5 ff ff       	call   c00116de <UnixFile::UnixFile(int)>
c0013118:	83 c4 10             	add    esp,0x10
c001311b:	ba 48 a7 02 c0       	mov    edx,0xc002a748
c0013120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013124:	89 10                	mov    DWORD PTR [eax],edx
c0013126:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001312a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013134:	83 c0 0d             	add    eax,0xd
c0013137:	83 ec 04             	sub    esp,0x4
c001313a:	52                   	push   edx
c001313b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313f:	50                   	push   eax
c0013140:	e8 17 fe ff ff       	call   c0012f5c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013145:	83 c4 10             	add    esp,0x10
c0013148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001314c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001314f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013156:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001315c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013160:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013164:	90                   	nop
c0013165:	83 c4 0c             	add    esp,0xc
c0013168:	c3                   	ret    
c0013169:	90                   	nop

c001316a <File::open(FileOpenMode)>:
c001316a:	53                   	push   ebx
c001316b:	b8 0b 00 00 00       	mov    eax,0xb
c0013170:	83 ec 08             	sub    esp,0x8
c0013173:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013177:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001317e:	80 fa 19             	cmp    dl,0x19
c0013181:	77 40                	ja     c00131c3 <File::open(FileOpenMode)+0x59>
c0013183:	8b 14 95 c0 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1940]
c001318a:	85 d2                	test   edx,edx
c001318c:	74 35                	je     c00131c3 <File::open(FileOpenMode)+0x59>
c001318e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013194:	85 d2                	test   edx,edx
c0013196:	74 2b                	je     c00131c3 <File::open(FileOpenMode)+0x59>
c0013198:	b8 06 00 00 00       	mov    eax,0x6
c001319d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00131a1:	75 20                	jne    c00131c3 <File::open(FileOpenMode)+0x59>
c00131a3:	8b 02                	mov    eax,DWORD PTR [edx]
c00131a5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00131ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131af:	51                   	push   ecx
c00131b0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00131b3:	51                   	push   ecx
c00131b4:	52                   	push   edx
c00131b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00131b8:	83 c4 10             	add    esp,0x10
c00131bb:	85 c0                	test   eax,eax
c00131bd:	75 04                	jne    c00131c3 <File::open(FileOpenMode)+0x59>
c00131bf:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00131c3:	83 c4 08             	add    esp,0x8
c00131c6:	5b                   	pop    ebx
c00131c7:	c3                   	ret    

c00131c8 <File::close()>:
c00131c8:	53                   	push   ebx
c00131c9:	b8 0b 00 00 00       	mov    eax,0xb
c00131ce:	83 ec 08             	sub    esp,0x8
c00131d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131d5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131dc:	80 fa 19             	cmp    dl,0x19
c00131df:	77 41                	ja     c0013222 <File::close()+0x5a>
c00131e1:	8b 1c 95 c0 e6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1940]
c00131e8:	85 db                	test   ebx,ebx
c00131ea:	74 36                	je     c0013222 <File::close()+0x5a>
c00131ec:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00131f3:	74 2d                	je     c0013222 <File::close()+0x5a>
c00131f5:	b8 05 00 00 00       	mov    eax,0x5
c00131fa:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00131fe:	74 22                	je     c0013222 <File::close()+0x5a>
c0013200:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013204:	8b 04 95 c0 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1940]
c001320b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013211:	53                   	push   ebx
c0013212:	53                   	push   ebx
c0013213:	8b 10                	mov    edx,DWORD PTR [eax]
c0013215:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001321b:	50                   	push   eax
c001321c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001321f:	83 c4 10             	add    esp,0x10
c0013222:	83 c4 08             	add    esp,0x8
c0013225:	5b                   	pop    ebx
c0013226:	c3                   	ret    
c0013227:	90                   	nop

c0013228 <File::seek(unsigned long long)>:
c0013228:	56                   	push   esi
c0013229:	53                   	push   ebx
c001322a:	b8 0b 00 00 00       	mov    eax,0xb
c001322f:	51                   	push   ecx
c0013230:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013234:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013238:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001323f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013243:	80 fa 19             	cmp    dl,0x19
c0013246:	77 31                	ja     c0013279 <File::seek(unsigned long long)+0x51>
c0013248:	8b 14 95 c0 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1940]
c001324f:	85 d2                	test   edx,edx
c0013251:	74 26                	je     c0013279 <File::seek(unsigned long long)+0x51>
c0013253:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013259:	85 d2                	test   edx,edx
c001325b:	74 1c                	je     c0013279 <File::seek(unsigned long long)+0x51>
c001325d:	b8 05 00 00 00       	mov    eax,0x5
c0013262:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013266:	74 11                	je     c0013279 <File::seek(unsigned long long)+0x51>
c0013268:	8b 02                	mov    eax,DWORD PTR [edx]
c001326a:	53                   	push   ebx
c001326b:	51                   	push   ecx
c001326c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013272:	52                   	push   edx
c0013273:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013276:	83 c4 10             	add    esp,0x10
c0013279:	5a                   	pop    edx
c001327a:	5b                   	pop    ebx
c001327b:	5e                   	pop    esi
c001327c:	c3                   	ret    
c001327d:	90                   	nop

c001327e <File::tell(unsigned long long*)>:
c001327e:	83 ec 0c             	sub    esp,0xc
c0013281:	b8 0b 00 00 00       	mov    eax,0xb
c0013286:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001328a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013291:	80 fa 19             	cmp    dl,0x19
c0013294:	77 34                	ja     c00132ca <File::tell(unsigned long long*)+0x4c>
c0013296:	8b 14 95 c0 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1940]
c001329d:	85 d2                	test   edx,edx
c001329f:	74 29                	je     c00132ca <File::tell(unsigned long long*)+0x4c>
c00132a1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00132a7:	85 d2                	test   edx,edx
c00132a9:	74 1f                	je     c00132ca <File::tell(unsigned long long*)+0x4c>
c00132ab:	b8 05 00 00 00       	mov    eax,0x5
c00132b0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00132b4:	74 14                	je     c00132ca <File::tell(unsigned long long*)+0x4c>
c00132b6:	50                   	push   eax
c00132b7:	8b 02                	mov    eax,DWORD PTR [edx]
c00132b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132bd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00132c3:	52                   	push   edx
c00132c4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00132c7:	83 c4 10             	add    esp,0x10
c00132ca:	83 c4 0c             	add    esp,0xc
c00132cd:	c3                   	ret    

c00132ce <File::rewind()>:
c00132ce:	83 ec 10             	sub    esp,0x10
c00132d1:	6a 00                	push   0x0
c00132d3:	6a 00                	push   0x0
c00132d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132d9:	e8 4a ff ff ff       	call   c0013228 <File::seek(unsigned long long)>
c00132de:	83 c4 1c             	add    esp,0x1c
c00132e1:	c3                   	ret    

c00132e2 <File::unlink()>:
c00132e2:	83 ec 0c             	sub    esp,0xc
c00132e5:	b8 0b 00 00 00       	mov    eax,0xb
c00132ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132f5:	80 f9 19             	cmp    cl,0x19
c00132f8:	77 2f                	ja     c0013329 <File::unlink()+0x47>
c00132fa:	8b 0c 8d c0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1940]
c0013301:	85 c9                	test   ecx,ecx
c0013303:	74 24                	je     c0013329 <File::unlink()+0x47>
c0013305:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001330b:	85 c9                	test   ecx,ecx
c001330d:	74 1a                	je     c0013329 <File::unlink()+0x47>
c001330f:	b8 06 00 00 00       	mov    eax,0x6
c0013314:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013318:	75 0f                	jne    c0013329 <File::unlink()+0x47>
c001331a:	83 c2 0d             	add    edx,0xd
c001331d:	50                   	push   eax
c001331e:	50                   	push   eax
c001331f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013321:	52                   	push   edx
c0013322:	51                   	push   ecx
c0013323:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013326:	83 c4 10             	add    esp,0x10
c0013329:	83 c4 0c             	add    esp,0xc
c001332c:	c3                   	ret    
c001332d:	90                   	nop

c001332e <File::rename(char const*)>:
c001332e:	83 ec 0c             	sub    esp,0xc
c0013331:	b8 0b 00 00 00       	mov    eax,0xb
c0013336:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001333a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013341:	80 f9 19             	cmp    cl,0x19
c0013344:	77 32                	ja     c0013378 <File::rename(char const*)+0x4a>
c0013346:	8b 0c 8d c0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1940]
c001334d:	85 c9                	test   ecx,ecx
c001334f:	74 27                	je     c0013378 <File::rename(char const*)+0x4a>
c0013351:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013357:	85 c9                	test   ecx,ecx
c0013359:	74 1d                	je     c0013378 <File::rename(char const*)+0x4a>
c001335b:	b8 06 00 00 00       	mov    eax,0x6
c0013360:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013364:	75 12                	jne    c0013378 <File::rename(char const*)+0x4a>
c0013366:	83 c2 0d             	add    edx,0xd
c0013369:	50                   	push   eax
c001336a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001336c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013370:	52                   	push   edx
c0013371:	51                   	push   ecx
c0013372:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013375:	83 c4 10             	add    esp,0x10
c0013378:	83 c4 0c             	add    esp,0xc
c001337b:	c3                   	ret    

c001337c <File::chfatattr(unsigned char, unsigned char)>:
c001337c:	57                   	push   edi
c001337d:	b8 0b 00 00 00       	mov    eax,0xb
c0013382:	56                   	push   esi
c0013383:	53                   	push   ebx
c0013384:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013388:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001338c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013393:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013397:	80 f9 19             	cmp    cl,0x19
c001339a:	77 37                	ja     c00133d3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001339c:	8b 0c 8d c0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1940]
c00133a3:	85 c9                	test   ecx,ecx
c00133a5:	74 2c                	je     c00133d3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00133a7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133ad:	85 c9                	test   ecx,ecx
c00133af:	74 22                	je     c00133d3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00133b1:	b8 06 00 00 00       	mov    eax,0x6
c00133b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133ba:	75 17                	jne    c00133d3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00133bc:	8b 39                	mov    edi,DWORD PTR [ecx]
c00133be:	89 f0                	mov    eax,esi
c00133c0:	83 c2 0d             	add    edx,0xd
c00133c3:	0f b6 f0             	movzx  esi,al
c00133c6:	0f b6 db             	movzx  ebx,bl
c00133c9:	56                   	push   esi
c00133ca:	53                   	push   ebx
c00133cb:	52                   	push   edx
c00133cc:	51                   	push   ecx
c00133cd:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00133d0:	83 c4 10             	add    esp,0x10
c00133d3:	5b                   	pop    ebx
c00133d4:	5e                   	pop    esi
c00133d5:	5f                   	pop    edi
c00133d6:	c3                   	ret    
c00133d7:	90                   	nop

c00133d8 <File::exists()>:
c00133d8:	83 ec 0c             	sub    esp,0xc
c00133db:	31 c0                	xor    eax,eax
c00133dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133e1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133e8:	80 f9 19             	cmp    cl,0x19
c00133eb:	77 24                	ja     c0013411 <File::exists()+0x39>
c00133ed:	8b 0c 8d c0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1940]
c00133f4:	85 c9                	test   ecx,ecx
c00133f6:	74 19                	je     c0013411 <File::exists()+0x39>
c00133f8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133fe:	85 c9                	test   ecx,ecx
c0013400:	74 0f                	je     c0013411 <File::exists()+0x39>
c0013402:	83 c2 0d             	add    edx,0xd
c0013405:	50                   	push   eax
c0013406:	50                   	push   eax
c0013407:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013409:	52                   	push   edx
c001340a:	51                   	push   ecx
c001340b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001340e:	83 c4 10             	add    esp,0x10
c0013411:	83 c4 0c             	add    esp,0xc
c0013414:	c3                   	ret    
c0013415:	90                   	nop

c0013416 <File::stat(unsigned long long*, bool*)>:
c0013416:	56                   	push   esi
c0013417:	53                   	push   ebx
c0013418:	50                   	push   eax
c0013419:	b8 0b 00 00 00       	mov    eax,0xb
c001341e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013422:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013426:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001342d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013431:	80 f9 19             	cmp    cl,0x19
c0013434:	77 3d                	ja     c0013473 <File::stat(unsigned long long*, bool*)+0x5d>
c0013436:	8b 0c 8d c0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1940]
c001343d:	85 c9                	test   ecx,ecx
c001343f:	74 32                	je     c0013473 <File::stat(unsigned long long*, bool*)+0x5d>
c0013441:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013447:	85 c9                	test   ecx,ecx
c0013449:	74 28                	je     c0013473 <File::stat(unsigned long long*, bool*)+0x5d>
c001344b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001344d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013451:	74 13                	je     c0013466 <File::stat(unsigned long long*, bool*)+0x50>
c0013453:	83 ec 04             	sub    esp,0x4
c0013456:	56                   	push   esi
c0013457:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001345d:	51                   	push   ecx
c001345e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013461:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013464:	eb 0a                	jmp    c0013470 <File::stat(unsigned long long*, bool*)+0x5a>
c0013466:	53                   	push   ebx
c0013467:	83 c2 0d             	add    edx,0xd
c001346a:	56                   	push   esi
c001346b:	52                   	push   edx
c001346c:	51                   	push   ecx
c001346d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013470:	83 c4 10             	add    esp,0x10
c0013473:	5a                   	pop    edx
c0013474:	5b                   	pop    ebx
c0013475:	5e                   	pop    esi
c0013476:	c3                   	ret    

c0013477 <Fs::setcwd(Process*, char*)>:
c0013477:	55                   	push   ebp
c0013478:	57                   	push   edi
c0013479:	56                   	push   esi
c001347a:	53                   	push   ebx
c001347b:	81 ec 20 02 00 00    	sub    esp,0x220
c0013481:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013488:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001348e:	57                   	push   edi
c001348f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013496:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001349a:	56                   	push   esi
c001349b:	e8 bc fa ff ff       	call   c0012f5c <Fs::standardiseFiles(char*, char const*, char const*)>
c00134a0:	89 34 24             	mov    DWORD PTR [esp],esi
c00134a3:	e8 ec d2 fe ff       	call   c0000794 <strlen>
c00134a8:	83 c4 10             	add    esp,0x10
c00134ab:	83 f8 02             	cmp    eax,0x2
c00134ae:	77 17                	ja     c00134c7 <Fs::setcwd(Process*, char*)+0x50>
c00134b0:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00134b5:	83 e8 41             	sub    eax,0x41
c00134b8:	83 f8 19             	cmp    eax,0x19
c00134bb:	76 24                	jbe    c00134e1 <Fs::setcwd(Process*, char*)+0x6a>
c00134bd:	b8 03 00 00 00       	mov    eax,0x3
c00134c2:	e9 e0 00 00 00       	jmp    c00135a7 <Fs::setcwd(Process*, char*)+0x130>
c00134c7:	83 ec 0c             	sub    esp,0xc
c00134ca:	56                   	push   esi
c00134cb:	e8 c4 d2 fe ff       	call   c0000794 <strlen>
c00134d0:	83 c4 10             	add    esp,0x10
c00134d3:	83 f8 03             	cmp    eax,0x3
c00134d6:	75 34                	jne    c001350c <Fs::setcwd(Process*, char*)+0x95>
c00134d8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00134dd:	75 2d                	jne    c001350c <Fs::setcwd(Process*, char*)+0x95>
c00134df:	eb cf                	jmp    c00134b0 <Fs::setcwd(Process*, char*)+0x39>
c00134e1:	8b 14 85 c0 e6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1940]
c00134e8:	b8 05 00 00 00       	mov    eax,0x5
c00134ed:	85 d2                	test   edx,edx
c00134ef:	0f 84 b2 00 00 00    	je     c00135a7 <Fs::setcwd(Process*, char*)+0x130>
c00134f5:	b8 06 00 00 00       	mov    eax,0x6
c00134fa:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013501:	0f 85 92 00 00 00    	jne    c0013599 <Fs::setcwd(Process*, char*)+0x122>
c0013507:	e9 9b 00 00 00       	jmp    c00135a7 <Fs::setcwd(Process*, char*)+0x130>
c001350c:	83 ec 0c             	sub    esp,0xc
c001350f:	68 14 01 00 00       	push   0x114
c0013514:	e8 27 c3 ff ff       	call   c000f840 <malloc>
c0013519:	83 c4 0c             	add    esp,0xc
c001351c:	89 c3                	mov    ebx,eax
c001351e:	55                   	push   ebp
c001351f:	56                   	push   esi
c0013520:	50                   	push   eax
c0013521:	e8 e0 fb ff ff       	call   c0013106 <File::File(char const*, Process*)>
c0013526:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001352b:	83 c4 0c             	add    esp,0xc
c001352e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013532:	50                   	push   eax
c0013533:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013537:	50                   	push   eax
c0013538:	53                   	push   ebx
c0013539:	e8 d8 fe ff ff       	call   c0013416 <File::stat(unsigned long long*, bool*)>
c001353e:	83 c4 10             	add    esp,0x10
c0013541:	83 f8 02             	cmp    eax,0x2
c0013544:	74 04                	je     c001354a <Fs::setcwd(Process*, char*)+0xd3>
c0013546:	85 c0                	test   eax,eax
c0013548:	74 1c                	je     c0013566 <Fs::setcwd(Process*, char*)+0xef>
c001354a:	b8 01 00 00 00       	mov    eax,0x1
c001354f:	85 db                	test   ebx,ebx
c0013551:	74 54                	je     c00135a7 <Fs::setcwd(Process*, char*)+0x130>
c0013553:	83 ec 0c             	sub    esp,0xc
c0013556:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013558:	53                   	push   ebx
c0013559:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001355c:	83 c4 10             	add    esp,0x10
c001355f:	b8 01 00 00 00       	mov    eax,0x1
c0013564:	eb 41                	jmp    c00135a7 <Fs::setcwd(Process*, char*)+0x130>
c0013566:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001356b:	75 1c                	jne    c0013589 <Fs::setcwd(Process*, char*)+0x112>
c001356d:	b8 02 00 00 00       	mov    eax,0x2
c0013572:	85 db                	test   ebx,ebx
c0013574:	74 31                	je     c00135a7 <Fs::setcwd(Process*, char*)+0x130>
c0013576:	83 ec 0c             	sub    esp,0xc
c0013579:	8b 03                	mov    eax,DWORD PTR [ebx]
c001357b:	53                   	push   ebx
c001357c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001357f:	83 c4 10             	add    esp,0x10
c0013582:	b8 02 00 00 00       	mov    eax,0x2
c0013587:	eb 1e                	jmp    c00135a7 <Fs::setcwd(Process*, char*)+0x130>
c0013589:	85 db                	test   ebx,ebx
c001358b:	74 0c                	je     c0013599 <Fs::setcwd(Process*, char*)+0x122>
c001358d:	83 ec 0c             	sub    esp,0xc
c0013590:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013592:	53                   	push   ebx
c0013593:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013596:	83 c4 10             	add    esp,0x10
c0013599:	50                   	push   eax
c001359a:	50                   	push   eax
c001359b:	56                   	push   esi
c001359c:	57                   	push   edi
c001359d:	e8 92 d2 fe ff       	call   c0000834 <strcpy>
c00135a2:	83 c4 10             	add    esp,0x10
c00135a5:	31 c0                	xor    eax,eax
c00135a7:	81 c4 1c 02 00 00    	add    esp,0x21c
c00135ad:	5b                   	pop    ebx
c00135ae:	5e                   	pop    esi
c00135af:	5f                   	pop    edi
c00135b0:	5d                   	pop    ebp
c00135b1:	c3                   	ret    

c00135b2 <Directory::Directory(char const*, Process*)>:
c00135b2:	83 ec 0c             	sub    esp,0xc
c00135b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b9:	83 ec 08             	sub    esp,0x8
c00135bc:	6a 00                	push   0x0
c00135be:	50                   	push   eax
c00135bf:	e8 1a e1 ff ff       	call   c00116de <UnixFile::UnixFile(int)>
c00135c4:	83 c4 10             	add    esp,0x10
c00135c7:	ba 64 a7 02 c0       	mov    edx,0xc002a764
c00135cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d0:	89 10                	mov    DWORD PTR [eax],edx
c00135d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135d6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00135dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e0:	83 c0 0d             	add    eax,0xd
c00135e3:	83 ec 04             	sub    esp,0x4
c00135e6:	52                   	push   edx
c00135e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135eb:	50                   	push   eax
c00135ec:	e8 6b f9 ff ff       	call   c0012f5c <Fs::standardiseFiles(char*, char const*, char const*)>
c00135f1:	83 c4 10             	add    esp,0x10
c00135f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00135fb:	8d 50 bf             	lea    edx,[eax-0x41]
c00135fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013602:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001360c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013610:	90                   	nop
c0013611:	83 c4 0c             	add    esp,0xc
c0013614:	c3                   	ret    
c0013615:	90                   	nop

c0013616 <Directory::open()>:
c0013616:	53                   	push   ebx
c0013617:	b8 0b 00 00 00       	mov    eax,0xb
c001361c:	83 ec 08             	sub    esp,0x8
c001361f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013623:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001362a:	80 fa 19             	cmp    dl,0x19
c001362d:	77 3d                	ja     c001366c <Directory::open()+0x56>
c001362f:	8b 14 95 c0 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1940]
c0013636:	85 d2                	test   edx,edx
c0013638:	74 32                	je     c001366c <Directory::open()+0x56>
c001363a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013640:	85 d2                	test   edx,edx
c0013642:	74 28                	je     c001366c <Directory::open()+0x56>
c0013644:	b8 06 00 00 00       	mov    eax,0x6
c0013649:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001364d:	75 1d                	jne    c001366c <Directory::open()+0x56>
c001364f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013655:	50                   	push   eax
c0013656:	8b 02                	mov    eax,DWORD PTR [edx]
c0013658:	51                   	push   ecx
c0013659:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001365c:	51                   	push   ecx
c001365d:	52                   	push   edx
c001365e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013661:	83 c4 10             	add    esp,0x10
c0013664:	85 c0                	test   eax,eax
c0013666:	75 04                	jne    c001366c <Directory::open()+0x56>
c0013668:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001366c:	83 c4 08             	add    esp,0x8
c001366f:	5b                   	pop    ebx
c0013670:	c3                   	ret    
c0013671:	90                   	nop

c0013672 <Directory::close()>:
c0013672:	53                   	push   ebx
c0013673:	b8 0b 00 00 00       	mov    eax,0xb
c0013678:	83 ec 08             	sub    esp,0x8
c001367b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001367f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013686:	80 fa 19             	cmp    dl,0x19
c0013689:	77 41                	ja     c00136cc <Directory::close()+0x5a>
c001368b:	8b 1c 95 c0 e6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1940]
c0013692:	85 db                	test   ebx,ebx
c0013694:	74 36                	je     c00136cc <Directory::close()+0x5a>
c0013696:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001369d:	74 2d                	je     c00136cc <Directory::close()+0x5a>
c001369f:	b8 05 00 00 00       	mov    eax,0x5
c00136a4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00136a8:	74 22                	je     c00136cc <Directory::close()+0x5a>
c00136aa:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00136ae:	8b 04 95 c0 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1940]
c00136b5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00136bb:	53                   	push   ebx
c00136bc:	53                   	push   ebx
c00136bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00136bf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00136c5:	50                   	push   eax
c00136c6:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00136c9:	83 c4 10             	add    esp,0x10
c00136cc:	83 c4 08             	add    esp,0x8
c00136cf:	5b                   	pop    ebx
c00136d0:	c3                   	ret    
c00136d1:	90                   	nop

c00136d2 <Directory::unlink()>:
c00136d2:	83 ec 0c             	sub    esp,0xc
c00136d5:	b8 0b 00 00 00       	mov    eax,0xb
c00136da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136e5:	80 f9 19             	cmp    cl,0x19
c00136e8:	77 2f                	ja     c0013719 <Directory::unlink()+0x47>
c00136ea:	8b 0c 8d c0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1940]
c00136f1:	85 c9                	test   ecx,ecx
c00136f3:	74 24                	je     c0013719 <Directory::unlink()+0x47>
c00136f5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136fb:	85 c9                	test   ecx,ecx
c00136fd:	74 1a                	je     c0013719 <Directory::unlink()+0x47>
c00136ff:	b8 06 00 00 00       	mov    eax,0x6
c0013704:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013708:	75 0f                	jne    c0013719 <Directory::unlink()+0x47>
c001370a:	83 c2 0d             	add    edx,0xd
c001370d:	50                   	push   eax
c001370e:	50                   	push   eax
c001370f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013711:	52                   	push   edx
c0013712:	51                   	push   ecx
c0013713:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013716:	83 c4 10             	add    esp,0x10
c0013719:	83 c4 0c             	add    esp,0xc
c001371c:	c3                   	ret    
c001371d:	90                   	nop

c001371e <Directory::rename(char const*)>:
c001371e:	83 ec 0c             	sub    esp,0xc
c0013721:	b8 0b 00 00 00       	mov    eax,0xb
c0013726:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001372a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013731:	80 f9 19             	cmp    cl,0x19
c0013734:	77 32                	ja     c0013768 <Directory::rename(char const*)+0x4a>
c0013736:	8b 0c 8d c0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1940]
c001373d:	85 c9                	test   ecx,ecx
c001373f:	74 27                	je     c0013768 <Directory::rename(char const*)+0x4a>
c0013741:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013747:	85 c9                	test   ecx,ecx
c0013749:	74 1d                	je     c0013768 <Directory::rename(char const*)+0x4a>
c001374b:	b8 06 00 00 00       	mov    eax,0x6
c0013750:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013754:	75 12                	jne    c0013768 <Directory::rename(char const*)+0x4a>
c0013756:	83 c2 0d             	add    edx,0xd
c0013759:	50                   	push   eax
c001375a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001375c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013760:	52                   	push   edx
c0013761:	51                   	push   ecx
c0013762:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013765:	83 c4 10             	add    esp,0x10
c0013768:	83 c4 0c             	add    esp,0xc
c001376b:	c3                   	ret    

c001376c <Directory::exists()>:
c001376c:	83 ec 0c             	sub    esp,0xc
c001376f:	31 c0                	xor    eax,eax
c0013771:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013775:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001377c:	80 f9 19             	cmp    cl,0x19
c001377f:	77 24                	ja     c00137a5 <Directory::exists()+0x39>
c0013781:	8b 0c 8d c0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1940]
c0013788:	85 c9                	test   ecx,ecx
c001378a:	74 19                	je     c00137a5 <Directory::exists()+0x39>
c001378c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013792:	85 c9                	test   ecx,ecx
c0013794:	74 0f                	je     c00137a5 <Directory::exists()+0x39>
c0013796:	83 c2 0d             	add    edx,0xd
c0013799:	50                   	push   eax
c001379a:	50                   	push   eax
c001379b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001379d:	52                   	push   edx
c001379e:	51                   	push   ecx
c001379f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00137a2:	83 c4 10             	add    esp,0x10
c00137a5:	83 c4 0c             	add    esp,0xc
c00137a8:	c3                   	ret    
c00137a9:	90                   	nop

c00137aa <Directory::read(dirent*)>:
c00137aa:	83 ec 1c             	sub    esp,0x1c
c00137ad:	b8 0b 00 00 00       	mov    eax,0xb
c00137b2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00137b6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00137bd:	80 fa 19             	cmp    dl,0x19
c00137c0:	77 30                	ja     c00137f2 <Directory::read(dirent*)+0x48>
c00137c2:	8b 14 95 c0 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1940]
c00137c9:	85 d2                	test   edx,edx
c00137cb:	74 25                	je     c00137f2 <Directory::read(dirent*)+0x48>
c00137cd:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137d4:	74 1c                	je     c00137f2 <Directory::read(dirent*)+0x48>
c00137d6:	83 ec 0c             	sub    esp,0xc
c00137d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137db:	8d 54 24 18          	lea    edx,[esp+0x18]
c00137df:	52                   	push   edx
c00137e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00137e4:	6a 00                	push   0x0
c00137e6:	68 10 01 00 00       	push   0x110
c00137eb:	51                   	push   ecx
c00137ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137ef:	83 c4 20             	add    esp,0x20
c00137f2:	83 c4 1c             	add    esp,0x1c
c00137f5:	c3                   	ret    

c00137f6 <Directory::create()>:
c00137f6:	83 ec 0c             	sub    esp,0xc
c00137f9:	b8 0b 00 00 00       	mov    eax,0xb
c00137fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013802:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013809:	80 f9 19             	cmp    cl,0x19
c001380c:	77 2f                	ja     c001383d <Directory::create()+0x47>
c001380e:	8b 0c 8d c0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1940]
c0013815:	85 c9                	test   ecx,ecx
c0013817:	74 24                	je     c001383d <Directory::create()+0x47>
c0013819:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001381f:	85 c9                	test   ecx,ecx
c0013821:	74 1a                	je     c001383d <Directory::create()+0x47>
c0013823:	b8 06 00 00 00       	mov    eax,0x6
c0013828:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001382c:	75 0f                	jne    c001383d <Directory::create()+0x47>
c001382e:	83 c2 0d             	add    edx,0xd
c0013831:	50                   	push   eax
c0013832:	50                   	push   eax
c0013833:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013835:	52                   	push   edx
c0013836:	51                   	push   ecx
c0013837:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001383a:	83 c4 10             	add    esp,0x10
c001383d:	83 c4 0c             	add    esp,0xc
c0013840:	c3                   	ret    
c0013841:	90                   	nop

c0013842 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013842:	b8 0a 00 00 00       	mov    eax,0xa
c0013847:	c3                   	ret    

c0013848 <Bus::Bus(char const*)>:
c0013848:	83 ec 0c             	sub    esp,0xc
c001384b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384f:	83 ec 08             	sub    esp,0x8
c0013852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013856:	50                   	push   eax
c0013857:	e8 68 09 00 00       	call   c00141c4 <Device::Device(char const*)>
c001385c:	83 c4 10             	add    esp,0x10
c001385f:	ba 80 a7 02 c0       	mov    edx,0xc002a780
c0013864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013868:	89 10                	mov    DWORD PTR [eax],edx
c001386a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001386e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013878:	90                   	nop
c0013879:	83 c4 0c             	add    esp,0xc
c001387c:	c3                   	ret    
c001387d:	90                   	nop

c001387e <Bus::~Bus()>:
c001387e:	83 ec 0c             	sub    esp,0xc
c0013881:	ba 80 a7 02 c0       	mov    edx,0xc002a780
c0013886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001388a:	89 10                	mov    DWORD PTR [eax],edx
c001388c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013890:	83 ec 0c             	sub    esp,0xc
c0013893:	50                   	push   eax
c0013894:	e8 0d 06 00 00       	call   c0013ea6 <Device::~Device()>
c0013899:	83 c4 10             	add    esp,0x10
c001389c:	90                   	nop
c001389d:	83 c4 0c             	add    esp,0xc
c00138a0:	c3                   	ret    
c00138a1:	90                   	nop

c00138a2 <Bus::~Bus()>:
c00138a2:	83 ec 0c             	sub    esp,0xc
c00138a5:	83 ec 0c             	sub    esp,0xc
c00138a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138ac:	e8 cd ff ff ff       	call   c001387e <Bus::~Bus()>
c00138b1:	83 c4 10             	add    esp,0x10
c00138b4:	83 ec 08             	sub    esp,0x8
c00138b7:	68 58 01 00 00       	push   0x158
c00138bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138c0:	e8 09 f2 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c00138c5:	83 c4 10             	add    esp,0x10
c00138c8:	83 c4 0c             	add    esp,0xc
c00138cb:	c3                   	ret    

c00138cc <Buzzer::Buzzer(char const*)>:
c00138cc:	83 ec 0c             	sub    esp,0xc
c00138cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d3:	83 ec 08             	sub    esp,0x8
c00138d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138da:	50                   	push   eax
c00138db:	e8 e4 08 00 00       	call   c00141c4 <Device::Device(char const*)>
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	ba ac a7 02 c0       	mov    edx,0xc002a7ac
c00138e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ec:	89 10                	mov    DWORD PTR [eax],edx
c00138ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00138fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013900:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001390a:	90                   	nop
c001390b:	83 c4 0c             	add    esp,0xc
c001390e:	c3                   	ret    
c001390f:	90                   	nop

c0013910 <Buzzer::~Buzzer()>:
c0013910:	83 ec 0c             	sub    esp,0xc
c0013913:	ba ac a7 02 c0       	mov    edx,0xc002a7ac
c0013918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391c:	89 10                	mov    DWORD PTR [eax],edx
c001391e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013922:	83 ec 0c             	sub    esp,0xc
c0013925:	50                   	push   eax
c0013926:	e8 7b 05 00 00       	call   c0013ea6 <Device::~Device()>
c001392b:	83 c4 10             	add    esp,0x10
c001392e:	90                   	nop
c001392f:	83 c4 0c             	add    esp,0xc
c0013932:	c3                   	ret    
c0013933:	90                   	nop

c0013934 <Buzzer::~Buzzer()>:
c0013934:	83 ec 0c             	sub    esp,0xc
c0013937:	83 ec 0c             	sub    esp,0xc
c001393a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001393e:	e8 cd ff ff ff       	call   c0013910 <Buzzer::~Buzzer()>
c0013943:	83 c4 10             	add    esp,0x10
c0013946:	83 ec 08             	sub    esp,0x8
c0013949:	68 5c 01 00 00       	push   0x15c
c001394e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013952:	e8 77 f1 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0013957:	83 c4 10             	add    esp,0x10
c001395a:	83 c4 0c             	add    esp,0xc
c001395d:	c3                   	ret    

c001395e <Buzzer::stop()>:
c001395e:	83 ec 14             	sub    esp,0x14
c0013961:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013965:	8b 10                	mov    edx,DWORD PTR [eax]
c0013967:	6a 00                	push   0x0
c0013969:	50                   	push   eax
c001396a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001396d:	83 c4 1c             	add    esp,0x1c
c0013970:	c3                   	ret    

c0013971 <beepThread(void*)>:
c0013971:	53                   	push   ebx
c0013972:	83 ec 08             	sub    esp,0x8
c0013975:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013979:	e8 d2 a0 00 00       	call   c001da50 <unlockScheduler()>
c001397e:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013983:	52                   	push   edx
c0013984:	52                   	push   edx
c0013985:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001398b:	52                   	push   edx
c001398c:	50                   	push   eax
c001398d:	e8 0c a6 00 00       	call   c001df9e <nanoSleep(unsigned long long)>
c0013992:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013995:	e8 c4 ff ff ff       	call   c001395e <Buzzer::stop()>
c001399a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00139a2:	83 c4 18             	add    esp,0x18
c00139a5:	5b                   	pop    ebx
c00139a6:	e9 39 a5 00 00       	jmp    c001dee4 <blockTask(TaskState)>
c00139ab:	90                   	nop

c00139ac <Buzzer::beep(int, int, bool)>:
c00139ac:	57                   	push   edi
c00139ad:	56                   	push   esi
c00139ae:	53                   	push   ebx
c00139af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139b3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00139b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00139bb:	52                   	push   edx
c00139bc:	52                   	push   edx
c00139bd:	8b 06                	mov    eax,DWORD PTR [esi]
c00139bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139c3:	56                   	push   esi
c00139c4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00139c7:	83 c4 10             	add    esp,0x10
c00139ca:	89 f8                	mov    eax,edi
c00139cc:	84 c0                	test   al,al
c00139ce:	74 1f                	je     c00139ef <Buzzer::beep(int, int, bool)+0x43>
c00139d0:	50                   	push   eax
c00139d1:	50                   	push   eax
c00139d2:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00139d8:	99                   	cdq    
c00139d9:	52                   	push   edx
c00139da:	50                   	push   eax
c00139db:	e8 be a5 00 00       	call   c001df9e <nanoSleep(unsigned long long)>
c00139e0:	83 c4 10             	add    esp,0x10
c00139e3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00139e7:	5b                   	pop    ebx
c00139e8:	5e                   	pop    esi
c00139e9:	5f                   	pop    edi
c00139ea:	e9 6f ff ff ff       	jmp    c001395e <Buzzer::stop()>
c00139ef:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00139f5:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c00139fa:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013a02:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013a06:	c7 44 24 14 71 39 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013971
c0013a0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013a12:	5b                   	pop    ebx
c0013a13:	5e                   	pop    esi
c0013a14:	5f                   	pop    edi
c0013a15:	e9 66 a1 00 00       	jmp    c001db80 <Process::createThread(void (*)(void*), void*, int)>

c0013a1a <User::loadClockSettings(int)>:
c0013a1a:	53                   	push   ebx
c0013a1b:	83 ec 14             	sub    esp,0x14
c0013a1e:	68 14 01 00 00       	push   0x114
c0013a23:	e8 18 be ff ff       	call   c000f840 <malloc>
c0013a28:	83 c4 0c             	add    esp,0xc
c0013a2b:	89 c3                	mov    ebx,eax
c0013a2d:	ff 35 14 16 03 c0    	push   DWORD PTR ds:0xc0031614
c0013a33:	68 d4 a7 02 c0       	push   0xc002a7d4
c0013a38:	50                   	push   eax
c0013a39:	e8 c8 f6 ff ff       	call   c0013106 <File::File(char const*, Process*)>
c0013a3e:	58                   	pop    eax
c0013a3f:	5a                   	pop    edx
c0013a40:	6a 01                	push   0x1
c0013a42:	53                   	push   ebx
c0013a43:	e8 22 f7 ff ff       	call   c001316a <File::open(FileOpenMode)>
c0013a48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a4b:	e8 78 f7 ff ff       	call   c00131c8 <File::close()>
c0013a50:	83 c4 10             	add    esp,0x10
c0013a53:	85 db                	test   ebx,ebx
c0013a55:	74 0f                	je     c0013a66 <User::loadClockSettings(int)+0x4c>
c0013a57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a59:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013a5d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013a60:	83 c4 08             	add    esp,0x8
c0013a63:	5b                   	pop    ebx
c0013a64:	ff e0                	jmp    eax
c0013a66:	83 c4 08             	add    esp,0x8
c0013a69:	5b                   	pop    ebx
c0013a6a:	c3                   	ret    
c0013a6b:	90                   	nop

c0013a6c <Clock::Clock(char const*)>:
c0013a6c:	83 ec 0c             	sub    esp,0xc
c0013a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a73:	83 ec 08             	sub    esp,0x8
c0013a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a7a:	50                   	push   eax
c0013a7b:	e8 44 07 00 00       	call   c00141c4 <Device::Device(char const*)>
c0013a80:	83 c4 10             	add    esp,0x10
c0013a83:	ba fc a7 02 c0       	mov    edx,0xc002a7fc
c0013a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8c:	89 10                	mov    DWORD PTR [eax],edx
c0013a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a92:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013a9c:	90                   	nop
c0013a9d:	83 c4 0c             	add    esp,0xc
c0013aa0:	c3                   	ret    
c0013aa1:	90                   	nop

c0013aa2 <Clock::~Clock()>:
c0013aa2:	83 ec 0c             	sub    esp,0xc
c0013aa5:	ba fc a7 02 c0       	mov    edx,0xc002a7fc
c0013aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aae:	89 10                	mov    DWORD PTR [eax],edx
c0013ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab4:	83 ec 0c             	sub    esp,0xc
c0013ab7:	50                   	push   eax
c0013ab8:	e8 e9 03 00 00       	call   c0013ea6 <Device::~Device()>
c0013abd:	83 c4 10             	add    esp,0x10
c0013ac0:	90                   	nop
c0013ac1:	83 c4 0c             	add    esp,0xc
c0013ac4:	c3                   	ret    
c0013ac5:	90                   	nop

c0013ac6 <Clock::~Clock()>:
c0013ac6:	83 ec 0c             	sub    esp,0xc
c0013ac9:	83 ec 0c             	sub    esp,0xc
c0013acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ad0:	e8 cd ff ff ff       	call   c0013aa2 <Clock::~Clock()>
c0013ad5:	83 c4 10             	add    esp,0x10
c0013ad8:	83 ec 08             	sub    esp,0x8
c0013adb:	68 58 01 00 00       	push   0x158
c0013ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ae4:	e8 e5 ef ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0013ae9:	83 c4 10             	add    esp,0x10
c0013aec:	83 c4 0c             	add    esp,0xc
c0013aef:	c3                   	ret    

c0013af0 <Clock::timeInSecondsLocal()>:
c0013af0:	53                   	push   ebx
c0013af1:	83 ec 14             	sub    esp,0x14
c0013af4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013af8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013afa:	50                   	push   eax
c0013afb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013afe:	0f b6 0d 30 e2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e230
c0013b05:	03 0d 34 e2 02 c0    	add    ecx,DWORD PTR ds:0xc002e234
c0013b0b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b11:	89 cb                	mov    ebx,ecx
c0013b13:	c1 fb 1f             	sar    ebx,0x1f
c0013b16:	01 c8                	add    eax,ecx
c0013b18:	11 da                	adc    edx,ebx
c0013b1a:	83 c4 10             	add    esp,0x10
c0013b1d:	31 c9                	xor    ecx,ecx
c0013b1f:	80 3d 31 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e231,0x0
c0013b26:	74 05                	je     c0013b2d <Clock::timeInSecondsLocal()+0x3d>
c0013b28:	b9 08 07 00 00       	mov    ecx,0x708
c0013b2d:	31 db                	xor    ebx,ebx
c0013b2f:	01 c8                	add    eax,ecx
c0013b31:	11 da                	adc    edx,ebx
c0013b33:	83 c4 08             	add    esp,0x8
c0013b36:	5b                   	pop    ebx
c0013b37:	c3                   	ret    

c0013b38 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013b38:	57                   	push   edi
c0013b39:	56                   	push   esi
c0013b3a:	53                   	push   ebx
c0013b3b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013b3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013b43:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013b49:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013b4c:	0f b6 05 30 e2 02 c0 	movzx  eax,BYTE PTR ds:0xc002e230
c0013b53:	03 05 34 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e234
c0013b59:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013b5f:	99                   	cdq    
c0013b60:	29 c6                	sub    esi,eax
c0013b62:	19 d7                	sbb    edi,edx
c0013b64:	89 f0                	mov    eax,esi
c0013b66:	89 fa                	mov    edx,edi
c0013b68:	31 f6                	xor    esi,esi
c0013b6a:	80 3d 31 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e231,0x0
c0013b71:	74 05                	je     c0013b78 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013b73:	be 08 07 00 00       	mov    esi,0x708
c0013b78:	31 ff                	xor    edi,edi
c0013b7a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013b7e:	29 f0                	sub    eax,esi
c0013b80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b84:	19 fa                	sbb    edx,edi
c0013b86:	89 d8                	mov    eax,ebx
c0013b88:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013b8c:	5b                   	pop    ebx
c0013b8d:	5e                   	pop    esi
c0013b8e:	5f                   	pop    edi
c0013b8f:	ff e0                	jmp    eax

c0013b91 <datetimeToSeconds(datetime_t)>:
c0013b91:	55                   	push   ebp
c0013b92:	57                   	push   edi
c0013b93:	56                   	push   esi
c0013b94:	53                   	push   ebx
c0013b95:	83 ec 14             	sub    esp,0x14
c0013b98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013b9c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013ba0:	89 d3                	mov    ebx,edx
c0013ba2:	0f b6 c6             	movzx  eax,dh
c0013ba5:	c1 eb 10             	shr    ebx,0x10
c0013ba8:	48                   	dec    eax
c0013ba9:	66 81 eb 6c 07       	sub    bx,0x76c
c0013bae:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013bb2:	0f b6 f5             	movzx  esi,ch
c0013bb5:	89 cf                	mov    edi,ecx
c0013bb7:	6b f6 3c             	imul   esi,esi,0x3c
c0013bba:	c1 ef 10             	shr    edi,0x10
c0013bbd:	0f b6 c9             	movzx  ecx,cl
c0013bc0:	89 f8                	mov    eax,edi
c0013bc2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013bc8:	0f b6 f8             	movzx  edi,al
c0013bcb:	0f b6 d2             	movzx  edx,dl
c0013bce:	01 fe                	add    esi,edi
c0013bd0:	01 f1                	add    ecx,esi
c0013bd2:	0f b7 f3             	movzx  esi,bx
c0013bd5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013bd9:	c1 f9 1f             	sar    ecx,0x1f
c0013bdc:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013be1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013be5:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013bea:	8b 0c 8d 40 a8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd57c0]
c0013bf1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013bf5:	76 29                	jbe    c0013c20 <datetimeToSeconds(datetime_t)+0x8f>
c0013bf7:	f6 c3 03             	test   bl,0x3
c0013bfa:	75 24                	jne    c0013c20 <datetimeToSeconds(datetime_t)+0x8f>
c0013bfc:	31 d2                	xor    edx,edx
c0013bfe:	bf 64 00 00 00       	mov    edi,0x64
c0013c03:	89 d8                	mov    eax,ebx
c0013c05:	66 f7 f7             	div    di
c0013c08:	66 85 d2             	test   dx,dx
c0013c0b:	75 12                	jne    c0013c1f <datetimeToSeconds(datetime_t)+0x8e>
c0013c0d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013c13:	bf 90 01 00 00       	mov    edi,0x190
c0013c18:	99                   	cdq    
c0013c19:	f7 ff                	idiv   edi
c0013c1b:	85 d2                	test   edx,edx
c0013c1d:	75 01                	jne    c0013c20 <datetimeToSeconds(datetime_t)+0x8f>
c0013c1f:	41                   	inc    ecx
c0013c20:	66 83 fb 46          	cmp    bx,0x46
c0013c24:	76 45                	jbe    c0013c6b <datetimeToSeconds(datetime_t)+0xda>
c0013c26:	bb 46 00 00 00       	mov    ebx,0x46
c0013c2b:	bf 64 00 00 00       	mov    edi,0x64
c0013c30:	bd 90 01 00 00       	mov    ebp,0x190
c0013c35:	b8 6d 01 00 00       	mov    eax,0x16d
c0013c3a:	f6 c3 03             	test   bl,0x3
c0013c3d:	75 23                	jne    c0013c62 <datetimeToSeconds(datetime_t)+0xd1>
c0013c3f:	89 d8                	mov    eax,ebx
c0013c41:	99                   	cdq    
c0013c42:	f7 ff                	idiv   edi
c0013c44:	b8 6e 01 00 00       	mov    eax,0x16e
c0013c49:	85 d2                	test   edx,edx
c0013c4b:	75 15                	jne    c0013c62 <datetimeToSeconds(datetime_t)+0xd1>
c0013c4d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013c53:	99                   	cdq    
c0013c54:	f7 fd                	idiv   ebp
c0013c56:	83 fa 01             	cmp    edx,0x1
c0013c59:	19 c0                	sbb    eax,eax
c0013c5b:	f7 d0                	not    eax
c0013c5d:	05 6e 01 00 00       	add    eax,0x16e
c0013c62:	01 c1                	add    ecx,eax
c0013c64:	43                   	inc    ebx
c0013c65:	39 f3                	cmp    ebx,esi
c0013c67:	7c cc                	jl     c0013c35 <datetimeToSeconds(datetime_t)+0xa4>
c0013c69:	eb 35                	jmp    c0013ca0 <datetimeToSeconds(datetime_t)+0x10f>
c0013c6b:	74 33                	je     c0013ca0 <datetimeToSeconds(datetime_t)+0x10f>
c0013c6d:	b8 45 00 00 00       	mov    eax,0x45
c0013c72:	89 c2                	mov    edx,eax
c0013c74:	83 e2 03             	and    edx,0x3
c0013c77:	39 f0                	cmp    eax,esi
c0013c79:	7e 0f                	jle    c0013c8a <datetimeToSeconds(datetime_t)+0xf9>
c0013c7b:	83 fa 01             	cmp    edx,0x1
c0013c7e:	19 d2                	sbb    edx,edx
c0013c80:	48                   	dec    eax
c0013c81:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013c88:	eb e8                	jmp    c0013c72 <datetimeToSeconds(datetime_t)+0xe1>
c0013c8a:	b8 6d 01 00 00       	mov    eax,0x16d
c0013c8f:	85 d2                	test   edx,edx
c0013c91:	75 0b                	jne    c0013c9e <datetimeToSeconds(datetime_t)+0x10d>
c0013c93:	66 83 fb 01          	cmp    bx,0x1
c0013c97:	19 c0                	sbb    eax,eax
c0013c99:	05 6e 01 00 00       	add    eax,0x16e
c0013c9e:	29 c1                	sub    ecx,eax
c0013ca0:	b8 80 51 01 00       	mov    eax,0x15180
c0013ca5:	f7 e9                	imul   ecx
c0013ca7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013cab:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013caf:	83 c4 14             	add    esp,0x14
c0013cb2:	5b                   	pop    ebx
c0013cb3:	5e                   	pop    esi
c0013cb4:	5f                   	pop    edi
c0013cb5:	5d                   	pop    ebp
c0013cb6:	c3                   	ret    
c0013cb7:	90                   	nop

c0013cb8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013cb8:	57                   	push   edi
c0013cb9:	56                   	push   esi
c0013cba:	53                   	push   ebx
c0013cbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cbf:	8b 06                	mov    eax,DWORD PTR [esi]
c0013cc1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013cc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013cc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ccc:	e8 c0 fe ff ff       	call   c0013b91 <datetimeToSeconds(datetime_t)>
c0013cd1:	59                   	pop    ecx
c0013cd2:	0f b6 0d 30 e2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e230
c0013cd9:	5b                   	pop    ebx
c0013cda:	03 0d 34 e2 02 c0    	add    ecx,DWORD PTR ds:0xc002e234
c0013ce0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ce6:	89 cb                	mov    ebx,ecx
c0013ce8:	c1 fb 1f             	sar    ebx,0x1f
c0013ceb:	29 c8                	sub    eax,ecx
c0013ced:	19 da                	sbb    edx,ebx
c0013cef:	31 c9                	xor    ecx,ecx
c0013cf1:	80 3d 31 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e231,0x0
c0013cf8:	74 05                	je     c0013cff <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013cfa:	b9 08 07 00 00       	mov    ecx,0x708
c0013cff:	31 db                	xor    ebx,ebx
c0013d01:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d05:	29 c8                	sub    eax,ecx
c0013d07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d0b:	19 da                	sbb    edx,ebx
c0013d0d:	89 f8                	mov    eax,edi
c0013d0f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013d13:	5b                   	pop    ebx
c0013d14:	5e                   	pop    esi
c0013d15:	5f                   	pop    edi
c0013d16:	ff e0                	jmp    eax

c0013d18 <secondsToDatetime(unsigned long long)>:
c0013d18:	55                   	push   ebp
c0013d19:	57                   	push   edi
c0013d1a:	56                   	push   esi
c0013d1b:	53                   	push   ebx
c0013d1c:	83 ec 1c             	sub    esp,0x1c
c0013d1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013d23:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013d27:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013d2b:	6a 00                	push   0x0
c0013d2d:	68 80 51 01 00       	push   0x15180
c0013d32:	55                   	push   ebp
c0013d33:	57                   	push   edi
c0013d34:	e8 f3 28 01 00       	call   c002662c <__udivdi3>
c0013d39:	83 c4 10             	add    esp,0x10
c0013d3c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013d42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013d46:	6a 00                	push   0x0
c0013d48:	68 80 51 01 00       	push   0x15180
c0013d4d:	55                   	push   ebp
c0013d4e:	57                   	push   edi
c0013d4f:	bf 10 0e 00 00       	mov    edi,0xe10
c0013d54:	e8 d3 29 01 00       	call   c002672c <__umoddi3>
c0013d59:	83 c4 10             	add    esp,0x10
c0013d5c:	99                   	cdq    
c0013d5d:	f7 ff                	idiv   edi
c0013d5f:	bf 3c 00 00 00       	mov    edi,0x3c
c0013d64:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013d67:	89 d0                	mov    eax,edx
c0013d69:	99                   	cdq    
c0013d6a:	f7 ff                	idiv   edi
c0013d6c:	85 db                	test   ebx,ebx
c0013d6e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013d71:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013d74:	79 11                	jns    c0013d87 <secondsToDatetime(unsigned long long)+0x6f>
c0013d76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013d7a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013d80:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013d85:	eb 07                	jmp    c0013d8e <secondsToDatetime(unsigned long long)+0x76>
c0013d87:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013d8c:	89 d8                	mov    eax,ebx
c0013d8e:	bf b4 05 00 00       	mov    edi,0x5b4
c0013d93:	99                   	cdq    
c0013d94:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013d99:	f7 f9                	idiv   ecx
c0013d9b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013da0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013da4:	31 d2                	xor    edx,edx
c0013da6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013dae:	01 c3                	add    ebx,eax
c0013db0:	89 d8                	mov    eax,ebx
c0013db2:	f7 f1                	div    ecx
c0013db4:	31 d2                	xor    edx,edx
c0013db6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013db9:	89 d8                	mov    eax,ebx
c0013dbb:	f7 f7                	div    edi
c0013dbd:	31 d2                	xor    edx,edx
c0013dbf:	29 c1                	sub    ecx,eax
c0013dc1:	89 d8                	mov    eax,ebx
c0013dc3:	f7 f5                	div    ebp
c0013dc5:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013dca:	29 c1                	sub    ecx,eax
c0013dcc:	31 d2                	xor    edx,edx
c0013dce:	89 c8                	mov    eax,ecx
c0013dd0:	f7 f5                	div    ebp
c0013dd2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ddb:	31 d2                	xor    edx,edx
c0013ddd:	89 c8                	mov    eax,ecx
c0013ddf:	f7 f5                	div    ebp
c0013de1:	31 d2                	xor    edx,edx
c0013de3:	01 c3                	add    ebx,eax
c0013de5:	89 c8                	mov    eax,ecx
c0013de7:	f7 f7                	div    edi
c0013de9:	bf 99 00 00 00       	mov    edi,0x99
c0013dee:	29 c3                	sub    ebx,eax
c0013df0:	31 d2                	xor    edx,edx
c0013df2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013dfa:	29 c3                	sub    ebx,eax
c0013dfc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013dff:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013e02:	bb 05 00 00 00       	mov    ebx,0x5
c0013e07:	83 c1 02             	add    ecx,0x2
c0013e0a:	89 c8                	mov    eax,ecx
c0013e0c:	f7 f7                	div    edi
c0013e0e:	31 d2                	xor    edx,edx
c0013e10:	89 c7                	mov    edi,eax
c0013e12:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013e18:	83 c0 02             	add    eax,0x2
c0013e1b:	f7 f3                	div    ebx
c0013e1d:	89 eb                	mov    ebx,ebp
c0013e1f:	29 c3                	sub    ebx,eax
c0013e21:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013e27:	88 1e                	mov    BYTE PTR [esi],bl
c0013e29:	19 c0                	sbb    eax,eax
c0013e2b:	31 d2                	xor    edx,edx
c0013e2d:	83 e0 0c             	and    eax,0xc
c0013e30:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013e34:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013e3c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013e40:	83 f9 01             	cmp    ecx,0x1
c0013e43:	0f 96 c2             	setbe  dl
c0013e46:	41                   	inc    ecx
c0013e47:	01 d0                	add    eax,edx
c0013e49:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013e4c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013e50:	83 c4 1c             	add    esp,0x1c
c0013e53:	89 f0                	mov    eax,esi
c0013e55:	5b                   	pop    ebx
c0013e56:	5e                   	pop    esi
c0013e57:	5f                   	pop    edi
c0013e58:	5d                   	pop    ebp
c0013e59:	c2 04 00             	ret    0x4

c0013e5c <Clock::timeInDatetimeLocal()>:
c0013e5c:	53                   	push   ebx
c0013e5d:	83 ec 14             	sub    esp,0x14
c0013e60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e64:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e68:	e8 83 fc ff ff       	call   c0013af0 <Clock::timeInSecondsLocal()>
c0013e6d:	83 c4 0c             	add    esp,0xc
c0013e70:	52                   	push   edx
c0013e71:	50                   	push   eax
c0013e72:	53                   	push   ebx
c0013e73:	e8 a0 fe ff ff       	call   c0013d18 <secondsToDatetime(unsigned long long)>
c0013e78:	89 d8                	mov    eax,ebx
c0013e7a:	83 c4 14             	add    esp,0x14
c0013e7d:	5b                   	pop    ebx
c0013e7e:	c2 04 00             	ret    0x4
c0013e81:	90                   	nop

c0013e82 <Device::hibernate()>:
c0013e82:	c3                   	ret    
c0013e83:	90                   	nop

c0013e84 <Device::wake()>:
c0013e84:	c3                   	ret    
c0013e85:	90                   	nop

c0013e86 <Device::detect()>:
c0013e86:	c3                   	ret    
c0013e87:	90                   	nop

c0013e88 <Device::disableLegacy()>:
c0013e88:	c3                   	ret    
c0013e89:	90                   	nop

c0013e8a <Device::powerSaving(PowerSavingLevel)>:
c0013e8a:	c3                   	ret    
c0013e8b:	90                   	nop

c0013e8c <DriverlessDevice::close(int, int, void*)>:
c0013e8c:	31 c0                	xor    eax,eax
c0013e8e:	c3                   	ret    
c0013e8f:	90                   	nop

c0013e90 <DriverlessDevice::detect()>:
c0013e90:	c3                   	ret    
c0013e91:	90                   	nop

c0013e92 <DriverlessDevice::open(int, int, void*)>:
c0013e92:	83 ec 18             	sub    esp,0x18
c0013e95:	68 70 a8 02 c0       	push   0xc002a870
c0013e9a:	e8 8a 63 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0013e9f:	83 c8 ff             	or     eax,0xffffffff
c0013ea2:	83 c4 1c             	add    esp,0x1c
c0013ea5:	c3                   	ret    

c0013ea6 <Device::~Device()>:
c0013ea6:	ba 98 a8 02 c0       	mov    edx,0xc002a898
c0013eab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013eaf:	89 10                	mov    DWORD PTR [eax],edx
c0013eb1:	90                   	nop
c0013eb2:	c3                   	ret    
c0013eb3:	90                   	nop

c0013eb4 <Device::~Device()>:
c0013eb4:	83 ec 0c             	sub    esp,0xc
c0013eb7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ebb:	e8 e6 ff ff ff       	call   c0013ea6 <Device::~Device()>
c0013ec0:	83 c4 04             	add    esp,0x4
c0013ec3:	83 ec 08             	sub    esp,0x8
c0013ec6:	68 58 01 00 00       	push   0x158
c0013ecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ecf:	e8 fa eb ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	83 c4 0c             	add    esp,0xc
c0013eda:	c3                   	ret    
c0013edb:	90                   	nop

c0013edc <Device::findAndLoadDriver()>:
c0013edc:	c3                   	ret    
c0013edd:	90                   	nop

c0013ede <Device::preOpenPCI(PCIDeviceInfo)>:
c0013ede:	57                   	push   edi
c0013edf:	b9 09 00 00 00       	mov    ecx,0x9
c0013ee4:	56                   	push   esi
c0013ee5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013ee9:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013eed:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013ef7:	81 c7 18 01 00 00    	add    edi,0x118
c0013efd:	fc                   	cld    
c0013efe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013f00:	5e                   	pop    esi
c0013f01:	5f                   	pop    edi
c0013f02:	c3                   	ret    
c0013f03:	90                   	nop

c0013f04 <Device::preOpenACPI(void*, char*, char*)>:
c0013f04:	56                   	push   esi
c0013f05:	53                   	push   ebx
c0013f06:	83 ec 08             	sub    esp,0x8
c0013f09:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013f0d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013f11:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013f1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f1f:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013f25:	6a 1e                	push   0x1e
c0013f27:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013f2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013f31:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013f37:	50                   	push   eax
c0013f38:	e8 07 c8 fe ff       	call   c0000744 <memcpy>
c0013f3d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013f41:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013f45:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013f4d:	83 c4 14             	add    esp,0x14
c0013f50:	5b                   	pop    ebx
c0013f51:	5e                   	pop    esi
c0013f52:	e9 ed c7 fe ff       	jmp    c0000744 <memcpy>
c0013f57:	90                   	nop

c0013f58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013f58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f5c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013f61:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013f68:	75 0b                	jne    c0013f75 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013f6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f6c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f70:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013f73:	eb 1e                	jmp    c0013f93 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013f75:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0013f7a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f80:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013f86:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f88:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f90:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013f93:	ff e0                	jmp    eax
c0013f95:	90                   	nop

c0013f96 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f9a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013f9f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013fa6:	75 0b                	jne    c0013fb3 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013fa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0013faa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013fae:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013fb1:	eb 1e                	jmp    c0013fd1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013fb3:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0013fb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013fbe:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013fc4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013fc6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013fca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fce:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013fd1:	ff e0                	jmp    eax
c0013fd3:	90                   	nop

c0013fd4 <Device::addChild(Device*)>:
c0013fd4:	53                   	push   ebx
c0013fd5:	83 ec 08             	sub    esp,0x8
c0013fd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fdc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fe0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013fe6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013fec:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013fee:	85 d2                	test   edx,edx
c0013ff0:	74 04                	je     c0013ff6 <Device::addChild(Device*)+0x22>
c0013ff2:	89 d3                	mov    ebx,edx
c0013ff4:	eb f6                	jmp    c0013fec <Device::addChild(Device*)+0x18>
c0013ff6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013ff9:	83 ec 0c             	sub    esp,0xc
c0013ffc:	6a 08                	push   0x8
c0013ffe:	e8 3d b8 ff ff       	call   c000f840 <malloc>
c0014003:	89 03                	mov    DWORD PTR [ebx],eax
c0014005:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001400b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014012:	83 c4 18             	add    esp,0x18
c0014015:	5b                   	pop    ebx
c0014016:	c3                   	ret    
c0014017:	90                   	nop

c0014018 <Device::removeAllChildren()>:
c0014018:	56                   	push   esi
c0014019:	53                   	push   ebx
c001401a:	52                   	push   edx
c001401b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001401f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014025:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014028:	74 17                	je     c0014041 <Device::removeAllChildren()+0x29>
c001402a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001402d:	85 c0                	test   eax,eax
c001402f:	74 0c                	je     c001403d <Device::removeAllChildren()+0x25>
c0014031:	83 ec 0c             	sub    esp,0xc
c0014034:	8b 10                	mov    edx,DWORD PTR [eax]
c0014036:	50                   	push   eax
c0014037:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001403f:	eb e4                	jmp    c0014025 <Device::removeAllChildren()+0xd>
c0014041:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014047:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001404d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014053:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001405a:	58                   	pop    eax
c001405b:	5b                   	pop    ebx
c001405c:	5e                   	pop    esi
c001405d:	c3                   	ret    

c001405e <Device::hibernateAll()>:
c001405e:	53                   	push   ebx
c001405f:	83 ec 14             	sub    esp,0x14
c0014062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014066:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014068:	53                   	push   ebx
c0014069:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001406c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014072:	83 c4 10             	add    esp,0x10
c0014075:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014078:	74 0f                	je     c0014089 <Device::hibernateAll()+0x2b>
c001407a:	83 ec 0c             	sub    esp,0xc
c001407d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014080:	e8 d9 ff ff ff       	call   c001405e <Device::hibernateAll()>
c0014085:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014087:	eb e9                	jmp    c0014072 <Device::hibernateAll()+0x14>
c0014089:	83 c4 08             	add    esp,0x8
c001408c:	5b                   	pop    ebx
c001408d:	c3                   	ret    

c001408e <Device::wakeAll()>:
c001408e:	53                   	push   ebx
c001408f:	83 ec 14             	sub    esp,0x14
c0014092:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014096:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014098:	53                   	push   ebx
c0014099:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001409c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140a2:	83 c4 10             	add    esp,0x10
c00140a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140a8:	74 0f                	je     c00140b9 <Device::wakeAll()+0x2b>
c00140aa:	83 ec 0c             	sub    esp,0xc
c00140ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140b0:	e8 d9 ff ff ff       	call   c001408e <Device::wakeAll()>
c00140b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140b7:	eb e9                	jmp    c00140a2 <Device::wakeAll()+0x14>
c00140b9:	83 c4 08             	add    esp,0x8
c00140bc:	5b                   	pop    ebx
c00140bd:	c3                   	ret    

c00140be <Device::detectAll()>:
c00140be:	53                   	push   ebx
c00140bf:	83 ec 14             	sub    esp,0x14
c00140c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00140c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140c8:	53                   	push   ebx
c00140c9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00140cc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140d2:	83 c4 10             	add    esp,0x10
c00140d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140d8:	74 0f                	je     c00140e9 <Device::detectAll()+0x2b>
c00140da:	83 ec 0c             	sub    esp,0xc
c00140dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140e0:	e8 d9 ff ff ff       	call   c00140be <Device::detectAll()>
c00140e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140e7:	eb e9                	jmp    c00140d2 <Device::detectAll()+0x14>
c00140e9:	83 c4 08             	add    esp,0x8
c00140ec:	5b                   	pop    ebx
c00140ed:	c3                   	ret    

c00140ee <Device::disableLegacyAll()>:
c00140ee:	53                   	push   ebx
c00140ef:	83 ec 14             	sub    esp,0x14
c00140f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00140f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140f8:	53                   	push   ebx
c00140f9:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00140fc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014102:	83 c4 10             	add    esp,0x10
c0014105:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014108:	74 0f                	je     c0014119 <Device::disableLegacyAll()+0x2b>
c001410a:	83 ec 0c             	sub    esp,0xc
c001410d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014110:	e8 d9 ff ff ff       	call   c00140ee <Device::disableLegacyAll()>
c0014115:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014117:	eb e9                	jmp    c0014102 <Device::disableLegacyAll()+0x14>
c0014119:	83 c4 08             	add    esp,0x8
c001411c:	5b                   	pop    ebx
c001411d:	c3                   	ret    

c001411e <Device::loadDriversForAll()>:
c001411e:	53                   	push   ebx
c001411f:	83 ec 08             	sub    esp,0x8
c0014122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014126:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001412c:	8b 18                	mov    ebx,DWORD PTR [eax]
c001412e:	85 db                	test   ebx,ebx
c0014130:	74 12                	je     c0014144 <Device::loadDriversForAll()+0x26>
c0014132:	83 ec 0c             	sub    esp,0xc
c0014135:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014138:	e8 e1 ff ff ff       	call   c001411e <Device::loadDriversForAll()>
c001413d:	83 c4 10             	add    esp,0x10
c0014140:	89 d8                	mov    eax,ebx
c0014142:	eb e8                	jmp    c001412c <Device::loadDriversForAll()+0xe>
c0014144:	83 c4 08             	add    esp,0x8
c0014147:	5b                   	pop    ebx
c0014148:	c3                   	ret    
c0014149:	90                   	nop

c001414a <Device::closeAll()>:
c001414a:	53                   	push   ebx
c001414b:	83 ec 08             	sub    esp,0x8
c001414e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014152:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014154:	6a 00                	push   0x0
c0014156:	6a 00                	push   0x0
c0014158:	6a 00                	push   0x0
c001415a:	53                   	push   ebx
c001415b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001415e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014164:	83 c4 10             	add    esp,0x10
c0014167:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001416a:	74 0f                	je     c001417b <Device::closeAll()+0x31>
c001416c:	83 ec 0c             	sub    esp,0xc
c001416f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014172:	e8 d3 ff ff ff       	call   c001414a <Device::closeAll()>
c0014177:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014179:	eb e9                	jmp    c0014164 <Device::closeAll()+0x1a>
c001417b:	83 c4 08             	add    esp,0x8
c001417e:	5b                   	pop    ebx
c001417f:	c3                   	ret    

c0014180 <Device::powerSavingAll(PowerSavingLevel)>:
c0014180:	56                   	push   esi
c0014181:	53                   	push   ebx
c0014182:	83 ec 0c             	sub    esp,0xc
c0014185:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014189:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001418d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001418f:	56                   	push   esi
c0014190:	53                   	push   ebx
c0014191:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014194:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001419a:	83 c4 10             	add    esp,0x10
c001419d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00141a0:	74 0f                	je     c00141b1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00141a2:	52                   	push   edx
c00141a3:	52                   	push   edx
c00141a4:	56                   	push   esi
c00141a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00141a8:	e8 d3 ff ff ff       	call   c0014180 <Device::powerSavingAll(PowerSavingLevel)>
c00141ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00141af:	eb e9                	jmp    c001419a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00141b1:	58                   	pop    eax
c00141b2:	5b                   	pop    ebx
c00141b3:	5e                   	pop    esi
c00141b4:	c3                   	ret    
c00141b5:	90                   	nop

c00141b6 <Device::setName(char const*)>:
c00141b6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00141be:	e9 71 c6 fe ff       	jmp    c0000834 <strcpy>
c00141c3:	90                   	nop

c00141c4 <Device::Device(char const*)>:
c00141c4:	83 ec 1c             	sub    esp,0x1c
c00141c7:	ba 98 a8 02 c0       	mov    edx,0xc002a898
c00141cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141d0:	89 10                	mov    DWORD PTR [eax],edx
c00141d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141d6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00141e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141e4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00141ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141f2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00141fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014200:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001420a:	83 ec 08             	sub    esp,0x8
c001420d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014215:	e8 9c ff ff ff       	call   c00141b6 <Device::setName(char const*)>
c001421a:	83 c4 10             	add    esp,0x10
c001421d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014225:	83 ec 0c             	sub    esp,0xc
c0014228:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001422c:	e8 0f b6 ff ff       	call   c000f840 <malloc>
c0014231:	83 c4 10             	add    esp,0x10
c0014234:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001423a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014241:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014245:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001424b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001424f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014255:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001425b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001425f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014265:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001426c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014270:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001427b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014286:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014294:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001429e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142a2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00142ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142b0:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00142ba:	90                   	nop
c00142bb:	83 c4 1c             	add    esp,0x1c
c00142be:	c3                   	ret    
c00142bf:	90                   	nop

c00142c0 <Device::getName()>:
c00142c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142c4:	05 d0 00 00 00       	add    eax,0xd0
c00142c9:	c3                   	ret    

c00142ca <DriverlessDevice::DriverlessDevice(char const*)>:
c00142ca:	83 ec 0c             	sub    esp,0xc
c00142cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142d1:	83 ec 08             	sub    esp,0x8
c00142d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142d8:	50                   	push   eax
c00142d9:	e8 e6 fe ff ff       	call   c00141c4 <Device::Device(char const*)>
c00142de:	83 c4 10             	add    esp,0x10
c00142e1:	ba c4 a8 02 c0       	mov    edx,0xc002a8c4
c00142e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142ea:	89 10                	mov    DWORD PTR [eax],edx
c00142ec:	90                   	nop
c00142ed:	83 c4 0c             	add    esp,0xc
c00142f0:	c3                   	ret    
c00142f1:	90                   	nop

c00142f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00142f2:	57                   	push   edi
c00142f3:	56                   	push   esi
c00142f4:	53                   	push   ebx
c00142f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00142fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014301:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014307:	75 0c                	jne    c0014315 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014309:	52                   	push   edx
c001430a:	52                   	push   edx
c001430b:	53                   	push   ebx
c001430c:	56                   	push   esi
c001430d:	e8 58 42 01 00       	call   c002856a <LinkedList<Device>::addElement(Device*)>
c0014312:	83 c4 10             	add    esp,0x10
c0014315:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001431b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001431e:	74 12                	je     c0014332 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014320:	50                   	push   eax
c0014321:	57                   	push   edi
c0014322:	56                   	push   esi
c0014323:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014326:	e8 c7 ff ff ff       	call   c00142f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001432b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001432d:	83 c4 10             	add    esp,0x10
c0014330:	eb e9                	jmp    c001431b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014332:	5b                   	pop    ebx
c0014333:	5e                   	pop    esi
c0014334:	5f                   	pop    edi
c0014335:	c3                   	ret    

c0014336 <getDevicesOfType(DeviceType)>:
c0014336:	53                   	push   ebx
c0014337:	83 ec 14             	sub    esp,0x14
c001433a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001433e:	53                   	push   ebx
c001433f:	e8 02 43 01 00       	call   c0028646 <LinkedList<Device>::LinkedList()>
c0014344:	83 c4 0c             	add    esp,0xc
c0014347:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001434b:	53                   	push   ebx
c001434c:	ff 35 a8 e0 02 c0    	push   DWORD PTR ds:0xc002e0a8
c0014352:	e8 9b ff ff ff       	call   c00142f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014357:	89 d8                	mov    eax,ebx
c0014359:	83 c4 18             	add    esp,0x18
c001435c:	5b                   	pop    ebx
c001435d:	c2 04 00             	ret    0x4

c0014360 <HardDiskController::HardDiskController(char const*)>:
c0014360:	83 ec 0c             	sub    esp,0xc
c0014363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014367:	83 ec 08             	sub    esp,0x8
c001436a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001436e:	50                   	push   eax
c001436f:	e8 50 fe ff ff       	call   c00141c4 <Device::Device(char const*)>
c0014374:	83 c4 10             	add    esp,0x10
c0014377:	ba f0 a8 02 c0       	mov    edx,0xc002a8f0
c001437c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014380:	89 10                	mov    DWORD PTR [eax],edx
c0014382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014386:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014390:	90                   	nop
c0014391:	83 c4 0c             	add    esp,0xc
c0014394:	c3                   	ret    
c0014395:	90                   	nop

c0014396 <HardDiskController::~HardDiskController()>:
c0014396:	83 ec 0c             	sub    esp,0xc
c0014399:	ba f0 a8 02 c0       	mov    edx,0xc002a8f0
c001439e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143a2:	89 10                	mov    DWORD PTR [eax],edx
c00143a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143a8:	83 ec 0c             	sub    esp,0xc
c00143ab:	50                   	push   eax
c00143ac:	e8 f5 fa ff ff       	call   c0013ea6 <Device::~Device()>
c00143b1:	83 c4 10             	add    esp,0x10
c00143b4:	90                   	nop
c00143b5:	83 c4 0c             	add    esp,0xc
c00143b8:	c3                   	ret    
c00143b9:	90                   	nop

c00143ba <HardDiskController::~HardDiskController()>:
c00143ba:	83 ec 0c             	sub    esp,0xc
c00143bd:	83 ec 0c             	sub    esp,0xc
c00143c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143c4:	e8 cd ff ff ff       	call   c0014396 <HardDiskController::~HardDiskController()>
c00143c9:	83 c4 10             	add    esp,0x10
c00143cc:	83 ec 08             	sub    esp,0x8
c00143cf:	68 58 01 00 00       	push   0x158
c00143d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143d8:	e8 f1 e6 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c00143dd:	83 c4 10             	add    esp,0x10
c00143e0:	83 c4 0c             	add    esp,0xc
c00143e3:	c3                   	ret    

c00143e4 <PhysicalDisk::eject()>:
c00143e4:	83 ec 18             	sub    esp,0x18
c00143e7:	68 14 a9 02 c0       	push   0xc002a914
c00143ec:	e8 bd e7 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00143f1:	83 c8 ff             	or     eax,0xffffffff
c00143f4:	83 c4 1c             	add    esp,0x1c
c00143f7:	c3                   	ret    

c00143f8 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00143f8:	83 ec 0c             	sub    esp,0xc
c00143fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143ff:	83 ec 08             	sub    esp,0x8
c0014402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014406:	50                   	push   eax
c0014407:	e8 b8 fd ff ff       	call   c00141c4 <Device::Device(char const*)>
c001440c:	83 c4 10             	add    esp,0x10
c001440f:	ba 44 a9 02 c0       	mov    edx,0xc002a944
c0014414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014418:	89 10                	mov    DWORD PTR [eax],edx
c001441a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001441e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014429:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014434:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001443e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014442:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014446:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001444c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014450:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001445a:	90                   	nop
c001445b:	83 c4 0c             	add    esp,0xc
c001445e:	c3                   	ret    
c001445f:	90                   	nop

c0014460 <PhysicalDisk::startCache()>:
c0014460:	56                   	push   esi
c0014461:	53                   	push   ebx
c0014462:	83 ec 10             	sub    esp,0x10
c0014465:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014469:	6a 44                	push   0x44
c001446b:	e8 d0 b3 ff ff       	call   c000f840 <malloc>
c0014470:	89 c6                	mov    esi,eax
c0014472:	58                   	pop    eax
c0014473:	5a                   	pop    edx
c0014474:	53                   	push   ebx
c0014475:	56                   	push   esi
c0014476:	e8 03 27 00 00       	call   c0016b7e <VCache::VCache(PhysicalDisk*)>
c001447b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014481:	83 c4 14             	add    esp,0x14
c0014484:	5b                   	pop    ebx
c0014485:	5e                   	pop    esi
c0014486:	c3                   	ret    
c0014487:	90                   	nop

c0014488 <PhysicalDisk::~PhysicalDisk()>:
c0014488:	83 ec 0c             	sub    esp,0xc
c001448b:	ba 44 a9 02 c0       	mov    edx,0xc002a944
c0014490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014494:	89 10                	mov    DWORD PTR [eax],edx
c0014496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001449a:	83 ec 0c             	sub    esp,0xc
c001449d:	50                   	push   eax
c001449e:	e8 03 fa ff ff       	call   c0013ea6 <Device::~Device()>
c00144a3:	83 c4 10             	add    esp,0x10
c00144a6:	90                   	nop
c00144a7:	83 c4 0c             	add    esp,0xc
c00144aa:	c3                   	ret    
c00144ab:	90                   	nop

c00144ac <PhysicalDisk::~PhysicalDisk()>:
c00144ac:	83 ec 0c             	sub    esp,0xc
c00144af:	83 ec 0c             	sub    esp,0xc
c00144b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144b6:	e8 cd ff ff ff       	call   c0014488 <PhysicalDisk::~PhysicalDisk()>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	83 ec 08             	sub    esp,0x8
c00144c1:	68 6c 01 00 00       	push   0x16c
c00144c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144ca:	e8 ff e5 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c00144cf:	83 c4 10             	add    esp,0x10
c00144d2:	83 c4 0c             	add    esp,0xc
c00144d5:	c3                   	ret    

c00144d6 <FPU::FPU(char const*)>:
c00144d6:	83 ec 0c             	sub    esp,0xc
c00144d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144dd:	83 ec 08             	sub    esp,0x8
c00144e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144e4:	50                   	push   eax
c00144e5:	e8 da fc ff ff       	call   c00141c4 <Device::Device(char const*)>
c00144ea:	83 c4 10             	add    esp,0x10
c00144ed:	ba 88 a9 02 c0       	mov    edx,0xc002a988
c00144f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144f6:	89 10                	mov    DWORD PTR [eax],edx
c00144f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144fc:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014506:	90                   	nop
c0014507:	83 c4 0c             	add    esp,0xc
c001450a:	c3                   	ret    
c001450b:	90                   	nop

c001450c <FPU::~FPU()>:
c001450c:	83 ec 0c             	sub    esp,0xc
c001450f:	ba 88 a9 02 c0       	mov    edx,0xc002a988
c0014514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014518:	89 10                	mov    DWORD PTR [eax],edx
c001451a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001451e:	83 ec 0c             	sub    esp,0xc
c0014521:	50                   	push   eax
c0014522:	e8 7f f9 ff ff       	call   c0013ea6 <Device::~Device()>
c0014527:	83 c4 10             	add    esp,0x10
c001452a:	90                   	nop
c001452b:	83 c4 0c             	add    esp,0xc
c001452e:	c3                   	ret    
c001452f:	90                   	nop

c0014530 <FPU::~FPU()>:
c0014530:	83 ec 0c             	sub    esp,0xc
c0014533:	83 ec 0c             	sub    esp,0xc
c0014536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001453a:	e8 cd ff ff ff       	call   c001450c <FPU::~FPU()>
c001453f:	83 c4 10             	add    esp,0x10
c0014542:	83 ec 08             	sub    esp,0x8
c0014545:	68 58 01 00 00       	push   0x158
c001454a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001454e:	e8 7b e5 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0014553:	83 c4 10             	add    esp,0x10
c0014556:	83 c4 0c             	add    esp,0xc
c0014559:	c3                   	ret    

c001455a <setupFPU()>:
c001455a:	53                   	push   ebx
c001455b:	83 ec 08             	sub    esp,0x8
c001455e:	8b 15 a8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0a8
c0014564:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001456b:	74 19                	je     c0014586 <setupFPU()+0x2c>
c001456d:	83 ec 0c             	sub    esp,0xc
c0014570:	68 58 01 00 00       	push   0x158
c0014575:	e8 c6 b2 ff ff       	call   c000f840 <malloc>
c001457a:	89 c3                	mov    ebx,eax
c001457c:	89 04 24             	mov    DWORD PTR [esp],eax
c001457f:	e8 30 0c 01 00       	call   c00251b4 <AVX::AVX()>
c0014584:	eb 5b                	jmp    c00145e1 <setupFPU()+0x87>
c0014586:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001458c:	84 c0                	test   al,al
c001458e:	79 19                	jns    c00145a9 <setupFPU()+0x4f>
c0014590:	83 ec 0c             	sub    esp,0xc
c0014593:	68 58 01 00 00       	push   0x158
c0014598:	e8 a3 b2 ff ff       	call   c000f840 <malloc>
c001459d:	89 c3                	mov    ebx,eax
c001459f:	89 04 24             	mov    DWORD PTR [esp],eax
c00145a2:	e8 33 0d 01 00       	call   c00252da <SSE::SSE()>
c00145a7:	eb 38                	jmp    c00145e1 <setupFPU()+0x87>
c00145a9:	a8 20                	test   al,0x20
c00145ab:	74 19                	je     c00145c6 <setupFPU()+0x6c>
c00145ad:	83 ec 0c             	sub    esp,0xc
c00145b0:	68 58 01 00 00       	push   0x158
c00145b5:	e8 86 b2 ff ff       	call   c000f840 <malloc>
c00145ba:	89 c3                	mov    ebx,eax
c00145bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00145bf:	e8 80 0c 01 00       	call   c0025244 <MMX::MMX()>
c00145c4:	eb 1b                	jmp    c00145e1 <setupFPU()+0x87>
c00145c6:	a8 10                	test   al,0x10
c00145c8:	74 1c                	je     c00145e6 <setupFPU()+0x8c>
c00145ca:	83 ec 0c             	sub    esp,0xc
c00145cd:	68 58 01 00 00       	push   0x158
c00145d2:	e8 69 b2 ff ff       	call   c000f840 <malloc>
c00145d7:	89 c3                	mov    ebx,eax
c00145d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00145dc:	e8 87 0d 01 00       	call   c0025368 <x87::x87()>
c00145e1:	83 c4 10             	add    esp,0x10
c00145e4:	eb 24                	jmp    c001460a <setupFPU()+0xb0>
c00145e6:	83 e0 ef             	and    eax,0xffffffef
c00145e9:	83 ec 0c             	sub    esp,0xc
c00145ec:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00145f2:	68 74 a9 02 c0       	push   0xc002a974
c00145f7:	e8 b2 e5 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00145fc:	0f 20 c0             	mov    eax,cr0
c00145ff:	83 c8 04             	or     eax,0x4
c0014602:	0f 22 c0             	mov    cr0,eax
c0014605:	31 db                	xor    ebx,ebx
c0014607:	83 c4 10             	add    esp,0x10
c001460a:	89 d8                	mov    eax,ebx
c001460c:	83 c4 08             	add    esp,0x8
c001460f:	5b                   	pop    ebx
c0014610:	c3                   	ret    
c0014611:	90                   	nop

c0014612 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014612:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014616:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001461a:	c1 e0 04             	shl    eax,0x4
c001461d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014621:	8d 50 10             	lea    edx,[eax+0x10]
c0014624:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001462a:	74 08                	je     c0014634 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001462c:	83 c0 04             	add    eax,0x4
c001462f:	39 d0                	cmp    eax,edx
c0014631:	75 f1                	jne    c0014624 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014633:	c3                   	ret    
c0014634:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001463e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014648:	eb e2                	jmp    c001462c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001464a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001464a:	57                   	push   edi
c001464b:	31 c0                	xor    eax,eax
c001464d:	56                   	push   esi
c001464e:	53                   	push   ebx
c001464f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014653:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014657:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001465b:	89 da                	mov    edx,ebx
c001465d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014661:	c1 e2 04             	shl    edx,0x4
c0014664:	01 ca                	add    edx,ecx
c0014666:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001466e:	74 16                	je     c0014686 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014670:	40                   	inc    eax
c0014671:	83 f8 04             	cmp    eax,0x4
c0014674:	75 f0                	jne    c0014666 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014676:	c7 44 24 10 b8 a9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a9b8
c001467e:	5b                   	pop    ebx
c001467f:	5e                   	pop    esi
c0014680:	5f                   	pop    edi
c0014681:	e9 a3 5b 00 00       	jmp    c001a229 <Krnl::panic(char const*)>
c0014686:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014689:	8d 04 81             	lea    eax,[ecx+eax*4]
c001468c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014692:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014698:	5b                   	pop    ebx
c0014699:	5e                   	pop    esi
c001469a:	5f                   	pop    edi
c001469b:	c3                   	ret    

c001469c <doubleFault(regs*, void*)>:
c001469c:	55                   	push   ebp
c001469d:	89 e5                	mov    ebp,esp
c001469f:	83 ec 08             	sub    esp,0x8
c00146a2:	83 ec 0c             	sub    esp,0xc
c00146a5:	68 f3 a9 02 c0       	push   0xc002a9f3
c00146aa:	e8 7a 5b 00 00       	call   c001a229 <Krnl::panic(char const*)>
c00146af:	83 c4 10             	add    esp,0x10
c00146b2:	90                   	nop
c00146b3:	c9                   	leave  
c00146b4:	c3                   	ret    
c00146b5:	90                   	nop

c00146b6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00146b6:	56                   	push   esi
c00146b7:	53                   	push   ebx
c00146b8:	50                   	push   eax
c00146b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00146bd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00146c1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00146c6:	75 35                	jne    c00146fd <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00146c8:	8d 43 20             	lea    eax,[ebx+0x20]
c00146cb:	31 d2                	xor    edx,edx
c00146cd:	89 c1                	mov    ecx,eax
c00146cf:	c1 e1 04             	shl    ecx,0x4
c00146d2:	01 f1                	add    ecx,esi
c00146d4:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00146dc:	74 3e                	je     c001471c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00146de:	42                   	inc    edx
c00146df:	83 fa 04             	cmp    edx,0x4
c00146e2:	75 f0                	jne    c00146d4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00146e4:	83 ec 0c             	sub    esp,0xc
c00146e7:	68 38 aa 02 c0       	push   0xc002aa38
c00146ec:	e8 38 5b 00 00       	call   c001a229 <Krnl::panic(char const*)>
c00146f1:	83 c4 10             	add    esp,0x10
c00146f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00146f9:	5a                   	pop    edx
c00146fa:	5b                   	pop    ebx
c00146fb:	5e                   	pop    esi
c00146fc:	c3                   	ret    
c00146fd:	83 ec 0c             	sub    esp,0xc
c0014700:	56                   	push   esi
c0014701:	e8 ba fb ff ff       	call   c00142c0 <Device::getName()>
c0014706:	83 c4 10             	add    esp,0x10
c0014709:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001470c:	75 ba                	jne    c00146c8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001470e:	83 fb 0f             	cmp    ebx,0xf
c0014711:	7f 29                	jg     c001473c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014713:	0f b6 9b 00 d3 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2d00]
c001471a:	eb ac                	jmp    c00146c8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001471c:	8d 04 82             	lea    eax,[edx+eax*4]
c001471f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014723:	8d 04 86             	lea    eax,[esi+eax*4]
c0014726:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001472c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014730:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014736:	89 d8                	mov    eax,ebx
c0014738:	5a                   	pop    edx
c0014739:	5b                   	pop    ebx
c001473a:	5e                   	pop    esi
c001473b:	c3                   	ret    
c001473c:	83 ec 0c             	sub    esp,0xc
c001473f:	68 00 aa 02 c0       	push   0xc002aa00
c0014744:	e8 e0 5a 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0014749:	83 c4 10             	add    esp,0x10
c001474c:	e9 77 ff ff ff       	jmp    c00146c8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014751:	90                   	nop

c0014752 <InterruptController::clearAllHandlers(int, bool)>:
c0014752:	56                   	push   esi
c0014753:	53                   	push   ebx
c0014754:	52                   	push   edx
c0014755:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014759:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001475d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014762:	75 61                	jne    c00147c5 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014764:	8d 46 20             	lea    eax,[esi+0x20]
c0014767:	c1 e6 04             	shl    esi,0x4
c001476a:	c1 e0 04             	shl    eax,0x4
c001476d:	01 de                	add    esi,ebx
c001476f:	01 d8                	add    eax,ebx
c0014771:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001477b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014785:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001478f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014799:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00147a3:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00147ad:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00147b7:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00147c1:	58                   	pop    eax
c00147c2:	5b                   	pop    ebx
c00147c3:	5e                   	pop    esi
c00147c4:	c3                   	ret    
c00147c5:	83 ec 0c             	sub    esp,0xc
c00147c8:	53                   	push   ebx
c00147c9:	e8 f2 fa ff ff       	call   c00142c0 <Device::getName()>
c00147ce:	83 c4 10             	add    esp,0x10
c00147d1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00147d4:	75 8e                	jne    c0014764 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00147d6:	83 fe 0f             	cmp    esi,0xf
c00147d9:	7f 09                	jg     c00147e4 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00147db:	0f b6 b6 00 d3 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2d00]
c00147e2:	eb 80                	jmp    c0014764 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00147e4:	83 ec 0c             	sub    esp,0xc
c00147e7:	68 74 aa 02 c0       	push   0xc002aa74
c00147ec:	e8 38 5a 00 00       	call   c001a229 <Krnl::panic(char const*)>
c00147f1:	83 c4 10             	add    esp,0x10
c00147f4:	e9 6b ff ff ff       	jmp    c0014764 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00147f9:	90                   	nop

c00147fa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00147fa:	56                   	push   esi
c00147fb:	53                   	push   ebx
c00147fc:	52                   	push   edx
c00147fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014801:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014805:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001480a:	75 3a                	jne    c0014846 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001480c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014810:	8d 50 20             	lea    edx,[eax+0x20]
c0014813:	c1 e2 04             	shl    edx,0x4
c0014816:	8d 04 16             	lea    eax,[esi+edx*1]
c0014819:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001481d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014823:	74 0b                	je     c0014830 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014825:	83 c0 04             	add    eax,0x4
c0014828:	39 d0                	cmp    eax,edx
c001482a:	75 f1                	jne    c001481d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001482c:	58                   	pop    eax
c001482d:	5b                   	pop    ebx
c001482e:	5e                   	pop    esi
c001482f:	c3                   	ret    
c0014830:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001483a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014844:	eb df                	jmp    c0014825 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014846:	83 ec 0c             	sub    esp,0xc
c0014849:	56                   	push   esi
c001484a:	e8 71 fa ff ff       	call   c00142c0 <Device::getName()>
c001484f:	83 c4 10             	add    esp,0x10
c0014852:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014855:	75 b5                	jne    c001480c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014857:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001485c:	7f 11                	jg     c001486f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001485e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014862:	0f b6 80 00 d3 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2d00]
c0014869:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001486d:	eb 9d                	jmp    c001480c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001486f:	83 ec 0c             	sub    esp,0xc
c0014872:	68 74 aa 02 c0       	push   0xc002aa74
c0014877:	e8 ad 59 00 00       	call   c001a229 <Krnl::panic(char const*)>
c001487c:	83 c4 10             	add    esp,0x10
c001487f:	eb 8b                	jmp    c001480c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014881 <nmiHandler(regs*, void*)>:
c0014881:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0014886:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001488a:	e9 fd a6 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c001488f <int_handler>:
c001488f:	55                   	push   ebp
c0014890:	57                   	push   edi
c0014891:	56                   	push   esi
c0014892:	53                   	push   ebx
c0014893:	83 ec 0c             	sub    esp,0xc
c0014896:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001489a:	80 3d 04 0c 03 c0 00 	cmp    BYTE PTR ds:0xc0030c04,0x0
c00148a1:	74 0b                	je     c00148ae <int_handler+0x1f>
c00148a3:	fa                   	cli    
c00148a4:	f4                   	hlt    
c00148a5:	80 3d 04 0c 03 c0 00 	cmp    BYTE PTR ds:0xc0030c04,0x0
c00148ac:	75 f5                	jne    c00148a3 <int_handler+0x14>
c00148ae:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00148b3:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00148b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00148bc:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00148c2:	8d 43 e0             	lea    eax,[ebx-0x20]
c00148c5:	83 f8 17             	cmp    eax,0x17
c00148c8:	77 13                	ja     c00148dd <int_handler+0x4e>
c00148ca:	83 ec 08             	sub    esp,0x8
c00148cd:	8b 17                	mov    edx,DWORD PTR [edi]
c00148cf:	8d 43 e0             	lea    eax,[ebx-0x20]
c00148d2:	0f b6 c0             	movzx  eax,al
c00148d5:	50                   	push   eax
c00148d6:	57                   	push   edi
c00148d7:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00148da:	83 c4 10             	add    esp,0x10
c00148dd:	83 c3 15             	add    ebx,0x15
c00148e0:	c1 e3 04             	shl    ebx,0x4
c00148e3:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00148e7:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00148ee:	31 db                	xor    ebx,ebx
c00148f0:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00148f4:	85 c0                	test   eax,eax
c00148f6:	74 13                	je     c001490b <int_handler+0x7c>
c00148f8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00148fb:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00148ff:	74 1c                	je     c001491d <int_handler+0x8e>
c0014901:	83 ec 08             	sub    esp,0x8
c0014904:	52                   	push   edx
c0014905:	56                   	push   esi
c0014906:	ff d0                	call   eax
c0014908:	83 c4 10             	add    esp,0x10
c001490b:	43                   	inc    ebx
c001490c:	83 fb 04             	cmp    ebx,0x4
c001490f:	75 df                	jne    c00148f0 <int_handler+0x61>
c0014911:	83 c4 0c             	add    esp,0xc
c0014914:	31 c0                	xor    eax,eax
c0014916:	5b                   	pop    ebx
c0014917:	31 d2                	xor    edx,edx
c0014919:	5e                   	pop    esi
c001491a:	5f                   	pop    edi
c001491b:	5d                   	pop    ebp
c001491c:	c3                   	ret    
c001491d:	83 ec 08             	sub    esp,0x8
c0014920:	52                   	push   edx
c0014921:	56                   	push   esi
c0014922:	ff d0                	call   eax
c0014924:	83 c4 10             	add    esp,0x10
c0014927:	83 c4 0c             	add    esp,0xc
c001492a:	5b                   	pop    ebx
c001492b:	5e                   	pop    esi
c001492c:	5f                   	pop    edi
c001492d:	5d                   	pop    ebp
c001492e:	c3                   	ret    
c001492f:	90                   	nop

c0014930 <InterruptController::InterruptController(char const*)>:
c0014930:	83 ec 1c             	sub    esp,0x1c
c0014933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014937:	83 ec 08             	sub    esp,0x8
c001493a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001493e:	50                   	push   eax
c001493f:	e8 80 f8 ff ff       	call   c00141c4 <Device::Device(char const*)>
c0014944:	83 c4 10             	add    esp,0x10
c0014947:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c001494c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014950:	89 10                	mov    DWORD PTR [eax],edx
c0014952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014956:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014960:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014968:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014970:	7f 5e                	jg     c00149d0 <InterruptController::InterruptController(char const*)+0xa0>
c0014972:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001497a:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001497f:	7f 49                	jg     c00149ca <InterruptController::InterruptController(char const*)+0x9a>
c0014981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014985:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014989:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014990:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014994:	01 ca                	add    edx,ecx
c0014996:	83 c2 54             	add    edx,0x54
c0014999:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00149a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00149a9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00149b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00149b4:	01 ca                	add    edx,ecx
c00149b6:	81 c2 54 04 00 00    	add    edx,0x454
c00149bc:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00149c4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00149c8:	eb b0                	jmp    c001497a <InterruptController::InterruptController(char const*)+0x4a>
c00149ca:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00149ce:	eb 98                	jmp    c0014968 <InterruptController::InterruptController(char const*)+0x38>
c00149d0:	90                   	nop
c00149d1:	83 c4 1c             	add    esp,0x1c
c00149d4:	c3                   	ret    
c00149d5:	90                   	nop

c00149d6 <InterruptController::~InterruptController()>:
c00149d6:	83 ec 0c             	sub    esp,0xc
c00149d9:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c00149de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149e2:	89 10                	mov    DWORD PTR [eax],edx
c00149e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149e8:	83 ec 0c             	sub    esp,0xc
c00149eb:	50                   	push   eax
c00149ec:	e8 b5 f4 ff ff       	call   c0013ea6 <Device::~Device()>
c00149f1:	83 c4 10             	add    esp,0x10
c00149f4:	90                   	nop
c00149f5:	83 c4 0c             	add    esp,0xc
c00149f8:	c3                   	ret    
c00149f9:	90                   	nop

c00149fa <InterruptController::~InterruptController()>:
c00149fa:	83 ec 0c             	sub    esp,0xc
c00149fd:	83 ec 0c             	sub    esp,0xc
c0014a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a04:	e8 cd ff ff ff       	call   c00149d6 <InterruptController::~InterruptController()>
c0014a09:	83 c4 10             	add    esp,0x10
c0014a0c:	83 ec 08             	sub    esp,0x8
c0014a0f:	68 58 21 00 00       	push   0x2158
c0014a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a18:	e8 b1 e0 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0014a1d:	83 c4 10             	add    esp,0x10
c0014a20:	83 c4 0c             	add    esp,0xc
c0014a23:	c3                   	ret    

c0014a24 <displayDebugInfo(regs*)>:
c0014a24:	55                   	push   ebp
c0014a25:	57                   	push   edi
c0014a26:	56                   	push   esi
c0014a27:	53                   	push   ebx
c0014a28:	83 ec 24             	sub    esp,0x24
c0014a2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014a2f:	0f 20 c2             	mov    edx,cr0
c0014a32:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014a36:	0f 20 d7             	mov    edi,cr2
c0014a39:	0f 20 de             	mov    esi,cr3
c0014a3c:	0f 20 e5             	mov    ebp,cr4
c0014a3f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014a42:	68 ae aa 02 c0       	push   0xc002aaae
c0014a47:	e8 62 e1 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014a4c:	59                   	pop    ecx
c0014a4d:	58                   	pop    eax
c0014a4e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014a51:	68 b9 aa 02 c0       	push   0xc002aab9
c0014a56:	e8 53 e1 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014a5b:	58                   	pop    eax
c0014a5c:	5a                   	pop    edx
c0014a5d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014a60:	68 c4 aa 02 c0       	push   0xc002aac4
c0014a65:	e8 44 e1 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014a6a:	59                   	pop    ecx
c0014a6b:	58                   	pop    eax
c0014a6c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014a6f:	68 cf aa 02 c0       	push   0xc002aacf
c0014a74:	e8 35 e1 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014a79:	58                   	pop    eax
c0014a7a:	5a                   	pop    edx
c0014a7b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014a7e:	68 da aa 02 c0       	push   0xc002aada
c0014a83:	e8 26 e1 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014a88:	59                   	pop    ecx
c0014a89:	58                   	pop    eax
c0014a8a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014a8d:	68 e5 aa 02 c0       	push   0xc002aae5
c0014a92:	e8 17 e1 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014a97:	58                   	pop    eax
c0014a98:	5a                   	pop    edx
c0014a99:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014a9c:	68 f0 aa 02 c0       	push   0xc002aaf0
c0014aa1:	e8 08 e1 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014aa6:	59                   	pop    ecx
c0014aa7:	58                   	pop    eax
c0014aa8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014aab:	68 fb aa 02 c0       	push   0xc002aafb
c0014ab0:	e8 f9 e0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014ab5:	58                   	pop    eax
c0014ab6:	5a                   	pop    edx
c0014ab7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014aba:	68 06 ab 02 c0       	push   0xc002ab06
c0014abf:	e8 ea e0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014ac4:	59                   	pop    ecx
c0014ac5:	58                   	pop    eax
c0014ac6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ac9:	68 15 ab 02 c0       	push   0xc002ab15
c0014ace:	e8 db e0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014ad3:	58                   	pop    eax
c0014ad4:	5a                   	pop    edx
c0014ad5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ad8:	68 20 ab 02 c0       	push   0xc002ab20
c0014add:	e8 cc e0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014ae2:	59                   	pop    ecx
c0014ae3:	58                   	pop    eax
c0014ae4:	57                   	push   edi
c0014ae5:	68 2b ab 02 c0       	push   0xc002ab2b
c0014aea:	e8 bf e0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014aef:	58                   	pop    eax
c0014af0:	5a                   	pop    edx
c0014af1:	56                   	push   esi
c0014af2:	68 36 ab 02 c0       	push   0xc002ab36
c0014af7:	e8 b2 e0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014afc:	59                   	pop    ecx
c0014afd:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014b02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b08:	e8 c6 c1 ff ff       	call   c0010cd3 <setActiveTerminal(VgaText*)>
c0014b0d:	58                   	pop    eax
c0014b0e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014b11:	5a                   	pop    edx
c0014b12:	c1 e0 05             	shl    eax,0x5
c0014b15:	05 60 d0 02 c0       	add    eax,0xc002d060
c0014b1a:	50                   	push   eax
c0014b1b:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014b20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b26:	e8 c7 c5 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014b2b:	59                   	pop    ecx
c0014b2c:	58                   	pop    eax
c0014b2d:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014b32:	68 41 ab 02 c0       	push   0xc002ab41
c0014b37:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b3d:	e8 b0 c5 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014b42:	58                   	pop    eax
c0014b43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b48:	5a                   	pop    edx
c0014b49:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b4c:	83 c0 0c             	add    eax,0xc
c0014b4f:	50                   	push   eax
c0014b50:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014b55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5b:	e8 92 c5 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014b60:	59                   	pop    ecx
c0014b61:	58                   	pop    eax
c0014b62:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014b67:	68 4a ab 02 c0       	push   0xc002ab4a
c0014b6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b72:	e8 7b c5 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014b77:	58                   	pop    eax
c0014b78:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014b7d:	5a                   	pop    edx
c0014b7e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b81:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b87:	e8 8c c5 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014b8c:	59                   	pop    ecx
c0014b8d:	58                   	pop    eax
c0014b8e:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014b93:	68 52 ab 02 c0       	push   0xc002ab52
c0014b98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b9e:	e8 4f c5 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014ba3:	58                   	pop    eax
c0014ba4:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014ba9:	5a                   	pop    edx
c0014baa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014bad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bb3:	e8 60 c5 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014bb8:	59                   	pop    ecx
c0014bb9:	58                   	pop    eax
c0014bba:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014bbf:	68 5a ab 02 c0       	push   0xc002ab5a
c0014bc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bca:	e8 23 c5 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014bcf:	58                   	pop    eax
c0014bd0:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014bd5:	5a                   	pop    edx
c0014bd6:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014bd9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bdf:	e8 34 c5 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014be4:	59                   	pop    ecx
c0014be5:	58                   	pop    eax
c0014be6:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014beb:	68 62 ab 02 c0       	push   0xc002ab62
c0014bf0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bf6:	e8 f7 c4 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014bfb:	58                   	pop    eax
c0014bfc:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014c01:	5a                   	pop    edx
c0014c02:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014c05:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c0b:	e8 08 c5 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014c10:	59                   	pop    ecx
c0014c11:	58                   	pop    eax
c0014c12:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014c17:	68 6a ab 02 c0       	push   0xc002ab6a
c0014c1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c22:	e8 cb c4 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014c27:	58                   	pop    eax
c0014c28:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014c2d:	5a                   	pop    edx
c0014c2e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014c31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c37:	e8 dc c4 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014c3c:	59                   	pop    ecx
c0014c3d:	58                   	pop    eax
c0014c3e:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014c43:	68 72 ab 02 c0       	push   0xc002ab72
c0014c48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c4e:	e8 9f c4 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014c53:	58                   	pop    eax
c0014c54:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014c59:	5a                   	pop    edx
c0014c5a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014c5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c63:	e8 b0 c4 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014c68:	59                   	pop    ecx
c0014c69:	58                   	pop    eax
c0014c6a:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014c6f:	68 7a ab 02 c0       	push   0xc002ab7a
c0014c74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c7a:	e8 73 c4 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014c7f:	58                   	pop    eax
c0014c80:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014c85:	5a                   	pop    edx
c0014c86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014c8a:	52                   	push   edx
c0014c8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c91:	e8 82 c4 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014c96:	59                   	pop    ecx
c0014c97:	58                   	pop    eax
c0014c98:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014c9d:	68 83 ab 02 c0       	push   0xc002ab83
c0014ca2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ca8:	e8 45 c4 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014cad:	58                   	pop    eax
c0014cae:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014cb3:	5a                   	pop    edx
c0014cb4:	57                   	push   edi
c0014cb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cbb:	e8 58 c4 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014cc0:	59                   	pop    ecx
c0014cc1:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014cc6:	5f                   	pop    edi
c0014cc7:	68 8b ab 02 c0       	push   0xc002ab8b
c0014ccc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cd2:	e8 1b c4 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014cd7:	58                   	pop    eax
c0014cd8:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014cdd:	5a                   	pop    edx
c0014cde:	56                   	push   esi
c0014cdf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce5:	e8 2e c4 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014cea:	59                   	pop    ecx
c0014ceb:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014cf0:	5e                   	pop    esi
c0014cf1:	68 93 ab 02 c0       	push   0xc002ab93
c0014cf6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cfc:	e8 f1 c3 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014d01:	5f                   	pop    edi
c0014d02:	58                   	pop    eax
c0014d03:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014d08:	55                   	push   ebp
c0014d09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d0f:	e8 04 c4 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014d14:	58                   	pop    eax
c0014d15:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014d1a:	5a                   	pop    edx
c0014d1b:	68 9b ab 02 c0       	push   0xc002ab9b
c0014d20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d26:	e8 c7 c3 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014d2b:	0f 21 c0             	mov    eax,db0
c0014d2e:	59                   	pop    ecx
c0014d2f:	5e                   	pop    esi
c0014d30:	50                   	push   eax
c0014d31:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014d36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d3c:	e8 d7 c3 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014d41:	5f                   	pop    edi
c0014d42:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014d47:	5d                   	pop    ebp
c0014d48:	68 a4 ab 02 c0       	push   0xc002aba4
c0014d4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d53:	e8 9a c3 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014d58:	0f 21 c8             	mov    eax,db1
c0014d5b:	5a                   	pop    edx
c0014d5c:	59                   	pop    ecx
c0014d5d:	50                   	push   eax
c0014d5e:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014d63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d69:	e8 aa c3 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014d6e:	5e                   	pop    esi
c0014d6f:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014d74:	5f                   	pop    edi
c0014d75:	68 ac ab 02 c0       	push   0xc002abac
c0014d7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d80:	e8 6d c3 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014d85:	0f 21 d0             	mov    eax,db2
c0014d88:	5d                   	pop    ebp
c0014d89:	5a                   	pop    edx
c0014d8a:	50                   	push   eax
c0014d8b:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014d90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d96:	e8 7d c3 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014d9b:	59                   	pop    ecx
c0014d9c:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014da1:	5e                   	pop    esi
c0014da2:	68 b4 ab 02 c0       	push   0xc002abb4
c0014da7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dad:	e8 40 c3 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014db2:	0f 21 d8             	mov    eax,db3
c0014db5:	5f                   	pop    edi
c0014db6:	5d                   	pop    ebp
c0014db7:	50                   	push   eax
c0014db8:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014dbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dc3:	e8 50 c3 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014dc8:	58                   	pop    eax
c0014dc9:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014dce:	5a                   	pop    edx
c0014dcf:	68 bc ab 02 c0       	push   0xc002abbc
c0014dd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dda:	e8 13 c3 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014ddf:	0f 21 f0             	mov    eax,db6
c0014de2:	59                   	pop    ecx
c0014de3:	5e                   	pop    esi
c0014de4:	50                   	push   eax
c0014de5:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014dea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014df0:	e8 23 c3 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014df5:	5f                   	pop    edi
c0014df6:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014dfb:	5d                   	pop    ebp
c0014dfc:	68 c4 ab 02 c0       	push   0xc002abc4
c0014e01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e07:	e8 e6 c2 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014e0c:	0f 21 f8             	mov    eax,db7
c0014e0f:	5a                   	pop    edx
c0014e10:	59                   	pop    ecx
c0014e11:	50                   	push   eax
c0014e12:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014e17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e1d:	e8 f6 c2 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014e22:	5e                   	pop    esi
c0014e23:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e26:	e8 2a 85 00 00       	call   c001d355 <Thr::getDriverNameFromAddress(unsigned long)>
c0014e2b:	83 c4 10             	add    esp,0x10
c0014e2e:	85 c0                	test   eax,eax
c0014e30:	74 7d                	je     c0014eaf <displayDebugInfo(regs*)+0x48b>
c0014e32:	89 c6                	mov    esi,eax
c0014e34:	50                   	push   eax
c0014e35:	50                   	push   eax
c0014e36:	56                   	push   esi
c0014e37:	68 cc ab 02 c0       	push   0xc002abcc
c0014e3c:	e8 6d dd ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014e41:	5a                   	pop    edx
c0014e42:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014e47:	59                   	pop    ecx
c0014e48:	68 da ab 02 c0       	push   0xc002abda
c0014e4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e53:	e8 9a c2 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014e58:	5f                   	pop    edi
c0014e59:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014e5e:	5d                   	pop    ebp
c0014e5f:	56                   	push   esi
c0014e60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e66:	e8 87 c2 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014e6b:	58                   	pop    eax
c0014e6c:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014e71:	5a                   	pop    edx
c0014e72:	68 e6 ab 02 c0       	push   0xc002abe6
c0014e77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e7d:	e8 70 c2 ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c0014e82:	59                   	pop    ecx
c0014e83:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0014e88:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014e8e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e91:	e8 f6 84 00 00       	call   c001d38c <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014e96:	5b                   	pop    ebx
c0014e97:	5d                   	pop    ebp
c0014e98:	50                   	push   eax
c0014e99:	57                   	push   edi
c0014e9a:	e8 79 c2 ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c0014e9f:	58                   	pop    eax
c0014ea0:	5a                   	pop    edx
c0014ea1:	56                   	push   esi
c0014ea2:	68 f2 ab 02 c0       	push   0xc002abf2
c0014ea7:	e8 02 dd ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014eac:	83 c4 10             	add    esp,0x10
c0014eaf:	fa                   	cli    
c0014eb0:	f4                   	hlt    
c0014eb1:	eb fe                	jmp    c0014eb1 <displayDebugInfo(regs*)+0x48d>

c0014eb3 <x87EmulHandler(regs*, void*)>:
c0014eb3:	53                   	push   ebx
c0014eb4:	83 ec 14             	sub    esp,0x14
c0014eb7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014ebb:	53                   	push   ebx
c0014ebc:	e8 21 a8 00 00       	call   c001f6e2 <Vm::x87Handler(regs*)>
c0014ec1:	83 c4 10             	add    esp,0x10
c0014ec4:	84 c0                	test   al,al
c0014ec6:	74 05                	je     c0014ecd <x87EmulHandler(regs*, void*)+0x1a>
c0014ec8:	83 c4 08             	add    esp,0x8
c0014ecb:	5b                   	pop    ebx
c0014ecc:	c3                   	ret    
c0014ecd:	83 ec 0c             	sub    esp,0xc
c0014ed0:	68 02 ac 02 c0       	push   0xc002ac02
c0014ed5:	e8 d4 dc ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014eda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014edd:	e8 42 fb ff ff       	call   c0014a24 <displayDebugInfo(regs*)>

c0014ee2 <gpFault(regs*, void*)>:
c0014ee2:	53                   	push   ebx
c0014ee3:	83 ec 14             	sub    esp,0x14
c0014ee6:	c7 05 50 e2 02 c0 5f ea 01 c0 	mov    DWORD PTR ds:0xc002e250,0xc001ea5f
c0014ef0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014ef4:	53                   	push   ebx
c0014ef5:	e8 65 9b 00 00       	call   c001ea5f <Vm::faultHandler(regs*)>
c0014efa:	83 c4 10             	add    esp,0x10
c0014efd:	84 c0                	test   al,al
c0014eff:	74 05                	je     c0014f06 <gpFault(regs*, void*)+0x24>
c0014f01:	83 c4 08             	add    esp,0x8
c0014f04:	5b                   	pop    ebx
c0014f05:	c3                   	ret    
c0014f06:	83 ec 0c             	sub    esp,0xc
c0014f09:	68 18 ac 02 c0       	push   0xc002ac18
c0014f0e:	e8 9b dc ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014f13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f16:	e8 09 fb ff ff       	call   c0014a24 <displayDebugInfo(regs*)>

c0014f1b <pgFault(regs*, void*)>:
c0014f1b:	83 ec 18             	sub    esp,0x18
c0014f1e:	68 33 ac 02 c0       	push   0xc002ac33
c0014f23:	e8 86 dc ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014f28:	58                   	pop    eax
c0014f29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f2d:	e8 f2 fa ff ff       	call   c0014a24 <displayDebugInfo(regs*)>

c0014f32 <otherISRHandler(regs*, void*)>:
c0014f32:	53                   	push   ebx
c0014f33:	83 ec 0c             	sub    esp,0xc
c0014f36:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014f3a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f3d:	50                   	push   eax
c0014f3e:	50                   	push   eax
c0014f3f:	68 40 ac 02 c0       	push   0xc002ac40
c0014f44:	e8 65 dc ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014f49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f4c:	e8 d3 fa ff ff       	call   c0014a24 <displayDebugInfo(regs*)>

c0014f51 <opcodeFault(regs*, void*)>:
c0014f51:	55                   	push   ebp
c0014f52:	89 e5                	mov    ebp,esp
c0014f54:	56                   	push   esi
c0014f55:	53                   	push   ebx
c0014f56:	83 ec 40             	sub    esp,0x40
c0014f59:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0014f5e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f64:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014f6a:	84 c0                	test   al,al
c0014f6c:	74 24                	je     c0014f92 <opcodeFault(regs*, void*)+0x41>
c0014f6e:	83 ec 0c             	sub    esp,0xc
c0014f71:	68 60 ac 02 c0       	push   0xc002ac60
c0014f76:	e8 33 dc ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0014f7b:	83 c4 10             	add    esp,0x10
c0014f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f81:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f84:	8d 50 19             	lea    edx,[eax+0x19]
c0014f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f8d:	e9 be 05 00 00       	jmp    c0015550 <opcodeFault(regs*, void*)+0x5ff>
c0014f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f95:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f98:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014f9b:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014f9f:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fa9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014fac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014faf:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb1:	3c f0                	cmp    al,0xf0
c0014fb3:	75 17                	jne    c0014fcc <opcodeFault(regs*, void*)+0x7b>
c0014fb5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fbe:	8d 50 01             	lea    edx,[eax+0x1]
c0014fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fc7:	e9 da 00 00 00       	jmp    c00150a6 <opcodeFault(regs*, void*)+0x155>
c0014fcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fcf:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd1:	3c f2                	cmp    al,0xf2
c0014fd3:	74 09                	je     c0014fde <opcodeFault(regs*, void*)+0x8d>
c0014fd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fd8:	8a 00                	mov    al,BYTE PTR [eax]
c0014fda:	3c f3                	cmp    al,0xf3
c0014fdc:	75 1b                	jne    c0014ff9 <opcodeFault(regs*, void*)+0xa8>
c0014fde:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014fe2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014feb:	8d 50 01             	lea    edx,[eax+0x1]
c0014fee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ff4:	e9 ad 00 00 00       	jmp    c00150a6 <opcodeFault(regs*, void*)+0x155>
c0014ff9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ffc:	8a 00                	mov    al,BYTE PTR [eax]
c0014ffe:	3c 66                	cmp    al,0x66
c0015000:	75 1f                	jne    c0015021 <opcodeFault(regs*, void*)+0xd0>
c0015002:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015006:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001500a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001500d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015010:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015013:	8d 50 01             	lea    edx,[eax+0x1]
c0015016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015019:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001501c:	e9 85 00 00 00       	jmp    c00150a6 <opcodeFault(regs*, void*)+0x155>
c0015021:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015024:	8a 00                	mov    al,BYTE PTR [eax]
c0015026:	3c 67                	cmp    al,0x67
c0015028:	75 18                	jne    c0015042 <opcodeFault(regs*, void*)+0xf1>
c001502a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001502e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015034:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015037:	8d 50 01             	lea    edx,[eax+0x1]
c001503a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015040:	eb 64                	jmp    c00150a6 <opcodeFault(regs*, void*)+0x155>
c0015042:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015045:	8a 00                	mov    al,BYTE PTR [eax]
c0015047:	3c 2e                	cmp    al,0x2e
c0015049:	74 09                	je     c0015054 <opcodeFault(regs*, void*)+0x103>
c001504b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001504e:	8a 00                	mov    al,BYTE PTR [eax]
c0015050:	3c 3e                	cmp    al,0x3e
c0015052:	75 18                	jne    c001506c <opcodeFault(regs*, void*)+0x11b>
c0015054:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015058:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001505b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015061:	8d 50 01             	lea    edx,[eax+0x1]
c0015064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015067:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001506a:	eb 3a                	jmp    c00150a6 <opcodeFault(regs*, void*)+0x155>
c001506c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001506f:	8a 00                	mov    al,BYTE PTR [eax]
c0015071:	3c 36                	cmp    al,0x36
c0015073:	74 1b                	je     c0015090 <opcodeFault(regs*, void*)+0x13f>
c0015075:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015078:	8a 00                	mov    al,BYTE PTR [eax]
c001507a:	3c 26                	cmp    al,0x26
c001507c:	74 12                	je     c0015090 <opcodeFault(regs*, void*)+0x13f>
c001507e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015081:	8a 00                	mov    al,BYTE PTR [eax]
c0015083:	3c 64                	cmp    al,0x64
c0015085:	74 09                	je     c0015090 <opcodeFault(regs*, void*)+0x13f>
c0015087:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001508a:	8a 00                	mov    al,BYTE PTR [eax]
c001508c:	3c 65                	cmp    al,0x65
c001508e:	75 16                	jne    c00150a6 <opcodeFault(regs*, void*)+0x155>
c0015090:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015094:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001509d:	8d 50 01             	lea    edx,[eax+0x1]
c00150a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150a9:	8a 00                	mov    al,BYTE PTR [eax]
c00150ab:	3c 0f                	cmp    al,0xf
c00150ad:	0f 85 ad 00 00 00    	jne    c0015160 <opcodeFault(regs*, void*)+0x20f>
c00150b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150b6:	40                   	inc    eax
c00150b7:	8a 00                	mov    al,BYTE PTR [eax]
c00150b9:	3c c2                	cmp    al,0xc2
c00150bb:	74 0e                	je     c00150cb <opcodeFault(regs*, void*)+0x17a>
c00150bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150c0:	40                   	inc    eax
c00150c1:	8a 00                	mov    al,BYTE PTR [eax]
c00150c3:	3c c3                	cmp    al,0xc3
c00150c5:	0f 85 95 00 00 00    	jne    c0015160 <opcodeFault(regs*, void*)+0x20f>
c00150cb:	83 ec 0c             	sub    esp,0xc
c00150ce:	68 83 ac 02 c0       	push   0xc002ac83
c00150d3:	e8 d6 da ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00150d8:	83 c4 10             	add    esp,0x10
c00150db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150e1:	8d 50 01             	lea    edx,[eax+0x1]
c00150e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150ea:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00150ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f0:	8a 00                	mov    al,BYTE PTR [eax]
c00150f2:	8d 50 fe             	lea    edx,[eax-0x2]
c00150f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f8:	88 10                	mov    BYTE PTR [eax],dl
c00150fa:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00150fd:	50                   	push   eax
c00150fe:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015101:	50                   	push   eax
c0015102:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015105:	50                   	push   eax
c0015106:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015109:	e8 e2 47 00 00       	call   c00198f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001510e:	83 c4 10             	add    esp,0x10
c0015111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015114:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015117:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001511a:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001511d:	01 d0                	add    eax,edx
c001511f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015125:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015128:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001512b:	48                   	dec    eax
c001512c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001512f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015132:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015135:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513b:	83 ec 04             	sub    esp,0x4
c001513e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015141:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015144:	50                   	push   eax
c0015145:	e8 6a b0 fe ff       	call   c00001b4 <voodooXADD>
c001514a:	83 c4 10             	add    esp,0x10
c001514d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015150:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015153:	01 c2                	add    edx,eax
c0015155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015158:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001515b:	e9 f0 03 00 00       	jmp    c0015550 <opcodeFault(regs*, void*)+0x5ff>
c0015160:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015163:	8a 00                	mov    al,BYTE PTR [eax]
c0015165:	3c 0f                	cmp    al,0xf
c0015167:	0f 85 8b 01 00 00    	jne    c00152f8 <opcodeFault(regs*, void*)+0x3a7>
c001516d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015170:	40                   	inc    eax
c0015171:	8a 00                	mov    al,BYTE PTR [eax]
c0015173:	3c c7                	cmp    al,0xc7
c0015175:	0f 86 7d 01 00 00    	jbe    c00152f8 <opcodeFault(regs*, void*)+0x3a7>
c001517b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001517e:	40                   	inc    eax
c001517f:	8a 00                	mov    al,BYTE PTR [eax]
c0015181:	3c cf                	cmp    al,0xcf
c0015183:	0f 87 6f 01 00 00    	ja     c00152f8 <opcodeFault(regs*, void*)+0x3a7>
c0015189:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001518c:	40                   	inc    eax
c001518d:	8a 00                	mov    al,BYTE PTR [eax]
c001518f:	83 c0 38             	add    eax,0x38
c0015192:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015195:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015199:	75 0b                	jne    c00151a6 <opcodeFault(regs*, void*)+0x255>
c001519b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00151a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151a4:	eb 75                	jmp    c001521b <opcodeFault(regs*, void*)+0x2ca>
c00151a6:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00151aa:	75 0b                	jne    c00151b7 <opcodeFault(regs*, void*)+0x266>
c00151ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151af:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00151b2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151b5:	eb 64                	jmp    c001521b <opcodeFault(regs*, void*)+0x2ca>
c00151b7:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00151bb:	75 0b                	jne    c00151c8 <opcodeFault(regs*, void*)+0x277>
c00151bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00151c3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151c6:	eb 53                	jmp    c001521b <opcodeFault(regs*, void*)+0x2ca>
c00151c8:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00151cc:	75 0b                	jne    c00151d9 <opcodeFault(regs*, void*)+0x288>
c00151ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00151d4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151d7:	eb 42                	jmp    c001521b <opcodeFault(regs*, void*)+0x2ca>
c00151d9:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00151dd:	75 0b                	jne    c00151ea <opcodeFault(regs*, void*)+0x299>
c00151df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e2:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00151e5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151e8:	eb 31                	jmp    c001521b <opcodeFault(regs*, void*)+0x2ca>
c00151ea:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00151ee:	75 0b                	jne    c00151fb <opcodeFault(regs*, void*)+0x2aa>
c00151f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00151f6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151f9:	eb 20                	jmp    c001521b <opcodeFault(regs*, void*)+0x2ca>
c00151fb:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00151ff:	75 0b                	jne    c001520c <opcodeFault(regs*, void*)+0x2bb>
c0015201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015204:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015207:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001520a:	eb 0f                	jmp    c001521b <opcodeFault(regs*, void*)+0x2ca>
c001520c:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015210:	75 09                	jne    c001521b <opcodeFault(regs*, void*)+0x2ca>
c0015212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015215:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015218:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001521b:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001521f:	74 10                	je     c0015231 <opcodeFault(regs*, void*)+0x2e0>
c0015221:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015228:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001522f:	eb 2d                	jmp    c001525e <opcodeFault(regs*, void*)+0x30d>
c0015231:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015234:	c1 e0 18             	shl    eax,0x18
c0015237:	89 c2                	mov    edx,eax
c0015239:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001523c:	c1 e0 08             	shl    eax,0x8
c001523f:	25 00 00 ff 00       	and    eax,0xff0000
c0015244:	09 c2                	or     edx,eax
c0015246:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015249:	c1 e8 08             	shr    eax,0x8
c001524c:	25 00 ff 00 00       	and    eax,0xff00
c0015251:	09 c2                	or     edx,eax
c0015253:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015256:	c1 e8 18             	shr    eax,0x18
c0015259:	09 d0                	or     eax,edx
c001525b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001525e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015262:	75 0b                	jne    c001526f <opcodeFault(regs*, void*)+0x31e>
c0015264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015267:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001526a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001526d:	eb 75                	jmp    c00152e4 <opcodeFault(regs*, void*)+0x393>
c001526f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015273:	75 0b                	jne    c0015280 <opcodeFault(regs*, void*)+0x32f>
c0015275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015278:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001527b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001527e:	eb 64                	jmp    c00152e4 <opcodeFault(regs*, void*)+0x393>
c0015280:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015284:	75 0b                	jne    c0015291 <opcodeFault(regs*, void*)+0x340>
c0015286:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015289:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001528c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001528f:	eb 53                	jmp    c00152e4 <opcodeFault(regs*, void*)+0x393>
c0015291:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015295:	75 0b                	jne    c00152a2 <opcodeFault(regs*, void*)+0x351>
c0015297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001529d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00152a0:	eb 42                	jmp    c00152e4 <opcodeFault(regs*, void*)+0x393>
c00152a2:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00152a6:	75 0b                	jne    c00152b3 <opcodeFault(regs*, void*)+0x362>
c00152a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152ae:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00152b1:	eb 31                	jmp    c00152e4 <opcodeFault(regs*, void*)+0x393>
c00152b3:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00152b7:	75 0b                	jne    c00152c4 <opcodeFault(regs*, void*)+0x373>
c00152b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152bc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152bf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00152c2:	eb 20                	jmp    c00152e4 <opcodeFault(regs*, void*)+0x393>
c00152c4:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00152c8:	75 0b                	jne    c00152d5 <opcodeFault(regs*, void*)+0x384>
c00152ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152d0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00152d3:	eb 0f                	jmp    c00152e4 <opcodeFault(regs*, void*)+0x393>
c00152d5:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00152d9:	75 09                	jne    c00152e4 <opcodeFault(regs*, void*)+0x393>
c00152db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152de:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152e1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00152e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152ea:	8d 50 02             	lea    edx,[eax+0x2]
c00152ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152f3:	e9 58 02 00 00       	jmp    c0015550 <opcodeFault(regs*, void*)+0x5ff>
c00152f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fb:	8a 00                	mov    al,BYTE PTR [eax]
c00152fd:	3c 0f                	cmp    al,0xf
c00152ff:	0f 85 76 01 00 00    	jne    c001547b <opcodeFault(regs*, void*)+0x52a>
c0015305:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015308:	40                   	inc    eax
c0015309:	8a 00                	mov    al,BYTE PTR [eax]
c001530b:	3c c7                	cmp    al,0xc7
c001530d:	0f 85 68 01 00 00    	jne    c001547b <opcodeFault(regs*, void*)+0x52a>
c0015313:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015316:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015319:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001531c:	8d 50 01             	lea    edx,[eax+0x1]
c001531f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015322:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015325:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015328:	50                   	push   eax
c0015329:	8d 45 bb             	lea    eax,[ebp-0x45]
c001532c:	50                   	push   eax
c001532d:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015330:	50                   	push   eax
c0015331:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015334:	e8 b7 45 00 00       	call   c00198f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001533f:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015342:	83 f0 01             	xor    eax,0x1
c0015345:	84 c0                	test   al,al
c0015347:	0f 84 2e 01 00 00    	je     c001547b <opcodeFault(regs*, void*)+0x52a>
c001534d:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015350:	3c 01                	cmp    al,0x1
c0015352:	0f 85 23 01 00 00    	jne    c001547b <opcodeFault(regs*, void*)+0x52a>
c0015358:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001535b:	83 f0 01             	xor    eax,0x1
c001535e:	84 c0                	test   al,al
c0015360:	0f 84 15 01 00 00    	je     c001547b <opcodeFault(regs*, void*)+0x52a>
c0015366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015369:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001536c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001536f:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015376:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015379:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001537c:	89 c2                	mov    edx,eax
c001537e:	b8 00 00 00 00       	mov    eax,0x0
c0015383:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015386:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001538f:	ba 00 00 00 00       	mov    edx,0x0
c0015394:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015397:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001539a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00153a0:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00153a3:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00153aa:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00153ad:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00153b0:	89 c2                	mov    edx,eax
c00153b2:	b8 00 00 00 00       	mov    eax,0x0
c00153b7:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00153ba:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00153bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00153c3:	ba 00 00 00 00       	mov    edx,0x0
c00153c8:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00153cb:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00153ce:	e8 7b 86 00 00       	call   c001da4e <lockScheduler()>
c00153d3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00153d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00153d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153db:	89 c1                	mov    ecx,eax
c00153dd:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00153e0:	89 cb                	mov    ebx,ecx
c00153e2:	89 d0                	mov    eax,edx
c00153e4:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00153e7:	89 c6                	mov    esi,eax
c00153e9:	89 f0                	mov    eax,esi
c00153eb:	09 d8                	or     eax,ebx
c00153ed:	85 c0                	test   eax,eax
c00153ef:	75 21                	jne    c0015412 <opcodeFault(regs*, void*)+0x4c1>
c00153f1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00153f4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00153f7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00153fa:	89 01                	mov    DWORD PTR [ecx],eax
c00153fc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00153ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015402:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015405:	83 c8 40             	or     eax,0x40
c0015408:	89 c2                	mov    edx,eax
c001540a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015410:	eb 3e                	jmp    c0015450 <opcodeFault(regs*, void*)+0x4ff>
c0015412:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015415:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015418:	8b 00                	mov    eax,DWORD PTR [eax]
c001541a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001541d:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015420:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015426:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015429:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001542c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001542f:	89 d0                	mov    eax,edx
c0015431:	31 d2                	xor    edx,edx
c0015433:	89 c3                	mov    ebx,eax
c0015435:	89 d6                	mov    esi,edx
c0015437:	89 da                	mov    edx,ebx
c0015439:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001543f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015442:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015445:	83 e0 bf             	and    eax,0xffffffbf
c0015448:	89 c2                	mov    edx,eax
c001544a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015450:	e8 fb 85 00 00       	call   c001da50 <unlockScheduler()>
c0015455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015458:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001545b:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001545e:	01 c2                	add    edx,eax
c0015460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015463:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015466:	83 ec 0c             	sub    esp,0xc
c0015469:	68 92 ac 02 c0       	push   0xc002ac92
c001546e:	e8 3b d7 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0015473:	83 c4 10             	add    esp,0x10
c0015476:	e9 d5 00 00 00       	jmp    c0015550 <opcodeFault(regs*, void*)+0x5ff>
c001547b:	83 ec 0c             	sub    esp,0xc
c001547e:	68 a5 ac 02 c0       	push   0xc002aca5
c0015483:	e8 26 d7 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0015488:	83 c4 10             	add    esp,0x10
c001548b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015494:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015497:	c1 e0 04             	shl    eax,0x4
c001549a:	01 d0                	add    eax,edx
c001549c:	83 c0 03             	add    eax,0x3
c001549f:	8a 00                	mov    al,BYTE PTR [eax]
c00154a1:	0f b6 d8             	movzx  ebx,al
c00154a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a7:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00154aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154b0:	c1 e0 04             	shl    eax,0x4
c00154b3:	01 d0                	add    eax,edx
c00154b5:	83 c0 02             	add    eax,0x2
c00154b8:	8a 00                	mov    al,BYTE PTR [eax]
c00154ba:	0f b6 c8             	movzx  ecx,al
c00154bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00154c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154c9:	c1 e0 04             	shl    eax,0x4
c00154cc:	01 d0                	add    eax,edx
c00154ce:	40                   	inc    eax
c00154cf:	8a 00                	mov    al,BYTE PTR [eax]
c00154d1:	0f b6 d0             	movzx  edx,al
c00154d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d7:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00154da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154e0:	c1 e0 04             	shl    eax,0x4
c00154e3:	01 f0                	add    eax,esi
c00154e5:	8a 00                	mov    al,BYTE PTR [eax]
c00154e7:	0f b6 c0             	movzx  eax,al
c00154ea:	83 ec 0c             	sub    esp,0xc
c00154ed:	53                   	push   ebx
c00154ee:	51                   	push   ecx
c00154ef:	52                   	push   edx
c00154f0:	50                   	push   eax
c00154f1:	68 b8 ac 02 c0       	push   0xc002acb8
c00154f6:	e8 b3 d6 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00154fb:	83 c4 20             	add    esp,0x20
c00154fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015501:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015504:	83 c0 03             	add    eax,0x3
c0015507:	8a 00                	mov    al,BYTE PTR [eax]
c0015509:	0f b6 d8             	movzx  ebx,al
c001550c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015512:	83 c0 02             	add    eax,0x2
c0015515:	8a 00                	mov    al,BYTE PTR [eax]
c0015517:	0f b6 c8             	movzx  ecx,al
c001551a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015520:	40                   	inc    eax
c0015521:	8a 00                	mov    al,BYTE PTR [eax]
c0015523:	0f b6 d0             	movzx  edx,al
c0015526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015529:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001552c:	8a 00                	mov    al,BYTE PTR [eax]
c001552e:	0f b6 c0             	movzx  eax,al
c0015531:	83 ec 0c             	sub    esp,0xc
c0015534:	53                   	push   ebx
c0015535:	51                   	push   ecx
c0015536:	52                   	push   edx
c0015537:	50                   	push   eax
c0015538:	68 e0 ac 02 c0       	push   0xc002ace0
c001553d:	e8 6c d6 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0015542:	83 c4 20             	add    esp,0x20
c0015545:	83 ec 0c             	sub    esp,0xc
c0015548:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001554b:	e8 d4 f4 ff ff       	call   c0014a24 <displayDebugInfo(regs*)>
c0015550:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015553:	5b                   	pop    ebx
c0015554:	5e                   	pop    esi
c0015555:	5d                   	pop    ebp
c0015556:	c3                   	ret    

c0015557 <displayProgramFault(char const*)>:
c0015557:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001555c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001555f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015565:	85 c0                	test   eax,eax
c0015567:	74 15                	je     c001557e <displayProgramFault(char const*)+0x27>
c0015569:	83 ec 0c             	sub    esp,0xc
c001556c:	6a 04                	push   0x4
c001556e:	6a 0f                	push   0xf
c0015570:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015574:	50                   	push   eax
c0015575:	e8 3a b8 ff ff       	call   c0010db4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001557a:	83 c4 1c             	add    esp,0x1c
c001557d:	c3                   	ret    
c001557e:	c3                   	ret    

c001557f <setupInterruptController()>:
c001557f:	55                   	push   ebp
c0015580:	89 e5                	mov    ebp,esp
c0015582:	53                   	push   ebx
c0015583:	83 ec 24             	sub    esp,0x24
c0015586:	b8 00 00 00 00       	mov    eax,0x0
c001558b:	85 c0                	test   eax,eax
c001558d:	0f 95 c0             	setne  al
c0015590:	84 c0                	test   al,al
c0015592:	74 5b                	je     c00155ef <setupInterruptController()+0x70>
c0015594:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001559b:	83 ec 0c             	sub    esp,0xc
c001559e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00155a1:	e8 9a a2 ff ff       	call   c000f840 <malloc>
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	89 c3                	mov    ebx,eax
c00155ab:	83 ec 0c             	sub    esp,0xc
c00155ae:	53                   	push   ebx
c00155af:	e8 f2 ff 00 00       	call   c00255a6 <APIC::APIC()>
c00155b4:	83 c4 10             	add    esp,0x10
c00155b7:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00155ba:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00155bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c2:	83 c0 08             	add    eax,0x8
c00155c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c7:	6a 00                	push   0x0
c00155c9:	6a 00                	push   0x0
c00155cb:	6a 00                	push   0x0
c00155cd:	52                   	push   edx
c00155ce:	ff d0                	call   eax
c00155d0:	83 c4 10             	add    esp,0x10
c00155d3:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00155d8:	83 ec 08             	sub    esp,0x8
c00155db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00155de:	50                   	push   eax
c00155df:	e8 f0 e9 ff ff       	call   c0013fd4 <Device::addChild(Device*)>
c00155e4:	83 c4 10             	add    esp,0x10
c00155e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155ea:	e9 52 03 00 00       	jmp    c0015941 <setupInterruptController()+0x3c2>
c00155ef:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00155f4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00155fa:	83 e0 01             	and    eax,0x1
c00155fd:	84 c0                	test   al,al
c00155ff:	0f 95 c0             	setne  al
c0015602:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015605:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001560c:	83 ec 0c             	sub    esp,0xc
c001560f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015612:	e8 29 a2 ff ff       	call   c000f840 <malloc>
c0015617:	83 c4 10             	add    esp,0x10
c001561a:	89 c3                	mov    ebx,eax
c001561c:	83 ec 0c             	sub    esp,0xc
c001561f:	53                   	push   ebx
c0015620:	e8 d9 04 01 00       	call   c0025afe <PIC::PIC()>
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001562b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001562e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015631:	8b 00                	mov    eax,DWORD PTR [eax]
c0015633:	83 c0 08             	add    eax,0x8
c0015636:	8b 00                	mov    eax,DWORD PTR [eax]
c0015638:	6a 00                	push   0x0
c001563a:	6a 00                	push   0x0
c001563c:	6a 00                	push   0x0
c001563e:	52                   	push   edx
c001563f:	ff d0                	call   eax
c0015641:	83 c4 10             	add    esp,0x10
c0015644:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015648:	74 73                	je     c00156bd <setupInterruptController()+0x13e>
c001564a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001564d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015650:	8b 00                	mov    eax,DWORD PTR [eax]
c0015652:	83 c0 0c             	add    eax,0xc
c0015655:	8b 00                	mov    eax,DWORD PTR [eax]
c0015657:	6a 00                	push   0x0
c0015659:	6a 00                	push   0x0
c001565b:	6a 00                	push   0x0
c001565d:	52                   	push   edx
c001565e:	ff d0                	call   eax
c0015660:	83 c4 10             	add    esp,0x10
c0015663:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015667:	74 15                	je     c001567e <setupInterruptController()+0xff>
c0015669:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001566c:	8b 00                	mov    eax,DWORD PTR [eax]
c001566e:	83 c0 04             	add    eax,0x4
c0015671:	8b 00                	mov    eax,DWORD PTR [eax]
c0015673:	83 ec 0c             	sub    esp,0xc
c0015676:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015679:	ff d0                	call   eax
c001567b:	83 c4 10             	add    esp,0x10
c001567e:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015685:	83 ec 0c             	sub    esp,0xc
c0015688:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001568b:	e8 b0 a1 ff ff       	call   c000f840 <malloc>
c0015690:	83 c4 10             	add    esp,0x10
c0015693:	89 c3                	mov    ebx,eax
c0015695:	83 ec 0c             	sub    esp,0xc
c0015698:	53                   	push   ebx
c0015699:	e8 08 ff 00 00       	call   c00255a6 <APIC::APIC()>
c001569e:	83 c4 10             	add    esp,0x10
c00156a1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00156a4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00156a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ac:	83 c0 08             	add    eax,0x8
c00156af:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b1:	6a 00                	push   0x0
c00156b3:	6a 00                	push   0x0
c00156b5:	6a 00                	push   0x0
c00156b7:	52                   	push   edx
c00156b8:	ff d0                	call   eax
c00156ba:	83 c4 10             	add    esp,0x10
c00156bd:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00156c2:	83 ec 08             	sub    esp,0x8
c00156c5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156c8:	50                   	push   eax
c00156c9:	e8 06 e9 ff ff       	call   c0013fd4 <Device::addChild(Device*)>
c00156ce:	83 c4 10             	add    esp,0x10
c00156d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d6:	83 c0 24             	add    eax,0x24
c00156d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00156db:	6a 00                	push   0x0
c00156dd:	68 32 4f 01 c0       	push   0xc0014f32
c00156e2:	6a 00                	push   0x0
c00156e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156e7:	ff d0                	call   eax
c00156e9:	83 c4 10             	add    esp,0x10
c00156ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f1:	83 c0 24             	add    eax,0x24
c00156f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f6:	6a 00                	push   0x0
c00156f8:	68 32 4f 01 c0       	push   0xc0014f32
c00156fd:	6a 01                	push   0x1
c00156ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015702:	ff d0                	call   eax
c0015704:	83 c4 10             	add    esp,0x10
c0015707:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001570a:	8b 00                	mov    eax,DWORD PTR [eax]
c001570c:	83 c0 24             	add    eax,0x24
c001570f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015711:	6a 00                	push   0x0
c0015713:	68 81 48 01 c0       	push   0xc0014881
c0015718:	6a 02                	push   0x2
c001571a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001571d:	ff d0                	call   eax
c001571f:	83 c4 10             	add    esp,0x10
c0015722:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015725:	8b 00                	mov    eax,DWORD PTR [eax]
c0015727:	83 c0 24             	add    eax,0x24
c001572a:	8b 00                	mov    eax,DWORD PTR [eax]
c001572c:	6a 00                	push   0x0
c001572e:	68 32 4f 01 c0       	push   0xc0014f32
c0015733:	6a 03                	push   0x3
c0015735:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015738:	ff d0                	call   eax
c001573a:	83 c4 10             	add    esp,0x10
c001573d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015740:	8b 00                	mov    eax,DWORD PTR [eax]
c0015742:	83 c0 24             	add    eax,0x24
c0015745:	8b 00                	mov    eax,DWORD PTR [eax]
c0015747:	6a 00                	push   0x0
c0015749:	68 32 4f 01 c0       	push   0xc0014f32
c001574e:	6a 04                	push   0x4
c0015750:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015753:	ff d0                	call   eax
c0015755:	83 c4 10             	add    esp,0x10
c0015758:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001575b:	8b 00                	mov    eax,DWORD PTR [eax]
c001575d:	83 c0 24             	add    eax,0x24
c0015760:	8b 00                	mov    eax,DWORD PTR [eax]
c0015762:	6a 00                	push   0x0
c0015764:	68 32 4f 01 c0       	push   0xc0014f32
c0015769:	6a 05                	push   0x5
c001576b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001576e:	ff d0                	call   eax
c0015770:	83 c4 10             	add    esp,0x10
c0015773:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015776:	8b 00                	mov    eax,DWORD PTR [eax]
c0015778:	83 c0 24             	add    eax,0x24
c001577b:	8b 00                	mov    eax,DWORD PTR [eax]
c001577d:	6a 00                	push   0x0
c001577f:	68 51 4f 01 c0       	push   0xc0014f51
c0015784:	6a 06                	push   0x6
c0015786:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015789:	ff d0                	call   eax
c001578b:	83 c4 10             	add    esp,0x10
c001578e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015791:	8b 00                	mov    eax,DWORD PTR [eax]
c0015793:	83 c0 24             	add    eax,0x24
c0015796:	8b 00                	mov    eax,DWORD PTR [eax]
c0015798:	6a 00                	push   0x0
c001579a:	68 b3 4e 01 c0       	push   0xc0014eb3
c001579f:	6a 07                	push   0x7
c00157a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157a4:	ff d0                	call   eax
c00157a6:	83 c4 10             	add    esp,0x10
c00157a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ae:	83 c0 24             	add    eax,0x24
c00157b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b3:	6a 00                	push   0x0
c00157b5:	68 9c 46 01 c0       	push   0xc001469c
c00157ba:	6a 08                	push   0x8
c00157bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157bf:	ff d0                	call   eax
c00157c1:	83 c4 10             	add    esp,0x10
c00157c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c9:	83 c0 24             	add    eax,0x24
c00157cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ce:	6a 00                	push   0x0
c00157d0:	68 32 4f 01 c0       	push   0xc0014f32
c00157d5:	6a 09                	push   0x9
c00157d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157da:	ff d0                	call   eax
c00157dc:	83 c4 10             	add    esp,0x10
c00157df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e4:	83 c0 24             	add    eax,0x24
c00157e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e9:	6a 00                	push   0x0
c00157eb:	68 32 4f 01 c0       	push   0xc0014f32
c00157f0:	6a 0a                	push   0xa
c00157f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157f5:	ff d0                	call   eax
c00157f7:	83 c4 10             	add    esp,0x10
c00157fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ff:	83 c0 24             	add    eax,0x24
c0015802:	8b 00                	mov    eax,DWORD PTR [eax]
c0015804:	6a 00                	push   0x0
c0015806:	68 32 4f 01 c0       	push   0xc0014f32
c001580b:	6a 0b                	push   0xb
c001580d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015810:	ff d0                	call   eax
c0015812:	83 c4 10             	add    esp,0x10
c0015815:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015818:	8b 00                	mov    eax,DWORD PTR [eax]
c001581a:	83 c0 24             	add    eax,0x24
c001581d:	8b 00                	mov    eax,DWORD PTR [eax]
c001581f:	6a 00                	push   0x0
c0015821:	68 32 4f 01 c0       	push   0xc0014f32
c0015826:	6a 0c                	push   0xc
c0015828:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001582b:	ff d0                	call   eax
c001582d:	83 c4 10             	add    esp,0x10
c0015830:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015833:	8b 00                	mov    eax,DWORD PTR [eax]
c0015835:	83 c0 24             	add    eax,0x24
c0015838:	8b 00                	mov    eax,DWORD PTR [eax]
c001583a:	6a 00                	push   0x0
c001583c:	68 e2 4e 01 c0       	push   0xc0014ee2
c0015841:	6a 0d                	push   0xd
c0015843:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015846:	ff d0                	call   eax
c0015848:	83 c4 10             	add    esp,0x10
c001584b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001584e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015850:	83 c0 24             	add    eax,0x24
c0015853:	8b 00                	mov    eax,DWORD PTR [eax]
c0015855:	6a 00                	push   0x0
c0015857:	68 1b 4f 01 c0       	push   0xc0014f1b
c001585c:	6a 0e                	push   0xe
c001585e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015861:	ff d0                	call   eax
c0015863:	83 c4 10             	add    esp,0x10
c0015866:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015869:	8b 00                	mov    eax,DWORD PTR [eax]
c001586b:	83 c0 24             	add    eax,0x24
c001586e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015870:	6a 00                	push   0x0
c0015872:	68 32 4f 01 c0       	push   0xc0014f32
c0015877:	6a 0f                	push   0xf
c0015879:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001587c:	ff d0                	call   eax
c001587e:	83 c4 10             	add    esp,0x10
c0015881:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015884:	8b 00                	mov    eax,DWORD PTR [eax]
c0015886:	83 c0 24             	add    eax,0x24
c0015889:	8b 00                	mov    eax,DWORD PTR [eax]
c001588b:	6a 00                	push   0x0
c001588d:	68 32 4f 01 c0       	push   0xc0014f32
c0015892:	6a 10                	push   0x10
c0015894:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015897:	ff d0                	call   eax
c0015899:	83 c4 10             	add    esp,0x10
c001589c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001589f:	8b 00                	mov    eax,DWORD PTR [eax]
c00158a1:	83 c0 24             	add    eax,0x24
c00158a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00158a6:	6a 00                	push   0x0
c00158a8:	68 32 4f 01 c0       	push   0xc0014f32
c00158ad:	6a 11                	push   0x11
c00158af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158b2:	ff d0                	call   eax
c00158b4:	83 c4 10             	add    esp,0x10
c00158b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00158bc:	83 c0 24             	add    eax,0x24
c00158bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00158c1:	6a 00                	push   0x0
c00158c3:	68 32 4f 01 c0       	push   0xc0014f32
c00158c8:	6a 12                	push   0x12
c00158ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158cd:	ff d0                	call   eax
c00158cf:	83 c4 10             	add    esp,0x10
c00158d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d7:	83 c0 24             	add    eax,0x24
c00158da:	8b 00                	mov    eax,DWORD PTR [eax]
c00158dc:	6a 00                	push   0x0
c00158de:	68 32 4f 01 c0       	push   0xc0014f32
c00158e3:	6a 13                	push   0x13
c00158e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158e8:	ff d0                	call   eax
c00158ea:	83 c4 10             	add    esp,0x10
c00158ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f2:	83 c0 24             	add    eax,0x24
c00158f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f7:	6a 00                	push   0x0
c00158f9:	68 32 4f 01 c0       	push   0xc0014f32
c00158fe:	6a 14                	push   0x14
c0015900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015903:	ff d0                	call   eax
c0015905:	83 c4 10             	add    esp,0x10
c0015908:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001590b:	8b 00                	mov    eax,DWORD PTR [eax]
c001590d:	83 c0 24             	add    eax,0x24
c0015910:	8b 00                	mov    eax,DWORD PTR [eax]
c0015912:	6a 00                	push   0x0
c0015914:	68 32 4f 01 c0       	push   0xc0014f32
c0015919:	6a 1e                	push   0x1e
c001591b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001591e:	ff d0                	call   eax
c0015920:	83 c4 10             	add    esp,0x10
c0015923:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015926:	8b 00                	mov    eax,DWORD PTR [eax]
c0015928:	83 c0 24             	add    eax,0x24
c001592b:	8b 00                	mov    eax,DWORD PTR [eax]
c001592d:	6a 00                	push   0x0
c001592f:	68 fd c3 01 c0       	push   0xc001c3fd
c0015934:	6a 60                	push   0x60
c0015936:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015939:	ff d0                	call   eax
c001593b:	83 c4 10             	add    esp,0x10
c001593e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015941:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015944:	c9                   	leave  
c0015945:	c3                   	ret    

c0015946 <InterruptController::convertLegacyIRQNumber(int)>:
c0015946:	55                   	push   ebp
c0015947:	89 e5                	mov    ebp,esp
c0015949:	83 ec 08             	sub    esp,0x8
c001594c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594f:	83 ec 0c             	sub    esp,0xc
c0015952:	50                   	push   eax
c0015953:	e8 68 e9 ff ff       	call   c00142c0 <Device::getName()>
c0015958:	83 c4 10             	add    esp,0x10
c001595b:	8a 00                	mov    al,BYTE PTR [eax]
c001595d:	3c 41                	cmp    al,0x41
c001595f:	0f 94 c0             	sete   al
c0015962:	84 c0                	test   al,al
c0015964:	74 28                	je     c001598e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015966:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001596a:	7f 12                	jg     c001597e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001596c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001596f:	05 00 d3 02 c0       	add    eax,0xc002d300
c0015974:	8a 00                	mov    al,BYTE PTR [eax]
c0015976:	0f b6 c0             	movzx  eax,al
c0015979:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001597c:	eb 10                	jmp    c001598e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001597e:	83 ec 0c             	sub    esp,0xc
c0015981:	68 00 aa 02 c0       	push   0xc002aa00
c0015986:	e8 9e 48 00 00       	call   c001a229 <Krnl::panic(char const*)>
c001598b:	83 c4 10             	add    esp,0x10
c001598e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015991:	c9                   	leave  
c0015992:	c3                   	ret    
c0015993:	90                   	nop

c0015994 <startGUI(void*)>:
c0015994:	55                   	push   ebp
c0015995:	89 e5                	mov    ebp,esp
c0015997:	53                   	push   ebx
c0015998:	83 ec 04             	sub    esp,0x4
c001599b:	e8 b0 80 00 00       	call   c001da50 <unlockScheduler()>
c00159a0:	8b 1d a8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0a8
c00159a6:	83 ec 08             	sub    esp,0x8
c00159a9:	6a 01                	push   0x1
c00159ab:	68 50 ad 02 c0       	push   0xc002ad50
c00159b0:	e8 f1 79 00 00       	call   c001d3a6 <Thr::loadDLL(char const*, bool)>
c00159b5:	83 c4 10             	add    esp,0x10
c00159b8:	83 ec 08             	sub    esp,0x8
c00159bb:	53                   	push   ebx
c00159bc:	50                   	push   eax
c00159bd:	e8 18 7c 00 00       	call   c001d5da <Thr::executeDLL(unsigned long, void*)>
c00159c2:	83 c4 10             	add    esp,0x10
c00159c5:	8b 1d a8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0a8
c00159cb:	83 ec 08             	sub    esp,0x8
c00159ce:	6a 01                	push   0x1
c00159d0:	68 6a ad 02 c0       	push   0xc002ad6a
c00159d5:	e8 cc 79 00 00       	call   c001d3a6 <Thr::loadDLL(char const*, bool)>
c00159da:	83 c4 10             	add    esp,0x10
c00159dd:	83 ec 08             	sub    esp,0x8
c00159e0:	53                   	push   ebx
c00159e1:	50                   	push   eax
c00159e2:	e8 f3 7b 00 00       	call   c001d5da <Thr::executeDLL(unsigned long, void*)>
c00159e7:	83 c4 10             	add    esp,0x10
c00159ea:	90                   	nop
c00159eb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00159ee:	c9                   	leave  
c00159ef:	c3                   	ret    

c00159f0 <startGUIVESA(void*)>:
c00159f0:	55                   	push   ebp
c00159f1:	89 e5                	mov    ebp,esp
c00159f3:	53                   	push   ebx
c00159f4:	83 ec 04             	sub    esp,0x4
c00159f7:	e8 54 80 00 00       	call   c001da50 <unlockScheduler()>
c00159fc:	8b 1d a8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0a8
c0015a02:	83 ec 08             	sub    esp,0x8
c0015a05:	6a 01                	push   0x1
c0015a07:	68 84 ad 02 c0       	push   0xc002ad84
c0015a0c:	e8 95 79 00 00       	call   c001d3a6 <Thr::loadDLL(char const*, bool)>
c0015a11:	83 c4 10             	add    esp,0x10
c0015a14:	83 ec 08             	sub    esp,0x8
c0015a17:	53                   	push   ebx
c0015a18:	50                   	push   eax
c0015a19:	e8 bc 7b 00 00       	call   c001d5da <Thr::executeDLL(unsigned long, void*)>
c0015a1e:	83 c4 10             	add    esp,0x10
c0015a21:	8b 1d a8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0a8
c0015a27:	83 ec 08             	sub    esp,0x8
c0015a2a:	6a 01                	push   0x1
c0015a2c:	68 6a ad 02 c0       	push   0xc002ad6a
c0015a31:	e8 70 79 00 00       	call   c001d3a6 <Thr::loadDLL(char const*, bool)>
c0015a36:	83 c4 10             	add    esp,0x10
c0015a39:	83 ec 08             	sub    esp,0x8
c0015a3c:	53                   	push   ebx
c0015a3d:	50                   	push   eax
c0015a3e:	e8 97 7b 00 00       	call   c001d5da <Thr::executeDLL(unsigned long, void*)>
c0015a43:	83 c4 10             	add    esp,0x10
c0015a46:	90                   	nop
c0015a47:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015a4a:	c9                   	leave  
c0015a4b:	c3                   	ret    

c0015a4c <sendKeyToTerminal(unsigned char)>:
c0015a4c:	55                   	push   ebp
c0015a4d:	89 e5                	mov    ebp,esp
c0015a4f:	83 ec 28             	sub    esp,0x28
c0015a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a55:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015a58:	a1 84 e1 02 c0       	mov    eax,ds:0xc002e184
c0015a5d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015a61:	83 ec 08             	sub    esp,0x8
c0015a64:	52                   	push   edx
c0015a65:	50                   	push   eax
c0015a66:	e8 85 b8 ff ff       	call   c00112f0 <VgaText::receiveKey(unsigned char)>
c0015a6b:	83 c4 10             	add    esp,0x10
c0015a6e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015a72:	75 41                	jne    c0015ab5 <sendKeyToTerminal(unsigned char)+0x69>
c0015a74:	e8 fc 7f 00 00       	call   c001da75 <lockStuff()>
c0015a79:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c0015a7e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a81:	c7 05 60 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e260,0x0
c0015a8b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a8f:	74 1f                	je     c0015ab0 <sendKeyToTerminal(unsigned char)+0x64>
c0015a91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a94:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015a97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a9a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a9d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015aa0:	83 ec 0c             	sub    esp,0xc
c0015aa3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015aa6:	e8 bb 85 00 00       	call   c001e066 <unblockTask(ThreadControlBlock*)>
c0015aab:	83 c4 10             	add    esp,0x10
c0015aae:	eb db                	jmp    c0015a8b <sendKeyToTerminal(unsigned char)+0x3f>
c0015ab0:	e8 5a 83 00 00       	call   c001de0f <unlockStuff()>
c0015ab5:	90                   	nop
c0015ab6:	c9                   	leave  
c0015ab7:	c3                   	ret    

c0015ab8 <sendKeyboardToken(KeyboardToken)>:
c0015ab8:	55                   	push   ebp
c0015ab9:	89 e5                	mov    ebp,esp
c0015abb:	83 ec 18             	sub    esp,0x18
c0015abe:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac4:	0f b7 c0             	movzx  eax,ax
c0015ac7:	83 f2 01             	xor    edx,0x1
c0015aca:	88 90 80 e2 02 c0    	mov    BYTE PTR [eax-0x3ffd1d80],dl
c0015ad0:	a1 68 e2 02 c0       	mov    eax,ds:0xc002e268
c0015ad5:	85 c0                	test   eax,eax
c0015ad7:	74 24                	je     c0015afd <sendKeyboardToken(KeyboardToken)+0x45>
c0015ad9:	8b 0d 68 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e268
c0015adf:	83 ec 04             	sub    esp,0x4
c0015ae2:	68 80 e2 02 c0       	push   0xc002e280
c0015ae7:	83 ec 08             	sub    esp,0x8
c0015aea:	89 e2                	mov    edx,esp
c0015aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aef:	89 02                	mov    DWORD PTR [edx],eax
c0015af1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015af4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015af8:	ff d1                	call   ecx
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b00:	66 3d 03 02          	cmp    ax,0x203
c0015b04:	75 07                	jne    c0015b0d <sendKeyboardToken(KeyboardToken)+0x55>
c0015b06:	a0 80 e3 02 c0       	mov    al,ds:0xc002e380
c0015b0b:	84 c0                	test   al,al
c0015b0d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015b11:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015b14:	a0 88 e6 02 c0       	mov    al,ds:0xc002e688
c0015b19:	38 c2                	cmp    dl,al
c0015b1b:	74 1c                	je     c0015b39 <sendKeyboardToken(KeyboardToken)+0x81>
c0015b1d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015b20:	a2 88 e6 02 c0       	mov    ds:0xc002e688,al
c0015b25:	a0 88 e6 02 c0       	mov    al,ds:0xc002e688
c0015b2a:	0f b6 c0             	movzx  eax,al
c0015b2d:	83 ec 0c             	sub    esp,0xc
c0015b30:	50                   	push   eax
c0015b31:	e8 1a aa ff ff       	call   c0010550 <setTerminalScrollLock(bool)>
c0015b36:	83 c4 10             	add    esp,0x10
c0015b39:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015b3c:	84 c0                	test   al,al
c0015b3e:	0f 84 ae 00 00 00    	je     c0015bf2 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b47:	66 3d 10 03          	cmp    ax,0x310
c0015b4b:	75 06                	jne    c0015b53 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015b4d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015b53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b56:	66 3d 11 03          	cmp    ax,0x311
c0015b5a:	75 06                	jne    c0015b62 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015b5c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b65:	66 3d 12 03          	cmp    ax,0x312
c0015b69:	75 06                	jne    c0015b71 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015b6b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b74:	66 3d 13 03          	cmp    ax,0x313
c0015b78:	75 06                	jne    c0015b80 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015b7a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b83:	66 3d 14 03          	cmp    ax,0x314
c0015b87:	75 06                	jne    c0015b8f <sendKeyboardToken(KeyboardToken)+0xd7>
c0015b89:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b92:	66 3d 15 03          	cmp    ax,0x315
c0015b96:	75 06                	jne    c0015b9e <sendKeyboardToken(KeyboardToken)+0xe6>
c0015b98:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015b9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba1:	66 3d 16 03          	cmp    ax,0x316
c0015ba5:	75 06                	jne    c0015bad <sendKeyboardToken(KeyboardToken)+0xf5>
c0015ba7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb0:	66 3d 17 03          	cmp    ax,0x317
c0015bb4:	75 06                	jne    c0015bbc <sendKeyboardToken(KeyboardToken)+0x104>
c0015bb6:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bbf:	66 3d 18 03          	cmp    ax,0x318
c0015bc3:	75 06                	jne    c0015bcb <sendKeyboardToken(KeyboardToken)+0x113>
c0015bc5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bce:	66 3d 19 03          	cmp    ax,0x319
c0015bd2:	75 06                	jne    c0015bda <sendKeyboardToken(KeyboardToken)+0x122>
c0015bd4:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015bda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bdd:	66 3d 1a 03          	cmp    ax,0x31a
c0015be1:	0f 85 c9 00 00 00    	jne    c0015cb0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015be7:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015bed:	e9 be 00 00 00       	jmp    c0015cb0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf5:	66 3d 10 03          	cmp    ax,0x310
c0015bf9:	75 0a                	jne    c0015c05 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015bfb:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015c01:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c08:	66 3d 11 03          	cmp    ax,0x311
c0015c0c:	75 0a                	jne    c0015c18 <sendKeyboardToken(KeyboardToken)+0x160>
c0015c0e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015c14:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c1b:	66 3d 12 03          	cmp    ax,0x312
c0015c1f:	75 0a                	jne    c0015c2b <sendKeyboardToken(KeyboardToken)+0x173>
c0015c21:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015c27:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c2e:	66 3d 13 03          	cmp    ax,0x313
c0015c32:	75 0a                	jne    c0015c3e <sendKeyboardToken(KeyboardToken)+0x186>
c0015c34:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015c3a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c41:	66 3d 14 03          	cmp    ax,0x314
c0015c45:	75 0a                	jne    c0015c51 <sendKeyboardToken(KeyboardToken)+0x199>
c0015c47:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015c4d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c54:	66 3d 15 03          	cmp    ax,0x315
c0015c58:	75 0a                	jne    c0015c64 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015c5a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015c60:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c67:	66 3d 16 03          	cmp    ax,0x316
c0015c6b:	75 0a                	jne    c0015c77 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015c6d:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015c73:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c7a:	66 3d 17 03          	cmp    ax,0x317
c0015c7e:	75 0a                	jne    c0015c8a <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015c80:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015c86:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8d:	66 3d 18 03          	cmp    ax,0x318
c0015c91:	75 0a                	jne    c0015c9d <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015c93:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015c99:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca0:	66 3d 19 03          	cmp    ax,0x319
c0015ca4:	75 0a                	jne    c0015cb0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ca6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015cac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015cb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb3:	66 3d 00 02          	cmp    ax,0x200
c0015cb7:	75 2c                	jne    c0015ce5 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015cb9:	a0 80 e6 02 c0       	mov    al,ds:0xc002e680
c0015cbe:	83 f0 01             	xor    eax,0x1
c0015cc1:	84 c0                	test   al,al
c0015cc3:	74 20                	je     c0015ce5 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015cc5:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0015cca:	6a 01                	push   0x1
c0015ccc:	6a 00                	push   0x0
c0015cce:	68 94 59 01 c0       	push   0xc0015994
c0015cd3:	50                   	push   eax
c0015cd4:	e8 a7 7e 00 00       	call   c001db80 <Process::createThread(void (*)(void*), void*, int)>
c0015cd9:	83 c4 10             	add    esp,0x10
c0015cdc:	c6 05 80 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e680,0x1
c0015ce3:	eb 33                	jmp    c0015d18 <sendKeyboardToken(KeyboardToken)+0x260>
c0015ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ce8:	66 3d 01 02          	cmp    ax,0x201
c0015cec:	75 2a                	jne    c0015d18 <sendKeyboardToken(KeyboardToken)+0x260>
c0015cee:	a0 80 e6 02 c0       	mov    al,ds:0xc002e680
c0015cf3:	83 f0 01             	xor    eax,0x1
c0015cf6:	84 c0                	test   al,al
c0015cf8:	74 1e                	je     c0015d18 <sendKeyboardToken(KeyboardToken)+0x260>
c0015cfa:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c0015cff:	6a 01                	push   0x1
c0015d01:	6a 00                	push   0x0
c0015d03:	68 f0 59 01 c0       	push   0xc00159f0
c0015d08:	50                   	push   eax
c0015d09:	e8 72 7e 00 00       	call   c001db80 <Process::createThread(void (*)(void*), void*, int)>
c0015d0e:	83 c4 10             	add    esp,0x10
c0015d11:	c6 05 80 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e680,0x1
c0015d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d1b:	66 3d 1d 03          	cmp    ax,0x31d
c0015d1f:	75 06                	jne    c0015d27 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015d21:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015d27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d2a:	66 3d 1c 03          	cmp    ax,0x31c
c0015d2e:	75 06                	jne    c0015d36 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015d30:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015d36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d39:	66 3d 1b 03          	cmp    ax,0x31b
c0015d3d:	75 06                	jne    c0015d45 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015d3f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d48:	66 3d 1e 03          	cmp    ax,0x31e
c0015d4c:	75 06                	jne    c0015d54 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015d4e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015d54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d57:	66 3d 1f 03          	cmp    ax,0x31f
c0015d5b:	75 06                	jne    c0015d63 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015d5d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015d63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d66:	66 3d 1a 03          	cmp    ax,0x31a
c0015d6a:	75 06                	jne    c0015d72 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015d6c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015d72:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015d76:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d79:	83 f0 01             	xor    eax,0x1
c0015d7c:	84 c0                	test   al,al
c0015d7e:	74 77                	je     c0015df7 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015d80:	a0 81 e3 02 c0       	mov    al,ds:0xc002e381
c0015d85:	84 c0                	test   al,al
c0015d87:	74 41                	je     c0015dca <sendKeyboardToken(KeyboardToken)+0x312>
c0015d89:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d8d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015d91:	74 2b                	je     c0015dbe <sendKeyboardToken(KeyboardToken)+0x306>
c0015d93:	8b 15 84 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e684
c0015d99:	89 d0                	mov    eax,edx
c0015d9b:	c1 e0 02             	shl    eax,0x2
c0015d9e:	01 d0                	add    eax,edx
c0015da0:	01 c0                	add    eax,eax
c0015da2:	a3 84 e6 02 c0       	mov    ds:0xc002e684,eax
c0015da7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015daa:	0f b7 c0             	movzx  eax,ax
c0015dad:	8d 50 d0             	lea    edx,[eax-0x30]
c0015db0:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0015db5:	01 d0                	add    eax,edx
c0015db7:	a3 84 e6 02 c0       	mov    ds:0xc002e684,eax
c0015dbc:	eb 6d                	jmp    c0015e2b <sendKeyboardToken(KeyboardToken)+0x373>
c0015dbe:	c7 05 84 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e684,0x0
c0015dc8:	eb 61                	jmp    c0015e2b <sendKeyboardToken(KeyboardToken)+0x373>
c0015dca:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0015dcf:	85 c0                	test   eax,eax
c0015dd1:	74 18                	je     c0015deb <sendKeyboardToken(KeyboardToken)+0x333>
c0015dd3:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0015dd8:	0f b6 c0             	movzx  eax,al
c0015ddb:	83 ec 0c             	sub    esp,0xc
c0015dde:	50                   	push   eax
c0015ddf:	e8 68 fc ff ff       	call   c0015a4c <sendKeyToTerminal(unsigned char)>
c0015de4:	83 c4 10             	add    esp,0x10
c0015de7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015deb:	c7 05 84 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e684,0x0
c0015df5:	eb 34                	jmp    c0015e2b <sendKeyboardToken(KeyboardToken)+0x373>
c0015df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dfa:	66 3d 01 01          	cmp    ax,0x101
c0015dfe:	75 2b                	jne    c0015e2b <sendKeyboardToken(KeyboardToken)+0x373>
c0015e00:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0015e05:	85 c0                	test   eax,eax
c0015e07:	74 18                	je     c0015e21 <sendKeyboardToken(KeyboardToken)+0x369>
c0015e09:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0015e0e:	0f b6 c0             	movzx  eax,al
c0015e11:	83 ec 0c             	sub    esp,0xc
c0015e14:	50                   	push   eax
c0015e15:	e8 32 fc ff ff       	call   c0015a4c <sendKeyToTerminal(unsigned char)>
c0015e1a:	83 c4 10             	add    esp,0x10
c0015e1d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015e21:	c7 05 84 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e684,0x0
c0015e2b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015e2e:	83 f0 01             	xor    eax,0x1
c0015e31:	84 c0                	test   al,al
c0015e33:	74 4c                	je     c0015e81 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e35:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e38:	83 f0 01             	xor    eax,0x1
c0015e3b:	84 c0                	test   al,al
c0015e3d:	74 42                	je     c0015e81 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e3f:	a0 80 e3 02 c0       	mov    al,ds:0xc002e380
c0015e44:	83 f0 01             	xor    eax,0x1
c0015e47:	84 c0                	test   al,al
c0015e49:	74 36                	je     c0015e81 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4e:	66 83 f8 1f          	cmp    ax,0x1f
c0015e52:	76 09                	jbe    c0015e5d <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e57:	66 83 f8 7e          	cmp    ax,0x7e
c0015e5b:	76 12                	jbe    c0015e6f <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e60:	66 83 f8 0a          	cmp    ax,0xa
c0015e64:	74 09                	je     c0015e6f <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e69:	66 83 f8 08          	cmp    ax,0x8
c0015e6d:	75 12                	jne    c0015e81 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e72:	0f b6 c0             	movzx  eax,al
c0015e75:	83 ec 0c             	sub    esp,0xc
c0015e78:	50                   	push   eax
c0015e79:	e8 ce fb ff ff       	call   c0015a4c <sendKeyToTerminal(unsigned char)>
c0015e7e:	83 c4 10             	add    esp,0x10
c0015e81:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015e84:	83 f0 01             	xor    eax,0x1
c0015e87:	84 c0                	test   al,al
c0015e89:	74 4f                	je     c0015eda <sendKeyboardToken(KeyboardToken)+0x422>
c0015e8b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e8e:	83 f0 01             	xor    eax,0x1
c0015e91:	84 c0                	test   al,al
c0015e93:	74 45                	je     c0015eda <sendKeyboardToken(KeyboardToken)+0x422>
c0015e95:	a0 80 e3 02 c0       	mov    al,ds:0xc002e380
c0015e9a:	84 c0                	test   al,al
c0015e9c:	74 3c                	je     c0015eda <sendKeyboardToken(KeyboardToken)+0x422>
c0015e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea1:	66 83 f8 3f          	cmp    ax,0x3f
c0015ea5:	76 33                	jbe    c0015eda <sendKeyboardToken(KeyboardToken)+0x422>
c0015ea7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eaa:	66 83 f8 7f          	cmp    ax,0x7f
c0015eae:	77 2a                	ja     c0015eda <sendKeyboardToken(KeyboardToken)+0x422>
c0015eb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb3:	88 c2                	mov    dl,al
c0015eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb8:	66 83 f8 5f          	cmp    ax,0x5f
c0015ebc:	76 04                	jbe    c0015ec2 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015ebe:	b0 20                	mov    al,0x20
c0015ec0:	eb 02                	jmp    c0015ec4 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015ec2:	b0 00                	mov    al,0x0
c0015ec4:	29 c2                	sub    edx,eax
c0015ec6:	88 d0                	mov    al,dl
c0015ec8:	83 e8 40             	sub    eax,0x40
c0015ecb:	0f b6 c0             	movzx  eax,al
c0015ece:	83 ec 0c             	sub    esp,0xc
c0015ed1:	50                   	push   eax
c0015ed2:	e8 75 fb ff ff       	call   c0015a4c <sendKeyToTerminal(unsigned char)>
c0015ed7:	83 c4 10             	add    esp,0x10
c0015eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015edd:	66 3d 00 03          	cmp    ax,0x300
c0015ee1:	75 0f                	jne    c0015ef2 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015ee3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ee6:	83 f0 01             	xor    eax,0x1
c0015ee9:	84 c0                	test   al,al
c0015eeb:	74 05                	je     c0015ef2 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015eed:	e8 93 ae ff ff       	call   c0010d85 <doTerminalCycle()>
c0015ef2:	90                   	nop
c0015ef3:	c9                   	leave  
c0015ef4:	c3                   	ret    

c0015ef5 <clearInternalKeybuffer(VgaText*)>:
c0015ef5:	55                   	push   ebp
c0015ef6:	89 e5                	mov    ebp,esp
c0015ef8:	83 ec 08             	sub    esp,0x8
c0015efb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015efe:	05 34 11 00 00       	add    eax,0x1134
c0015f03:	83 ec 0c             	sub    esp,0xc
c0015f06:	50                   	push   eax
c0015f07:	e8 88 a8 fe ff       	call   c0000794 <strlen>
c0015f0c:	83 c4 10             	add    esp,0x10
c0015f0f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f12:	81 c2 34 11 00 00    	add    edx,0x1134
c0015f18:	83 ec 04             	sub    esp,0x4
c0015f1b:	50                   	push   eax
c0015f1c:	6a 00                	push   0x0
c0015f1e:	52                   	push   edx
c0015f1f:	e8 54 a8 fe ff       	call   c0000778 <memset>
c0015f24:	83 c4 10             	add    esp,0x10
c0015f27:	90                   	nop
c0015f28:	c9                   	leave  
c0015f29:	c3                   	ret    

c0015f2a <readKeyboard(VgaText*, char*, unsigned long)>:
c0015f2a:	55                   	push   ebp
c0015f2b:	89 e5                	mov    ebp,esp
c0015f2d:	83 ec 18             	sub    esp,0x18
c0015f30:	fb                   	sti    
c0015f31:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015f38:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015f3c:	0f 84 8a 00 00 00    	je     c0015fcc <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015f42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f45:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015f4b:	84 c0                	test   al,al
c0015f4d:	75 11                	jne    c0015f60 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015f4f:	e8 fa 7a 00 00       	call   c001da4e <lockScheduler()>
c0015f54:	e8 31 7e 00 00       	call   c001dd8a <schedule()>
c0015f59:	e8 f2 7a 00 00       	call   c001da50 <unlockScheduler()>
c0015f5e:	eb e2                	jmp    c0015f42 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015f60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f63:	8d 50 01             	lea    edx,[eax+0x1]
c0015f66:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015f69:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f6c:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015f72:	88 10                	mov    BYTE PTR [eax],dl
c0015f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f77:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015f7d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015f80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f83:	05 34 11 00 00       	add    eax,0x1134
c0015f88:	83 ec 0c             	sub    esp,0xc
c0015f8b:	50                   	push   eax
c0015f8c:	e8 03 a8 fe ff       	call   c0000794 <strlen>
c0015f91:	83 c4 10             	add    esp,0x10
c0015f94:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f97:	81 c2 34 11 00 00    	add    edx,0x1134
c0015f9d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015fa0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015fa3:	81 c2 34 11 00 00    	add    edx,0x1134
c0015fa9:	83 ec 04             	sub    esp,0x4
c0015fac:	50                   	push   eax
c0015fad:	51                   	push   ecx
c0015fae:	52                   	push   edx
c0015faf:	e8 c8 a6 fe ff       	call   c000067c <memmove>
c0015fb4:	83 c4 10             	add    esp,0x10
c0015fb7:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015fba:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015fbd:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015fc1:	0f 85 71 ff ff ff    	jne    c0015f38 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015fc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015fca:	eb 03                	jmp    c0015fcf <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015fcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015fcf:	c9                   	leave  
c0015fd0:	c3                   	ret    
c0015fd1:	90                   	nop

c0015fd2 <Keyboard::Keyboard(char const*)>:
c0015fd2:	83 ec 0c             	sub    esp,0xc
c0015fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fd9:	83 ec 08             	sub    esp,0x8
c0015fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fe0:	50                   	push   eax
c0015fe1:	e8 de e1 ff ff       	call   c00141c4 <Device::Device(char const*)>
c0015fe6:	83 c4 10             	add    esp,0x10
c0015fe9:	ba a8 ad 02 c0       	mov    edx,0xc002ada8
c0015fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ff2:	89 10                	mov    DWORD PTR [eax],edx
c0015ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ff8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016002:	c6 05 64 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e264,0x1
c0016009:	90                   	nop
c001600a:	83 c4 0c             	add    esp,0xc
c001600d:	c3                   	ret    

c001600e <Keyboard::~Keyboard()>:
c001600e:	83 ec 0c             	sub    esp,0xc
c0016011:	ba a8 ad 02 c0       	mov    edx,0xc002ada8
c0016016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001601a:	89 10                	mov    DWORD PTR [eax],edx
c001601c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016020:	83 ec 0c             	sub    esp,0xc
c0016023:	50                   	push   eax
c0016024:	e8 7d de ff ff       	call   c0013ea6 <Device::~Device()>
c0016029:	83 c4 10             	add    esp,0x10
c001602c:	90                   	nop
c001602d:	83 c4 0c             	add    esp,0xc
c0016030:	c3                   	ret    
c0016031:	90                   	nop

c0016032 <Keyboard::~Keyboard()>:
c0016032:	83 ec 0c             	sub    esp,0xc
c0016035:	83 ec 0c             	sub    esp,0xc
c0016038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001603c:	e8 cd ff ff ff       	call   c001600e <Keyboard::~Keyboard()>
c0016041:	83 c4 10             	add    esp,0x10
c0016044:	83 ec 08             	sub    esp,0x8
c0016047:	68 5c 01 00 00       	push   0x15c
c001604c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016050:	e8 79 ca ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0016055:	83 c4 10             	add    esp,0x10
c0016058:	83 c4 0c             	add    esp,0xc
c001605b:	c3                   	ret    

c001605c <LogicalDisk::close(int, int, void*)>:
c001605c:	83 c8 ff             	or     eax,0xffffffff
c001605f:	c3                   	ret    

c0016060 <LogicalDisk::~LogicalDisk()>:
c0016060:	83 ec 0c             	sub    esp,0xc
c0016063:	ba 58 ae 02 c0       	mov    edx,0xc002ae58
c0016068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001606c:	89 10                	mov    DWORD PTR [eax],edx
c001606e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016072:	83 ec 0c             	sub    esp,0xc
c0016075:	50                   	push   eax
c0016076:	e8 2b de ff ff       	call   c0013ea6 <Device::~Device()>
c001607b:	83 c4 10             	add    esp,0x10
c001607e:	90                   	nop
c001607f:	83 c4 0c             	add    esp,0xc
c0016082:	c3                   	ret    
c0016083:	90                   	nop

c0016084 <LogicalDisk::~LogicalDisk()>:
c0016084:	83 ec 0c             	sub    esp,0xc
c0016087:	83 ec 0c             	sub    esp,0xc
c001608a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001608e:	e8 cd ff ff ff       	call   c0016060 <LogicalDisk::~LogicalDisk()>
c0016093:	83 c4 10             	add    esp,0x10
c0016096:	83 ec 08             	sub    esp,0x8
c0016099:	68 74 01 00 00       	push   0x174
c001609e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160a2:	e8 27 ca ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c00160a7:	83 c4 10             	add    esp,0x10
c00160aa:	83 c4 0c             	add    esp,0xc
c00160ad:	c3                   	ret    

c00160ae <LogicalDisk::open(int, int, void*)>:
c00160ae:	83 ec 18             	sub    esp,0x18
c00160b1:	68 d4 ad 02 c0       	push   0xc002add4
c00160b6:	e8 6e 41 00 00       	call   c001a229 <Krnl::panic(char const*)>
c00160bb:	83 c8 ff             	or     eax,0xffffffff
c00160be:	83 c4 1c             	add    esp,0x1c
c00160c1:	c3                   	ret    

c00160c2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00160c2:	53                   	push   ebx
c00160c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00160c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00160cf:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00160d5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00160db:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00160e1:	77 10                	ja     c00160f3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00160e3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00160e9:	89 d3                	mov    ebx,edx
c00160eb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00160f1:	72 05                	jb     c00160f8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00160f3:	83 c8 ff             	or     eax,0xffffffff
c00160f6:	89 c2                	mov    edx,eax
c00160f8:	5b                   	pop    ebx
c00160f9:	c3                   	ret    

c00160fa <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00160fa:	56                   	push   esi
c00160fb:	83 c8 ff             	or     eax,0xffffffff
c00160fe:	53                   	push   ebx
c00160ff:	89 c2                	mov    edx,eax
c0016101:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016105:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016109:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001610d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016113:	77 27                	ja     c001613c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016115:	89 d8                	mov    eax,ebx
c0016117:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001611d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016123:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016128:	89 c2                	mov    edx,eax
c001612a:	73 10                	jae    c001613c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001612c:	89 c8                	mov    eax,ecx
c001612e:	89 da                	mov    edx,ebx
c0016130:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016136:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001613c:	5b                   	pop    ebx
c001613d:	5e                   	pop    esi
c001613e:	c3                   	ret    
c001613f:	90                   	nop

c0016140 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016140:	83 ec 1c             	sub    esp,0x1c
c0016143:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016147:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001614b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001614f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016153:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016157:	89 04 24             	mov    DWORD PTR [esp],eax
c001615a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001615e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016166:	83 ec 08             	sub    esp,0x8
c0016169:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001616d:	50                   	push   eax
c001616e:	e8 51 e0 ff ff       	call   c00141c4 <Device::Device(char const*)>
c0016173:	83 c4 10             	add    esp,0x10
c0016176:	ba 58 ae 02 c0       	mov    edx,0xc002ae58
c001617b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001617f:	89 10                	mov    DWORD PTR [eax],edx
c0016181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016185:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001618c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016190:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016197:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001619b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00161a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00161a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161b1:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00161b7:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00161bd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00161c1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00161c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00161c8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00161ce:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00161d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00161dc:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00161e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161e6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00161f0:	90                   	nop
c00161f1:	83 c4 1c             	add    esp,0x1c
c00161f4:	c3                   	ret    
c00161f5:	90                   	nop

c00161f6 <LogicalDisk::assignDriveLetter()>:
c00161f6:	55                   	push   ebp
c00161f7:	57                   	push   edi
c00161f8:	56                   	push   esi
c00161f9:	53                   	push   ebx
c00161fa:	83 ec 14             	sub    esp,0x14
c00161fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016201:	8b 3d a0 e6 02 c0    	mov    edi,DWORD PTR ds:0xc002e6a0
c0016207:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001620d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016211:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016217:	8b 3d a4 e6 02 c0    	mov    edi,DWORD PTR ds:0xc002e6a4
c001621d:	3c 01                	cmp    al,0x1
c001621f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016223:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016227:	19 c0                	sbb    eax,eax
c0016229:	83 e0 02             	and    eax,0x2
c001622c:	83 c0 41             	add    eax,0x41
c001622f:	0f be e8             	movsx  ebp,al
c0016232:	3c 43                	cmp    al,0x43
c0016234:	75 10                	jne    c0016246 <LogicalDisk::assignDriveLetter()+0x50>
c0016236:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001623d:	75 5d                	jne    c001629c <LogicalDisk::assignDriveLetter()+0xa6>
c001623f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016244:	75 56                	jne    c001629c <LogicalDisk::assignDriveLetter()+0xa6>
c0016246:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016249:	ba 01 00 00 00       	mov    edx,0x1
c001624e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016252:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016256:	d3 e2                	shl    edx,cl
c0016258:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001625c:	89 d7                	mov    edi,edx
c001625e:	89 d6                	mov    esi,edx
c0016260:	c1 ff 1f             	sar    edi,0x1f
c0016263:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016267:	21 f9                	and    ecx,edi
c0016269:	09 d1                	or     ecx,edx
c001626b:	75 2f                	jne    c001629c <LogicalDisk::assignDriveLetter()+0xa6>
c001626d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016275:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001627b:	09 f2                	or     edx,esi
c001627d:	89 15 a0 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a0,edx
c0016283:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016287:	09 fa                	or     edx,edi
c0016289:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001628d:	89 15 a4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a4,edx
c0016293:	89 1c bd c0 e6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1940],ebx
c001629a:	eb 08                	jmp    c00162a4 <LogicalDisk::assignDriveLetter()+0xae>
c001629c:	45                   	inc    ebp
c001629d:	40                   	inc    eax
c001629e:	3c 5b                	cmp    al,0x5b
c00162a0:	75 90                	jne    c0016232 <LogicalDisk::assignDriveLetter()+0x3c>
c00162a2:	31 c0                	xor    eax,eax
c00162a4:	83 c4 14             	add    esp,0x14
c00162a7:	5b                   	pop    ebx
c00162a8:	5e                   	pop    esi
c00162a9:	5f                   	pop    edi
c00162aa:	5d                   	pop    ebp
c00162ab:	c3                   	ret    

c00162ac <LogicalDisk::mount()>:
c00162ac:	56                   	push   esi
c00162ad:	53                   	push   ebx
c00162ae:	51                   	push   ecx
c00162af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162b3:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c00162b9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00162c3:	85 db                	test   ebx,ebx
c00162c5:	74 50                	je     c0016317 <LogicalDisk::mount()+0x6b>
c00162c7:	e8 6d 77 00 00       	call   c001da39 <getIRQNestingLevel()>
c00162cc:	52                   	push   edx
c00162cd:	52                   	push   edx
c00162ce:	50                   	push   eax
c00162cf:	68 f8 ad 02 c0       	push   0xc002adf8
c00162d4:	e8 d5 c8 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00162d9:	83 c4 0c             	add    esp,0xc
c00162dc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00162e3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00162e5:	83 e8 41             	sub    eax,0x41
c00162e8:	50                   	push   eax
c00162e9:	56                   	push   esi
c00162ea:	53                   	push   ebx
c00162eb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00162ee:	83 c4 10             	add    esp,0x10
c00162f1:	84 c0                	test   al,al
c00162f3:	74 08                	je     c00162fd <LogicalDisk::mount()+0x51>
c00162f5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00162fb:	eb 1c                	jmp    c0016319 <LogicalDisk::mount()+0x6d>
c00162fd:	e8 37 77 00 00       	call   c001da39 <getIRQNestingLevel()>
c0016302:	51                   	push   ecx
c0016303:	51                   	push   ecx
c0016304:	50                   	push   eax
c0016305:	68 13 ae 02 c0       	push   0xc002ae13
c001630a:	e8 9f c8 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001630f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016312:	83 c4 10             	add    esp,0x10
c0016315:	eb ac                	jmp    c00162c3 <LogicalDisk::mount()+0x17>
c0016317:	31 c0                	xor    eax,eax
c0016319:	5a                   	pop    edx
c001631a:	5b                   	pop    ebx
c001631b:	5e                   	pop    esi
c001631c:	c3                   	ret    
c001631d:	90                   	nop

c001631e <LogicalDisk::unmount()>:
c001631e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016322:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001632c:	c3                   	ret    
c001632d:	90                   	nop

c001632e <LogicalDisk::eject()>:
c001632e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016332:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016338:	8b 10                	mov    edx,DWORD PTR [eax]
c001633a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001633e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016341:	90                   	nop

c0016342 <LogicalDisk::unassignDriveLetter()>:
c0016342:	57                   	push   edi
c0016343:	56                   	push   esi
c0016344:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016348:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001634f:	84 c9                	test   cl,cl
c0016351:	75 0f                	jne    c0016362 <LogicalDisk::unassignDriveLetter()+0x20>
c0016353:	c7 44 24 0c 2e ae 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ae2e
c001635b:	5e                   	pop    esi
c001635c:	5f                   	pop    edi
c001635d:	e9 c7 3e 00 00       	jmp    c001a229 <Krnl::panic(char const*)>
c0016362:	83 e9 41             	sub    ecx,0x41
c0016365:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001636c:	b8 01 00 00 00       	mov    eax,0x1
c0016371:	c7 04 8d c0 e6 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1940],0x0
c001637c:	d3 e0                	shl    eax,cl
c001637e:	89 c7                	mov    edi,eax
c0016380:	f7 d0                	not    eax
c0016382:	c1 ff 1f             	sar    edi,0x1f
c0016385:	21 05 a0 e6 02 c0    	and    DWORD PTR ds:0xc002e6a0,eax
c001638b:	89 fe                	mov    esi,edi
c001638d:	f7 d6                	not    esi
c001638f:	21 35 a4 e6 02 c0    	and    DWORD PTR ds:0xc002e6a4,esi
c0016395:	5e                   	pop    esi
c0016396:	5f                   	pop    edi
c0016397:	c3                   	ret    

c0016398 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016398:	57                   	push   edi
c0016399:	56                   	push   esi
c001639a:	53                   	push   ebx
c001639b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001639f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163a3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00163a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163ab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00163b1:	77 41                	ja     c00163f4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00163b3:	99                   	cdq    
c00163b4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00163ba:	01 c8                	add    eax,ecx
c00163bc:	11 da                	adc    edx,ebx
c00163be:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00163c4:	19 d7                	sbb    edi,edx
c00163c6:	72 33                	jb     c00163fb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00163c8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00163ce:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00163d4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00163d8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00163dc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00163e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163ec:	5b                   	pop    ebx
c00163ed:	5e                   	pop    esi
c00163ee:	5f                   	pop    edi
c00163ef:	e9 b0 0a 00 00       	jmp    c0016ea4 <VCache::read(unsigned long long, int, void*)>
c00163f4:	b8 05 00 00 00       	mov    eax,0x5
c00163f9:	eb 05                	jmp    c0016400 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00163fb:	b8 07 00 00 00       	mov    eax,0x7
c0016400:	5b                   	pop    ebx
c0016401:	5e                   	pop    esi
c0016402:	5f                   	pop    edi
c0016403:	c3                   	ret    

c0016404 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016404:	57                   	push   edi
c0016405:	56                   	push   esi
c0016406:	53                   	push   ebx
c0016407:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001640b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001640f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016413:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016417:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001641d:	77 41                	ja     c0016460 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001641f:	99                   	cdq    
c0016420:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016426:	01 c8                	add    eax,ecx
c0016428:	11 da                	adc    edx,ebx
c001642a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016430:	19 d7                	sbb    edi,edx
c0016432:	72 33                	jb     c0016467 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016434:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001643a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016440:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016444:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016448:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001644e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016454:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016458:	5b                   	pop    ebx
c0016459:	5e                   	pop    esi
c001645a:	5f                   	pop    edi
c001645b:	e9 4e 09 00 00       	jmp    c0016dae <VCache::write(unsigned long long, int, void*)>
c0016460:	b8 05 00 00 00       	mov    eax,0x5
c0016465:	eb 05                	jmp    c001646c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016467:	b8 07 00 00 00       	mov    eax,0x7
c001646c:	5b                   	pop    ebx
c001646d:	5e                   	pop    esi
c001646e:	5f                   	pop    edi
c001646f:	c3                   	ret    

c0016470 <Mouse::Mouse(char const*)>:
c0016470:	83 ec 0c             	sub    esp,0xc
c0016473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016477:	83 ec 08             	sub    esp,0x8
c001647a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001647e:	50                   	push   eax
c001647f:	e8 40 dd ff ff       	call   c00141c4 <Device::Device(char const*)>
c0016484:	83 c4 10             	add    esp,0x10
c0016487:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c001648c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016490:	89 10                	mov    DWORD PTR [eax],edx
c0016492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016496:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00164a0:	90                   	nop
c00164a1:	83 c4 0c             	add    esp,0xc
c00164a4:	c3                   	ret    
c00164a5:	90                   	nop

c00164a6 <Mouse::~Mouse()>:
c00164a6:	83 ec 0c             	sub    esp,0xc
c00164a9:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c00164ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b2:	89 10                	mov    DWORD PTR [eax],edx
c00164b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b8:	83 ec 0c             	sub    esp,0xc
c00164bb:	50                   	push   eax
c00164bc:	e8 e5 d9 ff ff       	call   c0013ea6 <Device::~Device()>
c00164c1:	83 c4 10             	add    esp,0x10
c00164c4:	90                   	nop
c00164c5:	83 c4 0c             	add    esp,0xc
c00164c8:	c3                   	ret    
c00164c9:	90                   	nop

c00164ca <Mouse::~Mouse()>:
c00164ca:	83 ec 0c             	sub    esp,0xc
c00164cd:	83 ec 0c             	sub    esp,0xc
c00164d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164d4:	e8 cd ff ff ff       	call   c00164a6 <Mouse::~Mouse()>
c00164d9:	83 c4 10             	add    esp,0x10
c00164dc:	83 ec 08             	sub    esp,0x8
c00164df:	68 58 01 00 00       	push   0x158
c00164e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e8:	e8 e1 c5 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c00164ed:	83 c4 10             	add    esp,0x10
c00164f0:	83 c4 0c             	add    esp,0xc
c00164f3:	c3                   	ret    

c00164f4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00164f4:	55                   	push   ebp
c00164f5:	57                   	push   edi
c00164f6:	56                   	push   esi
c00164f7:	53                   	push   ebx
c00164f8:	81 ec 28 01 00 00    	sub    esp,0x128
c00164fe:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016505:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001650c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016513:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001651a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001651e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016522:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016529:	e8 92 dd ff ff       	call   c00142c0 <Device::getName()>
c001652e:	5a                   	pop    edx
c001652f:	59                   	pop    ecx
c0016530:	50                   	push   eax
c0016531:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016535:	55                   	push   ebp
c0016536:	e8 f9 a2 fe ff       	call   c0000834 <strcpy>
c001653b:	5b                   	pop    ebx
c001653c:	58                   	pop    eax
c001653d:	68 a8 ae 02 c0       	push   0xc002aea8
c0016542:	55                   	push   ebp
c0016543:	e8 2c a4 fe ff       	call   c0000974 <strcat>
c0016548:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001654f:	e8 ec 92 ff ff       	call   c000f840 <malloc>
c0016554:	83 c4 0c             	add    esp,0xc
c0016557:	89 c3                	mov    ebx,eax
c0016559:	57                   	push   edi
c001655a:	56                   	push   esi
c001655b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001655f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016563:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001656a:	55                   	push   ebp
c001656b:	50                   	push   eax
c001656c:	e8 cf fb ff ff       	call   c0016140 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016571:	83 c4 14             	add    esp,0x14
c0016574:	53                   	push   ebx
c0016575:	e8 7c fc ff ff       	call   c00161f6 <LogicalDisk::assignDriveLetter()>
c001657a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001657d:	89 c6                	mov    esi,eax
c001657f:	e8 28 fd ff ff       	call   c00162ac <LogicalDisk::mount()>
c0016584:	58                   	pop    eax
c0016585:	5a                   	pop    edx
c0016586:	53                   	push   ebx
c0016587:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001658e:	e8 41 da ff ff       	call   c0013fd4 <Device::addChild(Device*)>
c0016593:	59                   	pop    ecx
c0016594:	89 f0                	mov    eax,esi
c0016596:	5b                   	pop    ebx
c0016597:	0f be f0             	movsx  esi,al
c001659a:	56                   	push   esi
c001659b:	68 b3 ae 02 c0       	push   0xc002aeb3
c00165a0:	e8 09 c6 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00165a5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00165ab:	5b                   	pop    ebx
c00165ac:	5e                   	pop    esi
c00165ad:	5f                   	pop    edi
c00165ae:	5d                   	pop    ebp
c00165af:	c3                   	ret    

c00165b0 <createPartitionsForDisk(PhysicalDisk*)>:
c00165b0:	55                   	push   ebp
c00165b1:	57                   	push   edi
c00165b2:	56                   	push   esi
c00165b3:	53                   	push   ebx
c00165b4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00165ba:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00165c1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00165c7:	3d 00 02 00 00       	cmp    eax,0x200
c00165cc:	74 27                	je     c00165f5 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00165ce:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00165d4:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00165da:	83 ec 10             	sub    esp,0x10
c00165dd:	0f a4 f7 0a          	shld   edi,esi,0xa
c00165e1:	99                   	cdq    
c00165e2:	c1 e6 0a             	shl    esi,0xa
c00165e5:	52                   	push   edx
c00165e6:	89 fd                	mov    ebp,edi
c00165e8:	50                   	push   eax
c00165e9:	55                   	push   ebp
c00165ea:	56                   	push   esi
c00165eb:	e8 3c 00 01 00       	call   c002662c <__udivdi3>
c00165f0:	e9 b1 00 00 00       	jmp    c00166a6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00165f5:	83 ec 0c             	sub    esp,0xc
c00165f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165fa:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00165fe:	56                   	push   esi
c00165ff:	6a 01                	push   0x1
c0016601:	6a 00                	push   0x0
c0016603:	6a 00                	push   0x0
c0016605:	53                   	push   ebx
c0016606:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016609:	83 c4 20             	add    esp,0x20
c001660c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016614:	75 0a                	jne    c0016620 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016616:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001661e:	74 2c                	je     c001664c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016620:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016626:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001662c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016632:	83 ec 10             	sub    esp,0x10
c0016635:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016639:	89 f7                	mov    edi,esi
c001663b:	c1 e0 0a             	shl    eax,0xa
c001663e:	c1 ff 1f             	sar    edi,0x1f
c0016641:	57                   	push   edi
c0016642:	56                   	push   esi
c0016643:	52                   	push   edx
c0016644:	50                   	push   eax
c0016645:	e8 e2 ff 00 00       	call   c002662c <__udivdi3>
c001664a:	eb 5a                	jmp    c00166a6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001664c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016653:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001665a:	83 e1 7f             	and    ecx,0x7f
c001665d:	83 e0 7f             	and    eax,0x7f
c0016660:	01 c1                	add    ecx,eax
c0016662:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016669:	83 e0 7f             	and    eax,0x7f
c001666c:	01 c1                	add    ecx,eax
c001666e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016675:	83 e0 7f             	and    eax,0x7f
c0016678:	00 c1                	add    cl,al
c001667a:	74 41                	je     c00166bd <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001667c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016682:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016688:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001668e:	83 ec 10             	sub    esp,0x10
c0016691:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016695:	89 f7                	mov    edi,esi
c0016697:	c1 e0 0a             	shl    eax,0xa
c001669a:	c1 ff 1f             	sar    edi,0x1f
c001669d:	57                   	push   edi
c001669e:	56                   	push   esi
c001669f:	52                   	push   edx
c00166a0:	50                   	push   eax
c00166a1:	e8 86 ff 00 00       	call   c002662c <__udivdi3>
c00166a6:	83 c4 14             	add    esp,0x14
c00166a9:	52                   	push   edx
c00166aa:	50                   	push   eax
c00166ab:	6a 00                	push   0x0
c00166ad:	6a 00                	push   0x0
c00166af:	53                   	push   ebx
c00166b0:	e8 3f fe ff ff       	call   c00164f4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00166b5:	83 c4 20             	add    esp,0x20
c00166b8:	e9 79 01 00 00       	jmp    c0016836 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00166bd:	89 f0                	mov    eax,esi
c00166bf:	31 f6                	xor    esi,esi
c00166c1:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00166c8:	75 02                	jne    c00166cc <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00166ca:	89 f1                	mov    ecx,esi
c00166cc:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00166d3:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00166da:	c1 e2 08             	shl    edx,0x8
c00166dd:	c1 e7 10             	shl    edi,0x10
c00166e0:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00166e8:	09 fa                	or     edx,edi
c00166ea:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00166f2:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00166f9:	83 c0 10             	add    eax,0x10
c00166fc:	09 fa                	or     edx,edi
c00166fe:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016705:	c1 e7 18             	shl    edi,0x18
c0016708:	09 fa                	or     edx,edi
c001670a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016711:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016715:	c1 e7 10             	shl    edi,0x10
c0016718:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001671f:	c1 e2 08             	shl    edx,0x8
c0016722:	09 fa                	or     edx,edi
c0016724:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001672b:	09 fa                	or     edx,edi
c001672d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016734:	c1 e7 18             	shl    edi,0x18
c0016737:	09 fa                	or     edx,edi
c0016739:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001673d:	46                   	inc    esi
c001673e:	83 fe 04             	cmp    esi,0x4
c0016741:	0f 85 7a ff ff ff    	jne    c00166c1 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001674b:	83 f0 01             	xor    eax,0x1
c001674e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016752:	75 57                	jne    c00167ab <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016754:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016758:	83 f0 01             	xor    eax,0x1
c001675b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001675f:	75 4a                	jne    c00167ab <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016761:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016765:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001676d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016775:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001677b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016781:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016787:	0f a4 c2 0a          	shld   edx,eax,0xa
c001678b:	89 f7                	mov    edi,esi
c001678d:	c1 e0 0a             	shl    eax,0xa
c0016790:	c1 ff 1f             	sar    edi,0x1f
c0016793:	57                   	push   edi
c0016794:	56                   	push   esi
c0016795:	52                   	push   edx
c0016796:	50                   	push   eax
c0016797:	e8 90 fe 00 00       	call   c002662c <__udivdi3>
c001679c:	83 c4 10             	add    esp,0x10
c001679f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00167a3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00167a7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00167ab:	84 c9                	test   cl,cl
c00167ad:	74 53                	je     c0016802 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00167af:	0f b6 c9             	movzx  ecx,cl
c00167b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00167ba:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00167be:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00167c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00167c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00167ca:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00167ce:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00167d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00167da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167e2:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00167e6:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00167ea:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00167ee:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00167f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00167f6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00167fa:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00167fe:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016802:	31 ed                	xor    ebp,ebp
c0016804:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016808:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001680c:	89 f8                	mov    eax,edi
c001680e:	09 f0                	or     eax,esi
c0016810:	74 1e                	je     c0016830 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016812:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016816:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001681a:	89 d1                	mov    ecx,edx
c001681c:	09 c1                	or     ecx,eax
c001681e:	74 10                	je     c0016830 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016820:	83 ec 0c             	sub    esp,0xc
c0016823:	57                   	push   edi
c0016824:	56                   	push   esi
c0016825:	52                   	push   edx
c0016826:	50                   	push   eax
c0016827:	53                   	push   ebx
c0016828:	e8 c7 fc ff ff       	call   c00164f4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001682d:	83 c4 20             	add    esp,0x20
c0016830:	45                   	inc    ebp
c0016831:	83 fd 04             	cmp    ebp,0x4
c0016834:	75 ce                	jne    c0016804 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016836:	81 c4 5c 02 00 00    	add    esp,0x25c
c001683c:	5b                   	pop    ebx
c001683d:	5e                   	pop    esi
c001683e:	5f                   	pop    edi
c001683f:	5d                   	pop    ebp
c0016840:	c3                   	ret    
c0016841:	90                   	nop

c0016842 <Serial::Serial(char const*)>:
c0016842:	83 ec 0c             	sub    esp,0xc
c0016845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016849:	83 ec 08             	sub    esp,0x8
c001684c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016850:	50                   	push   eax
c0016851:	e8 6e d9 ff ff       	call   c00141c4 <Device::Device(char const*)>
c0016856:	83 c4 10             	add    esp,0x10
c0016859:	ba e0 ae 02 c0       	mov    edx,0xc002aee0
c001685e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016862:	89 10                	mov    DWORD PTR [eax],edx
c0016864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016868:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016872:	90                   	nop
c0016873:	83 c4 0c             	add    esp,0xc
c0016876:	c3                   	ret    
c0016877:	90                   	nop

c0016878 <Serial::~Serial()>:
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	ba e0 ae 02 c0       	mov    edx,0xc002aee0
c0016880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016884:	89 10                	mov    DWORD PTR [eax],edx
c0016886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001688a:	83 ec 0c             	sub    esp,0xc
c001688d:	50                   	push   eax
c001688e:	e8 13 d6 ff ff       	call   c0013ea6 <Device::~Device()>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	90                   	nop
c0016897:	83 c4 0c             	add    esp,0xc
c001689a:	c3                   	ret    
c001689b:	90                   	nop

c001689c <Serial::~Serial()>:
c001689c:	83 ec 0c             	sub    esp,0xc
c001689f:	83 ec 0c             	sub    esp,0xc
c00168a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a6:	e8 cd ff ff ff       	call   c0016878 <Serial::~Serial()>
c00168ab:	83 c4 10             	add    esp,0x10
c00168ae:	83 ec 08             	sub    esp,0x8
c00168b1:	68 58 01 00 00       	push   0x158
c00168b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ba:	e8 0f c2 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c00168bf:	83 c4 10             	add    esp,0x10
c00168c2:	83 c4 0c             	add    esp,0xc
c00168c5:	c3                   	ret    

c00168c6 <Timer::Timer(char const*)>:
c00168c6:	83 ec 0c             	sub    esp,0xc
c00168c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168cd:	83 ec 08             	sub    esp,0x8
c00168d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168d4:	50                   	push   eax
c00168d5:	e8 ea d8 ff ff       	call   c00141c4 <Device::Device(char const*)>
c00168da:	83 c4 10             	add    esp,0x10
c00168dd:	ba 24 af 02 c0       	mov    edx,0xc002af24
c00168e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e6:	89 10                	mov    DWORD PTR [eax],edx
c00168e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ec:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00168f6:	90                   	nop
c00168f7:	83 c4 0c             	add    esp,0xc
c00168fa:	c3                   	ret    
c00168fb:	90                   	nop

c00168fc <Timer::~Timer()>:
c00168fc:	83 ec 0c             	sub    esp,0xc
c00168ff:	ba 24 af 02 c0       	mov    edx,0xc002af24
c0016904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016908:	89 10                	mov    DWORD PTR [eax],edx
c001690a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001690e:	83 ec 0c             	sub    esp,0xc
c0016911:	50                   	push   eax
c0016912:	e8 8f d5 ff ff       	call   c0013ea6 <Device::~Device()>
c0016917:	83 c4 10             	add    esp,0x10
c001691a:	90                   	nop
c001691b:	83 c4 0c             	add    esp,0xc
c001691e:	c3                   	ret    
c001691f:	90                   	nop

c0016920 <Timer::~Timer()>:
c0016920:	83 ec 0c             	sub    esp,0xc
c0016923:	83 ec 0c             	sub    esp,0xc
c0016926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001692a:	e8 cd ff ff ff       	call   c00168fc <Timer::~Timer()>
c001692f:	83 c4 10             	add    esp,0x10
c0016932:	83 ec 08             	sub    esp,0x8
c0016935:	68 5c 01 00 00       	push   0x15c
c001693a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001693e:	e8 8b c1 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0016943:	83 c4 10             	add    esp,0x10
c0016946:	83 c4 0c             	add    esp,0xc
c0016949:	c3                   	ret    

c001694a <Timer::read()>:
c001694a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001694e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016954:	c3                   	ret    

c0016955 <timerHandler(unsigned long long)>:
c0016955:	55                   	push   ebp
c0016956:	57                   	push   edi
c0016957:	56                   	push   esi
c0016958:	53                   	push   ebx
c0016959:	83 ec 0c             	sub    esp,0xc
c001695c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016960:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016964:	01 35 30 e7 02 c0    	add    DWORD PTR ds:0xc002e730,esi
c001696a:	11 3d 34 e7 02 c0    	adc    DWORD PTR ds:0xc002e734,edi
c0016970:	80 3d ad e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0ad,0x0
c0016977:	0f 84 07 01 00 00    	je     c0016a84 <timerHandler(unsigned long long)+0x12f>
c001697d:	e8 f3 70 00 00       	call   c001da75 <lockStuff()>
c0016982:	83 ec 0c             	sub    esp,0xc
c0016985:	68 fc 15 03 c0       	push   0xc00315fc
c001698a:	e8 0f 1d 01 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001698f:	c7 04 24 fc 15 03 c0 	mov    DWORD PTR [esp],0xc00315fc
c0016996:	89 c3                	mov    ebx,eax
c0016998:	e8 09 1d 01 00       	call   c00286a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001699d:	83 c4 10             	add    esp,0x10
c00169a0:	84 c0                	test   al,al
c00169a2:	74 60                	je     c0016a04 <timerHandler(unsigned long long)+0xaf>
c00169a4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00169aa:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00169ad:	85 c0                	test   eax,eax
c00169af:	0f 85 91 00 00 00    	jne    c0016a46 <timerHandler(unsigned long long)+0xf1>
c00169b5:	e9 be 00 00 00       	jmp    c0016a78 <timerHandler(unsigned long long)+0x123>
c00169ba:	83 ec 0c             	sub    esp,0xc
c00169bd:	55                   	push   ebp
c00169be:	e8 a3 76 00 00       	call   c001e066 <unblockTask(ThreadControlBlock*)>
c00169c3:	83 c4 10             	add    esp,0x10
c00169c6:	39 eb                	cmp    ebx,ebp
c00169c8:	75 12                	jne    c00169dc <timerHandler(unsigned long long)+0x87>
c00169ca:	83 ec 0c             	sub    esp,0xc
c00169cd:	68 fc 15 03 c0       	push   0xc00315fc
c00169d2:	e8 c7 1c 01 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169d7:	89 c3                	mov    ebx,eax
c00169d9:	83 c4 10             	add    esp,0x10
c00169dc:	83 ec 0c             	sub    esp,0xc
c00169df:	68 fc 15 03 c0       	push   0xc00315fc
c00169e4:	e8 bd 1c 01 00       	call   c00286a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169e9:	83 c4 10             	add    esp,0x10
c00169ec:	84 c0                	test   al,al
c00169ee:	75 b4                	jne    c00169a4 <timerHandler(unsigned long long)+0x4f>
c00169f0:	83 ec 0c             	sub    esp,0xc
c00169f3:	68 fc 15 03 c0       	push   0xc00315fc
c00169f8:	e8 a1 1c 01 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169fd:	83 c4 10             	add    esp,0x10
c0016a00:	39 d8                	cmp    eax,ebx
c0016a02:	74 a0                	je     c00169a4 <timerHandler(unsigned long long)+0x4f>
c0016a04:	83 ec 0c             	sub    esp,0xc
c0016a07:	68 fc 15 03 c0       	push   0xc00315fc
c0016a0c:	e8 8d 1c 01 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a11:	c7 04 24 fc 15 03 c0 	mov    DWORD PTR [esp],0xc00315fc
c0016a18:	89 c5                	mov    ebp,eax
c0016a1a:	e8 a3 1c 01 00       	call   c00286c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a1f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016a22:	83 c4 10             	add    esp,0x10
c0016a25:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016a28:	39 15 30 e7 02 c0    	cmp    DWORD PTR ds:0xc002e730,edx
c0016a2e:	a1 34 e7 02 c0       	mov    eax,ds:0xc002e734
c0016a33:	19 c8                	sbb    eax,ecx
c0016a35:	73 83                	jae    c00169ba <timerHandler(unsigned long long)+0x65>
c0016a37:	50                   	push   eax
c0016a38:	50                   	push   eax
c0016a39:	55                   	push   ebp
c0016a3a:	68 fc 15 03 c0       	push   0xc00315fc
c0016a3f:	e8 2c 1d 01 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a44:	eb 93                	jmp    c00169d9 <timerHandler(unsigned long long)+0x84>
c0016a46:	80 3d ac e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0ac,0x0
c0016a4d:	74 29                	je     c0016a78 <timerHandler(unsigned long long)+0x123>
c0016a4f:	39 c6                	cmp    esi,eax
c0016a51:	bb 00 00 00 00       	mov    ebx,0x0
c0016a56:	19 df                	sbb    edi,ebx
c0016a58:	72 19                	jb     c0016a73 <timerHandler(unsigned long long)+0x11e>
c0016a5a:	e8 ef 6f 00 00       	call   c001da4e <lockScheduler()>
c0016a5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a64:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016a67:	e8 1e 73 00 00       	call   c001dd8a <schedule()>
c0016a6c:	e8 df 6f 00 00       	call   c001da50 <unlockScheduler()>
c0016a71:	eb 05                	jmp    c0016a78 <timerHandler(unsigned long long)+0x123>
c0016a73:	29 f0                	sub    eax,esi
c0016a75:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016a78:	83 c4 0c             	add    esp,0xc
c0016a7b:	5b                   	pop    ebx
c0016a7c:	5e                   	pop    esi
c0016a7d:	5f                   	pop    edi
c0016a7e:	5d                   	pop    ebp
c0016a7f:	e9 8b 73 00 00       	jmp    c001de0f <unlockStuff()>
c0016a84:	83 c4 0c             	add    esp,0xc
c0016a87:	5b                   	pop    ebx
c0016a88:	5e                   	pop    esi
c0016a89:	5f                   	pop    edi
c0016a8a:	5d                   	pop    ebp
c0016a8b:	c3                   	ret    

c0016a8c <setupTimer(int)>:
c0016a8c:	57                   	push   edi
c0016a8d:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0016a92:	56                   	push   esi
c0016a93:	53                   	push   ebx
c0016a94:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a9e:	83 ec 0c             	sub    esp,0xc
c0016aa1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016aa7:	e8 14 d8 ff ff       	call   c00142c0 <Device::getName()>
c0016aac:	83 c4 10             	add    esp,0x10
c0016aaf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016ab2:	0f 85 8d 00 00 00    	jne    c0016b45 <setupTimer(int)+0xb9>
c0016ab8:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0016abd:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ac4:	74 7f                	je     c0016b45 <setupTimer(int)+0xb9>
c0016ac6:	83 ec 0c             	sub    esp,0xc
c0016ac9:	68 5c 01 00 00       	push   0x15c
c0016ace:	e8 6d 8d ff ff       	call   c000f840 <malloc>
c0016ad3:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ad6:	89 c3                	mov    ebx,eax
c0016ad8:	e8 2b f7 00 00       	call   c0026208 <PIT::PIT()>
c0016add:	59                   	pop    ecx
c0016ade:	5f                   	pop    edi
c0016adf:	53                   	push   ebx
c0016ae0:	ff 35 a8 e0 02 c0    	push   DWORD PTR ds:0xc002e0a8
c0016ae6:	e8 e9 d4 ff ff       	call   c0013fd4 <Device::addChild(Device*)>
c0016aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016aed:	6a 00                	push   0x0
c0016aef:	6a 00                	push   0x0
c0016af1:	56                   	push   esi
c0016af2:	53                   	push   ebx
c0016af3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016af6:	83 c4 14             	add    esp,0x14
c0016af9:	68 60 01 00 00       	push   0x160
c0016afe:	e8 3d 8d ff ff       	call   c000f840 <malloc>
c0016b03:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b06:	89 c7                	mov    edi,eax
c0016b08:	e8 ab f5 00 00       	call   c00260b8 <APICTimer::APICTimer()>
c0016b0d:	6a 00                	push   0x0
c0016b0f:	6a 00                	push   0x0
c0016b11:	56                   	push   esi
c0016b12:	57                   	push   edi
c0016b13:	e8 a2 f4 00 00       	call   c0025fba <APICTimer::open(int, int, void*)>
c0016b18:	83 c4 20             	add    esp,0x20
c0016b1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b1d:	6a 00                	push   0x0
c0016b1f:	6a 00                	push   0x0
c0016b21:	6a 00                	push   0x0
c0016b23:	53                   	push   ebx
c0016b24:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b27:	58                   	pop    eax
c0016b28:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0016b2d:	5a                   	pop    edx
c0016b2e:	57                   	push   edi
c0016b2f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b35:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016b3b:	e8 94 d4 ff ff       	call   c0013fd4 <Device::addChild(Device*)>
c0016b40:	83 c4 10             	add    esp,0x10
c0016b43:	eb 33                	jmp    c0016b78 <setupTimer(int)+0xec>
c0016b45:	83 ec 0c             	sub    esp,0xc
c0016b48:	68 5c 01 00 00       	push   0x15c
c0016b4d:	e8 ee 8c ff ff       	call   c000f840 <malloc>
c0016b52:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b55:	89 c3                	mov    ebx,eax
c0016b57:	e8 ac f6 00 00       	call   c0026208 <PIT::PIT()>
c0016b5c:	58                   	pop    eax
c0016b5d:	5a                   	pop    edx
c0016b5e:	53                   	push   ebx
c0016b5f:	ff 35 a8 e0 02 c0    	push   DWORD PTR ds:0xc002e0a8
c0016b65:	e8 6a d4 ff ff       	call   c0013fd4 <Device::addChild(Device*)>
c0016b6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b6c:	6a 00                	push   0x0
c0016b6e:	6a 00                	push   0x0
c0016b70:	56                   	push   esi
c0016b71:	53                   	push   ebx
c0016b72:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b75:	83 c4 20             	add    esp,0x20
c0016b78:	89 d8                	mov    eax,ebx
c0016b7a:	5b                   	pop    ebx
c0016b7b:	5e                   	pop    esi
c0016b7c:	5f                   	pop    edi
c0016b7d:	c3                   	ret    

c0016b7e <VCache::VCache(PhysicalDisk*)>:
c0016b7e:	53                   	push   ebx
c0016b7f:	83 ec 18             	sub    esp,0x18
c0016b82:	ba 54 af 02 c0       	mov    edx,0xc002af54
c0016b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b8b:	89 10                	mov    DWORD PTR [eax],edx
c0016b8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b91:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b9c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016ba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba7:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016bae:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016bb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016bc0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bcb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd6:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016bda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bde:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016be5:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016bec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bf0:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bf8:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016bfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c00:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c08:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016c0f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016c17:	83 ec 0c             	sub    esp,0xc
c0016c1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c1e:	e8 1d 8c ff ff       	call   c000f840 <malloc>
c0016c23:	83 c4 10             	add    esp,0x10
c0016c26:	89 c3                	mov    ebx,eax
c0016c28:	83 ec 0c             	sub    esp,0xc
c0016c2b:	53                   	push   ebx
c0016c2c:	e8 3d 6f 00 00       	call   c001db6e <Mutex::Mutex()>
c0016c31:	83 c4 10             	add    esp,0x10
c0016c34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c38:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c3f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016c43:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016c46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c4a:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016c51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c55:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016c5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c5f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016c62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c66:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016c6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016c76:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016c79:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016c7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c80:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016c84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c88:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c8e:	05 00 01 00 00       	add    eax,0x100
c0016c93:	c1 e0 04             	shl    eax,0x4
c0016c96:	83 ec 0c             	sub    esp,0xc
c0016c99:	50                   	push   eax
c0016c9a:	e8 a1 8b ff ff       	call   c000f840 <malloc>
c0016c9f:	83 c4 10             	add    esp,0x10
c0016ca2:	89 c2                	mov    edx,eax
c0016ca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ca8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016caf:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016cb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cba:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016cbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016cc2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016cc8:	c1 e0 07             	shl    eax,0x7
c0016ccb:	83 ec 0c             	sub    esp,0xc
c0016cce:	50                   	push   eax
c0016ccf:	e8 6c 8b ff ff       	call   c000f840 <malloc>
c0016cd4:	83 c4 10             	add    esp,0x10
c0016cd7:	89 c2                	mov    edx,eax
c0016cd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cdd:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016ce0:	90                   	nop
c0016ce1:	83 c4 18             	add    esp,0x18
c0016ce4:	5b                   	pop    ebx
c0016ce5:	c3                   	ret    

c0016ce6 <VCache::invalidateReadBuffer()>:
c0016ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cea:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016cf0:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016cf4:	c3                   	ret    
c0016cf5:	90                   	nop

c0016cf6 <VCache::writeWriteBuffer()>:
c0016cf6:	53                   	push   ebx
c0016cf7:	83 ec 14             	sub    esp,0x14
c0016cfa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016cfe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d01:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d03:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016d06:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016d09:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016d0c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016d0f:	50                   	push   eax
c0016d10:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d13:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016d1a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016d21:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016d25:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016d2c:	83 c4 28             	add    esp,0x28
c0016d2f:	5b                   	pop    ebx
c0016d30:	c3                   	ret    
c0016d31:	90                   	nop

c0016d32 <VCache::~VCache()>:
c0016d32:	83 ec 0c             	sub    esp,0xc
c0016d35:	ba 54 af 02 c0       	mov    edx,0xc002af54
c0016d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d3e:	89 10                	mov    DWORD PTR [eax],edx
c0016d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d44:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016d47:	84 c0                	test   al,al
c0016d49:	74 0f                	je     c0016d5a <VCache::~VCache()+0x28>
c0016d4b:	83 ec 0c             	sub    esp,0xc
c0016d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d52:	e8 9f ff ff ff       	call   c0016cf6 <VCache::writeWriteBuffer()>
c0016d57:	83 c4 10             	add    esp,0x10
c0016d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d5e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016d61:	83 ec 0c             	sub    esp,0xc
c0016d64:	50                   	push   eax
c0016d65:	e8 e6 8a ff ff       	call   c000f850 <free>
c0016d6a:	83 c4 10             	add    esp,0x10
c0016d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d71:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d74:	83 ec 0c             	sub    esp,0xc
c0016d77:	50                   	push   eax
c0016d78:	e8 d3 8a ff ff       	call   c000f850 <free>
c0016d7d:	83 c4 10             	add    esp,0x10
c0016d80:	90                   	nop
c0016d81:	83 c4 0c             	add    esp,0xc
c0016d84:	c3                   	ret    
c0016d85:	90                   	nop

c0016d86 <VCache::~VCache()>:
c0016d86:	83 ec 0c             	sub    esp,0xc
c0016d89:	83 ec 0c             	sub    esp,0xc
c0016d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d90:	e8 9d ff ff ff       	call   c0016d32 <VCache::~VCache()>
c0016d95:	83 c4 10             	add    esp,0x10
c0016d98:	83 ec 08             	sub    esp,0x8
c0016d9b:	6a 44                	push   0x44
c0016d9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016da1:	e8 28 bd ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0016da6:	83 c4 10             	add    esp,0x10
c0016da9:	83 c4 0c             	add    esp,0xc
c0016dac:	c3                   	ret    
c0016dad:	90                   	nop

c0016dae <VCache::write(unsigned long long, int, void*)>:
c0016dae:	55                   	push   ebp
c0016daf:	57                   	push   edi
c0016db0:	56                   	push   esi
c0016db1:	53                   	push   ebx
c0016db2:	83 ec 28             	sub    esp,0x28
c0016db5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016db9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016dbd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016dc1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016dc5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dc8:	e8 03 72 00 00       	call   c001dfd0 <Semaphore::acquire()>
c0016dcd:	83 c4 10             	add    esp,0x10
c0016dd0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016dd4:	74 0c                	je     c0016de2 <VCache::write(unsigned long long, int, void*)+0x34>
c0016dd6:	83 ec 0c             	sub    esp,0xc
c0016dd9:	53                   	push   ebx
c0016dda:	e8 07 ff ff ff       	call   c0016ce6 <VCache::invalidateReadBuffer()>
c0016ddf:	83 c4 10             	add    esp,0x10
c0016de2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016de6:	74 66                	je     c0016e4e <VCache::write(unsigned long long, int, void*)+0xa0>
c0016de8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016deb:	99                   	cdq    
c0016dec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016df0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016df3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016df6:	89 c1                	mov    ecx,eax
c0016df8:	89 d0                	mov    eax,edx
c0016dfa:	31 f1                	xor    ecx,esi
c0016dfc:	31 f8                	xor    eax,edi
c0016dfe:	89 ca                	mov    edx,ecx
c0016e00:	09 c2                	or     edx,eax
c0016e02:	75 3e                	jne    c0016e42 <VCache::write(unsigned long long, int, void*)+0x94>
c0016e04:	83 fd 01             	cmp    ebp,0x1
c0016e07:	75 39                	jne    c0016e42 <VCache::write(unsigned long long, int, void*)+0x94>
c0016e09:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e0c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e12:	51                   	push   ecx
c0016e13:	50                   	push   eax
c0016e14:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016e18:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016e1c:	0f af c8             	imul   ecx,eax
c0016e1f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016e22:	51                   	push   ecx
c0016e23:	e8 1c 99 fe ff       	call   c0000744 <memcpy>
c0016e28:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e2b:	83 c4 10             	add    esp,0x10
c0016e2e:	40                   	inc    eax
c0016e2f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016e32:	83 c0 80             	add    eax,0xffffff80
c0016e35:	75 57                	jne    c0016e8e <VCache::write(unsigned long long, int, void*)+0xe0>
c0016e37:	83 ec 0c             	sub    esp,0xc
c0016e3a:	53                   	push   ebx
c0016e3b:	e8 b6 fe ff ff       	call   c0016cf6 <VCache::writeWriteBuffer()>
c0016e40:	eb 34                	jmp    c0016e76 <VCache::write(unsigned long long, int, void*)+0xc8>
c0016e42:	83 ec 0c             	sub    esp,0xc
c0016e45:	53                   	push   ebx
c0016e46:	e8 ab fe ff ff       	call   c0016cf6 <VCache::writeWriteBuffer()>
c0016e4b:	83 c4 10             	add    esp,0x10
c0016e4e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e51:	83 fd 7f             	cmp    ebp,0x7f
c0016e54:	7f 25                	jg     c0016e7b <VCache::write(unsigned long long, int, void*)+0xcd>
c0016e56:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016e59:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016e5c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016e5f:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016e63:	52                   	push   edx
c0016e64:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016e6a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016e6e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016e71:	e8 ce 98 fe ff       	call   c0000744 <memcpy>
c0016e76:	83 c4 10             	add    esp,0x10
c0016e79:	eb 13                	jmp    c0016e8e <VCache::write(unsigned long long, int, void*)+0xe0>
c0016e7b:	83 ec 0c             	sub    esp,0xc
c0016e7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016e84:	55                   	push   ebp
c0016e85:	57                   	push   edi
c0016e86:	56                   	push   esi
c0016e87:	50                   	push   eax
c0016e88:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016e8b:	83 c4 20             	add    esp,0x20
c0016e8e:	83 ec 0c             	sub    esp,0xc
c0016e91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e94:	e8 e5 76 00 00       	call   c001e57e <Semaphore::release()>
c0016e99:	83 c4 2c             	add    esp,0x2c
c0016e9c:	31 c0                	xor    eax,eax
c0016e9e:	5b                   	pop    ebx
c0016e9f:	5e                   	pop    esi
c0016ea0:	5f                   	pop    edi
c0016ea1:	5d                   	pop    ebp
c0016ea2:	c3                   	ret    
c0016ea3:	90                   	nop

c0016ea4 <VCache::read(unsigned long long, int, void*)>:
c0016ea4:	55                   	push   ebp
c0016ea5:	57                   	push   edi
c0016ea6:	56                   	push   esi
c0016ea7:	53                   	push   ebx
c0016ea8:	83 ec 28             	sub    esp,0x28
c0016eab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016eaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016eb3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016eb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ebb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016ebf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016ec3:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016ec7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016eca:	e8 01 71 00 00       	call   c001dfd0 <Semaphore::acquire()>
c0016ecf:	83 c4 10             	add    esp,0x10
c0016ed2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016ed6:	74 0c                	je     c0016ee4 <VCache::read(unsigned long long, int, void*)+0x40>
c0016ed8:	83 ec 0c             	sub    esp,0xc
c0016edb:	53                   	push   ebx
c0016edc:	e8 15 fe ff ff       	call   c0016cf6 <VCache::writeWriteBuffer()>
c0016ee1:	83 c4 10             	add    esp,0x10
c0016ee4:	83 fe 01             	cmp    esi,0x1
c0016ee7:	0f 85 80 00 00 00    	jne    c0016f6d <VCache::read(unsigned long long, int, void*)+0xc9>
c0016eed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ef0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016ef7:	75 74                	jne    c0016f6d <VCache::read(unsigned long long, int, void*)+0xc9>
c0016ef9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016efc:	89 d1                	mov    ecx,edx
c0016efe:	f7 d9                	neg    ecx
c0016f00:	89 cf                	mov    edi,ecx
c0016f02:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016f06:	c1 ff 1f             	sar    edi,0x1f
c0016f09:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016f0c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016f10:	89 ce                	mov    esi,ecx
c0016f12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f16:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016f1a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016f1e:	89 cf                	mov    edi,ecx
c0016f20:	74 0a                	je     c0016f2c <VCache::read(unsigned long long, int, void*)+0x88>
c0016f22:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016f25:	75 05                	jne    c0016f2c <VCache::read(unsigned long long, int, void*)+0x88>
c0016f27:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016f2a:	74 1c                	je     c0016f48 <VCache::read(unsigned long long, int, void*)+0xa4>
c0016f2c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016f30:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016f33:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016f36:	83 ec 0c             	sub    esp,0xc
c0016f39:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016f3b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016f3e:	52                   	push   edx
c0016f3f:	57                   	push   edi
c0016f40:	56                   	push   esi
c0016f41:	50                   	push   eax
c0016f42:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016f45:	83 c4 20             	add    esp,0x20
c0016f48:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f4b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016f51:	50                   	push   eax
c0016f52:	52                   	push   edx
c0016f53:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f56:	48                   	dec    eax
c0016f57:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0016f5b:	0f af c2             	imul   eax,edx
c0016f5e:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0016f61:	50                   	push   eax
c0016f62:	55                   	push   ebp
c0016f63:	e8 dc 97 fe ff       	call   c0000744 <memcpy>
c0016f68:	83 c4 10             	add    esp,0x10
c0016f6b:	eb 21                	jmp    c0016f8e <VCache::read(unsigned long long, int, void*)+0xea>
c0016f6d:	83 ec 0c             	sub    esp,0xc
c0016f70:	53                   	push   ebx
c0016f71:	e8 70 fd ff ff       	call   c0016ce6 <VCache::invalidateReadBuffer()>
c0016f76:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f79:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f7b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016f7e:	56                   	push   esi
c0016f7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f87:	50                   	push   eax
c0016f88:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016f8b:	83 c4 20             	add    esp,0x20
c0016f8e:	83 ec 0c             	sub    esp,0xc
c0016f91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016f94:	e8 e5 75 00 00       	call   c001e57e <Semaphore::release()>
c0016f99:	83 c4 2c             	add    esp,0x2c
c0016f9c:	31 c0                	xor    eax,eax
c0016f9e:	5b                   	pop    ebx
c0016f9f:	5e                   	pop    esi
c0016fa0:	5f                   	pop    edi
c0016fa1:	5d                   	pop    ebp
c0016fa2:	c3                   	ret    
c0016fa3:	90                   	nop

c0016fa4 <Video::putrect(int, int, int, int, unsigned int)>:
c0016fa4:	55                   	push   ebp
c0016fa5:	57                   	push   edi
c0016fa6:	56                   	push   esi
c0016fa7:	53                   	push   ebx
c0016fa8:	83 ec 1c             	sub    esp,0x1c
c0016fab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016faf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fb3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016fb7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016fbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016fbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fc3:	01 df                	add    edi,ebx
c0016fc5:	39 fb                	cmp    ebx,edi
c0016fc7:	7d 1f                	jge    c0016fe8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016fc9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fcd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016fd1:	7d 12                	jge    c0016fe5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016fd3:	8b 16                	mov    edx,DWORD PTR [esi]
c0016fd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016fd9:	53                   	push   ebx
c0016fda:	55                   	push   ebp
c0016fdb:	45                   	inc    ebp
c0016fdc:	56                   	push   esi
c0016fdd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016fe0:	83 c4 10             	add    esp,0x10
c0016fe3:	eb e8                	jmp    c0016fcd <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016fe5:	43                   	inc    ebx
c0016fe6:	eb dd                	jmp    c0016fc5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016fe8:	83 c4 1c             	add    esp,0x1c
c0016feb:	5b                   	pop    ebx
c0016fec:	5e                   	pop    esi
c0016fed:	5f                   	pop    edi
c0016fee:	5d                   	pop    ebp
c0016fef:	c3                   	ret    

c0016ff0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016ff0:	55                   	push   ebp
c0016ff1:	57                   	push   edi
c0016ff2:	31 ff                	xor    edi,edi
c0016ff4:	56                   	push   esi
c0016ff5:	53                   	push   ebx
c0016ff6:	83 ec 1c             	sub    esp,0x1c
c0016ff9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ffd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017001:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017008:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001700d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017011:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017015:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017019:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001701c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017020:	01 f9                	add    ecx,edi
c0017022:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017026:	7d 2f                	jge    c0017057 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017028:	31 f6                	xor    esi,esi
c001702a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001702e:	01 f2                	add    edx,esi
c0017030:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017034:	7d 1a                	jge    c0017050 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017036:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017039:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001703c:	46                   	inc    esi
c001703d:	51                   	push   ecx
c001703e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017042:	52                   	push   edx
c0017043:	55                   	push   ebp
c0017044:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017047:	83 c4 10             	add    esp,0x10
c001704a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001704e:	eb da                	jmp    c001702a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017050:	47                   	inc    edi
c0017051:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017055:	eb c5                	jmp    c001701c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017057:	83 c4 1c             	add    esp,0x1c
c001705a:	5b                   	pop    ebx
c001705b:	5e                   	pop    esi
c001705c:	5f                   	pop    edi
c001705d:	5d                   	pop    ebp
c001705e:	c3                   	ret    
c001705f:	90                   	nop

c0017060 <Video::blit(unsigned int*, int, int, int, int)>:
c0017060:	55                   	push   ebp
c0017061:	57                   	push   edi
c0017062:	56                   	push   esi
c0017063:	53                   	push   ebx
c0017064:	83 ec 1c             	sub    esp,0x1c
c0017067:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001706b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001706f:	85 c0                	test   eax,eax
c0017071:	79 02                	jns    c0017075 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017073:	31 c0                	xor    eax,eax
c0017075:	c1 e0 02             	shl    eax,0x2
c0017078:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001707c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017080:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017084:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017088:	39 d8                	cmp    eax,ebx
c001708a:	7e 49                	jle    c00170d5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001708c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017092:	7c 41                	jl     c00170d5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017094:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017098:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001709c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00170a0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00170a4:	39 f9                	cmp    ecx,edi
c00170a6:	7e 22                	jle    c00170ca <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00170a8:	83 c5 04             	add    ebp,0x4
c00170ab:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00170b1:	7c 14                	jl     c00170c7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00170b3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00170b5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00170b8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00170bc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00170c0:	56                   	push   esi
c00170c1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00170c4:	83 c4 10             	add    esp,0x10
c00170c7:	47                   	inc    edi
c00170c8:	eb d2                	jmp    c001709c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00170ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170ce:	43                   	inc    ebx
c00170cf:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00170d3:	eb ab                	jmp    c0017080 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00170d5:	83 c4 1c             	add    esp,0x1c
c00170d8:	5b                   	pop    ebx
c00170d9:	5e                   	pop    esi
c00170da:	5f                   	pop    edi
c00170db:	5d                   	pop    ebp
c00170dc:	c3                   	ret    
c00170dd:	90                   	nop

c00170de <Video::clearScreen(unsigned int)>:
c00170de:	57                   	push   edi
c00170df:	56                   	push   esi
c00170e0:	53                   	push   ebx
c00170e1:	31 db                	xor    ebx,ebx
c00170e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00170e7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00170ed:	7e 1f                	jle    c001710e <Video::clearScreen(unsigned int)+0x30>
c00170ef:	31 ff                	xor    edi,edi
c00170f1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00170f7:	7e 12                	jle    c001710b <Video::clearScreen(unsigned int)+0x2d>
c00170f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00170fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170ff:	53                   	push   ebx
c0017100:	57                   	push   edi
c0017101:	47                   	inc    edi
c0017102:	56                   	push   esi
c0017103:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017106:	83 c4 10             	add    esp,0x10
c0017109:	eb e6                	jmp    c00170f1 <Video::clearScreen(unsigned int)+0x13>
c001710b:	43                   	inc    ebx
c001710c:	eb d9                	jmp    c00170e7 <Video::clearScreen(unsigned int)+0x9>
c001710e:	5b                   	pop    ebx
c001710f:	5e                   	pop    esi
c0017110:	5f                   	pop    edi
c0017111:	c3                   	ret    

c0017112 <Video::putpixel(int, int, unsigned int)>:
c0017112:	c7 44 24 04 5c af 02 c0 	mov    DWORD PTR [esp+0x4],0xc002af5c
c001711a:	e9 0a 31 00 00       	jmp    c001a229 <Krnl::panic(char const*)>
c001711f:	90                   	nop

c0017120 <Video::Video(char const*)>:
c0017120:	83 ec 0c             	sub    esp,0xc
c0017123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017127:	83 ec 08             	sub    esp,0x8
c001712a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001712e:	50                   	push   eax
c001712f:	e8 90 d0 ff ff       	call   c00141c4 <Device::Device(char const*)>
c0017134:	83 c4 10             	add    esp,0x10
c0017137:	ba e0 af 02 c0       	mov    edx,0xc002afe0
c001713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017140:	89 10                	mov    DWORD PTR [eax],edx
c0017142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017146:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017150:	90                   	nop
c0017151:	83 c4 0c             	add    esp,0xc
c0017154:	c3                   	ret    
c0017155:	90                   	nop

c0017156 <Video::~Video()>:
c0017156:	83 ec 0c             	sub    esp,0xc
c0017159:	ba e0 af 02 c0       	mov    edx,0xc002afe0
c001715e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017162:	89 10                	mov    DWORD PTR [eax],edx
c0017164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017168:	83 ec 0c             	sub    esp,0xc
c001716b:	50                   	push   eax
c001716c:	e8 35 cd ff ff       	call   c0013ea6 <Device::~Device()>
c0017171:	83 c4 10             	add    esp,0x10
c0017174:	90                   	nop
c0017175:	83 c4 0c             	add    esp,0xc
c0017178:	c3                   	ret    
c0017179:	90                   	nop

c001717a <Video::~Video()>:
c001717a:	83 ec 0c             	sub    esp,0xc
c001717d:	83 ec 0c             	sub    esp,0xc
c0017180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017184:	e8 cd ff ff ff       	call   c0017156 <Video::~Video()>
c0017189:	83 c4 10             	add    esp,0x10
c001718c:	83 ec 08             	sub    esp,0x8
c001718f:	68 64 01 00 00       	push   0x164
c0017194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017198:	e8 31 b9 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	83 c4 0c             	add    esp,0xc
c00171a3:	c3                   	ret    

c00171a4 <Video::isMonochrome()>:
c00171a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171a8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00171ae:	c3                   	ret    
c00171af:	90                   	nop

c00171b0 <Video::getWidth()>:
c00171b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171b4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00171ba:	c3                   	ret    
c00171bb:	90                   	nop

c00171bc <Video::getHeight()>:
c00171bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171c6:	c3                   	ret    
c00171c7:	90                   	nop

c00171c8 <Video::drawCursor(int, int, unsigned char*, int)>:
c00171c8:	55                   	push   ebp
c00171c9:	57                   	push   edi
c00171ca:	56                   	push   esi
c00171cb:	53                   	push   ebx
c00171cc:	83 ec 2c             	sub    esp,0x2c
c00171cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00171d3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171d7:	83 f8 01             	cmp    eax,0x1
c00171da:	19 c9                	sbb    ecx,ecx
c00171dc:	31 db                	xor    ebx,ebx
c00171de:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00171e2:	89 cd                	mov    ebp,ecx
c00171e4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00171ec:	f7 d5                	not    ebp
c00171ee:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00171f4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00171f8:	01 d8                	add    eax,ebx
c00171fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171fe:	56                   	push   esi
c00171ff:	e8 b8 ff ff ff       	call   c00171bc <Video::getHeight()>
c0017204:	59                   	pop    ecx
c0017205:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017209:	7e 70                	jle    c001727b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001720b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001720f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017213:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017216:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001721a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001721e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017225:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017229:	89 f8                	mov    eax,edi
c001722b:	83 c0 20             	add    eax,0x20
c001722e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017232:	56                   	push   esi
c0017233:	e8 78 ff ff ff       	call   c00171b0 <Video::getWidth()>
c0017238:	5a                   	pop    edx
c0017239:	39 c7                	cmp    edi,eax
c001723b:	7d 34                	jge    c0017271 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001723d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017242:	74 05                	je     c0017249 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017244:	8b 06                	mov    eax,DWORD PTR [esi]
c0017246:	55                   	push   ebp
c0017247:	eb 0d                	jmp    c0017256 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017249:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001724e:	74 12                	je     c0017262 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017250:	8b 06                	mov    eax,DWORD PTR [esi]
c0017252:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017256:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001725a:	57                   	push   edi
c001725b:	56                   	push   esi
c001725c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001725f:	83 c4 10             	add    esp,0x10
c0017262:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017266:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001726a:	47                   	inc    edi
c001726b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001726f:	75 c1                	jne    c0017232 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017271:	43                   	inc    ebx
c0017272:	83 fb 20             	cmp    ebx,0x20
c0017275:	0f 85 79 ff ff ff    	jne    c00171f4 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001727b:	83 c4 2c             	add    esp,0x2c
c001727e:	5b                   	pop    ebx
c001727f:	5e                   	pop    esi
c0017280:	5f                   	pop    edi
c0017281:	5d                   	pop    ebp
c0017282:	c3                   	ret    
c0017283:	90                   	nop

c0017284 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017284:	55                   	push   ebp
c0017285:	57                   	push   edi
c0017286:	56                   	push   esi
c0017287:	53                   	push   ebx
c0017288:	83 ec 28             	sub    esp,0x28
c001728b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001728f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017293:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017297:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001729b:	c1 e7 08             	shl    edi,0x8
c001729e:	01 c7                	add    edi,eax
c00172a0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00172a4:	c1 e0 08             	shl    eax,0x8
c00172a7:	01 d0                	add    eax,edx
c00172a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172b1:	0f af c7             	imul   eax,edi
c00172b4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00172bb:	50                   	push   eax
c00172bc:	e8 7f 85 ff ff       	call   c000f840 <malloc>
c00172c1:	83 c4 10             	add    esp,0x10
c00172c4:	89 c5                	mov    ebp,eax
c00172c6:	85 c0                	test   eax,eax
c00172c8:	75 15                	jne    c00172df <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00172ca:	83 ec 0c             	sub    esp,0xc
c00172cd:	68 7d af 02 c0       	push   0xc002af7d
c00172d2:	e8 d7 b8 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00172d7:	83 c4 10             	add    esp,0x10
c00172da:	e9 1c 01 00 00       	jmp    c00173fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00172df:	be 12 00 00 00       	mov    esi,0x12
c00172e4:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00172e8:	74 11                	je     c00172fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00172ea:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00172ee:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00172f2:	c1 fe 03             	sar    esi,0x3
c00172f5:	0f af f0             	imul   esi,eax
c00172f8:	83 c6 12             	add    esi,0x12
c00172fb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00172ff:	74 04                	je     c0017305 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017301:	85 ff                	test   edi,edi
c0017303:	75 12                	jne    c0017317 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017305:	83 ec 0c             	sub    esp,0xc
c0017308:	68 94 af 02 c0       	push   0xc002af94
c001730d:	e8 9c b8 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0017312:	e9 ce 00 00 00       	jmp    c00173e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017317:	52                   	push   edx
c0017318:	52                   	push   edx
c0017319:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001731d:	50                   	push   eax
c001731e:	68 a9 af 02 c0       	push   0xc002afa9
c0017323:	e8 86 b8 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0017328:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001732c:	83 c4 10             	add    esp,0x10
c001732f:	80 fa 02             	cmp    dl,0x2
c0017332:	0f 85 98 00 00 00    	jne    c00173d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017338:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001733d:	75 10                	jne    c001734f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001733f:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017343:	75 0a                	jne    c001734f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017345:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017348:	83 e8 18             	sub    eax,0x18
c001734b:	a8 f7                	test   al,0xf7
c001734d:	74 0a                	je     c0017359 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001734f:	83 ec 0c             	sub    esp,0xc
c0017352:	68 b6 af 02 c0       	push   0xc002afb6
c0017357:	eb 7f                	jmp    c00173d8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017359:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017361:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017369:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001736d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017375:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017379:	75 0c                	jne    c0017387 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001737b:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017380:	c1 e0 18             	shl    eax,0x18
c0017383:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017387:	41                   	inc    ecx
c0017388:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001738d:	c1 e2 10             	shl    edx,0x10
c0017390:	89 d0                	mov    eax,edx
c0017392:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017397:	c1 e2 08             	shl    edx,0x8
c001739a:	09 c2                	or     edx,eax
c001739c:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00173a0:	09 c2                	or     edx,eax
c00173a2:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00173a6:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00173aa:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00173ae:	c1 f8 03             	sar    eax,0x3
c00173b1:	01 c6                	add    esi,eax
c00173b3:	89 c8                	mov    eax,ecx
c00173b5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00173b9:	39 c7                	cmp    edi,eax
c00173bb:	7f b0                	jg     c001736d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00173bd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00173c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00173c5:	39 14 24             	cmp    DWORD PTR [esp],edx
c00173c8:	7e 22                	jle    c00173ec <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00173ca:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00173ce:	eb 99                	jmp    c0017369 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00173d0:	50                   	push   eax
c00173d1:	50                   	push   eax
c00173d2:	52                   	push   edx
c00173d3:	68 c4 af 02 c0       	push   0xc002afc4
c00173d8:	e8 d1 b7 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00173dd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173e0:	e8 6b 84 ff ff       	call   c000f850 <free>
c00173e5:	83 c4 10             	add    esp,0x10
c00173e8:	31 ed                	xor    ebp,ebp
c00173ea:	eb 0f                	jmp    c00173fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00173ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173f0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00173f3:	89 38                	mov    DWORD PTR [eax],edi
c00173f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173f9:	89 08                	mov    DWORD PTR [eax],ecx
c00173fb:	83 c4 1c             	add    esp,0x1c
c00173fe:	89 e8                	mov    eax,ebp
c0017400:	5b                   	pop    ebx
c0017401:	5e                   	pop    esi
c0017402:	5f                   	pop    edi
c0017403:	5d                   	pop    ebp
c0017404:	c3                   	ret    
c0017405:	90                   	nop

c0017406 <Video::putTGA(int, int, unsigned char*, int)>:
c0017406:	55                   	push   ebp
c0017407:	57                   	push   edi
c0017408:	56                   	push   esi
c0017409:	53                   	push   ebx
c001740a:	83 ec 28             	sub    esp,0x28
c001740d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017411:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017415:	50                   	push   eax
c0017416:	8d 44 24 18          	lea    eax,[esp+0x18]
c001741a:	50                   	push   eax
c001741b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001741f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017423:	56                   	push   esi
c0017424:	e8 5b fe ff ff       	call   c0017284 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017429:	83 c4 20             	add    esp,0x20
c001742c:	85 c0                	test   eax,eax
c001742e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017432:	74 35                	je     c0017469 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017434:	89 c7                	mov    edi,eax
c0017436:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001743a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001743e:	39 d8                	cmp    eax,ebx
c0017440:	7e 27                	jle    c0017469 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017442:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017446:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001744a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001744e:	39 e8                	cmp    eax,ebp
c0017450:	7e 14                	jle    c0017466 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017452:	8b 06                	mov    eax,DWORD PTR [esi]
c0017454:	83 c7 04             	add    edi,0x4
c0017457:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001745a:	53                   	push   ebx
c001745b:	55                   	push   ebp
c001745c:	45                   	inc    ebp
c001745d:	56                   	push   esi
c001745e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017461:	83 c4 10             	add    esp,0x10
c0017464:	eb e0                	jmp    c0017446 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017466:	43                   	inc    ebx
c0017467:	eb cd                	jmp    c0017436 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017469:	83 c4 1c             	add    esp,0x1c
c001746c:	5b                   	pop    ebx
c001746d:	5e                   	pop    esi
c001746e:	5f                   	pop    edi
c001746f:	5d                   	pop    ebp
c0017470:	c3                   	ret    
c0017471:	90                   	nop

c0017472 <ACPI::close(int, int, void*)>:
c0017472:	83 ec 1c             	sub    esp,0x1c
c0017475:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001747d:	74 0a                	je     c0017489 <ACPI::close(int, int, void*)+0x17>
c001747f:	b8 00 00 00 00       	mov    eax,0x0
c0017484:	e9 9a 00 00 00       	jmp    c0017523 <ACPI::close(int, int, void*)+0xb1>
c0017489:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001748e:	75 37                	jne    c00174c7 <ACPI::close(int, int, void*)+0x55>
c0017490:	83 ec 0c             	sub    esp,0xc
c0017493:	68 20 b0 02 c0       	push   0xc002b020
c0017498:	e8 11 b7 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001749d:	83 c4 10             	add    esp,0x10
c00174a0:	a1 68 07 03 c0       	mov    eax,ds:0xc0030768
c00174a5:	85 c0                	test   eax,eax
c00174a7:	74 07                	je     c00174b0 <ACPI::close(int, int, void*)+0x3e>
c00174a9:	a1 68 07 03 c0       	mov    eax,ds:0xc0030768
c00174ae:	ff d0                	call   eax
c00174b0:	83 ec 0c             	sub    esp,0xc
c00174b3:	68 44 b1 02 c0       	push   0xc002b144
c00174b8:	e8 6c 2d 00 00       	call   c001a229 <Krnl::panic(char const*)>
c00174bd:	83 c4 10             	add    esp,0x10
c00174c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00174c5:	eb 5c                	jmp    c0017523 <ACPI::close(int, int, void*)+0xb1>
c00174c7:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00174cc:	75 50                	jne    c001751e <ACPI::close(int, int, void*)+0xac>
c00174ce:	a1 64 07 03 c0       	mov    eax,ds:0xc0030764
c00174d3:	85 c0                	test   eax,eax
c00174d5:	74 07                	je     c00174de <ACPI::close(int, int, void*)+0x6c>
c00174d7:	a1 64 07 03 c0       	mov    eax,ds:0xc0030764
c00174dc:	ff d0                	call   eax
c00174de:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00174e3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00174e8:	83 e0 02             	and    eax,0x2
c00174eb:	74 1c                	je     c0017509 <ACPI::close(int, int, void*)+0x97>
c00174ed:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00174f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174f8:	89 c2                	mov    edx,eax
c00174fa:	ec                   	in     al,dx
c00174fb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00174ff:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017503:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017507:	eb da                	jmp    c00174e3 <ACPI::close(int, int, void*)+0x71>
c0017509:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017510:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017515:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017519:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001751d:	ee                   	out    dx,al
c001751e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017523:	83 c4 1c             	add    esp,0x1c
c0017526:	c3                   	ret    

c0017527 <findRSDP()>:
c0017527:	83 ec 1c             	sub    esp,0x1c
c001752a:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c001752f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017535:	83 e0 04             	and    eax,0x4
c0017538:	84 c0                	test   al,al
c001753a:	75 07                	jne    c0017543 <findRSDP()+0x1c>
c001753c:	b8 00 00 00 00       	mov    eax,0x0
c0017541:	eb 6a                	jmp    c00175ad <findRSDP()+0x86>
c0017543:	a1 f0 e0 02 c0       	mov    eax,ds:0xc002e0f0
c0017548:	3d ff 07 00 00       	cmp    eax,0x7ff
c001754d:	7f 1b                	jg     c001756a <findRSDP()+0x43>
c001754f:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0017554:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001755a:	83 e2 fb             	and    edx,0xfffffffb
c001755d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017563:	b8 00 00 00 00       	mov    eax,0x0
c0017568:	eb 43                	jmp    c00175ad <findRSDP()+0x86>
c001756a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017572:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001757a:	77 2c                	ja     c00175a8 <findRSDP()+0x81>
c001757c:	83 ec 04             	sub    esp,0x4
c001757f:	6a 08                	push   0x8
c0017581:	68 2d b0 02 c0       	push   0xc002b02d
c0017586:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001758a:	e8 b1 90 fe ff       	call   c0000640 <memcmp>
c001758f:	83 c4 10             	add    esp,0x10
c0017592:	85 c0                	test   eax,eax
c0017594:	0f 94 c0             	sete   al
c0017597:	84 c0                	test   al,al
c0017599:	74 06                	je     c00175a1 <findRSDP()+0x7a>
c001759b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001759f:	eb 0c                	jmp    c00175ad <findRSDP()+0x86>
c00175a1:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00175a6:	eb ca                	jmp    c0017572 <findRSDP()+0x4b>
c00175a8:	b8 00 00 00 00       	mov    eax,0x0
c00175ad:	83 c4 1c             	add    esp,0x1c
c00175b0:	c3                   	ret    

c00175b1 <loadACPITables(unsigned char*)>:
c00175b1:	56                   	push   esi
c00175b2:	53                   	push   ebx
c00175b3:	83 ec 44             	sub    esp,0x44
c00175b6:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00175bb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175c1:	83 e0 04             	and    eax,0x4
c00175c4:	84 c0                	test   al,al
c00175c6:	0f 84 05 02 00 00    	je     c00177d1 <loadACPITables(unsigned char*)+0x220>
c00175cc:	a0 80 09 03 c0       	mov    al,ds:0xc0030980
c00175d1:	84 c0                	test   al,al
c00175d3:	74 75                	je     c001764a <loadACPITables(unsigned char*)+0x99>
c00175d5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00175e4:	83 e8 24             	sub    eax,0x24
c00175e7:	c1 e8 03             	shr    eax,0x3
c00175ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00175ee:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00175f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00175fa:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00175fe:	0f 8d b2 00 00 00    	jge    c00176b6 <loadACPITables(unsigned char*)+0x105>
c0017604:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017608:	83 c0 24             	add    eax,0x24
c001760b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001760f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017613:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017617:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001761b:	c1 e0 03             	shl    eax,0x3
c001761e:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017622:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017626:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017629:	8b 00                	mov    eax,DWORD PTR [eax]
c001762b:	89 c1                	mov    ecx,eax
c001762d:	a1 6c 07 03 c0       	mov    eax,ds:0xc003076c
c0017632:	8d 50 01             	lea    edx,[eax+0x1]
c0017635:	89 15 6c 07 03 c0    	mov    DWORD PTR ds:0xc003076c,edx
c001763b:	89 ca                	mov    edx,ecx
c001763d:	89 14 c5 84 07 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf87c],edx
c0017644:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017648:	eb ac                	jmp    c00175f6 <loadACPITables(unsigned char*)+0x45>
c001764a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001764e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017656:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017659:	83 e8 24             	sub    eax,0x24
c001765c:	c1 e8 02             	shr    eax,0x2
c001765f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017663:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001766b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001766f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017673:	7d 41                	jge    c00176b6 <loadACPITables(unsigned char*)+0x105>
c0017675:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017679:	83 c0 24             	add    eax,0x24
c001767c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017680:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017684:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017688:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001768c:	c1 e0 02             	shl    eax,0x2
c001768f:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017697:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017699:	a1 6c 07 03 c0       	mov    eax,ds:0xc003076c
c001769e:	8d 50 01             	lea    edx,[eax+0x1]
c00176a1:	89 15 6c 07 03 c0    	mov    DWORD PTR ds:0xc003076c,edx
c00176a7:	89 ca                	mov    edx,ecx
c00176a9:	89 14 c5 84 07 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf87c],edx
c00176b0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00176b4:	eb b5                	jmp    c001766b <loadACPITables(unsigned char*)+0xba>
c00176b6:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00176be:	a1 6c 07 03 c0       	mov    eax,ds:0xc003076c
c00176c3:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00176c7:	0f 8d 05 01 00 00    	jge    c00177d2 <loadACPITables(unsigned char*)+0x221>
c00176cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176d1:	8b 04 c5 84 07 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf87c]
c00176d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176e8:	25 ff 0f 00 00       	and    eax,0xfff
c00176ed:	89 c6                	mov    esi,eax
c00176ef:	e8 bd a5 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c00176f4:	89 c3                	mov    ebx,eax
c00176f6:	83 ec 0c             	sub    esp,0xc
c00176f9:	6a 01                	push   0x1
c00176fb:	e8 21 a4 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c0017700:	83 c4 10             	add    esp,0x10
c0017703:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017707:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001770d:	83 ec 0c             	sub    esp,0xc
c0017710:	6a 01                	push   0x1
c0017712:	6a 01                	push   0x1
c0017714:	50                   	push   eax
c0017715:	52                   	push   edx
c0017716:	53                   	push   ebx
c0017717:	e8 c4 ad ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001771c:	83 c4 20             	add    esp,0x20
c001771f:	09 f0                	or     eax,esi
c0017721:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017725:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017729:	c1 e0 03             	shl    eax,0x3
c001772c:	05 80 07 03 c0       	add    eax,0xc0030780
c0017731:	83 ec 04             	sub    esp,0x4
c0017734:	6a 04                	push   0x4
c0017736:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001773a:	50                   	push   eax
c001773b:	e8 04 90 fe ff       	call   c0000744 <memcpy>
c0017740:	83 c4 10             	add    esp,0x10
c0017743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017747:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001774a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001774e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017752:	05 00 10 00 00       	add    eax,0x1000
c0017757:	c1 e8 0c             	shr    eax,0xc
c001775a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001775e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017762:	89 04 24             	mov    DWORD PTR [esp],eax
c0017765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017769:	25 ff 0f 00 00       	and    eax,0xfff
c001776e:	89 c6                	mov    esi,eax
c0017770:	e8 3c a5 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0017775:	89 c3                	mov    ebx,eax
c0017777:	83 ec 0c             	sub    esp,0xc
c001777a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001777e:	e8 9e a3 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c0017783:	83 c4 10             	add    esp,0x10
c0017786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001778a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017790:	83 ec 0c             	sub    esp,0xc
c0017793:	6a 01                	push   0x1
c0017795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017799:	50                   	push   eax
c001779a:	52                   	push   edx
c001779b:	53                   	push   ebx
c001779c:	e8 3f ad ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177a1:	83 c4 20             	add    esp,0x20
c00177a4:	09 f0                	or     eax,esi
c00177a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00177aa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00177ad:	83 ec 0c             	sub    esp,0xc
c00177b0:	50                   	push   eax
c00177b1:	e8 cf a6 ff ff       	call   c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c00177b6:	83 c4 10             	add    esp,0x10
c00177b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00177c1:	89 14 c5 84 07 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf87c],edx
c00177c8:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00177cc:	e9 ed fe ff ff       	jmp    c00176be <loadACPITables(unsigned char*)+0x10d>
c00177d1:	90                   	nop
c00177d2:	83 c4 44             	add    esp,0x44
c00177d5:	5b                   	pop    ebx
c00177d6:	5e                   	pop    esi
c00177d7:	c3                   	ret    

c00177d8 <findRSDT(unsigned char*)>:
c00177d8:	56                   	push   esi
c00177d9:	53                   	push   ebx
c00177da:	83 ec 44             	sub    esp,0x44
c00177dd:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00177e2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00177e8:	83 e0 04             	and    eax,0x4
c00177eb:	84 c0                	test   al,al
c00177ed:	75 0a                	jne    c00177f9 <findRSDT(unsigned char*)+0x21>
c00177ef:	b8 00 00 00 00       	mov    eax,0x0
c00177f4:	e9 f7 00 00 00       	jmp    c00178f0 <findRSDT(unsigned char*)+0x118>
c00177f9:	83 ec 04             	sub    esp,0x4
c00177fc:	6a 24                	push   0x24
c00177fe:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017802:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017806:	50                   	push   eax
c0017807:	e8 38 8f fe ff       	call   c0000744 <memcpy>
c001780c:	83 c4 10             	add    esp,0x10
c001780f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017813:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017817:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001781f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017823:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017827:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001782b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001782f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017833:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017837:	25 ff 0f 00 00       	and    eax,0xfff
c001783c:	89 c6                	mov    esi,eax
c001783e:	e8 6e a4 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0017843:	89 c3                	mov    ebx,eax
c0017845:	83 ec 0c             	sub    esp,0xc
c0017848:	6a 02                	push   0x2
c001784a:	e8 d2 a2 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c001784f:	83 c4 10             	add    esp,0x10
c0017852:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017856:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001785c:	83 ec 0c             	sub    esp,0xc
c001785f:	6a 01                	push   0x1
c0017861:	6a 02                	push   0x2
c0017863:	50                   	push   eax
c0017864:	52                   	push   edx
c0017865:	53                   	push   ebx
c0017866:	e8 75 ac ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001786b:	83 c4 20             	add    esp,0x20
c001786e:	09 f0                	or     eax,esi
c0017870:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017874:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017878:	25 ff 0f 00 00       	and    eax,0xfff
c001787d:	89 c6                	mov    esi,eax
c001787f:	e8 2d a4 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c0017884:	89 c3                	mov    ebx,eax
c0017886:	83 ec 0c             	sub    esp,0xc
c0017889:	6a 02                	push   0x2
c001788b:	e8 91 a2 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c0017890:	83 c4 10             	add    esp,0x10
c0017893:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017897:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001789d:	83 ec 0c             	sub    esp,0xc
c00178a0:	6a 01                	push   0x1
c00178a2:	6a 02                	push   0x2
c00178a4:	50                   	push   eax
c00178a5:	52                   	push   edx
c00178a6:	53                   	push   ebx
c00178a7:	e8 34 ac ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00178ac:	83 c4 20             	add    esp,0x20
c00178af:	09 f0                	or     eax,esi
c00178b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00178b5:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00178ba:	75 11                	jne    c00178cd <findRSDT(unsigned char*)+0xf5>
c00178bc:	c6 05 80 09 03 c0 00 	mov    BYTE PTR ds:0xc0030980,0x0
c00178c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178c7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00178cb:	eb 1f                	jmp    c00178ec <findRSDT(unsigned char*)+0x114>
c00178cd:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00178d2:	75 11                	jne    c00178e5 <findRSDT(unsigned char*)+0x10d>
c00178d4:	c6 05 80 09 03 c0 01 	mov    BYTE PTR ds:0xc0030980,0x1
c00178db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178df:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00178e3:	eb 07                	jmp    c00178ec <findRSDT(unsigned char*)+0x114>
c00178e5:	b8 00 00 00 00       	mov    eax,0x0
c00178ea:	eb 04                	jmp    c00178f0 <findRSDT(unsigned char*)+0x118>
c00178ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178f0:	83 c4 44             	add    esp,0x44
c00178f3:	5b                   	pop    ebx
c00178f4:	5e                   	pop    esi
c00178f5:	c3                   	ret    

c00178f6 <findDataTable(unsigned char*, char*)>:
c00178f6:	83 ec 1c             	sub    esp,0x1c
c00178f9:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00178fe:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017904:	83 e0 04             	and    eax,0x4
c0017907:	84 c0                	test   al,al
c0017909:	75 07                	jne    c0017912 <findDataTable(unsigned char*, char*)+0x1c>
c001790b:	b8 00 00 00 00       	mov    eax,0x0
c0017910:	eb 7c                	jmp    c001798e <findDataTable(unsigned char*, char*)+0x98>
c0017912:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001791a:	a1 6c 07 03 c0       	mov    eax,ds:0xc003076c
c001791f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017923:	7d 3a                	jge    c001795f <findDataTable(unsigned char*, char*)+0x69>
c0017925:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017929:	c1 e0 03             	shl    eax,0x3
c001792c:	05 80 07 03 c0       	add    eax,0xc0030780
c0017931:	83 ec 04             	sub    esp,0x4
c0017934:	6a 04                	push   0x4
c0017936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001793a:	50                   	push   eax
c001793b:	e8 00 8d fe ff       	call   c0000640 <memcmp>
c0017940:	83 c4 10             	add    esp,0x10
c0017943:	85 c0                	test   eax,eax
c0017945:	0f 94 c0             	sete   al
c0017948:	84 c0                	test   al,al
c001794a:	74 0d                	je     c0017959 <findDataTable(unsigned char*, char*)+0x63>
c001794c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017950:	8b 04 c5 84 07 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf87c]
c0017957:	eb 35                	jmp    c001798e <findDataTable(unsigned char*, char*)+0x98>
c0017959:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001795d:	eb bb                	jmp    c001791a <findDataTable(unsigned char*, char*)+0x24>
c001795f:	a0 80 09 03 c0       	mov    al,ds:0xc0030980
c0017964:	84 c0                	test   al,al
c0017966:	74 07                	je     c001796f <findDataTable(unsigned char*, char*)+0x79>
c0017968:	b8 58 00 00 00       	mov    eax,0x58
c001796d:	eb 05                	jmp    c0017974 <findDataTable(unsigned char*, char*)+0x7e>
c001796f:	b8 52 00 00 00       	mov    eax,0x52
c0017974:	83 ec 04             	sub    esp,0x4
c0017977:	50                   	push   eax
c0017978:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001797c:	68 68 b1 02 c0       	push   0xc002b168
c0017981:	e8 28 b2 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0017986:	83 c4 10             	add    esp,0x10
c0017989:	b8 00 00 00 00       	mov    eax,0x0
c001798e:	83 c4 1c             	add    esp,0x1c
c0017991:	c3                   	ret    

c0017992 <scanMADT()>:
c0017992:	53                   	push   ebx
c0017993:	83 ec 38             	sub    esp,0x38
c0017996:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c001799b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179a1:	83 e0 04             	and    eax,0x4
c00179a4:	84 c0                	test   al,al
c00179a6:	0f 84 63 04 00 00    	je     c0017e0f <scanMADT()+0x47d>
c00179ac:	e8 76 fb ff ff       	call   c0017527 <findRSDP()>
c00179b1:	a3 8c 09 03 c0       	mov    ds:0xc003098c,eax
c00179b6:	a1 8c 09 03 c0       	mov    eax,ds:0xc003098c
c00179bb:	85 c0                	test   eax,eax
c00179bd:	75 19                	jne    c00179d8 <scanMADT()+0x46>
c00179bf:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00179c4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179ca:	83 e2 fb             	and    edx,0xfffffffb
c00179cd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179d3:	e9 3b 04 00 00       	jmp    c0017e13 <scanMADT()+0x481>
c00179d8:	a1 8c 09 03 c0       	mov    eax,ds:0xc003098c
c00179dd:	83 ec 0c             	sub    esp,0xc
c00179e0:	50                   	push   eax
c00179e1:	e8 f2 fd ff ff       	call   c00177d8 <findRSDT(unsigned char*)>
c00179e6:	83 c4 10             	add    esp,0x10
c00179e9:	a3 88 09 03 c0       	mov    ds:0xc0030988,eax
c00179ee:	a1 88 09 03 c0       	mov    eax,ds:0xc0030988
c00179f3:	85 c0                	test   eax,eax
c00179f5:	75 19                	jne    c0017a10 <scanMADT()+0x7e>
c00179f7:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00179fc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a02:	83 e2 fb             	and    edx,0xfffffffb
c0017a05:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a0b:	e9 03 04 00 00       	jmp    c0017e13 <scanMADT()+0x481>
c0017a10:	a1 88 09 03 c0       	mov    eax,ds:0xc0030988
c0017a15:	83 ec 0c             	sub    esp,0xc
c0017a18:	50                   	push   eax
c0017a19:	e8 93 fb ff ff       	call   c00175b1 <loadACPITables(unsigned char*)>
c0017a1e:	83 c4 10             	add    esp,0x10
c0017a21:	a1 88 09 03 c0       	mov    eax,ds:0xc0030988
c0017a26:	83 ec 08             	sub    esp,0x8
c0017a29:	68 36 b0 02 c0       	push   0xc002b036
c0017a2e:	50                   	push   eax
c0017a2f:	e8 c2 fe ff ff       	call   c00178f6 <findDataTable(unsigned char*, char*)>
c0017a34:	83 c4 10             	add    esp,0x10
c0017a37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a3b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017a40:	75 19                	jne    c0017a5b <scanMADT()+0xc9>
c0017a42:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0017a47:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a4d:	83 e2 fe             	and    edx,0xfffffffe
c0017a50:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a56:	e9 b8 03 00 00       	jmp    c0017e13 <scanMADT()+0x481>
c0017a5b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017a63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a6a:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017a6e:	0f 87 9f 03 00 00    	ja     c0017e13 <scanMADT()+0x481>
c0017a74:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017a7c:	0f 87 91 03 00 00    	ja     c0017e13 <scanMADT()+0x481>
c0017a82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a86:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a8e:	8d 50 01             	lea    edx,[eax+0x1]
c0017a91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a99:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a9d:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017aa1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aa5:	8d 50 01             	lea    edx,[eax+0x1]
c0017aa8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017aac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ab0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ab4:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017ab8:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017abd:	0f 86 4f 03 00 00    	jbe    c0017e12 <scanMADT()+0x480>
c0017ac3:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017ac8:	75 57                	jne    c0017b21 <scanMADT()+0x18f>
c0017aca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ace:	8d 50 01             	lea    edx,[eax+0x1]
c0017ad1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ad5:	8a 15 80 0b 03 c0    	mov    dl,BYTE PTR ds:0xc0030b80
c0017adb:	0f b6 d2             	movzx  edx,dl
c0017ade:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ae2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ae6:	88 82 c0 0b 03 c0    	mov    BYTE PTR [edx-0x3ffcf440],al
c0017aec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017af0:	8d 50 01             	lea    edx,[eax+0x1]
c0017af3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017af7:	8a 15 80 0b 03 c0    	mov    dl,BYTE PTR ds:0xc0030b80
c0017afd:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017b00:	88 0d 80 0b 03 c0    	mov    BYTE PTR ds:0xc0030b80,cl
c0017b06:	0f b6 d2             	movzx  edx,dl
c0017b09:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b0d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017b11:	88 82 a0 0b 03 c0    	mov    BYTE PTR [edx-0x3ffcf460],al
c0017b17:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b1c:	e9 da 02 00 00       	jmp    c0017dfb <scanMADT()+0x469>
c0017b21:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017b26:	0f 85 14 01 00 00    	jne    c0017c40 <scanMADT()+0x2ae>
c0017b2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b30:	8d 50 01             	lea    edx,[eax+0x1]
c0017b33:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b37:	8a 15 40 0a 03 c0    	mov    dl,BYTE PTR ds:0xc0030a40
c0017b3d:	0f b6 d2             	movzx  edx,dl
c0017b40:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b44:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017b48:	88 82 60 0a 03 c0    	mov    BYTE PTR [edx-0x3ffcf5a0],al
c0017b4e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017b52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b5a:	01 d0                	add    eax,edx
c0017b5c:	83 c0 2c             	add    eax,0x2c
c0017b5f:	8a 00                	mov    al,BYTE PTR [eax]
c0017b61:	0f b6 d0             	movzx  edx,al
c0017b64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b68:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b6f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b73:	0f b6 c0             	movzx  eax,al
c0017b76:	c1 e0 08             	shl    eax,0x8
c0017b79:	89 d1                	mov    ecx,edx
c0017b7b:	09 c1                	or     ecx,eax
c0017b7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b81:	8d 50 02             	lea    edx,[eax+0x2]
c0017b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b88:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b8c:	0f b6 c0             	movzx  eax,al
c0017b8f:	c1 e0 10             	shl    eax,0x10
c0017b92:	09 c1                	or     ecx,eax
c0017b94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b98:	8d 50 03             	lea    edx,[eax+0x3]
c0017b9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b9f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ba3:	0f b6 c0             	movzx  eax,al
c0017ba6:	c1 e0 18             	shl    eax,0x18
c0017ba9:	09 c1                	or     ecx,eax
c0017bab:	89 ca                	mov    edx,ecx
c0017bad:	a0 40 0a 03 c0       	mov    al,ds:0xc0030a40
c0017bb2:	0f b6 c0             	movzx  eax,al
c0017bb5:	89 14 85 80 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf580],edx
c0017bbc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017bc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bc9:	01 d0                	add    eax,edx
c0017bcb:	83 c0 2c             	add    eax,0x2c
c0017bce:	8a 00                	mov    al,BYTE PTR [eax]
c0017bd0:	0f b6 d0             	movzx  edx,al
c0017bd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bd7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bde:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017be2:	0f b6 c0             	movzx  eax,al
c0017be5:	c1 e0 08             	shl    eax,0x8
c0017be8:	89 d1                	mov    ecx,edx
c0017bea:	09 c1                	or     ecx,eax
c0017bec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0017bf3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bf7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bfb:	0f b6 c0             	movzx  eax,al
c0017bfe:	c1 e0 10             	shl    eax,0x10
c0017c01:	09 c1                	or     ecx,eax
c0017c03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c07:	8d 50 03             	lea    edx,[eax+0x3]
c0017c0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c0e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c12:	0f b6 c0             	movzx  eax,al
c0017c15:	c1 e0 18             	shl    eax,0x18
c0017c18:	09 c1                	or     ecx,eax
c0017c1a:	89 ca                	mov    edx,ecx
c0017c1c:	a0 40 0a 03 c0       	mov    al,ds:0xc0030a40
c0017c21:	0f b6 c0             	movzx  eax,al
c0017c24:	89 14 85 00 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf500],edx
c0017c2b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c30:	a0 40 0a 03 c0       	mov    al,ds:0xc0030a40
c0017c35:	40                   	inc    eax
c0017c36:	a2 40 0a 03 c0       	mov    ds:0xc0030a40,al
c0017c3b:	e9 bb 01 00 00       	jmp    c0017dfb <scanMADT()+0x469>
c0017c40:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017c45:	0f 85 e9 00 00 00    	jne    c0017d34 <scanMADT()+0x3a2>
c0017c4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c4f:	8d 50 01             	lea    edx,[eax+0x1]
c0017c52:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c56:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c5a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c5e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017c62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c66:	8d 50 01             	lea    edx,[eax+0x1]
c0017c69:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c71:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c75:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017c79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c81:	01 d0                	add    eax,edx
c0017c83:	83 c0 2c             	add    eax,0x2c
c0017c86:	8a 00                	mov    al,BYTE PTR [eax]
c0017c88:	0f b6 d0             	movzx  edx,al
c0017c8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c8f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c92:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c96:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c9a:	0f b6 c0             	movzx  eax,al
c0017c9d:	c1 e0 08             	shl    eax,0x8
c0017ca0:	89 d1                	mov    ecx,edx
c0017ca2:	09 c1                	or     ecx,eax
c0017ca4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ca8:	8d 50 02             	lea    edx,[eax+0x2]
c0017cab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017caf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017cb3:	0f b6 c0             	movzx  eax,al
c0017cb6:	c1 e0 10             	shl    eax,0x10
c0017cb9:	09 c1                	or     ecx,eax
c0017cbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cbf:	8d 50 03             	lea    edx,[eax+0x3]
c0017cc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cc6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017cca:	0f b6 c0             	movzx  eax,al
c0017ccd:	c1 e0 18             	shl    eax,0x18
c0017cd0:	09 c8                	or     eax,ecx
c0017cd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017cd6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017cdb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ce3:	01 d0                	add    eax,edx
c0017ce5:	83 c0 2c             	add    eax,0x2c
c0017ce8:	8a 00                	mov    al,BYTE PTR [eax]
c0017cea:	0f b6 c0             	movzx  eax,al
c0017ced:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017cf1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017cf4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cf8:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017cfc:	0f b6 d2             	movzx  edx,dl
c0017cff:	c1 e2 08             	shl    edx,0x8
c0017d02:	09 d0                	or     eax,edx
c0017d04:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017d09:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017d0e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017d13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d17:	88 90 00 d3 02 c0    	mov    BYTE PTR [eax-0x3ffd2d00],dl
c0017d1d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017d22:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017d27:	66 89 84 12 20 0a 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf5e0],ax
c0017d2f:	e9 c7 00 00 00       	jmp    c0017dfb <scanMADT()+0x469>
c0017d34:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017d39:	0f 85 b0 00 00 00    	jne    c0017def <scanMADT()+0x45d>
c0017d3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d43:	8d 50 01             	lea    edx,[eax+0x1]
c0017d46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d4e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d52:	0f b6 c0             	movzx  eax,al
c0017d55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d61:	01 d0                	add    eax,edx
c0017d63:	83 c0 2c             	add    eax,0x2c
c0017d66:	8a 00                	mov    al,BYTE PTR [eax]
c0017d68:	0f b6 d0             	movzx  edx,al
c0017d6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d6f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d76:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d7a:	0f b6 c0             	movzx  eax,al
c0017d7d:	c1 e0 08             	shl    eax,0x8
c0017d80:	09 d0                	or     eax,edx
c0017d82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d86:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017d8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d8f:	8d 50 01             	lea    edx,[eax+0x1]
c0017d92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d96:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d9a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d9e:	0f b6 c0             	movzx  eax,al
c0017da1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017da9:	c1 e0 08             	shl    eax,0x8
c0017dac:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017db0:	89 c1                	mov    ecx,eax
c0017db2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017db6:	c1 e0 18             	shl    eax,0x18
c0017db9:	89 c3                	mov    ebx,eax
c0017dbb:	a1 90 09 03 c0       	mov    eax,ds:0xc0030990
c0017dc0:	8d 50 01             	lea    edx,[eax+0x1]
c0017dc3:	89 15 90 09 03 c0    	mov    DWORD PTR ds:0xc0030990,edx
c0017dc9:	09 d9                	or     ecx,ebx
c0017dcb:	89 ca                	mov    edx,ecx
c0017dcd:	89 14 85 a0 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf660],edx
c0017dd4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017de0:	68 98 b1 02 c0       	push   0xc002b198
c0017de5:	e8 c4 ad ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0017dea:	83 c4 10             	add    esp,0x10
c0017ded:	eb 0c                	jmp    c0017dfb <scanMADT()+0x469>
c0017def:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017df4:	75 05                	jne    c0017dfb <scanMADT()+0x469>
c0017df6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017dfb:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017e00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e04:	01 d0                	add    eax,edx
c0017e06:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017e0a:	e9 54 fc ff ff       	jmp    c0017a63 <scanMADT()+0xd1>
c0017e0f:	90                   	nop
c0017e10:	eb 01                	jmp    c0017e13 <scanMADT()+0x481>
c0017e12:	90                   	nop
c0017e13:	83 c4 38             	add    esp,0x38
c0017e16:	5b                   	pop    ebx
c0017e17:	c3                   	ret    

c0017e18 <ACPI::ACPI()>:
c0017e18:	83 ec 0c             	sub    esp,0xc
c0017e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e1f:	83 ec 08             	sub    esp,0x8
c0017e22:	68 3b b0 02 c0       	push   0xc002b03b
c0017e27:	50                   	push   eax
c0017e28:	e8 97 c3 ff ff       	call   c00141c4 <Device::Device(char const*)>
c0017e2d:	83 c4 10             	add    esp,0x10
c0017e30:	ba 0c b2 02 c0       	mov    edx,0xc002b20c
c0017e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e39:	89 10                	mov    DWORD PTR [eax],edx
c0017e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e3f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e4a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e58:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e66:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e71:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017e78:	e8 15 fb ff ff       	call   c0017992 <scanMADT()>
c0017e7d:	90                   	nop
c0017e7e:	83 c4 0c             	add    esp,0xc
c0017e81:	c3                   	ret    

c0017e82 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017e82:	83 ec 2c             	sub    esp,0x2c
c0017e85:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017e89:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017e8d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017e91:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017e95:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017e9a:	88 d0                	mov    al,dl
c0017e9c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017ea0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ea5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017ead:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017eb1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017eb7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017ebb:	0f 8d 97 00 00 00    	jge    c0017f58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017ec1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ec5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ec9:	83 c2 2a             	add    edx,0x2a
c0017ecc:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017ed0:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017ed5:	75 78                	jne    c0017f4f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017ed7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017edb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017edf:	83 c2 2a             	add    edx,0x2a
c0017ee2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017ee6:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017eea:	75 63                	jne    c0017f4f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017eec:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ef1:	74 3a                	je     c0017f2d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017ef3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ef7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017efb:	83 c2 2a             	add    edx,0x2a
c0017efe:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017f02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f09:	39 c2                	cmp    edx,eax
c0017f0b:	74 10                	je     c0017f1d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017f0d:	83 ec 0c             	sub    esp,0xc
c0017f10:	68 d4 b1 02 c0       	push   0xc002b1d4
c0017f15:	e8 0f 23 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0017f1a:	83 c4 10             	add    esp,0x10
c0017f1d:	83 ec 0c             	sub    esp,0xc
c0017f20:	68 40 b0 02 c0       	push   0xc002b040
c0017f25:	e8 ff 22 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0017f2a:	83 c4 10             	add    esp,0x10
c0017f2d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017f31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f39:	83 c2 2a             	add    edx,0x2a
c0017f3c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017f40:	8b 02                	mov    eax,DWORD PTR [edx]
c0017f42:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017f45:	89 01                	mov    DWORD PTR [ecx],eax
c0017f47:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017f4a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f4f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017f53:	e9 55 ff ff ff       	jmp    c0017ead <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017f58:	90                   	nop
c0017f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f5d:	83 c4 2c             	add    esp,0x2c
c0017f60:	c2 04 00             	ret    0x4
c0017f63:	90                   	nop

c0017f64 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017f64:	83 ec 1c             	sub    esp,0x1c
c0017f67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f6b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017f6f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f73:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017f78:	88 c8                	mov    al,cl
c0017f7a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017f7e:	88 d0                	mov    al,dl
c0017f80:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f88:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f92:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f95:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017f99:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fa7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017fab:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017fae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fb2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fbb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017fc1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017fc5:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fcc:	83 c2 2a             	add    edx,0x2a
c0017fcf:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fd7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017fdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017fe4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017fe8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017fec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ff0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ff6:	8d 50 01             	lea    edx,[eax+0x1]
c0017ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ffd:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018007:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001800d:	3d 00 02 00 00       	cmp    eax,0x200
c0018012:	75 10                	jne    c0018024 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018014:	83 ec 0c             	sub    esp,0xc
c0018017:	68 4f b0 02 c0       	push   0xc002b04f
c001801c:	e8 08 22 00 00       	call   c001a229 <Krnl::panic(char const*)>
c0018021:	83 c4 10             	add    esp,0x10
c0018024:	90                   	nop
c0018025:	83 c4 1c             	add    esp,0x1c
c0018028:	c3                   	ret    
c0018029:	90                   	nop

c001802a <ACPI::setScreenBrightnessLevel(void*, int)>:
c001802a:	b8 00 00 00 00       	mov    eax,0x0
c001802f:	c3                   	ret    

c0018030 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018030:	83 ec 1c             	sub    esp,0x1c
c0018033:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018037:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001803a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001803e:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0018043:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018048:	83 ec 08             	sub    esp,0x8
c001804b:	52                   	push   edx
c001804c:	50                   	push   eax
c001804d:	e8 06 6e ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018052:	83 c4 10             	add    esp,0x10
c0018055:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018059:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c001805e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018063:	83 ec 04             	sub    esp,0x4
c0018066:	6a 01                	push   0x1
c0018068:	52                   	push   edx
c0018069:	50                   	push   eax
c001806a:	e8 ff 6e ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c001806f:	83 c4 10             	add    esp,0x10
c0018072:	90                   	nop
c0018073:	83 c4 1c             	add    esp,0x1c
c0018076:	c3                   	ret    
c0018077:	90                   	nop

c0018078 <ACPI::open(int, int, void*)>:
c0018078:	53                   	push   ebx
c0018079:	83 ec 28             	sub    esp,0x28
c001807c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018080:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018087:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001808b:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018092:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0018097:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001809d:	83 e0 04             	and    eax,0x4
c00180a0:	84 c0                	test   al,al
c00180a2:	74 47                	je     c00180eb <ACPI::open(int, int, void*)+0x73>
c00180a4:	a1 88 09 03 c0       	mov    eax,ds:0xc0030988
c00180a9:	83 ec 08             	sub    esp,0x8
c00180ac:	68 6c b0 02 c0       	push   0xc002b06c
c00180b1:	50                   	push   eax
c00180b2:	e8 3f f8 ff ff       	call   c00178f6 <findDataTable(unsigned char*, char*)>
c00180b7:	83 c4 10             	add    esp,0x10
c00180ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180be:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00180c3:	74 26                	je     c00180eb <ACPI::open(int, int, void*)+0x73>
c00180c5:	83 ec 0c             	sub    esp,0xc
c00180c8:	68 71 b0 02 c0       	push   0xc002b071
c00180cd:	e8 dc aa ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00180d2:	83 c4 10             	add    esp,0x10
c00180d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180d9:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180e4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00180eb:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00180f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180f7:	8a 00                	mov    al,BYTE PTR [eax]
c00180f9:	3c 01                	cmp    al,0x1
c00180fb:	75 28                	jne    c0018125 <ACPI::open(int, int, void*)+0xad>
c00180fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018101:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018108:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001810c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018113:	83 ec 0c             	sub    esp,0xc
c0018116:	68 82 b0 02 c0       	push   0xc002b082
c001811b:	e8 8e aa ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018120:	83 c4 10             	add    esp,0x10
c0018123:	eb 25                	jmp    c001814a <ACPI::open(int, int, void*)+0xd2>
c0018125:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018129:	8a 00                	mov    al,BYTE PTR [eax]
c001812b:	3c 02                	cmp    al,0x2
c001812d:	75 1b                	jne    c001814a <ACPI::open(int, int, void*)+0xd2>
c001812f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018133:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001813a:	83 ec 0c             	sub    esp,0xc
c001813d:	68 8a b0 02 c0       	push   0xc002b08a
c0018142:	e8 67 aa ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018147:	83 c4 10             	add    esp,0x10
c001814a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001814e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018154:	83 f0 01             	xor    eax,0x1
c0018157:	84 c0                	test   al,al
c0018159:	74 6a                	je     c00181c5 <ACPI::open(int, int, void*)+0x14d>
c001815b:	83 ec 0c             	sub    esp,0xc
c001815e:	68 92 b0 02 c0       	push   0xc002b092
c0018163:	e8 46 aa ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018168:	83 c4 10             	add    esp,0x10
c001816b:	e8 e0 7f fe ff       	call   c0000150 <manualPCIProbe>
c0018170:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018174:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018179:	75 28                	jne    c00181a3 <ACPI::open(int, int, void*)+0x12b>
c001817b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001817f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018186:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001818a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018191:	83 ec 0c             	sub    esp,0xc
c0018194:	68 a0 b0 02 c0       	push   0xc002b0a0
c0018199:	e8 10 aa ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001819e:	83 c4 10             	add    esp,0x10
c00181a1:	eb 22                	jmp    c00181c5 <ACPI::open(int, int, void*)+0x14d>
c00181a3:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00181a8:	75 1b                	jne    c00181c5 <ACPI::open(int, int, void*)+0x14d>
c00181aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181ae:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00181b5:	83 ec 0c             	sub    esp,0xc
c00181b8:	68 aa b0 02 c0       	push   0xc002b0aa
c00181bd:	e8 ec a9 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00181c2:	83 c4 10             	add    esp,0x10
c00181c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181c9:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00181cf:	84 c0                	test   al,al
c00181d1:	74 13                	je     c00181e6 <ACPI::open(int, int, void*)+0x16e>
c00181d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181d7:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00181dd:	83 f0 01             	xor    eax,0x1
c00181e0:	0f b6 c0             	movzx  eax,al
c00181e3:	40                   	inc    eax
c00181e4:	eb 05                	jmp    c00181eb <ACPI::open(int, int, void*)+0x173>
c00181e6:	b8 00 00 00 00       	mov    eax,0x0
c00181eb:	83 ec 08             	sub    esp,0x8
c00181ee:	50                   	push   eax
c00181ef:	68 b4 b0 02 c0       	push   0xc002b0b4
c00181f4:	e8 b5 a9 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00181f9:	83 c4 10             	add    esp,0x10
c00181fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018200:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018206:	84 c0                	test   al,al
c0018208:	74 67                	je     c0018271 <ACPI::open(int, int, void*)+0x1f9>
c001820a:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018212:	83 ec 0c             	sub    esp,0xc
c0018215:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018219:	e8 22 76 ff ff       	call   c000f840 <malloc>
c001821e:	83 c4 10             	add    esp,0x10
c0018221:	89 c3                	mov    ebx,eax
c0018223:	83 ec 0c             	sub    esp,0xc
c0018226:	53                   	push   ebx
c0018227:	e8 26 a3 00 00       	call   c0022552 <PCI::PCI()>
c001822c:	83 c4 10             	add    esp,0x10
c001822f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018233:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018237:	83 ec 08             	sub    esp,0x8
c001823a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001823e:	50                   	push   eax
c001823f:	e8 90 bd ff ff       	call   c0013fd4 <Device::addChild(Device*)>
c0018244:	83 c4 10             	add    esp,0x10
c0018247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824b:	8b 00                	mov    eax,DWORD PTR [eax]
c001824d:	83 c0 08             	add    eax,0x8
c0018250:	8b 00                	mov    eax,DWORD PTR [eax]
c0018252:	6a 00                	push   0x0
c0018254:	6a 00                	push   0x0
c0018256:	6a 00                	push   0x0
c0018258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001825c:	ff d0                	call   eax
c001825e:	83 c4 10             	add    esp,0x10
c0018261:	83 ec 0c             	sub    esp,0xc
c0018264:	68 bd b0 02 c0       	push   0xc002b0bd
c0018269:	e8 40 a9 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001826e:	83 c4 10             	add    esp,0x10
c0018271:	83 ec 0c             	sub    esp,0xc
c0018274:	68 c8 b0 02 c0       	push   0xc002b0c8
c0018279:	e8 cb 46 00 00       	call   c001c949 <Thr::loadKernelSymbolTable(char const*)>
c001827e:	83 c4 10             	add    esp,0x10
c0018281:	8b 1d a8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0a8
c0018287:	83 ec 08             	sub    esp,0x8
c001828a:	6a 01                	push   0x1
c001828c:	68 e6 b0 02 c0       	push   0xc002b0e6
c0018291:	e8 10 51 00 00       	call   c001d3a6 <Thr::loadDLL(char const*, bool)>
c0018296:	83 c4 10             	add    esp,0x10
c0018299:	83 ec 08             	sub    esp,0x8
c001829c:	53                   	push   ebx
c001829d:	50                   	push   eax
c001829e:	e8 37 53 00 00       	call   c001d5da <Thr::executeDLL(unsigned long, void*)>
c00182a3:	83 c4 10             	add    esp,0x10
c00182a6:	8b 1d a8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0a8
c00182ac:	83 ec 08             	sub    esp,0x8
c00182af:	6a 01                	push   0x1
c00182b1:	68 03 b1 02 c0       	push   0xc002b103
c00182b6:	e8 eb 50 00 00       	call   c001d3a6 <Thr::loadDLL(char const*, bool)>
c00182bb:	83 c4 10             	add    esp,0x10
c00182be:	83 ec 08             	sub    esp,0x8
c00182c1:	53                   	push   ebx
c00182c2:	50                   	push   eax
c00182c3:	e8 12 53 00 00       	call   c001d5da <Thr::executeDLL(unsigned long, void*)>
c00182c8:	83 c4 10             	add    esp,0x10
c00182cb:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00182d0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00182d6:	83 e0 04             	and    eax,0x4
c00182d9:	84 c0                	test   al,al
c00182db:	0f 84 d2 00 00 00    	je     c00183b3 <ACPI::open(int, int, void*)+0x33b>
c00182e1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00182e8:	83 ec 0c             	sub    esp,0xc
c00182eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182ef:	e8 4c 75 ff ff       	call   c000f840 <malloc>
c00182f4:	83 c4 10             	add    esp,0x10
c00182f7:	89 c3                	mov    ebx,eax
c00182f9:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c00182fe:	83 ec 04             	sub    esp,0x4
c0018301:	50                   	push   eax
c0018302:	68 20 b1 02 c0       	push   0xc002b120
c0018307:	53                   	push   ebx
c0018308:	e8 f9 ad ff ff       	call   c0013106 <File::File(char const*, Process*)>
c001830d:	83 c4 10             	add    esp,0x10
c0018310:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018314:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018319:	74 17                	je     c0018332 <ACPI::open(int, int, void*)+0x2ba>
c001831b:	83 ec 0c             	sub    esp,0xc
c001831e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018322:	e8 b1 b0 ff ff       	call   c00133d8 <File::exists()>
c0018327:	83 c4 10             	add    esp,0x10
c001832a:	84 c0                	test   al,al
c001832c:	74 04                	je     c0018332 <ACPI::open(int, int, void*)+0x2ba>
c001832e:	b0 01                	mov    al,0x1
c0018330:	eb 02                	jmp    c0018334 <ACPI::open(int, int, void*)+0x2bc>
c0018332:	b0 00                	mov    al,0x0
c0018334:	84 c0                	test   al,al
c0018336:	74 22                	je     c001835a <ACPI::open(int, int, void*)+0x2e2>
c0018338:	83 ec 08             	sub    esp,0x8
c001833b:	6a 01                	push   0x1
c001833d:	68 20 b1 02 c0       	push   0xc002b120
c0018342:	e8 5f 50 00 00       	call   c001d3a6 <Thr::loadDLL(char const*, bool)>
c0018347:	83 c4 10             	add    esp,0x10
c001834a:	83 ec 08             	sub    esp,0x8
c001834d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018351:	50                   	push   eax
c0018352:	e8 83 52 00 00       	call   c001d5da <Thr::executeDLL(unsigned long, void*)>
c0018357:	83 c4 10             	add    esp,0x10
c001835a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001835f:	74 1e                	je     c001837f <ACPI::open(int, int, void*)+0x307>
c0018361:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018366:	74 17                	je     c001837f <ACPI::open(int, int, void*)+0x307>
c0018368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001836c:	8b 00                	mov    eax,DWORD PTR [eax]
c001836e:	83 c0 08             	add    eax,0x8
c0018371:	8b 00                	mov    eax,DWORD PTR [eax]
c0018373:	83 ec 0c             	sub    esp,0xc
c0018376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001837a:	ff d0                	call   eax
c001837c:	83 c4 10             	add    esp,0x10
c001837f:	a1 88 09 03 c0       	mov    eax,ds:0xc0030988
c0018384:	83 ec 08             	sub    esp,0x8
c0018387:	68 3d b1 02 c0       	push   0xc002b13d
c001838c:	50                   	push   eax
c001838d:	e8 64 f5 ff ff       	call   c00178f6 <findDataTable(unsigned char*, char*)>
c0018392:	83 c4 10             	add    esp,0x10
c0018395:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018399:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001839e:	74 13                	je     c00183b3 <ACPI::open(int, int, void*)+0x33b>
c00183a0:	83 ec 08             	sub    esp,0x8
c00183a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00183a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00183ab:	e8 80 fc ff ff       	call   c0018030 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00183b0:	83 c4 10             	add    esp,0x10
c00183b3:	b8 00 00 00 00       	mov    eax,0x0
c00183b8:	83 c4 28             	add    esp,0x28
c00183bb:	5b                   	pop    ebx
c00183bc:	c3                   	ret    
c00183bd:	90                   	nop

c00183be <ACPI::sleep()>:
c00183be:	83 ec 0c             	sub    esp,0xc
c00183c1:	a1 60 07 03 c0       	mov    eax,ds:0xc0030760
c00183c6:	85 c0                	test   eax,eax
c00183c8:	74 07                	je     c00183d1 <ACPI::sleep()+0x13>
c00183ca:	a1 60 07 03 c0       	mov    eax,ds:0xc0030760
c00183cf:	ff d0                	call   eax
c00183d1:	90                   	nop
c00183d2:	83 c4 0c             	add    esp,0xc
c00183d5:	c3                   	ret    

c00183d6 <CPU::close(int, int, void*)>:
c00183d6:	31 c0                	xor    eax,eax
c00183d8:	c3                   	ret    
c00183d9:	90                   	nop

c00183da <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00183da:	55                   	push   ebp
c00183db:	57                   	push   edi
c00183dc:	56                   	push   esi
c00183dd:	53                   	push   ebx
c00183de:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00183e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183e6:	89 ce                	mov    esi,ecx
c00183e8:	89 d5                	mov    ebp,edx
c00183ea:	80 f9 04             	cmp    cl,0x4
c00183ed:	75 28                	jne    c0018417 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00183ef:	8d 42 f9             	lea    eax,[edx-0x7]
c00183f2:	3c 03                	cmp    al,0x3
c00183f4:	0f 86 63 01 00 00    	jbe    c001855d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00183fa:	80 fa 03             	cmp    dl,0x3
c00183fd:	0f 84 5a 01 00 00    	je     c001855d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018403:	8d 7a f2             	lea    edi,[edx-0xe]
c0018406:	b8 d0 d4 02 c0       	mov    eax,0xc002d4d0
c001840b:	89 fb                	mov    ebx,edi
c001840d:	80 fb 01             	cmp    bl,0x1
c0018410:	77 4e                	ja     c0018460 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018412:	e9 52 01 00 00       	jmp    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018417:	80 f9 05             	cmp    cl,0x5
c001841a:	75 4d                	jne    c0018469 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001841c:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c0018421:	80 fa 03             	cmp    dl,0x3
c0018424:	0f 86 3f 01 00 00    	jbe    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001842a:	8d 7a fa             	lea    edi,[edx-0x6]
c001842d:	b8 f0 d4 02 c0       	mov    eax,0xc002d4f0
c0018432:	89 fb                	mov    ebx,edi
c0018434:	80 fb 01             	cmp    bl,0x1
c0018437:	0f 86 2c 01 00 00    	jbe    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001843d:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c0018442:	80 fa 08             	cmp    dl,0x8
c0018445:	0f 84 1e 01 00 00    	je     c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001844b:	89 d7                	mov    edi,edx
c001844d:	b8 10 d5 02 c0       	mov    eax,0xc002d510
c0018452:	83 e7 fb             	and    edi,0xfffffffb
c0018455:	89 fb                	mov    ebx,edi
c0018457:	80 fb 09             	cmp    bl,0x9
c001845a:	0f 84 09 01 00 00    	je     c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018460:	31 c0                	xor    eax,eax
c0018462:	89 eb                	mov    ebx,ebp
c0018464:	0f b6 fb             	movzx  edi,bl
c0018467:	eb 30                	jmp    c0018499 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018469:	31 c0                	xor    eax,eax
c001846b:	80 f9 06             	cmp    cl,0x6
c001846e:	75 f2                	jne    c0018462 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018470:	80 fa 0a             	cmp    dl,0xa
c0018473:	77 ed                	ja     c0018462 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018475:	bf de 05 00 00       	mov    edi,0x5de
c001847a:	0f a3 d7             	bt     edi,edx
c001847d:	73 e3                	jae    c0018462 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001847f:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0018484:	e9 e0 00 00 00       	jmp    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018489:	39 c7                	cmp    edi,eax
c001848b:	0f 84 d3 00 00 00    	je     c0018564 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018491:	40                   	inc    eax
c0018492:	3d d0 00 00 00       	cmp    eax,0xd0
c0018497:	74 09                	je     c00184a2 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018499:	89 f3                	mov    ebx,esi
c001849b:	80 fb 0f             	cmp    bl,0xf
c001849e:	75 f1                	jne    c0018491 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00184a0:	eb e7                	jmp    c0018489 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00184a2:	80 f9 10             	cmp    cl,0x10
c00184a5:	75 14                	jne    c00184bb <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00184a7:	8d 42 fc             	lea    eax,[edx-0x4]
c00184aa:	83 e0 fb             	and    eax,0xfffffffb
c00184ad:	3c 02                	cmp    al,0x2
c00184af:	76 34                	jbe    c00184e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00184b1:	b8 22 b5 02 c0       	mov    eax,0xc002b522
c00184b6:	80 fa 02             	cmp    dl,0x2
c00184b9:	eb 24                	jmp    c00184df <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00184bb:	80 f9 11             	cmp    cl,0x11
c00184be:	75 13                	jne    c00184d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00184c0:	b8 22 b5 02 c0       	mov    eax,0xc002b522
c00184c5:	80 fa 03             	cmp    dl,0x3
c00184c8:	0f 85 9b 00 00 00    	jne    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184ce:	e9 91 00 00 00       	jmp    c0018564 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00184d3:	80 f9 12             	cmp    cl,0x12
c00184d6:	75 14                	jne    c00184ec <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00184d8:	b8 22 b5 02 c0       	mov    eax,0xc002b522
c00184dd:	fe ca                	dec    dl
c00184df:	0f 85 84 00 00 00    	jne    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184e5:	b8 40 d5 02 c0       	mov    eax,0xc002d540
c00184ea:	eb 7d                	jmp    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184ec:	80 f9 14             	cmp    cl,0x14
c00184ef:	75 12                	jne    c0018503 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00184f1:	4a                   	dec    edx
c00184f2:	b8 22 b5 02 c0       	mov    eax,0xc002b522
c00184f7:	80 fa 01             	cmp    dl,0x1
c00184fa:	77 6d                	ja     c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184fc:	b8 50 d5 02 c0       	mov    eax,0xc002d550
c0018501:	eb 66                	jmp    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018503:	80 f9 15             	cmp    cl,0x15
c0018506:	75 31                	jne    c0018539 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018508:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c001850d:	80 fa 01             	cmp    dl,0x1
c0018510:	74 57                	je     c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018512:	b8 22 b5 02 c0       	mov    eax,0xc002b522
c0018517:	80 fa 13             	cmp    dl,0x13
c001851a:	76 0c                	jbe    c0018528 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001851c:	80 fa 30             	cmp    dl,0x30
c001851f:	75 48                	jne    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018521:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c0018526:	eb 41                	jmp    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018528:	b9 04 00 09 00       	mov    ecx,0x90004
c001852d:	0f a3 d1             	bt     ecx,edx
c0018530:	73 37                	jae    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018532:	b8 70 d5 02 c0       	mov    eax,0xc002d570
c0018537:	eb 30                	jmp    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018539:	b8 22 b5 02 c0       	mov    eax,0xc002b522
c001853e:	80 f9 16             	cmp    cl,0x16
c0018541:	75 26                	jne    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018543:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c0018548:	84 d2                	test   dl,dl
c001854a:	74 1d                	je     c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001854c:	b8 22 b5 02 c0       	mov    eax,0xc002b522
c0018551:	80 fa 30             	cmp    dl,0x30
c0018554:	75 13                	jne    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018556:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c001855b:	eb 0c                	jmp    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001855d:	b8 c0 d4 02 c0       	mov    eax,0xc002d4c0
c0018562:	eb 05                	jmp    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018564:	b8 30 d5 02 c0       	mov    eax,0xc002d530
c0018569:	5b                   	pop    ebx
c001856a:	5e                   	pop    esi
c001856b:	5f                   	pop    edi
c001856c:	5d                   	pop    ebp
c001856d:	c3                   	ret    

c001856e <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001856e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018572:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018576:	80 f9 04             	cmp    cl,0x4
c0018579:	75 6b                	jne    c00185e6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001857b:	b8 20 d3 02 c0       	mov    eax,0xc002d320
c0018580:	80 fa 01             	cmp    dl,0x1
c0018583:	0f 86 92 02 00 00    	jbe    c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018589:	b8 30 d3 02 c0       	mov    eax,0xc002d330
c001858e:	80 fa 02             	cmp    dl,0x2
c0018591:	0f 84 84 02 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018597:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c001859c:	80 fa 03             	cmp    dl,0x3
c001859f:	0f 84 76 02 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a5:	b8 50 d3 02 c0       	mov    eax,0xc002d350
c00185aa:	80 fa 04             	cmp    dl,0x4
c00185ad:	0f 84 68 02 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b3:	b8 60 d3 02 c0       	mov    eax,0xc002d360
c00185b8:	80 fa 05             	cmp    dl,0x5
c00185bb:	0f 84 5a 02 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c1:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c00185c6:	80 fa 07             	cmp    dl,0x7
c00185c9:	0f 84 4c 02 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185cf:	83 ea 08             	sub    edx,0x8
c00185d2:	b8 22 b5 02 c0       	mov    eax,0xc002b522
c00185d7:	80 fa 01             	cmp    dl,0x1
c00185da:	0f 87 3b 02 00 00    	ja     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e0:	b8 70 d3 02 c0       	mov    eax,0xc002d370
c00185e5:	c3                   	ret    
c00185e6:	80 f9 05             	cmp    cl,0x5
c00185e9:	75 45                	jne    c0018630 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00185eb:	8d 4a ff             	lea    ecx,[edx-0x1]
c00185ee:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c00185f3:	80 f9 02             	cmp    cl,0x2
c00185f6:	0f 86 1f 02 00 00    	jbe    c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185fc:	80 fa 04             	cmp    dl,0x4
c00185ff:	0f 84 f3 01 00 00    	je     c00187f8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018605:	80 fa 07             	cmp    dl,0x7
c0018608:	0f 84 0d 02 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001860e:	b8 90 d3 02 c0       	mov    eax,0xc002d390
c0018613:	80 fa 08             	cmp    dl,0x8
c0018616:	0f 84 ff 01 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861c:	b8 22 b5 02 c0       	mov    eax,0xc002b522
c0018621:	80 fa 09             	cmp    dl,0x9
c0018624:	0f 85 f1 01 00 00    	jne    c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862a:	b8 a0 d3 02 c0       	mov    eax,0xc002d3a0
c001862f:	c3                   	ret    
c0018630:	80 f9 06             	cmp    cl,0x6
c0018633:	0f 85 85 01 00 00    	jne    c00187be <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018639:	b8 b0 d3 02 c0       	mov    eax,0xc002d3b0
c001863e:	80 fa 01             	cmp    dl,0x1
c0018641:	0f 84 d4 01 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018647:	8d 42 fb             	lea    eax,[edx-0x5]
c001864a:	3c 01                	cmp    al,0x1
c001864c:	0f 86 ac 01 00 00    	jbe    c00187fe <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018652:	80 fa 03             	cmp    dl,0x3
c0018655:	0f 84 a3 01 00 00    	je     c00187fe <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001865b:	8d 4a f9             	lea    ecx,[edx-0x7]
c001865e:	b8 d0 d3 02 c0       	mov    eax,0xc002d3d0
c0018663:	80 f9 01             	cmp    cl,0x1
c0018666:	0f 86 af 01 00 00    	jbe    c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001866c:	80 fa 09             	cmp    dl,0x9
c001866f:	0f 84 8f 01 00 00    	je     c0018804 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018675:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018678:	80 f9 01             	cmp    cl,0x1
c001867b:	0f 86 9a 01 00 00    	jbe    c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018681:	b8 e0 d3 02 c0       	mov    eax,0xc002d3e0
c0018686:	80 fa 0d             	cmp    dl,0xd
c0018689:	0f 84 8c 01 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001868f:	b8 f0 d3 02 c0       	mov    eax,0xc002d3f0
c0018694:	80 fa 0e             	cmp    dl,0xe
c0018697:	0f 84 7e 01 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869d:	b8 00 d4 02 c0       	mov    eax,0xc002d400
c00186a2:	80 fa 0f             	cmp    dl,0xf
c00186a5:	0f 84 70 01 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ab:	b8 e0 d3 02 c0       	mov    eax,0xc002d3e0
c00186b0:	80 fa 15             	cmp    dl,0x15
c00186b3:	0f 84 62 01 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b9:	8d 4a ea             	lea    ecx,[edx-0x16]
c00186bc:	b8 00 d4 02 c0       	mov    eax,0xc002d400
c00186c1:	80 f9 01             	cmp    cl,0x1
c00186c4:	0f 86 51 01 00 00    	jbe    c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ca:	80 fa 1a             	cmp    dl,0x1a
c00186cd:	0f 84 37 01 00 00    	je     c001880a <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00186d3:	80 fa 1c             	cmp    dl,0x1c
c00186d6:	0f 84 34 01 00 00    	je     c0018810 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00186dc:	80 fa 1d             	cmp    dl,0x1d
c00186df:	0f 84 36 01 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186e5:	b8 30 d4 02 c0       	mov    eax,0xc002d430
c00186ea:	80 fa 25             	cmp    dl,0x25
c00186ed:	0f 84 28 01 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f3:	8d 4a da             	lea    ecx,[edx-0x26]
c00186f6:	b8 20 d4 02 c0       	mov    eax,0xc002d420
c00186fb:	80 f9 01             	cmp    cl,0x1
c00186fe:	0f 86 17 01 00 00    	jbe    c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018704:	b8 40 d4 02 c0       	mov    eax,0xc002d440
c0018709:	80 fa 2a             	cmp    dl,0x2a
c001870c:	0f 84 09 01 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018712:	b8 30 d4 02 c0       	mov    eax,0xc002d430
c0018717:	80 fa 2c             	cmp    dl,0x2c
c001871a:	0f 84 fb 00 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018720:	b8 40 d4 02 c0       	mov    eax,0xc002d440
c0018725:	80 fa 2d             	cmp    dl,0x2d
c0018728:	0f 84 ed 00 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001872e:	b8 10 d4 02 c0       	mov    eax,0xc002d410
c0018733:	80 fa 2e             	cmp    dl,0x2e
c0018736:	0f 84 df 00 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001873c:	b8 30 d4 02 c0       	mov    eax,0xc002d430
c0018741:	80 fa 2f             	cmp    dl,0x2f
c0018744:	0f 84 d1 00 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001874a:	8d 4a cb             	lea    ecx,[edx-0x35]
c001874d:	b8 20 d4 02 c0       	mov    eax,0xc002d420
c0018752:	80 f9 01             	cmp    cl,0x1
c0018755:	0f 86 c0 00 00 00    	jbe    c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001875b:	b8 50 d4 02 c0       	mov    eax,0xc002d450
c0018760:	80 fa 37             	cmp    dl,0x37
c0018763:	0f 84 b2 00 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018769:	b8 60 d4 02 c0       	mov    eax,0xc002d460
c001876e:	80 fa 3a             	cmp    dl,0x3a
c0018771:	0f 84 a4 00 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018777:	b8 70 d4 02 c0       	mov    eax,0xc002d470
c001877c:	80 fa 3c             	cmp    dl,0x3c
c001877f:	0f 84 96 00 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018785:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c001878a:	80 fa 3d             	cmp    dl,0x3d
c001878d:	0f 84 88 00 00 00    	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018793:	b8 60 d4 02 c0       	mov    eax,0xc002d460
c0018798:	80 fa 3e             	cmp    dl,0x3e
c001879b:	74 7e                	je     c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001879d:	8d 42 bb             	lea    eax,[edx-0x45]
c00187a0:	3c 01                	cmp    al,0x1
c00187a2:	76 72                	jbe    c0018816 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00187a4:	80 fa 3f             	cmp    dl,0x3f
c00187a7:	74 6d                	je     c0018816 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00187a9:	80 fa 4a             	cmp    dl,0x4a
c00187ac:	74 0a                	je     c00187b8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00187ae:	b8 22 b5 02 c0       	mov    eax,0xc002b522
c00187b3:	80 fa 4d             	cmp    dl,0x4d
c00187b6:	75 63                	jne    c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187b8:	b8 50 d4 02 c0       	mov    eax,0xc002d450
c00187bd:	c3                   	ret    
c00187be:	b8 22 b5 02 c0       	mov    eax,0xc002b522
c00187c3:	80 f9 0b             	cmp    cl,0xb
c00187c6:	75 0a                	jne    c00187d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00187c8:	fe ca                	dec    dl
c00187ca:	75 4f                	jne    c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187cc:	b8 90 d4 02 c0       	mov    eax,0xc002d490
c00187d1:	c3                   	ret    
c00187d2:	80 f9 0f             	cmp    cl,0xf
c00187d5:	75 44                	jne    c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187d7:	b8 a0 d4 02 c0       	mov    eax,0xc002d4a0
c00187dc:	80 fa 02             	cmp    dl,0x2
c00187df:	76 3a                	jbe    c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e1:	8d 42 fd             	lea    eax,[edx-0x3]
c00187e4:	3c 01                	cmp    al,0x1
c00187e6:	76 0a                	jbe    c00187f2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00187e8:	b8 22 b5 02 c0       	mov    eax,0xc002b522
c00187ed:	80 fa 06             	cmp    dl,0x6
c00187f0:	75 29                	jne    c001881b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f2:	b8 b0 d4 02 c0       	mov    eax,0xc002d4b0
c00187f7:	c3                   	ret    
c00187f8:	b8 90 d3 02 c0       	mov    eax,0xc002d390
c00187fd:	c3                   	ret    
c00187fe:	b8 c0 d3 02 c0       	mov    eax,0xc002d3c0
c0018803:	c3                   	ret    
c0018804:	b8 e0 d3 02 c0       	mov    eax,0xc002d3e0
c0018809:	c3                   	ret    
c001880a:	b8 10 d4 02 c0       	mov    eax,0xc002d410
c001880f:	c3                   	ret    
c0018810:	b8 20 d4 02 c0       	mov    eax,0xc002d420
c0018815:	c3                   	ret    
c0018816:	b8 70 d4 02 c0       	mov    eax,0xc002d470
c001881b:	c3                   	ret    

c001881c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001881c:	60                   	pusha  
c001881d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018829:	9c                   	pushf  
c001882a:	fa                   	cli    
c001882b:	0f 09                	wbinvd 
c001882d:	0f 30                	wrmsr  
c001882f:	9d                   	popf   
c0018830:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018834:	89 02                	mov    DWORD PTR [edx],eax
c0018836:	61                   	popa   
c0018837:	c3                   	ret    

c0018838 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018838:	60                   	pusha  
c0018839:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001883d:	9c                   	pushf  
c001883e:	fa                   	cli    
c001883f:	0f 09                	wbinvd 
c0018841:	31 c0                	xor    eax,eax
c0018843:	31 d2                	xor    edx,edx
c0018845:	0f 32                	rdmsr  
c0018847:	9d                   	popf   
c0018848:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001884c:	89 02                	mov    DWORD PTR [edx],eax
c001884e:	61                   	popa   
c001884f:	c3                   	ret    

c0018850 <CPU::AMD_K6_writeback(int, int, int)>:
c0018850:	56                   	push   esi
c0018851:	53                   	push   ebx
c0018852:	83 ec 10             	sub    esp,0x10
c0018855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018859:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001885e:	75 5d                	jne    c00188bd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018860:	83 f8 08             	cmp    eax,0x8
c0018863:	75 09                	jne    c001886e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018865:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001886a:	7e 13                	jle    c001887f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001886c:	eb 30                	jmp    c001889e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001886e:	83 f8 06             	cmp    eax,0x6
c0018871:	7c 4a                	jl     c00188bd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018873:	83 f8 07             	cmp    eax,0x7
c0018876:	7e 07                	jle    c001887f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018878:	83 f8 09             	cmp    eax,0x9
c001887b:	74 21                	je     c001889e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001887d:	eb 3e                	jmp    c00188bd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001887f:	89 e6                	mov    esi,esp
c0018881:	8b 1d e4 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0e4
c0018887:	56                   	push   esi
c0018888:	c1 eb 15             	shr    ebx,0x15
c001888b:	68 82 00 00 c0       	push   0xc0000082
c0018890:	83 e3 7e             	and    ebx,0x7e
c0018893:	e8 a0 ff ff ff       	call   c0018838 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018898:	56                   	push   esi
c0018899:	6a 00                	push   0x0
c001889b:	53                   	push   ebx
c001889c:	eb 12                	jmp    c00188b0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001889e:	89 e3                	mov    ebx,esp
c00188a0:	53                   	push   ebx
c00188a1:	68 82 00 00 c0       	push   0xc0000082
c00188a6:	e8 8d ff ff ff       	call   c0018838 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00188ab:	53                   	push   ebx
c00188ac:	6a 00                	push   0x0
c00188ae:	6a 00                	push   0x0
c00188b0:	68 82 00 00 c0       	push   0xc0000082
c00188b5:	e8 62 ff ff ff       	call   c001881c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00188ba:	83 c4 18             	add    esp,0x18
c00188bd:	83 c4 10             	add    esp,0x10
c00188c0:	5b                   	pop    ebx
c00188c1:	5e                   	pop    esi
c00188c2:	c3                   	ret    
c00188c3:	90                   	nop

c00188c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00188c4:	55                   	push   ebp
c00188c5:	57                   	push   edi
c00188c6:	56                   	push   esi
c00188c7:	53                   	push   ebx
c00188c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188cc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00188d0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00188d4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00188d8:	39 05 c0 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5c0,eax
c00188de:	75 23                	jne    c0018903 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00188e0:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c00188e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00188e9:	89 06                	mov    DWORD PTR [esi],eax
c00188eb:	a1 e8 0b 03 c0       	mov    eax,ds:0xc0030be8
c00188f0:	89 07                	mov    DWORD PTR [edi],eax
c00188f2:	a1 e4 0b 03 c0       	mov    eax,ds:0xc0030be4
c00188f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00188fa:	a1 e0 0b 03 c0       	mov    eax,ds:0xc0030be0
c00188ff:	89 02                	mov    DWORD PTR [edx],eax
c0018901:	eb 3f                	jmp    c0018942 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018903:	31 c9                	xor    ecx,ecx
c0018905:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018909:	0f a2                	cpuid  
c001890b:	89 06                	mov    DWORD PTR [esi],eax
c001890d:	89 1f                	mov    DWORD PTR [edi],ebx
c001890f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018913:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018916:	89 10                	mov    DWORD PTR [eax],edx
c0018918:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001891c:	a3 c0 d5 02 c0       	mov    ds:0xc002d5c0,eax
c0018921:	8b 06                	mov    eax,DWORD PTR [esi]
c0018923:	a3 ec 0b 03 c0       	mov    ds:0xc0030bec,eax
c0018928:	8b 07                	mov    eax,DWORD PTR [edi]
c001892a:	a3 e8 0b 03 c0       	mov    ds:0xc0030be8,eax
c001892f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018932:	a3 e4 0b 03 c0       	mov    ds:0xc0030be4,eax
c0018937:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001893b:	8b 00                	mov    eax,DWORD PTR [eax]
c001893d:	a3 e0 0b 03 c0       	mov    ds:0xc0030be0,eax
c0018942:	5b                   	pop    ebx
c0018943:	5e                   	pop    esi
c0018944:	5f                   	pop    edi
c0018945:	5d                   	pop    ebp
c0018946:	c3                   	ret    
c0018947:	90                   	nop

c0018948 <CPU::cpuidCheckEDX(unsigned int)>:
c0018948:	83 ec 10             	sub    esp,0x10
c001894b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001894f:	50                   	push   eax
c0018950:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018954:	50                   	push   eax
c0018955:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018959:	50                   	push   eax
c001895a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001895e:	50                   	push   eax
c001895f:	6a 01                	push   0x1
c0018961:	e8 5e ff ff ff       	call   c00188c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018966:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001896a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001896e:	0f 95 c0             	setne  al
c0018971:	83 c4 24             	add    esp,0x24
c0018974:	c3                   	ret    
c0018975:	90                   	nop

c0018976 <CPU::cpuidCheckECX(unsigned int)>:
c0018976:	83 ec 10             	sub    esp,0x10
c0018979:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001897d:	50                   	push   eax
c001897e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018982:	50                   	push   eax
c0018983:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018987:	50                   	push   eax
c0018988:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001898c:	50                   	push   eax
c001898d:	6a 01                	push   0x1
c001898f:	e8 30 ff ff ff       	call   c00188c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018994:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018998:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001899c:	0f 95 c0             	setne  al
c001899f:	83 c4 24             	add    esp,0x24
c00189a2:	c3                   	ret    
c00189a3:	90                   	nop

c00189a4 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00189a4:	83 ec 10             	sub    esp,0x10
c00189a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189ab:	50                   	push   eax
c00189ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189b0:	50                   	push   eax
c00189b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189b5:	50                   	push   eax
c00189b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189ba:	50                   	push   eax
c00189bb:	6a 07                	push   0x7
c00189bd:	e8 02 ff ff ff       	call   c00188c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189c6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00189ca:	0f 95 c0             	setne  al
c00189cd:	83 c4 24             	add    esp,0x24
c00189d0:	c3                   	ret    
c00189d1:	90                   	nop

c00189d2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00189d2:	83 ec 10             	sub    esp,0x10
c00189d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189d9:	50                   	push   eax
c00189da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189de:	50                   	push   eax
c00189df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189e3:	50                   	push   eax
c00189e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189e8:	50                   	push   eax
c00189e9:	6a 07                	push   0x7
c00189eb:	e8 d4 fe ff ff       	call   c00188c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189f4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00189f8:	0f 95 c0             	setne  al
c00189fb:	83 c4 24             	add    esp,0x24
c00189fe:	c3                   	ret    
c00189ff:	90                   	nop

c0018a00 <CPU::CPU()>:
c0018a00:	83 ec 0c             	sub    esp,0xc
c0018a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a07:	83 ec 08             	sub    esp,0x8
c0018a0a:	68 22 b5 02 c0       	push   0xc002b522
c0018a0f:	50                   	push   eax
c0018a10:	e8 af b7 ff ff       	call   c00141c4 <Device::Device(char const*)>
c0018a15:	83 c4 10             	add    esp,0x10
c0018a18:	ba fc b5 02 c0       	mov    edx,0xc002b5fc
c0018a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a21:	89 10                	mov    DWORD PTR [eax],edx
c0018a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a27:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a35:	05 78 01 00 00       	add    eax,0x178
c0018a3a:	83 ec 0c             	sub    esp,0xc
c0018a3d:	50                   	push   eax
c0018a3e:	e8 15 66 ff ff       	call   c000f058 <GDT::GDT()>
c0018a43:	83 c4 10             	add    esp,0x10
c0018a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a4a:	05 7c 09 00 00       	add    eax,0x97c
c0018a4f:	83 ec 0c             	sub    esp,0xc
c0018a52:	50                   	push   eax
c0018a53:	e8 62 68 ff ff       	call   c000f2ba <IDT::IDT()>
c0018a58:	83 c4 10             	add    esp,0x10
c0018a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a5f:	05 7c 11 00 00       	add    eax,0x117c
c0018a64:	83 ec 0c             	sub    esp,0xc
c0018a67:	50                   	push   eax
c0018a68:	e8 e5 89 ff ff       	call   c0011452 <TSS::TSS()>
c0018a6d:	83 c4 10             	add    esp,0x10
c0018a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a74:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018a7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a7f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018a89:	90                   	nop
c0018a8a:	83 c4 0c             	add    esp,0xc
c0018a8d:	c3                   	ret    

c0018a8e <CPU::displayFeatures()>:
c0018a8e:	53                   	push   ebx
c0018a8f:	83 ec 10             	sub    esp,0x10
c0018a92:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018a96:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018a9c:	68 30 b2 02 c0       	push   0xc002b230
c0018aa1:	e8 08 a1 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018aa6:	59                   	pop    ecx
c0018aa7:	58                   	pop    eax
c0018aa8:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018aae:	50                   	push   eax
c0018aaf:	68 41 b2 02 c0       	push   0xc002b241
c0018ab4:	e8 f5 a0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018ab9:	58                   	pop    eax
c0018aba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ac0:	5a                   	pop    edx
c0018ac1:	c1 e8 0e             	shr    eax,0xe
c0018ac4:	0f b6 c0             	movzx  eax,al
c0018ac7:	50                   	push   eax
c0018ac8:	68 52 b2 02 c0       	push   0xc002b252
c0018acd:	e8 dc a0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018ad2:	59                   	pop    ecx
c0018ad3:	58                   	pop    eax
c0018ad4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ada:	66 c1 e8 06          	shr    ax,0x6
c0018ade:	0f b6 c0             	movzx  eax,al
c0018ae1:	50                   	push   eax
c0018ae2:	68 63 b2 02 c0       	push   0xc002b263
c0018ae7:	e8 c2 a0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018aec:	c7 04 24 10 b7 02 c0 	mov    DWORD PTR [esp],0xc002b710
c0018af3:	e8 b6 a0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018af8:	83 c4 10             	add    esp,0x10
c0018afb:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018b00:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018b07:	74 05                	je     c0018b0e <CPU::displayFeatures()+0x80>
c0018b09:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018b0e:	52                   	push   edx
c0018b0f:	52                   	push   edx
c0018b10:	50                   	push   eax
c0018b11:	68 74 b2 02 c0       	push   0xc002b274
c0018b16:	e8 93 a0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018b1b:	83 c4 10             	add    esp,0x10
c0018b1e:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018b23:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018b2a:	78 05                	js     c0018b31 <CPU::displayFeatures()+0xa3>
c0018b2c:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018b31:	51                   	push   ecx
c0018b32:	51                   	push   ecx
c0018b33:	50                   	push   eax
c0018b34:	68 8b b2 02 c0       	push   0xc002b28b
c0018b39:	e8 70 a0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018b3e:	83 c4 10             	add    esp,0x10
c0018b41:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018b46:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018b4d:	75 05                	jne    c0018b54 <CPU::displayFeatures()+0xc6>
c0018b4f:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018b54:	52                   	push   edx
c0018b55:	52                   	push   edx
c0018b56:	50                   	push   eax
c0018b57:	68 a2 b2 02 c0       	push   0xc002b2a2
c0018b5c:	e8 4d a0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018b61:	83 c4 10             	add    esp,0x10
c0018b64:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018b69:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018b70:	75 05                	jne    c0018b77 <CPU::displayFeatures()+0xe9>
c0018b72:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018b77:	51                   	push   ecx
c0018b78:	51                   	push   ecx
c0018b79:	50                   	push   eax
c0018b7a:	68 b9 b2 02 c0       	push   0xc002b2b9
c0018b7f:	e8 2a a0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018b84:	83 c4 10             	add    esp,0x10
c0018b87:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018b8c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018b93:	75 05                	jne    c0018b9a <CPU::displayFeatures()+0x10c>
c0018b95:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018b9a:	52                   	push   edx
c0018b9b:	52                   	push   edx
c0018b9c:	50                   	push   eax
c0018b9d:	68 d0 b2 02 c0       	push   0xc002b2d0
c0018ba2:	e8 07 a0 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018ba7:	83 c4 10             	add    esp,0x10
c0018baa:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018baf:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018bb6:	75 05                	jne    c0018bbd <CPU::displayFeatures()+0x12f>
c0018bb8:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018bbd:	51                   	push   ecx
c0018bbe:	51                   	push   ecx
c0018bbf:	50                   	push   eax
c0018bc0:	68 e7 b2 02 c0       	push   0xc002b2e7
c0018bc5:	e8 e4 9f ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018bca:	83 c4 10             	add    esp,0x10
c0018bcd:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018bd2:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018bd9:	75 05                	jne    c0018be0 <CPU::displayFeatures()+0x152>
c0018bdb:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018be0:	52                   	push   edx
c0018be1:	52                   	push   edx
c0018be2:	50                   	push   eax
c0018be3:	68 fe b2 02 c0       	push   0xc002b2fe
c0018be8:	e8 c1 9f ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018bed:	83 c4 10             	add    esp,0x10
c0018bf0:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018bf5:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018bfc:	75 05                	jne    c0018c03 <CPU::displayFeatures()+0x175>
c0018bfe:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018c03:	51                   	push   ecx
c0018c04:	51                   	push   ecx
c0018c05:	50                   	push   eax
c0018c06:	68 15 b3 02 c0       	push   0xc002b315
c0018c0b:	e8 9e 9f ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018c10:	83 c4 10             	add    esp,0x10
c0018c13:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018c18:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018c1f:	75 05                	jne    c0018c26 <CPU::displayFeatures()+0x198>
c0018c21:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018c26:	52                   	push   edx
c0018c27:	52                   	push   edx
c0018c28:	50                   	push   eax
c0018c29:	68 2c b3 02 c0       	push   0xc002b32c
c0018c2e:	e8 7b 9f ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018c33:	83 c4 10             	add    esp,0x10
c0018c36:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018c3b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018c42:	75 05                	jne    c0018c49 <CPU::displayFeatures()+0x1bb>
c0018c44:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018c49:	51                   	push   ecx
c0018c4a:	51                   	push   ecx
c0018c4b:	50                   	push   eax
c0018c4c:	68 43 b3 02 c0       	push   0xc002b343
c0018c51:	e8 58 9f ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018c56:	83 c4 10             	add    esp,0x10
c0018c59:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018c5e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018c65:	75 05                	jne    c0018c6c <CPU::displayFeatures()+0x1de>
c0018c67:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018c6c:	52                   	push   edx
c0018c6d:	52                   	push   edx
c0018c6e:	50                   	push   eax
c0018c6f:	68 5a b3 02 c0       	push   0xc002b35a
c0018c74:	e8 35 9f ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018c79:	83 c4 10             	add    esp,0x10
c0018c7c:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018c81:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018c88:	75 05                	jne    c0018c8f <CPU::displayFeatures()+0x201>
c0018c8a:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018c8f:	51                   	push   ecx
c0018c90:	51                   	push   ecx
c0018c91:	50                   	push   eax
c0018c92:	68 71 b3 02 c0       	push   0xc002b371
c0018c97:	e8 12 9f ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018c9c:	83 c4 10             	add    esp,0x10
c0018c9f:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018ca4:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018cab:	75 05                	jne    c0018cb2 <CPU::displayFeatures()+0x224>
c0018cad:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018cb2:	52                   	push   edx
c0018cb3:	52                   	push   edx
c0018cb4:	50                   	push   eax
c0018cb5:	68 88 b3 02 c0       	push   0xc002b388
c0018cba:	e8 ef 9e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018cbf:	83 c4 10             	add    esp,0x10
c0018cc2:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018cc7:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018cce:	78 05                	js     c0018cd5 <CPU::displayFeatures()+0x247>
c0018cd0:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018cd5:	51                   	push   ecx
c0018cd6:	51                   	push   ecx
c0018cd7:	50                   	push   eax
c0018cd8:	68 9f b3 02 c0       	push   0xc002b39f
c0018cdd:	e8 cc 9e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018ce2:	83 c4 10             	add    esp,0x10
c0018ce5:	b8 92 9c 02 c0       	mov    eax,0xc0029c92
c0018cea:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018cf1:	75 05                	jne    c0018cf8 <CPU::displayFeatures()+0x26a>
c0018cf3:	b8 96 9c 02 c0       	mov    eax,0xc0029c96
c0018cf8:	52                   	push   edx
c0018cf9:	52                   	push   edx
c0018cfa:	50                   	push   eax
c0018cfb:	68 b6 b3 02 c0       	push   0xc002b3b6
c0018d00:	e8 a9 9e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0018d05:	83 c4 18             	add    esp,0x18
c0018d08:	5b                   	pop    ebx
c0018d09:	c3                   	ret    

c0018d0a <CPU::detectFeatures()>:
c0018d0a:	55                   	push   ebp
c0018d0b:	57                   	push   edi
c0018d0c:	56                   	push   esi
c0018d0d:	53                   	push   ebx
c0018d0e:	83 ec 50             	sub    esp,0x50
c0018d11:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018d15:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018d1f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018d26:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018d2c:	6a 0d                	push   0xd
c0018d2e:	6a 00                	push   0x0
c0018d30:	57                   	push   edi
c0018d31:	e8 42 7a fe ff       	call   c0000778 <memset>
c0018d36:	83 c4 10             	add    esp,0x10
c0018d39:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0018d3e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018d45:	0f 84 20 09 00 00    	je     c001966b <CPU::detectFeatures()+0x961>
c0018d4b:	83 ec 0c             	sub    esp,0xc
c0018d4e:	6a 10                	push   0x10
c0018d50:	e8 f3 fb ff ff       	call   c0018948 <CPU::cpuidCheckEDX(unsigned int)>
c0018d55:	83 e0 01             	and    eax,0x1
c0018d58:	8d 14 00             	lea    edx,[eax+eax*1]
c0018d5b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d61:	83 e0 fd             	and    eax,0xfffffffd
c0018d64:	09 d0                	or     eax,edx
c0018d66:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d6c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018d73:	e8 d0 fb ff ff       	call   c0018948 <CPU::cpuidCheckEDX(unsigned int)>
c0018d78:	83 e0 01             	and    eax,0x1
c0018d7b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018d82:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d88:	83 e0 fb             	and    eax,0xfffffffb
c0018d8b:	09 d0                	or     eax,edx
c0018d8d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d93:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018d9a:	e8 a9 fb ff ff       	call   c0018948 <CPU::cpuidCheckEDX(unsigned int)>
c0018d9f:	83 e0 01             	and    eax,0x1
c0018da2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018da9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018daf:	83 e0 f7             	and    eax,0xfffffff7
c0018db2:	09 d0                	or     eax,edx
c0018db4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018dba:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018dc1:	e8 82 fb ff ff       	call   c0018948 <CPU::cpuidCheckEDX(unsigned int)>
c0018dc6:	83 e0 01             	and    eax,0x1
c0018dc9:	c1 e0 04             	shl    eax,0x4
c0018dcc:	88 c2                	mov    dl,al
c0018dce:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018dd4:	83 e0 ef             	and    eax,0xffffffef
c0018dd7:	09 d0                	or     eax,edx
c0018dd9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ddf:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018de6:	e8 5d fb ff ff       	call   c0018948 <CPU::cpuidCheckEDX(unsigned int)>
c0018deb:	83 e0 01             	and    eax,0x1
c0018dee:	c1 e0 05             	shl    eax,0x5
c0018df1:	88 c2                	mov    dl,al
c0018df3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018df9:	83 e0 df             	and    eax,0xffffffdf
c0018dfc:	09 d0                	or     eax,edx
c0018dfe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e04:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018e0b:	e8 38 fb ff ff       	call   c0018948 <CPU::cpuidCheckEDX(unsigned int)>
c0018e10:	83 e0 01             	and    eax,0x1
c0018e13:	8d 14 00             	lea    edx,[eax+eax*1]
c0018e16:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018e1c:	83 e0 fd             	and    eax,0xfffffffd
c0018e1f:	09 d0                	or     eax,edx
c0018e21:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018e27:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018e2e:	e8 15 fb ff ff       	call   c0018948 <CPU::cpuidCheckEDX(unsigned int)>
c0018e33:	83 e0 01             	and    eax,0x1
c0018e36:	c1 e0 06             	shl    eax,0x6
c0018e39:	88 c2                	mov    dl,al
c0018e3b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018e41:	83 e0 bf             	and    eax,0xffffffbf
c0018e44:	09 d0                	or     eax,edx
c0018e46:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018e4c:	58                   	pop    eax
c0018e4d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018e51:	56                   	push   esi
c0018e52:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018e56:	55                   	push   ebp
c0018e57:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e5b:	50                   	push   eax
c0018e5c:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018e60:	52                   	push   edx
c0018e61:	6a 00                	push   0x0
c0018e63:	e8 5c fa ff ff       	call   c00188c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e68:	83 c4 1c             	add    esp,0x1c
c0018e6b:	6a 04                	push   0x4
c0018e6d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018e71:	50                   	push   eax
c0018e72:	57                   	push   edi
c0018e73:	e8 cc 78 fe ff       	call   c0000744 <memcpy>
c0018e78:	83 c4 0c             	add    esp,0xc
c0018e7b:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018e81:	6a 04                	push   0x4
c0018e83:	56                   	push   esi
c0018e84:	50                   	push   eax
c0018e85:	e8 ba 78 fe ff       	call   c0000744 <memcpy>
c0018e8a:	83 c4 0c             	add    esp,0xc
c0018e8d:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018e93:	6a 04                	push   0x4
c0018e95:	55                   	push   ebp
c0018e96:	50                   	push   eax
c0018e97:	e8 a8 78 fe ff       	call   c0000744 <memcpy>
c0018e9c:	58                   	pop    eax
c0018e9d:	5a                   	pop    edx
c0018e9e:	68 cd b3 02 c0       	push   0xc002b3cd
c0018ea3:	57                   	push   edi
c0018ea4:	e8 17 7a fe ff       	call   c00008c0 <strcmp>
c0018ea9:	83 c4 10             	add    esp,0x10
c0018eac:	85 c0                	test   eax,eax
c0018eae:	75 0f                	jne    c0018ebf <CPU::detectFeatures()+0x1b5>
c0018eb0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018eba:	e9 22 02 00 00       	jmp    c00190e1 <CPU::detectFeatures()+0x3d7>
c0018ebf:	50                   	push   eax
c0018ec0:	50                   	push   eax
c0018ec1:	68 da b3 02 c0       	push   0xc002b3da
c0018ec6:	57                   	push   edi
c0018ec7:	e8 f4 79 fe ff       	call   c00008c0 <strcmp>
c0018ecc:	83 c4 10             	add    esp,0x10
c0018ecf:	85 c0                	test   eax,eax
c0018ed1:	74 dd                	je     c0018eb0 <CPU::detectFeatures()+0x1a6>
c0018ed3:	51                   	push   ecx
c0018ed4:	51                   	push   ecx
c0018ed5:	68 e7 b3 02 c0       	push   0xc002b3e7
c0018eda:	57                   	push   edi
c0018edb:	e8 e0 79 fe ff       	call   c00008c0 <strcmp>
c0018ee0:	83 c4 10             	add    esp,0x10
c0018ee3:	85 c0                	test   eax,eax
c0018ee5:	74 2a                	je     c0018f11 <CPU::detectFeatures()+0x207>
c0018ee7:	52                   	push   edx
c0018ee8:	52                   	push   edx
c0018ee9:	68 f4 b3 02 c0       	push   0xc002b3f4
c0018eee:	57                   	push   edi
c0018eef:	e8 cc 79 fe ff       	call   c00008c0 <strcmp>
c0018ef4:	83 c4 10             	add    esp,0x10
c0018ef7:	85 c0                	test   eax,eax
c0018ef9:	74 16                	je     c0018f11 <CPU::detectFeatures()+0x207>
c0018efb:	50                   	push   eax
c0018efc:	50                   	push   eax
c0018efd:	68 01 b4 02 c0       	push   0xc002b401
c0018f02:	57                   	push   edi
c0018f03:	e8 b8 79 fe ff       	call   c00008c0 <strcmp>
c0018f08:	83 c4 10             	add    esp,0x10
c0018f0b:	85 c0                	test   eax,eax
c0018f0d:	74 48                	je     c0018f57 <CPU::detectFeatures()+0x24d>
c0018f0f:	eb 0f                	jmp    c0018f20 <CPU::detectFeatures()+0x216>
c0018f11:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018f1b:	e9 c1 01 00 00       	jmp    c00190e1 <CPU::detectFeatures()+0x3d7>
c0018f20:	50                   	push   eax
c0018f21:	50                   	push   eax
c0018f22:	68 0e b4 02 c0       	push   0xc002b40e
c0018f27:	57                   	push   edi
c0018f28:	e8 93 79 fe ff       	call   c00008c0 <strcmp>
c0018f2d:	83 c4 10             	add    esp,0x10
c0018f30:	85 c0                	test   eax,eax
c0018f32:	74 23                	je     c0018f57 <CPU::detectFeatures()+0x24d>
c0018f34:	50                   	push   eax
c0018f35:	50                   	push   eax
c0018f36:	68 1b b4 02 c0       	push   0xc002b41b
c0018f3b:	57                   	push   edi
c0018f3c:	e8 7f 79 fe ff       	call   c00008c0 <strcmp>
c0018f41:	83 c4 10             	add    esp,0x10
c0018f44:	85 c0                	test   eax,eax
c0018f46:	75 1e                	jne    c0018f66 <CPU::detectFeatures()+0x25c>
c0018f48:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018f52:	e9 8a 01 00 00       	jmp    c00190e1 <CPU::detectFeatures()+0x3d7>
c0018f57:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018f61:	e9 7b 01 00 00       	jmp    c00190e1 <CPU::detectFeatures()+0x3d7>
c0018f66:	50                   	push   eax
c0018f67:	50                   	push   eax
c0018f68:	68 28 b4 02 c0       	push   0xc002b428
c0018f6d:	57                   	push   edi
c0018f6e:	e8 4d 79 fe ff       	call   c00008c0 <strcmp>
c0018f73:	83 c4 10             	add    esp,0x10
c0018f76:	85 c0                	test   eax,eax
c0018f78:	75 0f                	jne    c0018f89 <CPU::detectFeatures()+0x27f>
c0018f7a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018f84:	e9 58 01 00 00       	jmp    c00190e1 <CPU::detectFeatures()+0x3d7>
c0018f89:	50                   	push   eax
c0018f8a:	50                   	push   eax
c0018f8b:	68 e7 b3 02 c0       	push   0xc002b3e7
c0018f90:	57                   	push   edi
c0018f91:	e8 2a 79 fe ff       	call   c00008c0 <strcmp>
c0018f96:	83 c4 10             	add    esp,0x10
c0018f99:	85 c0                	test   eax,eax
c0018f9b:	75 0f                	jne    c0018fac <CPU::detectFeatures()+0x2a2>
c0018f9d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018fa7:	e9 35 01 00 00       	jmp    c00190e1 <CPU::detectFeatures()+0x3d7>
c0018fac:	50                   	push   eax
c0018fad:	50                   	push   eax
c0018fae:	68 35 b4 02 c0       	push   0xc002b435
c0018fb3:	57                   	push   edi
c0018fb4:	e8 07 79 fe ff       	call   c00008c0 <strcmp>
c0018fb9:	83 c4 10             	add    esp,0x10
c0018fbc:	85 c0                	test   eax,eax
c0018fbe:	75 0f                	jne    c0018fcf <CPU::detectFeatures()+0x2c5>
c0018fc0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018fca:	e9 12 01 00 00       	jmp    c00190e1 <CPU::detectFeatures()+0x3d7>
c0018fcf:	51                   	push   ecx
c0018fd0:	51                   	push   ecx
c0018fd1:	68 42 b4 02 c0       	push   0xc002b442
c0018fd6:	57                   	push   edi
c0018fd7:	e8 e4 78 fe ff       	call   c00008c0 <strcmp>
c0018fdc:	83 c4 10             	add    esp,0x10
c0018fdf:	85 c0                	test   eax,eax
c0018fe1:	75 0f                	jne    c0018ff2 <CPU::detectFeatures()+0x2e8>
c0018fe3:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018fed:	e9 ef 00 00 00       	jmp    c00190e1 <CPU::detectFeatures()+0x3d7>
c0018ff2:	52                   	push   edx
c0018ff3:	52                   	push   edx
c0018ff4:	68 4f b4 02 c0       	push   0xc002b44f
c0018ff9:	57                   	push   edi
c0018ffa:	e8 c1 78 fe ff       	call   c00008c0 <strcmp>
c0018fff:	83 c4 10             	add    esp,0x10
c0019002:	85 c0                	test   eax,eax
c0019004:	75 0f                	jne    c0019015 <CPU::detectFeatures()+0x30b>
c0019006:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019010:	e9 cc 00 00 00       	jmp    c00190e1 <CPU::detectFeatures()+0x3d7>
c0019015:	50                   	push   eax
c0019016:	50                   	push   eax
c0019017:	68 5c b4 02 c0       	push   0xc002b45c
c001901c:	57                   	push   edi
c001901d:	e8 9e 78 fe ff       	call   c00008c0 <strcmp>
c0019022:	83 c4 10             	add    esp,0x10
c0019025:	85 c0                	test   eax,eax
c0019027:	75 0f                	jne    c0019038 <CPU::detectFeatures()+0x32e>
c0019029:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019033:	e9 a9 00 00 00       	jmp    c00190e1 <CPU::detectFeatures()+0x3d7>
c0019038:	50                   	push   eax
c0019039:	50                   	push   eax
c001903a:	68 69 b4 02 c0       	push   0xc002b469
c001903f:	57                   	push   edi
c0019040:	e8 7b 78 fe ff       	call   c00008c0 <strcmp>
c0019045:	83 c4 10             	add    esp,0x10
c0019048:	85 c0                	test   eax,eax
c001904a:	75 0f                	jne    c001905b <CPU::detectFeatures()+0x351>
c001904c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019056:	e9 86 00 00 00       	jmp    c00190e1 <CPU::detectFeatures()+0x3d7>
c001905b:	50                   	push   eax
c001905c:	50                   	push   eax
c001905d:	68 76 b4 02 c0       	push   0xc002b476
c0019062:	57                   	push   edi
c0019063:	e8 58 78 fe ff       	call   c00008c0 <strcmp>
c0019068:	83 c4 10             	add    esp,0x10
c001906b:	85 c0                	test   eax,eax
c001906d:	75 0c                	jne    c001907b <CPU::detectFeatures()+0x371>
c001906f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019079:	eb 66                	jmp    c00190e1 <CPU::detectFeatures()+0x3d7>
c001907b:	50                   	push   eax
c001907c:	50                   	push   eax
c001907d:	68 83 b4 02 c0       	push   0xc002b483
c0019082:	57                   	push   edi
c0019083:	e8 38 78 fe ff       	call   c00008c0 <strcmp>
c0019088:	83 c4 10             	add    esp,0x10
c001908b:	85 c0                	test   eax,eax
c001908d:	75 0c                	jne    c001909b <CPU::detectFeatures()+0x391>
c001908f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019099:	eb 46                	jmp    c00190e1 <CPU::detectFeatures()+0x3d7>
c001909b:	50                   	push   eax
c001909c:	50                   	push   eax
c001909d:	68 90 b4 02 c0       	push   0xc002b490
c00190a2:	57                   	push   edi
c00190a3:	e8 18 78 fe ff       	call   c00008c0 <strcmp>
c00190a8:	83 c4 10             	add    esp,0x10
c00190ab:	85 c0                	test   eax,eax
c00190ad:	74 e0                	je     c001908f <CPU::detectFeatures()+0x385>
c00190af:	50                   	push   eax
c00190b0:	50                   	push   eax
c00190b1:	68 9d b4 02 c0       	push   0xc002b49d
c00190b6:	57                   	push   edi
c00190b7:	e8 04 78 fe ff       	call   c00008c0 <strcmp>
c00190bc:	83 c4 10             	add    esp,0x10
c00190bf:	85 c0                	test   eax,eax
c00190c1:	74 cc                	je     c001908f <CPU::detectFeatures()+0x385>
c00190c3:	51                   	push   ecx
c00190c4:	51                   	push   ecx
c00190c5:	68 aa b4 02 c0       	push   0xc002b4aa
c00190ca:	57                   	push   edi
c00190cb:	e8 f0 77 fe ff       	call   c00008c0 <strcmp>
c00190d0:	83 c4 10             	add    esp,0x10
c00190d3:	85 c0                	test   eax,eax
c00190d5:	74 b8                	je     c001908f <CPU::detectFeatures()+0x385>
c00190d7:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00190e1:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00190e6:	0f 86 be 00 00 00    	jbe    c00191aa <CPU::detectFeatures()+0x4a0>
c00190ec:	83 ec 0c             	sub    esp,0xc
c00190ef:	68 80 00 00 00       	push   0x80
c00190f4:	e8 ab f8 ff ff       	call   c00189a4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00190f9:	83 e0 01             	and    eax,0x1
c00190fc:	c1 e0 06             	shl    eax,0x6
c00190ff:	88 c2                	mov    dl,al
c0019101:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019107:	83 e0 bf             	and    eax,0xffffffbf
c001910a:	09 d0                	or     eax,edx
c001910c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019112:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019119:	e8 86 f8 ff ff       	call   c00189a4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001911e:	83 e0 01             	and    eax,0x1
c0019121:	c1 e0 04             	shl    eax,0x4
c0019124:	88 c2                	mov    dl,al
c0019126:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001912c:	83 e0 ef             	and    eax,0xffffffef
c001912f:	09 d0                	or     eax,edx
c0019131:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019137:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001913e:	e8 61 f8 ff ff       	call   c00189a4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019143:	c1 e0 07             	shl    eax,0x7
c0019146:	88 c2                	mov    dl,al
c0019148:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001914e:	83 e0 7f             	and    eax,0x7f
c0019151:	09 d0                	or     eax,edx
c0019153:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019159:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019160:	e8 6d f8 ff ff       	call   c00189d2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019165:	83 e0 01             	and    eax,0x1
c0019168:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001916f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019175:	83 e0 f7             	and    eax,0xfffffff7
c0019178:	09 d0                	or     eax,edx
c001917a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019180:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019187:	e8 46 f8 ff ff       	call   c00189d2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001918c:	83 c4 10             	add    esp,0x10
c001918f:	83 e0 01             	and    eax,0x1
c0019192:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019199:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001919f:	83 e0 fb             	and    eax,0xfffffffb
c00191a2:	09 d0                	or     eax,edx
c00191a4:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191aa:	83 ec 0c             	sub    esp,0xc
c00191ad:	56                   	push   esi
c00191ae:	55                   	push   ebp
c00191af:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00191b3:	57                   	push   edi
c00191b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00191b8:	50                   	push   eax
c00191b9:	6a 01                	push   0x1
c00191bb:	e8 04 f7 ff ff       	call   c00188c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191c0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00191c4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00191ca:	88 ca                	mov    dl,cl
c00191cc:	83 e0 f0             	and    eax,0xfffffff0
c00191cf:	83 e2 0f             	and    edx,0xf
c00191d2:	09 d0                	or     eax,edx
c00191d4:	88 ca                	mov    dl,cl
c00191d6:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00191dc:	c0 ea 04             	shr    dl,0x4
c00191df:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00191e3:	0f b6 c2             	movzx  eax,dl
c00191e6:	83 c4 20             	add    esp,0x20
c00191e9:	c1 e0 06             	shl    eax,0x6
c00191ec:	89 c5                	mov    ebp,eax
c00191ee:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191f4:	66 25 3f c0          	and    ax,0xc03f
c00191f8:	09 e8                	or     eax,ebp
c00191fa:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019201:	89 c8                	mov    eax,ecx
c0019203:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019209:	c1 e8 08             	shr    eax,0x8
c001920c:	83 e2 3f             	and    edx,0x3f
c001920f:	83 e0 0f             	and    eax,0xf
c0019212:	89 c5                	mov    ebp,eax
c0019214:	c1 e5 06             	shl    ebp,0x6
c0019217:	09 d5                	or     ebp,edx
c0019219:	89 ea                	mov    edx,ebp
c001921b:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019221:	88 c2                	mov    dl,al
c0019223:	c0 ea 02             	shr    dl,0x2
c0019226:	89 d5                	mov    ebp,edx
c0019228:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001922e:	83 e2 c0             	and    edx,0xffffffc0
c0019231:	09 d5                	or     ebp,edx
c0019233:	89 ea                	mov    edx,ebp
c0019235:	89 cd                	mov    ebp,ecx
c0019237:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001923d:	c1 ed 0c             	shr    ebp,0xc
c0019240:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019246:	83 e5 03             	and    ebp,0x3
c0019249:	83 e2 cf             	and    edx,0xffffffcf
c001924c:	c1 e5 04             	shl    ebp,0x4
c001924f:	09 d5                	or     ebp,edx
c0019251:	3c 06                	cmp    al,0x6
c0019253:	89 ea                	mov    edx,ebp
c0019255:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001925b:	74 04                	je     c0019261 <CPU::detectFeatures()+0x557>
c001925d:	3c 0f                	cmp    al,0xf
c001925f:	75 5c                	jne    c00192bd <CPU::detectFeatures()+0x5b3>
c0019261:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019265:	89 cd                	mov    ebp,ecx
c0019267:	c1 ed 10             	shr    ebp,0x10
c001926a:	c1 e5 04             	shl    ebp,0x4
c001926d:	09 ea                	or     edx,ebp
c001926f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019275:	0f b6 d2             	movzx  edx,dl
c0019278:	66 81 e5 3f c0       	and    bp,0xc03f
c001927d:	c1 e2 06             	shl    edx,0x6
c0019280:	09 ea                	or     edx,ebp
c0019282:	3c 0f                	cmp    al,0xf
c0019284:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001928b:	75 30                	jne    c00192bd <CPU::detectFeatures()+0x5b3>
c001928d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019293:	c1 e9 14             	shr    ecx,0x14
c0019296:	83 e0 3f             	and    eax,0x3f
c0019299:	83 c1 0f             	add    ecx,0xf
c001929c:	88 ca                	mov    dl,cl
c001929e:	c0 e9 02             	shr    cl,0x2
c00192a1:	c1 e2 06             	shl    edx,0x6
c00192a4:	09 d0                	or     eax,edx
c00192a6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00192ac:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00192b2:	83 e0 c0             	and    eax,0xffffffc0
c00192b5:	09 c1                	or     ecx,eax
c00192b7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00192bd:	83 ec 0c             	sub    esp,0xc
c00192c0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00192c7:	56                   	push   esi
c00192c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192cc:	50                   	push   eax
c00192cd:	57                   	push   edi
c00192ce:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00192d2:	55                   	push   ebp
c00192d3:	68 00 00 00 80       	push   0x80000000
c00192d8:	e8 e7 f5 ff ff       	call   c00188c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192dd:	83 c4 20             	add    esp,0x20
c00192e0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00192e8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00192ec:	76 1e                	jbe    c001930c <CPU::detectFeatures()+0x602>
c00192ee:	83 ec 0c             	sub    esp,0xc
c00192f1:	56                   	push   esi
c00192f2:	50                   	push   eax
c00192f3:	57                   	push   edi
c00192f4:	55                   	push   ebp
c00192f5:	68 01 00 00 80       	push   0x80000001
c00192fa:	e8 c5 f5 ff ff       	call   c00188c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192ff:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019309:	83 c4 20             	add    esp,0x20
c001930c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019312:	83 f8 01             	cmp    eax,0x1
c0019315:	75 6f                	jne    c0019386 <CPU::detectFeatures()+0x67c>
c0019317:	51                   	push   ecx
c0019318:	51                   	push   ecx
c0019319:	68 b6 b4 02 c0       	push   0xc002b4b6
c001931e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019322:	56                   	push   esi
c0019323:	e8 0c 75 fe ff       	call   c0000834 <strcpy>
c0019328:	5f                   	pop    edi
c0019329:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001932f:	5d                   	pop    ebp
c0019330:	66 c1 e8 06          	shr    ax,0x6
c0019334:	0f b6 c0             	movzx  eax,al
c0019337:	50                   	push   eax
c0019338:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001933e:	c1 e8 0e             	shr    eax,0xe
c0019341:	0f b6 c0             	movzx  eax,al
c0019344:	50                   	push   eax
c0019345:	e8 24 f2 ff ff       	call   c001856e <CPU::lookupIntelName(unsigned char, unsigned char)>
c001934a:	5a                   	pop    edx
c001934b:	59                   	pop    ecx
c001934c:	50                   	push   eax
c001934d:	56                   	push   esi
c001934e:	e8 21 76 fe ff       	call   c0000974 <strcat>
c0019353:	5f                   	pop    edi
c0019354:	5d                   	pop    ebp
c0019355:	56                   	push   esi
c0019356:	53                   	push   ebx
c0019357:	e8 5a ae ff ff       	call   c00141b6 <Device::setName(char const*)>
c001935c:	58                   	pop    eax
c001935d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019363:	5a                   	pop    edx
c0019364:	68 bd b4 02 c0       	push   0xc002b4bd
c0019369:	50                   	push   eax
c001936a:	e8 51 75 fe ff       	call   c00008c0 <strcmp>
c001936f:	83 c4 10             	add    esp,0x10
c0019372:	85 c0                	test   eax,eax
c0019374:	0f 85 71 03 00 00    	jne    c00196eb <CPU::detectFeatures()+0x9e1>
c001937a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019381:	e9 65 03 00 00       	jmp    c00196eb <CPU::detectFeatures()+0x9e1>
c0019386:	83 f8 02             	cmp    eax,0x2
c0019389:	0f 85 b5 00 00 00    	jne    c0019444 <CPU::detectFeatures()+0x73a>
c001938f:	57                   	push   edi
c0019390:	57                   	push   edi
c0019391:	68 cf b4 02 c0       	push   0xc002b4cf
c0019396:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001939a:	56                   	push   esi
c001939b:	e8 94 74 fe ff       	call   c0000834 <strcpy>
c00193a0:	5d                   	pop    ebp
c00193a1:	58                   	pop    eax
c00193a2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193a8:	66 c1 e8 06          	shr    ax,0x6
c00193ac:	0f b6 c0             	movzx  eax,al
c00193af:	50                   	push   eax
c00193b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193b6:	c1 e8 0e             	shr    eax,0xe
c00193b9:	0f b6 c0             	movzx  eax,al
c00193bc:	50                   	push   eax
c00193bd:	e8 18 f0 ff ff       	call   c00183da <CPU::lookupAMDName(unsigned char, unsigned char)>
c00193c2:	5a                   	pop    edx
c00193c3:	59                   	pop    ecx
c00193c4:	50                   	push   eax
c00193c5:	56                   	push   esi
c00193c6:	e8 a9 75 fe ff       	call   c0000974 <strcat>
c00193cb:	5f                   	pop    edi
c00193cc:	5d                   	pop    ebp
c00193cd:	56                   	push   esi
c00193ce:	53                   	push   ebx
c00193cf:	e8 e2 ad ff ff       	call   c00141b6 <Device::setName(char const*)>
c00193d4:	58                   	pop    eax
c00193d5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00193db:	5a                   	pop    edx
c00193dc:	68 d4 b4 02 c0       	push   0xc002b4d4
c00193e1:	50                   	push   eax
c00193e2:	e8 d9 74 fe ff       	call   c00008c0 <strcmp>
c00193e7:	83 c4 10             	add    esp,0x10
c00193ea:	85 c0                	test   eax,eax
c00193ec:	75 20                	jne    c001940e <CPU::detectFeatures()+0x704>
c00193ee:	8b 15 a8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0a8
c00193f4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00193fa:	a8 01                	test   al,0x1
c00193fc:	74 10                	je     c001940e <CPU::detectFeatures()+0x704>
c00193fe:	83 e0 fe             	and    eax,0xfffffffe
c0019401:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019407:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001940e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019414:	c1 e8 0e             	shr    eax,0xe
c0019417:	3c 05                	cmp    al,0x5
c0019419:	0f 85 cc 02 00 00    	jne    c00196eb <CPU::detectFeatures()+0x9e1>
c001941f:	56                   	push   esi
c0019420:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019426:	83 e0 0f             	and    eax,0xf
c0019429:	50                   	push   eax
c001942a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019430:	66 c1 e8 06          	shr    ax,0x6
c0019434:	0f b6 c0             	movzx  eax,al
c0019437:	50                   	push   eax
c0019438:	6a 05                	push   0x5
c001943a:	e8 11 f4 ff ff       	call   c0018850 <CPU::AMD_K6_writeback(int, int, int)>
c001943f:	e9 1f 02 00 00       	jmp    c0019663 <CPU::detectFeatures()+0x959>
c0019444:	8d 50 fd             	lea    edx,[eax-0x3]
c0019447:	83 fa 01             	cmp    edx,0x1
c001944a:	76 09                	jbe    c0019455 <CPU::detectFeatures()+0x74b>
c001944c:	83 f8 06             	cmp    eax,0x6
c001944f:	0f 85 91 01 00 00    	jne    c00195e6 <CPU::detectFeatures()+0x8dc>
c0019455:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001945b:	c1 ea 0e             	shr    edx,0xe
c001945e:	80 fa 05             	cmp    dl,0x5
c0019461:	75 7b                	jne    c00194de <CPU::detectFeatures()+0x7d4>
c0019463:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019469:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001946e:	66 81 fa 00 01       	cmp    dx,0x100
c0019473:	75 0c                	jne    c0019481 <CPU::detectFeatures()+0x777>
c0019475:	51                   	push   ecx
c0019476:	51                   	push   ecx
c0019477:	68 db b4 02 c0       	push   0xc002b4db
c001947c:	e9 dc 01 00 00       	jmp    c001965d <CPU::detectFeatures()+0x953>
c0019481:	66 81 fa 00 02       	cmp    dx,0x200
c0019486:	75 0c                	jne    c0019494 <CPU::detectFeatures()+0x78a>
c0019488:	52                   	push   edx
c0019489:	52                   	push   edx
c001948a:	68 ee b4 02 c0       	push   0xc002b4ee
c001948f:	e9 c9 01 00 00       	jmp    c001965d <CPU::detectFeatures()+0x953>
c0019494:	66 81 fa 40 02       	cmp    dx,0x240
c0019499:	75 0c                	jne    c00194a7 <CPU::detectFeatures()+0x79d>
c001949b:	50                   	push   eax
c001949c:	50                   	push   eax
c001949d:	68 00 b5 02 c0       	push   0xc002b500
c00194a2:	e9 b6 01 00 00       	jmp    c001965d <CPU::detectFeatures()+0x953>
c00194a7:	83 f8 06             	cmp    eax,0x6
c00194aa:	75 0c                	jne    c00194b8 <CPU::detectFeatures()+0x7ae>
c00194ac:	50                   	push   eax
c00194ad:	50                   	push   eax
c00194ae:	68 12 b5 02 c0       	push   0xc002b512
c00194b3:	e9 a5 01 00 00       	jmp    c001965d <CPU::detectFeatures()+0x953>
c00194b8:	83 f8 04             	cmp    eax,0x4
c00194bb:	75 0c                	jne    c00194c9 <CPU::detectFeatures()+0x7bf>
c00194bd:	50                   	push   eax
c00194be:	50                   	push   eax
c00194bf:	68 1e b5 02 c0       	push   0xc002b51e
c00194c4:	e9 94 01 00 00       	jmp    c001965d <CPU::detectFeatures()+0x953>
c00194c9:	83 f8 03             	cmp    eax,0x3
c00194cc:	0f 85 19 02 00 00    	jne    c00196eb <CPU::detectFeatures()+0x9e1>
c00194d2:	50                   	push   eax
c00194d3:	50                   	push   eax
c00194d4:	68 26 b5 02 c0       	push   0xc002b526
c00194d9:	e9 7f 01 00 00       	jmp    c001965d <CPU::detectFeatures()+0x953>
c00194de:	80 fa 06             	cmp    dl,0x6
c00194e1:	0f 85 db 00 00 00    	jne    c00195c2 <CPU::detectFeatures()+0x8b8>
c00194e7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00194ed:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00194f2:	66 81 fa 80 01       	cmp    dx,0x180
c00194f7:	75 0c                	jne    c0019505 <CPU::detectFeatures()+0x7fb>
c00194f9:	50                   	push   eax
c00194fa:	50                   	push   eax
c00194fb:	68 31 b5 02 c0       	push   0xc002b531
c0019500:	e9 58 01 00 00       	jmp    c001965d <CPU::detectFeatures()+0x953>
c0019505:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001950b:	66 f7 c1 80 ff       	test   cx,0xff80
c0019510:	75 0c                	jne    c001951e <CPU::detectFeatures()+0x814>
c0019512:	50                   	push   eax
c0019513:	50                   	push   eax
c0019514:	68 41 b5 02 c0       	push   0xc002b541
c0019519:	e9 3f 01 00 00       	jmp    c001965d <CPU::detectFeatures()+0x953>
c001951e:	66 81 fa 40 02       	cmp    dx,0x240
c0019523:	75 0c                	jne    c0019531 <CPU::detectFeatures()+0x827>
c0019525:	55                   	push   ebp
c0019526:	55                   	push   ebp
c0019527:	68 48 b5 02 c0       	push   0xc002b548
c001952c:	e9 2c 01 00 00       	jmp    c001965d <CPU::detectFeatures()+0x953>
c0019531:	66 81 fa 80 02       	cmp    dx,0x280
c0019536:	75 0c                	jne    c0019544 <CPU::detectFeatures()+0x83a>
c0019538:	57                   	push   edi
c0019539:	57                   	push   edi
c001953a:	68 51 b5 02 c0       	push   0xc002b551
c001953f:	e9 19 01 00 00       	jmp    c001965d <CPU::detectFeatures()+0x953>
c0019544:	66 81 fa 40 03       	cmp    dx,0x340
c0019549:	74 ed                	je     c0019538 <CPU::detectFeatures()+0x82e>
c001954b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019550:	75 0c                	jne    c001955e <CPU::detectFeatures()+0x854>
c0019552:	56                   	push   esi
c0019553:	56                   	push   esi
c0019554:	68 58 b5 02 c0       	push   0xc002b558
c0019559:	e9 ff 00 00 00       	jmp    c001965d <CPU::detectFeatures()+0x953>
c001955e:	83 f8 06             	cmp    eax,0x6
c0019561:	0f 84 45 ff ff ff    	je     c00194ac <CPU::detectFeatures()+0x7a2>
c0019567:	83 f8 04             	cmp    eax,0x4
c001956a:	0f 84 4d ff ff ff    	je     c00194bd <CPU::detectFeatures()+0x7b3>
c0019570:	83 f8 03             	cmp    eax,0x3
c0019573:	0f 85 72 01 00 00    	jne    c00196eb <CPU::detectFeatures()+0x9e1>
c0019579:	51                   	push   ecx
c001957a:	51                   	push   ecx
c001957b:	68 61 b5 02 c0       	push   0xc002b561
c0019580:	53                   	push   ebx
c0019581:	e8 30 ac ff ff       	call   c00141b6 <Device::setName(char const*)>
c0019586:	b1 c1                	mov    cl,0xc1
c0019588:	88 c8                	mov    al,cl
c001958a:	e6 22                	out    0x22,al
c001958c:	e4 23                	in     al,0x23
c001958e:	88 c2                	mov    dl,al
c0019590:	88 c8                	mov    al,cl
c0019592:	e6 22                	out    0x22,al
c0019594:	88 d0                	mov    al,dl
c0019596:	83 c8 10             	or     eax,0x10
c0019599:	e6 23                	out    0x23,al
c001959b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00195a2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195a5:	89 d0                	mov    eax,edx
c00195a7:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00195ad:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00195b1:	40                   	inc    eax
c00195b2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00195b8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195bd:	e9 a1 00 00 00       	jmp    c0019663 <CPU::detectFeatures()+0x959>
c00195c2:	83 f8 06             	cmp    eax,0x6
c00195c5:	0f 84 e1 fe ff ff    	je     c00194ac <CPU::detectFeatures()+0x7a2>
c00195cb:	83 f8 04             	cmp    eax,0x4
c00195ce:	0f 84 e9 fe ff ff    	je     c00194bd <CPU::detectFeatures()+0x7b3>
c00195d4:	83 f8 03             	cmp    eax,0x3
c00195d7:	0f 85 0e 01 00 00    	jne    c00196eb <CPU::detectFeatures()+0x9e1>
c00195dd:	52                   	push   edx
c00195de:	52                   	push   edx
c00195df:	68 6c b5 02 c0       	push   0xc002b56c
c00195e4:	eb 77                	jmp    c001965d <CPU::detectFeatures()+0x953>
c00195e6:	83 f8 07             	cmp    eax,0x7
c00195e9:	75 09                	jne    c00195f4 <CPU::detectFeatures()+0x8ea>
c00195eb:	50                   	push   eax
c00195ec:	50                   	push   eax
c00195ed:	68 76 b5 02 c0       	push   0xc002b576
c00195f2:	eb 69                	jmp    c001965d <CPU::detectFeatures()+0x953>
c00195f4:	83 f8 0a             	cmp    eax,0xa
c00195f7:	75 09                	jne    c0019602 <CPU::detectFeatures()+0x8f8>
c00195f9:	50                   	push   eax
c00195fa:	50                   	push   eax
c00195fb:	68 81 b5 02 c0       	push   0xc002b581
c0019600:	eb 5b                	jmp    c001965d <CPU::detectFeatures()+0x953>
c0019602:	83 f8 0b             	cmp    eax,0xb
c0019605:	75 09                	jne    c0019610 <CPU::detectFeatures()+0x906>
c0019607:	50                   	push   eax
c0019608:	50                   	push   eax
c0019609:	68 89 b5 02 c0       	push   0xc002b589
c001960e:	eb 4d                	jmp    c001965d <CPU::detectFeatures()+0x953>
c0019610:	83 f8 08             	cmp    eax,0x8
c0019613:	75 09                	jne    c001961e <CPU::detectFeatures()+0x914>
c0019615:	50                   	push   eax
c0019616:	50                   	push   eax
c0019617:	68 92 b5 02 c0       	push   0xc002b592
c001961c:	eb 3f                	jmp    c001965d <CPU::detectFeatures()+0x953>
c001961e:	83 f8 09             	cmp    eax,0x9
c0019621:	75 09                	jne    c001962c <CPU::detectFeatures()+0x922>
c0019623:	50                   	push   eax
c0019624:	50                   	push   eax
c0019625:	68 9a b5 02 c0       	push   0xc002b59a
c001962a:	eb 31                	jmp    c001965d <CPU::detectFeatures()+0x953>
c001962c:	83 f8 05             	cmp    eax,0x5
c001962f:	75 09                	jne    c001963a <CPU::detectFeatures()+0x930>
c0019631:	50                   	push   eax
c0019632:	50                   	push   eax
c0019633:	68 a2 b5 02 c0       	push   0xc002b5a2
c0019638:	eb 23                	jmp    c001965d <CPU::detectFeatures()+0x953>
c001963a:	83 f8 0c             	cmp    eax,0xc
c001963d:	75 09                	jne    c0019648 <CPU::detectFeatures()+0x93e>
c001963f:	55                   	push   ebp
c0019640:	55                   	push   ebp
c0019641:	68 b0 b5 02 c0       	push   0xc002b5b0
c0019646:	eb 15                	jmp    c001965d <CPU::detectFeatures()+0x953>
c0019648:	83 f8 0d             	cmp    eax,0xd
c001964b:	75 09                	jne    c0019656 <CPU::detectFeatures()+0x94c>
c001964d:	57                   	push   edi
c001964e:	57                   	push   edi
c001964f:	68 bb b5 02 c0       	push   0xc002b5bb
c0019654:	eb 07                	jmp    c001965d <CPU::detectFeatures()+0x953>
c0019656:	56                   	push   esi
c0019657:	56                   	push   esi
c0019658:	68 cf b5 02 c0       	push   0xc002b5cf
c001965d:	53                   	push   ebx
c001965e:	e8 53 ab ff ff       	call   c00141b6 <Device::setName(char const*)>
c0019663:	83 c4 10             	add    esp,0x10
c0019666:	e9 80 00 00 00       	jmp    c00196eb <CPU::detectFeatures()+0x9e1>
c001966b:	51                   	push   ecx
c001966c:	51                   	push   ecx
c001966d:	68 1b b4 02 c0       	push   0xc002b41b
c0019672:	57                   	push   edi
c0019673:	e8 bc 71 fe ff       	call   c0000834 <strcpy>
c0019678:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019682:	e8 27 6c fe ff       	call   c00002ae <is486>
c0019687:	83 c4 10             	add    esp,0x10
c001968a:	85 c0                	test   eax,eax
c001968c:	74 2b                	je     c00196b9 <CPU::detectFeatures()+0x9af>
c001968e:	52                   	push   edx
c001968f:	52                   	push   edx
c0019690:	68 db b5 02 c0       	push   0xc002b5db
c0019695:	53                   	push   ebx
c0019696:	e8 1b ab ff ff       	call   c00141b6 <Device::setName(char const*)>
c001969b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00196a2:	0f 20 c0             	mov    eax,cr0
c00196a5:	83 e0 14             	and    eax,0x14
c00196a8:	83 c4 10             	add    esp,0x10
c00196ab:	83 f8 04             	cmp    eax,0x4
c00196ae:	75 1f                	jne    c00196cf <CPU::detectFeatures()+0x9c5>
c00196b0:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00196b7:	eb 32                	jmp    c00196eb <CPU::detectFeatures()+0x9e1>
c00196b9:	50                   	push   eax
c00196ba:	50                   	push   eax
c00196bb:	68 e6 b5 02 c0       	push   0xc002b5e6
c00196c0:	53                   	push   ebx
c00196c1:	e8 f0 aa ff ff       	call   c00141b6 <Device::setName(char const*)>
c00196c6:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00196cd:	eb d3                	jmp    c00196a2 <CPU::detectFeatures()+0x998>
c00196cf:	e8 b5 6b fe ff       	call   c0000289 <hasLegacyFPU>
c00196d4:	83 e0 01             	and    eax,0x1
c00196d7:	8d 14 00             	lea    edx,[eax+eax*1]
c00196da:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00196e0:	83 e0 fd             	and    eax,0xfffffffd
c00196e3:	09 d0                	or     eax,edx
c00196e5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00196eb:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00196f2:	83 c4 4c             	add    esp,0x4c
c00196f5:	5b                   	pop    ebx
c00196f6:	5e                   	pop    esi
c00196f7:	5f                   	pop    edi
c00196f8:	5d                   	pop    ebp
c00196f9:	c3                   	ret    

c00196fa <CPU::setupSMEP()>:
c00196fa:	0f 20 e0             	mov    eax,cr4
c00196fd:	0d 00 00 10 00       	or     eax,0x100000
c0019702:	0f 22 e0             	mov    cr4,eax
c0019705:	c3                   	ret    

c0019706 <CPU::setupUMIP()>:
c0019706:	0f 20 e0             	mov    eax,cr4
c0019709:	80 cc 08             	or     ah,0x8
c001970c:	0f 22 e0             	mov    cr4,eax
c001970f:	c3                   	ret    

c0019710 <CPU::setupTSC()>:
c0019710:	0f 20 e0             	mov    eax,cr4
c0019713:	83 c8 04             	or     eax,0x4
c0019716:	0f 22 e0             	mov    cr4,eax
c0019719:	c3                   	ret    

c001971a <CPU::setupLargePages()>:
c001971a:	0f 20 e0             	mov    eax,cr4
c001971d:	83 c8 10             	or     eax,0x10
c0019720:	0f 22 e0             	mov    cr4,eax
c0019723:	c3                   	ret    

c0019724 <CPU::setupPAT()>:
c0019724:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0019729:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019730:	74 2c                	je     c001975e <CPU::setupPAT()+0x3a>
c0019732:	53                   	push   ebx
c0019733:	83 ec 10             	sub    esp,0x10
c0019736:	68 77 02 00 00       	push   0x277
c001973b:	50                   	push   eax
c001973c:	e8 a7 56 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019741:	83 e2 f8             	and    edx,0xfffffff8
c0019744:	83 ca 01             	or     edx,0x1
c0019747:	52                   	push   edx
c0019748:	50                   	push   eax
c0019749:	68 77 02 00 00       	push   0x277
c001974e:	ff 35 a8 e0 02 c0    	push   DWORD PTR ds:0xc002e0a8
c0019754:	e8 bb 56 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019759:	83 c4 28             	add    esp,0x28
c001975c:	5b                   	pop    ebx
c001975d:	c3                   	ret    
c001975e:	c3                   	ret    
c001975f:	90                   	nop

c0019760 <CPU::setupMTRR()>:
c0019760:	c3                   	ret    
c0019761:	90                   	nop

c0019762 <CPU::setupGlobalPages()>:
c0019762:	0f 20 e0             	mov    eax,cr4
c0019765:	0c 80                	or     al,0x80
c0019767:	0f 22 e0             	mov    cr4,eax
c001976a:	c3                   	ret    
c001976b:	90                   	nop

c001976c <CPU::allowUsermodeDataAccess()>:
c001976c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019770:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019777:	74 03                	je     c001977c <CPU::allowUsermodeDataAccess()+0x10>
c0019779:	0f 01 cb             	stac   
c001977c:	c3                   	ret    
c001977d:	90                   	nop

c001977e <CPU::prohibitUsermodeDataAccess()>:
c001977e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019782:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019789:	74 03                	je     c001978e <CPU::prohibitUsermodeDataAccess()+0x10>
c001978b:	0f 01 ca             	clac   
c001978e:	c3                   	ret    
c001978f:	90                   	nop

c0019790 <CPU::setupSMAP()>:
c0019790:	0f 20 e0             	mov    eax,cr4
c0019793:	0d 00 00 20 00       	or     eax,0x200000
c0019798:	0f 22 e0             	mov    cr4,eax
c001979b:	eb e1                	jmp    c001977e <CPU::prohibitUsermodeDataAccess()>
c001979d:	90                   	nop

c001979e <CPU::setupFeatures()>:
c001979e:	83 ec 0c             	sub    esp,0xc
c00197a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197a5:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00197ac:	74 07                	je     c00197b5 <CPU::setupFeatures()+0x17>
c00197ae:	52                   	push   edx
c00197af:	e8 46 ff ff ff       	call   c00196fa <CPU::setupSMEP()>
c00197b4:	58                   	pop    eax
c00197b5:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00197bc:	74 07                	je     c00197c5 <CPU::setupFeatures()+0x27>
c00197be:	52                   	push   edx
c00197bf:	e8 cc ff ff ff       	call   c0019790 <CPU::setupSMAP()>
c00197c4:	58                   	pop    eax
c00197c5:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00197cc:	74 07                	je     c00197d5 <CPU::setupFeatures()+0x37>
c00197ce:	52                   	push   edx
c00197cf:	e8 32 ff ff ff       	call   c0019706 <CPU::setupUMIP()>
c00197d4:	58                   	pop    eax
c00197d5:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00197dc:	74 07                	je     c00197e5 <CPU::setupFeatures()+0x47>
c00197de:	52                   	push   edx
c00197df:	e8 2c ff ff ff       	call   c0019710 <CPU::setupTSC()>
c00197e4:	58                   	pop    eax
c00197e5:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00197ec:	74 07                	je     c00197f5 <CPU::setupFeatures()+0x57>
c00197ee:	52                   	push   edx
c00197ef:	e8 26 ff ff ff       	call   c001971a <CPU::setupLargePages()>
c00197f4:	59                   	pop    ecx
c00197f5:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00197fc:	74 07                	je     c0019805 <CPU::setupFeatures()+0x67>
c00197fe:	52                   	push   edx
c00197ff:	e8 5e ff ff ff       	call   c0019762 <CPU::setupGlobalPages()>
c0019804:	58                   	pop    eax
c0019805:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001980c:	74 0c                	je     c001981a <CPU::setupFeatures()+0x7c>
c001980e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019812:	83 c4 0c             	add    esp,0xc
c0019815:	e9 0a ff ff ff       	jmp    c0019724 <CPU::setupPAT()>
c001981a:	83 c4 0c             	add    esp,0xc
c001981d:	c3                   	ret    

c001981e <CPU::open(int, int, void*)>:
c001981e:	57                   	push   edi
c001981f:	56                   	push   esi
c0019820:	53                   	push   ebx
c0019821:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019825:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019829:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001982f:	83 ec 0c             	sub    esp,0xc
c0019832:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019838:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001983e:	50                   	push   eax
c001983f:	e8 90 58 ff ff       	call   c000f0d4 <GDT::setup()>
c0019844:	83 c4 0c             	add    esp,0xc
c0019847:	6a 00                	push   0x0
c0019849:	68 ef be ad de       	push   0xdeadbeef
c001984e:	57                   	push   edi
c001984f:	e8 3e 7c ff ff       	call   c0011492 <TSS::setup(unsigned long, unsigned long)>
c0019854:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019857:	e8 16 7c ff ff       	call   c0011472 <TSS::flush()>
c001985c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019862:	89 04 24             	mov    DWORD PTR [esp],eax
c0019865:	e8 c6 5a ff ff       	call   c000f330 <IDT::setup()>
c001986a:	b8 00 04 00 00       	mov    eax,0x400
c001986f:	0f 23 f8             	mov    db7,eax
c0019872:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001987c:	e8 5e 66 ff ff       	call   c000fedf <Phys::allocatePage()>
c0019881:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019887:	89 30                	mov    DWORD PTR [eax],esi
c0019889:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001988f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019892:	58                   	pop    eax
c0019893:	5a                   	pop    edx
c0019894:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001989a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001989e:	e8 21 8c ff ff       	call   c00124c4 <VAS::setCPUSpecific(unsigned long)>
c00198a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198a6:	e8 5f f4 ff ff       	call   c0018d0a <CPU::detectFeatures()>
c00198ab:	e8 cf bc ff ff       	call   c001557f <setupInterruptController()>
c00198b0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00198b6:	a1 c0 e0 02 c0       	mov    eax,ds:0xc002e0c0
c00198bb:	83 e0 10             	and    eax,0x10
c00198be:	83 f8 01             	cmp    eax,0x1
c00198c1:	19 c0                	sbb    eax,eax
c00198c3:	83 e0 46             	and    eax,0x46
c00198c6:	83 c0 1e             	add    eax,0x1e
c00198c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00198cc:	e8 bb d1 ff ff       	call   c0016a8c <setupTimer(int)>
c00198d1:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00198d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198da:	e8 bf fe ff ff       	call   c001979e <CPU::setupFeatures()>
c00198df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198e2:	e8 a7 f1 ff ff       	call   c0018a8e <CPU::displayFeatures()>
c00198e7:	83 c4 10             	add    esp,0x10
c00198ea:	31 c0                	xor    eax,eax
c00198ec:	5b                   	pop    ebx
c00198ed:	5e                   	pop    esi
c00198ee:	5f                   	pop    edi
c00198ef:	c3                   	ret    

c00198f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00198f0:	57                   	push   edi
c00198f1:	56                   	push   esi
c00198f2:	53                   	push   ebx
c00198f3:	51                   	push   ecx
c00198f4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00198f8:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00198fb:	0f 02 c0             	lar    eax,ax
c00198fe:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019901:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019905:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019908:	88 ca                	mov    dl,cl
c001990a:	c0 ea 06             	shr    dl,0x6
c001990d:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019911:	89 ca                	mov    edx,ecx
c0019913:	66 c1 ea 03          	shr    dx,0x3
c0019917:	83 e2 07             	and    edx,0x7
c001991a:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001991f:	88 17                	mov    BYTE PTR [edi],dl
c0019921:	0f 84 a6 01 00 00    	je     c0019acd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019927:	83 e1 07             	and    ecx,0x7
c001992a:	80 f9 04             	cmp    cl,0x4
c001992d:	0f 84 98 00 00 00    	je     c00199cb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019933:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019938:	0f 95 c0             	setne  al
c001993b:	80 f9 05             	cmp    cl,0x5
c001993e:	0f 95 c2             	setne  dl
c0019941:	08 c2                	or     dl,al
c0019943:	74 79                	je     c00199be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019945:	84 c9                	test   cl,cl
c0019947:	75 05                	jne    c001994e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019949:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001994c:	eb 3c                	jmp    c001998a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001994e:	80 f9 01             	cmp    cl,0x1
c0019951:	75 05                	jne    c0019958 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019953:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019956:	eb 32                	jmp    c001998a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019958:	80 f9 02             	cmp    cl,0x2
c001995b:	75 05                	jne    c0019962 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001995d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019960:	eb 28                	jmp    c001998a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019962:	31 c0                	xor    eax,eax
c0019964:	80 f9 03             	cmp    cl,0x3
c0019967:	75 05                	jne    c001996e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019969:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001996c:	eb 1c                	jmp    c001998a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001996e:	80 f9 05             	cmp    cl,0x5
c0019971:	75 05                	jne    c0019978 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019973:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019976:	eb 12                	jmp    c001998a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019978:	80 f9 06             	cmp    cl,0x6
c001997b:	75 05                	jne    c0019982 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001997d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019980:	eb 08                	jmp    c001998a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019982:	80 f9 07             	cmp    cl,0x7
c0019985:	75 03                	jne    c001998a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019987:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001998a:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001998f:	75 10                	jne    c00199a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019991:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019995:	b9 03 00 00 00       	mov    ecx,0x3
c001999a:	01 d0                	add    eax,edx
c001999c:	e9 37 01 00 00       	jmp    c0019ad8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199a1:	b9 02 00 00 00       	mov    ecx,0x2
c00199a6:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00199ab:	0f 85 27 01 00 00    	jne    c0019ad8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199b1:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00199b4:	b9 06 00 00 00       	mov    ecx,0x6
c00199b9:	e9 1a 01 00 00       	jmp    c0019ad8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199be:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00199c1:	b9 06 00 00 00       	mov    ecx,0x6
c00199c6:	e9 0f 01 00 00       	jmp    c0019ada <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00199cb:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00199ce:	88 ca                	mov    dl,cl
c00199d0:	c0 ea 06             	shr    dl,0x6
c00199d3:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00199d7:	89 ca                	mov    edx,ecx
c00199d9:	66 c1 ea 03          	shr    dx,0x3
c00199dd:	83 e2 07             	and    edx,0x7
c00199e0:	80 e1 07             	and    cl,0x7
c00199e3:	75 05                	jne    c00199ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00199e5:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00199e8:	eb 4c                	jmp    c0019a36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00199ea:	80 f9 01             	cmp    cl,0x1
c00199ed:	75 05                	jne    c00199f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00199ef:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00199f2:	eb 42                	jmp    c0019a36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00199f4:	80 f9 02             	cmp    cl,0x2
c00199f7:	75 05                	jne    c00199fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00199f9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00199fc:	eb 38                	jmp    c0019a36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00199fe:	80 f9 03             	cmp    cl,0x3
c0019a01:	75 05                	jne    c0019a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019a03:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019a06:	eb 2e                	jmp    c0019a36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a08:	80 f9 04             	cmp    cl,0x4
c0019a0b:	75 12                	jne    c0019a1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019a0d:	f6 c4 60             	test   ah,0x60
c0019a10:	75 08                	jne    c0019a1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019a12:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019a15:	8d 78 14             	lea    edi,[eax+0x14]
c0019a18:	eb 1c                	jmp    c0019a36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a1a:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019a1d:	eb 17                	jmp    c0019a36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a1f:	80 f9 05             	cmp    cl,0x5
c0019a22:	75 05                	jne    c0019a29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019a24:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019a27:	eb 0d                	jmp    c0019a36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a29:	80 f9 06             	cmp    cl,0x6
c0019a2c:	75 05                	jne    c0019a33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019a2e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019a31:	eb 03                	jmp    c0019a36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a33:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019a36:	84 d2                	test   dl,dl
c0019a38:	75 05                	jne    c0019a3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019a3a:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019a3d:	eb 3c                	jmp    c0019a7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a3f:	80 fa 01             	cmp    dl,0x1
c0019a42:	75 05                	jne    c0019a49 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019a44:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019a47:	eb 32                	jmp    c0019a7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a49:	80 fa 02             	cmp    dl,0x2
c0019a4c:	75 05                	jne    c0019a53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019a4e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019a51:	eb 28                	jmp    c0019a7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a53:	80 fa 03             	cmp    dl,0x3
c0019a56:	75 05                	jne    c0019a5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019a58:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019a5b:	eb 1e                	jmp    c0019a7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a5d:	31 c0                	xor    eax,eax
c0019a5f:	80 fa 04             	cmp    dl,0x4
c0019a62:	74 17                	je     c0019a7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a64:	80 fa 05             	cmp    dl,0x5
c0019a67:	75 05                	jne    c0019a6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019a69:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019a6c:	eb 0d                	jmp    c0019a7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a6e:	80 fa 06             	cmp    dl,0x6
c0019a71:	75 05                	jne    c0019a78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019a73:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019a76:	eb 03                	jmp    c0019a7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a78:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019a7b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019a80:	0f 94 c2             	sete   dl
c0019a83:	80 f9 05             	cmp    cl,0x5
c0019a86:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019a8a:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019a8f:	d3 e0                	shl    eax,cl
c0019a91:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019a95:	74 0a                	je     c0019aa1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019a97:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019a9a:	b9 07 00 00 00       	mov    ecx,0x7
c0019a9f:	eb 37                	jmp    c0019ad8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019aa1:	01 f8                	add    eax,edi
c0019aa3:	b9 03 00 00 00       	mov    ecx,0x3
c0019aa8:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019aad:	74 2b                	je     c0019ada <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019aaf:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019ab4:	75 0d                	jne    c0019ac3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019ab6:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019aba:	01 c8                	add    eax,ecx
c0019abc:	b9 04 00 00 00       	mov    ecx,0x4
c0019ac1:	eb 17                	jmp    c0019ada <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ac3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ac6:	b9 07 00 00 00       	mov    ecx,0x7
c0019acb:	eb 0d                	jmp    c0019ada <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019acd:	b9 02 00 00 00       	mov    ecx,0x2
c0019ad2:	b2 01                	mov    dl,0x1
c0019ad4:	31 c0                	xor    eax,eax
c0019ad6:	eb 02                	jmp    c0019ada <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ad8:	31 d2                	xor    edx,edx
c0019ada:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ade:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019ae0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019ae4:	88 11                	mov    BYTE PTR [ecx],dl
c0019ae6:	5a                   	pop    edx
c0019ae7:	5b                   	pop    ebx
c0019ae8:	5e                   	pop    esi
c0019ae9:	5f                   	pop    edi
c0019aea:	c3                   	ret    

c0019aeb <Krnl::smpEntry()>:
c0019aeb:	eb fe                	jmp    c0019aeb <Krnl::smpEntry()>

c0019aed <Krnl::startCPU(int)>:
c0019aed:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0019af2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019af9:	0f 84 36 01 00 00    	je     c0019c35 <Krnl::startCPU(int)+0x148>
c0019aff:	53                   	push   ebx
c0019b00:	83 ec 08             	sub    esp,0x8
c0019b03:	e8 46 3f 00 00       	call   c001da4e <lockScheduler()>
c0019b08:	52                   	push   edx
c0019b09:	52                   	push   edx
c0019b0a:	6a 1b                	push   0x1b
c0019b0c:	ff 35 a8 e0 02 c0    	push   DWORD PTR ds:0xc002e0a8
c0019b12:	e8 d1 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b17:	59                   	pop    ecx
c0019b18:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019b1d:	89 c3                	mov    ebx,eax
c0019b1f:	58                   	pop    eax
c0019b20:	53                   	push   ebx
c0019b21:	68 20 b6 02 c0       	push   0xc002b620
c0019b26:	e8 83 90 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0019b2b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b39:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b43:	c1 e0 18             	shl    eax,0x18
c0019b46:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019b4c:	83 c4 10             	add    esp,0x10
c0019b4f:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019b55:	09 c2                	or     edx,eax
c0019b57:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019b5d:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019b63:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019b69:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019b6f:	80 cd c5             	or     ch,0xc5
c0019b72:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019b78:	f3 90                	pause  
c0019b7a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019b7c:	0f ba e1 0c          	bt     ecx,0xc
c0019b80:	72 f6                	jb     c0019b78 <Krnl::startCPU(int)+0x8b>
c0019b82:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019b88:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019b8e:	09 c1                	or     ecx,eax
c0019b90:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019b96:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019b9c:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ba2:	80 cd 85             	or     ch,0x85
c0019ba5:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019bab:	f3 90                	pause  
c0019bad:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019baf:	0f ba e1 0c          	bt     ecx,0xc
c0019bb3:	72 f6                	jb     c0019bab <Krnl::startCPU(int)+0xbe>
c0019bb5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019bbf:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019bc5:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019bcb:	09 c1                	or     ecx,eax
c0019bcd:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019bd3:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019bd9:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019bdf:	81 c9 02 06 00 00    	or     ecx,0x602
c0019be5:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019beb:	f3 90                	pause  
c0019bed:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019bef:	0f ba e1 0c          	bt     ecx,0xc
c0019bf3:	72 f6                	jb     c0019beb <Krnl::startCPU(int)+0xfe>
c0019bf5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019bff:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c05:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c0b:	09 c8                	or     eax,ecx
c0019c0d:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019c13:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019c19:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019c1e:	0d 02 06 00 00       	or     eax,0x602
c0019c23:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019c29:	f3 90                	pause  
c0019c2b:	8b 02                	mov    eax,DWORD PTR [edx]
c0019c2d:	0f ba e0 0c          	bt     eax,0xc
c0019c31:	72 f6                	jb     c0019c29 <Krnl::startCPU(int)+0x13c>
c0019c33:	eb fe                	jmp    c0019c33 <Krnl::startCPU(int)+0x146>
c0019c35:	c3                   	ret    

c0019c36 <Krnl::startCPUs()>:
c0019c36:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0019c3b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019c41:	88 c2                	mov    dl,al
c0019c43:	83 e2 0a             	and    edx,0xa
c0019c46:	80 fa 0a             	cmp    dl,0xa
c0019c49:	75 09                	jne    c0019c54 <Krnl::startCPUs()+0x1e>
c0019c4b:	a8 01                	test   al,0x1
c0019c4d:	74 05                	je     c0019c54 <Krnl::startCPUs()+0x1e>
c0019c4f:	e9 47 65 fe ff       	jmp    c000019b <prepareTramp>
c0019c54:	c3                   	ret    
c0019c55:	90                   	nop

c0019c56 <EnvVarContainer::getEnv(char const*)>:
c0019c56:	57                   	push   edi
c0019c57:	56                   	push   esi
c0019c58:	53                   	push   ebx
c0019c59:	31 db                	xor    ebx,ebx
c0019c5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019c5f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019c61:	7e 2b                	jle    c0019c8e <EnvVarContainer::getEnv(char const*)+0x38>
c0019c63:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019c6a:	50                   	push   eax
c0019c6b:	50                   	push   eax
c0019c6c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019c6f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019c72:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019c76:	e8 45 6c fe ff       	call   c00008c0 <strcmp>
c0019c7b:	83 c4 10             	add    esp,0x10
c0019c7e:	85 c0                	test   eax,eax
c0019c80:	75 09                	jne    c0019c8b <EnvVarContainer::getEnv(char const*)+0x35>
c0019c82:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019c85:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019c89:	eb 05                	jmp    c0019c90 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019c8b:	43                   	inc    ebx
c0019c8c:	eb d1                	jmp    c0019c5f <EnvVarContainer::getEnv(char const*)+0x9>
c0019c8e:	31 c0                	xor    eax,eax
c0019c90:	5b                   	pop    ebx
c0019c91:	5e                   	pop    esi
c0019c92:	5f                   	pop    edi
c0019c93:	c3                   	ret    

c0019c94 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019c94:	57                   	push   edi
c0019c95:	56                   	push   esi
c0019c96:	53                   	push   ebx
c0019c97:	83 ec 1c             	sub    esp,0x1c
c0019c9a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019c9e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019ca2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019ca6:	57                   	push   edi
c0019ca7:	e8 e8 6a fe ff       	call   c0000794 <strlen>
c0019cac:	40                   	inc    eax
c0019cad:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cb0:	e8 8b 5b ff ff       	call   c000f840 <malloc>
c0019cb5:	89 34 24             	mov    DWORD PTR [esp],esi
c0019cb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019cbc:	e8 d3 6a fe ff       	call   c0000794 <strlen>
c0019cc1:	40                   	inc    eax
c0019cc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cc5:	e8 76 5b ff ff       	call   c000f840 <malloc>
c0019cca:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ccd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cd1:	e8 be 6a fe ff       	call   c0000794 <strlen>
c0019cd6:	83 c4 0c             	add    esp,0xc
c0019cd9:	40                   	inc    eax
c0019cda:	50                   	push   eax
c0019cdb:	6a 00                	push   0x0
c0019cdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019ce1:	e8 92 6a fe ff       	call   c0000778 <memset>
c0019ce6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ce9:	e8 a6 6a fe ff       	call   c0000794 <strlen>
c0019cee:	83 c4 0c             	add    esp,0xc
c0019cf1:	40                   	inc    eax
c0019cf2:	50                   	push   eax
c0019cf3:	57                   	push   edi
c0019cf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019cf8:	e8 47 6a fe ff       	call   c0000744 <memcpy>
c0019cfd:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d00:	e8 8f 6a fe ff       	call   c0000794 <strlen>
c0019d05:	83 c4 0c             	add    esp,0xc
c0019d08:	40                   	inc    eax
c0019d09:	50                   	push   eax
c0019d0a:	6a 00                	push   0x0
c0019d0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d10:	e8 63 6a fe ff       	call   c0000778 <memset>
c0019d15:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d18:	e8 77 6a fe ff       	call   c0000794 <strlen>
c0019d1d:	83 c4 0c             	add    esp,0xc
c0019d20:	40                   	inc    eax
c0019d21:	50                   	push   eax
c0019d22:	56                   	push   esi
c0019d23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d27:	e8 18 6a fe ff       	call   c0000744 <memcpy>
c0019d2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d2e:	40                   	inc    eax
c0019d2f:	89 03                	mov    DWORD PTR [ebx],eax
c0019d31:	c1 e0 03             	shl    eax,0x3
c0019d34:	5a                   	pop    edx
c0019d35:	59                   	pop    ecx
c0019d36:	50                   	push   eax
c0019d37:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019d3a:	e8 ed 5a ff ff       	call   c000f82c <realloc>
c0019d3f:	83 c4 0c             	add    esp,0xc
c0019d42:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d45:	6a 08                	push   0x8
c0019d47:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019d4b:	52                   	push   edx
c0019d4c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019d4e:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019d52:	50                   	push   eax
c0019d53:	e8 ec 69 fe ff       	call   c0000744 <memcpy>
c0019d58:	83 c4 20             	add    esp,0x20
c0019d5b:	5b                   	pop    ebx
c0019d5c:	5e                   	pop    esi
c0019d5d:	5f                   	pop    edi
c0019d5e:	c3                   	ret    
c0019d5f:	90                   	nop

c0019d60 <EnvVarContainer::deleteEnv(char const*)>:
c0019d60:	c3                   	ret    
c0019d61:	90                   	nop

c0019d62 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019d62:	55                   	push   ebp
c0019d63:	57                   	push   edi
c0019d64:	56                   	push   esi
c0019d65:	53                   	push   ebx
c0019d66:	81 ec 38 01 00 00    	sub    esp,0x138
c0019d6c:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019d73:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019d7a:	68 14 01 00 00       	push   0x114
c0019d7f:	e8 bc 5a ff ff       	call   c000f840 <malloc>
c0019d84:	83 c4 0c             	add    esp,0xc
c0019d87:	89 c7                	mov    edi,eax
c0019d89:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019d8c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019d93:	50                   	push   eax
c0019d94:	e8 6d 93 ff ff       	call   c0013106 <File::File(char const*, Process*)>
c0019d99:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019d9c:	e8 37 96 ff ff       	call   c00133d8 <File::exists()>
c0019da1:	83 c4 10             	add    esp,0x10
c0019da4:	84 c0                	test   al,al
c0019da6:	75 31                	jne    c0019dd9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019da8:	51                   	push   ecx
c0019da9:	51                   	push   ecx
c0019daa:	6a 12                	push   0x12
c0019dac:	57                   	push   edi
c0019dad:	e8 b8 93 ff ff       	call   c001316a <File::open(FileOpenMode)>
c0019db2:	8b 07                	mov    eax,DWORD PTR [edi]
c0019db4:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019db7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019dba:	e8 d5 69 fe ff       	call   c0000794 <strlen>
c0019dbf:	5a                   	pop    edx
c0019dc0:	31 d2                	xor    edx,edx
c0019dc2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019dc6:	51                   	push   ecx
c0019dc7:	55                   	push   ebp
c0019dc8:	52                   	push   edx
c0019dc9:	50                   	push   eax
c0019dca:	57                   	push   edi
c0019dcb:	ff d3                	call   ebx
c0019dcd:	83 c4 14             	add    esp,0x14
c0019dd0:	57                   	push   edi
c0019dd1:	e8 f2 93 ff ff       	call   c00131c8 <File::close()>
c0019dd6:	83 c4 10             	add    esp,0x10
c0019dd9:	31 db                	xor    ebx,ebx
c0019ddb:	50                   	push   eax
c0019ddc:	31 ed                	xor    ebp,ebp
c0019dde:	68 00 01 00 00       	push   0x100
c0019de3:	6a 00                	push   0x0
c0019de5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019de9:	50                   	push   eax
c0019dea:	e8 89 69 fe ff       	call   c0000778 <memset>
c0019def:	58                   	pop    eax
c0019df0:	5a                   	pop    edx
c0019df1:	6a 01                	push   0x1
c0019df3:	57                   	push   edi
c0019df4:	e8 71 93 ff ff       	call   c001316a <File::open(FileOpenMode)>
c0019df9:	83 c4 10             	add    esp,0x10
c0019dfc:	83 ec 0c             	sub    esp,0xc
c0019dff:	8b 07                	mov    eax,DWORD PTR [edi]
c0019e01:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019e05:	51                   	push   ecx
c0019e06:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019e0a:	52                   	push   edx
c0019e0b:	6a 00                	push   0x0
c0019e0d:	6a 01                	push   0x1
c0019e0f:	57                   	push   edi
c0019e10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e13:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019e17:	83 c4 20             	add    esp,0x20
c0019e1a:	3c 0d                	cmp    al,0xd
c0019e1c:	0f 84 12 01 00 00    	je     c0019f34 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019e22:	85 db                	test   ebx,ebx
c0019e24:	0f 84 fd 00 00 00    	je     c0019f27 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019e2a:	3c 0a                	cmp    al,0xa
c0019e2c:	74 13                	je     c0019e41 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019e2e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019e33:	74 0c                	je     c0019e41 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019e35:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019e3b:	0f 8e e6 00 00 00    	jle    c0019f27 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019e41:	83 ec 0c             	sub    esp,0xc
c0019e44:	8d 53 01             	lea    edx,[ebx+0x1]
c0019e47:	29 dd                	sub    ebp,ebx
c0019e49:	52                   	push   edx
c0019e4a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019e4e:	e8 ed 59 ff ff       	call   c000f840 <malloc>
c0019e53:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019e5a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019e5d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019e61:	e8 da 59 ff ff       	call   c000f840 <malloc>
c0019e66:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019e6a:	83 c4 0c             	add    esp,0xc
c0019e6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e71:	52                   	push   edx
c0019e72:	6a 00                	push   0x0
c0019e74:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019e78:	e8 fb 68 fe ff       	call   c0000778 <memset>
c0019e7d:	83 c4 0c             	add    esp,0xc
c0019e80:	53                   	push   ebx
c0019e81:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019e85:	55                   	push   ebp
c0019e86:	01 eb                	add    ebx,ebp
c0019e88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019e8c:	e8 b3 68 fe ff       	call   c0000744 <memcpy>
c0019e91:	83 c4 0c             	add    esp,0xc
c0019e94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e98:	51                   	push   ecx
c0019e99:	6a 00                	push   0x0
c0019e9b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e9f:	e8 d4 68 fe ff       	call   c0000778 <memset>
c0019ea4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ea7:	e8 e8 68 fe ff       	call   c0000794 <strlen>
c0019eac:	83 c4 0c             	add    esp,0xc
c0019eaf:	50                   	push   eax
c0019eb0:	53                   	push   ebx
c0019eb1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019eb5:	e8 8a 68 fe ff       	call   c0000744 <memcpy>
c0019eba:	5b                   	pop    ebx
c0019ebb:	58                   	pop    eax
c0019ebc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ec0:	68 31 b6 02 c0       	push   0xc002b631
c0019ec5:	e8 e4 8c ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0019eca:	8b 06                	mov    eax,DWORD PTR [esi]
c0019ecc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019ecf:	40                   	inc    eax
c0019ed0:	83 c4 10             	add    esp,0x10
c0019ed3:	89 06                	mov    DWORD PTR [esi],eax
c0019ed5:	85 d2                	test   edx,edx
c0019ed7:	75 0c                	jne    c0019ee5 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019ed9:	83 ec 0c             	sub    esp,0xc
c0019edc:	6a 08                	push   0x8
c0019ede:	e8 5d 59 ff ff       	call   c000f840 <malloc>
c0019ee3:	eb 0c                	jmp    c0019ef1 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019ee5:	c1 e0 03             	shl    eax,0x3
c0019ee8:	51                   	push   ecx
c0019ee9:	51                   	push   ecx
c0019eea:	50                   	push   eax
c0019eeb:	52                   	push   edx
c0019eec:	e8 3b 59 ff ff       	call   c000f82c <realloc>
c0019ef1:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019ef4:	83 c4 10             	add    esp,0x10
c0019ef7:	31 db                	xor    ebx,ebx
c0019ef9:	52                   	push   edx
c0019efa:	6a 08                	push   0x8
c0019efc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019f00:	50                   	push   eax
c0019f01:	8b 16                	mov    edx,DWORD PTR [esi]
c0019f03:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019f06:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019f0a:	50                   	push   eax
c0019f0b:	e8 34 68 fe ff       	call   c0000744 <memcpy>
c0019f10:	83 c4 0c             	add    esp,0xc
c0019f13:	68 00 01 00 00       	push   0x100
c0019f18:	6a 00                	push   0x0
c0019f1a:	55                   	push   ebp
c0019f1b:	31 ed                	xor    ebp,ebp
c0019f1d:	e8 56 68 fe ff       	call   c0000778 <memset>
c0019f22:	83 c4 10             	add    esp,0x10
c0019f25:	eb 0d                	jmp    c0019f34 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019f27:	3c 3d                	cmp    al,0x3d
c0019f29:	74 07                	je     c0019f32 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019f2b:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019f2f:	45                   	inc    ebp
c0019f30:	eb 02                	jmp    c0019f34 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019f32:	89 eb                	mov    ebx,ebp
c0019f34:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019f39:	0f 85 bd fe ff ff    	jne    c0019dfc <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019f3f:	50                   	push   eax
c0019f40:	50                   	push   eax
c0019f41:	ff 36                	push   DWORD PTR [esi]
c0019f43:	68 3f b6 02 c0       	push   0xc002b63f
c0019f48:	e8 61 8c ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0019f4d:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019f53:	5b                   	pop    ebx
c0019f54:	5e                   	pop    esi
c0019f55:	5f                   	pop    edi
c0019f56:	5d                   	pop    ebp
c0019f57:	c3                   	ret    

c0019f58 <EnvVarContainer::__loadSystem()>:
c0019f58:	83 ec 10             	sub    esp,0x10
c0019f5b:	68 e0 d5 02 c0       	push   0xc002d5e0
c0019f60:	68 6a b6 02 c0       	push   0xc002b66a
c0019f65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f69:	e8 f4 fd ff ff       	call   c0019d62 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019f6e:	83 c4 1c             	add    esp,0x1c
c0019f71:	c3                   	ret    

c0019f72 <EnvVarContainer::__loadUser()>:
c0019f72:	c3                   	ret    
c0019f73:	90                   	nop

c0019f74 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f78:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019f7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f86:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019f89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f8d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019f94:	90                   	nop
c0019f95:	c3                   	ret    

c0019f96 <EnvVarContainer::~EnvVarContainer()>:
c0019f96:	83 ec 0c             	sub    esp,0xc
c0019f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019fa0:	85 c0                	test   eax,eax
c0019fa2:	74 1d                	je     c0019fc1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0019faa:	85 c0                	test   eax,eax
c0019fac:	74 13                	je     c0019fc1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019fb5:	83 ec 0c             	sub    esp,0xc
c0019fb8:	50                   	push   eax
c0019fb9:	e8 92 58 ff ff       	call   c000f850 <free>
c0019fbe:	83 c4 10             	add    esp,0x10
c0019fc1:	90                   	nop
c0019fc2:	83 c4 0c             	add    esp,0xc
c0019fc5:	c3                   	ret    

c0019fc6 <Krnl::getEnv(Process*, char const*)>:
c0019fc6:	53                   	push   ebx
c0019fc7:	83 ec 08             	sub    esp,0x8
c0019fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019fd2:	39 05 14 16 03 c0    	cmp    DWORD PTR ds:0xc0031614,eax
c0019fd8:	74 04                	je     c0019fde <Krnl::getEnv(Process*, char const*)+0x18>
c0019fda:	85 c0                	test   eax,eax
c0019fdc:	75 0b                	jne    c0019fe9 <Krnl::getEnv(Process*, char const*)+0x23>
c0019fde:	a1 f4 0b 03 c0       	mov    eax,ds:0xc0030bf4
c0019fe3:	85 c0                	test   eax,eax
c0019fe5:	75 19                	jne    c001a000 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019fe7:	eb 27                	jmp    c001a010 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019fe9:	52                   	push   edx
c0019fea:	52                   	push   edx
c0019feb:	53                   	push   ebx
c0019fec:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019ff2:	e8 5f fc ff ff       	call   c0019c56 <EnvVarContainer::getEnv(char const*)>
c0019ff7:	83 c4 10             	add    esp,0x10
c0019ffa:	85 c0                	test   eax,eax
c0019ffc:	75 28                	jne    c001a026 <Krnl::getEnv(Process*, char const*)+0x60>
c0019ffe:	eb de                	jmp    c0019fde <Krnl::getEnv(Process*, char const*)+0x18>
c001a000:	52                   	push   edx
c001a001:	52                   	push   edx
c001a002:	53                   	push   ebx
c001a003:	50                   	push   eax
c001a004:	e8 4d fc ff ff       	call   c0019c56 <EnvVarContainer::getEnv(char const*)>
c001a009:	83 c4 10             	add    esp,0x10
c001a00c:	85 c0                	test   eax,eax
c001a00e:	75 16                	jne    c001a026 <Krnl::getEnv(Process*, char const*)+0x60>
c001a010:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a014:	a1 f8 0b 03 c0       	mov    eax,ds:0xc0030bf8
c001a019:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a01d:	83 c4 08             	add    esp,0x8
c001a020:	5b                   	pop    ebx
c001a021:	e9 30 fc ff ff       	jmp    c0019c56 <EnvVarContainer::getEnv(char const*)>
c001a026:	83 c4 08             	add    esp,0x8
c001a029:	5b                   	pop    ebx
c001a02a:	c3                   	ret    

c001a02b <Krnl::setEnvSystem(char const*, char const*)>:
c001a02b:	83 ec 10             	sub    esp,0x10
c001a02e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a032:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a036:	ff 35 f8 0b 03 c0    	push   DWORD PTR ds:0xc0030bf8
c001a03c:	e8 53 fc ff ff       	call   c0019c94 <EnvVarContainer::setEnv(char const*, char const*)>
c001a041:	83 c4 1c             	add    esp,0x1c
c001a044:	c3                   	ret    

c001a045 <Krnl::setEnvUser(char const*, char const*)>:
c001a045:	a1 f4 0b 03 c0       	mov    eax,ds:0xc0030bf4
c001a04a:	85 c0                	test   eax,eax
c001a04c:	74 15                	je     c001a063 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a04e:	83 ec 10             	sub    esp,0x10
c001a051:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a055:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a059:	50                   	push   eax
c001a05a:	e8 35 fc ff ff       	call   c0019c94 <EnvVarContainer::setEnv(char const*, char const*)>
c001a05f:	83 c4 1c             	add    esp,0x1c
c001a062:	c3                   	ret    
c001a063:	c3                   	ret    

c001a064 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a068:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a06e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a072:	e9 1d fc ff ff       	jmp    c0019c94 <EnvVarContainer::setEnv(char const*, char const*)>

c001a077 <Krnl::deleteEnvSystem(char const*)>:
c001a077:	c3                   	ret    

c001a078 <Krnl::deleteEnvUser(char const*)>:
c001a078:	c3                   	ret    

c001a079 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a079:	c3                   	ret    

c001a07a <Krnl::newProcessEnv(Process*)>:
c001a07a:	83 ec 28             	sub    esp,0x28
c001a07d:	6a 0c                	push   0xc
c001a07f:	e8 bc 57 ff ff       	call   c000f840 <malloc>
c001a084:	5a                   	pop    edx
c001a085:	59                   	pop    ecx
c001a086:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a08a:	50                   	push   eax
c001a08b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a08f:	e8 e0 fe ff ff       	call   c0019f74 <EnvVarContainer::EnvVarContainer(Process*)>
c001a094:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a098:	83 c4 2c             	add    esp,0x2c
c001a09b:	c3                   	ret    

c001a09c <Krnl::copyProcessEnv(Process*, Process*)>:
c001a09c:	56                   	push   esi
c001a09d:	53                   	push   ebx
c001a09e:	83 ec 10             	sub    esp,0x10
c001a0a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0a5:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a0ab:	6a 0c                	push   0xc
c001a0ad:	e8 8e 57 ff ff       	call   c000f840 <malloc>
c001a0b2:	89 c3                	mov    ebx,eax
c001a0b4:	58                   	pop    eax
c001a0b5:	5a                   	pop    edx
c001a0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0ba:	53                   	push   ebx
c001a0bb:	e8 b4 fe ff ff       	call   c0019f74 <EnvVarContainer::EnvVarContainer(Process*)>
c001a0c0:	8b 06                	mov    eax,DWORD PTR [esi]
c001a0c2:	89 03                	mov    DWORD PTR [ebx],eax
c001a0c4:	c1 e0 03             	shl    eax,0x3
c001a0c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0ca:	e8 71 57 ff ff       	call   c000f840 <malloc>
c001a0cf:	83 c4 0c             	add    esp,0xc
c001a0d2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a0d5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a0d7:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a0de:	52                   	push   edx
c001a0df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a0e2:	50                   	push   eax
c001a0e3:	e8 5c 66 fe ff       	call   c0000744 <memcpy>
c001a0e8:	89 d8                	mov    eax,ebx
c001a0ea:	83 c4 14             	add    esp,0x14
c001a0ed:	5b                   	pop    ebx
c001a0ee:	5e                   	pop    esi
c001a0ef:	c3                   	ret    

c001a0f0 <Krnl::loadSystemEnv()>:
c001a0f0:	53                   	push   ebx
c001a0f1:	83 ec 14             	sub    esp,0x14
c001a0f4:	6a 0c                	push   0xc
c001a0f6:	e8 45 57 ff ff       	call   c000f840 <malloc>
c001a0fb:	89 c3                	mov    ebx,eax
c001a0fd:	58                   	pop    eax
c001a0fe:	5a                   	pop    edx
c001a0ff:	ff 35 14 16 03 c0    	push   DWORD PTR ds:0xc0031614
c001a105:	53                   	push   ebx
c001a106:	e8 69 fe ff ff       	call   c0019f74 <EnvVarContainer::EnvVarContainer(Process*)>
c001a10b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a10e:	89 1d f8 0b 03 c0    	mov    DWORD PTR ds:0xc0030bf8,ebx
c001a114:	e8 3f fe ff ff       	call   c0019f58 <EnvVarContainer::__loadSystem()>
c001a119:	83 c4 18             	add    esp,0x18
c001a11c:	5b                   	pop    ebx
c001a11d:	c3                   	ret    

c001a11e <Krnl::loadUserEnv()>:
c001a11e:	53                   	push   ebx
c001a11f:	83 ec 14             	sub    esp,0x14
c001a122:	6a 0c                	push   0xc
c001a124:	e8 17 57 ff ff       	call   c000f840 <malloc>
c001a129:	89 c3                	mov    ebx,eax
c001a12b:	58                   	pop    eax
c001a12c:	5a                   	pop    edx
c001a12d:	ff 35 14 16 03 c0    	push   DWORD PTR ds:0xc0031614
c001a133:	53                   	push   ebx
c001a134:	e8 3b fe ff ff       	call   c0019f74 <EnvVarContainer::EnvVarContainer(Process*)>
c001a139:	89 1d f4 0b 03 c0    	mov    DWORD PTR ds:0xc0030bf4,ebx
c001a13f:	83 c4 18             	add    esp,0x18
c001a142:	5b                   	pop    ebx
c001a143:	c3                   	ret    

c001a144 <Krnl::flushEnv()>:
c001a144:	c3                   	ret    

c001a145 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a145:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a149:	8b 15 f4 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030bf4
c001a14f:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a155:	a1 f8 0b 03 c0       	mov    eax,ds:0xc0030bf8
c001a15a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a15c:	03 01                	add    eax,DWORD PTR [ecx]
c001a15e:	85 d2                	test   edx,edx
c001a160:	74 02                	je     c001a164 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a162:	03 02                	add    eax,DWORD PTR [edx]
c001a164:	c3                   	ret    

c001a165 <Krnl::getProcessEnvPair(Process*, int)>:
c001a165:	57                   	push   edi
c001a166:	8b 0d f4 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030bf4
c001a16c:	56                   	push   esi
c001a16d:	85 c9                	test   ecx,ecx
c001a16f:	53                   	push   ebx
c001a170:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a174:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a178:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a17e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a182:	8b 02                	mov    eax,DWORD PTR [edx]
c001a184:	75 47                	jne    c001a1cd <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a186:	39 c3                	cmp    ebx,eax
c001a188:	7c 47                	jl     c001a1d1 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a18a:	8b 15 f8 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030bf8
c001a190:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a192:	01 c1                	add    ecx,eax
c001a194:	39 d9                	cmp    ecx,ebx
c001a196:	7e 6c                	jle    c001a204 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a198:	51                   	push   ecx
c001a199:	89 d9                	mov    ecx,ebx
c001a19b:	29 c1                	sub    ecx,eax
c001a19d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a1a0:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a1a4:	53                   	push   ebx
c001a1a5:	68 8c b6 02 c0       	push   0xc002b68c
c001a1aa:	e8 ff 89 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001a1af:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a1b5:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a1b7:	a1 f8 0b 03 c0       	mov    eax,ds:0xc0030bf8
c001a1bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a1bf:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a1c3:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a1c6:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a1c9:	89 06                	mov    DWORD PTR [esi],eax
c001a1cb:	eb 51                	jmp    c001a21e <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a1cd:	39 c3                	cmp    ebx,eax
c001a1cf:	7d 05                	jge    c001a1d6 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a1d1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a1d4:	eb 20                	jmp    c001a1f6 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a1d6:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a1d8:	8d 14 07             	lea    edx,[edi+eax*1]
c001a1db:	39 da                	cmp    edx,ebx
c001a1dd:	7e 04                	jle    c001a1e3 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a1df:	29 c3                	sub    ebx,eax
c001a1e1:	eb 10                	jmp    c001a1f3 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a1e3:	8b 0d f8 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030bf8
c001a1e9:	03 11                	add    edx,DWORD PTR [ecx]
c001a1eb:	39 da                	cmp    edx,ebx
c001a1ed:	7e 15                	jle    c001a204 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a1ef:	29 c3                	sub    ebx,eax
c001a1f1:	29 fb                	sub    ebx,edi
c001a1f3:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a1f6:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a1fa:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a1fd:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a200:	89 06                	mov    DWORD PTR [esi],eax
c001a202:	eb 1d                	jmp    c001a221 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a204:	83 ec 0c             	sub    esp,0xc
c001a207:	68 a0 b6 02 c0       	push   0xc002b6a0
c001a20c:	e8 18 00 00 00       	call   c001a229 <Krnl::panic(char const*)>
c001a211:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a217:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a21e:	83 c4 10             	add    esp,0x10
c001a221:	89 f0                	mov    eax,esi
c001a223:	5b                   	pop    ebx
c001a224:	5e                   	pop    esi
c001a225:	5f                   	pop    edi
c001a226:	c2 04 00             	ret    0x4

c001a229 <Krnl::panic(char const*)>:
c001a229:	55                   	push   ebp
c001a22a:	89 e5                	mov    ebp,esp
c001a22c:	53                   	push   ebx
c001a22d:	83 ec 0c             	sub    esp,0xc
c001a230:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a233:	fa                   	cli    
c001a234:	c6 05 04 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c04,0x1
c001a23b:	53                   	push   ebx
c001a23c:	c6 05 e4 cf 02 c0 00 	mov    BYTE PTR ds:0xc002cfe4,0x0
c001a243:	68 ba b6 02 c0       	push   0xc002b6ba
c001a248:	e8 61 89 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001a24d:	58                   	pop    eax
c001a24e:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a253:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a259:	e8 75 6a ff ff       	call   c0010cd3 <setActiveTerminal(VgaText*)>
c001a25e:	83 c4 0c             	add    esp,0xc
c001a261:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a266:	6a 01                	push   0x1
c001a268:	6a 0f                	push   0xf
c001a26a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a270:	e8 8f 64 ff ff       	call   c0010704 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a275:	58                   	pop    eax
c001a276:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a27b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a281:	e8 ee 6c ff ff       	call   c0010f74 <VgaText::clearScreen()>
c001a286:	58                   	pop    eax
c001a287:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a28c:	5a                   	pop    edx
c001a28d:	68 d3 b6 02 c0       	push   0xc002b6d3
c001a292:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a298:	e8 55 6e ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a29d:	59                   	pop    ecx
c001a29e:	58                   	pop    eax
c001a29f:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a2a4:	68 78 b7 02 c0       	push   0xc002b778
c001a2a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2af:	e8 3e 6e ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a2b4:	58                   	pop    eax
c001a2b5:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a2ba:	5a                   	pop    edx
c001a2bb:	68 ef b6 02 c0       	push   0xc002b6ef
c001a2c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2c6:	e8 27 6e ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a2cb:	59                   	pop    ecx
c001a2cc:	58                   	pop    eax
c001a2cd:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a2d2:	53                   	push   ebx
c001a2d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2d9:	e8 14 6e ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a2de:	58                   	pop    eax
c001a2df:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a2e4:	5a                   	pop    edx
c001a2e5:	68 0f b7 02 c0       	push   0xc002b70f
c001a2ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2f0:	e8 fd 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a2f5:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c001a2fa:	83 c4 10             	add    esp,0x10
c001a2fd:	85 c0                	test   eax,eax
c001a2ff:	74 02                	je     c001a303 <Krnl::panic(char const*)+0xda>
c001a301:	ff d0                	call   eax
c001a303:	83 ec 0c             	sub    esp,0xc
c001a306:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a309:	e8 47 30 00 00       	call   c001d355 <Thr::getDriverNameFromAddress(unsigned long)>
c001a30e:	83 c4 10             	add    esp,0x10
c001a311:	89 c3                	mov    ebx,eax
c001a313:	85 c0                	test   eax,eax
c001a315:	0f 84 50 02 00 00    	je     c001a56b <Krnl::panic(char const*)+0x342>
c001a31b:	83 ec 08             	sub    esp,0x8
c001a31e:	8b 15 14 16 03 c0    	mov    edx,DWORD PTR ds:0xc0031614
c001a324:	68 b4 b7 02 c0       	push   0xc002b7b4
c001a329:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a32f:	e8 be 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a334:	58                   	pop    eax
c001a335:	5a                   	pop    edx
c001a336:	8b 15 14 16 03 c0    	mov    edx,DWORD PTR ds:0xc0031614
c001a33c:	68 ef b6 02 c0       	push   0xc002b6ef
c001a341:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a347:	e8 a6 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a34c:	59                   	pop    ecx
c001a34d:	58                   	pop    eax
c001a34e:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a353:	53                   	push   ebx
c001a354:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a35a:	e8 93 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a35f:	83 c4 10             	add    esp,0x10
c001a362:	83 ec 08             	sub    esp,0x8
c001a365:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a36a:	68 0e b7 02 c0       	push   0xc002b70e
c001a36f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a375:	e8 78 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a37a:	58                   	pop    eax
c001a37b:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a380:	5a                   	pop    edx
c001a381:	68 0c b8 02 c0       	push   0xc002b80c
c001a386:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a38c:	e8 61 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a391:	59                   	pop    ecx
c001a392:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a397:	5b                   	pop    ebx
c001a398:	68 4c b8 02 c0       	push   0xc002b84c
c001a39d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3a3:	e8 4a 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a3a8:	58                   	pop    eax
c001a3a9:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a3ae:	5a                   	pop    edx
c001a3af:	68 fa b6 02 c0       	push   0xc002b6fa
c001a3b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3ba:	e8 33 6d ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a3bf:	59                   	pop    ecx
c001a3c0:	5b                   	pop    ebx
c001a3c1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a3c4:	68 12 b7 02 c0       	push   0xc002b712
c001a3c9:	e8 e0 87 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001a3ce:	58                   	pop    eax
c001a3cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3d2:	5a                   	pop    edx
c001a3d3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a3d6:	68 1b b7 02 c0       	push   0xc002b71b
c001a3db:	e8 ce 87 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001a3e0:	59                   	pop    ecx
c001a3e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3e4:	5b                   	pop    ebx
c001a3e5:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3e7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a3ea:	68 24 b7 02 c0       	push   0xc002b724
c001a3ef:	e8 ba 87 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001a3f4:	58                   	pop    eax
c001a3f5:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a3fa:	5a                   	pop    edx
c001a3fb:	68 90 b8 02 c0       	push   0xc002b890
c001a400:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a406:	e8 e7 6c ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a40b:	59                   	pop    ecx
c001a40c:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a411:	5b                   	pop    ebx
c001a412:	68 2d b7 02 c0       	push   0xc002b72d
c001a417:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a41d:	e8 d0 6c ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a422:	0f 20 c0             	mov    eax,cr0
c001a425:	5a                   	pop    edx
c001a426:	59                   	pop    ecx
c001a427:	50                   	push   eax
c001a428:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a42d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a433:	e8 e0 6c ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a438:	5b                   	pop    ebx
c001a439:	58                   	pop    eax
c001a43a:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a43f:	68 37 b7 02 c0       	push   0xc002b737
c001a444:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a44a:	e8 a3 6c ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a44f:	0f 20 d0             	mov    eax,cr2
c001a452:	5a                   	pop    edx
c001a453:	59                   	pop    ecx
c001a454:	50                   	push   eax
c001a455:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a45a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a460:	e8 b3 6c ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a465:	5b                   	pop    ebx
c001a466:	58                   	pop    eax
c001a467:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a46c:	68 41 b7 02 c0       	push   0xc002b741
c001a471:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a477:	e8 76 6c ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a47c:	0f 20 d8             	mov    eax,cr3
c001a47f:	5a                   	pop    edx
c001a480:	59                   	pop    ecx
c001a481:	50                   	push   eax
c001a482:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a487:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a48d:	e8 86 6c ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a492:	5b                   	pop    ebx
c001a493:	58                   	pop    eax
c001a494:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a499:	68 54 b7 02 c0       	push   0xc002b754
c001a49e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4a4:	e8 49 6c ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a4a9:	0f 20 e0             	mov    eax,cr4
c001a4ac:	5a                   	pop    edx
c001a4ad:	59                   	pop    ecx
c001a4ae:	50                   	push   eax
c001a4af:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a4b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4ba:	e8 59 6c ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a4bf:	5b                   	pop    ebx
c001a4c0:	58                   	pop    eax
c001a4c1:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a4c6:	68 5e b7 02 c0       	push   0xc002b75e
c001a4cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4d1:	e8 1c 6c ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a4d6:	5a                   	pop    edx
c001a4d7:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a4dc:	59                   	pop    ecx
c001a4dd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a4e3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4e6:	50                   	push   eax
c001a4e7:	e8 2c 6c ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a4ec:	5b                   	pop    ebx
c001a4ed:	58                   	pop    eax
c001a4ee:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a4f3:	68 75 b7 02 c0       	push   0xc002b775
c001a4f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4fe:	e8 ef 6b ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a503:	5a                   	pop    edx
c001a504:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a509:	59                   	pop    ecx
c001a50a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a510:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a513:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a516:	50                   	push   eax
c001a517:	e8 fc 6b ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a51c:	5b                   	pop    ebx
c001a51d:	58                   	pop    eax
c001a51e:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a523:	68 75 b7 02 c0       	push   0xc002b775
c001a528:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a52e:	e8 bf 6b ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a533:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a538:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a53b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a541:	8b 12                	mov    edx,DWORD PTR [edx]
c001a543:	59                   	pop    ecx
c001a544:	5b                   	pop    ebx
c001a545:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a548:	50                   	push   eax
c001a549:	e8 ca 6b ff ff       	call   c0011118 <VgaText::putx(unsigned int)>
c001a54e:	83 c4 10             	add    esp,0x10
c001a551:	b2 fe                	mov    dl,0xfe
c001a553:	e4 60                	in     al,0x60
c001a555:	3c 1c                	cmp    al,0x1c
c001a557:	74 04                	je     c001a55d <Krnl::panic(char const*)+0x334>
c001a559:	3c 5a                	cmp    al,0x5a
c001a55b:	75 f6                	jne    c001a553 <Krnl::panic(char const*)+0x32a>
c001a55d:	e4 64                	in     al,0x64
c001a55f:	a8 02                	test   al,0x2
c001a561:	75 fa                	jne    c001a55d <Krnl::panic(char const*)+0x334>
c001a563:	88 d0                	mov    al,dl
c001a565:	e6 64                	out    0x64,al
c001a567:	fa                   	cli    
c001a568:	f4                   	hlt    
c001a569:	eb e8                	jmp    c001a553 <Krnl::panic(char const*)+0x32a>
c001a56b:	50                   	push   eax
c001a56c:	50                   	push   eax
c001a56d:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a572:	68 e0 b7 02 c0       	push   0xc002b7e0
c001a577:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a57d:	e8 70 6b ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a582:	58                   	pop    eax
c001a583:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a588:	5a                   	pop    edx
c001a589:	68 ef b6 02 c0       	push   0xc002b6ef
c001a58e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a594:	e8 59 6b ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a599:	59                   	pop    ecx
c001a59a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a59f:	5b                   	pop    ebx
c001a5a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5a3:	83 c0 0c             	add    eax,0xc
c001a5a6:	50                   	push   eax
c001a5a7:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001a5ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5b2:	e8 3b 6b ff ff       	call   c00110f2 <VgaText::puts(char const*)>
c001a5b7:	83 c4 10             	add    esp,0x10
c001a5ba:	e9 a3 fd ff ff       	jmp    c001a362 <Krnl::panic(char const*)+0x139>

c001a5bf <Net::switchEndian16(unsigned short)>:
c001a5bf:	83 ec 04             	sub    esp,0x4
c001a5c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5c6:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a5ca:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a5ce:	c1 f8 08             	sar    eax,0x8
c001a5d1:	89 c2                	mov    edx,eax
c001a5d3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a5d7:	c1 e0 08             	shl    eax,0x8
c001a5da:	09 d0                	or     eax,edx
c001a5dc:	83 c4 04             	add    esp,0x4
c001a5df:	c3                   	ret    

c001a5e0 <Net::switchEndian32(unsigned int)>:
c001a5e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5e4:	c1 e8 18             	shr    eax,0x18
c001a5e7:	89 c2                	mov    edx,eax
c001a5e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5ed:	c1 e0 08             	shl    eax,0x8
c001a5f0:	25 00 00 ff 00       	and    eax,0xff0000
c001a5f5:	09 c2                	or     edx,eax
c001a5f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5fb:	c1 e8 08             	shr    eax,0x8
c001a5fe:	25 00 ff 00 00       	and    eax,0xff00
c001a603:	09 c2                	or     edx,eax
c001a605:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a609:	c1 e0 18             	shl    eax,0x18
c001a60c:	09 d0                	or     eax,edx
c001a60e:	c3                   	ret    

c001a60f <Net::crc32Calc(unsigned char*, int)>:
c001a60f:	83 ec 10             	sub    esp,0x10
c001a612:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a617:	75 07                	jne    c001a620 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a619:	b8 00 00 00 00       	mov    eax,0x0
c001a61e:	eb 7c                	jmp    c001a69c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a620:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a625:	7f 07                	jg     c001a62e <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a627:	b8 00 00 00 00       	mov    eax,0x0
c001a62c:	eb 6e                	jmp    c001a69c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a62e:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a636:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a63e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a642:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a646:	7d 4e                	jge    c001a696 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a648:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a64c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a650:	01 d0                	add    eax,edx
c001a652:	8a 00                	mov    al,BYTE PTR [eax]
c001a654:	0f b6 c0             	movzx  eax,al
c001a657:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a65b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a663:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a668:	7f 26                	jg     c001a690 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a66a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a66e:	83 e0 01             	and    eax,0x1
c001a671:	74 0d                	je     c001a680 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a677:	d1 e8                	shr    eax,1
c001a679:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a67e:	eb 06                	jmp    c001a686 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a684:	d1 e8                	shr    eax,1
c001a686:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a68a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a68e:	eb d3                	jmp    c001a663 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a690:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a694:	eb a8                	jmp    c001a63e <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a69a:	f7 d0                	not    eax
c001a69c:	83 c4 10             	add    esp,0x10
c001a69f:	c3                   	ret    

c001a6a0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a6a0:	83 ec 1c             	sub    esp,0x1c
c001a6a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a6ab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a6b3:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a6b8:	7f 14                	jg     c001a6ce <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a6ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6be:	8d 50 01             	lea    edx,[eax+0x1]
c001a6c1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a6c5:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a6c8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a6cc:	eb e5                	jmp    c001a6b3 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a6ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6d2:	8d 50 01             	lea    edx,[eax+0x1]
c001a6d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a6d9:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a6dc:	83 ec 04             	sub    esp,0x4
c001a6df:	6a 06                	push   0x6
c001a6e1:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a6e5:	50                   	push   eax
c001a6e6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a6ea:	e8 55 60 fe ff       	call   c0000744 <memcpy>
c001a6ef:	83 c4 10             	add    esp,0x10
c001a6f2:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a6f7:	83 ec 04             	sub    esp,0x4
c001a6fa:	6a 06                	push   0x6
c001a6fc:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a700:	50                   	push   eax
c001a701:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a705:	e8 3a 60 fe ff       	call   c0000744 <memcpy>
c001a70a:	83 c4 10             	add    esp,0x10
c001a70d:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a712:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a716:	0f b7 c0             	movzx  eax,ax
c001a719:	c1 f8 08             	sar    eax,0x8
c001a71c:	89 c1                	mov    ecx,eax
c001a71e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a722:	8d 50 01             	lea    edx,[eax+0x1]
c001a725:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a729:	88 ca                	mov    dl,cl
c001a72b:	88 10                	mov    BYTE PTR [eax],dl
c001a72d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a731:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a735:	8d 48 01             	lea    ecx,[eax+0x1]
c001a738:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a73c:	88 10                	mov    BYTE PTR [eax],dl
c001a73e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a746:	83 ec 04             	sub    esp,0x4
c001a749:	52                   	push   edx
c001a74a:	50                   	push   eax
c001a74b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a74f:	e8 f0 5f fe ff       	call   c0000744 <memcpy>
c001a754:	83 c4 10             	add    esp,0x10
c001a757:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a75b:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a75f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a763:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a767:	83 ec 08             	sub    esp,0x8
c001a76a:	50                   	push   eax
c001a76b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a76f:	e8 9b fe ff ff       	call   c001a60f <Net::crc32Calc(unsigned char*, int)>
c001a774:	83 c4 10             	add    esp,0x10
c001a777:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a77b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a77f:	c1 e8 18             	shr    eax,0x18
c001a782:	89 c1                	mov    ecx,eax
c001a784:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a788:	8d 50 01             	lea    edx,[eax+0x1]
c001a78b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a78f:	88 ca                	mov    dl,cl
c001a791:	88 10                	mov    BYTE PTR [eax],dl
c001a793:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a797:	c1 e8 10             	shr    eax,0x10
c001a79a:	89 c1                	mov    ecx,eax
c001a79c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7a0:	8d 50 01             	lea    edx,[eax+0x1]
c001a7a3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a7a7:	88 ca                	mov    dl,cl
c001a7a9:	88 10                	mov    BYTE PTR [eax],dl
c001a7ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7af:	c1 e8 08             	shr    eax,0x8
c001a7b2:	89 c1                	mov    ecx,eax
c001a7b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7b8:	8d 50 01             	lea    edx,[eax+0x1]
c001a7bb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a7bf:	88 ca                	mov    dl,cl
c001a7c1:	88 10                	mov    BYTE PTR [eax],dl
c001a7c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7c7:	8d 50 01             	lea    edx,[eax+0x1]
c001a7ca:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a7ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a7d2:	88 10                	mov    BYTE PTR [eax],dl
c001a7d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a7d8:	83 c4 1c             	add    esp,0x1c
c001a7db:	c3                   	ret    

c001a7dc <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a7dc:	83 ec 2c             	sub    esp,0x2c
c001a7df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a7e7:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a7ec:	83 ec 04             	sub    esp,0x4
c001a7ef:	6a 06                	push   0x6
c001a7f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a7f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a7f9:	83 c0 0e             	add    eax,0xe
c001a7fc:	50                   	push   eax
c001a7fd:	e8 42 5f fe ff       	call   c0000744 <memcpy>
c001a802:	83 c4 10             	add    esp,0x10
c001a805:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a80a:	83 ec 04             	sub    esp,0x4
c001a80d:	6a 06                	push   0x6
c001a80f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a813:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a817:	83 c0 08             	add    eax,0x8
c001a81a:	50                   	push   eax
c001a81b:	e8 24 5f fe ff       	call   c0000744 <memcpy>
c001a820:	83 c4 10             	add    esp,0x10
c001a823:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a828:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a82c:	8d 50 01             	lea    edx,[eax+0x1]
c001a82f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a833:	8a 00                	mov    al,BYTE PTR [eax]
c001a835:	0f b6 c0             	movzx  eax,al
c001a838:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a83d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a841:	8d 50 01             	lea    edx,[eax+0x1]
c001a844:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a848:	8a 00                	mov    al,BYTE PTR [eax]
c001a84a:	0f b6 c0             	movzx  eax,al
c001a84d:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a852:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a857:	c1 e0 08             	shl    eax,0x8
c001a85a:	89 c2                	mov    edx,eax
c001a85c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a860:	09 d0                	or     eax,edx
c001a862:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a866:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a86a:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a86f:	75 3a                	jne    c001a8ab <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a871:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a875:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a878:	66 3d dc 05          	cmp    ax,0x5dc
c001a87c:	77 10                	ja     c001a88e <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a87e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a882:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a885:	0f b7 c0             	movzx  eax,ax
c001a888:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a88c:	eb 1d                	jmp    c001a8ab <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a88e:	83 ec 0c             	sub    esp,0xc
c001a891:	68 b8 b8 02 c0       	push   0xc002b8b8
c001a896:	e8 13 83 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001a89b:	83 c4 10             	add    esp,0x10
c001a89e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8a2:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a8a6:	e9 c0 00 00 00       	jmp    c001a96b <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a8ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a8af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8b5:	83 ec 04             	sub    esp,0x4
c001a8b8:	52                   	push   edx
c001a8b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a8bd:	50                   	push   eax
c001a8be:	e8 81 5e fe ff       	call   c0000744 <memcpy>
c001a8c3:	83 c4 10             	add    esp,0x10
c001a8c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8ca:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a8ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8d2:	8d 50 01             	lea    edx,[eax+0x1]
c001a8d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a8d9:	8a 00                	mov    al,BYTE PTR [eax]
c001a8db:	0f b6 c0             	movzx  eax,al
c001a8de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8e6:	8d 50 01             	lea    edx,[eax+0x1]
c001a8e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a8ed:	8a 00                	mov    al,BYTE PTR [eax]
c001a8ef:	0f b6 c0             	movzx  eax,al
c001a8f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a8f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8fa:	8d 50 01             	lea    edx,[eax+0x1]
c001a8fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a901:	8a 00                	mov    al,BYTE PTR [eax]
c001a903:	0f b6 c0             	movzx  eax,al
c001a906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a90a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a90e:	8d 50 01             	lea    edx,[eax+0x1]
c001a911:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a915:	8a 00                	mov    al,BYTE PTR [eax]
c001a917:	0f b6 c0             	movzx  eax,al
c001a91a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a91e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a922:	c1 e0 18             	shl    eax,0x18
c001a925:	89 c2                	mov    edx,eax
c001a927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a92b:	c1 e0 10             	shl    eax,0x10
c001a92e:	09 c2                	or     edx,eax
c001a930:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a934:	c1 e0 08             	shl    eax,0x8
c001a937:	09 d0                	or     eax,edx
c001a939:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a93d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a941:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a945:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a949:	83 e8 04             	sub    eax,0x4
c001a94c:	83 ec 08             	sub    esp,0x8
c001a94f:	50                   	push   eax
c001a950:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a954:	e8 b6 fc ff ff       	call   c001a60f <Net::crc32Calc(unsigned char*, int)>
c001a959:	83 c4 10             	add    esp,0x10
c001a95c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a960:	0f 94 c2             	sete   dl
c001a963:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a967:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a96a:	90                   	nop
c001a96b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a96f:	83 c4 2c             	add    esp,0x2c
c001a972:	c2 04 00             	ret    0x4

c001a975 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a975:	55                   	push   ebp
c001a976:	57                   	push   edi
c001a977:	56                   	push   esi
c001a978:	53                   	push   ebx
c001a979:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a97f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a986:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a988:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a98b:	80 fb 40             	cmp    bl,0x40
c001a98e:	75 1b                	jne    c001a9ab <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a990:	8a 16                	mov    dl,BYTE PTR [esi]
c001a992:	84 d2                	test   dl,dl
c001a994:	0f 84 f1 00 00 00    	je     c001aa8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a99a:	8d 46 01             	lea    eax,[esi+0x1]
c001a99d:	80 fa 3a             	cmp    dl,0x3a
c001a9a0:	74 04                	je     c001a9a6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a9a2:	89 c6                	mov    esi,eax
c001a9a4:	eb ea                	jmp    c001a990 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a9a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a9a9:	89 c6                	mov    esi,eax
c001a9ab:	50                   	push   eax
c001a9ac:	6a 40                	push   0x40
c001a9ae:	6a 00                	push   0x0
c001a9b0:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a9b4:	50                   	push   eax
c001a9b5:	e8 be 5d fe ff       	call   c0000778 <memset>
c001a9ba:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a9c1:	31 c0                	xor    eax,eax
c001a9c3:	83 c4 10             	add    esp,0x10
c001a9c6:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a9c8:	84 c9                	test   cl,cl
c001a9ca:	0f 84 bb 00 00 00    	je     c001aa8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9d0:	3d c7 00 00 00       	cmp    eax,0xc7
c001a9d5:	0f 8f b0 00 00 00    	jg     c001aa8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9db:	80 f9 0a             	cmp    cl,0xa
c001a9de:	0f 85 98 00 00 00    	jne    c001aa7c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a9e4:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a9e9:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a9ed:	a8 df                	test   al,0xdf
c001a9ef:	0f 94 c1             	sete   cl
c001a9f2:	3c 23                	cmp    al,0x23
c001a9f4:	0f 94 c2             	sete   dl
c001a9f7:	08 d1                	or     cl,dl
c001a9f9:	75 4a                	jne    c001aa45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a9fb:	8d 50 f7             	lea    edx,[eax-0x9]
c001a9fe:	80 fa 01             	cmp    dl,0x1
c001aa01:	76 42                	jbe    c001aa45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa03:	3c 5b                	cmp    al,0x5b
c001aa05:	75 42                	jne    c001aa49 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001aa07:	80 fb 40             	cmp    bl,0x40
c001aa0a:	75 39                	jne    c001aa45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa0c:	83 ec 0c             	sub    esp,0xc
c001aa0f:	8d 54 24 65          	lea    edx,[esp+0x65]
c001aa13:	52                   	push   edx
c001aa14:	e8 7b 5d fe ff       	call   c0000794 <strlen>
c001aa19:	83 c4 10             	add    esp,0x10
c001aa1c:	83 f8 3f             	cmp    eax,0x3f
c001aa1f:	77 6a                	ja     c001aa8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aa21:	50                   	push   eax
c001aa22:	50                   	push   eax
c001aa23:	8d 54 24 61          	lea    edx,[esp+0x61]
c001aa27:	52                   	push   edx
c001aa28:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aa2c:	52                   	push   edx
c001aa2d:	e8 02 5e fe ff       	call   c0000834 <strcpy>
c001aa32:	58                   	pop    eax
c001aa33:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aa37:	52                   	push   edx
c001aa38:	e8 57 5d fe ff       	call   c0000794 <strlen>
c001aa3d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001aa42:	83 c4 10             	add    esp,0x10
c001aa45:	31 d2                	xor    edx,edx
c001aa47:	eb 3a                	jmp    c001aa83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001aa49:	80 fb 40             	cmp    bl,0x40
c001aa4c:	74 06                	je     c001aa54 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aa4e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aa52:	eb 20                	jmp    c001aa74 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aa54:	50                   	push   eax
c001aa55:	50                   	push   eax
c001aa56:	55                   	push   ebp
c001aa57:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aa5b:	50                   	push   eax
c001aa5c:	e8 5f 5e fe ff       	call   c00008c0 <strcmp>
c001aa61:	83 c4 10             	add    esp,0x10
c001aa64:	85 c0                	test   eax,eax
c001aa66:	75 dd                	jne    c001aa45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa68:	eb e4                	jmp    c001aa4e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aa6a:	8d 50 01             	lea    edx,[eax+0x1]
c001aa6d:	80 f9 3d             	cmp    cl,0x3d
c001aa70:	74 1d                	je     c001aa8f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aa72:	89 d0                	mov    eax,edx
c001aa74:	8a 08                	mov    cl,BYTE PTR [eax]
c001aa76:	84 c9                	test   cl,cl
c001aa78:	75 f0                	jne    c001aa6a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aa7a:	eb 0f                	jmp    c001aa8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aa7c:	8d 50 01             	lea    edx,[eax+0x1]
c001aa7f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aa83:	47                   	inc    edi
c001aa84:	89 d0                	mov    eax,edx
c001aa86:	e9 3b ff ff ff       	jmp    c001a9c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aa8b:	31 c0                	xor    eax,eax
c001aa8d:	eb 33                	jmp    c001aac2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aa8f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aa93:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aa96:	50                   	push   eax
c001aa97:	50                   	push   eax
c001aa98:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aa9c:	50                   	push   eax
c001aa9d:	56                   	push   esi
c001aa9e:	e8 1d 5e fe ff       	call   c00008c0 <strcmp>
c001aaa3:	83 c4 10             	add    esp,0x10
c001aaa6:	85 c0                	test   eax,eax
c001aaa8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aaac:	75 97                	jne    c001aa45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aaae:	51                   	push   ecx
c001aaaf:	51                   	push   ecx
c001aab0:	52                   	push   edx
c001aab1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aab8:	e8 77 5d fe ff       	call   c0000834 <strcpy>
c001aabd:	83 c4 10             	add    esp,0x10
c001aac0:	b0 01                	mov    al,0x1
c001aac2:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aac8:	5b                   	pop    ebx
c001aac9:	5e                   	pop    esi
c001aaca:	5f                   	pop    edi
c001aacb:	5d                   	pop    ebp
c001aacc:	c3                   	ret    

c001aacd <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aacd:	57                   	push   edi
c001aace:	56                   	push   esi
c001aacf:	53                   	push   ebx
c001aad0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aad6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aadd:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aae4:	53                   	push   ebx
c001aae5:	e8 aa 5c fe ff       	call   c0000794 <strlen>
c001aaea:	89 34 24             	mov    DWORD PTR [esp],esi
c001aaed:	89 c7                	mov    edi,eax
c001aaef:	e8 a0 5c fe ff       	call   c0000794 <strlen>
c001aaf4:	83 c4 10             	add    esp,0x10
c001aaf7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aafb:	3d ff 00 00 00       	cmp    eax,0xff
c001ab00:	0f 87 d3 00 00 00    	ja     c001abd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ab06:	57                   	push   edi
c001ab07:	57                   	push   edi
c001ab08:	56                   	push   esi
c001ab09:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ab0d:	56                   	push   esi
c001ab0e:	e8 21 5d fe ff       	call   c0000834 <strcpy>
c001ab13:	58                   	pop    eax
c001ab14:	5a                   	pop    edx
c001ab15:	68 81 be 02 c0       	push   0xc002be81
c001ab1a:	56                   	push   esi
c001ab1b:	e8 54 5e fe ff       	call   c0000974 <strcat>
c001ab20:	59                   	pop    ecx
c001ab21:	5f                   	pop    edi
c001ab22:	53                   	push   ebx
c001ab23:	56                   	push   esi
c001ab24:	e8 4b 5e fe ff       	call   c0000974 <strcat>
c001ab29:	58                   	pop    eax
c001ab2a:	5a                   	pop    edx
c001ab2b:	68 04 b9 02 c0       	push   0xc002b904
c001ab30:	56                   	push   esi
c001ab31:	e8 3e 5e fe ff       	call   c0000974 <strcat>
c001ab36:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ab3d:	e8 fe 4c ff ff       	call   c000f840 <malloc>
c001ab42:	83 c4 0c             	add    esp,0xc
c001ab45:	89 c3                	mov    ebx,eax
c001ab47:	ff 35 14 16 03 c0    	push   DWORD PTR ds:0xc0031614
c001ab4d:	56                   	push   esi
c001ab4e:	50                   	push   eax
c001ab4f:	e8 b2 85 ff ff       	call   c0013106 <File::File(char const*, Process*)>
c001ab54:	83 c4 10             	add    esp,0x10
c001ab57:	85 db                	test   ebx,ebx
c001ab59:	74 7e                	je     c001abd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ab5b:	51                   	push   ecx
c001ab5c:	51                   	push   ecx
c001ab5d:	6a 01                	push   0x1
c001ab5f:	53                   	push   ebx
c001ab60:	e8 05 86 ff ff       	call   c001316a <File::open(FileOpenMode)>
c001ab65:	83 c4 10             	add    esp,0x10
c001ab68:	85 c0                	test   eax,eax
c001ab6a:	74 08                	je     c001ab74 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ab6c:	83 ec 0c             	sub    esp,0xc
c001ab6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab71:	53                   	push   ebx
c001ab72:	eb 5f                	jmp    c001abd3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ab74:	52                   	push   edx
c001ab75:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ab79:	50                   	push   eax
c001ab7a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ab7e:	50                   	push   eax
c001ab7f:	53                   	push   ebx
c001ab80:	e8 91 88 ff ff       	call   c0013416 <File::stat(unsigned long long*, bool*)>
c001ab85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab89:	83 c4 10             	add    esp,0x10
c001ab8c:	89 c1                	mov    ecx,eax
c001ab8e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ab92:	74 31                	je     c001abc5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ab94:	83 ec 0c             	sub    esp,0xc
c001ab97:	50                   	push   eax
c001ab98:	e8 a3 4c ff ff       	call   c000f840 <malloc>
c001ab9d:	89 c6                	mov    esi,eax
c001ab9f:	58                   	pop    eax
c001aba0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aba2:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aba6:	52                   	push   edx
c001aba7:	56                   	push   esi
c001aba8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001abac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001abb0:	53                   	push   ebx
c001abb1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abb4:	83 c4 20             	add    esp,0x20
c001abb7:	85 c0                	test   eax,eax
c001abb9:	75 0a                	jne    c001abc5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001abbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abbf:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001abc3:	74 18                	je     c001abdd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001abc5:	83 ec 0c             	sub    esp,0xc
c001abc8:	53                   	push   ebx
c001abc9:	e8 fa 85 ff ff       	call   c00131c8 <File::close()>
c001abce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abd3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abd6:	83 c4 10             	add    esp,0x10
c001abd9:	31 c0                	xor    eax,eax
c001abdb:	eb 3b                	jmp    c001ac18 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001abdd:	83 ec 0c             	sub    esp,0xc
c001abe0:	53                   	push   ebx
c001abe1:	e8 e2 85 ff ff       	call   c00131c8 <File::close()>
c001abe6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abee:	83 c4 0c             	add    esp,0xc
c001abf1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001abf8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001abff:	56                   	push   esi
c001ac00:	e8 70 fd ff ff       	call   c001a975 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ac05:	89 34 24             	mov    DWORD PTR [esp],esi
c001ac08:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ac0c:	e8 3f 4c ff ff       	call   c000f850 <free>
c001ac11:	83 c4 10             	add    esp,0x10
c001ac14:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ac18:	81 c4 20 01 00 00    	add    esp,0x120
c001ac1e:	5b                   	pop    ebx
c001ac1f:	5e                   	pop    esi
c001ac20:	5f                   	pop    edi
c001ac21:	c3                   	ret    

c001ac22 <Reg::getLine(char*, char*, char*)>:
c001ac22:	57                   	push   edi
c001ac23:	56                   	push   esi
c001ac24:	53                   	push   ebx
c001ac25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac29:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ac2d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ac31:	57                   	push   edi
c001ac32:	56                   	push   esi
c001ac33:	53                   	push   ebx
c001ac34:	68 09 b9 02 c0       	push   0xc002b909
c001ac39:	e8 8f fe ff ff       	call   c001aacd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ac3e:	83 c4 10             	add    esp,0x10
c001ac41:	84 c0                	test   al,al
c001ac43:	75 10                	jne    c001ac55 <Reg::getLine(char*, char*, char*)+0x33>
c001ac45:	57                   	push   edi
c001ac46:	56                   	push   esi
c001ac47:	53                   	push   ebx
c001ac48:	68 2e b9 02 c0       	push   0xc002b92e
c001ac4d:	e8 7b fe ff ff       	call   c001aacd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ac52:	83 c4 10             	add    esp,0x10
c001ac55:	5b                   	pop    ebx
c001ac56:	5e                   	pop    esi
c001ac57:	5f                   	pop    edi
c001ac58:	c3                   	ret    

c001ac59 <Reg::readInt(char*, char*, int*)>:
c001ac59:	55                   	push   ebp
c001ac5a:	57                   	push   edi
c001ac5b:	56                   	push   esi
c001ac5c:	53                   	push   ebx
c001ac5d:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ac63:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ac67:	57                   	push   edi
c001ac68:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ac6f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ac76:	e8 a7 ff ff ff       	call   c001ac22 <Reg::getLine(char*, char*, char*)>
c001ac7b:	83 c4 10             	add    esp,0x10
c001ac7e:	84 c0                	test   al,al
c001ac80:	0f 84 b3 00 00 00    	je     c001ad39 <Reg::readInt(char*, char*, int*)+0xe0>
c001ac86:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001ac8a:	80 fa 2b             	cmp    dl,0x2b
c001ac8d:	74 0c                	je     c001ac9b <Reg::readInt(char*, char*, int*)+0x42>
c001ac8f:	80 fa 2d             	cmp    dl,0x2d
c001ac92:	75 0e                	jne    c001aca2 <Reg::readInt(char*, char*, int*)+0x49>
c001ac94:	ba 01 00 00 00       	mov    edx,0x1
c001ac99:	eb 0b                	jmp    c001aca6 <Reg::readInt(char*, char*, int*)+0x4d>
c001ac9b:	ba 01 00 00 00       	mov    edx,0x1
c001aca0:	eb 02                	jmp    c001aca4 <Reg::readInt(char*, char*, int*)+0x4b>
c001aca2:	31 d2                	xor    edx,edx
c001aca4:	31 c0                	xor    eax,eax
c001aca6:	be 0a 00 00 00       	mov    esi,0xa
c001acab:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001acb0:	75 20                	jne    c001acd2 <Reg::readInt(char*, char*, int*)+0x79>
c001acb2:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001acb6:	80 f9 78             	cmp    cl,0x78
c001acb9:	75 0a                	jne    c001acc5 <Reg::readInt(char*, char*, int*)+0x6c>
c001acbb:	83 c2 02             	add    edx,0x2
c001acbe:	be 10 00 00 00       	mov    esi,0x10
c001acc3:	eb 0d                	jmp    c001acd2 <Reg::readInt(char*, char*, int*)+0x79>
c001acc5:	80 f9 62             	cmp    cl,0x62
c001acc8:	75 08                	jne    c001acd2 <Reg::readInt(char*, char*, int*)+0x79>
c001acca:	83 c2 02             	add    edx,0x2
c001accd:	be 02 00 00 00       	mov    esi,0x2
c001acd2:	01 d7                	add    edi,edx
c001acd4:	31 d2                	xor    edx,edx
c001acd6:	8a 1f                	mov    bl,BYTE PTR [edi]
c001acd8:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001acdc:	80 fb 0d             	cmp    bl,0xd
c001acdf:	0f 94 c3             	sete   bl
c001ace2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ace7:	0f 94 c1             	sete   cl
c001acea:	08 cb                	or     bl,cl
c001acec:	75 3a                	jne    c001ad28 <Reg::readInt(char*, char*, int*)+0xcf>
c001acee:	0f af d6             	imul   edx,esi
c001acf1:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001acf6:	83 fe 10             	cmp    esi,0x10
c001acf9:	75 26                	jne    c001ad21 <Reg::readInt(char*, char*, int*)+0xc8>
c001acfb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001acff:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ad02:	89 e9                	mov    ecx,ebp
c001ad04:	80 f9 05             	cmp    cl,0x5
c001ad07:	77 06                	ja     c001ad0f <Reg::readInt(char*, char*, int*)+0xb6>
c001ad09:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ad0d:	eb 16                	jmp    c001ad25 <Reg::readInt(char*, char*, int*)+0xcc>
c001ad0f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ad13:	83 e9 61             	sub    ecx,0x61
c001ad16:	80 f9 05             	cmp    cl,0x5
c001ad19:	77 06                	ja     c001ad21 <Reg::readInt(char*, char*, int*)+0xc8>
c001ad1b:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ad1f:	eb 04                	jmp    c001ad25 <Reg::readInt(char*, char*, int*)+0xcc>
c001ad21:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ad25:	47                   	inc    edi
c001ad26:	eb ae                	jmp    c001acd6 <Reg::readInt(char*, char*, int*)+0x7d>
c001ad28:	84 c0                	test   al,al
c001ad2a:	74 02                	je     c001ad2e <Reg::readInt(char*, char*, int*)+0xd5>
c001ad2c:	f7 da                	neg    edx
c001ad2e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ad35:	89 10                	mov    DWORD PTR [eax],edx
c001ad37:	88 d8                	mov    al,bl
c001ad39:	81 c4 ec 00 00 00    	add    esp,0xec
c001ad3f:	5b                   	pop    ebx
c001ad40:	5e                   	pop    esi
c001ad41:	5f                   	pop    edi
c001ad42:	5d                   	pop    ebp
c001ad43:	c3                   	ret    

c001ad44 <Reg::readString(char*, char*, char*, int)>:
c001ad44:	57                   	push   edi
c001ad45:	56                   	push   esi
c001ad46:	53                   	push   ebx
c001ad47:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ad4d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ad54:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ad58:	57                   	push   edi
c001ad59:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ad60:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ad67:	e8 b6 fe ff ff       	call   c001ac22 <Reg::getLine(char*, char*, char*)>
c001ad6c:	83 c4 10             	add    esp,0x10
c001ad6f:	89 c6                	mov    esi,eax
c001ad71:	84 c0                	test   al,al
c001ad73:	74 44                	je     c001adb9 <Reg::readString(char*, char*, char*, int)+0x75>
c001ad75:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ad7c:	31 c0                	xor    eax,eax
c001ad7e:	4a                   	dec    edx
c001ad7f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ad82:	84 c9                	test   cl,cl
c001ad84:	74 0f                	je     c001ad95 <Reg::readString(char*, char*, char*, int)+0x51>
c001ad86:	39 c2                	cmp    edx,eax
c001ad88:	7e 0b                	jle    c001ad95 <Reg::readString(char*, char*, char*, int)+0x51>
c001ad8a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ad8d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ad92:	40                   	inc    eax
c001ad93:	eb ea                	jmp    c001ad7f <Reg::readString(char*, char*, char*, int)+0x3b>
c001ad95:	83 ec 0c             	sub    esp,0xc
c001ad98:	53                   	push   ebx
c001ad99:	e8 f6 59 fe ff       	call   c0000794 <strlen>
c001ad9e:	83 c4 10             	add    esp,0x10
c001ada1:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ada6:	75 11                	jne    c001adb9 <Reg::readString(char*, char*, char*, int)+0x75>
c001ada8:	83 ec 0c             	sub    esp,0xc
c001adab:	53                   	push   ebx
c001adac:	e8 e3 59 fe ff       	call   c0000794 <strlen>
c001adb1:	83 c4 10             	add    esp,0x10
c001adb4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001adb9:	81 c4 d0 00 00 00    	add    esp,0xd0
c001adbf:	89 f0                	mov    eax,esi
c001adc1:	5b                   	pop    ebx
c001adc2:	5e                   	pop    esi
c001adc3:	5f                   	pop    edi
c001adc4:	c3                   	ret    

c001adc5 <Reg::readBool(char*, char*, bool*)>:
c001adc5:	83 ec 20             	sub    esp,0x20
c001adc8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001adcc:	50                   	push   eax
c001adcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001add1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001add5:	e8 7f fe ff ff       	call   c001ac59 <Reg::readInt(char*, char*, int*)>
c001adda:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001addf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ade3:	0f 95 02             	setne  BYTE PTR [edx]
c001ade6:	83 c4 2c             	add    esp,0x2c
c001ade9:	c3                   	ret    

c001adea <Reg::readBoolWithDefault(char*, char*, bool)>:
c001adea:	53                   	push   ebx
c001adeb:	83 ec 1c             	sub    esp,0x1c
c001adee:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001adf2:	8d 44 24 13          	lea    eax,[esp+0x13]
c001adf6:	50                   	push   eax
c001adf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adff:	e8 c1 ff ff ff       	call   c001adc5 <Reg::readBool(char*, char*, bool*)>
c001ae04:	83 c4 10             	add    esp,0x10
c001ae07:	84 c0                	test   al,al
c001ae09:	74 04                	je     c001ae0f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ae0b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ae0f:	88 d8                	mov    al,bl
c001ae11:	83 c4 18             	add    esp,0x18
c001ae14:	5b                   	pop    ebx
c001ae15:	c3                   	ret    

c001ae16 <Reg::readIntWithDefault(char*, char*, int)>:
c001ae16:	53                   	push   ebx
c001ae17:	83 ec 1c             	sub    esp,0x1c
c001ae1a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ae1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ae22:	50                   	push   eax
c001ae23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae2b:	e8 29 fe ff ff       	call   c001ac59 <Reg::readInt(char*, char*, int*)>
c001ae30:	83 c4 10             	add    esp,0x10
c001ae33:	84 c0                	test   al,al
c001ae35:	74 04                	je     c001ae3b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ae37:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ae3b:	89 d8                	mov    eax,ebx
c001ae3d:	83 c4 18             	add    esp,0x18
c001ae40:	5b                   	pop    ebx
c001ae41:	c3                   	ret    

c001ae42 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ae42:	57                   	push   edi
c001ae43:	56                   	push   esi
c001ae44:	53                   	push   ebx
c001ae45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae49:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ae4d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ae51:	56                   	push   esi
c001ae52:	53                   	push   ebx
c001ae53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae5b:	e8 e4 fe ff ff       	call   c001ad44 <Reg::readString(char*, char*, char*, int)>
c001ae60:	83 c4 10             	add    esp,0x10
c001ae63:	84 c0                	test   al,al
c001ae65:	75 1b                	jne    c001ae82 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001ae67:	50                   	push   eax
c001ae68:	56                   	push   esi
c001ae69:	4e                   	dec    esi
c001ae6a:	6a 00                	push   0x0
c001ae6c:	53                   	push   ebx
c001ae6d:	e8 06 59 fe ff       	call   c0000778 <memset>
c001ae72:	83 c4 0c             	add    esp,0xc
c001ae75:	56                   	push   esi
c001ae76:	57                   	push   edi
c001ae77:	53                   	push   ebx
c001ae78:	89 fb                	mov    ebx,edi
c001ae7a:	e8 c5 58 fe ff       	call   c0000744 <memcpy>
c001ae7f:	83 c4 10             	add    esp,0x10
c001ae82:	89 d8                	mov    eax,ebx
c001ae84:	5b                   	pop    ebx
c001ae85:	5e                   	pop    esi
c001ae86:	5f                   	pop    edi
c001ae87:	c3                   	ret    

c001ae88 <Sys::eject(regs*)>:
c001ae88:	83 ec 0c             	sub    esp,0xc
c001ae8b:	83 ca ff             	or     edx,0xffffffff
c001ae8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae92:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ae95:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ae9a:	83 e9 41             	sub    ecx,0x41
c001ae9d:	83 f9 19             	cmp    ecx,0x19
c001aea0:	77 18                	ja     c001aeba <Sys::eject(regs*)+0x32>
c001aea2:	8b 0c 8d c0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1940]
c001aea9:	85 c9                	test   ecx,ecx
c001aeab:	74 0d                	je     c001aeba <Sys::eject(regs*)+0x32>
c001aead:	83 ec 0c             	sub    esp,0xc
c001aeb0:	51                   	push   ecx
c001aeb1:	e8 78 b4 ff ff       	call   c001632e <LogicalDisk::eject()>
c001aeb6:	83 c4 10             	add    esp,0x10
c001aeb9:	99                   	cdq    
c001aeba:	83 c4 0c             	add    esp,0xc
c001aebd:	c3                   	ret    

c001aebe <Sys::exit(regs*)>:
c001aebe:	83 ec 18             	sub    esp,0x18
c001aec1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aec5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aec8:	e8 c4 35 00 00       	call   c001e491 <terminateTask(int)>
c001aecd:	83 c8 ff             	or     eax,0xffffffff
c001aed0:	83 c4 1c             	add    esp,0x1c
c001aed3:	89 c2                	mov    edx,eax
c001aed5:	c3                   	ret    

c001aed6 <Sys::getCwd(regs*)>:
c001aed6:	83 ec 10             	sub    esp,0x10
c001aed9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aedd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001aee0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aee3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aee8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aeeb:	e8 18 80 ff ff       	call   c0012f08 <Fs::getcwd(Process*, char*, int)>
c001aef0:	83 c4 1c             	add    esp,0x1c
c001aef3:	99                   	cdq    
c001aef4:	c3                   	ret    

c001aef5 <Sys::getPID(regs*)>:
c001aef5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aefa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aefd:	8b 00                	mov    eax,DWORD PTR [eax]
c001aeff:	99                   	cdq    
c001af00:	c3                   	ret    

c001af01 <Sys::getRAMData(regs*)>:
c001af01:	8b 0d f0 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0f0
c001af07:	6b 05 ec e0 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e0ec,0x64
c001af0e:	99                   	cdq    
c001af0f:	f7 f9                	idiv   ecx
c001af11:	c1 e0 18             	shl    eax,0x18
c001af14:	09 c8                	or     eax,ecx
c001af16:	99                   	cdq    
c001af17:	c3                   	ret    

c001af18 <Sys::loadDLL(regs*)>:
c001af18:	56                   	push   esi
c001af19:	53                   	push   ebx
c001af1a:	31 d2                	xor    edx,edx
c001af1c:	51                   	push   ecx
c001af1d:	b8 01 00 00 00       	mov    eax,0x1
c001af22:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af26:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001af2a:	0f 84 8c 00 00 00    	je     c001afbc <Sys::loadDLL(regs*)+0xa4>
c001af30:	83 ec 0c             	sub    esp,0xc
c001af33:	68 14 01 00 00       	push   0x114
c001af38:	e8 03 49 ff ff       	call   c000f840 <malloc>
c001af3d:	83 c4 0c             	add    esp,0xc
c001af40:	89 c3                	mov    ebx,eax
c001af42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af47:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af4a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001af4d:	53                   	push   ebx
c001af4e:	e8 b3 81 ff ff       	call   c0013106 <File::File(char const*, Process*)>
c001af53:	83 c4 10             	add    esp,0x10
c001af56:	31 d2                	xor    edx,edx
c001af58:	b8 02 00 00 00       	mov    eax,0x2
c001af5d:	85 db                	test   ebx,ebx
c001af5f:	74 5b                	je     c001afbc <Sys::loadDLL(regs*)+0xa4>
c001af61:	83 ec 0c             	sub    esp,0xc
c001af64:	53                   	push   ebx
c001af65:	e8 6e 84 ff ff       	call   c00133d8 <File::exists()>
c001af6a:	83 c4 10             	add    esp,0x10
c001af6d:	84 c0                	test   al,al
c001af6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af71:	75 11                	jne    c001af84 <Sys::loadDLL(regs*)+0x6c>
c001af73:	83 ec 0c             	sub    esp,0xc
c001af76:	53                   	push   ebx
c001af77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af7a:	83 c4 10             	add    esp,0x10
c001af7d:	b8 03 00 00 00       	mov    eax,0x3
c001af82:	eb 36                	jmp    c001afba <Sys::loadDLL(regs*)+0xa2>
c001af84:	83 ec 0c             	sub    esp,0xc
c001af87:	53                   	push   ebx
c001af88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af8b:	58                   	pop    eax
c001af8c:	5a                   	pop    edx
c001af8d:	6a 00                	push   0x0
c001af8f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001af92:	e8 0f 24 00 00       	call   c001d3a6 <Thr::loadDLL(char const*, bool)>
c001af97:	83 c4 10             	add    esp,0x10
c001af9a:	89 c1                	mov    ecx,eax
c001af9c:	31 d2                	xor    edx,edx
c001af9e:	b8 04 00 00 00       	mov    eax,0x4
c001afa3:	85 c9                	test   ecx,ecx
c001afa5:	74 15                	je     c001afbc <Sys::loadDLL(regs*)+0xa4>
c001afa7:	53                   	push   ebx
c001afa8:	53                   	push   ebx
c001afa9:	ff 35 a8 e0 02 c0    	push   DWORD PTR ds:0xc002e0a8
c001afaf:	51                   	push   ecx
c001afb0:	e8 25 26 00 00       	call   c001d5da <Thr::executeDLL(unsigned long, void*)>
c001afb5:	83 c4 10             	add    esp,0x10
c001afb8:	31 c0                	xor    eax,eax
c001afba:	31 d2                	xor    edx,edx
c001afbc:	59                   	pop    ecx
c001afbd:	5b                   	pop    ebx
c001afbe:	5e                   	pop    esi
c001afbf:	c3                   	ret    

c001afc0 <Sys::read(regs*)>:
c001afc0:	57                   	push   edi
c001afc1:	56                   	push   esi
c001afc2:	53                   	push   ebx
c001afc3:	83 ec 10             	sub    esp,0x10
c001afc6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001afcd:	83 f8 02             	cmp    eax,0x2
c001afd0:	77 10                	ja     c001afe2 <Sys::read(regs*)+0x22>
c001afd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afd7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afda:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001afe0:	eb 0e                	jmp    c001aff0 <Sys::read(regs*)+0x30>
c001afe2:	83 ec 0c             	sub    esp,0xc
c001afe5:	50                   	push   eax
c001afe6:	e8 e0 69 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001afeb:	83 c4 10             	add    esp,0x10
c001afee:	89 c1                	mov    ecx,eax
c001aff0:	83 c8 ff             	or     eax,0xffffffff
c001aff3:	85 c9                	test   ecx,ecx
c001aff5:	89 c2                	mov    edx,eax
c001aff7:	74 28                	je     c001b021 <Sys::read(regs*)+0x61>
c001aff9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b001:	31 ff                	xor    edi,edi
c001b003:	83 ec 0c             	sub    esp,0xc
c001b006:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b008:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b00c:	52                   	push   edx
c001b00d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b010:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b013:	57                   	push   edi
c001b014:	56                   	push   esi
c001b015:	51                   	push   ecx
c001b016:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b019:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b01d:	83 c4 20             	add    esp,0x20
c001b020:	99                   	cdq    
c001b021:	83 c4 10             	add    esp,0x10
c001b024:	5b                   	pop    ebx
c001b025:	5e                   	pop    esi
c001b026:	5f                   	pop    edi
c001b027:	c3                   	ret    

c001b028 <Sys::sbrk(regs*)>:
c001b028:	56                   	push   esi
c001b029:	53                   	push   ebx
c001b02a:	83 ec 0c             	sub    esp,0xc
c001b02d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b031:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b036:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b039:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b03f:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b045:	68 49 b9 02 c0       	push   0xc002b949
c001b04a:	e8 5f 7b ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b04f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b052:	83 c4 10             	add    esp,0x10
c001b055:	85 c0                	test   eax,eax
c001b057:	75 0a                	jne    c001b063 <Sys::sbrk(regs*)+0x3b>
c001b059:	50                   	push   eax
c001b05a:	50                   	push   eax
c001b05b:	53                   	push   ebx
c001b05c:	68 65 b9 02 c0       	push   0xc002b965
c001b061:	eb 54                	jmp    c001b0b7 <Sys::sbrk(regs*)+0x8f>
c001b063:	79 0a                	jns    c001b06f <Sys::sbrk(regs*)+0x47>
c001b065:	56                   	push   esi
c001b066:	56                   	push   esi
c001b067:	53                   	push   ebx
c001b068:	68 78 b9 02 c0       	push   0xc002b978
c001b06d:	eb 48                	jmp    c001b0b7 <Sys::sbrk(regs*)+0x8f>
c001b06f:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b074:	76 17                	jbe    c001b08d <Sys::sbrk(regs*)+0x65>
c001b076:	51                   	push   ecx
c001b077:	51                   	push   ecx
c001b078:	53                   	push   ebx
c001b079:	68 8a b9 02 c0       	push   0xc002b98a
c001b07e:	e8 2b 7b ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b083:	83 c8 ff             	or     eax,0xffffffff
c001b086:	83 c4 10             	add    esp,0x10
c001b089:	89 c2                	mov    edx,eax
c001b08b:	eb 36                	jmp    c001b0c3 <Sys::sbrk(regs*)+0x9b>
c001b08d:	05 ff 0f 00 00       	add    eax,0xfff
c001b092:	56                   	push   esi
c001b093:	c1 e8 0c             	shr    eax,0xc
c001b096:	68 07 04 00 00       	push   0x407
c001b09b:	50                   	push   eax
c001b09c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0a4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b0aa:	e8 3d 72 ff ff       	call   c00122ec <VAS::allocatePages(int, int)>
c001b0af:	58                   	pop    eax
c001b0b0:	5a                   	pop    edx
c001b0b1:	53                   	push   ebx
c001b0b2:	68 a3 b9 02 c0       	push   0xc002b9a3
c001b0b7:	e8 f2 7a ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b0bc:	89 d8                	mov    eax,ebx
c001b0be:	31 d2                	xor    edx,edx
c001b0c0:	83 c4 10             	add    esp,0x10
c001b0c3:	59                   	pop    ecx
c001b0c4:	5b                   	pop    ebx
c001b0c5:	5e                   	pop    esi
c001b0c6:	c3                   	ret    

c001b0c7 <Sys::setCwd(regs*)>:
c001b0c7:	83 ec 14             	sub    esp,0x14
c001b0ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0ce:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b0d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0d6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b0d9:	e8 99 83 ff ff       	call   c0013477 <Fs::setcwd(Process*, char*)>
c001b0de:	83 c4 1c             	add    esp,0x1c
c001b0e1:	99                   	cdq    
c001b0e2:	c3                   	ret    

c001b0e3 <Sys::setTime(regs*)>:
c001b0e3:	55                   	push   ebp
c001b0e4:	31 d2                	xor    edx,edx
c001b0e6:	57                   	push   edi
c001b0e7:	bf 18 00 00 00       	mov    edi,0x18
c001b0ec:	56                   	push   esi
c001b0ed:	53                   	push   ebx
c001b0ee:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b0f3:	83 ec 30             	sub    esp,0x30
c001b0f6:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b0fa:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b0fd:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b100:	f7 f3                	div    ebx
c001b102:	89 d6                	mov    esi,edx
c001b104:	31 d2                	xor    edx,edx
c001b106:	f7 f3                	div    ebx
c001b108:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b10b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b10f:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b114:	31 d2                	xor    edx,edx
c001b116:	f7 f3                	div    ebx
c001b118:	31 d2                	xor    edx,edx
c001b11a:	bb 0c 00 00 00       	mov    ebx,0xc
c001b11f:	f7 f7                	div    edi
c001b121:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b124:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b128:	0f b7 cd             	movzx  ecx,bp
c001b12b:	56                   	push   esi
c001b12c:	89 c7                	mov    edi,eax
c001b12e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b132:	c1 e6 10             	shl    esi,0x10
c001b135:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b139:	83 e7 1f             	and    edi,0x1f
c001b13c:	51                   	push   ecx
c001b13d:	47                   	inc    edi
c001b13e:	c1 e8 05             	shr    eax,0x5
c001b141:	31 d2                	xor    edx,edx
c001b143:	f7 f3                	div    ebx
c001b145:	31 db                	xor    ebx,ebx
c001b147:	52                   	push   edx
c001b148:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b14c:	57                   	push   edi
c001b14d:	68 c9 b9 02 c0       	push   0xc002b9c9
c001b152:	e8 57 7a ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b157:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b15b:	89 f8                	mov    eax,edi
c001b15d:	31 c9                	xor    ecx,ecx
c001b15f:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b163:	88 c1                	mov    cl,al
c001b165:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b16b:	88 d5                	mov    ch,dl
c001b16d:	c1 e0 10             	shl    eax,0x10
c001b170:	0f b7 d1             	movzx  edx,cx
c001b173:	09 c2                	or     edx,eax
c001b175:	89 d8                	mov    eax,ebx
c001b177:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b17c:	09 f0                	or     eax,esi
c001b17e:	89 c3                	mov    ebx,eax
c001b180:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b184:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b188:	83 c4 18             	add    esp,0x18
c001b18b:	53                   	push   ebx
c001b18c:	52                   	push   edx
c001b18d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b191:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b195:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b199:	e8 f3 89 ff ff       	call   c0013b91 <datetimeToSeconds(datetime_t)>
c001b19e:	83 c4 0c             	add    esp,0xc
c001b1a1:	52                   	push   edx
c001b1a2:	50                   	push   eax
c001b1a3:	56                   	push   esi
c001b1a4:	e8 6f 8b ff ff       	call   c0013d18 <secondsToDatetime(unsigned long long)>
c001b1a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b1ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b1b1:	51                   	push   ecx
c001b1b2:	89 d6                	mov    esi,edx
c001b1b4:	51                   	push   ecx
c001b1b5:	c1 ee 10             	shr    esi,0x10
c001b1b8:	89 f3                	mov    ebx,esi
c001b1ba:	0f b6 f3             	movzx  esi,bl
c001b1bd:	56                   	push   esi
c001b1be:	0f b6 f6             	movzx  esi,dh
c001b1c1:	0f b6 d2             	movzx  edx,dl
c001b1c4:	56                   	push   esi
c001b1c5:	52                   	push   edx
c001b1c6:	89 c2                	mov    edx,eax
c001b1c8:	c1 ea 10             	shr    edx,0x10
c001b1cb:	52                   	push   edx
c001b1cc:	0f b6 d4             	movzx  edx,ah
c001b1cf:	0f b6 c0             	movzx  eax,al
c001b1d2:	52                   	push   edx
c001b1d3:	50                   	push   eax
c001b1d4:	68 e5 b9 02 c0       	push   0xc002b9e5
c001b1d9:	e8 d0 79 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b1de:	83 c4 2c             	add    esp,0x2c
c001b1e1:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c001b1e6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b1ea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b1ee:	53                   	push   ebx
c001b1ef:	51                   	push   ecx
c001b1f0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b1f6:	e8 bd 8a ff ff       	call   c0013cb8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b1fb:	83 f0 01             	xor    eax,0x1
c001b1fe:	31 d2                	xor    edx,edx
c001b200:	0f b6 c0             	movzx  eax,al
c001b203:	83 c4 3c             	add    esp,0x3c
c001b206:	5b                   	pop    ebx
c001b207:	5e                   	pop    esi
c001b208:	5f                   	pop    edi
c001b209:	5d                   	pop    ebp
c001b20a:	c3                   	ret    

c001b20b <Sys::timezone(regs*)>:
c001b20b:	53                   	push   ebx
c001b20c:	83 ec 08             	sub    esp,0x8
c001b20f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b213:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b217:	75 17                	jne    c001b230 <Sys::timezone(regs*)+0x25>
c001b219:	83 ec 0c             	sub    esp,0xc
c001b21c:	68 01 ba 02 c0       	push   0xc002ba01
c001b221:	e8 88 79 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b226:	83 c8 ff             	or     eax,0xffffffff
c001b229:	83 c4 10             	add    esp,0x10
c001b22c:	89 c2                	mov    edx,eax
c001b22e:	eb 20                	jmp    c001b250 <Sys::timezone(regs*)+0x45>
c001b230:	83 ec 0c             	sub    esp,0xc
c001b233:	68 39 ba 02 c0       	push   0xc002ba39
c001b238:	e8 71 79 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b23d:	58                   	pop    eax
c001b23e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b241:	e8 d4 87 ff ff       	call   c0013a1a <User::loadClockSettings(int)>
c001b246:	83 c4 10             	add    esp,0x10
c001b249:	b8 01 00 00 00       	mov    eax,0x1
c001b24e:	31 d2                	xor    edx,edx
c001b250:	83 c4 08             	add    esp,0x8
c001b253:	5b                   	pop    ebx
c001b254:	c3                   	ret    

c001b255 <Sys::write(regs*)>:
c001b255:	57                   	push   edi
c001b256:	56                   	push   esi
c001b257:	53                   	push   ebx
c001b258:	83 ec 10             	sub    esp,0x10
c001b25b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b25f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b262:	83 f8 02             	cmp    eax,0x2
c001b265:	77 10                	ja     c001b277 <Sys::write(regs*)+0x22>
c001b267:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b26c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b26f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b275:	eb 0e                	jmp    c001b285 <Sys::write(regs*)+0x30>
c001b277:	83 ec 0c             	sub    esp,0xc
c001b27a:	50                   	push   eax
c001b27b:	e8 4b 67 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b280:	83 c4 10             	add    esp,0x10
c001b283:	89 c1                	mov    ecx,eax
c001b285:	83 c8 ff             	or     eax,0xffffffff
c001b288:	85 c9                	test   ecx,ecx
c001b28a:	89 c2                	mov    edx,eax
c001b28c:	74 28                	je     c001b2b6 <Sys::write(regs*)+0x61>
c001b28e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b296:	31 ff                	xor    edi,edi
c001b298:	83 ec 0c             	sub    esp,0xc
c001b29b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b29d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b2a1:	52                   	push   edx
c001b2a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2a5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b2a8:	57                   	push   edi
c001b2a9:	56                   	push   esi
c001b2aa:	51                   	push   ecx
c001b2ab:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b2ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b2b2:	83 c4 20             	add    esp,0x20
c001b2b5:	99                   	cdq    
c001b2b6:	83 c4 10             	add    esp,0x10
c001b2b9:	5b                   	pop    ebx
c001b2ba:	5e                   	pop    esi
c001b2bb:	5f                   	pop    edi
c001b2bc:	c3                   	ret    

c001b2bd <Sys::wsbe(regs*)>:
c001b2bd:	57                   	push   edi
c001b2be:	b9 0b 00 00 00       	mov    ecx,0xb
c001b2c3:	56                   	push   esi
c001b2c4:	be 78 ba 02 c0       	mov    esi,0xc002ba78
c001b2c9:	53                   	push   ebx
c001b2ca:	83 ec 30             	sub    esp,0x30
c001b2cd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b2d1:	fc                   	cld    
c001b2d2:	83 ec 0c             	sub    esp,0xc
c001b2d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b2d7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b2db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2e3:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b2e9:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2eb:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b2ee:	57                   	push   edi
c001b2ef:	e8 a0 54 fe ff       	call   c0000794 <strlen>
c001b2f4:	5a                   	pop    edx
c001b2f5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b2f9:	52                   	push   edx
c001b2fa:	31 d2                	xor    edx,edx
c001b2fc:	57                   	push   edi
c001b2fd:	52                   	push   edx
c001b2fe:	50                   	push   eax
c001b2ff:	56                   	push   esi
c001b300:	ff d3                	call   ebx
c001b302:	83 c4 14             	add    esp,0x14
c001b305:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b309:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b30c:	e8 80 31 00 00       	call   c001e491 <terminateTask(int)>
c001b311:	83 c4 40             	add    esp,0x40
c001b314:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b319:	5b                   	pop    ebx
c001b31a:	31 d2                	xor    edx,edx
c001b31c:	5e                   	pop    esi
c001b31d:	5f                   	pop    edi
c001b31e:	c3                   	ret    

c001b31f <Sys::yield(regs*)>:
c001b31f:	57                   	push   edi
c001b320:	56                   	push   esi
c001b321:	53                   	push   ebx
c001b322:	e8 27 27 00 00       	call   c001da4e <lockScheduler()>
c001b327:	e8 5e 2a 00 00       	call   c001dd8a <schedule()>
c001b32c:	e8 1f 27 00 00       	call   c001da50 <unlockScheduler()>
c001b331:	8b 35 30 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e730
c001b337:	8b 3d 34 e7 02 c0    	mov    edi,DWORD PTR ds:0xc002e734
c001b33d:	89 f0                	mov    eax,esi
c001b33f:	89 fb                	mov    ebx,edi
c001b341:	89 f1                	mov    ecx,esi
c001b343:	c1 e0 07             	shl    eax,0x7
c001b346:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b34a:	25 80 30 0f 00       	and    eax,0xf3080
c001b34f:	c1 eb 17             	shr    ebx,0x17
c001b352:	31 c8                	xor    eax,ecx
c001b354:	89 da                	mov    edx,ebx
c001b356:	5b                   	pop    ebx
c001b357:	5e                   	pop    esi
c001b358:	5f                   	pop    edi
c001b359:	c3                   	ret    

c001b35a <sysCallSeekDir(regs*)>:
c001b35a:	31 c0                	xor    eax,eax
c001b35c:	31 d2                	xor    edx,edx
c001b35e:	c3                   	ret    

c001b35f <sysCallTellDir(regs*)>:
c001b35f:	31 c0                	xor    eax,eax
c001b361:	31 d2                	xor    edx,edx
c001b363:	c3                   	ret    

c001b364 <sysCallVerify(regs*)>:
c001b364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b368:	31 d2                	xor    edx,edx
c001b36a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b36d:	c3                   	ret    

c001b36e <sysFormatDisk(regs*)>:
c001b36e:	56                   	push   esi
c001b36f:	53                   	push   ebx
c001b370:	53                   	push   ebx
c001b371:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b375:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c001b37b:	eb 25                	jmp    c001b3a2 <sysFormatDisk(regs*)+0x34>
c001b37d:	83 ec 0c             	sub    esp,0xc
c001b380:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b383:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b385:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b388:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b38b:	50                   	push   eax
c001b38c:	ff 34 85 c0 e6 02 c0 	push   DWORD PTR [eax*4-0x3ffd1940]
c001b393:	53                   	push   ebx
c001b394:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b397:	83 c4 20             	add    esp,0x20
c001b39a:	83 f8 08             	cmp    eax,0x8
c001b39d:	75 12                	jne    c001b3b1 <sysFormatDisk(regs*)+0x43>
c001b39f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b3a2:	85 db                	test   ebx,ebx
c001b3a4:	75 d7                	jne    c001b37d <sysFormatDisk(regs*)+0xf>
c001b3a6:	59                   	pop    ecx
c001b3a7:	b8 03 00 00 00       	mov    eax,0x3
c001b3ac:	31 d2                	xor    edx,edx
c001b3ae:	5b                   	pop    ebx
c001b3af:	5e                   	pop    esi
c001b3b0:	c3                   	ret    
c001b3b1:	85 c0                	test   eax,eax
c001b3b3:	74 1b                	je     c001b3d0 <sysFormatDisk(regs*)+0x62>
c001b3b5:	83 f8 09             	cmp    eax,0x9
c001b3b8:	74 0b                	je     c001b3c5 <sysFormatDisk(regs*)+0x57>
c001b3ba:	59                   	pop    ecx
c001b3bb:	b8 02 00 00 00       	mov    eax,0x2
c001b3c0:	31 d2                	xor    edx,edx
c001b3c2:	5b                   	pop    ebx
c001b3c3:	5e                   	pop    esi
c001b3c4:	c3                   	ret    
c001b3c5:	59                   	pop    ecx
c001b3c6:	b8 01 00 00 00       	mov    eax,0x1
c001b3cb:	31 d2                	xor    edx,edx
c001b3cd:	5b                   	pop    ebx
c001b3ce:	5e                   	pop    esi
c001b3cf:	c3                   	ret    
c001b3d0:	59                   	pop    ecx
c001b3d1:	31 c0                	xor    eax,eax
c001b3d3:	31 d2                	xor    edx,edx
c001b3d5:	5b                   	pop    ebx
c001b3d6:	5e                   	pop    esi
c001b3d7:	c3                   	ret    

c001b3d8 <sysSetDiskVolumeLabel(regs*)>:
c001b3d8:	56                   	push   esi
c001b3d9:	53                   	push   ebx
c001b3da:	53                   	push   ebx
c001b3db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3df:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b3e2:	83 f8 19             	cmp    eax,0x19
c001b3e5:	77 29                	ja     c001b410 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b3e7:	8b 0c 85 c0 e6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1940]
c001b3ee:	85 c9                	test   ecx,ecx
c001b3f0:	74 1e                	je     c001b410 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b3f2:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b3f5:	85 d2                	test   edx,edx
c001b3f7:	74 17                	je     c001b410 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b3f9:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b3ff:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b401:	52                   	push   edx
c001b402:	50                   	push   eax
c001b403:	51                   	push   ecx
c001b404:	53                   	push   ebx
c001b405:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b408:	83 c4 10             	add    esp,0x10
c001b40b:	99                   	cdq    
c001b40c:	59                   	pop    ecx
c001b40d:	5b                   	pop    ebx
c001b40e:	5e                   	pop    esi
c001b40f:	c3                   	ret    
c001b410:	59                   	pop    ecx
c001b411:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b416:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b41b:	5b                   	pop    ebx
c001b41c:	5e                   	pop    esi
c001b41d:	c3                   	ret    

c001b41e <sysGetDiskVolumeLabel(regs*)>:
c001b41e:	57                   	push   edi
c001b41f:	56                   	push   esi
c001b420:	53                   	push   ebx
c001b421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b425:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b428:	83 fa 19             	cmp    edx,0x19
c001b42b:	77 34                	ja     c001b461 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b42d:	8b 0c 95 c0 e6 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1940]
c001b434:	85 c9                	test   ecx,ecx
c001b436:	74 29                	je     c001b461 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b438:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b43b:	85 db                	test   ebx,ebx
c001b43d:	74 22                	je     c001b461 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b43f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b442:	85 c0                	test   eax,eax
c001b444:	74 1b                	je     c001b461 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b446:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b44c:	83 ec 0c             	sub    esp,0xc
c001b44f:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b451:	50                   	push   eax
c001b452:	53                   	push   ebx
c001b453:	52                   	push   edx
c001b454:	51                   	push   ecx
c001b455:	56                   	push   esi
c001b456:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b459:	83 c4 20             	add    esp,0x20
c001b45c:	99                   	cdq    
c001b45d:	5b                   	pop    ebx
c001b45e:	5e                   	pop    esi
c001b45f:	5f                   	pop    edi
c001b460:	c3                   	ret    
c001b461:	5b                   	pop    ebx
c001b462:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b467:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b46c:	5e                   	pop    esi
c001b46d:	5f                   	pop    edi
c001b46e:	c3                   	ret    

c001b46f <sysShutdown(regs*)>:
c001b46f:	83 ec 0c             	sub    esp,0xc
c001b472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b476:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b479:	85 c0                	test   eax,eax
c001b47b:	74 18                	je     c001b495 <sysShutdown(regs*)+0x26>
c001b47d:	83 f8 01             	cmp    eax,0x1
c001b480:	74 38                	je     c001b4ba <sysShutdown(regs*)+0x4b>
c001b482:	83 f8 02             	cmp    eax,0x2
c001b485:	74 24                	je     c001b4ab <sysShutdown(regs*)+0x3c>
c001b487:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b48c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b491:	83 c4 0c             	add    esp,0xc
c001b494:	c3                   	ret    
c001b495:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c001b49a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b49c:	6a 00                	push   0x0
c001b49e:	6a 00                	push   0x0
c001b4a0:	6a 00                	push   0x0
c001b4a2:	50                   	push   eax
c001b4a3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b4a6:	83 c4 10             	add    esp,0x10
c001b4a9:	eb dc                	jmp    c001b487 <sysShutdown(regs*)+0x18>
c001b4ab:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c001b4b0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4b2:	6a 00                	push   0x0
c001b4b4:	6a 00                	push   0x0
c001b4b6:	6a 01                	push   0x1
c001b4b8:	eb e8                	jmp    c001b4a2 <sysShutdown(regs*)+0x33>
c001b4ba:	a1 60 07 03 c0       	mov    eax,ds:0xc0030760
c001b4bf:	85 c0                	test   eax,eax
c001b4c1:	74 02                	je     c001b4c5 <sysShutdown(regs*)+0x56>
c001b4c3:	ff d0                	call   eax
c001b4c5:	31 c0                	xor    eax,eax
c001b4c7:	31 d2                	xor    edx,edx
c001b4c9:	83 c4 0c             	add    esp,0xc
c001b4cc:	c3                   	ret    

c001b4cd <sysCallRealpath(regs*)>:
c001b4cd:	83 ec 0c             	sub    esp,0xc
c001b4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4d4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b4d7:	85 d2                	test   edx,edx
c001b4d9:	74 07                	je     c001b4e2 <sysCallRealpath(regs*)+0x15>
c001b4db:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b4de:	85 c0                	test   eax,eax
c001b4e0:	75 0b                	jne    c001b4ed <sysCallRealpath(regs*)+0x20>
c001b4e2:	b8 01 00 00 00       	mov    eax,0x1
c001b4e7:	31 d2                	xor    edx,edx
c001b4e9:	83 c4 0c             	add    esp,0xc
c001b4ec:	c3                   	ret    
c001b4ed:	51                   	push   ecx
c001b4ee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b4f4:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b4f7:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b4fd:	51                   	push   ecx
c001b4fe:	52                   	push   edx
c001b4ff:	50                   	push   eax
c001b500:	e8 57 7a ff ff       	call   c0012f5c <Fs::standardiseFiles(char*, char const*, char const*)>
c001b505:	83 c4 10             	add    esp,0x10
c001b508:	31 c0                	xor    eax,eax
c001b50a:	31 d2                	xor    edx,edx
c001b50c:	83 c4 0c             	add    esp,0xc
c001b50f:	c3                   	ret    

c001b510 <sysCallGetArgc(regs*)>:
c001b510:	83 ec 14             	sub    esp,0x14
c001b513:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b518:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b51b:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b521:	68 a4 ba 02 c0       	push   0xc002baa4
c001b526:	e8 83 76 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b52b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b530:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b533:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b539:	83 c4 1c             	add    esp,0x1c
c001b53c:	99                   	cdq    
c001b53d:	c3                   	ret    

c001b53e <sysCallReadDir(regs*)>:
c001b53e:	53                   	push   ebx
c001b53f:	83 ec 18             	sub    esp,0x18
c001b542:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b546:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b549:	83 f8 02             	cmp    eax,0x2
c001b54c:	76 53                	jbe    c001b5a1 <sysCallReadDir(regs*)+0x63>
c001b54e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b551:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b557:	77 4f                	ja     c001b5a8 <sysCallReadDir(regs*)+0x6a>
c001b559:	83 ec 0c             	sub    esp,0xc
c001b55c:	50                   	push   eax
c001b55d:	e8 69 64 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b562:	83 c4 10             	add    esp,0x10
c001b565:	85 c0                	test   eax,eax
c001b567:	74 50                	je     c001b5b9 <sysCallReadDir(regs*)+0x7b>
c001b569:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b571:	83 ec 0c             	sub    esp,0xc
c001b574:	8b 10                	mov    edx,DWORD PTR [eax]
c001b576:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b57a:	51                   	push   ecx
c001b57b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b57e:	6a 00                	push   0x0
c001b580:	68 10 01 00 00       	push   0x110
c001b585:	50                   	push   eax
c001b586:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b589:	83 c4 20             	add    esp,0x20
c001b58c:	85 c0                	test   eax,eax
c001b58e:	74 38                	je     c001b5c8 <sysCallReadDir(regs*)+0x8a>
c001b590:	83 f8 07             	cmp    eax,0x7
c001b593:	74 0c                	je     c001b5a1 <sysCallReadDir(regs*)+0x63>
c001b595:	b8 02 00 00 00       	mov    eax,0x2
c001b59a:	31 d2                	xor    edx,edx
c001b59c:	83 c4 18             	add    esp,0x18
c001b59f:	5b                   	pop    ebx
c001b5a0:	c3                   	ret    
c001b5a1:	b8 01 00 00 00       	mov    eax,0x1
c001b5a6:	eb f2                	jmp    c001b59a <sysCallReadDir(regs*)+0x5c>
c001b5a8:	83 ec 08             	sub    esp,0x8
c001b5ab:	52                   	push   edx
c001b5ac:	68 bc bb 02 c0       	push   0xc002bbbc
c001b5b1:	e8 f8 75 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b5b6:	83 c4 10             	add    esp,0x10
c001b5b9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5be:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5c3:	83 c4 18             	add    esp,0x18
c001b5c6:	5b                   	pop    ebx
c001b5c7:	c3                   	ret    
c001b5c8:	31 c0                	xor    eax,eax
c001b5ca:	eb ce                	jmp    c001b59a <sysCallReadDir(regs*)+0x5c>

c001b5cc <sysCallIsATTY(regs*)>:
c001b5cc:	83 ec 0c             	sub    esp,0xc
c001b5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b5d6:	83 f8 02             	cmp    eax,0x2
c001b5d9:	76 07                	jbe    c001b5e2 <sysCallIsATTY(regs*)+0x16>
c001b5db:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b5e0:	75 26                	jne    c001b608 <sysCallIsATTY(regs*)+0x3c>
c001b5e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5ea:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b5f0:	85 c0                	test   eax,eax
c001b5f2:	74 24                	je     c001b618 <sysCallIsATTY(regs*)+0x4c>
c001b5f4:	83 ec 0c             	sub    esp,0xc
c001b5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c001b5f9:	50                   	push   eax
c001b5fa:	ff 12                	call   DWORD PTR [edx]
c001b5fc:	31 d2                	xor    edx,edx
c001b5fe:	0f b6 c0             	movzx  eax,al
c001b601:	83 c4 10             	add    esp,0x10
c001b604:	83 c4 0c             	add    esp,0xc
c001b607:	c3                   	ret    
c001b608:	83 ec 0c             	sub    esp,0xc
c001b60b:	50                   	push   eax
c001b60c:	e8 ba 63 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b611:	83 c4 10             	add    esp,0x10
c001b614:	85 c0                	test   eax,eax
c001b616:	75 dc                	jne    c001b5f4 <sysCallIsATTY(regs*)+0x28>
c001b618:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b61d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b622:	83 c4 0c             	add    esp,0xc
c001b625:	c3                   	ret    

c001b626 <sysCallSeek(regs*)>:
c001b626:	53                   	push   ebx
c001b627:	83 ec 08             	sub    esp,0x8
c001b62a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b62e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b631:	83 f8 02             	cmp    eax,0x2
c001b634:	76 4a                	jbe    c001b680 <sysCallSeek(regs*)+0x5a>
c001b636:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b63b:	77 32                	ja     c001b66f <sysCallSeek(regs*)+0x49>
c001b63d:	83 ec 0c             	sub    esp,0xc
c001b640:	50                   	push   eax
c001b641:	e8 85 63 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b646:	83 c4 0c             	add    esp,0xc
c001b649:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b64c:	31 db                	xor    ebx,ebx
c001b64e:	53                   	push   ebx
c001b64f:	51                   	push   ecx
c001b650:	50                   	push   eax
c001b651:	e8 d2 7b ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001b656:	83 c4 10             	add    esp,0x10
c001b659:	85 c0                	test   eax,eax
c001b65b:	0f 95 c0             	setne  al
c001b65e:	31 d2                	xor    edx,edx
c001b660:	0f b6 c0             	movzx  eax,al
c001b663:	f7 d8                	neg    eax
c001b665:	83 d2 00             	adc    edx,0x0
c001b668:	83 c4 08             	add    esp,0x8
c001b66b:	f7 da                	neg    edx
c001b66d:	5b                   	pop    ebx
c001b66e:	c3                   	ret    
c001b66f:	83 ec 08             	sub    esp,0x8
c001b672:	50                   	push   eax
c001b673:	68 af ba 02 c0       	push   0xc002baaf
c001b678:	e8 31 75 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b67d:	83 c4 10             	add    esp,0x10
c001b680:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b685:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b68a:	83 c4 08             	add    esp,0x8
c001b68d:	5b                   	pop    ebx
c001b68e:	c3                   	ret    

c001b68f <sysCallTell(regs*)>:
c001b68f:	53                   	push   ebx
c001b690:	83 ec 08             	sub    esp,0x8
c001b693:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b697:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b69a:	83 f8 02             	cmp    eax,0x2
c001b69d:	76 5e                	jbe    c001b6fd <sysCallTell(regs*)+0x6e>
c001b69f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b6a4:	77 2d                	ja     c001b6d3 <sysCallTell(regs*)+0x44>
c001b6a6:	83 ec 0c             	sub    esp,0xc
c001b6a9:	50                   	push   eax
c001b6aa:	e8 1c 63 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b6af:	5a                   	pop    edx
c001b6b0:	59                   	pop    ecx
c001b6b1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b6b4:	50                   	push   eax
c001b6b5:	e8 c4 7b ff ff       	call   c001327e <File::tell(unsigned long long*)>
c001b6ba:	83 c4 10             	add    esp,0x10
c001b6bd:	85 c0                	test   eax,eax
c001b6bf:	0f 95 c0             	setne  al
c001b6c2:	31 d2                	xor    edx,edx
c001b6c4:	0f b6 c0             	movzx  eax,al
c001b6c7:	f7 d8                	neg    eax
c001b6c9:	83 d2 00             	adc    edx,0x0
c001b6cc:	83 c4 08             	add    esp,0x8
c001b6cf:	f7 da                	neg    edx
c001b6d1:	5b                   	pop    ebx
c001b6d2:	c3                   	ret    
c001b6d3:	83 ec 08             	sub    esp,0x8
c001b6d6:	50                   	push   eax
c001b6d7:	68 c9 ba 02 c0       	push   0xc002bac9
c001b6dc:	e8 cd 74 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b6e1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b6e4:	83 c4 10             	add    esp,0x10
c001b6e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b6ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b6f4:	31 d2                	xor    edx,edx
c001b6f6:	31 c0                	xor    eax,eax
c001b6f8:	83 c4 08             	add    esp,0x8
c001b6fb:	5b                   	pop    ebx
c001b6fc:	c3                   	ret    
c001b6fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b702:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b707:	83 c4 08             	add    esp,0x8
c001b70a:	5b                   	pop    ebx
c001b70b:	c3                   	ret    

c001b70c <sysCallSize(regs*)>:
c001b70c:	53                   	push   ebx
c001b70d:	83 ec 18             	sub    esp,0x18
c001b710:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b714:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b717:	83 f8 02             	cmp    eax,0x2
c001b71a:	76 64                	jbe    c001b780 <sysCallSize(regs*)+0x74>
c001b71c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b721:	77 33                	ja     c001b756 <sysCallSize(regs*)+0x4a>
c001b723:	83 ec 0c             	sub    esp,0xc
c001b726:	50                   	push   eax
c001b727:	e8 9f 62 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b72c:	83 c4 0c             	add    esp,0xc
c001b72f:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b733:	52                   	push   edx
c001b734:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b737:	50                   	push   eax
c001b738:	e8 d9 7c ff ff       	call   c0013416 <File::stat(unsigned long long*, bool*)>
c001b73d:	83 c4 10             	add    esp,0x10
c001b740:	85 c0                	test   eax,eax
c001b742:	0f 95 c0             	setne  al
c001b745:	31 d2                	xor    edx,edx
c001b747:	0f b6 c0             	movzx  eax,al
c001b74a:	f7 d8                	neg    eax
c001b74c:	83 d2 00             	adc    edx,0x0
c001b74f:	83 c4 18             	add    esp,0x18
c001b752:	f7 da                	neg    edx
c001b754:	5b                   	pop    ebx
c001b755:	c3                   	ret    
c001b756:	83 ec 08             	sub    esp,0x8
c001b759:	50                   	push   eax
c001b75a:	68 e3 ba 02 c0       	push   0xc002bae3
c001b75f:	e8 4a 74 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b764:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b767:	83 c4 10             	add    esp,0x10
c001b76a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b770:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b777:	31 d2                	xor    edx,edx
c001b779:	31 c0                	xor    eax,eax
c001b77b:	83 c4 18             	add    esp,0x18
c001b77e:	5b                   	pop    ebx
c001b77f:	c3                   	ret    
c001b780:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b785:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b78a:	83 c4 18             	add    esp,0x18
c001b78d:	5b                   	pop    ebx
c001b78e:	c3                   	ret    

c001b78f <sysCallSizeFromFilename(regs*)>:
c001b78f:	57                   	push   edi
c001b790:	56                   	push   esi
c001b791:	53                   	push   ebx
c001b792:	83 ec 20             	sub    esp,0x20
c001b795:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b799:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b79c:	83 fb 02             	cmp    ebx,0x2
c001b79f:	0f 86 99 00 00 00    	jbe    c001b83e <sysCallSizeFromFilename(regs*)+0xaf>
c001b7a5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b7ab:	77 65                	ja     c001b812 <sysCallSizeFromFilename(regs*)+0x83>
c001b7ad:	83 ec 0c             	sub    esp,0xc
c001b7b0:	68 14 01 00 00       	push   0x114
c001b7b5:	e8 86 40 ff ff       	call   c000f840 <malloc>
c001b7ba:	83 c4 0c             	add    esp,0xc
c001b7bd:	89 c6                	mov    esi,eax
c001b7bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7c4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7c7:	53                   	push   ebx
c001b7c8:	56                   	push   esi
c001b7c9:	e8 38 79 ff ff       	call   c0013106 <File::File(char const*, Process*)>
c001b7ce:	83 c4 0c             	add    esp,0xc
c001b7d1:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b7d5:	50                   	push   eax
c001b7d6:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b7d9:	56                   	push   esi
c001b7da:	e8 37 7c ff ff       	call   c0013416 <File::stat(unsigned long long*, bool*)>
c001b7df:	83 c4 10             	add    esp,0x10
c001b7e2:	85 f6                	test   esi,esi
c001b7e4:	74 14                	je     c001b7fa <sysCallSizeFromFilename(regs*)+0x6b>
c001b7e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7ea:	8b 16                	mov    edx,DWORD PTR [esi]
c001b7ec:	83 ec 0c             	sub    esp,0xc
c001b7ef:	56                   	push   esi
c001b7f0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7f3:	83 c4 10             	add    esp,0x10
c001b7f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7fa:	85 c0                	test   eax,eax
c001b7fc:	0f 95 c0             	setne  al
c001b7ff:	31 d2                	xor    edx,edx
c001b801:	0f b6 c0             	movzx  eax,al
c001b804:	f7 d8                	neg    eax
c001b806:	83 d2 00             	adc    edx,0x0
c001b809:	83 c4 20             	add    esp,0x20
c001b80c:	f7 da                	neg    edx
c001b80e:	5b                   	pop    ebx
c001b80f:	5e                   	pop    esi
c001b810:	5f                   	pop    edi
c001b811:	c3                   	ret    
c001b812:	83 ec 08             	sub    esp,0x8
c001b815:	53                   	push   ebx
c001b816:	68 e3 ba 02 c0       	push   0xc002bae3
c001b81b:	e8 8e 73 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b820:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b823:	83 c4 10             	add    esp,0x10
c001b826:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b82c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b833:	31 d2                	xor    edx,edx
c001b835:	83 c4 20             	add    esp,0x20
c001b838:	31 c0                	xor    eax,eax
c001b83a:	5b                   	pop    ebx
c001b83b:	5e                   	pop    esi
c001b83c:	5f                   	pop    edi
c001b83d:	c3                   	ret    
c001b83e:	83 c4 20             	add    esp,0x20
c001b841:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b846:	5b                   	pop    ebx
c001b847:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b84c:	5e                   	pop    esi
c001b84d:	5f                   	pop    edi
c001b84e:	c3                   	ret    

c001b84f <sysCallClose(regs*)>:
c001b84f:	53                   	push   ebx
c001b850:	83 ec 08             	sub    esp,0x8
c001b853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b857:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b85a:	83 f8 02             	cmp    eax,0x2
c001b85d:	76 50                	jbe    c001b8af <sysCallClose(regs*)+0x60>
c001b85f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b864:	74 58                	je     c001b8be <sysCallClose(regs*)+0x6f>
c001b866:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b86b:	74 60                	je     c001b8cd <sysCallClose(regs*)+0x7e>
c001b86d:	77 2f                	ja     c001b89e <sysCallClose(regs*)+0x4f>
c001b86f:	83 ec 0c             	sub    esp,0xc
c001b872:	50                   	push   eax
c001b873:	e8 53 61 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b878:	89 c3                	mov    ebx,eax
c001b87a:	89 04 24             	mov    DWORD PTR [esp],eax
c001b87d:	e8 46 79 ff ff       	call   c00131c8 <File::close()>
c001b882:	83 c4 10             	add    esp,0x10
c001b885:	85 db                	test   ebx,ebx
c001b887:	74 0c                	je     c001b895 <sysCallClose(regs*)+0x46>
c001b889:	83 ec 0c             	sub    esp,0xc
c001b88c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b88e:	53                   	push   ebx
c001b88f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b892:	83 c4 10             	add    esp,0x10
c001b895:	31 c0                	xor    eax,eax
c001b897:	31 d2                	xor    edx,edx
c001b899:	83 c4 08             	add    esp,0x8
c001b89c:	5b                   	pop    ebx
c001b89d:	c3                   	ret    
c001b89e:	83 ec 08             	sub    esp,0x8
c001b8a1:	50                   	push   eax
c001b8a2:	68 e0 bb 02 c0       	push   0xc002bbe0
c001b8a7:	e8 02 73 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b8ac:	83 c4 10             	add    esp,0x10
c001b8af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8b9:	83 c4 08             	add    esp,0x8
c001b8bc:	5b                   	pop    ebx
c001b8bd:	c3                   	ret    
c001b8be:	83 ec 0c             	sub    esp,0xc
c001b8c1:	68 fe ba 02 c0       	push   0xc002bafe
c001b8c6:	e8 e3 72 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b8cb:	eb c5                	jmp    c001b892 <sysCallClose(regs*)+0x43>
c001b8cd:	83 ec 0c             	sub    esp,0xc
c001b8d0:	68 0c bb 02 c0       	push   0xc002bb0c
c001b8d5:	eb ef                	jmp    c001b8c6 <sysCallClose(regs*)+0x77>

c001b8d7 <sysCallOpenDir(regs*)>:
c001b8d7:	56                   	push   esi
c001b8d8:	53                   	push   ebx
c001b8d9:	53                   	push   ebx
c001b8da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8de:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b8e1:	85 f6                	test   esi,esi
c001b8e3:	74 59                	je     c001b93e <sysCallOpenDir(regs*)+0x67>
c001b8e5:	83 ec 0c             	sub    esp,0xc
c001b8e8:	68 14 01 00 00       	push   0x114
c001b8ed:	e8 4e 3f ff ff       	call   c000f840 <malloc>
c001b8f2:	83 c4 0c             	add    esp,0xc
c001b8f5:	89 c6                	mov    esi,eax
c001b8f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8fc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b8ff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b902:	56                   	push   esi
c001b903:	e8 aa 7c ff ff       	call   c00135b2 <Directory::Directory(char const*, Process*)>
c001b908:	83 c4 10             	add    esp,0x10
c001b90b:	85 f6                	test   esi,esi
c001b90d:	74 2f                	je     c001b93e <sysCallOpenDir(regs*)+0x67>
c001b90f:	83 ec 0c             	sub    esp,0xc
c001b912:	56                   	push   esi
c001b913:	e8 fe 7c ff ff       	call   c0013616 <Directory::open()>
c001b918:	83 c4 10             	add    esp,0x10
c001b91b:	85 c0                	test   eax,eax
c001b91d:	75 1f                	jne    c001b93e <sysCallOpenDir(regs*)+0x67>
c001b91f:	83 ec 0c             	sub    esp,0xc
c001b922:	56                   	push   esi
c001b923:	e8 ae 5d ff ff       	call   c00116d6 <UnixFile::getFileDescriptor()>
c001b928:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b92b:	83 c4 10             	add    esp,0x10
c001b92e:	89 02                	mov    DWORD PTR [edx],eax
c001b930:	c1 f8 1f             	sar    eax,0x1f
c001b933:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b936:	31 c0                	xor    eax,eax
c001b938:	59                   	pop    ecx
c001b939:	31 d2                	xor    edx,edx
c001b93b:	5b                   	pop    ebx
c001b93c:	5e                   	pop    esi
c001b93d:	c3                   	ret    
c001b93e:	59                   	pop    ecx
c001b93f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b944:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b949:	5b                   	pop    ebx
c001b94a:	5e                   	pop    esi
c001b94b:	c3                   	ret    

c001b94c <sysCallCloseDir(regs*)>:
c001b94c:	53                   	push   ebx
c001b94d:	83 ec 08             	sub    esp,0x8
c001b950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b954:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b957:	83 f8 02             	cmp    eax,0x2
c001b95a:	76 47                	jbe    c001b9a3 <sysCallCloseDir(regs*)+0x57>
c001b95c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b961:	77 2f                	ja     c001b992 <sysCallCloseDir(regs*)+0x46>
c001b963:	83 ec 0c             	sub    esp,0xc
c001b966:	50                   	push   eax
c001b967:	e8 5f 60 ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001b96c:	89 c3                	mov    ebx,eax
c001b96e:	89 04 24             	mov    DWORD PTR [esp],eax
c001b971:	e8 fc 7c ff ff       	call   c0013672 <Directory::close()>
c001b976:	83 c4 10             	add    esp,0x10
c001b979:	85 db                	test   ebx,ebx
c001b97b:	74 0c                	je     c001b989 <sysCallCloseDir(regs*)+0x3d>
c001b97d:	83 ec 0c             	sub    esp,0xc
c001b980:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b982:	53                   	push   ebx
c001b983:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b986:	83 c4 10             	add    esp,0x10
c001b989:	31 c0                	xor    eax,eax
c001b98b:	31 d2                	xor    edx,edx
c001b98d:	83 c4 08             	add    esp,0x8
c001b990:	5b                   	pop    ebx
c001b991:	c3                   	ret    
c001b992:	83 ec 08             	sub    esp,0x8
c001b995:	50                   	push   eax
c001b996:	68 08 bc 02 c0       	push   0xc002bc08
c001b99b:	e8 0e 72 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001b9a0:	83 c4 10             	add    esp,0x10
c001b9a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9ad:	83 c4 08             	add    esp,0x8
c001b9b0:	5b                   	pop    ebx
c001b9b1:	c3                   	ret    

c001b9b2 <sysCallMakeDir(regs*)>:
c001b9b2:	56                   	push   esi
c001b9b3:	53                   	push   ebx
c001b9b4:	83 ec 10             	sub    esp,0x10
c001b9b7:	68 14 01 00 00       	push   0x114
c001b9bc:	e8 7f 3e ff ff       	call   c000f840 <malloc>
c001b9c1:	83 c4 0c             	add    esp,0xc
c001b9c4:	89 c3                	mov    ebx,eax
c001b9c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9cb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9d2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b9d5:	53                   	push   ebx
c001b9d6:	e8 d7 7b ff ff       	call   c00135b2 <Directory::Directory(char const*, Process*)>
c001b9db:	83 c4 10             	add    esp,0x10
c001b9de:	85 db                	test   ebx,ebx
c001b9e0:	74 32                	je     c001ba14 <sysCallMakeDir(regs*)+0x62>
c001b9e2:	83 ec 0c             	sub    esp,0xc
c001b9e5:	53                   	push   ebx
c001b9e6:	e8 0b 7e ff ff       	call   c00137f6 <Directory::create()>
c001b9eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9ee:	89 c6                	mov    esi,eax
c001b9f0:	e8 7d 7c ff ff       	call   c0013672 <Directory::close()>
c001b9f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b9f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b9fd:	83 c4 10             	add    esp,0x10
c001ba00:	31 c0                	xor    eax,eax
c001ba02:	59                   	pop    ecx
c001ba03:	85 f6                	test   esi,esi
c001ba05:	5b                   	pop    ebx
c001ba06:	0f 95 c0             	setne  al
c001ba09:	5e                   	pop    esi
c001ba0a:	31 d2                	xor    edx,edx
c001ba0c:	f7 d8                	neg    eax
c001ba0e:	83 d2 00             	adc    edx,0x0
c001ba11:	f7 da                	neg    edx
c001ba13:	c3                   	ret    
c001ba14:	59                   	pop    ecx
c001ba15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba1f:	5b                   	pop    ebx
c001ba20:	5e                   	pop    esi
c001ba21:	c3                   	ret    

c001ba22 <sysCallWait(regs*)>:
c001ba22:	83 ec 10             	sub    esp,0x10
c001ba25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba29:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ba2c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ba2f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ba32:	e8 ce 24 00 00       	call   c001df05 <waitTask(int, int*, int)>
c001ba37:	83 c4 1c             	add    esp,0x1c
c001ba3a:	99                   	cdq    
c001ba3b:	c3                   	ret    

c001ba3c <sysCallNotImpl(regs*)>:
c001ba3c:	83 ec 18             	sub    esp,0x18
c001ba3f:	68 1a bb 02 c0       	push   0xc002bb1a
c001ba44:	e8 e0 e7 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001ba49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba4e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba53:	83 c4 1c             	add    esp,0x1c
c001ba56:	c3                   	ret    

c001ba57 <sysPanic(regs*)>:
c001ba57:	83 ec 18             	sub    esp,0x18
c001ba5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba5e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ba61:	e8 c3 e7 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001ba66:	c7 04 24 34 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb34
c001ba6d:	e8 b7 e7 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001ba72:	b8 01 00 00 00       	mov    eax,0x1
c001ba77:	31 d2                	xor    edx,edx
c001ba79:	83 c4 1c             	add    esp,0x1c
c001ba7c:	c3                   	ret    

c001ba7d <sysCallRmdir(regs*)>:
c001ba7d:	56                   	push   esi
c001ba7e:	53                   	push   ebx
c001ba7f:	83 ec 20             	sub    esp,0x20
c001ba82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ba86:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba89:	68 14 01 00 00       	push   0x114
c001ba8e:	e8 ad 3d ff ff       	call   c000f840 <malloc>
c001ba93:	83 c4 0c             	add    esp,0xc
c001ba96:	89 c3                	mov    ebx,eax
c001ba98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba9d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001baa0:	56                   	push   esi
c001baa1:	53                   	push   ebx
c001baa2:	e8 5f 76 ff ff       	call   c0013106 <File::File(char const*, Process*)>
c001baa7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001baaa:	e8 33 78 ff ff       	call   c00132e2 <File::unlink()>
c001baaf:	83 c4 10             	add    esp,0x10
c001bab2:	85 db                	test   ebx,ebx
c001bab4:	74 14                	je     c001baca <sysCallRmdir(regs*)+0x4d>
c001bab6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baba:	8b 13                	mov    edx,DWORD PTR [ebx]
c001babc:	83 ec 0c             	sub    esp,0xc
c001babf:	53                   	push   ebx
c001bac0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bac3:	83 c4 10             	add    esp,0x10
c001bac6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baca:	85 c0                	test   eax,eax
c001bacc:	0f 95 c0             	setne  al
c001bacf:	31 d2                	xor    edx,edx
c001bad1:	0f b6 c0             	movzx  eax,al
c001bad4:	f7 d8                	neg    eax
c001bad6:	83 d2 00             	adc    edx,0x0
c001bad9:	83 c4 14             	add    esp,0x14
c001badc:	f7 da                	neg    edx
c001bade:	5b                   	pop    ebx
c001badf:	5e                   	pop    esi
c001bae0:	c3                   	ret    

c001bae1 <sysCallUnlink(regs*)>:
c001bae1:	56                   	push   esi
c001bae2:	53                   	push   ebx
c001bae3:	83 ec 20             	sub    esp,0x20
c001bae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001baea:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001baed:	68 14 01 00 00       	push   0x114
c001baf2:	e8 49 3d ff ff       	call   c000f840 <malloc>
c001baf7:	83 c4 0c             	add    esp,0xc
c001bafa:	89 c3                	mov    ebx,eax
c001bafc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb01:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb04:	56                   	push   esi
c001bb05:	53                   	push   ebx
c001bb06:	e8 fb 75 ff ff       	call   c0013106 <File::File(char const*, Process*)>
c001bb0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb0e:	e8 cf 77 ff ff       	call   c00132e2 <File::unlink()>
c001bb13:	83 c4 10             	add    esp,0x10
c001bb16:	85 db                	test   ebx,ebx
c001bb18:	74 14                	je     c001bb2e <sysCallUnlink(regs*)+0x4d>
c001bb1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb1e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb20:	83 ec 0c             	sub    esp,0xc
c001bb23:	53                   	push   ebx
c001bb24:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb27:	83 c4 10             	add    esp,0x10
c001bb2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb2e:	85 c0                	test   eax,eax
c001bb30:	0f 95 c0             	setne  al
c001bb33:	31 d2                	xor    edx,edx
c001bb35:	0f b6 c0             	movzx  eax,al
c001bb38:	f7 d8                	neg    eax
c001bb3a:	83 d2 00             	adc    edx,0x0
c001bb3d:	83 c4 14             	add    esp,0x14
c001bb40:	f7 da                	neg    edx
c001bb42:	5b                   	pop    ebx
c001bb43:	5e                   	pop    esi
c001bb44:	c3                   	ret    

c001bb45 <sysCallGetArgv(regs*)>:
c001bb45:	83 ec 0c             	sub    esp,0xc
c001bb48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb4c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bb4f:	85 c0                	test   eax,eax
c001bb51:	78 2b                	js     c001bb7e <sysCallGetArgv(regs*)+0x39>
c001bb53:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bb59:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bb5c:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bb62:	7d 1a                	jge    c001bb7e <sysCallGetArgv(regs*)+0x39>
c001bb64:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bb6b:	85 c0                	test   eax,eax
c001bb6d:	74 17                	je     c001bb86 <sysCallGetArgv(regs*)+0x41>
c001bb6f:	83 ec 08             	sub    esp,0x8
c001bb72:	50                   	push   eax
c001bb73:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bb76:	e8 b9 4c fe ff       	call   c0000834 <strcpy>
c001bb7b:	83 c4 10             	add    esp,0x10
c001bb7e:	31 c0                	xor    eax,eax
c001bb80:	31 d2                	xor    edx,edx
c001bb82:	83 c4 0c             	add    esp,0xc
c001bb85:	c3                   	ret    
c001bb86:	b8 01 00 00 00       	mov    eax,0x1
c001bb8b:	31 d2                	xor    edx,edx
c001bb8d:	83 c4 0c             	add    esp,0xc
c001bb90:	c3                   	ret    

c001bb91 <sysCallTTYName(regs*)>:
c001bb91:	56                   	push   esi
c001bb92:	53                   	push   ebx
c001bb93:	53                   	push   ebx
c001bb94:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb98:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bb9b:	85 c0                	test   eax,eax
c001bb9d:	74 5f                	je     c001bbfe <sysCallTTYName(regs*)+0x6d>
c001bb9f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bba2:	83 f8 02             	cmp    eax,0x2
c001bba5:	77 3e                	ja     c001bbe5 <sysCallTTYName(regs*)+0x54>
c001bba7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbaf:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bbb5:	85 db                	test   ebx,ebx
c001bbb7:	74 45                	je     c001bbfe <sysCallTTYName(regs*)+0x6d>
c001bbb9:	83 ec 0c             	sub    esp,0xc
c001bbbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbbe:	53                   	push   ebx
c001bbbf:	ff 10                	call   DWORD PTR [eax]
c001bbc1:	83 c4 10             	add    esp,0x10
c001bbc4:	84 c0                	test   al,al
c001bbc6:	74 41                	je     c001bc09 <sysCallTTYName(regs*)+0x78>
c001bbc8:	83 ec 08             	sub    esp,0x8
c001bbcb:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bbd1:	53                   	push   ebx
c001bbd2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bbd5:	e8 5a 4c fe ff       	call   c0000834 <strcpy>
c001bbda:	83 c4 10             	add    esp,0x10
c001bbdd:	31 c0                	xor    eax,eax
c001bbdf:	59                   	pop    ecx
c001bbe0:	31 d2                	xor    edx,edx
c001bbe2:	5b                   	pop    ebx
c001bbe3:	5e                   	pop    esi
c001bbe4:	c3                   	ret    
c001bbe5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbea:	74 bb                	je     c001bba7 <sysCallTTYName(regs*)+0x16>
c001bbec:	83 ec 0c             	sub    esp,0xc
c001bbef:	50                   	push   eax
c001bbf0:	e8 d6 5d ff ff       	call   c00119cb <getFromFileDescriptor(int)>
c001bbf5:	83 c4 10             	add    esp,0x10
c001bbf8:	89 c3                	mov    ebx,eax
c001bbfa:	85 db                	test   ebx,ebx
c001bbfc:	75 bb                	jne    c001bbb9 <sysCallTTYName(regs*)+0x28>
c001bbfe:	59                   	pop    ecx
c001bbff:	b8 01 00 00 00       	mov    eax,0x1
c001bc04:	31 d2                	xor    edx,edx
c001bc06:	5b                   	pop    ebx
c001bc07:	5e                   	pop    esi
c001bc08:	c3                   	ret    
c001bc09:	59                   	pop    ecx
c001bc0a:	b8 02 00 00 00       	mov    eax,0x2
c001bc0f:	31 d2                	xor    edx,edx
c001bc11:	5b                   	pop    ebx
c001bc12:	5e                   	pop    esi
c001bc13:	c3                   	ret    

c001bc14 <sysCallUSleep(regs*)>:
c001bc14:	83 ec 14             	sub    esp,0x14
c001bc17:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bc1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bc20:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bc27:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bc2a:	01 ca                	add    edx,ecx
c001bc2c:	52                   	push   edx
c001bc2d:	50                   	push   eax
c001bc2e:	e8 6b 23 00 00       	call   c001df9e <nanoSleep(unsigned long long)>
c001bc33:	31 c0                	xor    eax,eax
c001bc35:	31 d2                	xor    edx,edx
c001bc37:	83 c4 1c             	add    esp,0x1c
c001bc3a:	c3                   	ret    

c001bc3b <sysCallSpawn(regs*)>:
c001bc3b:	56                   	push   esi
c001bc3c:	53                   	push   ebx
c001bc3d:	53                   	push   ebx
c001bc3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc42:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bc45:	85 f6                	test   esi,esi
c001bc47:	75 08                	jne    c001bc51 <sysCallSpawn(regs*)+0x16>
c001bc49:	59                   	pop    ecx
c001bc4a:	31 c0                	xor    eax,eax
c001bc4c:	31 d2                	xor    edx,edx
c001bc4e:	5b                   	pop    ebx
c001bc4f:	5e                   	pop    esi
c001bc50:	c3                   	ret    
c001bc51:	83 ec 0c             	sub    esp,0xc
c001bc54:	68 3f 07 00 00       	push   0x73f
c001bc59:	e8 e2 3b ff ff       	call   c000f840 <malloc>
c001bc5e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bc61:	89 c6                	mov    esi,eax
c001bc63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc68:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc6b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc6e:	56                   	push   esi
c001bc6f:	e8 2a 1a 00 00       	call   c001d69e <Process::Process(char const*, Process*, char**)>
c001bc74:	83 c4 20             	add    esp,0x20
c001bc77:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bc7e:	75 c9                	jne    c001bc49 <sysCallSpawn(regs*)+0xe>
c001bc80:	83 ec 0c             	sub    esp,0xc
c001bc83:	56                   	push   esi
c001bc84:	e8 db 1f 00 00       	call   c001dc64 <Process::createUserThread()>
c001bc89:	8b 06                	mov    eax,DWORD PTR [esi]
c001bc8b:	83 c4 10             	add    esp,0x10
c001bc8e:	99                   	cdq    
c001bc8f:	59                   	pop    ecx
c001bc90:	5b                   	pop    ebx
c001bc91:	5e                   	pop    esi
c001bc92:	c3                   	ret    

c001bc93 <sysCallGetEnv(regs*)>:
c001bc93:	55                   	push   ebp
c001bc94:	57                   	push   edi
c001bc95:	56                   	push   esi
c001bc96:	53                   	push   ebx
c001bc97:	83 ec 28             	sub    esp,0x28
c001bc9a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bc9e:	68 43 bb 02 c0       	push   0xc002bb43
c001bca3:	e8 06 6f ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001bca8:	5f                   	pop    edi
c001bca9:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bcac:	5d                   	pop    ebp
c001bcad:	53                   	push   ebx
c001bcae:	68 72 be 02 c0       	push   0xc002be72
c001bcb3:	e8 f6 6e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001bcb8:	58                   	pop    eax
c001bcb9:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bcbc:	5a                   	pop    edx
c001bcbd:	57                   	push   edi
c001bcbe:	68 4c bb 02 c0       	push   0xc002bb4c
c001bcc3:	e8 e6 6e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001bcc8:	59                   	pop    ecx
c001bcc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcd1:	e8 6f e4 ff ff       	call   c001a145 <Krnl::getProcessTotalEnvCount(Process*)>
c001bcd6:	5a                   	pop    edx
c001bcd7:	89 c5                	mov    ebp,eax
c001bcd9:	59                   	pop    ecx
c001bcda:	50                   	push   eax
c001bcdb:	68 56 bb 02 c0       	push   0xc002bb56
c001bce0:	e8 c9 6e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001bce5:	83 c4 10             	add    esp,0x10
c001bce8:	39 ef                	cmp    edi,ebp
c001bcea:	7c 15                	jl     c001bd01 <sysCallGetEnv(regs*)+0x6e>
c001bcec:	85 db                	test   ebx,ebx
c001bcee:	75 0c                	jne    c001bcfc <sysCallGetEnv(regs*)+0x69>
c001bcf0:	83 c4 1c             	add    esp,0x1c
c001bcf3:	31 c0                	xor    eax,eax
c001bcf5:	5b                   	pop    ebx
c001bcf6:	31 d2                	xor    edx,edx
c001bcf8:	5e                   	pop    esi
c001bcf9:	5f                   	pop    edi
c001bcfa:	5d                   	pop    ebp
c001bcfb:	c3                   	ret    
c001bcfc:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bcff:	eb ef                	jmp    c001bcf0 <sysCallGetEnv(regs*)+0x5d>
c001bd01:	83 ec 0c             	sub    esp,0xc
c001bd04:	68 62 bb 02 c0       	push   0xc002bb62
c001bd09:	e8 a0 6e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001bd0e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd12:	83 c4 0c             	add    esp,0xc
c001bd15:	57                   	push   edi
c001bd16:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bd1c:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bd1f:	50                   	push   eax
c001bd20:	e8 40 e4 ff ff       	call   c001a165 <Krnl::getProcessEnvPair(Process*, int)>
c001bd25:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bd29:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bd2d:	68 f1 be 02 c0       	push   0xc002bef1
c001bd32:	e8 77 6e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001bd37:	83 c4 10             	add    esp,0x10
c001bd3a:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bd3d:	85 f6                	test   esi,esi
c001bd3f:	75 47                	jne    c001bd88 <sysCallGetEnv(regs*)+0xf5>
c001bd41:	83 ec 0c             	sub    esp,0xc
c001bd44:	55                   	push   ebp
c001bd45:	e8 4a 4a fe ff       	call   c0000794 <strlen>
c001bd4a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd4d:	89 c3                	mov    ebx,eax
c001bd4f:	e8 40 4a fe ff       	call   c0000794 <strlen>
c001bd54:	5a                   	pop    edx
c001bd55:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bd59:	59                   	pop    ecx
c001bd5a:	50                   	push   eax
c001bd5b:	68 65 bb 02 c0       	push   0xc002bb65
c001bd60:	e8 49 6e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001bd65:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bd68:	e8 27 4a fe ff       	call   c0000794 <strlen>
c001bd6d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd70:	89 c3                	mov    ebx,eax
c001bd72:	e8 1d 4a fe ff       	call   c0000794 <strlen>
c001bd77:	83 c4 10             	add    esp,0x10
c001bd7a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bd7e:	83 c4 1c             	add    esp,0x1c
c001bd81:	31 d2                	xor    edx,edx
c001bd83:	5b                   	pop    ebx
c001bd84:	5e                   	pop    esi
c001bd85:	5f                   	pop    edi
c001bd86:	5d                   	pop    ebp
c001bd87:	c3                   	ret    
c001bd88:	83 ec 0c             	sub    esp,0xc
c001bd8b:	68 0b bf 02 c0       	push   0xc002bf0b
c001bd90:	e8 19 6e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001bd95:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bd98:	58                   	pop    eax
c001bd99:	5a                   	pop    edx
c001bd9a:	55                   	push   ebp
c001bd9b:	53                   	push   ebx
c001bd9c:	e8 93 4a fe ff       	call   c0000834 <strcpy>
c001bda1:	59                   	pop    ecx
c001bda2:	5e                   	pop    esi
c001bda3:	68 6f bb 02 c0       	push   0xc002bb6f
c001bda8:	53                   	push   ebx
c001bda9:	e8 c6 4b fe ff       	call   c0000974 <strcat>
c001bdae:	5d                   	pop    ebp
c001bdaf:	58                   	pop    eax
c001bdb0:	57                   	push   edi
c001bdb1:	53                   	push   ebx
c001bdb2:	e8 bd 4b fe ff       	call   c0000974 <strcat>
c001bdb7:	c7 04 24 25 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf25
c001bdbe:	e8 eb 6d ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001bdc3:	83 c4 10             	add    esp,0x10
c001bdc6:	e9 25 ff ff ff       	jmp    c001bcf0 <sysCallGetEnv(regs*)+0x5d>

c001bdcb <sysAppSettings(regs*)>:
c001bdcb:	53                   	push   ebx
c001bdcc:	83 ec 08             	sub    esp,0x8
c001bdcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdd3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bdd6:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001bddc:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bde1:	66 3d c0 09          	cmp    ax,0x9c0
c001bde5:	75 2f                	jne    c001be16 <sysAppSettings(regs*)+0x4b>
c001bde7:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001bded:	83 e0 1f             	and    eax,0x1f
c001bdf0:	3c 01                	cmp    al,0x1
c001bdf2:	74 2e                	je     c001be22 <sysAppSettings(regs*)+0x57>
c001bdf4:	3c 07                	cmp    al,0x7
c001bdf6:	0f 84 bd 00 00 00    	je     c001beb9 <sysAppSettings(regs*)+0xee>
c001bdfc:	84 c0                	test   al,al
c001bdfe:	0f 84 dc 00 00 00    	je     c001bee0 <sysAppSettings(regs*)+0x115>
c001be04:	3c 08                	cmp    al,0x8
c001be06:	74 6d                	je     c001be75 <sysAppSettings(regs*)+0xaa>
c001be08:	0f b6 c0             	movzx  eax,al
c001be0b:	83 c4 08             	add    esp,0x8
c001be0e:	05 e8 03 00 00       	add    eax,0x3e8
c001be13:	5b                   	pop    ebx
c001be14:	99                   	cdq    
c001be15:	c3                   	ret    
c001be16:	b8 01 00 00 00       	mov    eax,0x1
c001be1b:	31 d2                	xor    edx,edx
c001be1d:	83 c4 08             	add    esp,0x8
c001be20:	5b                   	pop    ebx
c001be21:	c3                   	ret    
c001be22:	51                   	push   ecx
c001be23:	68 00 01 00 00       	push   0x100
c001be28:	6a 00                	push   0x0
c001be2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be32:	83 c0 0c             	add    eax,0xc
c001be35:	50                   	push   eax
c001be36:	e8 3d 49 fe ff       	call   c0000778 <memset>
c001be3b:	83 c4 0c             	add    esp,0xc
c001be3e:	68 ff 00 00 00       	push   0xff
c001be43:	53                   	push   ebx
c001be44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be49:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be4c:	83 c0 0c             	add    eax,0xc
c001be4f:	50                   	push   eax
c001be50:	e8 ef 48 fe ff       	call   c0000744 <memcpy>
c001be55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be5a:	5b                   	pop    ebx
c001be5b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be5e:	5a                   	pop    edx
c001be5f:	8d 50 0c             	lea    edx,[eax+0xc]
c001be62:	52                   	push   edx
c001be63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001be69:	e8 d8 4c ff ff       	call   c0010b46 <VgaText::setTitle(char*)>
c001be6e:	83 c4 10             	add    esp,0x10
c001be71:	31 c0                	xor    eax,eax
c001be73:	eb a6                	jmp    c001be1b <sysAppSettings(regs*)+0x50>
c001be75:	83 ec 08             	sub    esp,0x8
c001be78:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001be7e:	83 e0 0f             	and    eax,0xf
c001be81:	50                   	push   eax
c001be82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001be90:	e8 a1 4c ff ff       	call   c0010b36 <VgaText::setTitleColour(VgaColour)>
c001be95:	58                   	pop    eax
c001be96:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001be9c:	5a                   	pop    edx
c001be9d:	c1 e8 04             	shr    eax,0x4
c001bea0:	83 e0 0f             	and    eax,0xf
c001bea3:	50                   	push   eax
c001bea4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bea9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001beb2:	e8 6f 4c ff ff       	call   c0010b26 <VgaText::setTitleTextColour(VgaColour)>
c001beb7:	eb b5                	jmp    c001be6e <sysAppSettings(regs*)+0xa3>
c001beb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bebe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bec1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bec7:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001becd:	c0 e8 06             	shr    al,0x6
c001bed0:	83 e0 01             	and    eax,0x1
c001bed3:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001bed9:	31 c0                	xor    eax,eax
c001bedb:	e9 3b ff ff ff       	jmp    c001be1b <sysAppSettings(regs*)+0x50>
c001bee0:	b8 02 00 00 00       	mov    eax,0x2
c001bee5:	e9 31 ff ff ff       	jmp    c001be1b <sysAppSettings(regs*)+0x50>

c001beea <sysSetFatAttrib(regs*)>:
c001beea:	57                   	push   edi
c001beeb:	56                   	push   esi
c001beec:	53                   	push   ebx
c001beed:	83 ec 1c             	sub    esp,0x1c
c001bef0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bef4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bef7:	68 14 01 00 00       	push   0x114
c001befc:	e8 3f 39 ff ff       	call   c000f840 <malloc>
c001bf01:	83 c4 0c             	add    esp,0xc
c001bf04:	89 c3                	mov    ebx,eax
c001bf06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf0b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf0e:	57                   	push   edi
c001bf0f:	53                   	push   ebx
c001bf10:	e8 f1 71 ff ff       	call   c0013106 <File::File(char const*, Process*)>
c001bf15:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bf18:	83 c4 0c             	add    esp,0xc
c001bf1b:	0f b6 d4             	movzx  edx,ah
c001bf1e:	0f b6 c0             	movzx  eax,al
c001bf21:	52                   	push   edx
c001bf22:	50                   	push   eax
c001bf23:	53                   	push   ebx
c001bf24:	e8 53 74 ff ff       	call   c001337c <File::chfatattr(unsigned char, unsigned char)>
c001bf29:	83 c4 10             	add    esp,0x10
c001bf2c:	85 db                	test   ebx,ebx
c001bf2e:	74 14                	je     c001bf44 <sysSetFatAttrib(regs*)+0x5a>
c001bf30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf34:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf36:	83 ec 0c             	sub    esp,0xc
c001bf39:	53                   	push   ebx
c001bf3a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf3d:	83 c4 10             	add    esp,0x10
c001bf40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf44:	85 c0                	test   eax,eax
c001bf46:	0f 95 c0             	setne  al
c001bf49:	31 d2                	xor    edx,edx
c001bf4b:	0f b6 c0             	movzx  eax,al
c001bf4e:	f7 d8                	neg    eax
c001bf50:	83 d2 00             	adc    edx,0x0
c001bf53:	83 c4 10             	add    esp,0x10
c001bf56:	f7 da                	neg    edx
c001bf58:	5b                   	pop    ebx
c001bf59:	5e                   	pop    esi
c001bf5a:	5f                   	pop    edi
c001bf5b:	c3                   	ret    

c001bf5c <sysPipe(regs*)>:
c001bf5c:	57                   	push   edi
c001bf5d:	56                   	push   esi
c001bf5e:	53                   	push   ebx
c001bf5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf63:	83 ec 0c             	sub    esp,0xc
c001bf66:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bf69:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bf6c:	6a 20                	push   0x20
c001bf6e:	e8 cd 38 ff ff       	call   c000f840 <malloc>
c001bf73:	89 c3                	mov    ebx,eax
c001bf75:	58                   	pop    eax
c001bf76:	5a                   	pop    edx
c001bf77:	68 00 50 00 00       	push   0x5000
c001bf7c:	53                   	push   ebx
c001bf7d:	e8 f4 44 ff ff       	call   c0010476 <Pipe::Pipe(int)>
c001bf82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf85:	e8 4c 57 ff ff       	call   c00116d6 <UnixFile::getFileDescriptor()>
c001bf8a:	89 07                	mov    DWORD PTR [edi],eax
c001bf8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf8f:	e8 42 57 ff ff       	call   c00116d6 <UnixFile::getFileDescriptor()>
c001bf94:	83 c4 10             	add    esp,0x10
c001bf97:	89 06                	mov    DWORD PTR [esi],eax
c001bf99:	31 d2                	xor    edx,edx
c001bf9b:	5b                   	pop    ebx
c001bf9c:	31 c0                	xor    eax,eax
c001bf9e:	5e                   	pop    esi
c001bf9f:	5f                   	pop    edi
c001bfa0:	c3                   	ret    

c001bfa1 <sysGetUnixTime(regs*)>:
c001bfa1:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c001bfa6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bfac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bfb0:	e9 3b 7b ff ff       	jmp    c0013af0 <Clock::timeInSecondsLocal()>

c001bfb5 <string_ends_with(char const*, char const*)>:
c001bfb5:	57                   	push   edi
c001bfb6:	56                   	push   esi
c001bfb7:	53                   	push   ebx
c001bfb8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfbc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bfc0:	83 ec 0c             	sub    esp,0xc
c001bfc3:	53                   	push   ebx
c001bfc4:	e8 cb 47 fe ff       	call   c0000794 <strlen>
c001bfc9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bfcc:	89 c6                	mov    esi,eax
c001bfce:	e8 c1 47 fe ff       	call   c0000794 <strlen>
c001bfd3:	83 c4 10             	add    esp,0x10
c001bfd6:	39 c6                	cmp    esi,eax
c001bfd8:	7d 06                	jge    c001bfe0 <string_ends_with(char const*, char const*)+0x2b>
c001bfda:	5b                   	pop    ebx
c001bfdb:	31 c0                	xor    eax,eax
c001bfdd:	5e                   	pop    esi
c001bfde:	5f                   	pop    edi
c001bfdf:	c3                   	ret    
c001bfe0:	83 ec 08             	sub    esp,0x8
c001bfe3:	29 c6                	sub    esi,eax
c001bfe5:	57                   	push   edi
c001bfe6:	01 f3                	add    ebx,esi
c001bfe8:	53                   	push   ebx
c001bfe9:	e8 d2 48 fe ff       	call   c00008c0 <strcmp>
c001bfee:	83 c4 10             	add    esp,0x10
c001bff1:	85 c0                	test   eax,eax
c001bff3:	5b                   	pop    ebx
c001bff4:	0f 94 c0             	sete   al
c001bff7:	5e                   	pop    esi
c001bff8:	0f b6 c0             	movzx  eax,al
c001bffb:	5f                   	pop    edi
c001bffc:	c3                   	ret    

c001bffd <sysCallOpen(regs*)>:
c001bffd:	56                   	push   esi
c001bffe:	53                   	push   ebx
c001bfff:	81 ec 04 01 00 00    	sub    esp,0x104
c001c005:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c00c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c00f:	85 c9                	test   ecx,ecx
c001c011:	0f 84 b3 00 00 00    	je     c001c0ca <sysCallOpen(regs*)+0xcd>
c001c017:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c01a:	85 c0                	test   eax,eax
c001c01c:	0f 84 a8 00 00 00    	je     c001c0ca <sysCallOpen(regs*)+0xcd>
c001c022:	52                   	push   edx
c001c023:	68 71 bb 02 c0       	push   0xc002bb71
c001c028:	50                   	push   eax
c001c029:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c02d:	56                   	push   esi
c001c02e:	e8 29 6f ff ff       	call   c0012f5c <Fs::standardiseFiles(char*, char const*, char const*)>
c001c033:	89 34 24             	mov    DWORD PTR [esp],esi
c001c036:	e8 59 47 fe ff       	call   c0000794 <strlen>
c001c03b:	83 c4 10             	add    esp,0x10
c001c03e:	48                   	dec    eax
c001c03f:	74 1d                	je     c001c05e <sysCallOpen(regs*)+0x61>
c001c041:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c044:	eb 0f                	jmp    c001c055 <sysCallOpen(regs*)+0x58>
c001c046:	80 fa 3a             	cmp    dl,0x3a
c001c049:	74 0f                	je     c001c05a <sysCallOpen(regs*)+0x5d>
c001c04b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c04f:	48                   	dec    eax
c001c050:	74 0c                	je     c001c05e <sysCallOpen(regs*)+0x61>
c001c052:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c055:	80 fa 2e             	cmp    dl,0x2e
c001c058:	75 ec                	jne    c001c046 <sysCallOpen(regs*)+0x49>
c001c05a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c05e:	83 ec 08             	sub    esp,0x8
c001c061:	68 75 bb 02 c0       	push   0xc002bb75
c001c066:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c069:	e8 47 ff ff ff       	call   c001bfb5 <string_ends_with(char const*, char const*)>
c001c06e:	83 c4 10             	add    esp,0x10
c001c071:	85 c0                	test   eax,eax
c001c073:	75 17                	jne    c001c08c <sysCallOpen(regs*)+0x8f>
c001c075:	83 ec 08             	sub    esp,0x8
c001c078:	68 96 bb 02 c0       	push   0xc002bb96
c001c07d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c080:	e8 30 ff ff ff       	call   c001bfb5 <string_ends_with(char const*, char const*)>
c001c085:	83 c4 10             	add    esp,0x10
c001c088:	85 c0                	test   eax,eax
c001c08a:	74 51                	je     c001c0dd <sysCallOpen(regs*)+0xe0>
c001c08c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c08f:	83 ec 08             	sub    esp,0x8
c001c092:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c098:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c09f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c0a2:	ff 30                	push   DWORD PTR [eax]
c001c0a4:	68 7a bb 02 c0       	push   0xc002bb7a
c001c0a9:	e8 00 6b ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001c0ae:	c7 04 24 89 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb89
c001c0b5:	e8 f4 6a ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001c0ba:	83 c4 10             	add    esp,0x10
c001c0bd:	81 c4 04 01 00 00    	add    esp,0x104
c001c0c3:	31 c0                	xor    eax,eax
c001c0c5:	31 d2                	xor    edx,edx
c001c0c7:	5b                   	pop    ebx
c001c0c8:	5e                   	pop    esi
c001c0c9:	c3                   	ret    
c001c0ca:	81 c4 04 01 00 00    	add    esp,0x104
c001c0d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0da:	5b                   	pop    ebx
c001c0db:	5e                   	pop    esi
c001c0dc:	c3                   	ret    
c001c0dd:	83 ec 08             	sub    esp,0x8
c001c0e0:	68 76 bb 02 c0       	push   0xc002bb76
c001c0e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0e8:	e8 d3 47 fe ff       	call   c00008c0 <strcmp>
c001c0ed:	83 c4 10             	add    esp,0x10
c001c0f0:	85 c0                	test   eax,eax
c001c0f2:	74 98                	je     c001c08c <sysCallOpen(regs*)+0x8f>
c001c0f4:	83 ec 08             	sub    esp,0x8
c001c0f7:	68 75 bb 02 c0       	push   0xc002bb75
c001c0fc:	56                   	push   esi
c001c0fd:	e8 b3 fe ff ff       	call   c001bfb5 <string_ends_with(char const*, char const*)>
c001c102:	83 c4 10             	add    esp,0x10
c001c105:	85 c0                	test   eax,eax
c001c107:	75 83                	jne    c001c08c <sysCallOpen(regs*)+0x8f>
c001c109:	83 ec 08             	sub    esp,0x8
c001c10c:	68 9b bb 02 c0       	push   0xc002bb9b
c001c111:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c114:	e8 9c fe ff ff       	call   c001bfb5 <string_ends_with(char const*, char const*)>
c001c119:	83 c4 10             	add    esp,0x10
c001c11c:	85 c0                	test   eax,eax
c001c11e:	0f 85 d9 00 00 00    	jne    c001c1fd <sysCallOpen(regs*)+0x200>
c001c124:	83 ec 08             	sub    esp,0x8
c001c127:	68 a0 bb 02 c0       	push   0xc002bba0
c001c12c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c12f:	e8 81 fe ff ff       	call   c001bfb5 <string_ends_with(char const*, char const*)>
c001c134:	83 c4 10             	add    esp,0x10
c001c137:	85 c0                	test   eax,eax
c001c139:	0f 85 be 00 00 00    	jne    c001c1fd <sysCallOpen(regs*)+0x200>
c001c13f:	83 ec 08             	sub    esp,0x8
c001c142:	68 9c bb 02 c0       	push   0xc002bb9c
c001c147:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c14a:	e8 71 47 fe ff       	call   c00008c0 <strcmp>
c001c14f:	83 c4 10             	add    esp,0x10
c001c152:	85 c0                	test   eax,eax
c001c154:	0f 84 a3 00 00 00    	je     c001c1fd <sysCallOpen(regs*)+0x200>
c001c15a:	83 ec 08             	sub    esp,0x8
c001c15d:	68 9b bb 02 c0       	push   0xc002bb9b
c001c162:	56                   	push   esi
c001c163:	e8 4d fe ff ff       	call   c001bfb5 <string_ends_with(char const*, char const*)>
c001c168:	83 c4 10             	add    esp,0x10
c001c16b:	85 c0                	test   eax,eax
c001c16d:	0f 85 8a 00 00 00    	jne    c001c1fd <sysCallOpen(regs*)+0x200>
c001c173:	83 ec 0c             	sub    esp,0xc
c001c176:	68 14 01 00 00       	push   0x114
c001c17b:	e8 c0 36 ff ff       	call   c000f840 <malloc>
c001c180:	83 c4 0c             	add    esp,0xc
c001c183:	89 c6                	mov    esi,eax
c001c185:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c18a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c18d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c190:	56                   	push   esi
c001c191:	e8 70 6f ff ff       	call   c0013106 <File::File(char const*, Process*)>
c001c196:	83 c4 10             	add    esp,0x10
c001c199:	85 f6                	test   esi,esi
c001c19b:	0f 84 29 ff ff ff    	je     c001c0ca <sysCallOpen(regs*)+0xcd>
c001c1a1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c1a4:	0f b6 c2             	movzx  eax,dl
c001c1a7:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c1aa:	89 d0                	mov    eax,edx
c001c1ac:	83 e0 01             	and    eax,0x1
c001c1af:	f6 c2 02             	test   dl,0x2
c001c1b2:	74 03                	je     c001c1b7 <sysCallOpen(regs*)+0x1ba>
c001c1b4:	83 c8 02             	or     eax,0x2
c001c1b7:	f6 c2 04             	test   dl,0x4
c001c1ba:	74 03                	je     c001c1bf <sysCallOpen(regs*)+0x1c2>
c001c1bc:	83 c8 04             	or     eax,0x4
c001c1bf:	f6 c2 08             	test   dl,0x8
c001c1c2:	74 03                	je     c001c1c7 <sysCallOpen(regs*)+0x1ca>
c001c1c4:	83 c8 0a             	or     eax,0xa
c001c1c7:	83 e2 10             	and    edx,0x10
c001c1ca:	74 03                	je     c001c1cf <sysCallOpen(regs*)+0x1d2>
c001c1cc:	83 c8 12             	or     eax,0x12
c001c1cf:	83 ec 08             	sub    esp,0x8
c001c1d2:	50                   	push   eax
c001c1d3:	56                   	push   esi
c001c1d4:	e8 91 6f ff ff       	call   c001316a <File::open(FileOpenMode)>
c001c1d9:	83 c4 10             	add    esp,0x10
c001c1dc:	85 c0                	test   eax,eax
c001c1de:	0f 85 e6 fe ff ff    	jne    c001c0ca <sysCallOpen(regs*)+0xcd>
c001c1e4:	83 ec 0c             	sub    esp,0xc
c001c1e7:	56                   	push   esi
c001c1e8:	e8 e9 54 ff ff       	call   c00116d6 <UnixFile::getFileDescriptor()>
c001c1ed:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c1f0:	89 02                	mov    DWORD PTR [edx],eax
c001c1f2:	c1 f8 1f             	sar    eax,0x1f
c001c1f5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c1f8:	e9 bd fe ff ff       	jmp    c001c0ba <sysCallOpen(regs*)+0xbd>
c001c1fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c200:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c206:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c20d:	e9 ab fe ff ff       	jmp    c001c0bd <sysCallOpen(regs*)+0xc0>

c001c212 <Sys::loadSyscalls()>:
c001c212:	c7 05 20 0c 03 c0 1f b3 01 c0 	mov    DWORD PTR ds:0xc0030c20,0xc001b31f
c001c21c:	c7 05 24 0c 03 c0 be ae 01 c0 	mov    DWORD PTR ds:0xc0030c24,0xc001aebe
c001c226:	c7 05 28 0c 03 c0 28 b0 01 c0 	mov    DWORD PTR ds:0xc0030c28,0xc001b028
c001c230:	c7 05 2c 0c 03 c0 55 b2 01 c0 	mov    DWORD PTR ds:0xc0030c2c,0xc001b255
c001c23a:	c7 05 30 0c 03 c0 c0 af 01 c0 	mov    DWORD PTR ds:0xc0030c30,0xc001afc0
c001c244:	c7 05 34 0c 03 c0 f5 ae 01 c0 	mov    DWORD PTR ds:0xc0030c34,0xc001aef5
c001c24e:	c7 05 38 0c 03 c0 d6 ae 01 c0 	mov    DWORD PTR ds:0xc0030c38,0xc001aed6
c001c258:	c7 05 3c 0c 03 c0 c7 b0 01 c0 	mov    DWORD PTR ds:0xc0030c3c,0xc001b0c7
c001c262:	c7 05 44 0c 03 c0 4f b8 01 c0 	mov    DWORD PTR ds:0xc0030c44,0xc001b84f
c001c26c:	c7 05 40 0c 03 c0 fd bf 01 c0 	mov    DWORD PTR ds:0xc0030c40,0xc001bffd
c001c276:	c7 05 48 0c 03 c0 d7 b8 01 c0 	mov    DWORD PTR ds:0xc0030c48,0xc001b8d7
c001c280:	c7 05 4c 0c 03 c0 3e b5 01 c0 	mov    DWORD PTR ds:0xc0030c4c,0xc001b53e
c001c28a:	c7 05 50 0c 03 c0 5a b3 01 c0 	mov    DWORD PTR ds:0xc0030c50,0xc001b35a
c001c294:	c7 05 54 0c 03 c0 5f b3 01 c0 	mov    DWORD PTR ds:0xc0030c54,0xc001b35f
c001c29e:	c7 05 58 0c 03 c0 b2 b9 01 c0 	mov    DWORD PTR ds:0xc0030c58,0xc001b9b2
c001c2a8:	c7 05 5c 0c 03 c0 4c b9 01 c0 	mov    DWORD PTR ds:0xc0030c5c,0xc001b94c
c001c2b2:	c7 05 60 0c 03 c0 26 b6 01 c0 	mov    DWORD PTR ds:0xc0030c60,0xc001b626
c001c2bc:	c7 05 64 0c 03 c0 8f b6 01 c0 	mov    DWORD PTR ds:0xc0030c64,0xc001b68f
c001c2c6:	c7 05 68 0c 03 c0 0c b7 01 c0 	mov    DWORD PTR ds:0xc0030c68,0xc001b70c
c001c2d0:	c7 05 6c 0c 03 c0 64 b3 01 c0 	mov    DWORD PTR ds:0xc0030c6c,0xc001b364
c001c2da:	c7 05 70 0c 03 c0 22 ba 01 c0 	mov    DWORD PTR ds:0xc0030c70,0xc001ba22
c001c2e4:	c7 05 74 0c 03 c0 3c ba 01 c0 	mov    DWORD PTR ds:0xc0030c74,0xc001ba3c
c001c2ee:	c7 05 78 0c 03 c0 3c ba 01 c0 	mov    DWORD PTR ds:0xc0030c78,0xc001ba3c
c001c2f8:	c7 05 7c 0c 03 c0 7d ba 01 c0 	mov    DWORD PTR ds:0xc0030c7c,0xc001ba7d
c001c302:	c7 05 80 0c 03 c0 e1 ba 01 c0 	mov    DWORD PTR ds:0xc0030c80,0xc001bae1
c001c30c:	c7 05 84 0c 03 c0 10 b5 01 c0 	mov    DWORD PTR ds:0xc0030c84,0xc001b510
c001c316:	c7 05 88 0c 03 c0 45 bb 01 c0 	mov    DWORD PTR ds:0xc0030c88,0xc001bb45
c001c320:	c7 05 8c 0c 03 c0 cd b4 01 c0 	mov    DWORD PTR ds:0xc0030c8c,0xc001b4cd
c001c32a:	c7 05 90 0c 03 c0 91 bb 01 c0 	mov    DWORD PTR ds:0xc0030c90,0xc001bb91
c001c334:	c7 05 94 0c 03 c0 cc b5 01 c0 	mov    DWORD PTR ds:0xc0030c94,0xc001b5cc
c001c33e:	c7 05 98 0c 03 c0 14 bc 01 c0 	mov    DWORD PTR ds:0xc0030c98,0xc001bc14
c001c348:	c7 05 9c 0c 03 c0 8f b7 01 c0 	mov    DWORD PTR ds:0xc0030c9c,0xc001b78f
c001c352:	c7 05 a0 0c 03 c0 3b bc 01 c0 	mov    DWORD PTR ds:0xc0030ca0,0xc001bc3b
c001c35c:	c7 05 a4 0c 03 c0 93 bc 01 c0 	mov    DWORD PTR ds:0xc0030ca4,0xc001bc93
c001c366:	c7 05 a8 0c 03 c0 cb bd 01 c0 	mov    DWORD PTR ds:0xc0030ca8,0xc001bdcb
c001c370:	c7 05 ac 0c 03 c0 6e b3 01 c0 	mov    DWORD PTR ds:0xc0030cac,0xc001b36e
c001c37a:	c7 05 b0 0c 03 c0 d8 b3 01 c0 	mov    DWORD PTR ds:0xc0030cb0,0xc001b3d8
c001c384:	c7 05 b4 0c 03 c0 1e b4 01 c0 	mov    DWORD PTR ds:0xc0030cb4,0xc001b41e
c001c38e:	c7 05 b8 0c 03 c0 ea be 01 c0 	mov    DWORD PTR ds:0xc0030cb8,0xc001beea
c001c398:	c7 05 bc 0c 03 c0 57 ba 01 c0 	mov    DWORD PTR ds:0xc0030cbc,0xc001ba57
c001c3a2:	c7 05 c0 0c 03 c0 6f b4 01 c0 	mov    DWORD PTR ds:0xc0030cc0,0xc001b46f
c001c3ac:	c7 05 c4 0c 03 c0 5c bf 01 c0 	mov    DWORD PTR ds:0xc0030cc4,0xc001bf5c
c001c3b6:	c7 05 c8 0c 03 c0 a1 bf 01 c0 	mov    DWORD PTR ds:0xc0030cc8,0xc001bfa1
c001c3c0:	c7 05 cc 0c 03 c0 18 af 01 c0 	mov    DWORD PTR ds:0xc0030ccc,0xc001af18
c001c3ca:	c7 05 d0 0c 03 c0 e3 b0 01 c0 	mov    DWORD PTR ds:0xc0030cd0,0xc001b0e3
c001c3d4:	c7 05 d4 0c 03 c0 0b b2 01 c0 	mov    DWORD PTR ds:0xc0030cd4,0xc001b20b
c001c3de:	c7 05 d8 0c 03 c0 88 ae 01 c0 	mov    DWORD PTR ds:0xc0030cd8,0xc001ae88
c001c3e8:	c7 05 dc 0c 03 c0 bd b2 01 c0 	mov    DWORD PTR ds:0xc0030cdc,0xc001b2bd
c001c3f2:	c7 05 e0 0c 03 c0 01 af 01 c0 	mov    DWORD PTR ds:0xc0030ce0,0xc001af01
c001c3fc:	c3                   	ret    

c001c3fd <Sys::systemCall(regs*, void*)>:
c001c3fd:	53                   	push   ebx
c001c3fe:	83 ec 08             	sub    esp,0x8
c001c401:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c405:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c408:	83 f8 7f             	cmp    eax,0x7f
c001c40b:	77 16                	ja     c001c423 <Sys::systemCall(regs*, void*)+0x26>
c001c40d:	8b 14 85 20 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf3e0]
c001c414:	85 d2                	test   edx,edx
c001c416:	74 0b                	je     c001c423 <Sys::systemCall(regs*, void*)+0x26>
c001c418:	83 ec 0c             	sub    esp,0xc
c001c41b:	53                   	push   ebx
c001c41c:	ff d2                	call   edx
c001c41e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c421:	eb 0d                	jmp    c001c430 <Sys::systemCall(regs*, void*)+0x33>
c001c423:	52                   	push   edx
c001c424:	52                   	push   edx
c001c425:	50                   	push   eax
c001c426:	68 a5 bb 02 c0       	push   0xc002bba5
c001c42b:	e8 7e 67 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001c430:	83 c4 10             	add    esp,0x10
c001c433:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c438:	31 d2                	xor    edx,edx
c001c43a:	83 c4 08             	add    esp,0x8
c001c43d:	5b                   	pop    ebx
c001c43e:	c3                   	ret    

c001c43f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c43f:	55                   	push   ebp
c001c440:	57                   	push   edi
c001c441:	56                   	push   esi
c001c442:	53                   	push   ebx
c001c443:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c449:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c450:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c457:	85 c0                	test   eax,eax
c001c459:	0f 95 c1             	setne  cl
c001c45c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c464:	0f 94 c2             	sete   dl
c001c467:	84 d1                	test   cl,dl
c001c469:	74 23                	je     c001c48e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c46b:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c471:	74 1b                	je     c001c48e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c473:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c479:	89 da                	mov    edx,ebx
c001c47b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c481:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c487:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c48e:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c495:	05 ff 0f 00 00       	add    eax,0xfff
c001c49a:	83 ec 0c             	sub    esp,0xc
c001c49d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c4a1:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c4a7:	c1 e8 0c             	shr    eax,0xc
c001c4aa:	89 ef                	mov    edi,ebp
c001c4ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4b0:	c1 ef 0c             	shr    edi,0xc
c001c4b3:	6a 01                	push   0x1
c001c4b5:	e8 67 56 ff ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c001c4ba:	89 c6                	mov    esi,eax
c001c4bc:	58                   	pop    eax
c001c4bd:	5a                   	pop    edx
c001c4be:	57                   	push   edi
c001c4bf:	68 2b bc 02 c0       	push   0xc002bc2b
c001c4c4:	e8 e5 66 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001c4c9:	59                   	pop    ecx
c001c4ca:	58                   	pop    eax
c001c4cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c4cf:	68 3d bc 02 c0       	push   0xc002bc3d
c001c4d4:	e8 d5 66 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001c4d9:	83 c4 10             	add    esp,0x10
c001c4dc:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c4e2:	0f 86 24 01 00 00    	jbe    c001c60c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c4e8:	c1 e7 0c             	shl    edi,0xc
c001c4eb:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c4ee:	89 df                	mov    edi,ebx
c001c4f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4f4:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c4fb:	01 dd                	add    ebp,ebx
c001c4fd:	29 fd                	sub    ebp,edi
c001c4ff:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c503:	0f 84 01 01 00 00    	je     c001c60a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c509:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c50f:	76 05                	jbe    c001c516 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c511:	bd 00 10 00 00       	mov    ebp,0x1000
c001c516:	83 ec 0c             	sub    esp,0xc
c001c519:	31 d2                	xor    edx,edx
c001c51b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c522:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c524:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c528:	50                   	push   eax
c001c529:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c52d:	50                   	push   eax
c001c52e:	52                   	push   edx
c001c52f:	55                   	push   ebp
c001c530:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c537:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c53a:	83 c4 20             	add    esp,0x20
c001c53d:	85 c0                	test   eax,eax
c001c53f:	74 0a                	je     c001c54b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c541:	53                   	push   ebx
c001c542:	53                   	push   ebx
c001c543:	50                   	push   eax
c001c544:	68 4f bc 02 c0       	push   0xc002bc4f
c001c549:	eb 0f                	jmp    c001c55a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c54b:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c54f:	74 20                	je     c001c571 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c551:	51                   	push   ecx
c001c552:	51                   	push   ecx
c001c553:	6a 00                	push   0x0
c001c555:	68 7a bc 02 c0       	push   0xc002bc7a
c001c55a:	e8 4f 66 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001c55f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c562:	e8 1e 59 ff ff       	call   c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c001c567:	83 c4 10             	add    esp,0x10
c001c56a:	31 c0                	xor    eax,eax
c001c56c:	e9 55 01 00 00       	jmp    c001c6c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c571:	e8 d8 14 00 00       	call   c001da4e <lockScheduler()>
c001c576:	e8 64 39 ff ff       	call   c000fedf <Phys::allocatePage()>
c001c57b:	6a 07                	push   0x7
c001c57d:	89 c5                	mov    ebp,eax
c001c57f:	56                   	push   esi
c001c580:	50                   	push   eax
c001c581:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c586:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c589:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c58f:	e8 58 5c ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c001c594:	83 c4 0c             	add    esp,0xc
c001c597:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c59e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5a4:	6a 00                	push   0x0
c001c5a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5ae:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5b4:	e8 9d 5a ff ff       	call   c0012056 <VAS::mapOtherVASIn(bool, VAS*)>
c001c5b9:	58                   	pop    eax
c001c5ba:	5a                   	pop    edx
c001c5bb:	68 07 0c 00 00       	push   0xc07
c001c5c0:	57                   	push   edi
c001c5c1:	81 c7 00 10 00 00    	add    edi,0x1000
c001c5c7:	55                   	push   ebp
c001c5c8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c5cf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5d5:	6a 00                	push   0x0
c001c5d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5df:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5e5:	e8 bc 5f ff ff       	call   c00125a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c5ea:	83 c4 1c             	add    esp,0x1c
c001c5ed:	68 00 10 00 00       	push   0x1000
c001c5f2:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c5f6:	50                   	push   eax
c001c5f7:	56                   	push   esi
c001c5f8:	e8 47 41 fe ff       	call   c0000744 <memcpy>
c001c5fd:	e8 4e 14 00 00       	call   c001da50 <unlockScheduler()>
c001c602:	83 c4 10             	add    esp,0x10
c001c605:	e9 ea fe ff ff       	jmp    c001c4f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c60a:	89 fb                	mov    ebx,edi
c001c60c:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c614:	0f 86 9e 00 00 00    	jbe    c001c6b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c61a:	e8 2f 14 00 00       	call   c001da4e <lockScheduler()>
c001c61f:	51                   	push   ecx
c001c620:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c627:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c62d:	6a 00                	push   0x0
c001c62f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c634:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c637:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c63d:	e8 14 5a ff ff       	call   c0012056 <VAS::mapOtherVASIn(bool, VAS*)>
c001c642:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c646:	c1 e7 0c             	shl    edi,0xc
c001c649:	01 df                	add    edi,ebx
c001c64b:	83 c4 10             	add    esp,0x10
c001c64e:	39 fb                	cmp    ebx,edi
c001c650:	74 61                	je     c001c6b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c652:	e8 88 38 ff ff       	call   c000fedf <Phys::allocatePage()>
c001c657:	6a 07                	push   0x7
c001c659:	89 c5                	mov    ebp,eax
c001c65b:	56                   	push   esi
c001c65c:	50                   	push   eax
c001c65d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c662:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c665:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c66b:	e8 7c 5b ff ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c001c670:	58                   	pop    eax
c001c671:	5a                   	pop    edx
c001c672:	68 07 0c 00 00       	push   0xc07
c001c677:	53                   	push   ebx
c001c678:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c67e:	55                   	push   ebp
c001c67f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c686:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c68c:	6a 00                	push   0x0
c001c68e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c693:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c696:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c69c:	e8 05 5f ff ff       	call   c00125a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c6a1:	83 c4 1c             	add    esp,0x1c
c001c6a4:	68 00 10 00 00       	push   0x1000
c001c6a9:	6a 00                	push   0x0
c001c6ab:	56                   	push   esi
c001c6ac:	e8 c7 40 fe ff       	call   c0000778 <memset>
c001c6b1:	eb 98                	jmp    c001c64b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c6b3:	e8 98 13 00 00       	call   c001da50 <unlockScheduler()>
c001c6b8:	83 ec 0c             	sub    esp,0xc
c001c6bb:	56                   	push   esi
c001c6bc:	e8 c4 57 ff ff       	call   c0011e85 <Virt::freeKernelVirtualPages(unsigned long)>
c001c6c1:	83 c4 10             	add    esp,0x10
c001c6c4:	b0 01                	mov    al,0x1
c001c6c6:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c6cc:	5b                   	pop    ebx
c001c6cd:	5e                   	pop    esi
c001c6ce:	5f                   	pop    edi
c001c6cf:	5d                   	pop    ebp
c001c6d0:	c3                   	ret    

c001c6d1 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c6d1:	55                   	push   ebp
c001c6d2:	57                   	push   edi
c001c6d3:	56                   	push   esi
c001c6d4:	53                   	push   ebx
c001c6d5:	83 ec 48             	sub    esp,0x48
c001c6d8:	68 14 01 00 00       	push   0x114
c001c6dd:	e8 5e 31 ff ff       	call   c000f840 <malloc>
c001c6e2:	83 c4 0c             	add    esp,0xc
c001c6e5:	89 c6                	mov    esi,eax
c001c6e7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c6eb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c6ef:	50                   	push   eax
c001c6f0:	e8 11 6a ff ff       	call   c0013106 <File::File(char const*, Process*)>
c001c6f5:	58                   	pop    eax
c001c6f6:	5a                   	pop    edx
c001c6f7:	6a 01                	push   0x1
c001c6f9:	56                   	push   esi
c001c6fa:	e8 6b 6a ff ff       	call   c001316a <File::open(FileOpenMode)>
c001c6ff:	83 c4 10             	add    esp,0x10
c001c702:	85 c0                	test   eax,eax
c001c704:	0f 85 47 01 00 00    	jne    c001c851 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c70a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c712:	83 ec 0c             	sub    esp,0xc
c001c715:	6a 34                	push   0x34
c001c717:	e8 24 31 ff ff       	call   c000f840 <malloc>
c001c71c:	89 c3                	mov    ebx,eax
c001c71e:	58                   	pop    eax
c001c71f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c721:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c725:	57                   	push   edi
c001c726:	53                   	push   ebx
c001c727:	6a 00                	push   0x0
c001c729:	6a 34                	push   0x34
c001c72b:	56                   	push   esi
c001c72c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c72f:	83 c4 20             	add    esp,0x20
c001c732:	85 c0                	test   eax,eax
c001c734:	0f 85 17 01 00 00    	jne    c001c851 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c73a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c740:	0f 85 0b 01 00 00    	jne    c001c851 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c746:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c749:	85 c0                	test   eax,eax
c001c74b:	0f 84 00 01 00 00    	je     c001c851 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c751:	31 d2                	xor    edx,edx
c001c753:	55                   	push   ebp
c001c754:	52                   	push   edx
c001c755:	50                   	push   eax
c001c756:	56                   	push   esi
c001c757:	e8 cc 6a ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001c75c:	83 c4 10             	add    esp,0x10
c001c75f:	85 c0                	test   eax,eax
c001c761:	0f 85 ea 00 00 00    	jne    c001c851 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c767:	83 ec 0c             	sub    esp,0xc
c001c76a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c76d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c771:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c775:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c779:	0f af c2             	imul   eax,edx
c001c77c:	50                   	push   eax
c001c77d:	e8 be 30 ff ff       	call   c000f840 <malloc>
c001c782:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c784:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c788:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c78b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c78f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c793:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c797:	0f af c2             	imul   eax,edx
c001c79a:	99                   	cdq    
c001c79b:	52                   	push   edx
c001c79c:	50                   	push   eax
c001c79d:	56                   	push   esi
c001c79e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7a1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c7a4:	83 c4 20             	add    esp,0x20
c001c7a7:	85 c0                	test   eax,eax
c001c7a9:	0f 84 a2 00 00 00    	je     c001c851 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7af:	31 d2                	xor    edx,edx
c001c7b1:	51                   	push   ecx
c001c7b2:	52                   	push   edx
c001c7b3:	50                   	push   eax
c001c7b4:	56                   	push   esi
c001c7b5:	e8 6e 6a ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001c7ba:	83 c4 10             	add    esp,0x10
c001c7bd:	85 c0                	test   eax,eax
c001c7bf:	0f 85 8c 00 00 00    	jne    c001c851 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7c5:	83 ec 0c             	sub    esp,0xc
c001c7c8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c7cc:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c7d0:	31 ed                	xor    ebp,ebp
c001c7d2:	0f af c2             	imul   eax,edx
c001c7d5:	50                   	push   eax
c001c7d6:	e8 65 30 ff ff       	call   c000f840 <malloc>
c001c7db:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c7dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7e8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c7ec:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c7f0:	0f af c2             	imul   eax,edx
c001c7f3:	99                   	cdq    
c001c7f4:	52                   	push   edx
c001c7f5:	50                   	push   eax
c001c7f6:	56                   	push   esi
c001c7f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7fa:	83 c4 20             	add    esp,0x20
c001c7fd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c805:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c809:	0f 86 80 00 00 00    	jbe    c001c88f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c80f:	0f b7 fd             	movzx  edi,bp
c001c812:	c1 e7 05             	shl    edi,0x5
c001c815:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c819:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c81c:	75 6b                	jne    c001c889 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c81e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c821:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c825:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c828:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c82c:	52                   	push   edx
c001c82d:	31 d2                	xor    edx,edx
c001c82f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c832:	52                   	push   edx
c001c833:	50                   	push   eax
c001c834:	56                   	push   esi
c001c835:	e8 ee 69 ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001c83a:	83 c4 10             	add    esp,0x10
c001c83d:	85 c0                	test   eax,eax
c001c83f:	74 17                	je     c001c858 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c841:	83 ec 0c             	sub    esp,0xc
c001c844:	68 a6 bc 02 c0       	push   0xc002bca6
c001c849:	e8 60 63 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001c84e:	83 c4 10             	add    esp,0x10
c001c851:	31 c0                	xor    eax,eax
c001c853:	e9 87 00 00 00       	jmp    c001c8df <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c858:	83 ec 0c             	sub    esp,0xc
c001c85b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c85e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c861:	50                   	push   eax
c001c862:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c866:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c86a:	56                   	push   esi
c001c86b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c86f:	e8 cb fb ff ff       	call   c001c43f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c874:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c878:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c87c:	83 c4 20             	add    esp,0x20
c001c87f:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c883:	73 04                	jae    c001c889 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c885:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c889:	45                   	inc    ebp
c001c88a:	e9 76 ff ff ff       	jmp    c001c805 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c88f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c893:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c897:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c89b:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c8a1:	83 ec 0c             	sub    esp,0xc
c001c8a4:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c8aa:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c8af:	05 00 10 00 00       	add    eax,0x1000
c001c8b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c8b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8bb:	e8 90 2f ff ff       	call   c000f850 <free>
c001c8c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8c3:	e8 88 2f ff ff       	call   c000f850 <free>
c001c8c8:	58                   	pop    eax
c001c8c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c8cd:	e8 7e 2f ff ff       	call   c000f850 <free>
c001c8d2:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8d5:	e8 ee 68 ff ff       	call   c00131c8 <File::close()>
c001c8da:	83 c4 10             	add    esp,0x10
c001c8dd:	b0 01                	mov    al,0x1
c001c8df:	83 c4 3c             	add    esp,0x3c
c001c8e2:	5b                   	pop    ebx
c001c8e3:	5e                   	pop    esi
c001c8e4:	5f                   	pop    edi
c001c8e5:	5d                   	pop    ebp
c001c8e6:	c3                   	ret    

c001c8e7 <Thr::runtimeReferenceHelper()>:
c001c8e7:	83 ec 18             	sub    esp,0x18
c001c8ea:	68 ae bc 02 c0       	push   0xc002bcae
c001c8ef:	e8 ba 62 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001c8f4:	fa                   	cli    
c001c8f5:	83 c4 10             	add    esp,0x10
c001c8f8:	eb fe                	jmp    c001c8f8 <Thr::runtimeReferenceHelper()+0x11>

c001c8fa <Thr::getAddressOfKernelSymbol(char const*)>:
c001c8fa:	57                   	push   edi
c001c8fb:	56                   	push   esi
c001c8fc:	53                   	push   ebx
c001c8fd:	31 db                	xor    ebx,ebx
c001c8ff:	39 1d c0 15 03 c0    	cmp    DWORD PTR ds:0xc00315c0,ebx
c001c905:	7e 3c                	jle    c001c943 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c907:	8b 34 9d 40 15 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffceac0]
c001c90e:	31 ff                	xor    edi,edi
c001c910:	39 3c 9d 40 14 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcebc0],edi
c001c917:	7e 27                	jle    c001c940 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c919:	50                   	push   eax
c001c91a:	50                   	push   eax
c001c91b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c91f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c921:	03 04 9d c0 14 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffceb40]
c001c928:	50                   	push   eax
c001c929:	e8 92 3f fe ff       	call   c00008c0 <strcmp>
c001c92e:	83 c4 10             	add    esp,0x10
c001c931:	85 c0                	test   eax,eax
c001c933:	75 05                	jne    c001c93a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c935:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c938:	eb 0b                	jmp    c001c945 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c93a:	83 c6 10             	add    esi,0x10
c001c93d:	47                   	inc    edi
c001c93e:	eb d0                	jmp    c001c910 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c940:	43                   	inc    ebx
c001c941:	eb bc                	jmp    c001c8ff <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c943:	31 c0                	xor    eax,eax
c001c945:	5b                   	pop    ebx
c001c946:	5e                   	pop    esi
c001c947:	5f                   	pop    edi
c001c948:	c3                   	ret    

c001c949 <Thr::loadKernelSymbolTable(char const*)>:
c001c949:	55                   	push   ebp
c001c94a:	57                   	push   edi
c001c94b:	56                   	push   esi
c001c94c:	53                   	push   ebx
c001c94d:	83 ec 68             	sub    esp,0x68
c001c950:	8b 35 14 16 03 c0    	mov    esi,DWORD PTR ds:0xc0031614
c001c956:	68 14 01 00 00       	push   0x114
c001c95b:	e8 e0 2e ff ff       	call   c000f840 <malloc>
c001c960:	83 c4 0c             	add    esp,0xc
c001c963:	89 c3                	mov    ebx,eax
c001c965:	56                   	push   esi
c001c966:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c96a:	50                   	push   eax
c001c96b:	e8 96 67 ff ff       	call   c0013106 <File::File(char const*, Process*)>
c001c970:	5e                   	pop    esi
c001c971:	5f                   	pop    edi
c001c972:	6a 01                	push   0x1
c001c974:	53                   	push   ebx
c001c975:	e8 f0 67 ff ff       	call   c001316a <File::open(FileOpenMode)>
c001c97a:	83 c4 10             	add    esp,0x10
c001c97d:	85 c0                	test   eax,eax
c001c97f:	74 0a                	je     c001c98b <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c981:	83 ec 0c             	sub    esp,0xc
c001c984:	68 d0 bc 02 c0       	push   0xc002bcd0
c001c989:	eb 34                	jmp    c001c9bf <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c98b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c993:	83 ec 0c             	sub    esp,0xc
c001c996:	6a 34                	push   0x34
c001c998:	e8 a3 2e ff ff       	call   c000f840 <malloc>
c001c99d:	59                   	pop    ecx
c001c99e:	89 c7                	mov    edi,eax
c001c9a0:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c9a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9a6:	56                   	push   esi
c001c9a7:	57                   	push   edi
c001c9a8:	6a 00                	push   0x0
c001c9aa:	6a 34                	push   0x34
c001c9ac:	53                   	push   ebx
c001c9ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9b0:	83 c4 20             	add    esp,0x20
c001c9b3:	85 c0                	test   eax,eax
c001c9b5:	74 17                	je     c001c9ce <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c9b7:	83 ec 0c             	sub    esp,0xc
c001c9ba:	68 e7 bc 02 c0       	push   0xc002bce7
c001c9bf:	e8 65 d8 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001c9c4:	83 c4 10             	add    esp,0x10
c001c9c7:	31 c0                	xor    eax,eax
c001c9c9:	e9 31 02 00 00       	jmp    c001cbff <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c9ce:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c9d4:	75 e1                	jne    c001c9b7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c9d6:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c9d9:	85 c0                	test   eax,eax
c001c9db:	74 da                	je     c001c9b7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c9dd:	52                   	push   edx
c001c9de:	31 d2                	xor    edx,edx
c001c9e0:	52                   	push   edx
c001c9e1:	50                   	push   eax
c001c9e2:	53                   	push   ebx
c001c9e3:	e8 40 68 ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001c9e8:	83 c4 10             	add    esp,0x10
c001c9eb:	85 c0                	test   eax,eax
c001c9ed:	75 c8                	jne    c001c9b7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c9ef:	83 ec 0c             	sub    esp,0xc
c001c9f2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c9f6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c9fa:	31 ed                	xor    ebp,ebp
c001c9fc:	0f af c2             	imul   eax,edx
c001c9ff:	50                   	push   eax
c001ca00:	e8 3b 2e ff ff       	call   c000f840 <malloc>
c001ca05:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ca07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca0b:	89 34 24             	mov    DWORD PTR [esp],esi
c001ca0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca12:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca16:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca1a:	0f af c2             	imul   eax,edx
c001ca1d:	99                   	cdq    
c001ca1e:	52                   	push   edx
c001ca1f:	50                   	push   eax
c001ca20:	53                   	push   ebx
c001ca21:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca24:	83 c4 20             	add    esp,0x20
c001ca27:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca2f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ca37:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ca47:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ca4b:	0f 86 aa 00 00 00    	jbe    c001cafb <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ca51:	0f b7 f5             	movzx  esi,bp
c001ca54:	6b f6 28             	imul   esi,esi,0x28
c001ca57:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca5b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca62:	50                   	push   eax
c001ca63:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca67:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ca6b:	8b 16                	mov    edx,DWORD PTR [esi]
c001ca6d:	6b c0 28             	imul   eax,eax,0x28
c001ca70:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ca74:	89 d0                	mov    eax,edx
c001ca76:	31 d2                	xor    edx,edx
c001ca78:	52                   	push   edx
c001ca79:	50                   	push   eax
c001ca7a:	53                   	push   ebx
c001ca7b:	e8 a8 67 ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001ca80:	83 c4 0c             	add    esp,0xc
c001ca83:	6a 20                	push   0x20
c001ca85:	6a 00                	push   0x0
c001ca87:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ca8b:	52                   	push   edx
c001ca8c:	e8 e7 3c fe ff       	call   c0000778 <memset>
c001ca91:	58                   	pop    eax
c001ca92:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca94:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ca98:	51                   	push   ecx
c001ca99:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ca9d:	52                   	push   edx
c001ca9e:	6a 00                	push   0x0
c001caa0:	6a 1f                	push   0x1f
c001caa2:	53                   	push   ebx
c001caa3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001caa6:	83 c4 18             	add    esp,0x18
c001caa9:	68 fe bc 02 c0       	push   0xc002bcfe
c001caae:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cab2:	52                   	push   edx
c001cab3:	e8 08 3e fe ff       	call   c00008c0 <strcmp>
c001cab8:	83 c4 10             	add    esp,0x10
c001cabb:	85 c0                	test   eax,eax
c001cabd:	75 0f                	jne    c001cace <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cabf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cac2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cac6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cace:	50                   	push   eax
c001cacf:	50                   	push   eax
c001cad0:	68 06 bd 02 c0       	push   0xc002bd06
c001cad5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cad9:	50                   	push   eax
c001cada:	e8 e1 3d fe ff       	call   c00008c0 <strcmp>
c001cadf:	83 c4 10             	add    esp,0x10
c001cae2:	85 c0                	test   eax,eax
c001cae4:	75 0f                	jne    c001caf5 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cae6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cae9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001caed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caf1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001caf5:	45                   	inc    ebp
c001caf6:	e9 4c ff ff ff       	jmp    c001ca47 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cafb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cb00:	75 10                	jne    c001cb12 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cb02:	83 ec 0c             	sub    esp,0xc
c001cb05:	68 0e bd 02 c0       	push   0xc002bd0e
c001cb0a:	e8 1a d7 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001cb0f:	83 c4 10             	add    esp,0x10
c001cb12:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cb17:	75 10                	jne    c001cb29 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cb19:	83 ec 0c             	sub    esp,0xc
c001cb1c:	68 0e bd 02 c0       	push   0xc002bd0e
c001cb21:	e8 03 d7 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001cb26:	83 c4 10             	add    esp,0x10
c001cb29:	31 d2                	xor    edx,edx
c001cb2b:	50                   	push   eax
c001cb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb30:	52                   	push   edx
c001cb31:	50                   	push   eax
c001cb32:	53                   	push   ebx
c001cb33:	e8 f0 66 ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001cb38:	5a                   	pop    edx
c001cb39:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb3d:	e8 fe 2c ff ff       	call   c000f840 <malloc>
c001cb42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb46:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb4a:	31 c9                	xor    ecx,ecx
c001cb4c:	5e                   	pop    esi
c001cb4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb4f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cb53:	55                   	push   ebp
c001cb54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb58:	51                   	push   ecx
c001cb59:	52                   	push   edx
c001cb5a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cb5e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cb62:	53                   	push   ebx
c001cb63:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb66:	83 c4 14             	add    esp,0x14
c001cb69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb6d:	e8 ce 2c ff ff       	call   c000f840 <malloc>
c001cb72:	89 c6                	mov    esi,eax
c001cb74:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb76:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cb79:	56                   	push   esi
c001cb7a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cb7e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cb82:	51                   	push   ecx
c001cb83:	52                   	push   edx
c001cb84:	53                   	push   ebx
c001cb85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb8c:	8b 15 c0 15 03 c0    	mov    edx,DWORD PTR ds:0xc00315c0
c001cb92:	83 c4 1c             	add    esp,0x1c
c001cb95:	c1 e8 04             	shr    eax,0x4
c001cb98:	89 04 95 40 14 03 c0 	mov    DWORD PTR [edx*4-0x3ffcebc0],eax
c001cb9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cba3:	31 d2                	xor    edx,edx
c001cba5:	52                   	push   edx
c001cba6:	50                   	push   eax
c001cba7:	53                   	push   ebx
c001cba8:	e8 7b 66 ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001cbad:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cbaf:	31 d2                	xor    edx,edx
c001cbb1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cbb4:	56                   	push   esi
c001cbb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbb9:	52                   	push   edx
c001cbba:	50                   	push   eax
c001cbbb:	53                   	push   ebx
c001cbbc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbbf:	83 c4 14             	add    esp,0x14
c001cbc2:	53                   	push   ebx
c001cbc3:	e8 00 66 ff ff       	call   c00131c8 <File::close()>
c001cbc8:	5d                   	pop    ebp
c001cbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cbcd:	e8 7e 2c ff ff       	call   c000f850 <free>
c001cbd2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbd5:	e8 76 2c ff ff       	call   c000f850 <free>
c001cbda:	a1 c0 15 03 c0       	mov    eax,ds:0xc00315c0
c001cbdf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cbe3:	8d 50 01             	lea    edx,[eax+0x1]
c001cbe6:	89 0c 85 40 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceac0],ecx
c001cbed:	89 34 85 c0 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb40],esi
c001cbf4:	89 15 c0 15 03 c0    	mov    DWORD PTR ds:0xc00315c0,edx
c001cbfa:	83 c4 10             	add    esp,0x10
c001cbfd:	b0 01                	mov    al,0x1
c001cbff:	83 c4 5c             	add    esp,0x5c
c001cc02:	5b                   	pop    ebx
c001cc03:	5e                   	pop    esi
c001cc04:	5f                   	pop    edi
c001cc05:	5d                   	pop    ebp
c001cc06:	c3                   	ret    

c001cc07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cc07:	55                   	push   ebp
c001cc08:	57                   	push   edi
c001cc09:	56                   	push   esi
c001cc0a:	53                   	push   ebx
c001cc0b:	81 ec 68 03 00 00    	sub    esp,0x368
c001cc11:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cc18:	8b 1d 14 16 03 c0    	mov    ebx,DWORD PTR ds:0xc0031614
c001cc1e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cc22:	68 14 01 00 00       	push   0x114
c001cc27:	e8 14 2c ff ff       	call   c000f840 <malloc>
c001cc2c:	83 c4 0c             	add    esp,0xc
c001cc2f:	89 c5                	mov    ebp,eax
c001cc31:	53                   	push   ebx
c001cc32:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cc39:	50                   	push   eax
c001cc3a:	e8 c7 64 ff ff       	call   c0013106 <File::File(char const*, Process*)>
c001cc3f:	5e                   	pop    esi
c001cc40:	5f                   	pop    edi
c001cc41:	6a 01                	push   0x1
c001cc43:	55                   	push   ebp
c001cc44:	e8 21 65 ff ff       	call   c001316a <File::open(FileOpenMode)>
c001cc49:	83 c4 10             	add    esp,0x10
c001cc4c:	85 c0                	test   eax,eax
c001cc4e:	0f 85 8d 06 00 00    	jne    c001d2e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cc54:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cc5c:	83 ec 0c             	sub    esp,0xc
c001cc5f:	6a 34                	push   0x34
c001cc61:	e8 da 2b ff ff       	call   c000f840 <malloc>
c001cc66:	5b                   	pop    ebx
c001cc67:	89 c7                	mov    edi,eax
c001cc69:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cc6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc70:	53                   	push   ebx
c001cc71:	57                   	push   edi
c001cc72:	6a 00                	push   0x0
c001cc74:	6a 34                	push   0x34
c001cc76:	55                   	push   ebp
c001cc77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc7a:	83 c4 20             	add    esp,0x20
c001cc7d:	85 c0                	test   eax,eax
c001cc7f:	0f 85 5c 06 00 00    	jne    c001d2e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cc85:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cc8b:	0f 85 50 06 00 00    	jne    c001d2e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cc91:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cc94:	85 c0                	test   eax,eax
c001cc96:	0f 84 45 06 00 00    	je     c001d2e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cc9c:	31 d2                	xor    edx,edx
c001cc9e:	51                   	push   ecx
c001cc9f:	52                   	push   edx
c001cca0:	50                   	push   eax
c001cca1:	55                   	push   ebp
c001cca2:	e8 81 65 ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001cca7:	83 c4 10             	add    esp,0x10
c001ccaa:	85 c0                	test   eax,eax
c001ccac:	0f 85 2f 06 00 00    	jne    c001d2e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ccb2:	83 ec 0c             	sub    esp,0xc
c001ccb5:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ccb8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ccbc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ccc0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccc4:	0f af c2             	imul   eax,edx
c001ccc7:	50                   	push   eax
c001ccc8:	e8 73 2b ff ff       	call   c000f840 <malloc>
c001cccd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ccd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ccd4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccdb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ccdf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cce3:	0f af c2             	imul   eax,edx
c001cce6:	99                   	cdq    
c001cce7:	52                   	push   edx
c001cce8:	50                   	push   eax
c001cce9:	55                   	push   ebp
c001ccea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cced:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001ccf0:	83 c4 20             	add    esp,0x20
c001ccf3:	85 c0                	test   eax,eax
c001ccf5:	0f 84 e6 05 00 00    	je     c001d2e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ccfb:	52                   	push   edx
c001ccfc:	31 d2                	xor    edx,edx
c001ccfe:	52                   	push   edx
c001ccff:	50                   	push   eax
c001cd00:	55                   	push   ebp
c001cd01:	e8 22 65 ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001cd06:	83 c4 10             	add    esp,0x10
c001cd09:	85 c0                	test   eax,eax
c001cd0b:	0f 85 d0 05 00 00    	jne    c001d2e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cd11:	83 ec 0c             	sub    esp,0xc
c001cd14:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cd18:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cd1c:	31 f6                	xor    esi,esi
c001cd1e:	0f af c2             	imul   eax,edx
c001cd21:	50                   	push   eax
c001cd22:	e8 19 2b ff ff       	call   c000f840 <malloc>
c001cd27:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cd2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd35:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cd39:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cd3d:	0f af c2             	imul   eax,edx
c001cd40:	99                   	cdq    
c001cd41:	52                   	push   edx
c001cd42:	50                   	push   eax
c001cd43:	55                   	push   ebp
c001cd44:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd47:	83 c4 20             	add    esp,0x20
c001cd4a:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cd4e:	0f 86 8a 00 00 00    	jbe    c001cdde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cd54:	0f b7 de             	movzx  ebx,si
c001cd57:	c1 e3 05             	shl    ebx,0x5
c001cd5a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cd5e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cd61:	75 75                	jne    c001cdd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cd63:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cd66:	31 d2                	xor    edx,edx
c001cd68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cd6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd73:	50                   	push   eax
c001cd74:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cd77:	52                   	push   edx
c001cd78:	50                   	push   eax
c001cd79:	55                   	push   ebp
c001cd7a:	e8 a9 64 ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001cd7f:	83 c4 10             	add    esp,0x10
c001cd82:	85 c0                	test   eax,eax
c001cd84:	0f 85 57 05 00 00    	jne    c001d2e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cd8a:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cd91:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd94:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cd98:	31 d2                	xor    edx,edx
c001cd9a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cd9e:	83 ec 0c             	sub    esp,0xc
c001cda1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cda5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cdac:	50                   	push   eax
c001cdad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdb5:	52                   	push   edx
c001cdb6:	50                   	push   eax
c001cdb7:	55                   	push   ebp
c001cdb8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdbb:	83 c4 1c             	add    esp,0x1c
c001cdbe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cdc1:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cdc4:	50                   	push   eax
c001cdc5:	6a 00                	push   0x0
c001cdc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdcb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cdcf:	50                   	push   eax
c001cdd0:	e8 a3 39 fe ff       	call   c0000778 <memset>
c001cdd5:	83 c4 10             	add    esp,0x10
c001cdd8:	46                   	inc    esi
c001cdd9:	e9 6c ff ff ff       	jmp    c001cd4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cdde:	53                   	push   ebx
c001cddf:	31 db                	xor    ebx,ebx
c001cde1:	68 00 01 00 00       	push   0x100
c001cde6:	6a 00                	push   0x0
c001cde8:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cdec:	50                   	push   eax
c001cded:	e8 86 39 fe ff       	call   c0000778 <memset>
c001cdf2:	83 c4 0c             	add    esp,0xc
c001cdf5:	68 00 01 00 00       	push   0x100
c001cdfa:	6a 00                	push   0x0
c001cdfc:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ce03:	50                   	push   eax
c001ce04:	e8 6f 39 fe ff       	call   c0000778 <memset>
c001ce09:	83 c4 10             	add    esp,0x10
c001ce0c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce14:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ce1c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ce24:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce2c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ce34:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ce38:	0f 86 30 01 00 00    	jbe    c001cf6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ce3e:	0f b7 f3             	movzx  esi,bx
c001ce41:	6b f6 28             	imul   esi,esi,0x28
c001ce44:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce48:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce4f:	52                   	push   edx
c001ce50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce54:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ce58:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce5a:	6b d2 28             	imul   edx,edx,0x28
c001ce5d:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ce61:	31 d2                	xor    edx,edx
c001ce63:	52                   	push   edx
c001ce64:	50                   	push   eax
c001ce65:	55                   	push   ebp
c001ce66:	e8 bd 63 ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001ce6b:	83 c4 0c             	add    esp,0xc
c001ce6e:	6a 20                	push   0x20
c001ce70:	6a 00                	push   0x0
c001ce72:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ce79:	51                   	push   ecx
c001ce7a:	e8 f9 38 fe ff       	call   c0000778 <memset>
c001ce7f:	59                   	pop    ecx
c001ce80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce83:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ce87:	52                   	push   edx
c001ce88:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001ce8f:	51                   	push   ecx
c001ce90:	6a 00                	push   0x0
c001ce92:	6a 1f                	push   0x1f
c001ce94:	55                   	push   ebp
c001ce95:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce98:	83 c4 1c             	add    esp,0x1c
c001ce9b:	6a 09                	push   0x9
c001ce9d:	68 28 bd 02 c0       	push   0xc002bd28
c001cea2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cea9:	51                   	push   ecx
c001ceaa:	e8 91 37 fe ff       	call   c0000640 <memcmp>
c001ceaf:	83 c4 10             	add    esp,0x10
c001ceb2:	85 c0                	test   eax,eax
c001ceb4:	75 21                	jne    c001ced7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001ceb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cebe:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cec2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cec6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cec9:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ced0:	89 d0                	mov    eax,edx
c001ced2:	40                   	inc    eax
c001ced3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ced7:	50                   	push   eax
c001ced8:	6a 09                	push   0x9
c001ceda:	68 32 bd 02 c0       	push   0xc002bd32
c001cedf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cee6:	50                   	push   eax
c001cee7:	e8 54 37 fe ff       	call   c0000640 <memcmp>
c001ceec:	83 c4 10             	add    esp,0x10
c001ceef:	85 c0                	test   eax,eax
c001cef1:	75 21                	jne    c001cf14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cef3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cef7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cefb:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ceff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cf03:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf06:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cf0d:	89 d0                	mov    eax,edx
c001cf0f:	40                   	inc    eax
c001cf10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf14:	50                   	push   eax
c001cf15:	50                   	push   eax
c001cf16:	68 fe bc 02 c0       	push   0xc002bcfe
c001cf1b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf22:	50                   	push   eax
c001cf23:	e8 98 39 fe ff       	call   c00008c0 <strcmp>
c001cf28:	83 c4 10             	add    esp,0x10
c001cf2b:	85 c0                	test   eax,eax
c001cf2d:	75 0f                	jne    c001cf3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cf2f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf3e:	50                   	push   eax
c001cf3f:	50                   	push   eax
c001cf40:	68 06 bd 02 c0       	push   0xc002bd06
c001cf45:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf4c:	50                   	push   eax
c001cf4d:	e8 6e 39 fe ff       	call   c00008c0 <strcmp>
c001cf52:	83 c4 10             	add    esp,0x10
c001cf55:	85 c0                	test   eax,eax
c001cf57:	75 0f                	jne    c001cf68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cf59:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf5c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf64:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cf68:	43                   	inc    ebx
c001cf69:	e9 c6 fe ff ff       	jmp    c001ce34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cf6e:	31 d2                	xor    edx,edx
c001cf70:	50                   	push   eax
c001cf71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf75:	52                   	push   edx
c001cf76:	50                   	push   eax
c001cf77:	55                   	push   ebp
c001cf78:	e8 ab 62 ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001cf7d:	58                   	pop    eax
c001cf7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf82:	e8 b9 28 ff ff       	call   c000f840 <malloc>
c001cf87:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf8a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cf8e:	31 d2                	xor    edx,edx
c001cf90:	58                   	pop    eax
c001cf91:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cf95:	53                   	push   ebx
c001cf96:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cf9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf9e:	52                   	push   edx
c001cf9f:	50                   	push   eax
c001cfa0:	55                   	push   ebp
c001cfa1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfa4:	83 c4 14             	add    esp,0x14
c001cfa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cfab:	e8 90 28 ff ff       	call   c000f840 <malloc>
c001cfb0:	31 d2                	xor    edx,edx
c001cfb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cfb6:	83 c4 0c             	add    esp,0xc
c001cfb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfbd:	52                   	push   edx
c001cfbe:	50                   	push   eax
c001cfbf:	55                   	push   ebp
c001cfc0:	e8 63 62 ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001cfc5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfc8:	31 d2                	xor    edx,edx
c001cfca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfcd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cfd1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cfd5:	52                   	push   edx
c001cfd6:	50                   	push   eax
c001cfd7:	55                   	push   ebp
c001cfd8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfdb:	83 c4 20             	add    esp,0x20
c001cfde:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cfe6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cfea:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cfee:	0f 84 f1 02 00 00    	je     c001d2e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001cff4:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cffb:	31 d2                	xor    edx,edx
c001cffd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d001:	c1 e8 03             	shr    eax,0x3
c001d004:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d008:	51                   	push   ecx
c001d009:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d00d:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d011:	52                   	push   edx
c001d012:	50                   	push   eax
c001d013:	55                   	push   ebp
c001d014:	e8 0f 62 ff ff       	call   c0013228 <File::seek(unsigned long long)>
c001d019:	5b                   	pop    ebx
c001d01a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d01e:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d025:	e8 16 28 ff ff       	call   c000f840 <malloc>
c001d02a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d02d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d031:	31 d2                	xor    edx,edx
c001d033:	5e                   	pop    esi
c001d034:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d038:	50                   	push   eax
c001d039:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d03d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d041:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d048:	52                   	push   edx
c001d049:	50                   	push   eax
c001d04a:	55                   	push   ebp
c001d04b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d04e:	83 c4 20             	add    esp,0x20
c001d051:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d059:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d05d:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d061:	0f 8d 62 02 00 00    	jge    c001d2c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d067:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d06b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d06f:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d074:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d077:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d07b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d07f:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d083:	89 d8                	mov    eax,ebx
c001d085:	c1 e8 08             	shr    eax,0x8
c001d088:	89 c6                	mov    esi,eax
c001d08a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d08e:	c1 e6 04             	shl    esi,0x4
c001d091:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d095:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d098:	85 d2                	test   edx,edx
c001d09a:	0f 85 bf 00 00 00    	jne    c001d15f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d0a0:	83 ec 0c             	sub    esp,0xc
c001d0a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0a7:	03 06                	add    eax,DWORD PTR [esi]
c001d0a9:	50                   	push   eax
c001d0aa:	e8 4b f8 ff ff       	call   c001c8fa <Thr::getAddressOfKernelSymbol(char const*)>
c001d0af:	83 c4 10             	add    esp,0x10
c001d0b2:	89 c2                	mov    edx,eax
c001d0b4:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d0b9:	85 c0                	test   eax,eax
c001d0bb:	0f 85 9e 00 00 00    	jne    c001d15f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d0c1:	83 ec 0c             	sub    esp,0xc
c001d0c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0c8:	03 06                	add    eax,DWORD PTR [esi]
c001d0ca:	50                   	push   eax
c001d0cb:	e8 25 14 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d0d0:	83 c4 10             	add    esp,0x10
c001d0d3:	89 c2                	mov    edx,eax
c001d0d5:	85 c0                	test   eax,eax
c001d0d7:	0f 85 82 00 00 00    	jne    c001d15f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d0dd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d0e1:	50                   	push   eax
c001d0e2:	50                   	push   eax
c001d0e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0e7:	03 06                	add    eax,DWORD PTR [esi]
c001d0e9:	50                   	push   eax
c001d0ea:	68 3c bd 02 c0       	push   0xc002bd3c
c001d0ef:	e8 ba 5a ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001d0f4:	58                   	pop    eax
c001d0f5:	5a                   	pop    edx
c001d0f6:	68 56 bd 02 c0       	push   0xc002bd56
c001d0fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d102:	50                   	push   eax
c001d103:	e8 2c 37 fe ff       	call   c0000834 <strcpy>
c001d108:	59                   	pop    ecx
c001d109:	58                   	pop    eax
c001d10a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d10e:	03 06                	add    eax,DWORD PTR [esi]
c001d110:	50                   	push   eax
c001d111:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d118:	50                   	push   eax
c001d119:	e8 56 38 fe ff       	call   c0000974 <strcat>
c001d11e:	58                   	pop    eax
c001d11f:	5a                   	pop    edx
c001d120:	68 ec bd 02 c0       	push   0xc002bdec
c001d125:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d12c:	50                   	push   eax
c001d12d:	e8 42 38 fe ff       	call   c0000974 <strcat>
c001d132:	83 c4 10             	add    esp,0x10
c001d135:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d13a:	0f 84 43 01 00 00    	je     c001d283 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d140:	83 ec 0c             	sub    esp,0xc
c001d143:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d14a:	50                   	push   eax
c001d14b:	e8 d9 d0 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001d150:	83 c4 10             	add    esp,0x10
c001d153:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d157:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d15b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d15f:	80 fb 01             	cmp    bl,0x1
c001d162:	75 7d                	jne    c001d1e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d164:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d16b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d16f:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d173:	01 ce                	add    esi,ecx
c001d175:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d17b:	0f 94 c0             	sete   al
c001d17e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d184:	0f 94 c3             	sete   bl
c001d187:	09 c3                	or     ebx,eax
c001d189:	8b 06                	mov    eax,DWORD PTR [esi]
c001d18b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d190:	74 36                	je     c001d1c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d192:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d195:	84 db                	test   bl,bl
c001d197:	75 0a                	jne    c001d1a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d199:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d19d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d1a1:	76 37                	jbe    c001d1da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d1a3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d1a7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d1ac:	0f 84 d1 00 00 00    	je     c001d283 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d1b2:	83 ec 0c             	sub    esp,0xc
c001d1b5:	68 6d bd 02 c0       	push   0xc002bd6d
c001d1ba:	e8 6a d0 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001d1bf:	83 c4 10             	add    esp,0x10
c001d1c2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d1c6:	eb 12                	jmp    c001d1da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d1c8:	01 c1                	add    ecx,eax
c001d1ca:	84 db                	test   bl,bl
c001d1cc:	75 0c                	jne    c001d1da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d1ce:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d1d2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d1d6:	77 02                	ja     c001d1da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d1d8:	01 d1                	add    ecx,edx
c001d1da:	89 0e                	mov    DWORD PTR [esi],ecx
c001d1dc:	e9 df 00 00 00       	jmp    c001d2c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d1e1:	80 fb 02             	cmp    bl,0x2
c001d1e4:	75 71                	jne    c001d257 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d1e6:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d1ed:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d1f1:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d1f5:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d1fb:	74 15                	je     c001d212 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d1fd:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d203:	74 0d                	je     c001d212 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d205:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d209:	83 e8 04             	sub    eax,0x4
c001d20c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d210:	76 1f                	jbe    c001d231 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d212:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d216:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d21b:	74 66                	je     c001d283 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d21d:	83 ec 0c             	sub    esp,0xc
c001d220:	68 89 bd 02 c0       	push   0xc002bd89
c001d225:	e8 ff cf ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001d22a:	83 c4 10             	add    esp,0x10
c001d22d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d231:	8b 06                	mov    eax,DWORD PTR [esi]
c001d233:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d238:	74 13                	je     c001d24d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d23a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d23e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d245:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d249:	01 c8                	add    eax,ecx
c001d24b:	eb 04                	jmp    c001d251 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d24d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d251:	01 c2                	add    edx,eax
c001d253:	89 16                	mov    DWORD PTR [esi],edx
c001d255:	eb 69                	jmp    c001d2c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d257:	0f b6 db             	movzx  ebx,bl
c001d25a:	50                   	push   eax
c001d25b:	50                   	push   eax
c001d25c:	53                   	push   ebx
c001d25d:	68 a5 bd 02 c0       	push   0xc002bda5
c001d262:	e8 47 59 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001d267:	83 c4 10             	add    esp,0x10
c001d26a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d26f:	74 12                	je     c001d283 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d271:	83 ec 0c             	sub    esp,0xc
c001d274:	68 b0 bd 02 c0       	push   0xc002bdb0
c001d279:	e8 ab cf ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001d27e:	83 c4 10             	add    esp,0x10
c001d281:	eb 3d                	jmp    c001d2c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d283:	83 ec 0c             	sub    esp,0xc
c001d286:	55                   	push   ebp
c001d287:	e8 3c 5f ff ff       	call   c00131c8 <File::close()>
c001d28c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d28f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d292:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d295:	59                   	pop    ecx
c001d296:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d29a:	e8 b1 25 ff ff       	call   c000f850 <free>
c001d29f:	5b                   	pop    ebx
c001d2a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2a4:	e8 a7 25 ff ff       	call   c000f850 <free>
c001d2a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2ac:	e8 9f 25 ff ff       	call   c000f850 <free>
c001d2b1:	5e                   	pop    esi
c001d2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2b6:	e8 95 25 ff ff       	call   c000f850 <free>
c001d2bb:	83 c4 10             	add    esp,0x10
c001d2be:	eb 21                	jmp    c001d2e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d2c0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d2c4:	e9 90 fd ff ff       	jmp    c001d059 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d2c9:	83 ec 0c             	sub    esp,0xc
c001d2cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2d0:	e8 7b 25 ff ff       	call   c000f850 <free>
c001d2d5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d2d9:	83 c4 10             	add    esp,0x10
c001d2dc:	e9 05 fd ff ff       	jmp    c001cfe6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d2e1:	31 c0                	xor    eax,eax
c001d2e3:	eb 33                	jmp    c001d318 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d2e5:	83 ec 0c             	sub    esp,0xc
c001d2e8:	55                   	push   ebp
c001d2e9:	e8 da 5e ff ff       	call   c00131c8 <File::close()>
c001d2ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2f1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d2f7:	58                   	pop    eax
c001d2f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2fc:	e8 4f 25 ff ff       	call   c000f850 <free>
c001d301:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d304:	e8 47 25 ff ff       	call   c000f850 <free>
c001d309:	5a                   	pop    edx
c001d30a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d30e:	e8 3d 25 ff ff       	call   c000f850 <free>
c001d313:	83 c4 10             	add    esp,0x10
c001d316:	b0 01                	mov    al,0x1
c001d318:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d31e:	5b                   	pop    ebx
c001d31f:	5e                   	pop    esi
c001d320:	5f                   	pop    edi
c001d321:	5d                   	pop    ebp
c001d322:	c3                   	ret    

c001d323 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d323:	56                   	push   esi
c001d324:	31 d2                	xor    edx,edx
c001d326:	53                   	push   ebx
c001d327:	8b 1d 20 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030e20
c001d32d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d331:	39 d3                	cmp    ebx,edx
c001d333:	7e 1b                	jle    c001d350 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d335:	8b 04 95 40 10 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcefc0]
c001d33c:	39 c8                	cmp    eax,ecx
c001d33e:	77 0d                	ja     c001d34d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d340:	8b 34 95 40 0e 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf1c0]
c001d347:	01 c6                	add    esi,eax
c001d349:	39 ce                	cmp    esi,ecx
c001d34b:	77 05                	ja     c001d352 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d34d:	42                   	inc    edx
c001d34e:	eb e1                	jmp    c001d331 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d350:	31 c0                	xor    eax,eax
c001d352:	5b                   	pop    ebx
c001d353:	5e                   	pop    esi
c001d354:	c3                   	ret    

c001d355 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d355:	53                   	push   ebx
c001d356:	31 c0                	xor    eax,eax
c001d358:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d35c:	8b 1d 20 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030e20
c001d362:	39 c3                	cmp    ebx,eax
c001d364:	7e 22                	jle    c001d388 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d366:	8b 14 85 40 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefc0]
c001d36d:	39 ca                	cmp    edx,ecx
c001d36f:	77 14                	ja     c001d385 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d371:	03 14 85 40 0e 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf1c0]
c001d378:	39 ca                	cmp    edx,ecx
c001d37a:	76 09                	jbe    c001d385 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d37c:	8b 04 85 40 12 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcedc0]
c001d383:	eb 05                	jmp    c001d38a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d385:	40                   	inc    eax
c001d386:	eb da                	jmp    c001d362 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d388:	31 c0                	xor    eax,eax
c001d38a:	5b                   	pop    ebx
c001d38b:	c3                   	ret    

c001d38c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d38c:	53                   	push   ebx
c001d38d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d391:	53                   	push   ebx
c001d392:	e8 8c ff ff ff       	call   c001d323 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d397:	5a                   	pop    edx
c001d398:	31 d2                	xor    edx,edx
c001d39a:	85 c0                	test   eax,eax
c001d39c:	74 04                	je     c001d3a2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d39e:	89 da                	mov    edx,ebx
c001d3a0:	29 c2                	sub    edx,eax
c001d3a2:	89 d0                	mov    eax,edx
c001d3a4:	5b                   	pop    ebx
c001d3a5:	c3                   	ret    

c001d3a6 <Thr::loadDLL(char const*, bool)>:
c001d3a6:	55                   	push   ebp
c001d3a7:	57                   	push   edi
c001d3a8:	56                   	push   esi
c001d3a9:	53                   	push   ebx
c001d3aa:	81 ec 34 01 00 00    	sub    esp,0x134
c001d3b0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d3b7:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d3be:	56                   	push   esi
c001d3bf:	68 c8 bd 02 c0       	push   0xc002bdc8
c001d3c4:	e8 e5 57 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001d3c9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d3d0:	e8 6b 24 ff ff       	call   c000f840 <malloc>
c001d3d5:	83 c4 0c             	add    esp,0xc
c001d3d8:	89 c3                	mov    ebx,eax
c001d3da:	ff 35 14 16 03 c0    	push   DWORD PTR ds:0xc0031614
c001d3e0:	56                   	push   esi
c001d3e1:	50                   	push   eax
c001d3e2:	e8 1f 5d ff ff       	call   c0013106 <File::File(char const*, Process*)>
c001d3e7:	83 c4 10             	add    esp,0x10
c001d3ea:	85 db                	test   ebx,ebx
c001d3ec:	75 3c                	jne    c001d42a <Thr::loadDLL(char const*, bool)+0x84>
c001d3ee:	89 e8                	mov    eax,ebp
c001d3f0:	84 c0                	test   al,al
c001d3f2:	0f 84 d5 01 00 00    	je     c001d5cd <Thr::loadDLL(char const*, bool)+0x227>
c001d3f8:	57                   	push   edi
c001d3f9:	57                   	push   edi
c001d3fa:	68 d9 bd 02 c0       	push   0xc002bdd9
c001d3ff:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d403:	57                   	push   edi
c001d404:	e8 2b 34 fe ff       	call   c0000834 <strcpy>
c001d409:	58                   	pop    eax
c001d40a:	5a                   	pop    edx
c001d40b:	56                   	push   esi
c001d40c:	57                   	push   edi
c001d40d:	e8 62 35 fe ff       	call   c0000974 <strcat>
c001d412:	59                   	pop    ecx
c001d413:	58                   	pop    eax
c001d414:	68 ec bd 02 c0       	push   0xc002bdec
c001d419:	57                   	push   edi
c001d41a:	e8 55 35 fe ff       	call   c0000974 <strcat>
c001d41f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d422:	e8 02 ce ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001d427:	83 c4 10             	add    esp,0x10
c001d42a:	51                   	push   ecx
c001d42b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d42f:	50                   	push   eax
c001d430:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d434:	50                   	push   eax
c001d435:	53                   	push   ebx
c001d436:	e8 db 5f ff ff       	call   c0013416 <File::stat(unsigned long long*, bool*)>
c001d43b:	83 c4 10             	add    esp,0x10
c001d43e:	85 db                	test   ebx,ebx
c001d440:	74 0c                	je     c001d44e <Thr::loadDLL(char const*, bool)+0xa8>
c001d442:	83 ec 0c             	sub    esp,0xc
c001d445:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d447:	53                   	push   ebx
c001d448:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d44b:	83 c4 10             	add    esp,0x10
c001d44e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d453:	75 0a                	jne    c001d45f <Thr::loadDLL(char const*, bool)+0xb9>
c001d455:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d459:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d45d:	75 3c                	jne    c001d49b <Thr::loadDLL(char const*, bool)+0xf5>
c001d45f:	89 e8                	mov    eax,ebp
c001d461:	84 c0                	test   al,al
c001d463:	0f 84 4c 01 00 00    	je     c001d5b5 <Thr::loadDLL(char const*, bool)+0x20f>
c001d469:	51                   	push   ecx
c001d46a:	51                   	push   ecx
c001d46b:	68 d9 bd 02 c0       	push   0xc002bdd9
c001d470:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d474:	53                   	push   ebx
c001d475:	e8 ba 33 fe ff       	call   c0000834 <strcpy>
c001d47a:	5f                   	pop    edi
c001d47b:	58                   	pop    eax
c001d47c:	56                   	push   esi
c001d47d:	53                   	push   ebx
c001d47e:	e8 f1 34 fe ff       	call   c0000974 <strcat>
c001d483:	58                   	pop    eax
c001d484:	5a                   	pop    edx
c001d485:	68 ec bd 02 c0       	push   0xc002bdec
c001d48a:	53                   	push   ebx
c001d48b:	e8 e4 34 fe ff       	call   c0000974 <strcat>
c001d490:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d493:	e8 91 cd ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001d498:	83 c4 10             	add    esp,0x10
c001d49b:	e8 11 48 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c001d4a0:	51                   	push   ecx
c001d4a1:	6a 03                	push   0x3
c001d4a3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d4a7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d4ab:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d4b1:	83 d3 00             	adc    ebx,0x0
c001d4b4:	89 ca                	mov    edx,ecx
c001d4b6:	89 d1                	mov    ecx,edx
c001d4b8:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d4bc:	51                   	push   ecx
c001d4bd:	50                   	push   eax
c001d4be:	e8 29 4e ff ff       	call   c00122ec <VAS::allocatePages(int, int)>
c001d4c3:	5f                   	pop    edi
c001d4c4:	89 c3                	mov    ebx,eax
c001d4c6:	58                   	pop    eax
c001d4c7:	53                   	push   ebx
c001d4c8:	68 ee bd 02 c0       	push   0xc002bdee
c001d4cd:	e8 dc 56 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001d4d2:	89 34 24             	mov    DWORD PTR [esp],esi
c001d4d5:	e8 ba 32 fe ff       	call   c0000794 <strlen>
c001d4da:	8b 3d 20 0e 03 c0    	mov    edi,DWORD PTR ds:0xc0030e20
c001d4e0:	40                   	inc    eax
c001d4e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d4e4:	e8 57 23 ff ff       	call   c000f840 <malloc>
c001d4e9:	89 04 bd 40 12 03 c0 	mov    DWORD PTR [edi*4-0x3ffcedc0],eax
c001d4f0:	58                   	pop    eax
c001d4f1:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c001d4f6:	5a                   	pop    edx
c001d4f7:	56                   	push   esi
c001d4f8:	ff 34 85 40 12 03 c0 	push   DWORD PTR [eax*4-0x3ffcedc0]
c001d4ff:	e8 30 33 fe ff       	call   c0000834 <strcpy>
c001d504:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c001d509:	8d 50 01             	lea    edx,[eax+0x1]
c001d50c:	89 1c 85 40 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefc0],ebx
c001d513:	89 15 20 0e 03 c0    	mov    DWORD PTR ds:0xc0030e20,edx
c001d519:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d51d:	83 c4 0c             	add    esp,0xc
c001d520:	89 14 85 40 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1c0],edx
c001d527:	6a 01                	push   0x1
c001d529:	53                   	push   ebx
c001d52a:	56                   	push   esi
c001d52b:	e8 d7 f6 ff ff       	call   c001cc07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d530:	83 c4 10             	add    esp,0x10
c001d533:	89 c7                	mov    edi,eax
c001d535:	84 c0                	test   al,al
c001d537:	0f 85 8c 00 00 00    	jne    c001d5c9 <Thr::loadDLL(char const*, bool)+0x223>
c001d53d:	89 e8                	mov    eax,ebp
c001d53f:	84 c0                	test   al,al
c001d541:	74 76                	je     c001d5b9 <Thr::loadDLL(char const*, bool)+0x213>
c001d543:	83 ec 0c             	sub    esp,0xc
c001d546:	68 fb bd 02 c0       	push   0xc002bdfb
c001d54b:	e8 d9 cc ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001d550:	83 c4 10             	add    esp,0x10
c001d553:	eb 64                	jmp    c001d5b9 <Thr::loadDLL(char const*, bool)+0x213>
c001d555:	e8 57 47 ff ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c001d55a:	89 f5                	mov    ebp,esi
c001d55c:	c1 e5 0c             	shl    ebp,0xc
c001d55f:	52                   	push   edx
c001d560:	01 dd                	add    ebp,ebx
c001d562:	52                   	push   edx
c001d563:	55                   	push   ebp
c001d564:	50                   	push   eax
c001d565:	e8 fc 48 ff ff       	call   c0011e66 <VAS::getPageTableEntry(unsigned long)>
c001d56a:	83 c4 10             	add    esp,0x10
c001d56d:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d570:	75 0c                	jne    c001d57e <Thr::loadDLL(char const*, bool)+0x1d8>
c001d572:	83 ec 0c             	sub    esp,0xc
c001d575:	55                   	push   ebp
c001d576:	e8 da 28 ff ff       	call   c000fe55 <Phys::freePage(unsigned long)>
c001d57b:	83 c4 10             	add    esp,0x10
c001d57e:	46                   	inc    esi
c001d57f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d583:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d587:	05 ff 0f 00 00       	add    eax,0xfff
c001d58c:	83 d2 00             	adc    edx,0x0
c001d58f:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d593:	c1 ea 0c             	shr    edx,0xc
c001d596:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d59a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d59e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d5a2:	ba 00 00 00 00       	mov    edx,0x0
c001d5a7:	89 d0                	mov    eax,edx
c001d5a9:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d5ad:	72 a6                	jb     c001d555 <Thr::loadDLL(char const*, bool)+0x1af>
c001d5af:	89 f8                	mov    eax,edi
c001d5b1:	84 c0                	test   al,al
c001d5b3:	75 18                	jne    c001d5cd <Thr::loadDLL(char const*, bool)+0x227>
c001d5b5:	31 db                	xor    ebx,ebx
c001d5b7:	eb 14                	jmp    c001d5cd <Thr::loadDLL(char const*, bool)+0x227>
c001d5b9:	83 ec 0c             	sub    esp,0xc
c001d5bc:	68 1a be 02 c0       	push   0xc002be1a
c001d5c1:	e8 63 cc ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001d5c6:	83 c4 10             	add    esp,0x10
c001d5c9:	31 f6                	xor    esi,esi
c001d5cb:	eb b2                	jmp    c001d57f <Thr::loadDLL(char const*, bool)+0x1d9>
c001d5cd:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d5d3:	89 d8                	mov    eax,ebx
c001d5d5:	5b                   	pop    ebx
c001d5d6:	5e                   	pop    esi
c001d5d7:	5f                   	pop    edi
c001d5d8:	5d                   	pop    ebp
c001d5d9:	c3                   	ret    

c001d5da <Thr::executeDLL(unsigned long, void*)>:
c001d5da:	56                   	push   esi
c001d5db:	53                   	push   ebx
c001d5dc:	52                   	push   edx
c001d5dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d5e5:	85 db                	test   ebx,ebx
c001d5e7:	75 10                	jne    c001d5f9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d5e9:	83 ec 0c             	sub    esp,0xc
c001d5ec:	68 36 be 02 c0       	push   0xc002be36
c001d5f1:	e8 33 cc ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001d5f6:	83 c4 10             	add    esp,0x10
c001d5f9:	50                   	push   eax
c001d5fa:	50                   	push   eax
c001d5fb:	53                   	push   ebx
c001d5fc:	68 60 be 02 c0       	push   0xc002be60
c001d601:	e8 a8 55 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001d606:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d60a:	89 d8                	mov    eax,ebx
c001d60c:	83 c4 14             	add    esp,0x14
c001d60f:	5b                   	pop    ebx
c001d610:	5e                   	pop    esi
c001d611:	ff e0                	jmp    eax
c001d613:	90                   	nop

c001d614 <changeTSS>:
c001d614:	83 ec 14             	sub    esp,0x14
c001d617:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d61c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d61f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d624:	c1 e2 15             	shl    edx,0x15
c001d627:	29 d0                	sub    eax,edx
c001d629:	50                   	push   eax
c001d62a:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c001d62f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d635:	05 7c 11 00 00       	add    eax,0x117c
c001d63a:	50                   	push   eax
c001d63b:	e8 20 3e ff ff       	call   c0011460 <TSS::setESP(unsigned long)>
c001d640:	83 c4 1c             	add    esp,0x1c
c001d643:	c3                   	ret    

c001d644 <Process::addArgs(char**)>:
c001d644:	57                   	push   edi
c001d645:	56                   	push   esi
c001d646:	53                   	push   ebx
c001d647:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d64b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d64f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d659:	85 ff                	test   edi,edi
c001d65b:	74 3d                	je     c001d69a <Process::addArgs(char**)+0x56>
c001d65d:	8b 07                	mov    eax,DWORD PTR [edi]
c001d65f:	85 c0                	test   eax,eax
c001d661:	74 37                	je     c001d69a <Process::addArgs(char**)+0x56>
c001d663:	31 db                	xor    ebx,ebx
c001d665:	83 ec 0c             	sub    esp,0xc
c001d668:	50                   	push   eax
c001d669:	e8 26 31 fe ff       	call   c0000794 <strlen>
c001d66e:	40                   	inc    eax
c001d66f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d672:	e8 c9 21 ff ff       	call   c000f840 <malloc>
c001d677:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d67e:	5a                   	pop    edx
c001d67f:	59                   	pop    ecx
c001d680:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d683:	43                   	inc    ebx
c001d684:	50                   	push   eax
c001d685:	e8 aa 31 fe ff       	call   c0000834 <strcpy>
c001d68a:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d690:	83 c4 10             	add    esp,0x10
c001d693:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d696:	85 c0                	test   eax,eax
c001d698:	75 cb                	jne    c001d665 <Process::addArgs(char**)+0x21>
c001d69a:	5b                   	pop    ebx
c001d69b:	5e                   	pop    esi
c001d69c:	5f                   	pop    edi
c001d69d:	c3                   	ret    

c001d69e <Process::Process(char const*, Process*, char**)>:
c001d69e:	56                   	push   esi
c001d69f:	53                   	push   ebx
c001d6a0:	83 ec 14             	sub    esp,0x14
c001d6a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6a7:	05 0c 02 00 00       	add    eax,0x20c
c001d6ac:	bb 07 00 00 00       	mov    ebx,0x7
c001d6b1:	89 c6                	mov    esi,eax
c001d6b3:	85 db                	test   ebx,ebx
c001d6b5:	78 12                	js     c001d6c9 <Process::Process(char const*, Process*, char**)+0x2b>
c001d6b7:	83 ec 0c             	sub    esp,0xc
c001d6ba:	56                   	push   esi
c001d6bb:	e8 22 b2 00 00       	call   c00288e2 <ThreadControlBlock::ThreadControlBlock()>
c001d6c0:	83 c4 10             	add    esp,0x10
c001d6c3:	83 c6 63             	add    esi,0x63
c001d6c6:	4b                   	dec    ebx
c001d6c7:	eb ea                	jmp    c001d6b3 <Process::Process(char const*, Process*, char**)+0x15>
c001d6c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6cd:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d6d4:	83 ec 0c             	sub    esp,0xc
c001d6d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6db:	e8 9a c9 ff ff       	call   c001a07a <Krnl::newProcessEnv(Process*)>
c001d6e0:	83 c4 10             	add    esp,0x10
c001d6e3:	89 c2                	mov    edx,eax
c001d6e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6e9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d6ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6f3:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d6fc:	a1 30 d6 02 c0       	mov    eax,ds:0xc002d630
c001d701:	8d 50 01             	lea    edx,[eax+0x1]
c001d704:	89 15 30 d6 02 c0    	mov    DWORD PTR ds:0xc002d630,edx
c001d70a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d70e:	89 02                	mov    DWORD PTR [edx],eax
c001d710:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001d718:	83 ec 0c             	sub    esp,0xc
c001d71b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d71f:	e8 1c 21 ff ff       	call   c000f840 <malloc>
c001d724:	83 c4 10             	add    esp,0x10
c001d727:	89 c3                	mov    ebx,eax
c001d729:	83 ec 08             	sub    esp,0x8
c001d72c:	6a 00                	push   0x0
c001d72e:	53                   	push   ebx
c001d72f:	e8 60 4f ff ff       	call   c0012694 <VAS::VAS(bool)>
c001d734:	83 c4 10             	add    esp,0x10
c001d737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d73b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d741:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d745:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d74f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d753:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d757:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d75d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d761:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d767:	85 c0                	test   eax,eax
c001d769:	74 42                	je     c001d7ad <Process::Process(char const*, Process*, char**)+0x10f>
c001d76b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d76f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d775:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d77b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d77f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d785:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d789:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d78f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d799:	05 0c 01 00 00       	add    eax,0x10c
c001d79e:	83 ec 08             	sub    esp,0x8
c001d7a1:	52                   	push   edx
c001d7a2:	50                   	push   eax
c001d7a3:	e8 8c 30 fe ff       	call   c0000834 <strcpy>
c001d7a8:	83 c4 10             	add    esp,0x10
c001d7ab:	eb 63                	jmp    c001d810 <Process::Process(char const*, Process*, char**)+0x172>
c001d7ad:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d7b5:	83 ec 0c             	sub    esp,0xc
c001d7b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d7bc:	e8 7f 20 ff ff       	call   c000f840 <malloc>
c001d7c1:	83 c4 10             	add    esp,0x10
c001d7c4:	89 c3                	mov    ebx,eax
c001d7c6:	83 ec 08             	sub    esp,0x8
c001d7c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7cd:	53                   	push   ebx
c001d7ce:	e8 8b 39 ff ff       	call   c001115e <VgaText::VgaText(char const*)>
c001d7d3:	83 c4 10             	add    esp,0x10
c001d7d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7da:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d7e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7e4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d7ea:	83 ec 0c             	sub    esp,0xc
c001d7ed:	50                   	push   eax
c001d7ee:	e8 5e 2d ff ff       	call   c0010551 <addToTerminalCycle(VgaText*)>
c001d7f3:	83 c4 10             	add    esp,0x10
c001d7f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7fa:	05 0c 01 00 00       	add    eax,0x10c
c001d7ff:	83 ec 08             	sub    esp,0x8
c001d802:	68 7f be 02 c0       	push   0xc002be7f
c001d807:	50                   	push   eax
c001d808:	e8 27 30 fe ff       	call   c0000834 <strcpy>
c001d80d:	83 c4 10             	add    esp,0x10
c001d810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d814:	83 c0 0c             	add    eax,0xc
c001d817:	83 ec 08             	sub    esp,0x8
c001d81a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d81e:	50                   	push   eax
c001d81f:	e8 10 30 fe ff       	call   c0000834 <strcpy>
c001d824:	83 c4 10             	add    esp,0x10
c001d827:	83 ec 08             	sub    esp,0x8
c001d82a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d82e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d832:	e8 0d fe ff ff       	call   c001d644 <Process::addArgs(char**)>
c001d837:	83 c4 10             	add    esp,0x10
c001d83a:	83 ec 08             	sub    esp,0x8
c001d83d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d841:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d845:	e8 87 ee ff ff       	call   c001c6d1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d84a:	83 c4 10             	add    esp,0x10
c001d84d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d851:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d855:	83 f0 01             	xor    eax,0x1
c001d858:	88 c2                	mov    dl,al
c001d85a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d85e:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d864:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d869:	83 ec 08             	sub    esp,0x8
c001d86c:	50                   	push   eax
c001d86d:	68 7c bf 02 c0       	push   0xc002bf7c
c001d872:	e8 37 53 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001d877:	83 c4 10             	add    esp,0x10
c001d87a:	90                   	nop
c001d87b:	83 c4 14             	add    esp,0x14
c001d87e:	5b                   	pop    ebx
c001d87f:	5e                   	pop    esi
c001d880:	c3                   	ret    
c001d881:	90                   	nop

c001d882 <Process::Process(bool, char const*, Process*, char**)>:
c001d882:	56                   	push   esi
c001d883:	53                   	push   ebx
c001d884:	83 ec 24             	sub    esp,0x24
c001d887:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d88b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d88f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d893:	05 0c 02 00 00       	add    eax,0x20c
c001d898:	bb 07 00 00 00       	mov    ebx,0x7
c001d89d:	89 c6                	mov    esi,eax
c001d89f:	85 db                	test   ebx,ebx
c001d8a1:	78 12                	js     c001d8b5 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d8a3:	83 ec 0c             	sub    esp,0xc
c001d8a6:	56                   	push   esi
c001d8a7:	e8 36 b0 00 00       	call   c00288e2 <ThreadControlBlock::ThreadControlBlock()>
c001d8ac:	83 c4 10             	add    esp,0x10
c001d8af:	83 c6 63             	add    esi,0x63
c001d8b2:	4b                   	dec    ebx
c001d8b3:	eb ea                	jmp    c001d89f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d8b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8b9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d8c0:	83 ec 0c             	sub    esp,0xc
c001d8c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8c7:	e8 ae c7 ff ff       	call   c001a07a <Krnl::newProcessEnv(Process*)>
c001d8cc:	83 c4 10             	add    esp,0x10
c001d8cf:	89 c2                	mov    edx,eax
c001d8d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8d5:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d8db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8df:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d8e8:	a1 30 d6 02 c0       	mov    eax,ds:0xc002d630
c001d8ed:	8d 50 01             	lea    edx,[eax+0x1]
c001d8f0:	89 15 30 d6 02 c0    	mov    DWORD PTR ds:0xc002d630,edx
c001d8f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d8fa:	89 02                	mov    DWORD PTR [edx],eax
c001d8fc:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d904:	83 ec 0c             	sub    esp,0xc
c001d907:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d90b:	e8 30 1f ff ff       	call   c000f840 <malloc>
c001d910:	83 c4 10             	add    esp,0x10
c001d913:	89 c3                	mov    ebx,eax
c001d915:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d91a:	83 ec 08             	sub    esp,0x8
c001d91d:	50                   	push   eax
c001d91e:	53                   	push   ebx
c001d91f:	e8 70 4d ff ff       	call   c0012694 <VAS::VAS(bool)>
c001d924:	83 c4 10             	add    esp,0x10
c001d927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d92b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d931:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d935:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d93f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d943:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d947:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d94d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d951:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d957:	85 c0                	test   eax,eax
c001d959:	74 42                	je     c001d99d <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d95b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d95f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d965:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d96b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d96f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d975:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d979:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d97f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d985:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d989:	05 0c 01 00 00       	add    eax,0x10c
c001d98e:	83 ec 08             	sub    esp,0x8
c001d991:	52                   	push   edx
c001d992:	50                   	push   eax
c001d993:	e8 9c 2e fe ff       	call   c0000834 <strcpy>
c001d998:	83 c4 10             	add    esp,0x10
c001d99b:	eb 63                	jmp    c001da00 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d99d:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d9a5:	83 ec 0c             	sub    esp,0xc
c001d9a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d9ac:	e8 8f 1e ff ff       	call   c000f840 <malloc>
c001d9b1:	83 c4 10             	add    esp,0x10
c001d9b4:	89 c3                	mov    ebx,eax
c001d9b6:	83 ec 08             	sub    esp,0x8
c001d9b9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d9bd:	53                   	push   ebx
c001d9be:	e8 9b 37 ff ff       	call   c001115e <VgaText::VgaText(char const*)>
c001d9c3:	83 c4 10             	add    esp,0x10
c001d9c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9ca:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d9d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9d4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d9da:	83 ec 0c             	sub    esp,0xc
c001d9dd:	50                   	push   eax
c001d9de:	e8 6e 2b ff ff       	call   c0010551 <addToTerminalCycle(VgaText*)>
c001d9e3:	83 c4 10             	add    esp,0x10
c001d9e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9ea:	05 0c 01 00 00       	add    eax,0x10c
c001d9ef:	83 ec 08             	sub    esp,0x8
c001d9f2:	68 7f be 02 c0       	push   0xc002be7f
c001d9f7:	50                   	push   eax
c001d9f8:	e8 37 2e fe ff       	call   c0000834 <strcpy>
c001d9fd:	83 c4 10             	add    esp,0x10
c001da00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da04:	83 c0 0c             	add    eax,0xc
c001da07:	83 ec 08             	sub    esp,0x8
c001da0a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001da0e:	50                   	push   eax
c001da0f:	e8 20 2e fe ff       	call   c0000834 <strcpy>
c001da14:	83 c4 10             	add    esp,0x10
c001da17:	83 ec 08             	sub    esp,0x8
c001da1a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001da1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da22:	e8 1d fc ff ff       	call   c001d644 <Process::addArgs(char**)>
c001da27:	83 c4 10             	add    esp,0x10
c001da2a:	90                   	nop
c001da2b:	83 c4 24             	add    esp,0x24
c001da2e:	5b                   	pop    ebx
c001da2f:	5e                   	pop    esi
c001da30:	c3                   	ret    

c001da31 <disableIRQs()>:
c001da31:	fa                   	cli    
c001da32:	ff 05 ec 15 03 c0    	inc    DWORD PTR ds:0xc00315ec
c001da38:	c3                   	ret    

c001da39 <getIRQNestingLevel()>:
c001da39:	a1 ec 15 03 c0       	mov    eax,ds:0xc00315ec
c001da3e:	c3                   	ret    

c001da3f <enableIRQs()>:
c001da3f:	a1 ec 15 03 c0       	mov    eax,ds:0xc00315ec
c001da44:	48                   	dec    eax
c001da45:	a3 ec 15 03 c0       	mov    ds:0xc00315ec,eax
c001da4a:	75 01                	jne    c001da4d <enableIRQs()+0xe>
c001da4c:	fb                   	sti    
c001da4d:	c3                   	ret    

c001da4e <lockScheduler()>:
c001da4e:	eb e1                	jmp    c001da31 <disableIRQs()>

c001da50 <unlockScheduler()>:
c001da50:	eb ed                	jmp    c001da3f <enableIRQs()>

c001da52 <userModeEntryPoint(void*)>:
c001da52:	83 ec 0c             	sub    esp,0xc
c001da55:	e8 f6 ff ff ff       	call   c001da50 <unlockScheduler()>
c001da5a:	fb                   	sti    
c001da5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da60:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001da63:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001da69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001da6d:	83 c4 0c             	add    esp,0xc
c001da70:	e9 b5 28 fe ff       	jmp    c000032a <goToUsermode>

c001da75 <lockStuff()>:
c001da75:	e8 b7 ff ff ff       	call   c001da31 <disableIRQs()>
c001da7a:	ff 05 e8 15 03 c0    	inc    DWORD PTR ds:0xc00315e8
c001da80:	c3                   	ret    

c001da81 <taskStartupFunction>:
c001da81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da86:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001da89:	c3                   	ret    

c001da8a <updateTimeUsed()>:
c001da8a:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c001da8f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da95:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001da9c:	74 50                	je     c001daee <updateTimeUsed()+0x64>
c001da9e:	57                   	push   edi
c001da9f:	56                   	push   esi
c001daa0:	53                   	push   ebx
c001daa1:	0f 31                	rdtsc  
c001daa3:	89 c1                	mov    ecx,eax
c001daa5:	a3 28 16 03 c0       	mov    ds:0xc0031628,eax
c001daaa:	2b 0d 18 16 03 c0    	sub    ecx,DWORD PTR ds:0xc0031618
c001dab0:	89 d3                	mov    ebx,edx
c001dab2:	89 0d 20 16 03 c0    	mov    DWORD PTR ds:0xc0031620,ecx
c001dab8:	1b 1d 1c 16 03 c0    	sbb    ebx,DWORD PTR ds:0xc003161c
c001dabe:	a3 18 16 03 c0       	mov    ds:0xc0031618,eax
c001dac3:	89 1d 24 16 03 c0    	mov    DWORD PTR ds:0xc0031624,ebx
c001dac9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dace:	89 15 2c 16 03 c0    	mov    DWORD PTR ds:0xc003162c,edx
c001dad4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dad7:	89 15 1c 16 03 c0    	mov    DWORD PTR ds:0xc003161c,edx
c001dadd:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001dae0:	01 f1                	add    ecx,esi
c001dae2:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001dae5:	11 fb                	adc    ebx,edi
c001dae7:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001daea:	5b                   	pop    ebx
c001daeb:	5e                   	pop    esi
c001daec:	5f                   	pop    edi
c001daed:	c3                   	ret    
c001daee:	c3                   	ret    

c001daef <switchToThread(ThreadControlBlock*)>:
c001daef:	53                   	push   ebx
c001daf0:	83 ec 08             	sub    esp,0x8
c001daf3:	a1 e8 15 03 c0       	mov    eax,ds:0xc00315e8
c001daf8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dafc:	85 c0                	test   eax,eax
c001dafe:	75 30                	jne    c001db30 <switchToThread(ThreadControlBlock*)+0x41>
c001db00:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001db03:	3c ff                	cmp    al,0xff
c001db05:	74 25                	je     c001db2c <switchToThread(ThreadControlBlock*)+0x3d>
c001db07:	0f b6 d0             	movzx  edx,al
c001db0a:	b8 84 03 00 00       	mov    eax,0x384
c001db0f:	29 d0                	sub    eax,edx
c001db11:	c1 e0 10             	shl    eax,0x10
c001db14:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001db17:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001db1a:	e8 6b ff ff ff       	call   c001da8a <updateTimeUsed()>
c001db1f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001db23:	83 c4 08             	add    esp,0x8
c001db26:	5b                   	pop    ebx
c001db27:	e9 36 28 fe ff       	jmp    c0000362 <switchToThreadASM>
c001db2c:	31 c0                	xor    eax,eax
c001db2e:	eb e7                	jmp    c001db17 <switchToThread(ThreadControlBlock*)+0x28>
c001db30:	c7 05 e4 15 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00315e4,0x1
c001db3a:	83 c4 08             	add    esp,0x8
c001db3d:	5b                   	pop    ebx
c001db3e:	c3                   	ret    
c001db3f:	90                   	nop

c001db40 <Semaphore::Semaphore(int)>:
c001db40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db48:	89 10                	mov    DWORD PTR [eax],edx
c001db4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db4e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001db55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001db60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db64:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001db6b:	90                   	nop
c001db6c:	c3                   	ret    
c001db6d:	90                   	nop

c001db6e <Mutex::Mutex()>:
c001db6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db72:	6a 01                	push   0x1
c001db74:	50                   	push   eax
c001db75:	e8 c6 ff ff ff       	call   c001db40 <Semaphore::Semaphore(int)>
c001db7a:	83 c4 08             	add    esp,0x8
c001db7d:	90                   	nop
c001db7e:	c3                   	ret    
c001db7f:	90                   	nop

c001db80 <Process::createThread(void (*)(void*), void*, int)>:
c001db80:	55                   	push   ebp
c001db81:	31 c9                	xor    ecx,ecx
c001db83:	57                   	push   edi
c001db84:	56                   	push   esi
c001db85:	53                   	push   ebx
c001db86:	83 ec 1c             	sub    esp,0x1c
c001db89:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db8d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001db94:	89 f2                	mov    edx,esi
c001db96:	0f b7 c2             	movzx  eax,dx
c001db99:	83 e2 01             	and    edx,0x1
c001db9c:	74 14                	je     c001dbb2 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001db9e:	d1 f8                	sar    eax,1
c001dba0:	41                   	inc    ecx
c001dba1:	89 c2                	mov    edx,eax
c001dba3:	83 f9 10             	cmp    ecx,0x10
c001dba6:	75 ee                	jne    c001db96 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dba8:	83 c4 1c             	add    esp,0x1c
c001dbab:	31 c0                	xor    eax,eax
c001dbad:	5b                   	pop    ebx
c001dbae:	5e                   	pop    esi
c001dbaf:	5f                   	pop    edi
c001dbb0:	5d                   	pop    ebp
c001dbb1:	c3                   	ret    
c001dbb2:	83 ec 08             	sub    esp,0x8
c001dbb5:	b8 01 00 00 00       	mov    eax,0x1
c001dbba:	d3 e0                	shl    eax,cl
c001dbbc:	09 c6                	or     esi,eax
c001dbbe:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dbc4:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dbcb:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001dbce:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dbd1:	01 ce                	add    esi,ecx
c001dbd3:	89 f0                	mov    eax,esi
c001dbd5:	c1 e0 05             	shl    eax,0x5
c001dbd8:	01 c6                	add    esi,eax
c001dbda:	8d 04 33             	lea    eax,[ebx+esi*1]
c001dbdd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001dbe3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dbe9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dbed:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dbf3:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001dbf9:	89 ca                	mov    edx,ecx
c001dbfb:	f7 da                	neg    edx
c001dbfd:	c1 e2 15             	shl    edx,0x15
c001dc00:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001dc06:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001dc0c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dc10:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dc1a:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dc20:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dc24:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dc2a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dc34:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dc3e:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dc45:	50                   	push   eax
c001dc46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc4a:	68 08 16 03 c0       	push   0xc0031608
c001dc4f:	e8 1c ab 00 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc54:	83 c4 10             	add    esp,0x10
c001dc57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc5b:	83 c4 1c             	add    esp,0x1c
c001dc5e:	5b                   	pop    ebx
c001dc5f:	5e                   	pop    esi
c001dc60:	5f                   	pop    edi
c001dc61:	5d                   	pop    ebp
c001dc62:	c3                   	ret    
c001dc63:	90                   	nop

c001dc64 <Process::createUserThread()>:
c001dc64:	83 ec 0c             	sub    esp,0xc
c001dc67:	68 80 00 00 00       	push   0x80
c001dc6c:	6a 00                	push   0x0
c001dc6e:	68 52 da 01 c0       	push   0xc001da52
c001dc73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc77:	e8 04 ff ff ff       	call   c001db80 <Process::createThread(void (*)(void*), void*, int)>
c001dc7c:	83 c4 1c             	add    esp,0x1c
c001dc7f:	c3                   	ret    

c001dc80 <setupMultitasking(void (*)())>:
c001dc80:	56                   	push   esi
c001dc81:	53                   	push   ebx
c001dc82:	53                   	push   ebx
c001dc83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dc87:	eb 10                	jmp    c001dc99 <setupMultitasking(void (*)())+0x19>
c001dc89:	83 ec 0c             	sub    esp,0xc
c001dc8c:	68 08 16 03 c0       	push   0xc0031608
c001dc91:	e8 2c aa 00 00       	call   c00286c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dc96:	83 c4 10             	add    esp,0x10
c001dc99:	83 ec 0c             	sub    esp,0xc
c001dc9c:	68 08 16 03 c0       	push   0xc0031608
c001dca1:	e8 00 aa 00 00       	call   c00286a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dca6:	83 c4 10             	add    esp,0x10
c001dca9:	84 c0                	test   al,al
c001dcab:	74 dc                	je     c001dc89 <setupMultitasking(void (*)())+0x9>
c001dcad:	83 ec 0c             	sub    esp,0xc
c001dcb0:	68 3f 07 00 00       	push   0x73f
c001dcb5:	e8 86 1b ff ff       	call   c000f840 <malloc>
c001dcba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dcc1:	89 c3                	mov    ebx,eax
c001dcc3:	6a 00                	push   0x0
c001dcc5:	68 83 be 02 c0       	push   0xc002be83
c001dcca:	6a 01                	push   0x1
c001dccc:	50                   	push   eax
c001dccd:	e8 b0 fb ff ff       	call   c001d882 <Process::Process(bool, char const*, Process*, char**)>
c001dcd2:	83 c4 18             	add    esp,0x18
c001dcd5:	89 1d 14 16 03 c0    	mov    DWORD PTR ds:0xc0031614,ebx
c001dcdb:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dce1:	68 a4 bf 02 c0       	push   0xc002bfa4
c001dce6:	e8 c3 4e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001dceb:	58                   	pop    eax
c001dcec:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dcf2:	e8 dc 2f ff ff       	call   c0010cd3 <setActiveTerminal(VgaText*)>
c001dcf7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dcff:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dd05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dd08:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dd12:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001dd18:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dd1e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001dd28:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dd32:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dd3c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001dd42:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dd48:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dd52:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dd58:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001dd62:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001dd68:	5a                   	pop    edx
c001dd69:	59                   	pop    ecx
c001dd6a:	68 7f be 02 c0       	push   0xc002be7f
c001dd6f:	50                   	push   eax
c001dd70:	e8 bf 2a fe ff       	call   c0000834 <strcpy>
c001dd75:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dd7c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dd80:	83 c4 14             	add    esp,0x14
c001dd83:	5b                   	pop    ebx
c001dd84:	5e                   	pop    esi
c001dd85:	e9 ca 25 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dd8a <schedule()>:
c001dd8a:	a1 e8 15 03 c0       	mov    eax,ds:0xc00315e8
c001dd8f:	85 c0                	test   eax,eax
c001dd91:	74 0b                	je     c001dd9e <schedule()+0x14>
c001dd93:	c7 05 e4 15 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00315e4,0x1
c001dd9d:	c3                   	ret    
c001dd9e:	53                   	push   ebx
c001dd9f:	83 ec 14             	sub    esp,0x14
c001dda2:	68 08 16 03 c0       	push   0xc0031608
c001dda7:	e8 fa a8 00 00       	call   c00286a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ddac:	83 c4 10             	add    esp,0x10
c001ddaf:	84 c0                	test   al,al
c001ddb1:	75 38                	jne    c001ddeb <schedule()+0x61>
c001ddb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddb8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ddbb:	4a                   	dec    edx
c001ddbc:	74 32                	je     c001ddf0 <schedule()+0x66>
c001ddbe:	83 ec 0c             	sub    esp,0xc
c001ddc1:	68 08 16 03 c0       	push   0xc0031608
c001ddc6:	e8 d3 a8 00 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddcb:	c7 04 24 08 16 03 c0 	mov    DWORD PTR [esp],0xc0031608
c001ddd2:	89 c3                	mov    ebx,eax
c001ddd4:	e8 e9 a8 00 00       	call   c00286c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ddd9:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dde0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dde3:	e8 07 fd ff ff       	call   c001daef <switchToThread(ThreadControlBlock*)>
c001dde8:	83 c4 10             	add    esp,0x10
c001ddeb:	83 c4 08             	add    esp,0x8
c001ddee:	5b                   	pop    ebx
c001ddef:	c3                   	ret    
c001ddf0:	83 ec 08             	sub    esp,0x8
c001ddf3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ddfa:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001de00:	68 08 16 03 c0       	push   0xc0031608
c001de05:	e8 66 a9 00 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de0a:	83 c4 10             	add    esp,0x10
c001de0d:	eb af                	jmp    c001ddbe <schedule()+0x34>

c001de0f <unlockStuff()>:
c001de0f:	a1 e8 15 03 c0       	mov    eax,ds:0xc00315e8
c001de14:	48                   	dec    eax
c001de15:	a3 e8 15 03 c0       	mov    ds:0xc00315e8,eax
c001de1a:	75 09                	jne    c001de25 <unlockStuff()+0x16>
c001de1c:	a1 e4 15 03 c0       	mov    eax,ds:0xc00315e4
c001de21:	85 c0                	test   eax,eax
c001de23:	75 05                	jne    c001de2a <unlockStuff()+0x1b>
c001de25:	e9 15 fc ff ff       	jmp    c001da3f <enableIRQs()>
c001de2a:	83 ec 0c             	sub    esp,0xc
c001de2d:	c7 05 e4 15 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00315e4,0x0
c001de37:	e8 4e ff ff ff       	call   c001dd8a <schedule()>
c001de3c:	83 c4 0c             	add    esp,0xc
c001de3f:	e9 fb fb ff ff       	jmp    c001da3f <enableIRQs()>

c001de44 <Semaphore::tryAcquire()>:
c001de44:	83 ec 0c             	sub    esp,0xc
c001de47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4b:	e8 25 fc ff ff       	call   c001da75 <lockStuff()>
c001de50:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001de53:	3b 10                	cmp    edx,DWORD PTR [eax]
c001de55:	7c 0b                	jl     c001de62 <Semaphore::tryAcquire()+0x1e>
c001de57:	e8 b3 ff ff ff       	call   c001de0f <unlockStuff()>
c001de5c:	31 c0                	xor    eax,eax
c001de5e:	83 c4 0c             	add    esp,0xc
c001de61:	c3                   	ret    
c001de62:	42                   	inc    edx
c001de63:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001de66:	e8 a4 ff ff ff       	call   c001de0f <unlockStuff()>
c001de6b:	b0 01                	mov    al,0x1
c001de6d:	83 c4 0c             	add    esp,0xc
c001de70:	c3                   	ret    
c001de71:	90                   	nop

c001de72 <Semaphore::assertLocked(char const*)>:
c001de72:	83 ec 0c             	sub    esp,0xc
c001de75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001de7d:	e8 f3 fb ff ff       	call   c001da75 <lockStuff()>
c001de82:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de84:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001de87:	7c 05                	jl     c001de8e <Semaphore::assertLocked(char const*)+0x1c>
c001de89:	83 c4 0c             	add    esp,0xc
c001de8c:	eb 81                	jmp    c001de0f <unlockStuff()>
c001de8e:	83 ec 0c             	sub    esp,0xc
c001de91:	52                   	push   edx
c001de92:	e8 92 c3 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001de97:	83 c4 10             	add    esp,0x10
c001de9a:	83 c4 0c             	add    esp,0xc
c001de9d:	e9 6d ff ff ff       	jmp    c001de0f <unlockStuff()>

c001dea2 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dea2:	83 ec 0c             	sub    esp,0xc
c001dea5:	e8 8f fb ff ff       	call   c001da39 <getIRQNestingLevel()>
c001deaa:	83 ec 08             	sub    esp,0x8
c001dead:	50                   	push   eax
c001deae:	68 d8 bf 02 c0       	push   0xc002bfd8
c001deb3:	e8 f6 4c ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001deb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001debc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dec1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dec4:	e8 c1 fe ff ff       	call   c001dd8a <schedule()>
c001dec9:	e8 82 fb ff ff       	call   c001da50 <unlockScheduler()>
c001dece:	e8 66 fb ff ff       	call   c001da39 <getIRQNestingLevel()>
c001ded3:	5a                   	pop    edx
c001ded4:	59                   	pop    ecx
c001ded5:	50                   	push   eax
c001ded6:	68 0c c0 02 c0       	push   0xc002c00c
c001dedb:	e8 ce 4c ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001dee0:	83 c4 1c             	add    esp,0x1c
c001dee3:	c3                   	ret    

c001dee4 <blockTask(TaskState)>:
c001dee4:	83 ec 0c             	sub    esp,0xc
c001dee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001deeb:	e8 5e fb ff ff       	call   c001da4e <lockScheduler()>
c001def0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001def5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001def8:	e8 8d fe ff ff       	call   c001dd8a <schedule()>
c001defd:	83 c4 0c             	add    esp,0xc
c001df00:	e9 4b fb ff ff       	jmp    c001da50 <unlockScheduler()>

c001df05 <waitTask(int, int*, int)>:
c001df05:	83 ec 18             	sub    esp,0x18
c001df08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df0d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df11:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001df14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001df18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df1d:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001df20:	6a 07                	push   0x7
c001df22:	e8 bd ff ff ff       	call   c001dee4 <blockTask(TaskState)>
c001df27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df2c:	83 c4 10             	add    esp,0x10
c001df2f:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001df32:	85 d2                	test   edx,edx
c001df34:	74 0a                	je     c001df40 <waitTask(int, int*, int)+0x3b>
c001df36:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001df39:	89 02                	mov    DWORD PTR [edx],eax
c001df3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df40:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001df43:	83 c4 0c             	add    esp,0xc
c001df46:	c3                   	ret    

c001df47 <nanoSleepUntil(unsigned long long)>:
c001df47:	83 ec 0c             	sub    esp,0xc
c001df4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df52:	3b 05 30 e7 02 c0    	cmp    eax,DWORD PTR ds:0xc002e730
c001df58:	89 d1                	mov    ecx,edx
c001df5a:	1b 0d 34 e7 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e734
c001df60:	73 04                	jae    c001df66 <nanoSleepUntil(unsigned long long)+0x1f>
c001df62:	83 c4 0c             	add    esp,0xc
c001df65:	c3                   	ret    
c001df66:	e8 0a fb ff ff       	call   c001da75 <lockStuff()>
c001df6b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001df71:	83 ec 08             	sub    esp,0x8
c001df74:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001df77:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001df7a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001df80:	68 fc 15 03 c0       	push   0xc00315fc
c001df85:	e8 e6 a7 00 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df8a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001df91:	e8 4e ff ff ff       	call   c001dee4 <blockTask(TaskState)>
c001df96:	83 c4 1c             	add    esp,0x1c
c001df99:	e9 71 fe ff ff       	jmp    c001de0f <unlockStuff()>

c001df9e <nanoSleep(unsigned long long)>:
c001df9e:	a1 30 e7 02 c0       	mov    eax,ds:0xc002e730
c001dfa3:	8b 15 34 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e734
c001dfa9:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dfad:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dfb1:	eb 94                	jmp    c001df47 <nanoSleepUntil(unsigned long long)>

c001dfb3 <sleep(unsigned long long)>:
c001dfb3:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dfbb:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dfc0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dfc4:	01 ca                	add    edx,ecx
c001dfc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dfca:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dfce:	eb ce                	jmp    c001df9e <nanoSleep(unsigned long long)>

c001dfd0 <Semaphore::acquire()>:
c001dfd0:	83 ec 0c             	sub    esp,0xc
c001dfd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfd7:	e8 99 fa ff ff       	call   c001da75 <lockStuff()>
c001dfdc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dfdf:	3b 10                	cmp    edx,DWORD PTR [eax]
c001dfe1:	7d 0c                	jge    c001dfef <Semaphore::acquire()+0x1f>
c001dfe3:	42                   	inc    edx
c001dfe4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001dfe7:	83 c4 0c             	add    esp,0xc
c001dfea:	e9 20 fe ff ff       	jmp    c001de0f <unlockStuff()>
c001dfef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dff5:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001dffc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dfff:	85 d2                	test   edx,edx
c001e001:	74 2a                	je     c001e02d <Semaphore::acquire()+0x5d>
c001e003:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e006:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e00c:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e00f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e015:	83 ec 0c             	sub    esp,0xc
c001e018:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e01b:	6a 05                	push   0x5
c001e01d:	e8 c2 fe ff ff       	call   c001dee4 <blockTask(TaskState)>
c001e022:	83 c4 10             	add    esp,0x10
c001e025:	83 c4 0c             	add    esp,0xc
c001e028:	e9 e2 fd ff ff       	jmp    c001de0f <unlockStuff()>
c001e02d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e033:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e036:	eb d7                	jmp    c001e00f <Semaphore::acquire()+0x3f>

c001e038 <taskReturned>:
c001e038:	83 ec 18             	sub    esp,0x18
c001e03b:	68 40 c0 02 c0       	push   0xc002c040
c001e040:	e8 e4 c1 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001e045:	83 c4 10             	add    esp,0x10
c001e048:	83 ec 0c             	sub    esp,0xc
c001e04b:	6a 02                	push   0x2
c001e04d:	e8 92 fe ff ff       	call   c001dee4 <blockTask(TaskState)>
c001e052:	e8 f7 f9 ff ff       	call   c001da4e <lockScheduler()>
c001e057:	e8 2e fd ff ff       	call   c001dd8a <schedule()>
c001e05c:	e8 ef f9 ff ff       	call   c001da50 <unlockScheduler()>
c001e061:	83 c4 10             	add    esp,0x10
c001e064:	eb e2                	jmp    c001e048 <taskReturned+0x10>

c001e066 <unblockTask(ThreadControlBlock*)>:
c001e066:	53                   	push   ebx
c001e067:	83 ec 08             	sub    esp,0x8
c001e06a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e06e:	e8 db f9 ff ff       	call   c001da4e <lockScheduler()>
c001e073:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e076:	85 c0                	test   eax,eax
c001e078:	74 5c                	je     c001e0d6 <unblockTask(ThreadControlBlock*)+0x70>
c001e07a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e07d:	48                   	dec    eax
c001e07e:	74 31                	je     c001e0b1 <unblockTask(ThreadControlBlock*)+0x4b>
c001e080:	83 ec 0c             	sub    esp,0xc
c001e083:	68 08 16 03 c0       	push   0xc0031608
c001e088:	e8 11 a6 00 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e08d:	83 c4 10             	add    esp,0x10
c001e090:	85 c0                	test   eax,eax
c001e092:	75 17                	jne    c001e0ab <unblockTask(ThreadControlBlock*)+0x45>
c001e094:	eb 65                	jmp    c001e0fb <unblockTask(ThreadControlBlock*)+0x95>
c001e096:	83 ec 08             	sub    esp,0x8
c001e099:	50                   	push   eax
c001e09a:	68 08 16 03 c0       	push   0xc0031608
c001e09f:	e8 d4 a8 00 00       	call   c0028978 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e0a4:	83 c4 10             	add    esp,0x10
c001e0a7:	85 c0                	test   eax,eax
c001e0a9:	74 50                	je     c001e0fb <unblockTask(ThreadControlBlock*)+0x95>
c001e0ab:	39 c3                	cmp    ebx,eax
c001e0ad:	75 e7                	jne    c001e096 <unblockTask(ThreadControlBlock*)+0x30>
c001e0af:	eb 1c                	jmp    c001e0cd <unblockTask(ThreadControlBlock*)+0x67>
c001e0b1:	83 ec 0c             	sub    esp,0xc
c001e0b4:	68 30 c1 02 c0       	push   0xc002c130
c001e0b9:	e8 f0 4a ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e0be:	c7 04 24 bc c0 02 c0 	mov    DWORD PTR [esp],0xc002c0bc
c001e0c5:	e8 e4 4a ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e0ca:	83 c4 10             	add    esp,0x10
c001e0cd:	83 c4 08             	add    esp,0x8
c001e0d0:	5b                   	pop    ebx
c001e0d1:	e9 7a f9 ff ff       	jmp    c001da50 <unlockScheduler()>
c001e0d6:	83 ec 0c             	sub    esp,0xc
c001e0d9:	68 74 c0 02 c0       	push   0xc002c074
c001e0de:	e8 cb 4a ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e0e3:	c7 04 24 bc c0 02 c0 	mov    DWORD PTR [esp],0xc002c0bc
c001e0ea:	e8 bf 4a ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e0ef:	83 c4 10             	add    esp,0x10
c001e0f2:	83 c4 08             	add    esp,0x8
c001e0f5:	5b                   	pop    ebx
c001e0f6:	e9 55 f9 ff ff       	jmp    c001da50 <unlockScheduler()>
c001e0fb:	83 ec 08             	sub    esp,0x8
c001e0fe:	53                   	push   ebx
c001e0ff:	68 08 16 03 c0       	push   0xc0031608
c001e104:	e8 67 a6 00 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e109:	83 c4 10             	add    esp,0x10
c001e10c:	83 c4 08             	add    esp,0x8
c001e10f:	5b                   	pop    ebx
c001e110:	e9 3b f9 ff ff       	jmp    c001da50 <unlockScheduler()>

c001e115 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e115:	55                   	push   ebp
c001e116:	57                   	push   edi
c001e117:	56                   	push   esi
c001e118:	53                   	push   ebx
c001e119:	83 ec 1c             	sub    esp,0x1c
c001e11c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e120:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e123:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e129:	85 ff                	test   edi,edi
c001e12b:	7e 20                	jle    c001e14d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e12d:	31 f6                	xor    esi,esi
c001e12f:	83 ec 0c             	sub    esp,0xc
c001e132:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e139:	46                   	inc    esi
c001e13a:	e8 11 17 ff ff       	call   c000f850 <free>
c001e13f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e142:	83 c4 10             	add    esp,0x10
c001e145:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e14b:	7f e2                	jg     c001e12f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e14d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e157:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e15c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e15f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e162:	d3 c0                	rol    eax,cl
c001e164:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e16b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e16e:	89 f7                	mov    edi,esi
c001e170:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e178:	0f 85 74 01 00 00    	jne    c001e2f2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e17e:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e184:	85 ed                	test   ebp,ebp
c001e186:	74 1b                	je     c001e1a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e188:	83 ec 0c             	sub    esp,0xc
c001e18b:	55                   	push   ebp
c001e18c:	e8 05 be ff ff       	call   c0019f96 <EnvVarContainer::~EnvVarContainer()>
c001e191:	59                   	pop    ecx
c001e192:	5e                   	pop    esi
c001e193:	6a 0c                	push   0xc
c001e195:	55                   	push   ebp
c001e196:	e8 33 49 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c001e19b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e19e:	83 c4 10             	add    esp,0x10
c001e1a1:	89 f7                	mov    edi,esi
c001e1a3:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e1a9:	85 c0                	test   eax,eax
c001e1ab:	0f 84 aa 00 00 00    	je     c001e25b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e1b1:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e1b4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e1b8:	31 c9                	xor    ecx,ecx
c001e1ba:	eb 10                	jmp    c001e1cc <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e1bc:	41                   	inc    ecx
c001e1bd:	83 f9 10             	cmp    ecx,0x10
c001e1c0:	0f 84 95 00 00 00    	je     c001e25b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e1c6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e1cc:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e1d3:	d3 fa                	sar    edx,cl
c001e1d5:	83 e2 01             	and    edx,0x1
c001e1d8:	74 e2                	je     c001e1bc <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e1da:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e1dd:	01 ca                	add    edx,ecx
c001e1df:	89 d5                	mov    ebp,edx
c001e1e1:	c1 e5 05             	shl    ebp,0x5
c001e1e4:	01 ea                	add    edx,ebp
c001e1e6:	01 d0                	add    eax,edx
c001e1e8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e1ee:	83 fd 07             	cmp    ebp,0x7
c001e1f1:	75 c9                	jne    c001e1bc <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e1f3:	05 40 02 00 00       	add    eax,0x240
c001e1f8:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e1fb:	83 fd ff             	cmp    ebp,0xffffffff
c001e1fe:	0f 8c 08 01 00 00    	jl     c001e30c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e204:	0f 84 b9 01 00 00    	je     c001e3c3 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e20a:	85 ed                	test   ebp,ebp
c001e20c:	0f 84 a0 01 00 00    	je     c001e3b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e212:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e214:	75 a6                	jne    c001e1bc <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e216:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e21c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e220:	01 d0                	add    eax,edx
c001e222:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e226:	83 ec 0c             	sub    esp,0xc
c001e229:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e22f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e232:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e238:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e23f:	50                   	push   eax
c001e240:	e8 21 fe ff ff       	call   c001e066 <unblockTask(ThreadControlBlock*)>
c001e245:	83 c4 10             	add    esp,0x10
c001e248:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e24b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e24f:	89 f7                	mov    edi,esi
c001e251:	41                   	inc    ecx
c001e252:	83 f9 10             	cmp    ecx,0x10
c001e255:	0f 85 6b ff ff ff    	jne    c001e1c6 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e25b:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e261:	85 c0                	test   eax,eax
c001e263:	74 5d                	je     c001e2c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e265:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e26b:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e271:	74 4f                	je     c001e2c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e273:	83 ec 0c             	sub    esp,0xc
c001e276:	68 08 16 03 c0       	push   0xc0031608
c001e27b:	e8 1e a4 00 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e280:	c7 04 24 08 16 03 c0 	mov    DWORD PTR [esp],0xc0031608
c001e287:	89 c7                	mov    edi,eax
c001e289:	e8 18 a4 00 00       	call   c00286a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e28e:	83 c4 10             	add    esp,0x10
c001e291:	84 c0                	test   al,al
c001e293:	0f 84 e4 00 00 00    	je     c001e37d <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e299:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e29c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e2a2:	85 d2                	test   edx,edx
c001e2a4:	74 0f                	je     c001e2b5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e2a6:	83 ec 0c             	sub    esp,0xc
c001e2a9:	8b 02                	mov    eax,DWORD PTR [edx]
c001e2ab:	52                   	push   edx
c001e2ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e2af:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2b2:	83 c4 10             	add    esp,0x10
c001e2b5:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e2bf:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e2c2:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e2c8:	85 db                	test   ebx,ebx
c001e2ca:	74 16                	je     c001e2e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e2cc:	83 ec 0c             	sub    esp,0xc
c001e2cf:	53                   	push   ebx
c001e2d0:	e8 ab 3d ff ff       	call   c0012080 <VAS::~VAS()>
c001e2d5:	58                   	pop    eax
c001e2d6:	5a                   	pop    edx
c001e2d7:	6a 10                	push   0x10
c001e2d9:	53                   	push   ebx
c001e2da:	e8 ef 47 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c001e2df:	83 c4 10             	add    esp,0x10
c001e2e2:	83 ec 0c             	sub    esp,0xc
c001e2e5:	68 8a be 02 c0       	push   0xc002be8a
c001e2ea:	e8 bf 48 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e2ef:	83 c4 10             	add    esp,0x10
c001e2f2:	83 ec 08             	sub    esp,0x8
c001e2f5:	68 3f 07 00 00       	push   0x73f
c001e2fa:	68 98 be 02 c0       	push   0xc002be98
c001e2ff:	e8 aa 48 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e304:	83 c4 2c             	add    esp,0x2c
c001e307:	5b                   	pop    ebx
c001e308:	5e                   	pop    esi
c001e309:	5f                   	pop    edi
c001e30a:	5d                   	pop    ebp
c001e30b:	c3                   	ret    
c001e30c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e310:	83 ec 0c             	sub    esp,0xc
c001e313:	68 74 c1 02 c0       	push   0xc002c174
c001e318:	e8 0c bf ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001e31d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e320:	83 c4 10             	add    esp,0x10
c001e323:	89 f7                	mov    edi,esi
c001e325:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e329:	e9 8e fe ff ff       	jmp    c001e1bc <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e32e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e334:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e33a:	75 1c                	jne    c001e358 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e33c:	83 ec 0c             	sub    esp,0xc
c001e33f:	68 dc c1 02 c0       	push   0xc002c1dc
c001e344:	e8 65 48 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e349:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e350:	e8 8f fb ff ff       	call   c001dee4 <blockTask(TaskState)>
c001e355:	83 c4 10             	add    esp,0x10
c001e358:	83 ec 08             	sub    esp,0x8
c001e35b:	56                   	push   esi
c001e35c:	68 08 16 03 c0       	push   0xc0031608
c001e361:	e8 0a a4 00 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e366:	c7 04 24 08 16 03 c0 	mov    DWORD PTR [esp],0xc0031608
c001e36d:	e8 2c a3 00 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e372:	83 c4 10             	add    esp,0x10
c001e375:	39 f8                	cmp    eax,edi
c001e377:	0f 84 1c ff ff ff    	je     c001e299 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e37d:	83 ec 0c             	sub    esp,0xc
c001e380:	68 08 16 03 c0       	push   0xc0031608
c001e385:	e8 14 a3 00 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e38a:	c7 04 24 08 16 03 c0 	mov    DWORD PTR [esp],0xc0031608
c001e391:	89 c6                	mov    esi,eax
c001e393:	e8 2a a3 00 00       	call   c00286c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e398:	83 c4 10             	add    esp,0x10
c001e39b:	39 f3                	cmp    ebx,esi
c001e39d:	74 b9                	je     c001e358 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e39f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e3a2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3a5:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e3ab:	75 ab                	jne    c001e358 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e3ad:	e9 7c ff ff ff       	jmp    c001e32e <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e3b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e3b6:	83 ec 0c             	sub    esp,0xc
c001e3b9:	68 a8 c1 02 c0       	push   0xc002c1a8
c001e3be:	e9 55 ff ff ff       	jmp    c001e318 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e3c3:	8b 36                	mov    esi,DWORD PTR [esi]
c001e3c5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e3c9:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e3cc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3cf:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e3d5:	01 d7                	add    edi,edx
c001e3d7:	89 f8                	mov    eax,edi
c001e3d9:	e9 44 fe ff ff       	jmp    c001e222 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e3de <cleanerTaskFunction(void*)>:
c001e3de:	53                   	push   ebx
c001e3df:	83 ec 08             	sub    esp,0x8
c001e3e2:	e8 69 f6 ff ff       	call   c001da50 <unlockScheduler()>
c001e3e7:	e8 62 f6 ff ff       	call   c001da4e <lockScheduler()>
c001e3ec:	80 3d cc 15 03 c0 00 	cmp    BYTE PTR ds:0xc00315cc,0x0
c001e3f3:	0f 85 8e 00 00 00    	jne    c001e487 <cleanerTaskFunction(void*)+0xa9>
c001e3f9:	83 ec 0c             	sub    esp,0xc
c001e3fc:	6a 02                	push   0x2
c001e3fe:	e8 9f fa ff ff       	call   c001dea2 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e403:	83 c4 10             	add    esp,0x10
c001e406:	c6 05 cc 15 03 c0 00 	mov    BYTE PTR ds:0xc00315cc,0x0
c001e40d:	e8 63 f6 ff ff       	call   c001da75 <lockStuff()>
c001e412:	e8 37 f6 ff ff       	call   c001da4e <lockScheduler()>
c001e417:	83 ec 0c             	sub    esp,0xc
c001e41a:	68 f0 15 03 c0       	push   0xc00315f0
c001e41f:	e8 82 a2 00 00       	call   c00286a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e424:	83 c4 10             	add    esp,0x10
c001e427:	84 c0                	test   al,al
c001e429:	75 40                	jne    c001e46b <cleanerTaskFunction(void*)+0x8d>
c001e42b:	83 ec 0c             	sub    esp,0xc
c001e42e:	68 f0 15 03 c0       	push   0xc00315f0
c001e433:	e8 66 a2 00 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e438:	c7 04 24 f0 15 03 c0 	mov    DWORD PTR [esp],0xc00315f0
c001e43f:	89 c3                	mov    ebx,eax
c001e441:	e8 7c a2 00 00       	call   c00286c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e446:	c7 04 24 ae be 02 c0 	mov    DWORD PTR [esp],0xc002beae
c001e44d:	e8 5c 47 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e452:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e455:	e8 bb fc ff ff       	call   c001e115 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e45a:	c7 04 24 c7 be 02 c0 	mov    DWORD PTR [esp],0xc002bec7
c001e461:	e8 48 47 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e466:	83 c4 10             	add    esp,0x10
c001e469:	eb ac                	jmp    c001e417 <cleanerTaskFunction(void*)+0x39>
c001e46b:	e8 e0 f5 ff ff       	call   c001da50 <unlockScheduler()>
c001e470:	e8 9a f9 ff ff       	call   c001de0f <unlockStuff()>
c001e475:	e8 d4 f5 ff ff       	call   c001da4e <lockScheduler()>
c001e47a:	80 3d cc 15 03 c0 00 	cmp    BYTE PTR ds:0xc00315cc,0x0
c001e481:	0f 84 72 ff ff ff    	je     c001e3f9 <cleanerTaskFunction(void*)+0x1b>
c001e487:	e8 c4 f5 ff ff       	call   c001da50 <unlockScheduler()>
c001e48c:	e9 75 ff ff ff       	jmp    c001e406 <cleanerTaskFunction(void*)+0x28>

c001e491 <terminateTask(int)>:
c001e491:	83 ec 14             	sub    esp,0x14
c001e494:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e499:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e49c:	83 c0 0c             	add    eax,0xc
c001e49f:	50                   	push   eax
c001e4a0:	68 04 c2 02 c0       	push   0xc002c204
c001e4a5:	e8 04 47 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e4aa:	e8 c6 f5 ff ff       	call   c001da75 <lockStuff()>
c001e4af:	e8 9a f5 ff ff       	call   c001da4e <lockScheduler()>
c001e4b4:	c7 04 24 da be 02 c0 	mov    DWORD PTR [esp],0xc002beda
c001e4bb:	e8 ee 46 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e4c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e4c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4c9:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e4cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4d1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e4d4:	5a                   	pop    edx
c001e4d5:	59                   	pop    ecx
c001e4d6:	50                   	push   eax
c001e4d7:	68 f0 15 03 c0       	push   0xc00315f0
c001e4dc:	e8 8f a2 00 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4e6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e4ed:	c7 04 24 f4 be 02 c0 	mov    DWORD PTR [esp],0xc002bef4
c001e4f4:	e8 b5 46 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e4f9:	83 c4 10             	add    esp,0x10
c001e4fc:	a1 c8 15 03 c0       	mov    eax,ds:0xc00315c8
c001e501:	85 c0                	test   eax,eax
c001e503:	74 5a                	je     c001e55f <terminateTask(int)+0xce>
c001e505:	83 ec 0c             	sub    esp,0xc
c001e508:	68 0e bf 02 c0       	push   0xc002bf0e
c001e50d:	e8 9c 46 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e512:	58                   	pop    eax
c001e513:	c6 05 cc 15 03 c0 01 	mov    BYTE PTR ds:0xc00315cc,0x1
c001e51a:	ff 35 c8 15 03 c0    	push   DWORD PTR ds:0xc00315c8
c001e520:	e8 41 fb ff ff       	call   c001e066 <unblockTask(ThreadControlBlock*)>
c001e525:	c7 04 24 28 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf28
c001e52c:	e8 7d 46 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e531:	83 c4 10             	add    esp,0x10
c001e534:	e8 17 f5 ff ff       	call   c001da50 <unlockScheduler()>
c001e539:	e8 d1 f8 ff ff       	call   c001de0f <unlockStuff()>
c001e53e:	83 ec 0c             	sub    esp,0xc
c001e541:	68 60 bf 02 c0       	push   0xc002bf60
c001e546:	e8 63 46 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e54b:	83 c4 10             	add    esp,0x10
c001e54e:	e8 fb f4 ff ff       	call   c001da4e <lockScheduler()>
c001e553:	e8 32 f8 ff ff       	call   c001dd8a <schedule()>
c001e558:	e8 f3 f4 ff ff       	call   c001da50 <unlockScheduler()>
c001e55d:	eb ef                	jmp    c001e54e <terminateTask(int)+0xbd>
c001e55f:	83 ec 0c             	sub    esp,0xc
c001e562:	68 42 bf 02 c0       	push   0xc002bf42
c001e567:	e8 42 46 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e56c:	83 c4 10             	add    esp,0x10
c001e56f:	eb c3                	jmp    c001e534 <terminateTask(int)+0xa3>

c001e571 <Thr::terminateFromIRQ(int)>:
c001e571:	83 ec 18             	sub    esp,0x18
c001e574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e578:	e8 14 ff ff ff       	call   c001e491 <terminateTask(int)>
c001e57d:	90                   	nop

c001e57e <Semaphore::release()>:
c001e57e:	83 ec 0c             	sub    esp,0xc
c001e581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e585:	e8 eb f4 ff ff       	call   c001da75 <lockStuff()>
c001e58a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e58d:	85 d2                	test   edx,edx
c001e58f:	74 1a                	je     c001e5ab <Semaphore::release()+0x2d>
c001e591:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e594:	83 ec 0c             	sub    esp,0xc
c001e597:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e59a:	52                   	push   edx
c001e59b:	e8 c6 fa ff ff       	call   c001e066 <unblockTask(ThreadControlBlock*)>
c001e5a0:	83 c4 10             	add    esp,0x10
c001e5a3:	83 c4 0c             	add    esp,0xc
c001e5a6:	e9 64 f8 ff ff       	jmp    c001de0f <unlockStuff()>
c001e5ab:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e5ae:	83 c4 0c             	add    esp,0xc
c001e5b1:	e9 59 f8 ff ff       	jmp    c001de0f <unlockStuff()>

c001e5b6 <__static_initialization_and_destruction_0(int, int)>:
c001e5b6:	83 ec 0c             	sub    esp,0xc
c001e5b9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e5be:	0f 85 88 00 00 00    	jne    c001e64c <__static_initialization_and_destruction_0(int, int)+0x96>
c001e5c4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e5cc:	75 7e                	jne    c001e64c <__static_initialization_and_destruction_0(int, int)+0x96>
c001e5ce:	83 ec 0c             	sub    esp,0xc
c001e5d1:	68 08 16 03 c0       	push   0xc0031608
c001e5d6:	e8 45 a3 00 00       	call   c0028920 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e5db:	83 c4 10             	add    esp,0x10
c001e5de:	83 ec 04             	sub    esp,0x4
c001e5e1:	68 bc cf 02 c0       	push   0xc002cfbc
c001e5e6:	68 08 16 03 c0       	push   0xc0031608
c001e5eb:	68 e0 88 02 c0       	push   0xc00288e0
c001e5f0:	e8 53 44 ff ff       	call   c0012a48 <__cxa_atexit>
c001e5f5:	83 c4 10             	add    esp,0x10
c001e5f8:	83 ec 0c             	sub    esp,0xc
c001e5fb:	68 fc 15 03 c0       	push   0xc00315fc
c001e600:	e8 1b a3 00 00       	call   c0028920 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e605:	83 c4 10             	add    esp,0x10
c001e608:	83 ec 04             	sub    esp,0x4
c001e60b:	68 bc cf 02 c0       	push   0xc002cfbc
c001e610:	68 fc 15 03 c0       	push   0xc00315fc
c001e615:	68 e0 88 02 c0       	push   0xc00288e0
c001e61a:	e8 29 44 ff ff       	call   c0012a48 <__cxa_atexit>
c001e61f:	83 c4 10             	add    esp,0x10
c001e622:	83 ec 0c             	sub    esp,0xc
c001e625:	68 f0 15 03 c0       	push   0xc00315f0
c001e62a:	e8 f1 a2 00 00       	call   c0028920 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e62f:	83 c4 10             	add    esp,0x10
c001e632:	83 ec 04             	sub    esp,0x4
c001e635:	68 bc cf 02 c0       	push   0xc002cfbc
c001e63a:	68 f0 15 03 c0       	push   0xc00315f0
c001e63f:	68 e0 88 02 c0       	push   0xc00288e0
c001e644:	e8 ff 43 ff ff       	call   c0012a48 <__cxa_atexit>
c001e649:	83 c4 10             	add    esp,0x10
c001e64c:	90                   	nop
c001e64d:	83 c4 0c             	add    esp,0xc
c001e650:	c3                   	ret    

c001e651 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e651:	83 ec 0c             	sub    esp,0xc
c001e654:	83 ec 08             	sub    esp,0x8
c001e657:	68 ff ff 00 00       	push   0xffff
c001e65c:	6a 01                	push   0x1
c001e65e:	e8 53 ff ff ff       	call   c001e5b6 <__static_initialization_and_destruction_0(int, int)>
c001e663:	83 c4 10             	add    esp,0x10
c001e666:	83 c4 0c             	add    esp,0xc
c001e669:	c3                   	ret    

c001e66a <Vm::inbv(unsigned short)>:
c001e66a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e66e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e673:	75 06                	jne    c001e67b <Vm::inbv(unsigned short)+0x11>
c001e675:	a0 4c 16 03 c0       	mov    al,ds:0xc003164c
c001e67a:	c3                   	ret    
c001e67b:	ec                   	in     al,dx
c001e67c:	c3                   	ret    

c001e67d <Vm::outbv(unsigned short, unsigned char)>:
c001e67d:	53                   	push   ebx
c001e67e:	83 ec 08             	sub    esp,0x8
c001e681:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e685:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e689:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e68e:	75 38                	jne    c001e6c8 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e690:	0f b6 c3             	movzx  eax,bl
c001e693:	51                   	push   ecx
c001e694:	51                   	push   ecx
c001e695:	50                   	push   eax
c001e696:	68 23 c2 02 c0       	push   0xc002c223
c001e69b:	e8 0e 45 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001e6a0:	8b 15 4c 16 03 c0    	mov    edx,DWORD PTR ds:0xc003164c
c001e6a6:	83 c4 10             	add    esp,0x10
c001e6a9:	8d 42 01             	lea    eax,[edx+0x1]
c001e6ac:	88 9a 60 16 03 c0    	mov    BYTE PTR [edx-0x3ffce9a0],bl
c001e6b2:	a3 4c 16 03 c0       	mov    ds:0xc003164c,eax
c001e6b7:	83 f8 20             	cmp    eax,0x20
c001e6ba:	75 0f                	jne    c001e6cb <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e6bc:	c7 05 4c 16 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003164c,0x1f
c001e6c6:	eb 03                	jmp    c001e6cb <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e6c8:	88 d8                	mov    al,bl
c001e6ca:	ee                   	out    dx,al
c001e6cb:	83 c4 08             	add    esp,0x8
c001e6ce:	5b                   	pop    ebx
c001e6cf:	c3                   	ret    

c001e6d0 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e6d0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6d5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6da:	c1 e0 04             	shl    eax,0x4
c001e6dd:	01 d0                	add    eax,edx
c001e6df:	c3                   	ret    

c001e6e0 <Vm::getSegment(unsigned int)>:
c001e6e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6e4:	c1 e8 10             	shr    eax,0x10
c001e6e7:	c3                   	ret    

c001e6e8 <Vm::getOffset(unsigned int)>:
c001e6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6ec:	c3                   	ret    

c001e6ed <Vm::mainloop2()>:
c001e6ed:	83 ec 0c             	sub    esp,0xc
c001e6f0:	e8 59 f3 ff ff       	call   c001da4e <lockScheduler()>
c001e6f5:	83 ec 0c             	sub    esp,0xc
c001e6f8:	c6 05 45 16 03 c0 01 	mov    BYTE PTR ds:0xc0031645,0x1
c001e6ff:	6a 02                	push   0x2
c001e701:	e8 9c f7 ff ff       	call   c001dea2 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e706:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e70b:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e70f:	52                   	push   edx
c001e710:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e714:	52                   	push   edx
c001e715:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e719:	52                   	push   edx
c001e71a:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e71e:	50                   	push   eax
c001e71f:	e8 d6 1b fe ff       	call   c00002fa <goToVM86>
c001e724:	83 c4 2c             	add    esp,0x2c
c001e727:	c3                   	ret    

c001e728 <Vm::mainVm8086Loop(void*)>:
c001e728:	83 ec 0c             	sub    esp,0xc
c001e72b:	e8 20 f3 ff ff       	call   c001da50 <unlockScheduler()>
c001e730:	83 c4 0c             	add    esp,0xc
c001e733:	eb b8                	jmp    c001e6ed <Vm::mainloop2()>

c001e735 <Vm::mainloop3(unsigned long)>:
c001e735:	53                   	push   ebx
c001e736:	83 ec 08             	sub    esp,0x8
c001e739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e73d:	e8 0c f3 ff ff       	call   c001da4e <lockScheduler()>
c001e742:	83 ec 0c             	sub    esp,0xc
c001e745:	89 1d 40 16 03 c0    	mov    DWORD PTR ds:0xc0031640,ebx
c001e74b:	6a 02                	push   0x2
c001e74d:	c6 05 44 16 03 c0 01 	mov    BYTE PTR ds:0xc0031644,0x1
c001e754:	e8 49 f7 ff ff       	call   c001dea2 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e759:	83 c4 18             	add    esp,0x18
c001e75c:	5b                   	pop    ebx
c001e75d:	eb 8e                	jmp    c001e6ed <Vm::mainloop2()>

c001e75f <Vm::initialise8086()>:
c001e75f:	83 ec 0c             	sub    esp,0xc
c001e762:	68 80 00 00 00       	push   0x80
c001e767:	6a 00                	push   0x0
c001e769:	68 28 e7 01 c0       	push   0xc001e728
c001e76e:	ff 35 14 16 03 c0    	push   DWORD PTR ds:0xc0031614
c001e774:	e8 07 f4 ff ff       	call   c001db80 <Process::createThread(void (*)(void*), void*, int)>
c001e779:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e780:	a3 48 16 03 c0       	mov    ds:0xc0031648,eax
c001e785:	68 00 01 00 00       	push   0x100
c001e78a:	a1 14 16 03 c0       	mov    eax,ds:0xc0031614
c001e78f:	6a 00                	push   0x0
c001e791:	6a 00                	push   0x0
c001e793:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e799:	e8 42 3d ff ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e79e:	83 c4 2c             	add    esp,0x2c
c001e7a1:	c3                   	ret    

c001e7a2 <Vm::finish8086()>:
c001e7a2:	53                   	push   ebx
c001e7a3:	83 ec 08             	sub    esp,0x8
c001e7a6:	e8 a3 f2 ff ff       	call   c001da4e <lockScheduler()>
c001e7ab:	80 3d 44 16 03 c0 00 	cmp    BYTE PTR ds:0xc0031644,0x0
c001e7b2:	75 0c                	jne    c001e7c0 <Vm::finish8086()+0x1e>
c001e7b4:	e8 d1 f5 ff ff       	call   c001dd8a <schedule()>
c001e7b9:	e8 92 f2 ff ff       	call   c001da50 <unlockScheduler()>
c001e7be:	eb e6                	jmp    c001e7a6 <Vm::finish8086()+0x4>
c001e7c0:	83 ec 0c             	sub    esp,0xc
c001e7c3:	8b 1d 40 16 03 c0    	mov    ebx,DWORD PTR ds:0xc0031640
c001e7c9:	ff 35 48 16 03 c0    	push   DWORD PTR ds:0xc0031648
c001e7cf:	c6 05 44 16 03 c0 00 	mov    BYTE PTR ds:0xc0031644,0x0
c001e7d6:	e8 8b f8 ff ff       	call   c001e066 <unblockTask(ThreadControlBlock*)>
c001e7db:	e8 70 f2 ff ff       	call   c001da50 <unlockScheduler()>
c001e7e0:	89 d8                	mov    eax,ebx
c001e7e2:	83 c4 18             	add    esp,0x18
c001e7e5:	5b                   	pop    ebx
c001e7e6:	c3                   	ret    

c001e7e7 <Vm::getOutput8086(unsigned char*)>:
c001e7e7:	83 ec 10             	sub    esp,0x10
c001e7ea:	ff 35 4c 16 03 c0    	push   DWORD PTR ds:0xc003164c
c001e7f0:	68 60 16 03 c0       	push   0xc0031660
c001e7f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7f9:	e8 46 1f fe ff       	call   c0000744 <memcpy>
c001e7fe:	a1 4c 16 03 c0       	mov    eax,ds:0xc003164c
c001e803:	c7 05 4c 16 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003164c,0x0
c001e80d:	83 c4 1c             	add    esp,0x1c
c001e810:	c3                   	ret    

c001e811 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e811:	55                   	push   ebp
c001e812:	57                   	push   edi
c001e813:	56                   	push   esi
c001e814:	53                   	push   ebx
c001e815:	83 ec 2c             	sub    esp,0x2c
c001e818:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e81c:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e820:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e824:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e828:	e8 21 f2 ff ff       	call   c001da4e <lockScheduler()>
c001e82d:	a0 45 16 03 c0       	mov    al,ds:0xc0031645
c001e832:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e836:	84 c0                	test   al,al
c001e838:	75 0c                	jne    c001e846 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e83a:	e8 4b f5 ff ff       	call   c001dd8a <schedule()>
c001e83f:	e8 0c f2 ff ff       	call   c001da50 <unlockScheduler()>
c001e844:	eb e2                	jmp    c001e828 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e846:	a1 48 16 03 c0       	mov    eax,ds:0xc0031648
c001e84b:	c7 05 4c 16 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003164c,0x0
c001e855:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e859:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e85d:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e861:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e865:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e869:	50                   	push   eax
c001e86a:	6a 20                	push   0x20
c001e86c:	6a 00                	push   0x0
c001e86e:	68 60 16 03 c0       	push   0xc0031660
c001e873:	e8 00 1f fe ff       	call   c0000778 <memset>
c001e878:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e87f:	e8 bc 0f ff ff       	call   c000f840 <malloc>
c001e884:	83 c4 0c             	add    esp,0xc
c001e887:	89 c7                	mov    edi,eax
c001e889:	ff 35 14 16 03 c0    	push   DWORD PTR ds:0xc0031614
c001e88f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e893:	50                   	push   eax
c001e894:	e8 6d 48 ff ff       	call   c0013106 <File::File(char const*, Process*)>
c001e899:	83 c4 10             	add    esp,0x10
c001e89c:	85 ff                	test   edi,edi
c001e89e:	75 0a                	jne    c001e8aa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e8a0:	83 ec 0c             	sub    esp,0xc
c001e8a3:	68 3f c2 02 c0       	push   0xc002c23f
c001e8a8:	eb 27                	jmp    c001e8d1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e8aa:	50                   	push   eax
c001e8ab:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e8af:	50                   	push   eax
c001e8b0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e8b4:	50                   	push   eax
c001e8b5:	57                   	push   edi
c001e8b6:	e8 5b 4b ff ff       	call   c0013416 <File::stat(unsigned long long*, bool*)>
c001e8bb:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e8c0:	83 c4 10             	add    esp,0x10
c001e8c3:	89 e8                	mov    eax,ebp
c001e8c5:	84 c0                	test   al,al
c001e8c7:	74 19                	je     c001e8e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e8c9:	83 ec 0c             	sub    esp,0xc
c001e8cc:	68 53 c2 02 c0       	push   0xc002c253
c001e8d1:	e8 53 b9 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001e8d6:	31 ed                	xor    ebp,ebp
c001e8d8:	e8 73 f1 ff ff       	call   c001da50 <unlockScheduler()>
c001e8dd:	83 c4 10             	add    esp,0x10
c001e8e0:	eb 75                	jmp    c001e957 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e8e2:	50                   	push   eax
c001e8e3:	50                   	push   eax
c001e8e4:	6a 01                	push   0x1
c001e8e6:	57                   	push   edi
c001e8e7:	e8 7e 48 ff ff       	call   c001316a <File::open(FileOpenMode)>
c001e8ec:	83 c4 10             	add    esp,0x10
c001e8ef:	85 c0                	test   eax,eax
c001e8f1:	74 17                	je     c001e90a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e8f3:	83 ec 0c             	sub    esp,0xc
c001e8f6:	68 6c c2 02 c0       	push   0xc002c26c
c001e8fb:	e8 29 b9 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001e900:	e8 4b f1 ff ff       	call   c001da50 <unlockScheduler()>
c001e905:	83 c4 10             	add    esp,0x10
c001e908:	eb 4d                	jmp    c001e957 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e90a:	0f b7 f6             	movzx  esi,si
c001e90d:	50                   	push   eax
c001e90e:	0f b7 db             	movzx  ebx,bx
c001e911:	50                   	push   eax
c001e912:	56                   	push   esi
c001e913:	53                   	push   ebx
c001e914:	e8 b7 fd ff ff       	call   c001e6d0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e919:	5a                   	pop    edx
c001e91a:	8b 17                	mov    edx,DWORD PTR [edi]
c001e91c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e920:	51                   	push   ecx
c001e921:	50                   	push   eax
c001e922:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e926:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e92a:	57                   	push   edi
c001e92b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e92e:	83 c4 14             	add    esp,0x14
c001e931:	57                   	push   edi
c001e932:	e8 91 48 ff ff       	call   c00131c8 <File::close()>
c001e937:	c6 05 45 16 03 c0 00 	mov    BYTE PTR ds:0xc0031645,0x0
c001e93e:	e8 0d f1 ff ff       	call   c001da50 <unlockScheduler()>
c001e943:	59                   	pop    ecx
c001e944:	ff 35 48 16 03 c0    	push   DWORD PTR ds:0xc0031648
c001e94a:	e8 17 f7 ff ff       	call   c001e066 <unblockTask(ThreadControlBlock*)>
c001e94f:	83 c4 10             	add    esp,0x10
c001e952:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e957:	83 c4 2c             	add    esp,0x2c
c001e95a:	89 e8                	mov    eax,ebp
c001e95c:	5b                   	pop    ebx
c001e95d:	5e                   	pop    esi
c001e95e:	5f                   	pop    edi
c001e95f:	5d                   	pop    ebp
c001e960:	c3                   	ret    

c001e961 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e961:	57                   	push   edi
c001e962:	56                   	push   esi
c001e963:	53                   	push   ebx
c001e964:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e96c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e970:	83 e8 06             	sub    eax,0x6
c001e973:	0f b7 c0             	movzx  eax,ax
c001e976:	50                   	push   eax
c001e977:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e97c:	50                   	push   eax
c001e97d:	e8 4e fd ff ff       	call   c001e6d0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e982:	5a                   	pop    edx
c001e983:	5e                   	pop    esi
c001e984:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e987:	8d 56 fa             	lea    edx,[esi-0x6]
c001e98a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e990:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e993:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e996:	83 c2 02             	add    edx,0x2
c001e999:	66 89 10             	mov    WORD PTR [eax],dx
c001e99c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e99f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e9a3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e9a6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e9aa:	89 d6                	mov    esi,edx
c001e9ac:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e9b2:	66 81 e6 ff fd       	and    si,0xfdff
c001e9b7:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e9bb:	74 07                	je     c001e9c4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e9bd:	89 d6                	mov    esi,edx
c001e9bf:	66 81 ce 00 02       	or     si,0x200
c001e9c4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e9c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9cd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e9d1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e9d9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e9dc:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e9e4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e9e7:	5b                   	pop    ebx
c001e9e8:	5e                   	pop    esi
c001e9e9:	5f                   	pop    edi
c001e9ea:	c3                   	ret    

c001e9eb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e9eb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9f0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9f5:	c1 e0 04             	shl    eax,0x4
c001e9f8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e9fb:	c3                   	ret    

c001e9fc <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e9fc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea01:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea06:	c1 e0 04             	shl    eax,0x4
c001ea09:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ea0d:	c3                   	ret    

c001ea0e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ea0e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea13:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea18:	c1 e0 04             	shl    eax,0x4
c001ea1b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ea1e:	c3                   	ret    

c001ea1f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ea1f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea24:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea29:	c1 e0 04             	shl    eax,0x4
c001ea2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea30:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ea33:	c3                   	ret    

c001ea34 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ea34:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea39:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea3e:	c1 e0 04             	shl    eax,0x4
c001ea41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea45:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ea49:	c3                   	ret    

c001ea4a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ea4a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea4f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea54:	c1 e0 04             	shl    eax,0x4
c001ea57:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea5b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ea5e:	c3                   	ret    

c001ea5f <Vm::faultHandler(regs*)>:
c001ea5f:	55                   	push   ebp
c001ea60:	57                   	push   edi
c001ea61:	56                   	push   esi
c001ea62:	53                   	push   ebx
c001ea63:	83 ec 1c             	sub    esp,0x1c
c001ea66:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ea6a:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ea6d:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ea70:	0f b7 c1             	movzx  eax,cx
c001ea73:	50                   	push   eax
c001ea74:	0f b7 c3             	movzx  eax,bx
c001ea77:	c1 e3 04             	shl    ebx,0x4
c001ea7a:	50                   	push   eax
c001ea7b:	e8 50 fc ff ff       	call   c001e6d0 <Vm::realToLinear(unsigned short, unsigned short)>
c001ea80:	5a                   	pop    edx
c001ea81:	89 c5                	mov    ebp,eax
c001ea83:	5e                   	pop    esi
c001ea84:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ea88:	50                   	push   eax
c001ea89:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ea8d:	50                   	push   eax
c001ea8e:	e8 3d fc ff ff       	call   c001e6d0 <Vm::realToLinear(unsigned short, unsigned short)>
c001ea93:	01 cb                	add    ebx,ecx
c001ea95:	89 c6                	mov    esi,eax
c001ea97:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ea9b:	50                   	push   eax
c001ea9c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eaa0:	50                   	push   eax
c001eaa1:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eaa5:	50                   	push   eax
c001eaa6:	55                   	push   ebp
c001eaa7:	53                   	push   ebx
c001eaa8:	b3 06                	mov    bl,0x6
c001eaaa:	68 85 c2 02 c0       	push   0xc002c285
c001eaaf:	e8 fa 40 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001eab4:	83 c4 20             	add    esp,0x20
c001eab7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001eabc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001eac1:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eac5:	3c 9d                	cmp    al,0x9d
c001eac7:	0f 84 d7 02 00 00    	je     c001eda4 <Vm::faultHandler(regs*)+0x345>
c001eacd:	0f 87 a3 00 00 00    	ja     c001eb76 <Vm::faultHandler(regs*)+0x117>
c001ead3:	3c 66                	cmp    al,0x66
c001ead5:	0f 84 15 02 00 00    	je     c001ecf0 <Vm::faultHandler(regs*)+0x291>
c001eadb:	77 5f                	ja     c001eb3c <Vm::faultHandler(regs*)+0xdd>
c001eadd:	3c 36                	cmp    al,0x36
c001eadf:	0f 84 f1 01 00 00    	je     c001ecd6 <Vm::faultHandler(regs*)+0x277>
c001eae5:	77 28                	ja     c001eb0f <Vm::faultHandler(regs*)+0xb0>
c001eae7:	3c 26                	cmp    al,0x26
c001eae9:	0f 84 99 01 00 00    	je     c001ec88 <Vm::faultHandler(regs*)+0x229>
c001eaef:	3c 2e                	cmp    al,0x2e
c001eaf1:	0f 85 3b 07 00 00    	jne    c001f232 <Vm::faultHandler(regs*)+0x7d3>
c001eaf7:	83 ec 0c             	sub    esp,0xc
c001eafa:	31 db                	xor    ebx,ebx
c001eafc:	68 9a c2 02 c0       	push   0xc002c29a
c001eb01:	e8 a8 40 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001eb06:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eb09:	83 c4 10             	add    esp,0x10
c001eb0c:	45                   	inc    ebp
c001eb0d:	eb b2                	jmp    c001eac1 <Vm::faultHandler(regs*)+0x62>
c001eb0f:	3c 64                	cmp    al,0x64
c001eb11:	0f 84 8b 01 00 00    	je     c001eca2 <Vm::faultHandler(regs*)+0x243>
c001eb17:	0f 87 9f 01 00 00    	ja     c001ecbc <Vm::faultHandler(regs*)+0x25d>
c001eb1d:	3c 3e                	cmp    al,0x3e
c001eb1f:	0f 85 0d 07 00 00    	jne    c001f232 <Vm::faultHandler(regs*)+0x7d3>
c001eb25:	83 ec 0c             	sub    esp,0xc
c001eb28:	b3 01                	mov    bl,0x1
c001eb2a:	68 9e c2 02 c0       	push   0xc002c29e
c001eb2f:	e8 7a 40 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001eb34:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eb37:	83 c4 10             	add    esp,0x10
c001eb3a:	eb d0                	jmp    c001eb0c <Vm::faultHandler(regs*)+0xad>
c001eb3c:	3c 6d                	cmp    al,0x6d
c001eb3e:	0f 84 af 03 00 00    	je     c001eef3 <Vm::faultHandler(regs*)+0x494>
c001eb44:	77 15                	ja     c001eb5b <Vm::faultHandler(regs*)+0xfc>
c001eb46:	3c 67                	cmp    al,0x67
c001eb48:	0f 84 bf 01 00 00    	je     c001ed0d <Vm::faultHandler(regs*)+0x2ae>
c001eb4e:	3c 6c                	cmp    al,0x6c
c001eb50:	0f 84 3f 03 00 00    	je     c001ee95 <Vm::faultHandler(regs*)+0x436>
c001eb56:	e9 d7 06 00 00       	jmp    c001f232 <Vm::faultHandler(regs*)+0x7d3>
c001eb5b:	3c 6f                	cmp    al,0x6f
c001eb5d:	0f 84 a4 04 00 00    	je     c001f007 <Vm::faultHandler(regs*)+0x5a8>
c001eb63:	0f 82 11 04 00 00    	jb     c001ef7a <Vm::faultHandler(regs*)+0x51b>
c001eb69:	3c 9c                	cmp    al,0x9c
c001eb6b:	0f 84 ba 01 00 00    	je     c001ed2b <Vm::faultHandler(regs*)+0x2cc>
c001eb71:	e9 bc 06 00 00       	jmp    c001f232 <Vm::faultHandler(regs*)+0x7d3>
c001eb76:	3c ec                	cmp    al,0xec
c001eb78:	0f 84 24 06 00 00    	je     c001f1a2 <Vm::faultHandler(regs*)+0x743>
c001eb7e:	0f 87 93 00 00 00    	ja     c001ec17 <Vm::faultHandler(regs*)+0x1b8>
c001eb84:	3c e4                	cmp    al,0xe4
c001eb86:	0f 84 5c 05 00 00    	je     c001f0e8 <Vm::faultHandler(regs*)+0x689>
c001eb8c:	77 6a                	ja     c001ebf8 <Vm::faultHandler(regs*)+0x199>
c001eb8e:	3c cd                	cmp    al,0xcd
c001eb90:	0f 84 7e 02 00 00    	je     c001ee14 <Vm::faultHandler(regs*)+0x3b5>
c001eb96:	3c cf                	cmp    al,0xcf
c001eb98:	0f 85 94 06 00 00    	jne    c001f232 <Vm::faultHandler(regs*)+0x7d3>
c001eb9e:	83 ec 0c             	sub    esp,0xc
c001eba1:	68 e2 c2 02 c0       	push   0xc002c2e2
c001eba6:	e8 03 40 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ebab:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ebae:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ebb1:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ebb5:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ebb8:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ebbc:	0d 00 02 02 00       	or     eax,0x20200
c001ebc1:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ebc4:	56                   	push   esi
c001ebc5:	53                   	push   ebx
c001ebc6:	52                   	push   edx
c001ebc7:	68 e8 c2 02 c0       	push   0xc002c2e8
c001ebcc:	e8 dd 3f ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ebd1:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ebd5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ebdb:	66 c1 e8 09          	shr    ax,0x9
c001ebdf:	83 e0 01             	and    eax,0x1
c001ebe2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ebe5:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ebe8:	83 c0 06             	add    eax,0x6
c001ebeb:	25 ff ff 00 00       	and    eax,0xffff
c001ebf0:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ebf3:	e9 95 02 00 00       	jmp    c001ee8d <Vm::faultHandler(regs*)+0x42e>
c001ebf8:	3c e6                	cmp    al,0xe6
c001ebfa:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ebfe:	0f 84 4e 05 00 00    	je     c001f152 <Vm::faultHandler(regs*)+0x6f3>
c001ec04:	0f 82 0a 05 00 00    	jb     c001f114 <Vm::faultHandler(regs*)+0x6b5>
c001ec0a:	3c e7                	cmp    al,0xe7
c001ec0c:	0f 84 69 05 00 00    	je     c001f17b <Vm::faultHandler(regs*)+0x71c>
c001ec12:	e9 1b 06 00 00       	jmp    c001f232 <Vm::faultHandler(regs*)+0x7d3>
c001ec17:	3c ef                	cmp    al,0xef
c001ec19:	0f 84 e6 05 00 00    	je     c001f205 <Vm::faultHandler(regs*)+0x7a6>
c001ec1f:	77 37                	ja     c001ec58 <Vm::faultHandler(regs*)+0x1f9>
c001ec21:	3c ed                	cmp    al,0xed
c001ec23:	0f 84 a3 05 00 00    	je     c001f1cc <Vm::faultHandler(regs*)+0x76d>
c001ec29:	3c ee                	cmp    al,0xee
c001ec2b:	0f 85 01 06 00 00    	jne    c001f232 <Vm::faultHandler(regs*)+0x7d3>
c001ec31:	52                   	push   edx
c001ec32:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ec35:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ec38:	68 83 c3 02 c0       	push   0xc002c383
c001ec3d:	e8 6c 3f ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ec42:	59                   	pop    ecx
c001ec43:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ec47:	5b                   	pop    ebx
c001ec48:	50                   	push   eax
c001ec49:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ec4d:	50                   	push   eax
c001ec4e:	e8 2a fa ff ff       	call   c001e67d <Vm::outbv(unsigned short, unsigned char)>
c001ec53:	e9 a5 05 00 00       	jmp    c001f1fd <Vm::faultHandler(regs*)+0x79e>
c001ec58:	3c fa                	cmp    al,0xfa
c001ec5a:	0f 84 f7 01 00 00    	je     c001ee57 <Vm::faultHandler(regs*)+0x3f8>
c001ec60:	3c fb                	cmp    al,0xfb
c001ec62:	0f 84 0a 02 00 00    	je     c001ee72 <Vm::faultHandler(regs*)+0x413>
c001ec68:	3c f3                	cmp    al,0xf3
c001ec6a:	0f 85 c2 05 00 00    	jne    c001f232 <Vm::faultHandler(regs*)+0x7d3>
c001ec70:	83 ec 0c             	sub    esp,0xc
c001ec73:	68 bb c2 02 c0       	push   0xc002c2bb
c001ec78:	e8 31 3f ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ec7d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ec80:	83 c4 10             	add    esp,0x10
c001ec83:	e9 84 fe ff ff       	jmp    c001eb0c <Vm::faultHandler(regs*)+0xad>
c001ec88:	83 ec 0c             	sub    esp,0xc
c001ec8b:	b3 02                	mov    bl,0x2
c001ec8d:	68 96 c2 02 c0       	push   0xc002c296
c001ec92:	e8 17 3f ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ec97:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ec9a:	83 c4 10             	add    esp,0x10
c001ec9d:	e9 6a fe ff ff       	jmp    c001eb0c <Vm::faultHandler(regs*)+0xad>
c001eca2:	83 ec 0c             	sub    esp,0xc
c001eca5:	b3 03                	mov    bl,0x3
c001eca7:	68 a2 c2 02 c0       	push   0xc002c2a2
c001ecac:	e8 fd 3e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ecb1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ecb4:	83 c4 10             	add    esp,0x10
c001ecb7:	e9 50 fe ff ff       	jmp    c001eb0c <Vm::faultHandler(regs*)+0xad>
c001ecbc:	83 ec 0c             	sub    esp,0xc
c001ecbf:	b3 04                	mov    bl,0x4
c001ecc1:	68 a6 c2 02 c0       	push   0xc002c2a6
c001ecc6:	e8 e3 3e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001eccb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ecce:	83 c4 10             	add    esp,0x10
c001ecd1:	e9 36 fe ff ff       	jmp    c001eb0c <Vm::faultHandler(regs*)+0xad>
c001ecd6:	83 ec 0c             	sub    esp,0xc
c001ecd9:	b3 05                	mov    bl,0x5
c001ecdb:	68 aa c2 02 c0       	push   0xc002c2aa
c001ece0:	e8 c9 3e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ece5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ece8:	83 c4 10             	add    esp,0x10
c001eceb:	e9 1c fe ff ff       	jmp    c001eb0c <Vm::faultHandler(regs*)+0xad>
c001ecf0:	83 ec 0c             	sub    esp,0xc
c001ecf3:	68 ae c2 02 c0       	push   0xc002c2ae
c001ecf8:	e8 b1 3e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ecfd:	83 c4 10             	add    esp,0x10
c001ed00:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed03:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ed08:	e9 ff fd ff ff       	jmp    c001eb0c <Vm::faultHandler(regs*)+0xad>
c001ed0d:	50                   	push   eax
c001ed0e:	50                   	push   eax
c001ed0f:	6a 01                	push   0x1
c001ed11:	68 b3 c2 02 c0       	push   0xc002c2b3
c001ed16:	e8 93 3e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ed1b:	83 c4 10             	add    esp,0x10
c001ed1e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed21:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001ed26:	e9 e1 fd ff ff       	jmp    c001eb0c <Vm::faultHandler(regs*)+0xad>
c001ed2b:	83 ec 0c             	sub    esp,0xc
c001ed2e:	68 c1 c2 02 c0       	push   0xc002c2c1
c001ed33:	e8 76 3e ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ed38:	83 c4 10             	add    esp,0x10
c001ed3b:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001ed3e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ed43:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001ed46:	74 2f                	je     c001ed77 <Vm::faultHandler(regs*)+0x318>
c001ed48:	83 ea 04             	sub    edx,0x4
c001ed4b:	25 ff 0d 00 00       	and    eax,0xdff
c001ed50:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed56:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ed59:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ed5c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ed62:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ed66:	0f 84 bf 04 00 00    	je     c001f22b <Vm::faultHandler(regs*)+0x7cc>
c001ed6c:	80 cc 02             	or     ah,0x2
c001ed6f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ed72:	e9 b4 04 00 00       	jmp    c001f22b <Vm::faultHandler(regs*)+0x7cc>
c001ed77:	83 ea 02             	sub    edx,0x2
c001ed7a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed80:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ed83:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ed87:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ed8d:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ed91:	74 05                	je     c001ed98 <Vm::faultHandler(regs*)+0x339>
c001ed93:	80 cc 02             	or     ah,0x2
c001ed96:	eb 03                	jmp    c001ed9b <Vm::faultHandler(regs*)+0x33c>
c001ed98:	80 e4 fd             	and    ah,0xfd
c001ed9b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ed9f:	e9 87 04 00 00       	jmp    c001f22b <Vm::faultHandler(regs*)+0x7cc>
c001eda4:	83 ec 0c             	sub    esp,0xc
c001eda7:	68 c8 c2 02 c0       	push   0xc002c2c8
c001edac:	e8 fd 3d ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001edb1:	83 c4 10             	add    esp,0x10
c001edb4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001edb9:	74 28                	je     c001ede3 <Vm::faultHandler(regs*)+0x384>
c001edbb:	8b 06                	mov    eax,DWORD PTR [esi]
c001edbd:	25 ff 0d 00 00       	and    eax,0xdff
c001edc2:	0d 00 02 02 00       	or     eax,0x20200
c001edc7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001edca:	8b 06                	mov    eax,DWORD PTR [esi]
c001edcc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001edd2:	c1 e8 09             	shr    eax,0x9
c001edd5:	83 e0 01             	and    eax,0x1
c001edd8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eddb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001edde:	83 c0 04             	add    eax,0x4
c001ede1:	eb 24                	jmp    c001ee07 <Vm::faultHandler(regs*)+0x3a8>
c001ede3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ede6:	0d 00 02 02 00       	or     eax,0x20200
c001edeb:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001edee:	66 8b 06             	mov    ax,WORD PTR [esi]
c001edf1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001edf7:	66 c1 e8 09          	shr    ax,0x9
c001edfb:	83 e0 01             	and    eax,0x1
c001edfe:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ee01:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ee04:	83 c0 02             	add    eax,0x2
c001ee07:	25 ff ff 00 00       	and    eax,0xffff
c001ee0c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ee0f:	e9 17 04 00 00       	jmp    c001f22b <Vm::faultHandler(regs*)+0x7cc>
c001ee14:	53                   	push   ebx
c001ee15:	53                   	push   ebx
c001ee16:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee1a:	50                   	push   eax
c001ee1b:	68 ce c2 02 c0       	push   0xc002c2ce
c001ee20:	e8 89 3d ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ee25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee29:	83 c4 10             	add    esp,0x10
c001ee2c:	3c ee                	cmp    al,0xee
c001ee2e:	75 10                	jne    c001ee40 <Vm::faultHandler(regs*)+0x3e1>
c001ee30:	83 ec 0c             	sub    esp,0xc
c001ee33:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ee36:	e8 fa f8 ff ff       	call   c001e735 <Vm::mainloop3(unsigned long)>
c001ee3b:	e9 c0 03 00 00       	jmp    c001f200 <Vm::faultHandler(regs*)+0x7a1>
c001ee40:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	53                   	push   ebx
c001ee48:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001ee4c:	53                   	push   ebx
c001ee4d:	55                   	push   ebp
c001ee4e:	50                   	push   eax
c001ee4f:	57                   	push   edi
c001ee50:	e8 0c fb ff ff       	call   c001e961 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ee55:	eb 36                	jmp    c001ee8d <Vm::faultHandler(regs*)+0x42e>
c001ee57:	83 ec 0c             	sub    esp,0xc
c001ee5a:	68 d8 c2 02 c0       	push   0xc002c2d8
c001ee5f:	e8 4a 3d ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ee64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee69:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee6d:	e9 8b 03 00 00       	jmp    c001f1fd <Vm::faultHandler(regs*)+0x79e>
c001ee72:	83 ec 0c             	sub    esp,0xc
c001ee75:	68 dd c2 02 c0       	push   0xc002c2dd
c001ee7a:	e8 2f 3d ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ee7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee84:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ee88:	e9 70 03 00 00       	jmp    c001f1fd <Vm::faultHandler(regs*)+0x79e>
c001ee8d:	83 c4 20             	add    esp,0x20
c001ee90:	e9 99 03 00 00       	jmp    c001f22e <Vm::faultHandler(regs*)+0x7cf>
c001ee95:	83 ec 0c             	sub    esp,0xc
c001ee98:	68 1b c3 02 c0       	push   0xc002c31b
c001ee9d:	e8 0c 3d ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001eea2:	83 c4 10             	add    esp,0x10
c001eea5:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001eea8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eead:	74 0d                	je     c001eebc <Vm::faultHandler(regs*)+0x45d>
c001eeaf:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001eeb6:	0f 87 9e 01 00 00    	ja     c001f05a <Vm::faultHandler(regs*)+0x5fb>
c001eebc:	83 ec 0c             	sub    esp,0xc
c001eebf:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eec3:	0f b7 db             	movzx  ebx,bx
c001eec6:	50                   	push   eax
c001eec7:	e8 9e f7 ff ff       	call   c001e66a <Vm::inbv(unsigned short)>
c001eecc:	83 c4 0c             	add    esp,0xc
c001eecf:	0f b6 c0             	movzx  eax,al
c001eed2:	50                   	push   eax
c001eed3:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001eed7:	50                   	push   eax
c001eed8:	53                   	push   ebx
c001eed9:	e8 41 fb ff ff       	call   c001ea1f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001eede:	83 c4 10             	add    esp,0x10
c001eee1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001eee4:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001eee8:	74 03                	je     c001eeed <Vm::faultHandler(regs*)+0x48e>
c001eeea:	48                   	dec    eax
c001eeeb:	eb 01                	jmp    c001eeee <Vm::faultHandler(regs*)+0x48f>
c001eeed:	40                   	inc    eax
c001eeee:	0f b7 c0             	movzx  eax,ax
c001eef1:	eb 7f                	jmp    c001ef72 <Vm::faultHandler(regs*)+0x513>
c001eef3:	83 ec 0c             	sub    esp,0xc
c001eef6:	68 4d c3 02 c0       	push   0xc002c34d
c001eefb:	e8 ae 3c ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ef00:	83 c4 10             	add    esp,0x10
c001ef03:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001ef06:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ef0b:	74 0d                	je     c001ef1a <Vm::faultHandler(regs*)+0x4bb>
c001ef0d:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001ef14:	0f 87 40 01 00 00    	ja     c001f05a <Vm::faultHandler(regs*)+0x5fb>
c001ef1a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ef1d:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001ef21:	0f b7 db             	movzx  ebx,bx
c001ef24:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ef29:	74 20                	je     c001ef4b <Vm::faultHandler(regs*)+0x4ec>
c001ef2b:	ed                   	in     eax,dx
c001ef2c:	51                   	push   ecx
c001ef2d:	50                   	push   eax
c001ef2e:	56                   	push   esi
c001ef2f:	53                   	push   ebx
c001ef30:	e8 15 fb ff ff       	call   c001ea4a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ef35:	83 c4 10             	add    esp,0x10
c001ef38:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ef3b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ef3f:	74 05                	je     c001ef46 <Vm::faultHandler(regs*)+0x4e7>
c001ef41:	83 e8 04             	sub    eax,0x4
c001ef44:	eb 27                	jmp    c001ef6d <Vm::faultHandler(regs*)+0x50e>
c001ef46:	83 c0 04             	add    eax,0x4
c001ef49:	eb 22                	jmp    c001ef6d <Vm::faultHandler(regs*)+0x50e>
c001ef4b:	66 ed                	in     ax,dx
c001ef4d:	0f b7 c0             	movzx  eax,ax
c001ef50:	52                   	push   edx
c001ef51:	50                   	push   eax
c001ef52:	56                   	push   esi
c001ef53:	53                   	push   ebx
c001ef54:	e8 db fa ff ff       	call   c001ea34 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ef59:	83 c4 10             	add    esp,0x10
c001ef5c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ef5f:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ef63:	74 05                	je     c001ef6a <Vm::faultHandler(regs*)+0x50b>
c001ef65:	83 e8 02             	sub    eax,0x2
c001ef68:	eb 03                	jmp    c001ef6d <Vm::faultHandler(regs*)+0x50e>
c001ef6a:	83 c0 02             	add    eax,0x2
c001ef6d:	25 ff ff 00 00       	and    eax,0xffff
c001ef72:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001ef75:	e9 b1 02 00 00       	jmp    c001f22b <Vm::faultHandler(regs*)+0x7cc>
c001ef7a:	83 ec 0c             	sub    esp,0xc
c001ef7d:	4b                   	dec    ebx
c001ef7e:	68 53 c3 02 c0       	push   0xc002c353
c001ef83:	e8 26 3c ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001ef88:	83 c4 10             	add    esp,0x10
c001ef8b:	80 fb 05             	cmp    bl,0x5
c001ef8e:	77 0a                	ja     c001ef9a <Vm::faultHandler(regs*)+0x53b>
c001ef90:	0f b6 db             	movzx  ebx,bl
c001ef93:	ff 24 9d c4 c3 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3c3c]
c001ef9a:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ef9e:	eb 1b                	jmp    c001efbb <Vm::faultHandler(regs*)+0x55c>
c001efa0:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001efa4:	eb 15                	jmp    c001efbb <Vm::faultHandler(regs*)+0x55c>
c001efa6:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001efaa:	eb 0f                	jmp    c001efbb <Vm::faultHandler(regs*)+0x55c>
c001efac:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001efb0:	eb 09                	jmp    c001efbb <Vm::faultHandler(regs*)+0x55c>
c001efb2:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001efb5:	eb 04                	jmp    c001efbb <Vm::faultHandler(regs*)+0x55c>
c001efb7:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001efbb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001efc0:	74 0d                	je     c001efcf <Vm::faultHandler(regs*)+0x570>
c001efc2:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001efc9:	0f 87 8b 00 00 00    	ja     c001f05a <Vm::faultHandler(regs*)+0x5fb>
c001efcf:	53                   	push   ebx
c001efd0:	53                   	push   ebx
c001efd1:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001efd5:	52                   	push   edx
c001efd6:	50                   	push   eax
c001efd7:	e8 0f fa ff ff       	call   c001e9eb <Vm::readByteFromReal(unsigned short, unsigned short)>
c001efdc:	5e                   	pop    esi
c001efdd:	0f b6 c0             	movzx  eax,al
c001efe0:	5d                   	pop    ebp
c001efe1:	50                   	push   eax
c001efe2:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001efe6:	50                   	push   eax
c001efe7:	e8 91 f6 ff ff       	call   c001e67d <Vm::outbv(unsigned short, unsigned char)>
c001efec:	83 c4 10             	add    esp,0x10
c001efef:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001eff2:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001eff6:	74 03                	je     c001effb <Vm::faultHandler(regs*)+0x59c>
c001eff8:	48                   	dec    eax
c001eff9:	eb 01                	jmp    c001effc <Vm::faultHandler(regs*)+0x59d>
c001effb:	40                   	inc    eax
c001effc:	0f b7 c0             	movzx  eax,ax
c001efff:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f002:	e9 24 02 00 00       	jmp    c001f22b <Vm::faultHandler(regs*)+0x7cc>
c001f007:	83 ec 0c             	sub    esp,0xc
c001f00a:	4b                   	dec    ebx
c001f00b:	68 53 c3 02 c0       	push   0xc002c353
c001f010:	e8 99 3b ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001f015:	83 c4 10             	add    esp,0x10
c001f018:	80 fb 05             	cmp    bl,0x5
c001f01b:	77 0a                	ja     c001f027 <Vm::faultHandler(regs*)+0x5c8>
c001f01d:	0f b6 db             	movzx  ebx,bl
c001f020:	ff 24 9d dc c3 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3c24]
c001f027:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f02b:	eb 1b                	jmp    c001f048 <Vm::faultHandler(regs*)+0x5e9>
c001f02d:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f031:	eb 15                	jmp    c001f048 <Vm::faultHandler(regs*)+0x5e9>
c001f033:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f037:	eb 0f                	jmp    c001f048 <Vm::faultHandler(regs*)+0x5e9>
c001f039:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f03d:	eb 09                	jmp    c001f048 <Vm::faultHandler(regs*)+0x5e9>
c001f03f:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f042:	eb 04                	jmp    c001f048 <Vm::faultHandler(regs*)+0x5e9>
c001f044:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f048:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f04b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f050:	74 39                	je     c001f08b <Vm::faultHandler(regs*)+0x62c>
c001f052:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f058:	76 31                	jbe    c001f08b <Vm::faultHandler(regs*)+0x62c>
c001f05a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f05e:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f062:	51                   	push   ecx
c001f063:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f067:	51                   	push   ecx
c001f068:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f06c:	51                   	push   ecx
c001f06d:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f071:	51                   	push   ecx
c001f072:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f076:	52                   	push   edx
c001f077:	50                   	push   eax
c001f078:	50                   	push   eax
c001f079:	68 20 c3 02 c0       	push   0xc002c320
c001f07e:	e8 2b 3b ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001f083:	83 c4 20             	add    esp,0x20
c001f086:	e9 fb 01 00 00       	jmp    c001f286 <Vm::faultHandler(regs*)+0x827>
c001f08b:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f08e:	0f b7 d3             	movzx  edx,bx
c001f091:	81 e6 00 04 00 00    	and    esi,0x400
c001f097:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f09a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f09f:	74 1d                	je     c001f0be <Vm::faultHandler(regs*)+0x65f>
c001f0a1:	51                   	push   ecx
c001f0a2:	51                   	push   ecx
c001f0a3:	52                   	push   edx
c001f0a4:	50                   	push   eax
c001f0a5:	e8 64 f9 ff ff       	call   c001ea0e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f0aa:	83 c4 10             	add    esp,0x10
c001f0ad:	89 ea                	mov    edx,ebp
c001f0af:	ef                   	out    dx,eax
c001f0b0:	85 f6                	test   esi,esi
c001f0b2:	74 05                	je     c001f0b9 <Vm::faultHandler(regs*)+0x65a>
c001f0b4:	83 eb 04             	sub    ebx,0x4
c001f0b7:	eb 21                	jmp    c001f0da <Vm::faultHandler(regs*)+0x67b>
c001f0b9:	83 c3 04             	add    ebx,0x4
c001f0bc:	eb 1c                	jmp    c001f0da <Vm::faultHandler(regs*)+0x67b>
c001f0be:	51                   	push   ecx
c001f0bf:	51                   	push   ecx
c001f0c0:	52                   	push   edx
c001f0c1:	50                   	push   eax
c001f0c2:	e8 35 f9 ff ff       	call   c001e9fc <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f0c7:	83 c4 10             	add    esp,0x10
c001f0ca:	89 ea                	mov    edx,ebp
c001f0cc:	66 ef                	out    dx,ax
c001f0ce:	85 f6                	test   esi,esi
c001f0d0:	74 05                	je     c001f0d7 <Vm::faultHandler(regs*)+0x678>
c001f0d2:	83 eb 02             	sub    ebx,0x2
c001f0d5:	eb 03                	jmp    c001f0da <Vm::faultHandler(regs*)+0x67b>
c001f0d7:	83 c3 02             	add    ebx,0x2
c001f0da:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f0e0:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f0e3:	e9 43 01 00 00       	jmp    c001f22b <Vm::faultHandler(regs*)+0x7cc>
c001f0e8:	53                   	push   ebx
c001f0e9:	53                   	push   ebx
c001f0ea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0ee:	50                   	push   eax
c001f0ef:	68 59 c3 02 c0       	push   0xc002c359
c001f0f4:	e8 b5 3a ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001f0f9:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f100:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f104:	89 04 24             	mov    DWORD PTR [esp],eax
c001f107:	e8 5e f5 ff ff       	call   c001e66a <Vm::inbv(unsigned short)>
c001f10c:	0f b6 c0             	movzx  eax,al
c001f10f:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f112:	eb 5e                	jmp    c001f172 <Vm::faultHandler(regs*)+0x713>
c001f114:	51                   	push   ecx
c001f115:	51                   	push   ecx
c001f116:	53                   	push   ebx
c001f117:	68 5f c3 02 c0       	push   0xc002c35f
c001f11c:	e8 8d 3a ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001f121:	83 c4 10             	add    esp,0x10
c001f124:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f129:	74 07                	je     c001f132 <Vm::faultHandler(regs*)+0x6d3>
c001f12b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f12f:	ed                   	in     eax,dx
c001f130:	eb 14                	jmp    c001f146 <Vm::faultHandler(regs*)+0x6e7>
c001f132:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f135:	66 31 db             	xor    bx,bx
c001f138:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f13b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f13f:	66 ed                	in     ax,dx
c001f141:	0f b7 c0             	movzx  eax,ax
c001f144:	09 d8                	or     eax,ebx
c001f146:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f149:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f14d:	e9 dc 00 00 00       	jmp    c001f22e <Vm::faultHandler(regs*)+0x7cf>
c001f152:	50                   	push   eax
c001f153:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f156:	53                   	push   ebx
c001f157:	68 65 c3 02 c0       	push   0xc002c365
c001f15c:	e8 4d 3a ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001f161:	58                   	pop    eax
c001f162:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f166:	5a                   	pop    edx
c001f167:	50                   	push   eax
c001f168:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f16c:	50                   	push   eax
c001f16d:	e8 0b f5 ff ff       	call   c001e67d <Vm::outbv(unsigned short, unsigned char)>
c001f172:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f176:	e9 85 00 00 00       	jmp    c001f200 <Vm::faultHandler(regs*)+0x7a1>
c001f17b:	50                   	push   eax
c001f17c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f17f:	53                   	push   ebx
c001f180:	68 6e c3 02 c0       	push   0xc002c36e
c001f185:	e8 24 3a ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001f18a:	83 c4 10             	add    esp,0x10
c001f18d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f191:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f196:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f199:	74 03                	je     c001f19e <Vm::faultHandler(regs*)+0x73f>
c001f19b:	ef                   	out    dx,eax
c001f19c:	eb ab                	jmp    c001f149 <Vm::faultHandler(regs*)+0x6ea>
c001f19e:	66 ef                	out    dx,ax
c001f1a0:	eb a7                	jmp    c001f149 <Vm::faultHandler(regs*)+0x6ea>
c001f1a2:	55                   	push   ebp
c001f1a3:	55                   	push   ebp
c001f1a4:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f1a7:	68 77 c3 02 c0       	push   0xc002c377
c001f1ac:	e8 fd 39 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001f1b1:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f1b8:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f1bc:	89 04 24             	mov    DWORD PTR [esp],eax
c001f1bf:	e8 a6 f4 ff ff       	call   c001e66a <Vm::inbv(unsigned short)>
c001f1c4:	0f b6 c0             	movzx  eax,al
c001f1c7:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f1ca:	eb 31                	jmp    c001f1fd <Vm::faultHandler(regs*)+0x79e>
c001f1cc:	56                   	push   esi
c001f1cd:	56                   	push   esi
c001f1ce:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f1d1:	68 7d c3 02 c0       	push   0xc002c37d
c001f1d6:	e8 d3 39 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001f1db:	83 c4 10             	add    esp,0x10
c001f1de:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f1e1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1e6:	74 03                	je     c001f1eb <Vm::faultHandler(regs*)+0x78c>
c001f1e8:	ed                   	in     eax,dx
c001f1e9:	eb 0d                	jmp    c001f1f8 <Vm::faultHandler(regs*)+0x799>
c001f1eb:	66 ed                	in     ax,dx
c001f1ed:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f1f0:	0f b7 c0             	movzx  eax,ax
c001f1f3:	66 31 d2             	xor    dx,dx
c001f1f6:	09 d0                	or     eax,edx
c001f1f8:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f1fb:	eb 2e                	jmp    c001f22b <Vm::faultHandler(regs*)+0x7cc>
c001f1fd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f200:	83 c4 10             	add    esp,0x10
c001f203:	eb 29                	jmp    c001f22e <Vm::faultHandler(regs*)+0x7cf>
c001f205:	50                   	push   eax
c001f206:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f209:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f20c:	68 8c c3 02 c0       	push   0xc002c38c
c001f211:	e8 98 39 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001f216:	83 c4 10             	add    esp,0x10
c001f219:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f21c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f221:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f224:	74 03                	je     c001f229 <Vm::faultHandler(regs*)+0x7ca>
c001f226:	ef                   	out    dx,eax
c001f227:	eb 02                	jmp    c001f22b <Vm::faultHandler(regs*)+0x7cc>
c001f229:	66 ef                	out    dx,ax
c001f22b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f22e:	b0 01                	mov    al,0x1
c001f230:	eb 56                	jmp    c001f288 <Vm::faultHandler(regs*)+0x829>
c001f232:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f236:	51                   	push   ecx
c001f237:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f23b:	51                   	push   ecx
c001f23c:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f240:	51                   	push   ecx
c001f241:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f245:	51                   	push   ecx
c001f246:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f24a:	52                   	push   edx
c001f24b:	50                   	push   eax
c001f24c:	50                   	push   eax
c001f24d:	68 95 c3 02 c0       	push   0xc002c395
c001f252:	e8 57 39 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c001f257:	83 c4 20             	add    esp,0x20
c001f25a:	83 ec 0c             	sub    esp,0xc
c001f25d:	6a 60                	push   0x60
c001f25f:	e8 06 f4 ff ff       	call   c001e66a <Vm::inbv(unsigned short)>
c001f264:	83 c4 10             	add    esp,0x10
c001f267:	3c 1c                	cmp    al,0x1c
c001f269:	74 04                	je     c001f26f <Vm::faultHandler(regs*)+0x810>
c001f26b:	3c 5a                	cmp    al,0x5a
c001f26d:	75 eb                	jne    c001f25a <Vm::faultHandler(regs*)+0x7fb>
c001f26f:	3c 1c                	cmp    al,0x1c
c001f271:	74 04                	je     c001f277 <Vm::faultHandler(regs*)+0x818>
c001f273:	3c 5a                	cmp    al,0x5a
c001f275:	75 0f                	jne    c001f286 <Vm::faultHandler(regs*)+0x827>
c001f277:	83 ec 0c             	sub    esp,0xc
c001f27a:	6a 60                	push   0x60
c001f27c:	e8 e9 f3 ff ff       	call   c001e66a <Vm::inbv(unsigned short)>
c001f281:	83 c4 10             	add    esp,0x10
c001f284:	eb e9                	jmp    c001f26f <Vm::faultHandler(regs*)+0x810>
c001f286:	31 c0                	xor    eax,eax
c001f288:	83 c4 1c             	add    esp,0x1c
c001f28b:	5b                   	pop    ebx
c001f28c:	5e                   	pop    esi
c001f28d:	5f                   	pop    edi
c001f28e:	5d                   	pop    ebp
c001f28f:	c3                   	ret    

c001f290 <Vm::fpuInternalTo32(unsigned long long)>:
c001f290:	57                   	push   edi
c001f291:	56                   	push   esi
c001f292:	53                   	push   ebx
c001f293:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f29b:	89 d6                	mov    esi,edx
c001f29d:	89 d7                	mov    edi,edx
c001f29f:	89 c1                	mov    ecx,eax
c001f2a1:	c1 ef 14             	shr    edi,0x14
c001f2a4:	89 d3                	mov    ebx,edx
c001f2a6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f2ac:	31 d2                	xor    edx,edx
c001f2ae:	89 f8                	mov    eax,edi
c001f2b0:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f2b6:	bf ff 00 00 00       	mov    edi,0xff
c001f2bb:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f2c0:	83 d2 ff             	adc    edx,0xffffffff
c001f2c3:	39 c7                	cmp    edi,eax
c001f2c5:	bf 00 00 00 00       	mov    edi,0x0
c001f2ca:	19 d7                	sbb    edi,edx
c001f2cc:	72 15                	jb     c001f2e3 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f2ce:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f2d2:	c1 e0 17             	shl    eax,0x17
c001f2d5:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f2db:	09 f1                	or     ecx,esi
c001f2dd:	09 c1                	or     ecx,eax
c001f2df:	89 cf                	mov    edi,ecx
c001f2e1:	eb 02                	jmp    c001f2e5 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f2e3:	31 ff                	xor    edi,edi
c001f2e5:	89 f8                	mov    eax,edi
c001f2e7:	5b                   	pop    ebx
c001f2e8:	5e                   	pop    esi
c001f2e9:	5f                   	pop    edi
c001f2ea:	c3                   	ret    

c001f2eb <Vm::fpuInternalTo64(unsigned long long)>:
c001f2eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f2f3:	c3                   	ret    

c001f2f4 <Vm::fpu32ToInternal(unsigned int)>:
c001f2f4:	57                   	push   edi
c001f2f5:	31 ff                	xor    edi,edi
c001f2f7:	56                   	push   esi
c001f2f8:	53                   	push   ebx
c001f2f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2fd:	89 cb                	mov    ebx,ecx
c001f2ff:	89 ce                	mov    esi,ecx
c001f301:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f307:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f30d:	c1 e9 17             	shr    ecx,0x17
c001f310:	89 f0                	mov    eax,esi
c001f312:	0f b6 d1             	movzx  edx,cl
c001f315:	81 c2 80 03 00 00    	add    edx,0x380
c001f31b:	89 d1                	mov    ecx,edx
c001f31d:	89 fa                	mov    edx,edi
c001f31f:	c1 e1 14             	shl    ecx,0x14
c001f322:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f326:	c1 e0 1d             	shl    eax,0x1d
c001f329:	89 d7                	mov    edi,edx
c001f32b:	89 c6                	mov    esi,eax
c001f32d:	89 ca                	mov    edx,ecx
c001f32f:	89 f0                	mov    eax,esi
c001f331:	09 fa                	or     edx,edi
c001f333:	09 da                	or     edx,ebx
c001f335:	5b                   	pop    ebx
c001f336:	5e                   	pop    esi
c001f337:	5f                   	pop    edi
c001f338:	c3                   	ret    

c001f339 <Vm::fpu64ToInternal(unsigned long long)>:
c001f339:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f33d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f341:	c3                   	ret    

c001f342 <Vm::fpuFloatToLong(unsigned long long)>:
c001f342:	57                   	push   edi
c001f343:	31 c0                	xor    eax,eax
c001f345:	56                   	push   esi
c001f346:	31 d2                	xor    edx,edx
c001f348:	53                   	push   ebx
c001f349:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f34d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f351:	89 d9                	mov    ecx,ebx
c001f353:	c1 e9 14             	shr    ecx,0x14
c001f356:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f35c:	89 cf                	mov    edi,ecx
c001f35e:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f364:	78 33                	js     c001f399 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f366:	89 d9                	mov    ecx,ebx
c001f368:	89 f0                	mov    eax,esi
c001f36a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f370:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f376:	89 ca                	mov    edx,ecx
c001f378:	b9 34 00 00 00       	mov    ecx,0x34
c001f37d:	29 f9                	sub    ecx,edi
c001f37f:	0f ad d0             	shrd   eax,edx,cl
c001f382:	d3 fa                	sar    edx,cl
c001f384:	f6 c1 20             	test   cl,0x20
c001f387:	74 05                	je     c001f38e <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f389:	89 d0                	mov    eax,edx
c001f38b:	c1 fa 1f             	sar    edx,0x1f
c001f38e:	85 db                	test   ebx,ebx
c001f390:	79 07                	jns    c001f399 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f392:	f7 d8                	neg    eax
c001f394:	83 d2 00             	adc    edx,0x0
c001f397:	f7 da                	neg    edx
c001f399:	5b                   	pop    ebx
c001f39a:	5e                   	pop    esi
c001f39b:	5f                   	pop    edi
c001f39c:	c3                   	ret    

c001f39d <Vm::fpuULongToFloat(unsigned long long)>:
c001f39d:	57                   	push   edi
c001f39e:	31 c9                	xor    ecx,ecx
c001f3a0:	56                   	push   esi
c001f3a1:	53                   	push   ebx
c001f3a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f3a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f3aa:	0f ba e7 14          	bt     edi,0x14
c001f3ae:	72 07                	jb     c001f3b7 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f3b0:	01 f6                	add    esi,esi
c001f3b2:	11 ff                	adc    edi,edi
c001f3b4:	41                   	inc    ecx
c001f3b5:	eb f3                	jmp    c001f3aa <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f3b7:	89 fa                	mov    edx,edi
c001f3b9:	89 f0                	mov    eax,esi
c001f3bb:	bb 33 04 00 00       	mov    ebx,0x433
c001f3c0:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f3c6:	29 cb                	sub    ebx,ecx
c001f3c8:	89 d9                	mov    ecx,ebx
c001f3ca:	5b                   	pop    ebx
c001f3cb:	c1 e1 14             	shl    ecx,0x14
c001f3ce:	5e                   	pop    esi
c001f3cf:	09 ca                	or     edx,ecx
c001f3d1:	5f                   	pop    edi
c001f3d2:	c3                   	ret    

c001f3d3 <Vm::fpuLongToFloat(long long)>:
c001f3d3:	56                   	push   esi
c001f3d4:	31 c0                	xor    eax,eax
c001f3d6:	53                   	push   ebx
c001f3d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f3df:	39 c8                	cmp    eax,ecx
c001f3e1:	19 d8                	sbb    eax,ebx
c001f3e3:	7d 04                	jge    c001f3e9 <Vm::fpuLongToFloat(long long)+0x16>
c001f3e5:	31 f6                	xor    esi,esi
c001f3e7:	eb 0c                	jmp    c001f3f5 <Vm::fpuLongToFloat(long long)+0x22>
c001f3e9:	f7 d9                	neg    ecx
c001f3eb:	be 01 00 00 00       	mov    esi,0x1
c001f3f0:	83 d3 00             	adc    ebx,0x0
c001f3f3:	f7 db                	neg    ebx
c001f3f5:	31 c0                	xor    eax,eax
c001f3f7:	0f ba e3 14          	bt     ebx,0x14
c001f3fb:	72 07                	jb     c001f404 <Vm::fpuLongToFloat(long long)+0x31>
c001f3fd:	01 c9                	add    ecx,ecx
c001f3ff:	11 db                	adc    ebx,ebx
c001f401:	40                   	inc    eax
c001f402:	eb f3                	jmp    c001f3f7 <Vm::fpuLongToFloat(long long)+0x24>
c001f404:	ba 33 04 00 00       	mov    edx,0x433
c001f409:	29 c2                	sub    edx,eax
c001f40b:	89 c8                	mov    eax,ecx
c001f40d:	c1 e2 14             	shl    edx,0x14
c001f410:	89 d9                	mov    ecx,ebx
c001f412:	89 f3                	mov    ebx,esi
c001f414:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f41a:	09 ca                	or     edx,ecx
c001f41c:	84 db                	test   bl,bl
c001f41e:	74 06                	je     c001f426 <Vm::fpuLongToFloat(long long)+0x53>
c001f420:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f426:	5b                   	pop    ebx
c001f427:	5e                   	pop    esi
c001f428:	c3                   	ret    

c001f429 <Vm::fpuGet0()>:
c001f429:	31 c0                	xor    eax,eax
c001f42b:	31 d2                	xor    edx,edx
c001f42d:	c3                   	ret    

c001f42e <Vm::fpuGet1()>:
c001f42e:	b8 01 00 00 00       	mov    eax,0x1
c001f433:	31 d2                	xor    edx,edx
c001f435:	c3                   	ret    

c001f436 <Vm::fpuGetPi()>:
c001f436:	b8 03 00 00 00       	mov    eax,0x3
c001f43b:	31 d2                	xor    edx,edx
c001f43d:	c3                   	ret    

c001f43e <Vm::fpuGetLog2E()>:
c001f43e:	83 ec 18             	sub    esp,0x18
c001f441:	68 f4 c3 02 c0       	push   0xc002c3f4
c001f446:	e8 de ad ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001f44b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f450:	31 d2                	xor    edx,edx
c001f452:	83 c4 1c             	add    esp,0x1c
c001f455:	c3                   	ret    

c001f456 <Vm::fpuGetLogE2()>:
c001f456:	83 ec 18             	sub    esp,0x18
c001f459:	68 00 c4 02 c0       	push   0xc002c400
c001f45e:	e8 c6 ad ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001f463:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f468:	31 d2                	xor    edx,edx
c001f46a:	83 c4 1c             	add    esp,0x1c
c001f46d:	c3                   	ret    

c001f46e <Vm::fpuGetLog210()>:
c001f46e:	83 ec 18             	sub    esp,0x18
c001f471:	68 0c c4 02 c0       	push   0xc002c40c
c001f476:	e8 ae ad ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001f47b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f480:	31 d2                	xor    edx,edx
c001f482:	83 c4 1c             	add    esp,0x1c
c001f485:	c3                   	ret    

c001f486 <Vm::fpuGetLog102()>:
c001f486:	83 ec 18             	sub    esp,0x18
c001f489:	68 19 c4 02 c0       	push   0xc002c419
c001f48e:	e8 96 ad ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001f493:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f498:	31 d2                	xor    edx,edx
c001f49a:	83 c4 1c             	add    esp,0x1c
c001f49d:	c3                   	ret    

c001f49e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f49e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4a2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f4a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f4aa:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f4ae:	0f 92 c0             	setb   al
c001f4b1:	c3                   	ret    

c001f4b2 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f4b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ba:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f4be:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f4c2:	09 c2                	or     edx,eax
c001f4c4:	0f 94 c0             	sete   al
c001f4c7:	c3                   	ret    

c001f4c8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f4c8:	57                   	push   edi
c001f4c9:	56                   	push   esi
c001f4ca:	53                   	push   ebx
c001f4cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f4cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f4d3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f4d7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f4db:	57                   	push   edi
c001f4dc:	56                   	push   esi
c001f4dd:	53                   	push   ebx
c001f4de:	51                   	push   ecx
c001f4df:	e8 ce ff ff ff       	call   c001f4b2 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f4e4:	83 c4 10             	add    esp,0x10
c001f4e7:	88 c2                	mov    dl,al
c001f4e9:	31 c0                	xor    eax,eax
c001f4eb:	84 d2                	test   dl,dl
c001f4ed:	75 0c                	jne    c001f4fb <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f4ef:	57                   	push   edi
c001f4f0:	56                   	push   esi
c001f4f1:	53                   	push   ebx
c001f4f2:	51                   	push   ecx
c001f4f3:	e8 a6 ff ff ff       	call   c001f49e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f4f8:	83 c4 10             	add    esp,0x10
c001f4fb:	83 e0 01             	and    eax,0x1
c001f4fe:	5b                   	pop    ebx
c001f4ff:	88 c1                	mov    cl,al
c001f501:	83 e2 01             	and    edx,0x1
c001f504:	a0 81 16 03 c0       	mov    al,ds:0xc0031681
c001f509:	c1 e2 06             	shl    edx,0x6
c001f50c:	83 e0 ba             	and    eax,0xffffffba
c001f50f:	5e                   	pop    esi
c001f510:	09 c8                	or     eax,ecx
c001f512:	5f                   	pop    edi
c001f513:	09 d0                	or     eax,edx
c001f515:	a2 81 16 03 c0       	mov    ds:0xc0031681,al
c001f51a:	c3                   	ret    

c001f51b <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f51b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f51f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f523:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f527:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f52b:	c3                   	ret    

c001f52c <Vm::fpuAbs(unsigned long long)>:
c001f52c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f530:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f534:	c3                   	ret    

c001f535 <Vm::fpuChs(unsigned long long)>:
c001f535:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f539:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f53d:	f7 d8                	neg    eax
c001f53f:	83 d2 00             	adc    edx,0x0
c001f542:	f7 da                	neg    edx
c001f544:	c3                   	ret    

c001f545 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f545:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f549:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f54e:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f552:	eb c7                	jmp    c001f51b <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f554 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f554:	53                   	push   ebx
c001f555:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f559:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f55d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f561:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f565:	0f af ca             	imul   ecx,edx
c001f568:	0f af d8             	imul   ebx,eax
c001f56b:	f7 e2                	mul    edx
c001f56d:	01 d9                	add    ecx,ebx
c001f56f:	5b                   	pop    ebx
c001f570:	01 ca                	add    edx,ecx
c001f572:	c3                   	ret    

c001f573 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f573:	83 ec 0c             	sub    esp,0xc
c001f576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f57e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f586:	e8 a1 70 00 00       	call   c002662c <__udivdi3>
c001f58b:	83 c4 1c             	add    esp,0x1c
c001f58e:	c3                   	ret    

c001f58f <Vm::fpuSquare(unsigned long long)>:
c001f58f:	50                   	push   eax
c001f590:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f594:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f598:	52                   	push   edx
c001f599:	50                   	push   eax
c001f59a:	52                   	push   edx
c001f59b:	50                   	push   eax
c001f59c:	e8 b3 ff ff ff       	call   c001f554 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f5a1:	83 c4 14             	add    esp,0x14
c001f5a4:	c3                   	ret    

c001f5a5 <Vm::fpuGetReg(int)>:
c001f5a5:	83 ec 0c             	sub    esp,0xc
c001f5a8:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f5ad:	76 10                	jbe    c001f5bf <Vm::fpuGetReg(int)+0x1a>
c001f5af:	83 ec 0c             	sub    esp,0xc
c001f5b2:	68 26 c4 02 c0       	push   0xc002c426
c001f5b7:	e8 6d ac ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001f5bc:	83 c4 10             	add    esp,0x10
c001f5bf:	a0 81 16 03 c0       	mov    al,ds:0xc0031681
c001f5c4:	b9 08 00 00 00       	mov    ecx,0x8
c001f5c9:	c0 e8 03             	shr    al,0x3
c001f5cc:	83 e0 07             	and    eax,0x7
c001f5cf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f5d3:	99                   	cdq    
c001f5d4:	f7 f9                	idiv   ecx
c001f5d6:	8b 04 d5 84 16 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce97c]
c001f5dd:	8b 14 d5 88 16 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce978]
c001f5e4:	83 c4 0c             	add    esp,0xc
c001f5e7:	c3                   	ret    

c001f5e8 <Vm::fpuSetReg(int, unsigned long long)>:
c001f5e8:	57                   	push   edi
c001f5e9:	56                   	push   esi
c001f5ea:	52                   	push   edx
c001f5eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f5ef:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f5f3:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f5f8:	76 10                	jbe    c001f60a <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f5fa:	83 ec 0c             	sub    esp,0xc
c001f5fd:	68 39 c4 02 c0       	push   0xc002c439
c001f602:	e8 22 ac ff ff       	call   c001a229 <Krnl::panic(char const*)>
c001f607:	83 c4 10             	add    esp,0x10
c001f60a:	a0 81 16 03 c0       	mov    al,ds:0xc0031681
c001f60f:	b9 08 00 00 00       	mov    ecx,0x8
c001f614:	c0 e8 03             	shr    al,0x3
c001f617:	83 e0 07             	and    eax,0x7
c001f61a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f61e:	99                   	cdq    
c001f61f:	f7 f9                	idiv   ecx
c001f621:	89 34 d5 84 16 03 c0 	mov    DWORD PTR [edx*8-0x3ffce97c],esi
c001f628:	89 3c d5 88 16 03 c0 	mov    DWORD PTR [edx*8-0x3ffce978],edi
c001f62f:	58                   	pop    eax
c001f630:	5e                   	pop    esi
c001f631:	5f                   	pop    edi
c001f632:	c3                   	ret    

c001f633 <Vm::fpuPush(unsigned long long)>:
c001f633:	a0 81 16 03 c0       	mov    al,ds:0xc0031681
c001f638:	c0 e8 03             	shr    al,0x3
c001f63b:	83 e0 07             	and    eax,0x7
c001f63e:	83 c0 07             	add    eax,0x7
c001f641:	88 c2                	mov    dl,al
c001f643:	83 e0 07             	and    eax,0x7
c001f646:	83 e2 07             	and    edx,0x7
c001f649:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f650:	8a 15 81 16 03 c0    	mov    dl,BYTE PTR ds:0xc0031681
c001f656:	83 e2 c7             	and    edx,0xffffffc7
c001f659:	09 ca                	or     edx,ecx
c001f65b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f65f:	88 15 81 16 03 c0    	mov    BYTE PTR ds:0xc0031681,dl
c001f665:	89 0c c5 88 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce978],ecx
c001f66c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f670:	89 14 c5 84 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce97c],edx
c001f677:	a1 c4 16 03 c0       	mov    eax,ds:0xc00316c4
c001f67c:	83 f8 08             	cmp    eax,0x8
c001f67f:	75 08                	jne    c001f689 <Vm::fpuPush(unsigned long long)+0x56>
c001f681:	80 0d 80 16 03 c0 40 	or     BYTE PTR ds:0xc0031680,0x40
c001f688:	c3                   	ret    
c001f689:	40                   	inc    eax
c001f68a:	a3 c4 16 03 c0       	mov    ds:0xc00316c4,eax
c001f68f:	c3                   	ret    

c001f690 <Vm::fpuPop()>:
c001f690:	8a 0d 81 16 03 c0    	mov    cl,BYTE PTR ds:0xc0031681
c001f696:	53                   	push   ebx
c001f697:	c0 e9 03             	shr    cl,0x3
c001f69a:	8a 1d 81 16 03 c0    	mov    bl,BYTE PTR ds:0xc0031681
c001f6a0:	83 e1 07             	and    ecx,0x7
c001f6a3:	83 e3 c7             	and    ebx,0xffffffc7
c001f6a6:	8b 04 cd 84 16 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce97c]
c001f6ad:	8b 14 cd 88 16 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce978]
c001f6b4:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f6bb:	83 e1 38             	and    ecx,0x38
c001f6be:	09 d9                	or     ecx,ebx
c001f6c0:	88 0d 81 16 03 c0    	mov    BYTE PTR ds:0xc0031681,cl
c001f6c6:	8b 0d c4 16 03 c0    	mov    ecx,DWORD PTR ds:0xc00316c4
c001f6cc:	85 c9                	test   ecx,ecx
c001f6ce:	74 09                	je     c001f6d9 <Vm::fpuPop()+0x49>
c001f6d0:	49                   	dec    ecx
c001f6d1:	89 0d c4 16 03 c0    	mov    DWORD PTR ds:0xc00316c4,ecx
c001f6d7:	eb 07                	jmp    c001f6e0 <Vm::fpuPop()+0x50>
c001f6d9:	80 0d 80 16 03 c0 40 	or     BYTE PTR ds:0xc0031680,0x40
c001f6e0:	5b                   	pop    ebx
c001f6e1:	c3                   	ret    

c001f6e2 <Vm::x87Handler(regs*)>:
c001f6e2:	55                   	push   ebp
c001f6e3:	57                   	push   edi
c001f6e4:	56                   	push   esi
c001f6e5:	53                   	push   ebx
c001f6e6:	83 ec 1c             	sub    esp,0x1c
c001f6e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f6ed:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f6f2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f6f5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f6fd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f701:	50                   	push   eax
c001f702:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f706:	50                   	push   eax
c001f707:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f70b:	50                   	push   eax
c001f70c:	53                   	push   ebx
c001f70d:	e8 de a1 ff ff       	call   c00198f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f712:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f715:	83 c4 10             	add    esp,0x10
c001f718:	89 c6                	mov    esi,eax
c001f71a:	80 fa d9             	cmp    dl,0xd9
c001f71d:	0f 85 52 01 00 00    	jne    c001f875 <Vm::x87Handler(regs*)+0x193>
c001f723:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f727:	8d 50 20             	lea    edx,[eax+0x20]
c001f72a:	80 fa 0e             	cmp    dl,0xe
c001f72d:	0f 87 86 00 00 00    	ja     c001f7b9 <Vm::x87Handler(regs*)+0xd7>
c001f733:	0f b6 d2             	movzx  edx,dl
c001f736:	ff 24 95 4c c4 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3bb4]
c001f73d:	e8 e7 fc ff ff       	call   c001f429 <Vm::fpuGet0()>
c001f742:	eb 05                	jmp    c001f749 <Vm::x87Handler(regs*)+0x67>
c001f744:	e8 e5 fc ff ff       	call   c001f42e <Vm::fpuGet1()>
c001f749:	57                   	push   edi
c001f74a:	57                   	push   edi
c001f74b:	52                   	push   edx
c001f74c:	50                   	push   eax
c001f74d:	e8 e1 fe ff ff       	call   c001f633 <Vm::fpuPush(unsigned long long)>
c001f752:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f756:	83 c4 10             	add    esp,0x10
c001f759:	b0 01                	mov    al,0x1
c001f75b:	e9 e3 09 00 00       	jmp    c0020143 <Vm::x87Handler(regs*)+0xa61>
c001f760:	83 ec 0c             	sub    esp,0xc
c001f763:	6a 00                	push   0x0
c001f765:	e8 3b fe ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001f76a:	59                   	pop    ecx
c001f76b:	5e                   	pop    esi
c001f76c:	52                   	push   edx
c001f76d:	50                   	push   eax
c001f76e:	e8 c2 fd ff ff       	call   c001f535 <Vm::fpuChs(unsigned long long)>
c001f773:	eb 13                	jmp    c001f788 <Vm::x87Handler(regs*)+0xa6>
c001f775:	83 ec 0c             	sub    esp,0xc
c001f778:	6a 00                	push   0x0
c001f77a:	e8 26 fe ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001f77f:	5f                   	pop    edi
c001f780:	5d                   	pop    ebp
c001f781:	52                   	push   edx
c001f782:	50                   	push   eax
c001f783:	e8 a4 fd ff ff       	call   c001f52c <Vm::fpuAbs(unsigned long long)>
c001f788:	83 c4 0c             	add    esp,0xc
c001f78b:	52                   	push   edx
c001f78c:	50                   	push   eax
c001f78d:	6a 00                	push   0x0
c001f78f:	e8 54 fe ff ff       	call   c001f5e8 <Vm::fpuSetReg(int, unsigned long long)>
c001f794:	eb bc                	jmp    c001f752 <Vm::x87Handler(regs*)+0x70>
c001f796:	e8 d3 fc ff ff       	call   c001f46e <Vm::fpuGetLog210()>
c001f79b:	eb ac                	jmp    c001f749 <Vm::x87Handler(regs*)+0x67>
c001f79d:	e8 9c fc ff ff       	call   c001f43e <Vm::fpuGetLog2E()>
c001f7a2:	eb a5                	jmp    c001f749 <Vm::x87Handler(regs*)+0x67>
c001f7a4:	e8 8d fc ff ff       	call   c001f436 <Vm::fpuGetPi()>
c001f7a9:	eb 9e                	jmp    c001f749 <Vm::x87Handler(regs*)+0x67>
c001f7ab:	e8 d6 fc ff ff       	call   c001f486 <Vm::fpuGetLog102()>
c001f7b0:	eb 97                	jmp    c001f749 <Vm::x87Handler(regs*)+0x67>
c001f7b2:	e8 9f fc ff ff       	call   c001f456 <Vm::fpuGetLogE2()>
c001f7b7:	eb 90                	jmp    c001f749 <Vm::x87Handler(regs*)+0x67>
c001f7b9:	8d 50 40             	lea    edx,[eax+0x40]
c001f7bc:	80 fa 07             	cmp    dl,0x7
c001f7bf:	77 15                	ja     c001f7d6 <Vm::x87Handler(regs*)+0xf4>
c001f7c1:	83 ec 0c             	sub    esp,0xc
c001f7c4:	2d c0 00 00 00       	sub    eax,0xc0
c001f7c9:	50                   	push   eax
c001f7ca:	e8 d6 fd ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001f7cf:	59                   	pop    ecx
c001f7d0:	5e                   	pop    esi
c001f7d1:	e9 75 ff ff ff       	jmp    c001f74b <Vm::x87Handler(regs*)+0x69>
c001f7d6:	8d 50 38             	lea    edx,[eax+0x38]
c001f7d9:	80 fa 07             	cmp    dl,0x7
c001f7dc:	77 3c                	ja     c001f81a <Vm::x87Handler(regs*)+0x138>
c001f7de:	83 ec 0c             	sub    esp,0xc
c001f7e1:	2d c8 00 00 00       	sub    eax,0xc8
c001f7e6:	50                   	push   eax
c001f7e7:	e8 b9 fd ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001f7ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7f3:	89 c6                	mov    esi,eax
c001f7f5:	89 d7                	mov    edi,edx
c001f7f7:	e8 a9 fd ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001f7fc:	83 c4 0c             	add    esp,0xc
c001f7ff:	52                   	push   edx
c001f800:	50                   	push   eax
c001f801:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f805:	2d c8 00 00 00       	sub    eax,0xc8
c001f80a:	50                   	push   eax
c001f80b:	e8 d8 fd ff ff       	call   c001f5e8 <Vm::fpuSetReg(int, unsigned long long)>
c001f810:	83 c4 0c             	add    esp,0xc
c001f813:	57                   	push   edi
c001f814:	56                   	push   esi
c001f815:	e9 73 ff ff ff       	jmp    c001f78d <Vm::x87Handler(regs*)+0xab>
c001f81a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f81e:	84 d2                	test   dl,dl
c001f820:	75 0f                	jne    c001f831 <Vm::x87Handler(regs*)+0x14f>
c001f822:	83 ec 0c             	sub    esp,0xc
c001f825:	ff 36                	push   DWORD PTR [esi]
c001f827:	e8 c8 fa ff ff       	call   c001f2f4 <Vm::fpu32ToInternal(unsigned int)>
c001f82c:	e9 bf 00 00 00       	jmp    c001f8f0 <Vm::x87Handler(regs*)+0x20e>
c001f831:	80 fa 03             	cmp    dl,0x3
c001f834:	75 13                	jne    c001f849 <Vm::x87Handler(regs*)+0x167>
c001f836:	e8 55 fe ff ff       	call   c001f690 <Vm::fpuPop()>
c001f83b:	55                   	push   ebp
c001f83c:	55                   	push   ebp
c001f83d:	52                   	push   edx
c001f83e:	50                   	push   eax
c001f83f:	e8 4c fa ff ff       	call   c001f290 <Vm::fpuInternalTo32(unsigned long long)>
c001f844:	e9 88 00 00 00       	jmp    c001f8d1 <Vm::x87Handler(regs*)+0x1ef>
c001f849:	80 fa 05             	cmp    dl,0x5
c001f84c:	75 0e                	jne    c001f85c <Vm::x87Handler(regs*)+0x17a>
c001f84e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f851:	66 a3 82 16 03 c0    	mov    ds:0xc0031682,ax
c001f857:	e9 df 00 00 00       	jmp    c001f93b <Vm::x87Handler(regs*)+0x259>
c001f85c:	31 c0                	xor    eax,eax
c001f85e:	80 fa 07             	cmp    dl,0x7
c001f861:	0f 85 dc 08 00 00    	jne    c0020143 <Vm::x87Handler(regs*)+0xa61>
c001f867:	66 a1 82 16 03 c0    	mov    ax,ds:0xc0031682
c001f86d:	66 89 06             	mov    WORD PTR [esi],ax
c001f870:	e9 c6 00 00 00       	jmp    c001f93b <Vm::x87Handler(regs*)+0x259>
c001f875:	80 fa d8             	cmp    dl,0xd8
c001f878:	0f 84 c9 00 00 00    	je     c001f947 <Vm::x87Handler(regs*)+0x265>
c001f87e:	80 fa dc             	cmp    dl,0xdc
c001f881:	0f 84 0d 02 00 00    	je     c001fa94 <Vm::x87Handler(regs*)+0x3b2>
c001f887:	80 fa de             	cmp    dl,0xde
c001f88a:	0f 84 cd 02 00 00    	je     c001fb5d <Vm::x87Handler(regs*)+0x47b>
c001f890:	80 fa dd             	cmp    dl,0xdd
c001f893:	0f 84 5f 04 00 00    	je     c001fcf8 <Vm::x87Handler(regs*)+0x616>
c001f899:	80 fa da             	cmp    dl,0xda
c001f89c:	0f 84 24 05 00 00    	je     c001fdc6 <Vm::x87Handler(regs*)+0x6e4>
c001f8a2:	80 fa df             	cmp    dl,0xdf
c001f8a5:	0f 84 68 05 00 00    	je     c001fe13 <Vm::x87Handler(regs*)+0x731>
c001f8ab:	31 c0                	xor    eax,eax
c001f8ad:	80 fa db             	cmp    dl,0xdb
c001f8b0:	0f 85 8d 08 00 00    	jne    c0020143 <Vm::x87Handler(regs*)+0xa61>
c001f8b6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8ba:	80 fa 03             	cmp    dl,0x3
c001f8bd:	0f 85 70 06 00 00    	jne    c001ff33 <Vm::x87Handler(regs*)+0x851>
c001f8c3:	e8 c8 fd ff ff       	call   c001f690 <Vm::fpuPop()>
c001f8c8:	55                   	push   ebp
c001f8c9:	55                   	push   ebp
c001f8ca:	52                   	push   edx
c001f8cb:	50                   	push   eax
c001f8cc:	e8 71 fa ff ff       	call   c001f342 <Vm::fpuFloatToLong(unsigned long long)>
c001f8d1:	83 c4 10             	add    esp,0x10
c001f8d4:	89 06                	mov    DWORD PTR [esi],eax
c001f8d6:	eb 63                	jmp    c001f93b <Vm::x87Handler(regs*)+0x259>
c001f8d8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8dc:	84 d2                	test   dl,dl
c001f8de:	0f 85 e6 05 00 00    	jne    c001feca <Vm::x87Handler(regs*)+0x7e8>
c001f8e4:	57                   	push   edi
c001f8e5:	57                   	push   edi
c001f8e6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f8e9:	ff 36                	push   DWORD PTR [esi]
c001f8eb:	e8 49 fa ff ff       	call   c001f339 <Vm::fpu64ToInternal(unsigned long long)>
c001f8f0:	5e                   	pop    esi
c001f8f1:	5f                   	pop    edi
c001f8f2:	52                   	push   edx
c001f8f3:	50                   	push   eax
c001f8f4:	e8 3a fd ff ff       	call   c001f633 <Vm::fpuPush(unsigned long long)>
c001f8f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f8fd:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f900:	e9 51 fe ff ff       	jmp    c001f756 <Vm::x87Handler(regs*)+0x74>
c001f905:	80 fa 03             	cmp    dl,0x3
c001f908:	0f 85 d7 06 00 00    	jne    c001ffe5 <Vm::x87Handler(regs*)+0x903>
c001f90e:	57                   	push   edi
c001f90f:	57                   	push   edi
c001f910:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f913:	ff 36                	push   DWORD PTR [esi]
c001f915:	e8 1f fa ff ff       	call   c001f339 <Vm::fpu64ToInternal(unsigned long long)>
c001f91a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f921:	89 c6                	mov    esi,eax
c001f923:	89 d7                	mov    edi,edx
c001f925:	e8 7b fc ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001f92a:	57                   	push   edi
c001f92b:	56                   	push   esi
c001f92c:	52                   	push   edx
c001f92d:	50                   	push   eax
c001f92e:	e8 95 fb ff ff       	call   c001f4c8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f933:	83 c4 20             	add    esp,0x20
c001f936:	e8 55 fd ff ff       	call   c001f690 <Vm::fpuPop()>
c001f93b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f93f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f942:	e9 12 fe ff ff       	jmp    c001f759 <Vm::x87Handler(regs*)+0x77>
c001f947:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f94b:	8d 50 40             	lea    edx,[eax+0x40]
c001f94e:	80 fa 07             	cmp    dl,0x7
c001f951:	77 29                	ja     c001f97c <Vm::x87Handler(regs*)+0x29a>
c001f953:	83 ec 0c             	sub    esp,0xc
c001f956:	2d c0 00 00 00       	sub    eax,0xc0
c001f95b:	50                   	push   eax
c001f95c:	e8 44 fc ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001f961:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f968:	89 c6                	mov    esi,eax
c001f96a:	89 d7                	mov    edi,edx
c001f96c:	e8 34 fc ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001f971:	57                   	push   edi
c001f972:	56                   	push   esi
c001f973:	52                   	push   edx
c001f974:	50                   	push   eax
c001f975:	e8 a1 fb ff ff       	call   c001f51b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f97a:	eb 2f                	jmp    c001f9ab <Vm::x87Handler(regs*)+0x2c9>
c001f97c:	8d 50 38             	lea    edx,[eax+0x38]
c001f97f:	80 fa 07             	cmp    dl,0x7
c001f982:	77 2f                	ja     c001f9b3 <Vm::x87Handler(regs*)+0x2d1>
c001f984:	83 ec 0c             	sub    esp,0xc
c001f987:	2d c8 00 00 00       	sub    eax,0xc8
c001f98c:	50                   	push   eax
c001f98d:	e8 13 fc ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001f992:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f999:	89 c6                	mov    esi,eax
c001f99b:	89 d7                	mov    edi,edx
c001f99d:	e8 03 fc ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001f9a2:	57                   	push   edi
c001f9a3:	56                   	push   esi
c001f9a4:	52                   	push   edx
c001f9a5:	50                   	push   eax
c001f9a6:	e8 a9 fb ff ff       	call   c001f554 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9ab:	83 c4 1c             	add    esp,0x1c
c001f9ae:	e9 d8 fd ff ff       	jmp    c001f78b <Vm::x87Handler(regs*)+0xa9>
c001f9b3:	8d 50 30             	lea    edx,[eax+0x30]
c001f9b6:	80 fa 07             	cmp    dl,0x7
c001f9b9:	77 0d                	ja     c001f9c8 <Vm::x87Handler(regs*)+0x2e6>
c001f9bb:	83 ec 0c             	sub    esp,0xc
c001f9be:	2d d0 00 00 00       	sub    eax,0xd0
c001f9c3:	e9 99 03 00 00       	jmp    c001fd61 <Vm::x87Handler(regs*)+0x67f>
c001f9c8:	8d 50 28             	lea    edx,[eax+0x28]
c001f9cb:	80 fa 07             	cmp    dl,0x7
c001f9ce:	77 0d                	ja     c001f9dd <Vm::x87Handler(regs*)+0x2fb>
c001f9d0:	83 ec 0c             	sub    esp,0xc
c001f9d3:	2d d8 00 00 00       	sub    eax,0xd8
c001f9d8:	e9 c0 03 00 00       	jmp    c001fd9d <Vm::x87Handler(regs*)+0x6bb>
c001f9dd:	8d 50 20             	lea    edx,[eax+0x20]
c001f9e0:	80 fa 07             	cmp    dl,0x7
c001f9e3:	77 1b                	ja     c001fa00 <Vm::x87Handler(regs*)+0x31e>
c001f9e5:	83 ec 0c             	sub    esp,0xc
c001f9e8:	2d e0 00 00 00       	sub    eax,0xe0
c001f9ed:	50                   	push   eax
c001f9ee:	e8 b2 fb ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001f9f3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9fa:	89 c6                	mov    esi,eax
c001f9fc:	89 d7                	mov    edi,edx
c001f9fe:	eb 22                	jmp    c001fa22 <Vm::x87Handler(regs*)+0x340>
c001fa00:	8d 50 18             	lea    edx,[eax+0x18]
c001fa03:	80 fa 07             	cmp    dl,0x7
c001fa06:	77 2d                	ja     c001fa35 <Vm::x87Handler(regs*)+0x353>
c001fa08:	83 ec 0c             	sub    esp,0xc
c001fa0b:	6a 00                	push   0x0
c001fa0d:	e8 93 fb ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fa12:	89 c6                	mov    esi,eax
c001fa14:	89 d7                	mov    edi,edx
c001fa16:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa1a:	2d e8 00 00 00       	sub    eax,0xe8
c001fa1f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa22:	e8 7e fb ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fa27:	57                   	push   edi
c001fa28:	56                   	push   esi
c001fa29:	52                   	push   edx
c001fa2a:	50                   	push   eax
c001fa2b:	e8 15 fb ff ff       	call   c001f545 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fa30:	e9 76 ff ff ff       	jmp    c001f9ab <Vm::x87Handler(regs*)+0x2c9>
c001fa35:	8d 50 10             	lea    edx,[eax+0x10]
c001fa38:	80 fa 07             	cmp    dl,0x7
c001fa3b:	77 1b                	ja     c001fa58 <Vm::x87Handler(regs*)+0x376>
c001fa3d:	83 ec 0c             	sub    esp,0xc
c001fa40:	2d f0 00 00 00       	sub    eax,0xf0
c001fa45:	50                   	push   eax
c001fa46:	e8 5a fb ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fa4b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa52:	89 c6                	mov    esi,eax
c001fa54:	89 d7                	mov    edi,edx
c001fa56:	eb 22                	jmp    c001fa7a <Vm::x87Handler(regs*)+0x398>
c001fa58:	3c f7                	cmp    al,0xf7
c001fa5a:	0f 86 d1 03 00 00    	jbe    c001fe31 <Vm::x87Handler(regs*)+0x74f>
c001fa60:	83 ec 0c             	sub    esp,0xc
c001fa63:	6a 00                	push   0x0
c001fa65:	e8 3b fb ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fa6a:	89 c6                	mov    esi,eax
c001fa6c:	89 d7                	mov    edi,edx
c001fa6e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa72:	2d f8 00 00 00       	sub    eax,0xf8
c001fa77:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa7a:	e8 26 fb ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fa7f:	57                   	push   edi
c001fa80:	56                   	push   esi
c001fa81:	52                   	push   edx
c001fa82:	50                   	push   eax
c001fa83:	e8 eb fa ff ff       	call   c001f573 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fa88:	83 c4 1c             	add    esp,0x1c
c001fa8b:	52                   	push   edx
c001fa8c:	50                   	push   eax
c001fa8d:	6a 00                	push   0x0
c001fa8f:	e9 51 02 00 00       	jmp    c001fce5 <Vm::x87Handler(regs*)+0x603>
c001fa94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa98:	8d 50 40             	lea    edx,[eax+0x40]
c001fa9b:	80 fa 07             	cmp    dl,0x7
c001fa9e:	77 37                	ja     c001fad7 <Vm::x87Handler(regs*)+0x3f5>
c001faa0:	83 ec 0c             	sub    esp,0xc
c001faa3:	2d c0 00 00 00       	sub    eax,0xc0
c001faa8:	50                   	push   eax
c001faa9:	e8 f7 fa ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001faae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fab5:	89 c6                	mov    esi,eax
c001fab7:	89 d7                	mov    edi,edx
c001fab9:	e8 e7 fa ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fabe:	57                   	push   edi
c001fabf:	56                   	push   esi
c001fac0:	52                   	push   edx
c001fac1:	50                   	push   eax
c001fac2:	e8 54 fa ff ff       	call   c001f51b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fac7:	83 c4 1c             	add    esp,0x1c
c001faca:	52                   	push   edx
c001facb:	50                   	push   eax
c001facc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fad0:	2d c0 00 00 00       	sub    eax,0xc0
c001fad5:	eb 3d                	jmp    c001fb14 <Vm::x87Handler(regs*)+0x432>
c001fad7:	8d 50 38             	lea    edx,[eax+0x38]
c001fada:	80 fa 07             	cmp    dl,0x7
c001fadd:	77 3b                	ja     c001fb1a <Vm::x87Handler(regs*)+0x438>
c001fadf:	83 ec 0c             	sub    esp,0xc
c001fae2:	2d c8 00 00 00       	sub    eax,0xc8
c001fae7:	50                   	push   eax
c001fae8:	e8 b8 fa ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001faed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001faf4:	89 c6                	mov    esi,eax
c001faf6:	89 d7                	mov    edi,edx
c001faf8:	e8 a8 fa ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fafd:	57                   	push   edi
c001fafe:	56                   	push   esi
c001faff:	52                   	push   edx
c001fb00:	50                   	push   eax
c001fb01:	e8 4e fa ff ff       	call   c001f554 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fb06:	83 c4 1c             	add    esp,0x1c
c001fb09:	52                   	push   edx
c001fb0a:	50                   	push   eax
c001fb0b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb0f:	2d c8 00 00 00       	sub    eax,0xc8
c001fb14:	50                   	push   eax
c001fb15:	e9 75 fc ff ff       	jmp    c001f78f <Vm::x87Handler(regs*)+0xad>
c001fb1a:	83 c0 18             	add    eax,0x18
c001fb1d:	3c 07                	cmp    al,0x7
c001fb1f:	0f 87 3b 04 00 00    	ja     c001ff60 <Vm::x87Handler(regs*)+0x87e>
c001fb25:	83 ec 0c             	sub    esp,0xc
c001fb28:	6a 00                	push   0x0
c001fb2a:	e8 76 fa ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fb2f:	89 c6                	mov    esi,eax
c001fb31:	89 d7                	mov    edi,edx
c001fb33:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb37:	2d e8 00 00 00       	sub    eax,0xe8
c001fb3c:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb3f:	e8 61 fa ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fb44:	57                   	push   edi
c001fb45:	56                   	push   esi
c001fb46:	52                   	push   edx
c001fb47:	50                   	push   eax
c001fb48:	e8 f8 f9 ff ff       	call   c001f545 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fb4d:	83 c4 1c             	add    esp,0x1c
c001fb50:	52                   	push   edx
c001fb51:	50                   	push   eax
c001fb52:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb56:	2d e8 00 00 00       	sub    eax,0xe8
c001fb5b:	eb b7                	jmp    c001fb14 <Vm::x87Handler(regs*)+0x432>
c001fb5d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb61:	8d 50 40             	lea    edx,[eax+0x40]
c001fb64:	80 fa 07             	cmp    dl,0x7
c001fb67:	77 3a                	ja     c001fba3 <Vm::x87Handler(regs*)+0x4c1>
c001fb69:	83 ec 0c             	sub    esp,0xc
c001fb6c:	2d c0 00 00 00       	sub    eax,0xc0
c001fb71:	50                   	push   eax
c001fb72:	e8 2e fa ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fb77:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb7e:	89 c6                	mov    esi,eax
c001fb80:	89 d7                	mov    edi,edx
c001fb82:	e8 1e fa ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fb87:	57                   	push   edi
c001fb88:	56                   	push   esi
c001fb89:	52                   	push   edx
c001fb8a:	50                   	push   eax
c001fb8b:	e8 8b f9 ff ff       	call   c001f51b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb90:	83 c4 1c             	add    esp,0x1c
c001fb93:	52                   	push   edx
c001fb94:	50                   	push   eax
c001fb95:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb99:	2d c0 00 00 00       	sub    eax,0xc0
c001fb9e:	e9 9e 01 00 00       	jmp    c001fd41 <Vm::x87Handler(regs*)+0x65f>
c001fba3:	8d 50 20             	lea    edx,[eax+0x20]
c001fba6:	80 fa 07             	cmp    dl,0x7
c001fba9:	77 3a                	ja     c001fbe5 <Vm::x87Handler(regs*)+0x503>
c001fbab:	83 ec 0c             	sub    esp,0xc
c001fbae:	2d e0 00 00 00       	sub    eax,0xe0
c001fbb3:	50                   	push   eax
c001fbb4:	e8 ec f9 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fbb9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbc0:	89 c6                	mov    esi,eax
c001fbc2:	89 d7                	mov    edi,edx
c001fbc4:	e8 dc f9 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fbc9:	57                   	push   edi
c001fbca:	56                   	push   esi
c001fbcb:	52                   	push   edx
c001fbcc:	50                   	push   eax
c001fbcd:	e8 73 f9 ff ff       	call   c001f545 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fbd2:	83 c4 1c             	add    esp,0x1c
c001fbd5:	52                   	push   edx
c001fbd6:	50                   	push   eax
c001fbd7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbdb:	2d e0 00 00 00       	sub    eax,0xe0
c001fbe0:	e9 5c 01 00 00       	jmp    c001fd41 <Vm::x87Handler(regs*)+0x65f>
c001fbe5:	8d 50 18             	lea    edx,[eax+0x18]
c001fbe8:	80 fa 07             	cmp    dl,0x7
c001fbeb:	77 3b                	ja     c001fc28 <Vm::x87Handler(regs*)+0x546>
c001fbed:	83 ec 0c             	sub    esp,0xc
c001fbf0:	6a 00                	push   0x0
c001fbf2:	e8 ae f9 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fbf7:	89 c6                	mov    esi,eax
c001fbf9:	89 d7                	mov    edi,edx
c001fbfb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbff:	2d e8 00 00 00       	sub    eax,0xe8
c001fc04:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc07:	e8 99 f9 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fc0c:	57                   	push   edi
c001fc0d:	56                   	push   esi
c001fc0e:	52                   	push   edx
c001fc0f:	50                   	push   eax
c001fc10:	e8 30 f9 ff ff       	call   c001f545 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc15:	83 c4 1c             	add    esp,0x1c
c001fc18:	52                   	push   edx
c001fc19:	50                   	push   eax
c001fc1a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc1e:	2d e8 00 00 00       	sub    eax,0xe8
c001fc23:	e9 19 01 00 00       	jmp    c001fd41 <Vm::x87Handler(regs*)+0x65f>
c001fc28:	8d 50 38             	lea    edx,[eax+0x38]
c001fc2b:	80 fa 07             	cmp    dl,0x7
c001fc2e:	77 37                	ja     c001fc67 <Vm::x87Handler(regs*)+0x585>
c001fc30:	83 ec 0c             	sub    esp,0xc
c001fc33:	2d c8 00 00 00       	sub    eax,0xc8
c001fc38:	50                   	push   eax
c001fc39:	e8 67 f9 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fc3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc45:	89 c6                	mov    esi,eax
c001fc47:	89 d7                	mov    edi,edx
c001fc49:	e8 57 f9 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fc4e:	57                   	push   edi
c001fc4f:	56                   	push   esi
c001fc50:	52                   	push   edx
c001fc51:	50                   	push   eax
c001fc52:	e8 fd f8 ff ff       	call   c001f554 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc57:	83 c4 1c             	add    esp,0x1c
c001fc5a:	52                   	push   edx
c001fc5b:	50                   	push   eax
c001fc5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc60:	2d c8 00 00 00       	sub    eax,0xc8
c001fc65:	eb 7d                	jmp    c001fce4 <Vm::x87Handler(regs*)+0x602>
c001fc67:	3c f7                	cmp    al,0xf7
c001fc69:	76 38                	jbe    c001fca3 <Vm::x87Handler(regs*)+0x5c1>
c001fc6b:	83 ec 0c             	sub    esp,0xc
c001fc6e:	6a 00                	push   0x0
c001fc70:	e8 30 f9 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fc75:	89 c6                	mov    esi,eax
c001fc77:	89 d7                	mov    edi,edx
c001fc79:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc7d:	2d f8 00 00 00       	sub    eax,0xf8
c001fc82:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc85:	e8 1b f9 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fc8a:	57                   	push   edi
c001fc8b:	56                   	push   esi
c001fc8c:	52                   	push   edx
c001fc8d:	50                   	push   eax
c001fc8e:	e8 e0 f8 ff ff       	call   c001f573 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc93:	83 c4 1c             	add    esp,0x1c
c001fc96:	52                   	push   edx
c001fc97:	50                   	push   eax
c001fc98:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc9c:	2d f8 00 00 00       	sub    eax,0xf8
c001fca1:	eb 41                	jmp    c001fce4 <Vm::x87Handler(regs*)+0x602>
c001fca3:	8d 50 10             	lea    edx,[eax+0x10]
c001fca6:	80 fa 07             	cmp    dl,0x7
c001fca9:	0f 87 5a 01 00 00    	ja     c001fe09 <Vm::x87Handler(regs*)+0x727>
c001fcaf:	83 ec 0c             	sub    esp,0xc
c001fcb2:	2d f0 00 00 00       	sub    eax,0xf0
c001fcb7:	50                   	push   eax
c001fcb8:	e8 e8 f8 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fcbd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcc4:	89 c6                	mov    esi,eax
c001fcc6:	89 d7                	mov    edi,edx
c001fcc8:	e8 d8 f8 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fccd:	57                   	push   edi
c001fcce:	56                   	push   esi
c001fccf:	52                   	push   edx
c001fcd0:	50                   	push   eax
c001fcd1:	e8 9d f8 ff ff       	call   c001f573 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fcd6:	83 c4 1c             	add    esp,0x1c
c001fcd9:	52                   	push   edx
c001fcda:	50                   	push   eax
c001fcdb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcdf:	2d f0 00 00 00       	sub    eax,0xf0
c001fce4:	50                   	push   eax
c001fce5:	e8 fe f8 ff ff       	call   c001f5e8 <Vm::fpuSetReg(int, unsigned long long)>
c001fcea:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fcee:	e8 9d f9 ff ff       	call   c001f690 <Vm::fpuPop()>
c001fcf3:	e9 5e fa ff ff       	jmp    c001f756 <Vm::x87Handler(regs*)+0x74>
c001fcf8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcfc:	8d 50 30             	lea    edx,[eax+0x30]
c001fcff:	80 fa 07             	cmp    dl,0x7
c001fd02:	77 1d                	ja     c001fd21 <Vm::x87Handler(regs*)+0x63f>
c001fd04:	83 ec 0c             	sub    esp,0xc
c001fd07:	6a 00                	push   0x0
c001fd09:	e8 97 f8 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fd0e:	83 c4 0c             	add    esp,0xc
c001fd11:	52                   	push   edx
c001fd12:	50                   	push   eax
c001fd13:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd17:	2d d0 00 00 00       	sub    eax,0xd0
c001fd1c:	e9 f3 fd ff ff       	jmp    c001fb14 <Vm::x87Handler(regs*)+0x432>
c001fd21:	8d 50 28             	lea    edx,[eax+0x28]
c001fd24:	80 fa 07             	cmp    dl,0x7
c001fd27:	77 28                	ja     c001fd51 <Vm::x87Handler(regs*)+0x66f>
c001fd29:	83 ec 0c             	sub    esp,0xc
c001fd2c:	6a 00                	push   0x0
c001fd2e:	e8 72 f8 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fd33:	83 c4 0c             	add    esp,0xc
c001fd36:	52                   	push   edx
c001fd37:	50                   	push   eax
c001fd38:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd3c:	2d d8 00 00 00       	sub    eax,0xd8
c001fd41:	50                   	push   eax
c001fd42:	e8 a1 f8 ff ff       	call   c001f5e8 <Vm::fpuSetReg(int, unsigned long long)>
c001fd47:	e8 44 f9 ff ff       	call   c001f690 <Vm::fpuPop()>
c001fd4c:	e9 01 fa ff ff       	jmp    c001f752 <Vm::x87Handler(regs*)+0x70>
c001fd51:	8d 50 20             	lea    edx,[eax+0x20]
c001fd54:	80 fa 07             	cmp    dl,0x7
c001fd57:	77 30                	ja     c001fd89 <Vm::x87Handler(regs*)+0x6a7>
c001fd59:	83 ec 0c             	sub    esp,0xc
c001fd5c:	2d e0 00 00 00       	sub    eax,0xe0
c001fd61:	50                   	push   eax
c001fd62:	e8 3e f8 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fd67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd6e:	89 c6                	mov    esi,eax
c001fd70:	89 d7                	mov    edi,edx
c001fd72:	e8 2e f8 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fd77:	57                   	push   edi
c001fd78:	56                   	push   esi
c001fd79:	52                   	push   edx
c001fd7a:	50                   	push   eax
c001fd7b:	e8 48 f7 ff ff       	call   c001f4c8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd80:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fd84:	e9 54 02 00 00       	jmp    c001ffdd <Vm::x87Handler(regs*)+0x8fb>
c001fd89:	8d 50 18             	lea    edx,[eax+0x18]
c001fd8c:	80 fa 07             	cmp    dl,0x7
c001fd8f:	0f 87 43 fb ff ff    	ja     c001f8d8 <Vm::x87Handler(regs*)+0x1f6>
c001fd95:	83 ec 0c             	sub    esp,0xc
c001fd98:	2d e8 00 00 00       	sub    eax,0xe8
c001fd9d:	50                   	push   eax
c001fd9e:	e8 02 f8 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fda3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdaa:	89 c6                	mov    esi,eax
c001fdac:	89 d7                	mov    edi,edx
c001fdae:	e8 f2 f7 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fdb3:	57                   	push   edi
c001fdb4:	56                   	push   esi
c001fdb5:	52                   	push   edx
c001fdb6:	50                   	push   eax
c001fdb7:	e8 0c f7 ff ff       	call   c001f4c8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdbc:	83 c4 20             	add    esp,0x20
c001fdbf:	e8 cc f8 ff ff       	call   c001f690 <Vm::fpuPop()>
c001fdc4:	eb 62                	jmp    c001fe28 <Vm::x87Handler(regs*)+0x746>
c001fdc6:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fdca:	0f 85 0f 01 00 00    	jne    c001fedf <Vm::x87Handler(regs*)+0x7fd>
c001fdd0:	83 ec 0c             	sub    esp,0xc
c001fdd3:	6a 01                	push   0x1
c001fdd5:	e8 cb f7 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fdda:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fde1:	89 c6                	mov    esi,eax
c001fde3:	89 d7                	mov    edi,edx
c001fde5:	e8 bb f7 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fdea:	57                   	push   edi
c001fdeb:	56                   	push   esi
c001fdec:	52                   	push   edx
c001fded:	50                   	push   eax
c001fdee:	e8 d5 f6 ff ff       	call   c001f4c8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdf3:	83 c4 20             	add    esp,0x20
c001fdf6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fdfa:	e8 91 f8 ff ff       	call   c001f690 <Vm::fpuPop()>
c001fdff:	e8 8c f8 ff ff       	call   c001f690 <Vm::fpuPop()>
c001fe04:	e9 50 f9 ff ff       	jmp    c001f759 <Vm::x87Handler(regs*)+0x77>
c001fe09:	3c d9                	cmp    al,0xd9
c001fe0b:	0f 85 b5 02 00 00    	jne    c00200c6 <Vm::x87Handler(regs*)+0x9e4>
c001fe11:	eb bd                	jmp    c001fdd0 <Vm::x87Handler(regs*)+0x6ee>
c001fe13:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fe17:	0f 85 ea 02 00 00    	jne    c0020107 <Vm::x87Handler(regs*)+0xa25>
c001fe1d:	0f b7 05 80 16 03 c0 	movzx  eax,WORD PTR ds:0xc0031680
c001fe24:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fe28:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fe2c:	e9 28 f9 ff ff       	jmp    c001f759 <Vm::x87Handler(regs*)+0x77>
c001fe31:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe35:	84 d2                	test   dl,dl
c001fe37:	75 0f                	jne    c001fe48 <Vm::x87Handler(regs*)+0x766>
c001fe39:	83 ec 0c             	sub    esp,0xc
c001fe3c:	ff 36                	push   DWORD PTR [esi]
c001fe3e:	e8 b1 f4 ff ff       	call   c001f2f4 <Vm::fpu32ToInternal(unsigned int)>
c001fe43:	e9 2c 01 00 00       	jmp    c001ff74 <Vm::x87Handler(regs*)+0x892>
c001fe48:	80 fa 01             	cmp    dl,0x1
c001fe4b:	75 0f                	jne    c001fe5c <Vm::x87Handler(regs*)+0x77a>
c001fe4d:	83 ec 0c             	sub    esp,0xc
c001fe50:	ff 36                	push   DWORD PTR [esi]
c001fe52:	e8 9d f4 ff ff       	call   c001f2f4 <Vm::fpu32ToInternal(unsigned int)>
c001fe57:	e9 81 02 00 00       	jmp    c00200dd <Vm::x87Handler(regs*)+0x9fb>
c001fe5c:	80 fa 04             	cmp    dl,0x4
c001fe5f:	75 0f                	jne    c001fe70 <Vm::x87Handler(regs*)+0x78e>
c001fe61:	83 ec 0c             	sub    esp,0xc
c001fe64:	ff 36                	push   DWORD PTR [esi]
c001fe66:	e8 89 f4 ff ff       	call   c001f2f4 <Vm::fpu32ToInternal(unsigned int)>
c001fe6b:	e9 86 01 00 00       	jmp    c001fff6 <Vm::x87Handler(regs*)+0x914>
c001fe70:	80 fa 05             	cmp    dl,0x5
c001fe73:	75 1b                	jne    c001fe90 <Vm::x87Handler(regs*)+0x7ae>
c001fe75:	83 ec 0c             	sub    esp,0xc
c001fe78:	6a 00                	push   0x0
c001fe7a:	e8 26 f7 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001fe7f:	89 c7                	mov    edi,eax
c001fe81:	89 d5                	mov    ebp,edx
c001fe83:	58                   	pop    eax
c001fe84:	ff 36                	push   DWORD PTR [esi]
c001fe86:	e8 69 f4 ff ff       	call   c001f2f4 <Vm::fpu32ToInternal(unsigned int)>
c001fe8b:	e9 a3 01 00 00       	jmp    c0020033 <Vm::x87Handler(regs*)+0x951>
c001fe90:	80 fa 06             	cmp    dl,0x6
c001fe93:	75 0f                	jne    c001fea4 <Vm::x87Handler(regs*)+0x7c2>
c001fe95:	83 ec 0c             	sub    esp,0xc
c001fe98:	ff 36                	push   DWORD PTR [esi]
c001fe9a:	e8 55 f4 ff ff       	call   c001f2f4 <Vm::fpu32ToInternal(unsigned int)>
c001fe9f:	e9 ae 01 00 00       	jmp    c0020052 <Vm::x87Handler(regs*)+0x970>
c001fea4:	31 c0                	xor    eax,eax
c001fea6:	80 fa 07             	cmp    dl,0x7
c001fea9:	0f 85 94 02 00 00    	jne    c0020143 <Vm::x87Handler(regs*)+0xa61>
c001feaf:	83 ec 0c             	sub    esp,0xc
c001feb2:	6a 00                	push   0x0
c001feb4:	e8 ec f6 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001feb9:	89 c7                	mov    edi,eax
c001febb:	89 d5                	mov    ebp,edx
c001febd:	58                   	pop    eax
c001febe:	ff 36                	push   DWORD PTR [esi]
c001fec0:	e8 2f f4 ff ff       	call   c001f2f4 <Vm::fpu32ToInternal(unsigned int)>
c001fec5:	e9 cb 01 00 00       	jmp    c0020095 <Vm::x87Handler(regs*)+0x9b3>
c001feca:	80 fa 03             	cmp    dl,0x3
c001fecd:	0f 85 d3 01 00 00    	jne    c00200a6 <Vm::x87Handler(regs*)+0x9c4>
c001fed3:	e8 b8 f7 ff ff       	call   c001f690 <Vm::fpuPop()>
c001fed8:	51                   	push   ecx
c001fed9:	51                   	push   ecx
c001feda:	e9 de 01 00 00       	jmp    c00200bd <Vm::x87Handler(regs*)+0x9db>
c001fedf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fee3:	80 fa 01             	cmp    dl,0x1
c001fee6:	75 09                	jne    c001fef1 <Vm::x87Handler(regs*)+0x80f>
c001fee8:	57                   	push   edi
c001fee9:	57                   	push   edi
c001feea:	8b 06                	mov    eax,DWORD PTR [esi]
c001feec:	e9 e3 01 00 00       	jmp    c00200d4 <Vm::x87Handler(regs*)+0x9f2>
c001fef1:	80 fa 04             	cmp    dl,0x4
c001fef4:	75 12                	jne    c001ff08 <Vm::x87Handler(regs*)+0x826>
c001fef6:	31 d2                	xor    edx,edx
c001fef8:	51                   	push   ecx
c001fef9:	51                   	push   ecx
c001fefa:	8b 06                	mov    eax,DWORD PTR [esi]
c001fefc:	52                   	push   edx
c001fefd:	50                   	push   eax
c001fefe:	e8 d0 f4 ff ff       	call   c001f3d3 <Vm::fpuLongToFloat(long long)>
c001ff03:	e9 ee 00 00 00       	jmp    c001fff6 <Vm::x87Handler(regs*)+0x914>
c001ff08:	31 c0                	xor    eax,eax
c001ff0a:	80 fa 07             	cmp    dl,0x7
c001ff0d:	0f 85 30 02 00 00    	jne    c0020143 <Vm::x87Handler(regs*)+0xa61>
c001ff13:	83 ec 0c             	sub    esp,0xc
c001ff16:	6a 00                	push   0x0
c001ff18:	e8 88 f6 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001ff1d:	89 c7                	mov    edi,eax
c001ff1f:	89 d5                	mov    ebp,edx
c001ff21:	58                   	pop    eax
c001ff22:	8b 06                	mov    eax,DWORD PTR [esi]
c001ff24:	5a                   	pop    edx
c001ff25:	31 d2                	xor    edx,edx
c001ff27:	52                   	push   edx
c001ff28:	50                   	push   eax
c001ff29:	e8 a5 f4 ff ff       	call   c001f3d3 <Vm::fpuLongToFloat(long long)>
c001ff2e:	e9 62 01 00 00       	jmp    c0020095 <Vm::x87Handler(regs*)+0x9b3>
c001ff33:	84 d2                	test   dl,dl
c001ff35:	75 0d                	jne    c001ff44 <Vm::x87Handler(regs*)+0x862>
c001ff37:	31 d2                	xor    edx,edx
c001ff39:	55                   	push   ebp
c001ff3a:	55                   	push   ebp
c001ff3b:	8b 06                	mov    eax,DWORD PTR [esi]
c001ff3d:	52                   	push   edx
c001ff3e:	50                   	push   eax
c001ff3f:	e9 d3 01 00 00       	jmp    c0020117 <Vm::x87Handler(regs*)+0xa35>
c001ff44:	31 c0                	xor    eax,eax
c001ff46:	80 fa 02             	cmp    dl,0x2
c001ff49:	0f 85 f4 01 00 00    	jne    c0020143 <Vm::x87Handler(regs*)+0xa61>
c001ff4f:	83 ec 0c             	sub    esp,0xc
c001ff52:	6a 00                	push   0x0
c001ff54:	e8 4c f6 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001ff59:	59                   	pop    ecx
c001ff5a:	5f                   	pop    edi
c001ff5b:	e9 6a f9 ff ff       	jmp    c001f8ca <Vm::x87Handler(regs*)+0x1e8>
c001ff60:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ff64:	84 d2                	test   dl,dl
c001ff66:	75 2a                	jne    c001ff92 <Vm::x87Handler(regs*)+0x8b0>
c001ff68:	50                   	push   eax
c001ff69:	50                   	push   eax
c001ff6a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff6d:	ff 36                	push   DWORD PTR [esi]
c001ff6f:	e8 c5 f3 ff ff       	call   c001f339 <Vm::fpu64ToInternal(unsigned long long)>
c001ff74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff7b:	89 c6                	mov    esi,eax
c001ff7d:	89 d7                	mov    edi,edx
c001ff7f:	e8 21 f6 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001ff84:	57                   	push   edi
c001ff85:	56                   	push   esi
c001ff86:	52                   	push   edx
c001ff87:	50                   	push   eax
c001ff88:	e8 8e f5 ff ff       	call   c001f51b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff8d:	e9 64 01 00 00       	jmp    c00200f6 <Vm::x87Handler(regs*)+0xa14>
c001ff92:	80 fa 01             	cmp    dl,0x1
c001ff95:	75 11                	jne    c001ffa8 <Vm::x87Handler(regs*)+0x8c6>
c001ff97:	50                   	push   eax
c001ff98:	50                   	push   eax
c001ff99:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff9c:	ff 36                	push   DWORD PTR [esi]
c001ff9e:	e8 96 f3 ff ff       	call   c001f339 <Vm::fpu64ToInternal(unsigned long long)>
c001ffa3:	e9 35 01 00 00       	jmp    c00200dd <Vm::x87Handler(regs*)+0x9fb>
c001ffa8:	80 fa 02             	cmp    dl,0x2
c001ffab:	0f 85 54 f9 ff ff    	jne    c001f905 <Vm::x87Handler(regs*)+0x223>
c001ffb1:	55                   	push   ebp
c001ffb2:	55                   	push   ebp
c001ffb3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ffb6:	ff 36                	push   DWORD PTR [esi]
c001ffb8:	e8 7c f3 ff ff       	call   c001f339 <Vm::fpu64ToInternal(unsigned long long)>
c001ffbd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc4:	89 c6                	mov    esi,eax
c001ffc6:	89 d7                	mov    edi,edx
c001ffc8:	e8 d8 f5 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c001ffcd:	57                   	push   edi
c001ffce:	56                   	push   esi
c001ffcf:	52                   	push   edx
c001ffd0:	50                   	push   eax
c001ffd1:	e8 f2 f4 ff ff       	call   c001f4c8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffd6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ffda:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ffdd:	83 c4 20             	add    esp,0x20
c001ffe0:	e9 74 f7 ff ff       	jmp    c001f759 <Vm::x87Handler(regs*)+0x77>
c001ffe5:	80 fa 04             	cmp    dl,0x4
c001ffe8:	75 2a                	jne    c0020014 <Vm::x87Handler(regs*)+0x932>
c001ffea:	51                   	push   ecx
c001ffeb:	51                   	push   ecx
c001ffec:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ffef:	ff 36                	push   DWORD PTR [esi]
c001fff1:	e8 43 f3 ff ff       	call   c001f339 <Vm::fpu64ToInternal(unsigned long long)>
c001fff6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fffd:	89 c6                	mov    esi,eax
c001ffff:	89 d7                	mov    edi,edx
c0020001:	e8 9f f5 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c0020006:	57                   	push   edi
c0020007:	56                   	push   esi
c0020008:	52                   	push   edx
c0020009:	50                   	push   eax
c002000a:	e8 36 f5 ff ff       	call   c001f545 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002000f:	e9 e2 00 00 00       	jmp    c00200f6 <Vm::x87Handler(regs*)+0xa14>
c0020014:	80 fa 05             	cmp    dl,0x5
c0020017:	75 28                	jne    c0020041 <Vm::x87Handler(regs*)+0x95f>
c0020019:	83 ec 0c             	sub    esp,0xc
c002001c:	6a 00                	push   0x0
c002001e:	e8 82 f5 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c0020023:	89 c7                	mov    edi,eax
c0020025:	89 d5                	mov    ebp,edx
c0020027:	58                   	pop    eax
c0020028:	5a                   	pop    edx
c0020029:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002002c:	ff 36                	push   DWORD PTR [esi]
c002002e:	e8 06 f3 ff ff       	call   c001f339 <Vm::fpu64ToInternal(unsigned long long)>
c0020033:	83 c4 10             	add    esp,0x10
c0020036:	55                   	push   ebp
c0020037:	57                   	push   edi
c0020038:	52                   	push   edx
c0020039:	50                   	push   eax
c002003a:	e8 06 f5 ff ff       	call   c001f545 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002003f:	eb 60                	jmp    c00200a1 <Vm::x87Handler(regs*)+0x9bf>
c0020041:	80 fa 06             	cmp    dl,0x6
c0020044:	75 2a                	jne    c0020070 <Vm::x87Handler(regs*)+0x98e>
c0020046:	51                   	push   ecx
c0020047:	51                   	push   ecx
c0020048:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002004b:	ff 36                	push   DWORD PTR [esi]
c002004d:	e8 e7 f2 ff ff       	call   c001f339 <Vm::fpu64ToInternal(unsigned long long)>
c0020052:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020059:	89 c6                	mov    esi,eax
c002005b:	89 d7                	mov    edi,edx
c002005d:	e8 43 f5 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c0020062:	57                   	push   edi
c0020063:	56                   	push   esi
c0020064:	52                   	push   edx
c0020065:	50                   	push   eax
c0020066:	e8 08 f5 ff ff       	call   c001f573 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002006b:	e9 86 00 00 00       	jmp    c00200f6 <Vm::x87Handler(regs*)+0xa14>
c0020070:	31 c0                	xor    eax,eax
c0020072:	80 fa 07             	cmp    dl,0x7
c0020075:	0f 85 c8 00 00 00    	jne    c0020143 <Vm::x87Handler(regs*)+0xa61>
c002007b:	83 ec 0c             	sub    esp,0xc
c002007e:	6a 00                	push   0x0
c0020080:	e8 20 f5 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c0020085:	89 c7                	mov    edi,eax
c0020087:	89 d5                	mov    ebp,edx
c0020089:	58                   	pop    eax
c002008a:	5a                   	pop    edx
c002008b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002008e:	ff 36                	push   DWORD PTR [esi]
c0020090:	e8 a4 f2 ff ff       	call   c001f339 <Vm::fpu64ToInternal(unsigned long long)>
c0020095:	83 c4 10             	add    esp,0x10
c0020098:	55                   	push   ebp
c0020099:	57                   	push   edi
c002009a:	52                   	push   edx
c002009b:	50                   	push   eax
c002009c:	e8 d2 f4 ff ff       	call   c001f573 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200a1:	83 c4 0c             	add    esp,0xc
c00200a4:	eb 53                	jmp    c00200f9 <Vm::x87Handler(regs*)+0xa17>
c00200a6:	31 c0                	xor    eax,eax
c00200a8:	80 fa 02             	cmp    dl,0x2
c00200ab:	0f 85 92 00 00 00    	jne    c0020143 <Vm::x87Handler(regs*)+0xa61>
c00200b1:	83 ec 0c             	sub    esp,0xc
c00200b4:	6a 00                	push   0x0
c00200b6:	e8 ea f4 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c00200bb:	59                   	pop    ecx
c00200bc:	5f                   	pop    edi
c00200bd:	52                   	push   edx
c00200be:	50                   	push   eax
c00200bf:	e8 27 f2 ff ff       	call   c001f2eb <Vm::fpuInternalTo64(unsigned long long)>
c00200c4:	eb 70                	jmp    c0020136 <Vm::x87Handler(regs*)+0xa54>
c00200c6:	31 c0                	xor    eax,eax
c00200c8:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00200cd:	75 74                	jne    c0020143 <Vm::x87Handler(regs*)+0xa61>
c00200cf:	50                   	push   eax
c00200d0:	50                   	push   eax
c00200d1:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00200d4:	31 d2                	xor    edx,edx
c00200d6:	52                   	push   edx
c00200d7:	50                   	push   eax
c00200d8:	e8 f6 f2 ff ff       	call   c001f3d3 <Vm::fpuLongToFloat(long long)>
c00200dd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200e4:	89 c6                	mov    esi,eax
c00200e6:	89 d7                	mov    edi,edx
c00200e8:	e8 b8 f4 ff ff       	call   c001f5a5 <Vm::fpuGetReg(int)>
c00200ed:	57                   	push   edi
c00200ee:	56                   	push   esi
c00200ef:	52                   	push   edx
c00200f0:	50                   	push   eax
c00200f1:	e8 5e f4 ff ff       	call   c001f554 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200f6:	83 c4 1c             	add    esp,0x1c
c00200f9:	52                   	push   edx
c00200fa:	50                   	push   eax
c00200fb:	6a 00                	push   0x0
c00200fd:	e8 e6 f4 ff ff       	call   c001f5e8 <Vm::fpuSetReg(int, unsigned long long)>
c0020102:	e9 f2 f7 ff ff       	jmp    c001f8f9 <Vm::x87Handler(regs*)+0x217>
c0020107:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002010b:	80 fa 05             	cmp    dl,0x5
c002010e:	75 11                	jne    c0020121 <Vm::x87Handler(regs*)+0xa3f>
c0020110:	55                   	push   ebp
c0020111:	55                   	push   ebp
c0020112:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020115:	ff 36                	push   DWORD PTR [esi]
c0020117:	e8 81 f2 ff ff       	call   c001f39d <Vm::fpuULongToFloat(unsigned long long)>
c002011c:	e9 cf f7 ff ff       	jmp    c001f8f0 <Vm::x87Handler(regs*)+0x20e>
c0020121:	31 c0                	xor    eax,eax
c0020123:	80 fa 07             	cmp    dl,0x7
c0020126:	75 1b                	jne    c0020143 <Vm::x87Handler(regs*)+0xa61>
c0020128:	e8 63 f5 ff ff       	call   c001f690 <Vm::fpuPop()>
c002012d:	51                   	push   ecx
c002012e:	51                   	push   ecx
c002012f:	52                   	push   edx
c0020130:	50                   	push   eax
c0020131:	e8 0c f2 ff ff       	call   c001f342 <Vm::fpuFloatToLong(unsigned long long)>
c0020136:	83 c4 10             	add    esp,0x10
c0020139:	89 06                	mov    DWORD PTR [esi],eax
c002013b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002013e:	e9 f8 f7 ff ff       	jmp    c001f93b <Vm::x87Handler(regs*)+0x259>
c0020143:	83 c4 1c             	add    esp,0x1c
c0020146:	5b                   	pop    ebx
c0020147:	5e                   	pop    esi
c0020148:	5f                   	pop    edi
c0020149:	5d                   	pop    ebp
c002014a:	c3                   	ret    

c002014b <__static_initialization_and_destruction_0(int, int)>:
c002014b:	83 ec 0c             	sub    esp,0xc
c002014e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020153:	75 1a                	jne    c002016f <__static_initialization_and_destruction_0(int, int)+0x24>
c0020155:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002015d:	75 10                	jne    c002016f <__static_initialization_and_destruction_0(int, int)+0x24>
c002015f:	83 ec 0c             	sub    esp,0xc
c0020162:	68 80 16 03 c0       	push   0xc0031680
c0020167:	e8 14 88 00 00       	call   c0028980 <Vm::_FPUState::_FPUState()>
c002016c:	83 c4 10             	add    esp,0x10
c002016f:	90                   	nop
c0020170:	83 c4 0c             	add    esp,0xc
c0020173:	c3                   	ret    

c0020174 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020174:	83 ec 0c             	sub    esp,0xc
c0020177:	83 ec 08             	sub    esp,0x8
c002017a:	68 ff ff 00 00       	push   0xffff
c002017f:	6a 01                	push   0x1
c0020181:	e8 c5 ff ff ff       	call   c002014b <__static_initialization_and_destruction_0(int, int)>
c0020186:	83 c4 10             	add    esp,0x10
c0020189:	83 c4 0c             	add    esp,0xc
c002018c:	c3                   	ret    
c002018d:	90                   	nop

c002018e <FAT::getName()>:
c002018e:	b8 88 c4 02 c0       	mov    eax,0xc002c488
c0020193:	c3                   	ret    

c0020194 <FAT::tell(void*, unsigned long long*)>:
c0020194:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020199:	75 06                	jne    c00201a1 <FAT::tell(void*, unsigned long long*)+0xd>
c002019b:	b8 04 00 00 00       	mov    eax,0x4
c00201a0:	c3                   	ret    
c00201a1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00201a6:	75 06                	jne    c00201ae <FAT::tell(void*, unsigned long long*)+0x1a>
c00201a8:	b8 04 00 00 00       	mov    eax,0x4
c00201ad:	c3                   	ret    
c00201ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00201b2:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00201b5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00201b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00201bc:	89 01                	mov    DWORD PTR [ecx],eax
c00201be:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00201c1:	b8 00 00 00 00       	mov    eax,0x0
c00201c6:	c3                   	ret    
c00201c7:	90                   	nop

c00201c8 <FAT::stat(void*, unsigned long long*)>:
c00201c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00201cd:	75 06                	jne    c00201d5 <FAT::stat(void*, unsigned long long*)+0xd>
c00201cf:	b8 04 00 00 00       	mov    eax,0x4
c00201d4:	c3                   	ret    
c00201d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00201da:	75 06                	jne    c00201e2 <FAT::stat(void*, unsigned long long*)+0x1a>
c00201dc:	b8 04 00 00 00       	mov    eax,0x4
c00201e1:	c3                   	ret    
c00201e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00201e6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00201e9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00201ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00201f0:	89 01                	mov    DWORD PTR [ecx],eax
c00201f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00201f5:	b8 00 00 00 00       	mov    eax,0x0
c00201fa:	c3                   	ret    
c00201fb:	90                   	nop

c00201fc <FAT::~FAT()>:
c00201fc:	83 ec 0c             	sub    esp,0xc
c00201ff:	ba 0c c5 02 c0       	mov    edx,0xc002c50c
c0020204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020208:	89 10                	mov    DWORD PTR [eax],edx
c002020a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002020e:	83 ec 0c             	sub    esp,0xc
c0020211:	50                   	push   eax
c0020212:	e8 bf 2c ff ff       	call   c0012ed6 <Filesystem::~Filesystem()>
c0020217:	83 c4 10             	add    esp,0x10
c002021a:	90                   	nop
c002021b:	83 c4 0c             	add    esp,0xc
c002021e:	c3                   	ret    
c002021f:	90                   	nop

c0020220 <FAT::~FAT()>:
c0020220:	83 ec 0c             	sub    esp,0xc
c0020223:	83 ec 0c             	sub    esp,0xc
c0020226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002022a:	e8 cd ff ff ff       	call   c00201fc <FAT::~FAT()>
c002022f:	83 c4 10             	add    esp,0x10
c0020232:	83 ec 08             	sub    esp,0x8
c0020235:	6a 08                	push   0x8
c0020237:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002023b:	e8 8e 28 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0020240:	83 c4 10             	add    esp,0x10
c0020243:	83 c4 0c             	add    esp,0xc
c0020246:	c3                   	ret    
c0020247:	90                   	nop

c0020248 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020248:	83 ec 1c             	sub    esp,0x1c
c002024b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020252:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020257:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002025b:	8b 04 85 00 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce900]
c0020262:	83 f8 ff             	cmp    eax,0xffffffff
c0020265:	75 34                	jne    c002029b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020267:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002026b:	88 c2                	mov    dl,al
c002026d:	a1 e0 16 03 c0       	mov    eax,ds:0xc00316e0
c0020272:	01 d0                	add    eax,edx
c0020274:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020278:	8b 15 e0 16 03 c0    	mov    edx,DWORD PTR ds:0xc00316e0
c002027e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020282:	89 14 85 00 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce900],edx
c0020289:	a1 e0 16 03 c0       	mov    eax,ds:0xc00316e0
c002028e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020292:	89 14 85 80 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce880],edx
c0020299:	eb 17                	jmp    c00202b2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002029b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002029f:	88 c2                	mov    dl,al
c00202a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00202a5:	8b 04 85 00 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce900]
c00202ac:	01 d0                	add    eax,edx
c00202ae:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00202b2:	83 ec 04             	sub    esp,0x4
c00202b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00202b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00202bd:	8d 44 24 15          	lea    eax,[esp+0x15]
c00202c1:	50                   	push   eax
c00202c2:	e8 71 6a fe ff       	call   c0006d38 <f_getlabel>
c00202c7:	83 c4 10             	add    esp,0x10
c00202ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00202ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00202d3:	75 07                	jne    c00202dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00202d5:	b8 00 00 00 00       	mov    eax,0x0
c00202da:	eb 05                	jmp    c00202e1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00202dc:	b8 01 00 00 00       	mov    eax,0x1
c00202e1:	83 c4 1c             	add    esp,0x1c
c00202e4:	c3                   	ret    
c00202e5:	90                   	nop

c00202e6 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00202e6:	57                   	push   edi
c00202e7:	83 ec 58             	sub    esp,0x58
c00202ea:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00202f2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00202f6:	b9 0f 00 00 00       	mov    ecx,0xf
c00202fb:	b8 00 00 00 00       	mov    eax,0x0
c0020300:	fc                   	cld    
c0020301:	89 d7                	mov    edi,edx
c0020303:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020305:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020309:	8b 04 85 00 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce900]
c0020310:	83 f8 ff             	cmp    eax,0xffffffff
c0020313:	75 34                	jne    c0020349 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020315:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020319:	88 c2                	mov    dl,al
c002031b:	a1 e0 16 03 c0       	mov    eax,ds:0xc00316e0
c0020320:	01 d0                	add    eax,edx
c0020322:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020326:	8b 15 e0 16 03 c0    	mov    edx,DWORD PTR ds:0xc00316e0
c002032c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020330:	89 14 85 00 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce900],edx
c0020337:	a1 e0 16 03 c0       	mov    eax,ds:0xc00316e0
c002033c:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020340:	89 14 85 80 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce880],edx
c0020347:	eb 17                	jmp    c0020360 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020349:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002034d:	88 c2                	mov    dl,al
c002034f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020353:	8b 04 85 00 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce900]
c002035a:	01 d0                	add    eax,edx
c002035c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020360:	83 ec 08             	sub    esp,0x8
c0020363:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020367:	8d 44 24 18          	lea    eax,[esp+0x18]
c002036b:	50                   	push   eax
c002036c:	e8 03 06 fe ff       	call   c0000974 <strcat>
c0020371:	83 c4 10             	add    esp,0x10
c0020374:	83 ec 0c             	sub    esp,0xc
c0020377:	8d 44 24 18          	lea    eax,[esp+0x18]
c002037b:	50                   	push   eax
c002037c:	e8 a5 6b fe ff       	call   c0006f26 <f_setlabel>
c0020381:	83 c4 10             	add    esp,0x10
c0020384:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020388:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002038d:	75 07                	jne    c0020396 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002038f:	b8 00 00 00 00       	mov    eax,0x0
c0020394:	eb 05                	jmp    c002039b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020396:	b8 01 00 00 00       	mov    eax,0x1
c002039b:	83 c4 58             	add    esp,0x58
c002039e:	5f                   	pop    edi
c002039f:	c3                   	ret    

c00203a0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00203a0:	83 ec 2c             	sub    esp,0x2c
c00203a3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00203ab:	83 ec 08             	sub    esp,0x8
c00203ae:	68 ac c4 02 c0       	push   0xc002c4ac
c00203b3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00203b7:	e8 04 05 fe ff       	call   c00008c0 <strcmp>
c00203bc:	83 c4 10             	add    esp,0x10
c00203bf:	85 c0                	test   eax,eax
c00203c1:	0f 94 c0             	sete   al
c00203c4:	84 c0                	test   al,al
c00203c6:	74 0d                	je     c00203d5 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00203c8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00203d0:	e9 a6 00 00 00       	jmp    c002047b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00203d5:	83 ec 08             	sub    esp,0x8
c00203d8:	68 9e c4 02 c0       	push   0xc002c49e
c00203dd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00203e1:	e8 da 04 fe ff       	call   c00008c0 <strcmp>
c00203e6:	83 c4 10             	add    esp,0x10
c00203e9:	85 c0                	test   eax,eax
c00203eb:	0f 94 c0             	sete   al
c00203ee:	84 c0                	test   al,al
c00203f0:	74 0a                	je     c00203fc <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00203f2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00203fa:	eb 7f                	jmp    c002047b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00203fc:	83 ec 08             	sub    esp,0x8
c00203ff:	68 a4 c4 02 c0       	push   0xc002c4a4
c0020404:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020408:	e8 b3 04 fe ff       	call   c00008c0 <strcmp>
c002040d:	83 c4 10             	add    esp,0x10
c0020410:	85 c0                	test   eax,eax
c0020412:	0f 94 c0             	sete   al
c0020415:	84 c0                	test   al,al
c0020417:	74 0a                	je     c0020423 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020419:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020421:	eb 58                	jmp    c002047b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020423:	83 ec 08             	sub    esp,0x8
c0020426:	68 ec 90 02 c0       	push   0xc00290ec
c002042b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002042f:	e8 8c 04 fe ff       	call   c00008c0 <strcmp>
c0020434:	83 c4 10             	add    esp,0x10
c0020437:	85 c0                	test   eax,eax
c0020439:	0f 94 c0             	sete   al
c002043c:	84 c0                	test   al,al
c002043e:	74 0a                	je     c002044a <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020440:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020448:	eb 31                	jmp    c002047b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002044a:	83 ec 08             	sub    esp,0x8
c002044d:	68 aa c4 02 c0       	push   0xc002c4aa
c0020452:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020456:	e8 65 04 fe ff       	call   c00008c0 <strcmp>
c002045b:	83 c4 10             	add    esp,0x10
c002045e:	85 c0                	test   eax,eax
c0020460:	0f 94 c0             	sete   al
c0020463:	84 c0                	test   al,al
c0020465:	74 0a                	je     c0020471 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020467:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002046f:	eb 0a                	jmp    c002047b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020471:	b8 08 00 00 00       	mov    eax,0x8
c0020476:	e9 04 01 00 00       	jmp    c002057f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002047b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020482:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020487:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002048b:	8b 04 85 00 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce900]
c0020492:	83 f8 ff             	cmp    eax,0xffffffff
c0020495:	75 34                	jne    c00204cb <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020497:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002049b:	88 c2                	mov    dl,al
c002049d:	a1 e0 16 03 c0       	mov    eax,ds:0xc00316e0
c00204a2:	01 d0                	add    eax,edx
c00204a4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00204a8:	8b 15 e0 16 03 c0    	mov    edx,DWORD PTR ds:0xc00316e0
c00204ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00204b2:	89 14 85 00 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce900],edx
c00204b9:	a1 e0 16 03 c0       	mov    eax,ds:0xc00316e0
c00204be:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00204c2:	89 14 85 80 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce880],edx
c00204c9:	eb 17                	jmp    c00204e2 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00204cb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00204cf:	88 c2                	mov    dl,al
c00204d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00204d5:	8b 04 85 00 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce900]
c00204dc:	01 d0                	add    eax,edx
c00204de:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00204e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00204e6:	88 04 24             	mov    BYTE PTR [esp],al
c00204e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00204ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204f1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00204f9:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00204fe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020506:	83 ec 0c             	sub    esp,0xc
c0020509:	68 00 20 00 00       	push   0x2000
c002050e:	e8 2d f3 fe ff       	call   c000f840 <malloc>
c0020513:	83 c4 10             	add    esp,0x10
c0020516:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002051a:	68 00 20 00 00       	push   0x2000
c002051f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020523:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020527:	50                   	push   eax
c0020528:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002052c:	50                   	push   eax
c002052d:	e8 3f 6e fe ff       	call   c0007371 <f_mkfs>
c0020532:	83 c4 10             	add    esp,0x10
c0020535:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020539:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002053e:	75 07                	jne    c0020547 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020540:	b8 00 00 00 00       	mov    eax,0x0
c0020545:	eb 38                	jmp    c002057f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020547:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002054c:	75 17                	jne    c0020565 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c002054e:	83 ec 0c             	sub    esp,0xc
c0020551:	68 dc c4 02 c0       	push   0xc002c4dc
c0020556:	e8 53 26 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c002055b:	83 c4 10             	add    esp,0x10
c002055e:	b8 09 00 00 00       	mov    eax,0x9
c0020563:	eb 1a                	jmp    c002057f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020565:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020569:	83 ec 08             	sub    esp,0x8
c002056c:	50                   	push   eax
c002056d:	68 b0 c4 02 c0       	push   0xc002c4b0
c0020572:	e8 37 26 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0020577:	83 c4 10             	add    esp,0x10
c002057a:	b8 01 00 00 00       	mov    eax,0x1
c002057f:	83 c4 2c             	add    esp,0x2c
c0020582:	c3                   	ret    
c0020583:	90                   	nop

c0020584 <FAT::tryMount(LogicalDisk*, int)>:
c0020584:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002058a:	a1 e0 16 03 c0       	mov    eax,ds:0xc00316e0
c002058f:	83 f8 14             	cmp    eax,0x14
c0020592:	75 17                	jne    c00205ab <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020594:	83 ec 0c             	sub    esp,0xc
c0020597:	68 c2 c4 02 c0       	push   0xc002c4c2
c002059c:	e8 88 9c ff ff       	call   c001a229 <Krnl::panic(char const*)>
c00205a1:	83 c4 10             	add    esp,0x10
c00205a4:	b0 00                	mov    al,0x0
c00205a6:	e9 d7 01 00 00       	jmp    c0020782 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00205ab:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00205b2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00205b8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00205be:	3d 00 02 00 00       	cmp    eax,0x200
c00205c3:	74 07                	je     c00205cc <FAT::tryMount(LogicalDisk*, int)+0x48>
c00205c5:	b0 00                	mov    al,0x0
c00205c7:	e9 b6 01 00 00       	jmp    c0020782 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00205cc:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00205d4:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00205db:	8b 04 85 00 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce900]
c00205e2:	83 f8 ff             	cmp    eax,0xffffffff
c00205e5:	74 07                	je     c00205ee <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00205e7:	b0 01                	mov    al,0x1
c00205e9:	e9 94 01 00 00       	jmp    c0020782 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00205ee:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00205f8:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020600:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020607:	88 c2                	mov    dl,al
c0020609:	a1 e0 16 03 c0       	mov    eax,ds:0xc00316e0
c002060e:	01 d0                	add    eax,edx
c0020610:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020617:	8b 15 e0 16 03 c0    	mov    edx,DWORD PTR ds:0xc00316e0
c002061d:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020624:	89 14 85 00 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce900],edx
c002062b:	a1 e0 16 03 c0       	mov    eax,ds:0xc00316e0
c0020630:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020637:	89 14 85 80 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce880],edx
c002063e:	83 ec 0c             	sub    esp,0xc
c0020641:	68 54 02 00 00       	push   0x254
c0020646:	e8 f5 f1 fe ff       	call   c000f840 <malloc>
c002064b:	83 c4 10             	add    esp,0x10
c002064e:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020655:	83 ec 04             	sub    esp,0x4
c0020658:	6a 00                	push   0x0
c002065a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020661:	50                   	push   eax
c0020662:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020669:	e8 c1 48 fe ff       	call   c0004f2f <f_mount>
c002066e:	83 c4 10             	add    esp,0x10
c0020671:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020678:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020680:	74 19                	je     c002069b <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020682:	83 ec 0c             	sub    esp,0xc
c0020685:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002068c:	e8 cf f1 fe ff       	call   c000f860 <rfree>
c0020691:	83 c4 10             	add    esp,0x10
c0020694:	b0 00                	mov    al,0x0
c0020696:	e9 e7 00 00 00       	jmp    c0020782 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002069b:	83 ec 04             	sub    esp,0x4
c002069e:	68 00 01 00 00       	push   0x100
c00206a3:	6a 00                	push   0x0
c00206a5:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00206ac:	50                   	push   eax
c00206ad:	e8 c6 00 fe ff       	call   c0000778 <memset>
c00206b2:	83 c4 10             	add    esp,0x10
c00206b5:	83 ec 08             	sub    esp,0x8
c00206b8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00206bf:	50                   	push   eax
c00206c0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00206c7:	50                   	push   eax
c00206c8:	e8 a7 02 fe ff       	call   c0000974 <strcat>
c00206cd:	83 c4 10             	add    esp,0x10
c00206d0:	83 ec 08             	sub    esp,0x8
c00206d3:	68 d0 c4 02 c0       	push   0xc002c4d0
c00206d8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00206df:	50                   	push   eax
c00206e0:	e8 8f 02 fe ff       	call   c0000974 <strcat>
c00206e5:	83 c4 10             	add    esp,0x10
c00206e8:	83 ec 04             	sub    esp,0x4
c00206eb:	6a 01                	push   0x1
c00206ed:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00206f4:	50                   	push   eax
c00206f5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00206f9:	50                   	push   eax
c00206fa:	e8 92 48 fe ff       	call   c0004f91 <f_open>
c00206ff:	83 c4 10             	add    esp,0x10
c0020702:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020709:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020710:	85 c0                	test   eax,eax
c0020712:	74 0a                	je     c002071e <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020714:	78 2d                	js     c0020743 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020716:	83 e8 04             	sub    eax,0x4
c0020719:	83 f8 01             	cmp    eax,0x1
c002071c:	77 25                	ja     c0020743 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002071e:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020726:	83 ec 0c             	sub    esp,0xc
c0020729:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002072d:	50                   	push   eax
c002072e:	e8 b0 53 fe ff       	call   c0005ae3 <f_close>
c0020733:	83 c4 10             	add    esp,0x10
c0020736:	90                   	nop
c0020737:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002073f:	74 3a                	je     c002077b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020741:	eb 2d                	jmp    c0020770 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020743:	83 ec 0c             	sub    esp,0xc
c0020746:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002074d:	e8 0e f1 fe ff       	call   c000f860 <rfree>
c0020752:	83 c4 10             	add    esp,0x10
c0020755:	83 ec 04             	sub    esp,0x4
c0020758:	6a 00                	push   0x0
c002075a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020761:	50                   	push   eax
c0020762:	6a 00                	push   0x0
c0020764:	e8 c6 47 fe ff       	call   c0004f2f <f_mount>
c0020769:	83 c4 10             	add    esp,0x10
c002076c:	b0 00                	mov    al,0x0
c002076e:	eb 12                	jmp    c0020782 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020770:	a1 e0 16 03 c0       	mov    eax,ds:0xc00316e0
c0020775:	40                   	inc    eax
c0020776:	a3 e0 16 03 c0       	mov    ds:0xc00316e0,eax
c002077b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020782:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020788:	c3                   	ret    
c0020789:	90                   	nop

c002078a <FAT::readDir(void*, unsigned long, void*, int*)>:
c002078a:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020790:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020798:	74 0a                	je     c00207a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c002079a:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00207a2:	75 0a                	jne    c00207ae <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00207a4:	b8 04 00 00 00       	mov    eax,0x4
c00207a9:	e9 db 00 00 00       	jmp    c0020889 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00207ae:	83 ec 08             	sub    esp,0x8
c00207b1:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00207b8:	50                   	push   eax
c00207b9:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00207c0:	e8 28 59 fe ff       	call   c00060ed <f_readdir>
c00207c5:	83 c4 10             	add    esp,0x10
c00207c8:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00207cf:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00207d5:	83 ec 0c             	sub    esp,0xc
c00207d8:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00207df:	83 c0 1a             	add    eax,0x1a
c00207e2:	50                   	push   eax
c00207e3:	e8 ac ff fd ff       	call   c0000794 <strlen>
c00207e8:	83 c4 10             	add    esp,0x10
c00207eb:	ba 00 00 00 00       	mov    edx,0x0
c00207f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00207f8:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00207ff:	0f b6 c0             	movzx  eax,al
c0020802:	83 e0 10             	and    eax,0x10
c0020805:	74 07                	je     c002080e <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020807:	b8 02 00 00 00       	mov    eax,0x2
c002080c:	eb 05                	jmp    c0020813 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c002080e:	b8 01 00 00 00       	mov    eax,0x1
c0020813:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020817:	83 ec 08             	sub    esp,0x8
c002081a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020821:	83 c0 1a             	add    eax,0x1a
c0020824:	50                   	push   eax
c0020825:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020829:	83 c0 10             	add    eax,0x10
c002082c:	50                   	push   eax
c002082d:	e8 02 00 fe ff       	call   c0000834 <strcpy>
c0020832:	83 c4 10             	add    esp,0x10
c0020835:	83 ec 04             	sub    esp,0x4
c0020838:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c002083f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020843:	50                   	push   eax
c0020844:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c002084b:	e8 f4 fe fd ff       	call   c0000744 <memcpy>
c0020850:	83 c4 10             	add    esp,0x10
c0020853:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c002085a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020860:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020867:	84 c0                	test   al,al
c0020869:	75 07                	jne    c0020872 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c002086b:	b8 07 00 00 00       	mov    eax,0x7
c0020870:	eb 17                	jmp    c0020889 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020872:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020879:	85 c0                	test   eax,eax
c002087b:	75 07                	jne    c0020884 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c002087d:	b8 00 00 00 00       	mov    eax,0x0
c0020882:	eb 05                	jmp    c0020889 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020884:	b8 01 00 00 00       	mov    eax,0x1
c0020889:	81 c4 3c 02 00 00    	add    esp,0x23c
c002088f:	c3                   	ret    

c0020890 <FAT::read(void*, unsigned long, void*, int*)>:
c0020890:	83 ec 1c             	sub    esp,0x1c
c0020893:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020898:	74 07                	je     c00208a1 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002089a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002089f:	75 07                	jne    c00208a8 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00208a1:	b8 04 00 00 00       	mov    eax,0x4
c00208a6:	eb 3d                	jmp    c00208e5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00208a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208ac:	50                   	push   eax
c00208ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00208b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00208b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00208b9:	e8 0f 4b fe ff       	call   c00053cd <f_read>
c00208be:	83 c4 10             	add    esp,0x10
c00208c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208c9:	89 c2                	mov    edx,eax
c00208cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00208cf:	89 10                	mov    DWORD PTR [eax],edx
c00208d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208d5:	85 c0                	test   eax,eax
c00208d7:	75 07                	jne    c00208e0 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00208d9:	b8 00 00 00 00       	mov    eax,0x0
c00208de:	eb 05                	jmp    c00208e5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00208e0:	b8 01 00 00 00       	mov    eax,0x1
c00208e5:	83 c4 1c             	add    esp,0x1c
c00208e8:	c3                   	ret    
c00208e9:	90                   	nop

c00208ea <FAT::write(void*, unsigned long, void*, int*)>:
c00208ea:	83 ec 1c             	sub    esp,0x1c
c00208ed:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00208f2:	74 07                	je     c00208fb <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00208f4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00208f9:	75 07                	jne    c0020902 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00208fb:	b8 04 00 00 00       	mov    eax,0x4
c0020900:	eb 3d                	jmp    c002093f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020902:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020906:	50                   	push   eax
c0020907:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002090b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002090f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020913:	e8 35 4d fe ff       	call   c000564d <f_write>
c0020918:	83 c4 10             	add    esp,0x10
c002091b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002091f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020923:	89 c2                	mov    edx,eax
c0020925:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020929:	89 10                	mov    DWORD PTR [eax],edx
c002092b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002092f:	85 c0                	test   eax,eax
c0020931:	75 07                	jne    c002093a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020933:	b8 00 00 00 00       	mov    eax,0x0
c0020938:	eb 05                	jmp    c002093f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002093a:	b8 01 00 00 00       	mov    eax,0x1
c002093f:	83 c4 1c             	add    esp,0x1c
c0020942:	c3                   	ret    
c0020943:	90                   	nop

c0020944 <FAT::close(void*)>:
c0020944:	83 ec 1c             	sub    esp,0x1c
c0020947:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002094c:	75 07                	jne    c0020955 <FAT::close(void*)+0x11>
c002094e:	b8 04 00 00 00       	mov    eax,0x4
c0020953:	eb 36                	jmp    c002098b <FAT::close(void*)+0x47>
c0020955:	83 ec 0c             	sub    esp,0xc
c0020958:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002095c:	e8 82 51 fe ff       	call   c0005ae3 <f_close>
c0020961:	83 c4 10             	add    esp,0x10
c0020964:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020968:	83 ec 0c             	sub    esp,0xc
c002096b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002096f:	e8 dc ee fe ff       	call   c000f850 <free>
c0020974:	83 c4 10             	add    esp,0x10
c0020977:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002097b:	85 c0                	test   eax,eax
c002097d:	75 07                	jne    c0020986 <FAT::close(void*)+0x42>
c002097f:	b8 00 00 00 00       	mov    eax,0x0
c0020984:	eb 05                	jmp    c002098b <FAT::close(void*)+0x47>
c0020986:	b8 01 00 00 00       	mov    eax,0x1
c002098b:	83 c4 1c             	add    esp,0x1c
c002098e:	c3                   	ret    
c002098f:	90                   	nop

c0020990 <FAT::closeDir(void*)>:
c0020990:	83 ec 1c             	sub    esp,0x1c
c0020993:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020998:	75 07                	jne    c00209a1 <FAT::closeDir(void*)+0x11>
c002099a:	b8 04 00 00 00       	mov    eax,0x4
c002099f:	eb 36                	jmp    c00209d7 <FAT::closeDir(void*)+0x47>
c00209a1:	83 ec 0c             	sub    esp,0xc
c00209a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00209a8:	e8 1e 57 fe ff       	call   c00060cb <f_closedir>
c00209ad:	83 c4 10             	add    esp,0x10
c00209b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209b4:	83 ec 0c             	sub    esp,0xc
c00209b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00209bb:	e8 90 ee fe ff       	call   c000f850 <free>
c00209c0:	83 c4 10             	add    esp,0x10
c00209c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209c7:	85 c0                	test   eax,eax
c00209c9:	75 07                	jne    c00209d2 <FAT::closeDir(void*)+0x42>
c00209cb:	b8 00 00 00 00       	mov    eax,0x0
c00209d0:	eb 05                	jmp    c00209d7 <FAT::closeDir(void*)+0x47>
c00209d2:	b8 01 00 00 00       	mov    eax,0x1
c00209d7:	83 c4 1c             	add    esp,0x1c
c00209da:	c3                   	ret    
c00209db:	90                   	nop

c00209dc <FAT::seek(void*, unsigned long long)>:
c00209dc:	83 ec 2c             	sub    esp,0x2c
c00209df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00209e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00209eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209ef:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00209f4:	75 07                	jne    c00209fd <FAT::seek(void*, unsigned long long)+0x21>
c00209f6:	b8 04 00 00 00       	mov    eax,0x4
c00209fb:	eb 2f                	jmp    c0020a2c <FAT::seek(void*, unsigned long long)+0x50>
c00209fd:	83 ec 04             	sub    esp,0x4
c0020a00:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020a04:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020a08:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020a0c:	e8 01 51 fe ff       	call   c0005b12 <f_lseek>
c0020a11:	83 c4 10             	add    esp,0x10
c0020a14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020a18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a1c:	85 c0                	test   eax,eax
c0020a1e:	75 07                	jne    c0020a27 <FAT::seek(void*, unsigned long long)+0x4b>
c0020a20:	b8 00 00 00 00       	mov    eax,0x0
c0020a25:	eb 05                	jmp    c0020a2c <FAT::seek(void*, unsigned long long)+0x50>
c0020a27:	b8 01 00 00 00       	mov    eax,0x1
c0020a2c:	83 c4 2c             	add    esp,0x2c
c0020a2f:	c3                   	ret    

c0020a30 <fatWrapperReadDisk>:
c0020a30:	83 ec 1c             	sub    esp,0x1c
c0020a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a37:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020a3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020a3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020a46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a4a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020a4f:	8b 04 85 c0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1940]
c0020a56:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020a5a:	83 ec 0c             	sub    esp,0xc
c0020a5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020a61:	52                   	push   edx
c0020a62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020a66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020a6a:	50                   	push   eax
c0020a6b:	e8 28 59 ff ff       	call   c0016398 <LogicalDisk::read(unsigned long long, int, void*)>
c0020a70:	83 c4 20             	add    esp,0x20
c0020a73:	83 c4 1c             	add    esp,0x1c
c0020a76:	c3                   	ret    

c0020a77 <fatWrapperWriteDisk>:
c0020a77:	83 ec 1c             	sub    esp,0x1c
c0020a7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a7e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020a82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020a86:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020a8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a91:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020a96:	8b 04 85 c0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1940]
c0020a9d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020aa1:	83 ec 0c             	sub    esp,0xc
c0020aa4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020aa8:	52                   	push   edx
c0020aa9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020aad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ab1:	50                   	push   eax
c0020ab2:	e8 4d 59 ff ff       	call   c0016404 <LogicalDisk::write(unsigned long long, int, void*)>
c0020ab7:	83 c4 20             	add    esp,0x20
c0020aba:	83 c4 1c             	add    esp,0x1c
c0020abd:	c3                   	ret    

c0020abe <fatWrapperIoctl>:
c0020abe:	53                   	push   ebx
c0020abf:	83 ec 28             	sub    esp,0x28
c0020ac2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ac6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020aca:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020ace:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ad2:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020ad7:	75 31                	jne    c0020b0a <fatWrapperIoctl+0x4c>
c0020ad9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020add:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020ae1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ae6:	8b 04 85 c0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1940]
c0020aed:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020af3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020af9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020afd:	66 89 02             	mov    WORD PTR [edx],ax
c0020b00:	b8 00 00 00 00       	mov    eax,0x0
c0020b05:	e9 b2 00 00 00       	jmp    c0020bbc <fatWrapperIoctl+0xfe>
c0020b0a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020b0f:	75 6a                	jne    c0020b7b <fatWrapperIoctl+0xbd>
c0020b11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020b15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020b19:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020b1e:	8b 04 85 c0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1940]
c0020b25:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020b2b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020b31:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020b37:	89 c8                	mov    eax,ecx
c0020b39:	89 da                	mov    edx,ebx
c0020b3b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020b3f:	c1 e0 0a             	shl    eax,0xa
c0020b42:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020b47:	8b 0c 8d c0 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1940]
c0020b4e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020b54:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020b5a:	89 cb                	mov    ebx,ecx
c0020b5c:	c1 fb 1f             	sar    ebx,0x1f
c0020b5f:	53                   	push   ebx
c0020b60:	51                   	push   ecx
c0020b61:	52                   	push   edx
c0020b62:	50                   	push   eax
c0020b63:	e8 c4 5a 00 00       	call   c002662c <__udivdi3>
c0020b68:	83 c4 10             	add    esp,0x10
c0020b6b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020b6f:	89 01                	mov    DWORD PTR [ecx],eax
c0020b71:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020b74:	b8 00 00 00 00       	mov    eax,0x0
c0020b79:	eb 41                	jmp    c0020bbc <fatWrapperIoctl+0xfe>
c0020b7b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020b80:	75 07                	jne    c0020b89 <fatWrapperIoctl+0xcb>
c0020b82:	b8 00 00 00 00       	mov    eax,0x0
c0020b87:	eb 33                	jmp    c0020bbc <fatWrapperIoctl+0xfe>
c0020b89:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020b8e:	75 19                	jne    c0020ba9 <fatWrapperIoctl+0xeb>
c0020b90:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020b94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020b98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b9c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020ba2:	b8 00 00 00 00       	mov    eax,0x0
c0020ba7:	eb 13                	jmp    c0020bbc <fatWrapperIoctl+0xfe>
c0020ba9:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020bae:	75 07                	jne    c0020bb7 <fatWrapperIoctl+0xf9>
c0020bb0:	b8 00 00 00 00       	mov    eax,0x0
c0020bb5:	eb 05                	jmp    c0020bbc <fatWrapperIoctl+0xfe>
c0020bb7:	b8 04 00 00 00       	mov    eax,0x4
c0020bbc:	83 c4 28             	add    esp,0x28
c0020bbf:	5b                   	pop    ebx
c0020bc0:	c3                   	ret    
c0020bc1:	90                   	nop

c0020bc2 <FAT::FAT()>:
c0020bc2:	83 ec 1c             	sub    esp,0x1c
c0020bc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bc9:	83 ec 0c             	sub    esp,0xc
c0020bcc:	50                   	push   eax
c0020bcd:	e8 e0 22 ff ff       	call   c0012eb2 <Filesystem::Filesystem()>
c0020bd2:	83 c4 10             	add    esp,0x10
c0020bd5:	ba 0c c5 02 c0       	mov    edx,0xc002c50c
c0020bda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bde:	89 10                	mov    DWORD PTR [eax],edx
c0020be0:	c7 05 e0 16 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00316e0,0x0
c0020bea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020bf2:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020bf7:	7f 15                	jg     c0020c0e <FAT::FAT()+0x4c>
c0020bf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bfd:	c7 04 85 00 17 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce900],0xffffffff
c0020c08:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020c0c:	eb e4                	jmp    c0020bf2 <FAT::FAT()+0x30>
c0020c0e:	90                   	nop
c0020c0f:	83 c4 1c             	add    esp,0x1c
c0020c12:	c3                   	ret    
c0020c13:	90                   	nop

c0020c14 <FAT::fixFilepath(char*)>:
c0020c14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c18:	8a 00                	mov    al,BYTE PTR [eax]
c0020c1a:	3c 40                	cmp    al,0x40
c0020c1c:	7e 2c                	jle    c0020c4a <FAT::fixFilepath(char*)+0x36>
c0020c1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c22:	8a 00                	mov    al,BYTE PTR [eax]
c0020c24:	83 e8 41             	sub    eax,0x41
c0020c27:	88 c2                	mov    dl,al
c0020c29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c2d:	88 10                	mov    BYTE PTR [eax],dl
c0020c2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c33:	8a 00                	mov    al,BYTE PTR [eax]
c0020c35:	0f be c0             	movsx  eax,al
c0020c38:	8b 04 85 00 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce900]
c0020c3f:	83 c0 30             	add    eax,0x30
c0020c42:	88 c2                	mov    dl,al
c0020c44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c48:	88 10                	mov    BYTE PTR [eax],dl
c0020c4a:	90                   	nop
c0020c4b:	c3                   	ret    

c0020c4c <FAT::open(char const*, void**, FileOpenMode)>:
c0020c4c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c52:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c5a:	74 0a                	je     c0020c66 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020c5c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020c64:	75 0a                	jne    c0020c70 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020c66:	b8 04 00 00 00       	mov    eax,0x4
c0020c6b:	e9 fd 00 00 00       	jmp    c0020d6d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020c70:	83 ec 08             	sub    esp,0x8
c0020c73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c7e:	50                   	push   eax
c0020c7f:	e8 b0 fb fd ff       	call   c0000834 <strcpy>
c0020c84:	83 c4 10             	add    esp,0x10
c0020c87:	83 ec 08             	sub    esp,0x8
c0020c8a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020c8e:	50                   	push   eax
c0020c8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c96:	e8 79 ff ff ff       	call   c0020c14 <FAT::fixFilepath(char*)>
c0020c9b:	83 c4 10             	add    esp,0x10
c0020c9e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020ca6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020cad:	83 e0 01             	and    eax,0x1
c0020cb0:	74 08                	je     c0020cba <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020cb2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020cba:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020cc1:	83 e0 04             	and    eax,0x4
c0020cc4:	74 10                	je     c0020cd6 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020cc6:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020cce:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020cd6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020cdd:	83 e0 02             	and    eax,0x2
c0020ce0:	74 08                	je     c0020cea <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020ce2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020cea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020cf1:	83 e0 08             	and    eax,0x8
c0020cf4:	74 08                	je     c0020cfe <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020cf6:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020cfe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020d05:	83 e0 10             	and    eax,0x10
c0020d08:	74 08                	je     c0020d12 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020d0a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020d12:	83 ec 0c             	sub    esp,0xc
c0020d15:	68 50 02 00 00       	push   0x250
c0020d1a:	e8 21 eb fe ff       	call   c000f840 <malloc>
c0020d1f:	83 c4 10             	add    esp,0x10
c0020d22:	89 c2                	mov    edx,eax
c0020d24:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020d2b:	89 10                	mov    DWORD PTR [eax],edx
c0020d2d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020d35:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d3e:	83 ec 04             	sub    esp,0x4
c0020d41:	52                   	push   edx
c0020d42:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020d46:	52                   	push   edx
c0020d47:	50                   	push   eax
c0020d48:	e8 44 42 fe ff       	call   c0004f91 <f_open>
c0020d4d:	83 c4 10             	add    esp,0x10
c0020d50:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020d57:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020d5f:	74 07                	je     c0020d68 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020d61:	b8 01 00 00 00       	mov    eax,0x1
c0020d66:	eb 05                	jmp    c0020d6d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020d68:	b8 00 00 00 00       	mov    eax,0x0
c0020d6d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020d73:	c3                   	ret    

c0020d74 <FAT::openDir(char const*, void**)>:
c0020d74:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020d7a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020d82:	74 0a                	je     c0020d8e <FAT::openDir(char const*, void**)+0x1a>
c0020d84:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020d8c:	75 07                	jne    c0020d95 <FAT::openDir(char const*, void**)+0x21>
c0020d8e:	b8 04 00 00 00       	mov    eax,0x4
c0020d93:	eb 7d                	jmp    c0020e12 <FAT::openDir(char const*, void**)+0x9e>
c0020d95:	83 ec 08             	sub    esp,0x8
c0020d98:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d9f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020da3:	50                   	push   eax
c0020da4:	e8 8b fa fd ff       	call   c0000834 <strcpy>
c0020da9:	83 c4 10             	add    esp,0x10
c0020dac:	83 ec 08             	sub    esp,0x8
c0020daf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020db3:	50                   	push   eax
c0020db4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020dbb:	e8 54 fe ff ff       	call   c0020c14 <FAT::fixFilepath(char*)>
c0020dc0:	83 c4 10             	add    esp,0x10
c0020dc3:	83 ec 0c             	sub    esp,0xc
c0020dc6:	6a 4c                	push   0x4c
c0020dc8:	e8 73 ea fe ff       	call   c000f840 <malloc>
c0020dcd:	83 c4 10             	add    esp,0x10
c0020dd0:	89 c2                	mov    edx,eax
c0020dd2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020dd9:	89 10                	mov    DWORD PTR [eax],edx
c0020ddb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020de2:	8b 00                	mov    eax,DWORD PTR [eax]
c0020de4:	83 ec 08             	sub    esp,0x8
c0020de7:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020deb:	52                   	push   edx
c0020dec:	50                   	push   eax
c0020ded:	e8 d7 51 fe ff       	call   c0005fc9 <f_opendir>
c0020df2:	83 c4 10             	add    esp,0x10
c0020df5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020dfc:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020e04:	74 07                	je     c0020e0d <FAT::openDir(char const*, void**)+0x99>
c0020e06:	b8 01 00 00 00       	mov    eax,0x1
c0020e0b:	eb 05                	jmp    c0020e12 <FAT::openDir(char const*, void**)+0x9e>
c0020e0d:	b8 00 00 00 00       	mov    eax,0x0
c0020e12:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e18:	c3                   	ret    
c0020e19:	90                   	nop

c0020e1a <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020e1a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020e20:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020e28:	75 0a                	jne    c0020e34 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020e2a:	b8 04 00 00 00       	mov    eax,0x4
c0020e2f:	e9 c9 00 00 00       	jmp    c0020efd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020e34:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020e3c:	75 0a                	jne    c0020e48 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020e3e:	b8 04 00 00 00       	mov    eax,0x4
c0020e43:	e9 b5 00 00 00       	jmp    c0020efd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020e48:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020e50:	75 0a                	jne    c0020e5c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020e52:	b8 04 00 00 00       	mov    eax,0x4
c0020e57:	e9 a1 00 00 00       	jmp    c0020efd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020e5c:	83 ec 08             	sub    esp,0x8
c0020e5f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e66:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020e6d:	50                   	push   eax
c0020e6e:	e8 c1 f9 fd ff       	call   c0000834 <strcpy>
c0020e73:	83 c4 10             	add    esp,0x10
c0020e76:	83 ec 08             	sub    esp,0x8
c0020e79:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020e80:	50                   	push   eax
c0020e81:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e88:	e8 87 fd ff ff       	call   c0020c14 <FAT::fixFilepath(char*)>
c0020e8d:	83 c4 10             	add    esp,0x10
c0020e90:	83 ec 08             	sub    esp,0x8
c0020e93:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e97:	50                   	push   eax
c0020e98:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020e9f:	50                   	push   eax
c0020ea0:	e8 e3 52 fe ff       	call   c0006188 <f_stat>
c0020ea5:	83 c4 10             	add    esp,0x10
c0020ea8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020eaf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020eb6:	85 c0                	test   eax,eax
c0020eb8:	74 07                	je     c0020ec1 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020eba:	83 f8 04             	cmp    eax,0x4
c0020ebd:	74 32                	je     c0020ef1 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020ebf:	eb 37                	jmp    c0020ef8 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020ec1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020ec5:	0f b6 c0             	movzx  eax,al
c0020ec8:	83 e0 10             	and    eax,0x10
c0020ecb:	0f 95 c2             	setne  dl
c0020ece:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020ed5:	88 10                	mov    BYTE PTR [eax],dl
c0020ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020eda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020ede:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020ee5:	89 01                	mov    DWORD PTR [ecx],eax
c0020ee7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020eea:	b8 00 00 00 00       	mov    eax,0x0
c0020eef:	eb 0c                	jmp    c0020efd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ef1:	b8 02 00 00 00       	mov    eax,0x2
c0020ef6:	eb 05                	jmp    c0020efd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ef8:	b8 01 00 00 00       	mov    eax,0x1
c0020efd:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020f03:	c3                   	ret    

c0020f04 <FAT::unlink(char const*)>:
c0020f04:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f0a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f12:	75 07                	jne    c0020f1b <FAT::unlink(char const*)+0x17>
c0020f14:	b8 04 00 00 00       	mov    eax,0x4
c0020f19:	eb 5c                	jmp    c0020f77 <FAT::unlink(char const*)+0x73>
c0020f1b:	83 ec 08             	sub    esp,0x8
c0020f1e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f25:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f29:	50                   	push   eax
c0020f2a:	e8 05 f9 fd ff       	call   c0000834 <strcpy>
c0020f2f:	83 c4 10             	add    esp,0x10
c0020f32:	83 ec 08             	sub    esp,0x8
c0020f35:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f39:	50                   	push   eax
c0020f3a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f41:	e8 ce fc ff ff       	call   c0020c14 <FAT::fixFilepath(char*)>
c0020f46:	83 c4 10             	add    esp,0x10
c0020f49:	83 ec 0c             	sub    esp,0xc
c0020f4c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f50:	50                   	push   eax
c0020f51:	e8 84 55 fe ff       	call   c00064da <f_unlink>
c0020f56:	83 c4 10             	add    esp,0x10
c0020f59:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f60:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020f67:	85 c0                	test   eax,eax
c0020f69:	75 07                	jne    c0020f72 <FAT::unlink(char const*)+0x6e>
c0020f6b:	b8 00 00 00 00       	mov    eax,0x0
c0020f70:	eb 05                	jmp    c0020f77 <FAT::unlink(char const*)+0x73>
c0020f72:	b8 01 00 00 00       	mov    eax,0x1
c0020f77:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f7d:	c3                   	ret    

c0020f7e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020f7e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020f84:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020f8b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020f92:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020f96:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f9a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020fa2:	75 0a                	jne    c0020fae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020fa4:	b8 04 00 00 00       	mov    eax,0x4
c0020fa9:	e9 1c 01 00 00       	jmp    c00210ca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020fae:	83 ec 08             	sub    esp,0x8
c0020fb1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020fb8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020fbc:	50                   	push   eax
c0020fbd:	e8 72 f8 fd ff       	call   c0000834 <strcpy>
c0020fc2:	83 c4 10             	add    esp,0x10
c0020fc5:	83 ec 08             	sub    esp,0x8
c0020fc8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020fcc:	50                   	push   eax
c0020fcd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020fd4:	e8 3b fc ff ff       	call   c0020c14 <FAT::fixFilepath(char*)>
c0020fd9:	83 c4 10             	add    esp,0x10
c0020fdc:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020fe4:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020fec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ff1:	83 e0 01             	and    eax,0x1
c0020ff4:	74 08                	je     c0020ffe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020ff6:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020ffe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021003:	83 e0 02             	and    eax,0x2
c0021006:	74 08                	je     c0021010 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021008:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021010:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021015:	83 e0 04             	and    eax,0x4
c0021018:	74 08                	je     c0021022 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002101a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021022:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021027:	83 e0 08             	and    eax,0x8
c002102a:	74 08                	je     c0021034 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002102c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021034:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021039:	83 e0 01             	and    eax,0x1
c002103c:	74 08                	je     c0021046 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002103e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021046:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002104b:	83 e0 02             	and    eax,0x2
c002104e:	74 08                	je     c0021058 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021050:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021058:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002105d:	83 e0 04             	and    eax,0x4
c0021060:	74 08                	je     c002106a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021062:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002106a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002106f:	83 e0 08             	and    eax,0x8
c0021072:	74 08                	je     c002107c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021074:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002107c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021083:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002108a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021092:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002109a:	83 ec 04             	sub    esp,0x4
c002109d:	52                   	push   edx
c002109e:	50                   	push   eax
c002109f:	8d 44 24 24          	lea    eax,[esp+0x24]
c00210a3:	50                   	push   eax
c00210a4:	e8 d3 5a fe ff       	call   c0006b7c <f_chmod>
c00210a9:	83 c4 10             	add    esp,0x10
c00210ac:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00210b3:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00210ba:	85 c0                	test   eax,eax
c00210bc:	75 07                	jne    c00210c5 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00210be:	b8 00 00 00 00       	mov    eax,0x0
c00210c3:	eb 05                	jmp    c00210ca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00210c5:	b8 01 00 00 00       	mov    eax,0x1
c00210ca:	81 c4 2c 01 00 00    	add    esp,0x12c
c00210d0:	c3                   	ret    
c00210d1:	90                   	nop

c00210d2 <FAT::rename(char const*, char const*)>:
c00210d2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00210d8:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00210e0:	74 0a                	je     c00210ec <FAT::rename(char const*, char const*)+0x1a>
c00210e2:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00210ea:	75 0a                	jne    c00210f6 <FAT::rename(char const*, char const*)+0x24>
c00210ec:	b8 04 00 00 00       	mov    eax,0x4
c00210f1:	e9 98 00 00 00       	jmp    c002118e <FAT::rename(char const*, char const*)+0xbc>
c00210f6:	83 ec 08             	sub    esp,0x8
c00210f9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021100:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021107:	50                   	push   eax
c0021108:	e8 27 f7 fd ff       	call   c0000834 <strcpy>
c002110d:	83 c4 10             	add    esp,0x10
c0021110:	83 ec 08             	sub    esp,0x8
c0021113:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002111a:	50                   	push   eax
c002111b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021122:	e8 ed fa ff ff       	call   c0020c14 <FAT::fixFilepath(char*)>
c0021127:	83 c4 10             	add    esp,0x10
c002112a:	83 ec 08             	sub    esp,0x8
c002112d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021134:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021138:	50                   	push   eax
c0021139:	e8 f6 f6 fd ff       	call   c0000834 <strcpy>
c002113e:	83 c4 10             	add    esp,0x10
c0021141:	83 ec 08             	sub    esp,0x8
c0021144:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021148:	50                   	push   eax
c0021149:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021150:	e8 bf fa ff ff       	call   c0020c14 <FAT::fixFilepath(char*)>
c0021155:	83 c4 10             	add    esp,0x10
c0021158:	83 ec 08             	sub    esp,0x8
c002115b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002115f:	50                   	push   eax
c0021160:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021167:	50                   	push   eax
c0021168:	e8 1c 57 fe ff       	call   c0006889 <f_rename>
c002116d:	83 c4 10             	add    esp,0x10
c0021170:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021177:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002117e:	85 c0                	test   eax,eax
c0021180:	75 07                	jne    c0021189 <FAT::rename(char const*, char const*)+0xb7>
c0021182:	b8 00 00 00 00       	mov    eax,0x0
c0021187:	eb 05                	jmp    c002118e <FAT::rename(char const*, char const*)+0xbc>
c0021189:	b8 01 00 00 00       	mov    eax,0x1
c002118e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021194:	c3                   	ret    
c0021195:	90                   	nop

c0021196 <FAT::mkdir(char const*)>:
c0021196:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002119c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211a4:	75 07                	jne    c00211ad <FAT::mkdir(char const*)+0x17>
c00211a6:	b8 04 00 00 00       	mov    eax,0x4
c00211ab:	eb 5c                	jmp    c0021209 <FAT::mkdir(char const*)+0x73>
c00211ad:	83 ec 08             	sub    esp,0x8
c00211b0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211bb:	50                   	push   eax
c00211bc:	e8 73 f6 fd ff       	call   c0000834 <strcpy>
c00211c1:	83 c4 10             	add    esp,0x10
c00211c4:	83 ec 08             	sub    esp,0x8
c00211c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211cb:	50                   	push   eax
c00211cc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211d3:	e8 3c fa ff ff       	call   c0020c14 <FAT::fixFilepath(char*)>
c00211d8:	83 c4 10             	add    esp,0x10
c00211db:	83 ec 0c             	sub    esp,0xc
c00211de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211e2:	50                   	push   eax
c00211e3:	e8 75 54 fe ff       	call   c000665d <f_mkdir>
c00211e8:	83 c4 10             	add    esp,0x10
c00211eb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211f2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00211f9:	85 c0                	test   eax,eax
c00211fb:	75 07                	jne    c0021204 <FAT::mkdir(char const*)+0x6e>
c00211fd:	b8 00 00 00 00       	mov    eax,0x0
c0021202:	eb 05                	jmp    c0021209 <FAT::mkdir(char const*)+0x73>
c0021204:	b8 01 00 00 00       	mov    eax,0x1
c0021209:	81 c4 1c 01 00 00    	add    esp,0x11c
c002120f:	c3                   	ret    

c0021210 <FAT::exists(char const*)>:
c0021210:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021216:	83 ec 08             	sub    esp,0x8
c0021219:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021220:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021224:	50                   	push   eax
c0021225:	e8 0a f6 fd ff       	call   c0000834 <strcpy>
c002122a:	83 c4 10             	add    esp,0x10
c002122d:	83 ec 08             	sub    esp,0x8
c0021230:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021234:	50                   	push   eax
c0021235:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002123c:	e8 d3 f9 ff ff       	call   c0020c14 <FAT::fixFilepath(char*)>
c0021241:	83 c4 10             	add    esp,0x10
c0021244:	83 ec 08             	sub    esp,0x8
c0021247:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002124e:	50                   	push   eax
c002124f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021253:	50                   	push   eax
c0021254:	e8 2f 4f fe ff       	call   c0006188 <f_stat>
c0021259:	83 c4 10             	add    esp,0x10
c002125c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021263:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002126a:	85 c0                	test   eax,eax
c002126c:	75 04                	jne    c0021272 <FAT::exists(char const*)+0x62>
c002126e:	b0 01                	mov    al,0x1
c0021270:	eb 02                	jmp    c0021274 <FAT::exists(char const*)+0x64>
c0021272:	b0 00                	mov    al,0x0
c0021274:	81 c4 2c 02 00 00    	add    esp,0x22c
c002127a:	c3                   	ret    
c002127b:	90                   	nop

c002127c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002127c:	b8 08 00 00 00       	mov    eax,0x8
c0021281:	c3                   	ret    

c0021282 <ISO9660::seek(void*, unsigned long long)>:
c0021282:	53                   	push   ebx
c0021283:	b8 04 00 00 00       	mov    eax,0x4
c0021288:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002128c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021294:	85 d2                	test   edx,edx
c0021296:	74 17                	je     c00212af <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021298:	89 c8                	mov    eax,ecx
c002129a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002129d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00212a0:	b8 01 00 00 00       	mov    eax,0x1
c00212a5:	73 08                	jae    c00212af <ISO9660::seek(void*, unsigned long long)+0x2d>
c00212a7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00212aa:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00212ad:	31 c0                	xor    eax,eax
c00212af:	5b                   	pop    ebx
c00212b0:	c3                   	ret    
c00212b1:	90                   	nop

c00212b2 <ISO9660::tell(void*, unsigned long long*)>:
c00212b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00212b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212ba:	85 d2                	test   edx,edx
c00212bc:	74 12                	je     c00212d0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00212be:	85 c0                	test   eax,eax
c00212c0:	74 0e                	je     c00212d0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00212c2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00212c5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00212c8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00212cb:	89 10                	mov    DWORD PTR [eax],edx
c00212cd:	31 c0                	xor    eax,eax
c00212cf:	c3                   	ret    
c00212d0:	b8 04 00 00 00       	mov    eax,0x4
c00212d5:	c3                   	ret    

c00212d6 <ISO9660::getName()>:
c00212d6:	b8 68 c5 02 c0       	mov    eax,0xc002c568
c00212db:	c3                   	ret    

c00212dc <ISO9660::stat(void*, unsigned long long*)>:
c00212dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00212e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212e4:	85 d2                	test   edx,edx
c00212e6:	74 12                	je     c00212fa <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00212e8:	85 c0                	test   eax,eax
c00212ea:	74 0e                	je     c00212fa <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00212ec:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00212ef:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00212f2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00212f5:	89 10                	mov    DWORD PTR [eax],edx
c00212f7:	31 c0                	xor    eax,eax
c00212f9:	c3                   	ret    
c00212fa:	b8 04 00 00 00       	mov    eax,0x4
c00212ff:	c3                   	ret    

c0021300 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021300:	b8 01 00 00 00       	mov    eax,0x1
c0021305:	c3                   	ret    

c0021306 <ISO9660::unlink(char const*)>:
c0021306:	b8 01 00 00 00       	mov    eax,0x1
c002130b:	c3                   	ret    

c002130c <ISO9660::write(void*, unsigned long, void*, int*)>:
c002130c:	b8 01 00 00 00       	mov    eax,0x1
c0021311:	c3                   	ret    

c0021312 <ISO9660::rename(char const*, char const*)>:
c0021312:	b8 01 00 00 00       	mov    eax,0x1
c0021317:	c3                   	ret    

c0021318 <ISO9660::mkdir(char const*)>:
c0021318:	b8 01 00 00 00       	mov    eax,0x1
c002131d:	c3                   	ret    

c002131e <ISO9660::close(void*)>:
c002131e:	83 ec 0c             	sub    esp,0xc
c0021321:	b8 04 00 00 00       	mov    eax,0x4
c0021326:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002132a:	85 d2                	test   edx,edx
c002132c:	74 0e                	je     c002133c <ISO9660::close(void*)+0x1e>
c002132e:	83 ec 0c             	sub    esp,0xc
c0021331:	52                   	push   edx
c0021332:	e8 19 e5 fe ff       	call   c000f850 <free>
c0021337:	83 c4 10             	add    esp,0x10
c002133a:	31 c0                	xor    eax,eax
c002133c:	83 c4 0c             	add    esp,0xc
c002133f:	c3                   	ret    

c0021340 <ISO9660::closeDir(void*)>:
c0021340:	83 ec 0c             	sub    esp,0xc
c0021343:	b8 04 00 00 00       	mov    eax,0x4
c0021348:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002134c:	85 d2                	test   edx,edx
c002134e:	74 0e                	je     c002135e <ISO9660::closeDir(void*)+0x1e>
c0021350:	83 ec 0c             	sub    esp,0xc
c0021353:	52                   	push   edx
c0021354:	e8 f7 e4 fe ff       	call   c000f850 <free>
c0021359:	83 c4 10             	add    esp,0x10
c002135c:	31 c0                	xor    eax,eax
c002135e:	83 c4 0c             	add    esp,0xc
c0021361:	c3                   	ret    

c0021362 <ISO9660::~ISO9660()>:
c0021362:	83 ec 0c             	sub    esp,0xc
c0021365:	ba cc c5 02 c0       	mov    edx,0xc002c5cc
c002136a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002136e:	89 10                	mov    DWORD PTR [eax],edx
c0021370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021374:	83 ec 0c             	sub    esp,0xc
c0021377:	50                   	push   eax
c0021378:	e8 59 1b ff ff       	call   c0012ed6 <Filesystem::~Filesystem()>
c002137d:	83 c4 10             	add    esp,0x10
c0021380:	90                   	nop
c0021381:	83 c4 0c             	add    esp,0xc
c0021384:	c3                   	ret    
c0021385:	90                   	nop

c0021386 <ISO9660::~ISO9660()>:
c0021386:	83 ec 0c             	sub    esp,0xc
c0021389:	83 ec 0c             	sub    esp,0xc
c002138c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021390:	e8 cd ff ff ff       	call   c0021362 <ISO9660::~ISO9660()>
c0021395:	83 c4 10             	add    esp,0x10
c0021398:	83 ec 08             	sub    esp,0x8
c002139b:	6a 08                	push   0x8
c002139d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213a1:	e8 28 17 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c00213a6:	83 c4 10             	add    esp,0x10
c00213a9:	83 c4 0c             	add    esp,0xc
c00213ac:	c3                   	ret    

c00213ad <__memmem(unsigned char*, int, unsigned char*, int)>:
c00213ad:	55                   	push   ebp
c00213ae:	31 c9                	xor    ecx,ecx
c00213b0:	57                   	push   edi
c00213b1:	56                   	push   esi
c00213b2:	53                   	push   ebx
c00213b3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00213b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00213bb:	89 eb                	mov    ebx,ebp
c00213bd:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00213c1:	39 ce                	cmp    esi,ecx
c00213c3:	7e 17                	jle    c00213dc <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00213c5:	31 d2                	xor    edx,edx
c00213c7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00213cb:	7d 13                	jge    c00213e0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00213cd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00213d1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00213d4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00213d7:	75 0d                	jne    c00213e6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00213d9:	42                   	inc    edx
c00213da:	eb eb                	jmp    c00213c7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00213dc:	31 c0                	xor    eax,eax
c00213de:	eb 0a                	jmp    c00213ea <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00213e0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00213e4:	eb 04                	jmp    c00213ea <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00213e6:	41                   	inc    ecx
c00213e7:	43                   	inc    ebx
c00213e8:	eb d7                	jmp    c00213c1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00213ea:	5b                   	pop    ebx
c00213eb:	5e                   	pop    esi
c00213ec:	5f                   	pop    edi
c00213ed:	5d                   	pop    ebp
c00213ee:	c3                   	ret    

c00213ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00213ef:	56                   	push   esi
c00213f0:	53                   	push   ebx
c00213f1:	52                   	push   edx
c00213f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00213f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00213fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00213fe:	39 0d e0 17 03 c0    	cmp    DWORD PTR ds:0xc00317e0,ecx
c0021404:	75 08                	jne    c002140e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021406:	38 05 34 d6 02 c0    	cmp    BYTE PTR ds:0xc002d634,al
c002140c:	74 2b                	je     c0021439 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002140e:	83 ec 0c             	sub    esp,0xc
c0021411:	a2 34 d6 02 c0       	mov    ds:0xc002d634,al
c0021416:	68 00 18 03 c0       	push   0xc0031800
c002141b:	0f be c0             	movsx  eax,al
c002141e:	6a 01                	push   0x1
c0021420:	89 0d e0 17 03 c0    	mov    DWORD PTR ds:0xc00317e0,ecx
c0021426:	31 db                	xor    ebx,ebx
c0021428:	53                   	push   ebx
c0021429:	51                   	push   ecx
c002142a:	ff 34 85 bc e5 02 c0 	push   DWORD PTR [eax*4-0x3ffd1a44]
c0021431:	e8 62 4f ff ff       	call   c0016398 <LogicalDisk::read(unsigned long long, int, void*)>
c0021436:	83 c4 20             	add    esp,0x20
c0021439:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021441:	c7 44 24 14 00 18 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031800
c0021449:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002144d:	58                   	pop    eax
c002144e:	5b                   	pop    ebx
c002144f:	5e                   	pop    esi
c0021450:	e9 ef f2 fd ff       	jmp    c0000744 <memcpy>
c0021455:	90                   	nop

c0021456 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021456:	81 ec 10 08 00 00    	sub    esp,0x810
c002145c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021463:	83 c0 41             	add    eax,0x41
c0021466:	0f be c0             	movsx  eax,al
c0021469:	50                   	push   eax
c002146a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002146e:	50                   	push   eax
c002146f:	6a 10                	push   0x10
c0021471:	e8 79 ff ff ff       	call   c00213ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021476:	83 c4 10             	add    esp,0x10
c0021479:	31 c0                	xor    eax,eax
c002147b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021480:	75 1d                	jne    c002149f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021482:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021487:	75 16                	jne    c002149f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021489:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002148e:	75 0f                	jne    c002149f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021490:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021495:	75 08                	jne    c002149f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021497:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002149c:	0f 94 c0             	sete   al
c002149f:	81 c4 0c 08 00 00    	add    esp,0x80c
c00214a5:	c3                   	ret    

c00214a6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00214a6:	55                   	push   ebp
c00214a7:	57                   	push   edi
c00214a8:	56                   	push   esi
c00214a9:	53                   	push   ebx
c00214aa:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00214b0:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00214b7:	85 ed                	test   ebp,ebp
c00214b9:	0f 84 d6 01 00 00    	je     c0021695 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00214bf:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00214c7:	0f 84 c8 01 00 00    	je     c0021695 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00214cd:	b8 01 00 00 00       	mov    eax,0x1
c00214d2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00214d6:	0f 85 be 01 00 00    	jne    c002169a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00214dc:	31 d2                	xor    edx,edx
c00214de:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00214e5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00214e8:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00214eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00214ef:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00214f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00214f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00214f9:	01 f0                	add    eax,esi
c00214fb:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00214fe:	11 fa                	adc    edx,edi
c0021500:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021504:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021508:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002150c:	19 d1                	sbb    ecx,edx
c002150e:	72 0a                	jb     c002151a <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021510:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021514:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021518:	eb 13                	jmp    c002152d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002151a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002151e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021522:	29 f0                	sub    eax,esi
c0021524:	19 fa                	sbb    edx,edi
c0021526:	89 04 24             	mov    DWORD PTR [esp],eax
c0021529:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002152d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021530:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021533:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021537:	51                   	push   ecx
c0021538:	c1 e0 0b             	shl    eax,0xb
c002153b:	01 c6                	add    esi,eax
c002153d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021541:	11 d7                	adc    edi,edx
c0021543:	50                   	push   eax
c0021544:	89 fa                	mov    edx,edi
c0021546:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002154a:	89 f0                	mov    eax,esi
c002154c:	53                   	push   ebx
c002154d:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021551:	50                   	push   eax
c0021552:	e8 98 fe ff ff       	call   c00213ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021557:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002155b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002155e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021562:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021568:	83 c4 10             	add    esp,0x10
c002156b:	b8 00 08 00 00       	mov    eax,0x800
c0021570:	29 d0                	sub    eax,edx
c0021572:	39 c1                	cmp    ecx,eax
c0021574:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021578:	83 d9 00             	sbb    ecx,0x0
c002157b:	7d 1c                	jge    c0021599 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c002157d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021582:	75 12                	jne    c0021596 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021584:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002158b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021591:	e9 fb 00 00 00       	jmp    c0021691 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021596:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021599:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c002159c:	31 d2                	xor    edx,edx
c002159e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00215a2:	39 c2                	cmp    edx,eax
c00215a4:	7d 14                	jge    c00215ba <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00215a6:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00215ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00215b1:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00215b4:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00215b7:	42                   	inc    edx
c00215b8:	eb e8                	jmp    c00215a2 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00215ba:	89 c3                	mov    ebx,eax
c00215bc:	85 c0                	test   eax,eax
c00215be:	79 02                	jns    c00215c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00215c0:	31 db                	xor    ebx,ebx
c00215c2:	99                   	cdq    
c00215c3:	01 c3                	add    ebx,eax
c00215c5:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00215cc:	01 c6                	add    esi,eax
c00215ce:	11 d7                	adc    edi,edx
c00215d0:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00215d4:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00215d8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00215db:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00215df:	29 c6                	sub    esi,eax
c00215e1:	19 d7                	sbb    edi,edx
c00215e3:	89 34 24             	mov    DWORD PTR [esp],esi
c00215e6:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00215ea:	b8 ff 07 00 00       	mov    eax,0x7ff
c00215ef:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00215f2:	b8 00 00 00 00       	mov    eax,0x0
c00215f7:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00215fb:	7d 3e                	jge    c002163b <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00215fd:	52                   	push   edx
c00215fe:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021602:	50                   	push   eax
c0021603:	53                   	push   ebx
c0021604:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021608:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002160c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021610:	50                   	push   eax
c0021611:	e8 d9 fd ff ff       	call   c00213ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021616:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002161e:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021623:	81 c3 00 08 00 00    	add    ebx,0x800
c0021629:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021631:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021636:	83 c4 10             	add    esp,0x10
c0021639:	eb af                	jmp    c00215ea <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c002163b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002163f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021642:	74 32                	je     c0021676 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021644:	50                   	push   eax
c0021645:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021649:	50                   	push   eax
c002164a:	8d 44 24 28          	lea    eax,[esp+0x28]
c002164e:	50                   	push   eax
c002164f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021653:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021657:	0f ac fe 0b          	shrd   esi,edi,0xb
c002165b:	56                   	push   esi
c002165c:	e8 8e fd ff ff       	call   c00213ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021661:	83 c4 0c             	add    esp,0xc
c0021664:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021668:	8d 44 24 28          	lea    eax,[esp+0x28]
c002166c:	50                   	push   eax
c002166d:	53                   	push   ebx
c002166e:	e8 d1 f0 fd ff       	call   c0000744 <memcpy>
c0021673:	83 c4 10             	add    esp,0x10
c0021676:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002167d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021681:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021685:	89 38                	mov    DWORD PTR [eax],edi
c0021687:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002168b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002168e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021691:	31 c0                	xor    eax,eax
c0021693:	eb 05                	jmp    c002169a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021695:	b8 04 00 00 00       	mov    eax,0x4
c002169a:	81 c4 2c 08 00 00    	add    esp,0x82c
c00216a0:	5b                   	pop    ebx
c00216a1:	5e                   	pop    esi
c00216a2:	5f                   	pop    edi
c00216a3:	5d                   	pop    ebp
c00216a4:	c3                   	ret    
c00216a5:	90                   	nop

c00216a6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00216a6:	55                   	push   ebp
c00216a7:	57                   	push   edi
c00216a8:	56                   	push   esi
c00216a9:	53                   	push   ebx
c00216aa:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00216b0:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00216b7:	85 f6                	test   esi,esi
c00216b9:	0f 84 64 02 00 00    	je     c0021923 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00216bf:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00216c7:	0f 84 56 02 00 00    	je     c0021923 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00216cd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00216d0:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00216d3:	75 0a                	jne    c00216df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00216d5:	b8 07 00 00 00       	mov    eax,0x7
c00216da:	e9 49 02 00 00       	jmp    c0021928 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00216df:	50                   	push   eax
c00216e0:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00216e4:	50                   	push   eax
c00216e5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00216ec:	53                   	push   ebx
c00216ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00216ef:	c1 e0 0b             	shl    eax,0xb
c00216f2:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00216f5:	c1 e8 0b             	shr    eax,0xb
c00216f8:	50                   	push   eax
c00216f9:	e8 f1 fc ff ff       	call   c00213ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216fe:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021701:	83 c4 10             	add    esp,0x10
c0021704:	89 c1                	mov    ecx,eax
c0021706:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021709:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002170f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021712:	84 db                	test   bl,bl
c0021714:	0f 85 90 00 00 00    	jne    c00217aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c002171a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021720:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021726:	29 c7                	sub    edi,eax
c0021728:	89 fb                	mov    ebx,edi
c002172a:	c1 fb 1f             	sar    ebx,0x1f
c002172d:	01 f8                	add    eax,edi
c002172f:	11 da                	adc    edx,ebx
c0021731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021735:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021739:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c002173c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c002173f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021742:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021745:	89 04 24             	mov    DWORD PTR [esp],eax
c0021748:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002174c:	89 d8                	mov    eax,ebx
c002174e:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021751:	ba 00 00 00 00       	mov    edx,0x0
c0021756:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002175a:	b8 00 00 00 00       	mov    eax,0x0
c002175f:	73 0b                	jae    c002176c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021761:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021764:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021768:	29 f8                	sub    eax,edi
c002176a:	19 da                	sbb    edx,ebx
c002176c:	89 d3                	mov    ebx,edx
c002176e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021771:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021774:	09 c3                	or     ebx,eax
c0021776:	0f 84 59 ff ff ff    	je     c00216d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002177c:	55                   	push   ebp
c002177d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021781:	50                   	push   eax
c0021782:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021789:	53                   	push   ebx
c002178a:	8b 06                	mov    eax,DWORD PTR [esi]
c002178c:	c1 e0 0b             	shl    eax,0xb
c002178f:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021793:	c1 e8 0b             	shr    eax,0xb
c0021796:	50                   	push   eax
c0021797:	e8 53 fc ff ff       	call   c00213ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002179c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002179f:	83 c4 10             	add    esp,0x10
c00217a2:	25 ff 07 00 00       	and    eax,0x7ff
c00217a7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00217aa:	57                   	push   edi
c00217ab:	6a 28                	push   0x28
c00217ad:	6a 00                	push   0x0
c00217af:	8d 44 24 24          	lea    eax,[esp+0x24]
c00217b3:	50                   	push   eax
c00217b4:	e8 bf ef fd ff       	call   c0000778 <memset>
c00217b9:	31 d2                	xor    edx,edx
c00217bb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00217be:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00217c4:	89 f8                	mov    eax,edi
c00217c6:	83 c0 21             	add    eax,0x21
c00217c9:	83 d2 00             	adc    edx,0x0
c00217cc:	89 c7                	mov    edi,eax
c00217ce:	89 d5                	mov    ebp,edx
c00217d0:	83 c4 10             	add    esp,0x10
c00217d3:	31 c9                	xor    ecx,ecx
c00217d5:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c00217dc:	83 f9 28             	cmp    ecx,0x28
c00217df:	88 04 24             	mov    BYTE PTR [esp],al
c00217e2:	0f 94 c2             	sete   dl
c00217e5:	88 d0                	mov    al,dl
c00217e7:	ba ff 07 00 00       	mov    edx,0x7ff
c00217ec:	39 fa                	cmp    edx,edi
c00217ee:	ba 00 00 00 00       	mov    edx,0x0
c00217f3:	19 ea                	sbb    edx,ebp
c00217f5:	0f 92 c2             	setb   dl
c00217f8:	09 c2                	or     edx,eax
c00217fa:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00217fe:	0f 94 c0             	sete   al
c0021801:	08 d0                	or     al,dl
c0021803:	75 16                	jne    c002181b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021805:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021809:	74 10                	je     c002181b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c002180b:	8a 04 24             	mov    al,BYTE PTR [esp]
c002180e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021812:	41                   	inc    ecx
c0021813:	83 c7 01             	add    edi,0x1
c0021816:	83 d5 00             	adc    ebp,0x0
c0021819:	eb ba                	jmp    c00217d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c002181b:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021822:	83 ec 0c             	sub    esp,0xc
c0021825:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021829:	57                   	push   edi
c002182a:	e8 65 ef fd ff       	call   c0000794 <strlen>
c002182f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021837:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002183b:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021842:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021845:	5a                   	pop    edx
c0021846:	25 ff 07 00 00       	and    eax,0x7ff
c002184b:	01 c8                	add    eax,ecx
c002184d:	59                   	pop    ecx
c002184e:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021854:	83 e0 02             	and    eax,0x2
c0021857:	3c 01                	cmp    al,0x1
c0021859:	19 c0                	sbb    eax,eax
c002185b:	83 c0 02             	add    eax,0x2
c002185e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021862:	57                   	push   edi
c0021863:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021867:	50                   	push   eax
c0021868:	e8 c7 ef fd ff       	call   c0000834 <strcpy>
c002186d:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021871:	83 c4 10             	add    esp,0x10
c0021874:	84 c0                	test   al,al
c0021876:	75 21                	jne    c0021899 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021878:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021880:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021888:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021890:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021897:	eb 28                	jmp    c00218c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021899:	fe c8                	dec    al
c002189b:	75 24                	jne    c00218c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002189d:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00218a5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00218ad:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00218b5:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00218bc:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00218c1:	0f b6 fb             	movzx  edi,bl
c00218c4:	31 db                	xor    ebx,ebx
c00218c6:	50                   	push   eax
c00218c7:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c00218ce:	8d 44 24 48          	lea    eax,[esp+0x48]
c00218d2:	50                   	push   eax
c00218d3:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c00218da:	e8 65 ee fd ff       	call   c0000744 <memcpy>
c00218df:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c00218e6:	89 f9                	mov    ecx,edi
c00218e8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00218ee:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c00218f1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00218f4:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c00218f7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00218fa:	83 c4 10             	add    esp,0x10
c00218fd:	39 c7                	cmp    edi,eax
c00218ff:	89 df                	mov    edi,ebx
c0021901:	19 d7                	sbb    edi,edx
c0021903:	72 10                	jb     c0021915 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021905:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c002190c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021913:	eb 0a                	jmp    c002191f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021915:	29 c8                	sub    eax,ecx
c0021917:	19 da                	sbb    edx,ebx
c0021919:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c002191c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002191f:	31 c0                	xor    eax,eax
c0021921:	eb 05                	jmp    c0021928 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021923:	b8 04 00 00 00       	mov    eax,0x4
c0021928:	81 c4 5c 09 00 00    	add    esp,0x95c
c002192e:	5b                   	pop    ebx
c002192f:	5e                   	pop    esi
c0021930:	5f                   	pop    edi
c0021931:	5d                   	pop    ebp
c0021932:	c3                   	ret    

c0021933 <readRoot(unsigned int*, unsigned int*, char)>:
c0021933:	81 ec 40 08 00 00    	sub    esp,0x840
c0021939:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021941:	50                   	push   eax
c0021942:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021946:	50                   	push   eax
c0021947:	6a 10                	push   0x10
c0021949:	e8 a1 fa ff ff       	call   c00213ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002194e:	83 c4 0c             	add    esp,0xc
c0021951:	6a 22                	push   0x22
c0021953:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c002195a:	50                   	push   eax
c002195b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002195f:	50                   	push   eax
c0021960:	e8 df ed fd ff       	call   c0000744 <memcpy>
c0021965:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002196c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021970:	89 10                	mov    DWORD PTR [eax],edx
c0021972:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021979:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002197d:	89 10                	mov    DWORD PTR [eax],edx
c002197f:	b0 01                	mov    al,0x1
c0021981:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021987:	c3                   	ret    

c0021988 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021988:	55                   	push   ebp
c0021989:	57                   	push   edi
c002198a:	56                   	push   esi
c002198b:	53                   	push   ebx
c002198c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021992:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021999:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00219a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00219a4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00219a8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00219ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00219b0:	75 03                	jne    c00219b5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00219b2:	83 c3 02             	add    ebx,0x2
c00219b5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00219b8:	75 03                	jne    c00219bd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00219ba:	43                   	inc    ebx
c00219bb:	eb f8                	jmp    c00219b5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00219bd:	51                   	push   ecx
c00219be:	68 00 01 00 00       	push   0x100
c00219c3:	6a 00                	push   0x0
c00219c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219c9:	50                   	push   eax
c00219ca:	e8 a9 ed fd ff       	call   c0000778 <memset>
c00219cf:	83 c4 10             	add    esp,0x10
c00219d2:	31 d2                	xor    edx,edx
c00219d4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00219d7:	84 c0                	test   al,al
c00219d9:	74 21                	je     c00219fc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00219db:	3c 2f                	cmp    al,0x2f
c00219dd:	75 0b                	jne    c00219ea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00219df:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00219e3:	bd 01 00 00 00       	mov    ebp,0x1
c00219e8:	eb 14                	jmp    c00219fe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00219ea:	8d 48 9f             	lea    ecx,[eax-0x61]
c00219ed:	80 f9 19             	cmp    cl,0x19
c00219f0:	77 03                	ja     c00219f5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00219f2:	83 e8 20             	sub    eax,0x20
c00219f5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00219f9:	42                   	inc    edx
c00219fa:	eb d8                	jmp    c00219d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00219fc:	31 ed                	xor    ebp,ebp
c00219fe:	83 ec 0c             	sub    esp,0xc
c0021a01:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021a08:	e8 33 de fe ff       	call   c000f840 <malloc>
c0021a0d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021a14:	89 c6                	mov    esi,eax
c0021a16:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021a1c:	c1 ef 0b             	shr    edi,0xb
c0021a1f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021a26:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021a2a:	83 c4 10             	add    esp,0x10
c0021a2d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021a32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021a36:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021a3d:	74 28                	je     c0021a67 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021a3f:	52                   	push   edx
c0021a40:	57                   	push   edi
c0021a41:	50                   	push   eax
c0021a42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021a46:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021a4d:	e8 9d f9 ff ff       	call   c00213ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a56:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021a5d:	05 00 08 00 00       	add    eax,0x800
c0021a62:	83 c4 10             	add    esp,0x10
c0021a65:	eb cb                	jmp    c0021a32 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021a67:	83 ec 0c             	sub    esp,0xc
c0021a6a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021a6e:	57                   	push   edi
c0021a6f:	e8 20 ed fd ff       	call   c0000794 <strlen>
c0021a74:	50                   	push   eax
c0021a75:	57                   	push   edi
c0021a76:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021a7d:	56                   	push   esi
c0021a7e:	e8 2a f9 ff ff       	call   c00213ad <__memmem(unsigned char*, int, unsigned char*, int)>
c0021a83:	83 c4 20             	add    esp,0x20
c0021a86:	85 c0                	test   eax,eax
c0021a88:	75 13                	jne    c0021a9d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021a8a:	83 ec 0c             	sub    esp,0xc
c0021a8d:	56                   	push   esi
c0021a8e:	e8 bd dd fe ff       	call   c000f850 <free>
c0021a93:	83 c4 10             	add    esp,0x10
c0021a96:	31 c0                	xor    eax,eax
c0021a98:	e9 b3 00 00 00       	jmp    c0021b50 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021a9d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021aa1:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021aa5:	c1 e7 08             	shl    edi,0x8
c0021aa8:	c1 e2 10             	shl    edx,0x10
c0021aab:	09 d7                	or     edi,edx
c0021aad:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021ab1:	09 d7                	or     edi,edx
c0021ab3:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021ab7:	c1 e2 18             	shl    edx,0x18
c0021aba:	09 d7                	or     edi,edx
c0021abc:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021ac0:	89 d1                	mov    ecx,edx
c0021ac2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021ac6:	c1 e1 08             	shl    ecx,0x8
c0021ac9:	c1 e2 10             	shl    edx,0x10
c0021acc:	09 ca                	or     edx,ecx
c0021ace:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021ad2:	09 ca                	or     edx,ecx
c0021ad4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021ad8:	c1 e1 18             	shl    ecx,0x18
c0021adb:	09 ca                	or     edx,ecx
c0021add:	89 e9                	mov    ecx,ebp
c0021adf:	84 c9                	test   cl,cl
c0021ae1:	74 3c                	je     c0021b1f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021ae3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021ae7:	83 ec 0c             	sub    esp,0xc
c0021aea:	56                   	push   esi
c0021aeb:	e8 60 dd fe ff       	call   c000f850 <free>
c0021af0:	83 c4 0c             	add    esp,0xc
c0021af3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021afa:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021aff:	50                   	push   eax
c0021b00:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021b07:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021b0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021b12:	52                   	push   edx
c0021b13:	57                   	push   edi
c0021b14:	53                   	push   ebx
c0021b15:	e8 6e fe ff ff       	call   c0021988 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021b1a:	83 c4 20             	add    esp,0x20
c0021b1d:	eb 31                	jmp    c0021b50 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021b1f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021b22:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021b29:	d0 e8                	shr    al,1
c0021b2b:	89 3b                	mov    DWORD PTR [ebx],edi
c0021b2d:	83 e0 01             	and    eax,0x1
c0021b30:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021b37:	83 ec 0c             	sub    esp,0xc
c0021b3a:	89 13                	mov    DWORD PTR [ebx],edx
c0021b3c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021b43:	89 03                	mov    DWORD PTR [ebx],eax
c0021b45:	56                   	push   esi
c0021b46:	e8 05 dd fe ff       	call   c000f850 <free>
c0021b4b:	83 c4 10             	add    esp,0x10
c0021b4e:	b0 01                	mov    al,0x1
c0021b50:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021b56:	5b                   	pop    ebx
c0021b57:	5e                   	pop    esi
c0021b58:	5f                   	pop    edi
c0021b59:	5d                   	pop    ebp
c0021b5a:	c3                   	ret    

c0021b5b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021b5b:	55                   	push   ebp
c0021b5c:	57                   	push   edi
c0021b5d:	56                   	push   esi
c0021b5e:	53                   	push   ebx
c0021b5f:	83 ec 20             	sub    esp,0x20
c0021b62:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021b66:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021b6a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021b6e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021b76:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021b7e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021b83:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021b89:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021b8f:	57                   	push   edi
c0021b90:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b94:	50                   	push   eax
c0021b95:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b99:	50                   	push   eax
c0021b9a:	e8 94 fd ff ff       	call   c0021933 <readRoot(unsigned int*, unsigned int*, char)>
c0021b9f:	5a                   	pop    edx
c0021ba0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021ba4:	e8 eb eb fd ff       	call   c0000794 <strlen>
c0021ba9:	83 c4 10             	add    esp,0x10
c0021bac:	83 f8 03             	cmp    eax,0x3
c0021baf:	77 17                	ja     c0021bc8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021bb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021bb5:	89 03                	mov    DWORD PTR [ebx],eax
c0021bb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021bbb:	89 06                	mov    DWORD PTR [esi],eax
c0021bbd:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021bc4:	b0 01                	mov    al,0x1
c0021bc6:	eb 19                	jmp    c0021be1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021bc8:	50                   	push   eax
c0021bc9:	55                   	push   ebp
c0021bca:	57                   	push   edi
c0021bcb:	56                   	push   esi
c0021bcc:	53                   	push   ebx
c0021bcd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021bd1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021bd5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021bd9:	e8 aa fd ff ff       	call   c0021988 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021bde:	83 c4 20             	add    esp,0x20
c0021be1:	83 c4 1c             	add    esp,0x1c
c0021be4:	5b                   	pop    ebx
c0021be5:	5e                   	pop    esi
c0021be6:	5f                   	pop    edi
c0021be7:	5d                   	pop    ebp
c0021be8:	c3                   	ret    
c0021be9:	90                   	nop

c0021bea <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021bea:	57                   	push   edi
c0021beb:	56                   	push   esi
c0021bec:	53                   	push   ebx
c0021bed:	83 ec 10             	sub    esp,0x10
c0021bf0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021bf4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021bf8:	85 ff                	test   edi,edi
c0021bfa:	0f 84 9d 00 00 00    	je     c0021c9d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021c00:	85 f6                	test   esi,esi
c0021c02:	0f 84 95 00 00 00    	je     c0021c9d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021c08:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021c0d:	74 17                	je     c0021c26 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021c0f:	83 ec 0c             	sub    esp,0xc
c0021c12:	68 83 c5 02 c0       	push   0xc002c583
c0021c17:	e8 92 0f ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0021c1c:	83 c4 10             	add    esp,0x10
c0021c1f:	b8 03 00 00 00       	mov    eax,0x3
c0021c24:	eb 7c                	jmp    c0021ca2 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021c26:	83 ec 0c             	sub    esp,0xc
c0021c29:	6a 1c                	push   0x1c
c0021c2b:	e8 10 dc fe ff       	call   c000f840 <malloc>
c0021c30:	89 07                	mov    DWORD PTR [edi],eax
c0021c32:	89 c3                	mov    ebx,eax
c0021c34:	58                   	pop    eax
c0021c35:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c39:	50                   	push   eax
c0021c3a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021c3d:	50                   	push   eax
c0021c3e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c42:	50                   	push   eax
c0021c43:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c47:	50                   	push   eax
c0021c48:	56                   	push   esi
c0021c49:	e8 0d ff ff ff       	call   c0021b5b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021c4e:	83 c4 20             	add    esp,0x20
c0021c51:	84 c0                	test   al,al
c0021c53:	74 07                	je     c0021c5c <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021c55:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021c5a:	74 0b                	je     c0021c67 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021c5c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021c60:	b8 01 00 00 00       	mov    eax,0x1
c0021c65:	eb 3b                	jmp    c0021ca2 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021c67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c6b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021c6f:	89 03                	mov    DWORD PTR [ebx],eax
c0021c71:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021c78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c7c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021c83:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021c8a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021c8d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021c94:	8a 06                	mov    al,BYTE PTR [esi]
c0021c96:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021c99:	31 c0                	xor    eax,eax
c0021c9b:	eb 05                	jmp    c0021ca2 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021c9d:	b8 04 00 00 00       	mov    eax,0x4
c0021ca2:	83 c4 10             	add    esp,0x10
c0021ca5:	5b                   	pop    ebx
c0021ca6:	5e                   	pop    esi
c0021ca7:	5f                   	pop    edi
c0021ca8:	c3                   	ret    
c0021ca9:	90                   	nop

c0021caa <ISO9660::exists(char const*)>:
c0021caa:	83 ec 28             	sub    esp,0x28
c0021cad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021cb1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021cb5:	52                   	push   edx
c0021cb6:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021cb9:	52                   	push   edx
c0021cba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021cbe:	52                   	push   edx
c0021cbf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021cc3:	52                   	push   edx
c0021cc4:	50                   	push   eax
c0021cc5:	e8 91 fe ff ff       	call   c0021b5b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021cca:	83 c4 3c             	add    esp,0x3c
c0021ccd:	c3                   	ret    

c0021cce <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021cce:	56                   	push   esi
c0021ccf:	53                   	push   ebx
c0021cd0:	83 ec 14             	sub    esp,0x14
c0021cd3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021cd7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021cdb:	85 db                	test   ebx,ebx
c0021cdd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021ce1:	0f 94 c2             	sete   dl
c0021ce4:	85 f6                	test   esi,esi
c0021ce6:	0f 94 c0             	sete   al
c0021ce9:	08 c2                	or     dl,al
c0021ceb:	75 68                	jne    c0021d55 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021ced:	85 c9                	test   ecx,ecx
c0021cef:	74 64                	je     c0021d55 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021cf1:	83 ec 0c             	sub    esp,0xc
c0021cf4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021cf7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021cfb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021d01:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021d08:	50                   	push   eax
c0021d09:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021d0c:	50                   	push   eax
c0021d0d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d11:	50                   	push   eax
c0021d12:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d16:	50                   	push   eax
c0021d17:	51                   	push   ecx
c0021d18:	e8 3e fe ff ff       	call   c0021b5b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021d1d:	83 c4 20             	add    esp,0x20
c0021d20:	ba 01 00 00 00       	mov    edx,0x1
c0021d25:	84 c0                	test   al,al
c0021d27:	74 31                	je     c0021d5a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021d29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021d2d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021d34:	89 03                	mov    DWORD PTR [ebx],eax
c0021d36:	ba 00 00 00 00       	mov    edx,0x0
c0021d3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d3f:	85 c0                	test   eax,eax
c0021d41:	0f 95 06             	setne  BYTE PTR [esi]
c0021d44:	74 14                	je     c0021d5a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021d46:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021d4c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021d53:	eb 05                	jmp    c0021d5a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021d55:	ba 04 00 00 00       	mov    edx,0x4
c0021d5a:	83 c4 14             	add    esp,0x14
c0021d5d:	89 d0                	mov    eax,edx
c0021d5f:	5b                   	pop    ebx
c0021d60:	5e                   	pop    esi
c0021d61:	c3                   	ret    

c0021d62 <ISO9660::openDir(char const*, void**)>:
c0021d62:	57                   	push   edi
c0021d63:	56                   	push   esi
c0021d64:	53                   	push   ebx
c0021d65:	83 ec 10             	sub    esp,0x10
c0021d68:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021d6c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021d70:	85 ff                	test   edi,edi
c0021d72:	0f 84 95 00 00 00    	je     c0021e0d <ISO9660::openDir(char const*, void**)+0xab>
c0021d78:	85 f6                	test   esi,esi
c0021d7a:	0f 84 8d 00 00 00    	je     c0021e0d <ISO9660::openDir(char const*, void**)+0xab>
c0021d80:	83 ec 0c             	sub    esp,0xc
c0021d83:	6a 1c                	push   0x1c
c0021d85:	e8 b6 da fe ff       	call   c000f840 <malloc>
c0021d8a:	89 07                	mov    DWORD PTR [edi],eax
c0021d8c:	89 c3                	mov    ebx,eax
c0021d8e:	59                   	pop    ecx
c0021d8f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021d93:	50                   	push   eax
c0021d94:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021d97:	50                   	push   eax
c0021d98:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d9c:	50                   	push   eax
c0021d9d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021da1:	50                   	push   eax
c0021da2:	56                   	push   esi
c0021da3:	e8 b3 fd ff ff       	call   c0021b5b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021da8:	83 c4 20             	add    esp,0x20
c0021dab:	84 c0                	test   al,al
c0021dad:	74 07                	je     c0021db6 <ISO9660::openDir(char const*, void**)+0x54>
c0021daf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021db4:	75 21                	jne    c0021dd7 <ISO9660::openDir(char const*, void**)+0x75>
c0021db6:	0f b6 c0             	movzx  eax,al
c0021db9:	52                   	push   edx
c0021dba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021dbe:	50                   	push   eax
c0021dbf:	68 a9 c5 02 c0       	push   0xc002c5a9
c0021dc4:	e8 e5 0d ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0021dc9:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021dcd:	83 c4 10             	add    esp,0x10
c0021dd0:	b8 01 00 00 00       	mov    eax,0x1
c0021dd5:	eb 3b                	jmp    c0021e12 <ISO9660::openDir(char const*, void**)+0xb0>
c0021dd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ddb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ddf:	89 03                	mov    DWORD PTR [ebx],eax
c0021de1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021de8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021dec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021df3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021dfa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021dfd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021e04:	8a 06                	mov    al,BYTE PTR [esi]
c0021e06:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021e09:	31 c0                	xor    eax,eax
c0021e0b:	eb 05                	jmp    c0021e12 <ISO9660::openDir(char const*, void**)+0xb0>
c0021e0d:	b8 04 00 00 00       	mov    eax,0x4
c0021e12:	83 c4 10             	add    esp,0x10
c0021e15:	5b                   	pop    ebx
c0021e16:	5e                   	pop    esi
c0021e17:	5f                   	pop    edi
c0021e18:	c3                   	ret    
c0021e19:	90                   	nop

c0021e1a <ISO9660::ISO9660()>:
c0021e1a:	83 ec 0c             	sub    esp,0xc
c0021e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e21:	83 ec 0c             	sub    esp,0xc
c0021e24:	50                   	push   eax
c0021e25:	e8 88 10 ff ff       	call   c0012eb2 <Filesystem::Filesystem()>
c0021e2a:	83 c4 10             	add    esp,0x10
c0021e2d:	ba cc c5 02 c0       	mov    edx,0xc002c5cc
c0021e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e36:	89 10                	mov    DWORD PTR [eax],edx
c0021e38:	90                   	nop
c0021e39:	83 c4 0c             	add    esp,0xc
c0021e3c:	c3                   	ret    
c0021e3d:	90                   	nop

c0021e3e <SoundChannel::~SoundChannel()>:
c0021e3e:	83 ec 0c             	sub    esp,0xc
c0021e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e45:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021e48:	83 ec 0c             	sub    esp,0xc
c0021e4b:	50                   	push   eax
c0021e4c:	e8 ff d9 fe ff       	call   c000f850 <free>
c0021e51:	83 c4 10             	add    esp,0x10
c0021e54:	90                   	nop
c0021e55:	83 c4 0c             	add    esp,0xc
c0021e58:	c3                   	ret    
c0021e59:	90                   	nop

c0021e5a <SoundChannel::setSpeed(float)>:
c0021e5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021e62:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021e65:	c3                   	ret    

c0021e66 <SoundChannel::getSpeed()>:
c0021e66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e6a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021e6d:	c3                   	ret    

c0021e6e <SoundChannel::setVolume(int)>:
c0021e6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e72:	83 f8 64             	cmp    eax,0x64
c0021e75:	7e 05                	jle    c0021e7c <SoundChannel::setVolume(int)+0xe>
c0021e77:	b8 64 00 00 00       	mov    eax,0x64
c0021e7c:	85 c0                	test   eax,eax
c0021e7e:	79 02                	jns    c0021e82 <SoundChannel::setVolume(int)+0x14>
c0021e80:	31 c0                	xor    eax,eax
c0021e82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e86:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021e89:	c3                   	ret    

c0021e8a <SoundChannel::getVolume()>:
c0021e8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e8e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021e91:	c3                   	ret    

c0021e92 <SoundChannel::pause()>:
c0021e92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e96:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021e9a:	c3                   	ret    
c0021e9b:	90                   	nop

c0021e9c <SoundChannel::SoundChannel(int, int, int, int)>:
c0021e9c:	83 ec 1c             	sub    esp,0x1c
c0021e9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021ea3:	e8 ea ff ff ff       	call   c0021e92 <SoundChannel::pause()>
c0021ea8:	83 c4 04             	add    esp,0x4
c0021eab:	6a 50                	push   0x50
c0021ead:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021eb1:	e8 b8 ff ff ff       	call   c0021e6e <SoundChannel::setVolume(int)>
c0021eb6:	83 c4 08             	add    esp,0x8
c0021eb9:	a1 44 c6 02 c0       	mov    eax,ds:0xc002c644
c0021ebe:	50                   	push   eax
c0021ebf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021ec3:	e8 92 ff ff ff       	call   c0021e5a <SoundChannel::setSpeed(float)>
c0021ec8:	83 c4 08             	add    esp,0x8
c0021ecb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ecf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021ed3:	89 10                	mov    DWORD PTR [eax],edx
c0021ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ed9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021edd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ee4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021ee8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021eeb:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021ef0:	75 23                	jne    c0021f15 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ef6:	8b 10                	mov    edx,DWORD PTR [eax]
c0021ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021efc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021eff:	0f af c2             	imul   eax,edx
c0021f02:	85 c0                	test   eax,eax
c0021f04:	79 03                	jns    c0021f09 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021f06:	83 c0 03             	add    eax,0x3
c0021f09:	c1 f8 02             	sar    eax,0x2
c0021f0c:	05 a0 0f 00 00       	add    eax,0xfa0
c0021f11:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f19:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021f1d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021f20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f24:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021f2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f2f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021f36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f3a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021f3d:	c1 e0 02             	shl    eax,0x2
c0021f40:	83 ec 0c             	sub    esp,0xc
c0021f43:	50                   	push   eax
c0021f44:	e8 f7 d8 fe ff       	call   c000f840 <malloc>
c0021f49:	83 c4 10             	add    esp,0x10
c0021f4c:	89 c2                	mov    edx,eax
c0021f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f52:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021f55:	83 ec 04             	sub    esp,0x4
c0021f58:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021f5c:	50                   	push   eax
c0021f5d:	6a 01                	push   0x1
c0021f5f:	6a 04                	push   0x4
c0021f61:	e8 39 6c fe ff       	call   c0008b9f <src_new>
c0021f66:	83 c4 10             	add    esp,0x10
c0021f69:	89 c2                	mov    edx,eax
c0021f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f6f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f76:	85 c0                	test   eax,eax
c0021f78:	74 10                	je     c0021f8a <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021f7a:	83 ec 0c             	sub    esp,0xc
c0021f7d:	68 28 c6 02 c0       	push   0xc002c628
c0021f82:	e8 a2 82 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0021f87:	83 c4 10             	add    esp,0x10
c0021f8a:	a0 00 24 03 c0       	mov    al,ds:0xc0032400
c0021f8f:	83 f0 01             	xor    eax,0x1
c0021f92:	84 c0                	test   al,al
c0021f94:	74 57                	je     c0021fed <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021f96:	a1 48 c6 02 c0       	mov    eax,ds:0xc002c648
c0021f9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f9f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fa7:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021faf:	7f 35                	jg     c0021fe6 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021fb1:	83 ec 0c             	sub    esp,0xc
c0021fb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021fb8:	e8 9a 4f 00 00       	call   c0026f57 <__floatsisf>
c0021fbd:	83 c4 10             	add    esp,0x10
c0021fc0:	8b 15 48 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c648
c0021fc6:	83 ec 08             	sub    esp,0x8
c0021fc9:	52                   	push   edx
c0021fca:	50                   	push   eax
c0021fcb:	e8 99 4b 00 00       	call   c0026b69 <__mulsf3>
c0021fd0:	83 c4 10             	add    esp,0x10
c0021fd3:	89 c2                	mov    edx,eax
c0021fd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fd9:	89 14 85 00 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffce000],edx
c0021fe0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021fe4:	eb c1                	jmp    c0021fa7 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021fe6:	c6 05 00 24 03 c0 01 	mov    BYTE PTR ds:0xc0032400,0x1
c0021fed:	90                   	nop
c0021fee:	83 c4 1c             	add    esp,0x1c
c0021ff1:	c3                   	ret    

c0021ff2 <SoundChannel::play()>:
c0021ff2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff6:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021ffa:	c3                   	ret    
c0021ffb:	90                   	nop

c0021ffc <SoundChannel::paused()>:
c0021ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022000:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022003:	c3                   	ret    

c0022004 <SoundChannel::getSampleRate()>:
c0022004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022008:	8b 00                	mov    eax,DWORD PTR [eax]
c002200a:	c3                   	ret    
c002200b:	90                   	nop

c002200c <SoundChannel::getBits()>:
c002200c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022013:	c3                   	ret    

c0022014 <SoundChannel::getBufferUsed()>:
c0022014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022018:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002201b:	c3                   	ret    

c002201c <SoundChannel::getBufferSize()>:
c002201c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022020:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022023:	c3                   	ret    

c0022024 <SoundChannel::unbuffer(float*, int, int)>:
c0022024:	56                   	push   esi
c0022025:	53                   	push   ebx
c0022026:	83 ec 40             	sub    esp,0x40
c0022029:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002202d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022030:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022034:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022037:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002203b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002203f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022043:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022047:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002204b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002204f:	e8 03 4f 00 00       	call   c0026f57 <__floatsisf>
c0022054:	5a                   	pop    edx
c0022055:	89 c6                	mov    esi,eax
c0022057:	ff 33                	push   DWORD PTR [ebx]
c0022059:	e8 f9 4e 00 00       	call   c0026f57 <__floatsisf>
c002205e:	59                   	pop    ecx
c002205f:	5a                   	pop    edx
c0022060:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022063:	50                   	push   eax
c0022064:	e8 00 4b 00 00       	call   c0026b69 <__mulsf3>
c0022069:	59                   	pop    ecx
c002206a:	5a                   	pop    edx
c002206b:	50                   	push   eax
c002206c:	56                   	push   esi
c002206d:	e8 ba 4c 00 00       	call   c0026d2c <__divsf3>
c0022072:	89 04 24             	mov    DWORD PTR [esp],eax
c0022075:	e8 ad 61 00 00       	call   c0028227 <__extendsfdf2>
c002207a:	59                   	pop    ecx
c002207b:	5e                   	pop    esi
c002207c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022080:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022084:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002208c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022090:	50                   	push   eax
c0022091:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022094:	e8 fb 66 fe ff       	call   c0008794 <src_process>
c0022099:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002209d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00220a0:	83 c4 0c             	add    esp,0xc
c00220a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00220a6:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00220a9:	29 d0                	sub    eax,edx
c00220ab:	c1 e0 02             	shl    eax,0x2
c00220ae:	50                   	push   eax
c00220af:	8d 04 91             	lea    eax,[ecx+edx*4]
c00220b2:	50                   	push   eax
c00220b3:	51                   	push   ecx
c00220b4:	e8 c3 e5 fd ff       	call   c000067c <memmove>
c00220b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220bd:	83 c4 44             	add    esp,0x44
c00220c0:	5b                   	pop    ebx
c00220c1:	5e                   	pop    esi
c00220c2:	c3                   	ret    
c00220c3:	90                   	nop

c00220c4 <SoundChannel::buffer8(unsigned char*, int)>:
c00220c4:	55                   	push   ebp
c00220c5:	57                   	push   edi
c00220c6:	56                   	push   esi
c00220c7:	53                   	push   ebx
c00220c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220cc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00220d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00220d3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00220d7:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00220da:	74 7a                	je     c0022156 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00220dc:	85 ff                	test   edi,edi
c00220de:	7e 76                	jle    c0022156 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00220e0:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00220e4:	8d 70 01             	lea    esi,[eax+0x1]
c00220e7:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00220ea:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00220ed:	8b 1c 9d 00 20 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce000]
c00220f4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00220f7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00220fa:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00220fd:	74 5e                	je     c002215d <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00220ff:	83 ff 01             	cmp    edi,0x1
c0022102:	74 4b                	je     c002214f <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022104:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022108:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002210b:	8d 70 01             	lea    esi,[eax+0x1]
c002210e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022111:	8b 1c 9d 00 20 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce000]
c0022118:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002211b:	b8 02 00 00 00       	mov    eax,0x2
c0022120:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022123:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022126:	75 23                	jne    c002214b <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022128:	eb 27                	jmp    c0022151 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002212a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002212f:	8d 71 01             	lea    esi,[ecx+0x1]
c0022132:	40                   	inc    eax
c0022133:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022136:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022139:	8b 1c 9d 00 20 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce000]
c0022140:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022143:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022146:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022149:	74 06                	je     c0022151 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002214b:	39 c7                	cmp    edi,eax
c002214d:	75 db                	jne    c002212a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002214f:	89 f8                	mov    eax,edi
c0022151:	5b                   	pop    ebx
c0022152:	5e                   	pop    esi
c0022153:	5f                   	pop    edi
c0022154:	5d                   	pop    ebp
c0022155:	c3                   	ret    
c0022156:	5b                   	pop    ebx
c0022157:	31 c0                	xor    eax,eax
c0022159:	5e                   	pop    esi
c002215a:	5f                   	pop    edi
c002215b:	5d                   	pop    ebp
c002215c:	c3                   	ret    
c002215d:	b8 01 00 00 00       	mov    eax,0x1
c0022162:	eb ed                	jmp    c0022151 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022164 <SoundDevice::SoundDevice(char const*)>:
c0022164:	83 ec 1c             	sub    esp,0x1c
c0022167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002216b:	83 ec 08             	sub    esp,0x8
c002216e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022172:	50                   	push   eax
c0022173:	e8 4c 20 ff ff       	call   c00141c4 <Device::Device(char const*)>
c0022178:	83 c4 10             	add    esp,0x10
c002217b:	ba 54 c6 02 c0       	mov    edx,0xc002c654
c0022180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022184:	89 10                	mov    DWORD PTR [eax],edx
c0022186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002218a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022194:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022198:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00221a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221aa:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00221af:	7f 19                	jg     c00221ca <SoundDevice::SoundDevice(char const*)+0x66>
c00221b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00221b9:	83 c2 54             	add    edx,0x54
c00221bc:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00221c4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00221c8:	eb e0                	jmp    c00221aa <SoundDevice::SoundDevice(char const*)+0x46>
c00221ca:	90                   	nop
c00221cb:	83 c4 1c             	add    esp,0x1c
c00221ce:	c3                   	ret    
c00221cf:	90                   	nop

c00221d0 <SoundDevice::~SoundDevice()>:
c00221d0:	53                   	push   ebx
c00221d1:	83 ec 18             	sub    esp,0x18
c00221d4:	ba 54 c6 02 c0       	mov    edx,0xc002c654
c00221d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221dd:	89 10                	mov    DWORD PTR [eax],edx
c00221df:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221e7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00221ec:	7f 46                	jg     c0022234 <SoundDevice::~SoundDevice()+0x64>
c00221ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00221f6:	83 c2 54             	add    edx,0x54
c00221f9:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00221fd:	85 c0                	test   eax,eax
c00221ff:	74 2d                	je     c002222e <SoundDevice::~SoundDevice()+0x5e>
c0022201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022205:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022209:	83 c2 54             	add    edx,0x54
c002220c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022210:	85 db                	test   ebx,ebx
c0022212:	74 1a                	je     c002222e <SoundDevice::~SoundDevice()+0x5e>
c0022214:	83 ec 0c             	sub    esp,0xc
c0022217:	53                   	push   ebx
c0022218:	e8 21 fc ff ff       	call   c0021e3e <SoundChannel::~SoundChannel()>
c002221d:	83 c4 10             	add    esp,0x10
c0022220:	83 ec 08             	sub    esp,0x8
c0022223:	6a 2c                	push   0x2c
c0022225:	53                   	push   ebx
c0022226:	e8 a3 08 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c002222b:	83 c4 10             	add    esp,0x10
c002222e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022232:	eb b3                	jmp    c00221e7 <SoundDevice::~SoundDevice()+0x17>
c0022234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022238:	83 ec 0c             	sub    esp,0xc
c002223b:	50                   	push   eax
c002223c:	e8 65 1c ff ff       	call   c0013ea6 <Device::~Device()>
c0022241:	83 c4 10             	add    esp,0x10
c0022244:	90                   	nop
c0022245:	83 c4 18             	add    esp,0x18
c0022248:	5b                   	pop    ebx
c0022249:	c3                   	ret    

c002224a <SoundDevice::~SoundDevice()>:
c002224a:	83 ec 0c             	sub    esp,0xc
c002224d:	83 ec 0c             	sub    esp,0xc
c0022250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022254:	e8 77 ff ff ff       	call   c00221d0 <SoundDevice::~SoundDevice()>
c0022259:	83 c4 10             	add    esp,0x10
c002225c:	83 ec 08             	sub    esp,0x8
c002225f:	68 e4 01 00 00       	push   0x1e4
c0022264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022268:	e8 61 08 ff ff       	call   c0012ace <operator delete(void*, unsigned long)>
c002226d:	83 c4 10             	add    esp,0x10
c0022270:	83 c4 0c             	add    esp,0xc
c0022273:	c3                   	ret    

c0022274 <SoundDevice::getFreeChannelNum()>:
c0022274:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022278:	31 c0                	xor    eax,eax
c002227a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022282:	74 09                	je     c002228d <SoundDevice::getFreeChannelNum()+0x19>
c0022284:	40                   	inc    eax
c0022285:	83 f8 20             	cmp    eax,0x20
c0022288:	75 f0                	jne    c002227a <SoundDevice::getFreeChannelNum()+0x6>
c002228a:	83 c8 ff             	or     eax,0xffffffff
c002228d:	c3                   	ret    

c002228e <SoundDevice::addChannel(SoundChannel*)>:
c002228e:	56                   	push   esi
c002228f:	53                   	push   ebx
c0022290:	51                   	push   ecx
c0022291:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022295:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022299:	53                   	push   ebx
c002229a:	e8 d5 ff ff ff       	call   c0022274 <SoundDevice::getFreeChannelNum()>
c002229f:	5a                   	pop    edx
c00222a0:	83 f8 ff             	cmp    eax,0xffffffff
c00222a3:	74 51                	je     c00222f6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00222a5:	85 f6                	test   esi,esi
c00222a7:	74 4d                	je     c00222f6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00222a9:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00222b0:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00222b7:	75 30                	jne    c00222e9 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00222b9:	83 ec 0c             	sub    esp,0xc
c00222bc:	56                   	push   esi
c00222bd:	e8 42 fd ff ff       	call   c0022004 <SoundChannel::getSampleRate()>
c00222c2:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00222c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00222cb:	e8 3c fd ff ff       	call   c002200c <SoundChannel::getBits()>
c00222d0:	83 c4 0c             	add    esp,0xc
c00222d3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00222d9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00222db:	50                   	push   eax
c00222dc:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00222e2:	53                   	push   ebx
c00222e3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00222e6:	83 c4 10             	add    esp,0x10
c00222e9:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00222ef:	b8 01 00 00 00       	mov    eax,0x1
c00222f4:	eb 03                	jmp    c00222f9 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00222f6:	83 c8 ff             	or     eax,0xffffffff
c00222f9:	5a                   	pop    edx
c00222fa:	5b                   	pop    ebx
c00222fb:	5e                   	pop    esi
c00222fc:	c3                   	ret    
c00222fd:	90                   	nop

c00222fe <SoundDevice::removeChannel(int)>:
c00222fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022306:	83 fa 1f             	cmp    edx,0x1f
c0022309:	77 23                	ja     c002232e <SoundDevice::removeChannel(int)+0x30>
c002230b:	8d 14 90             	lea    edx,[eax+edx*4]
c002230e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022315:	74 17                	je     c002232e <SoundDevice::removeChannel(int)+0x30>
c0022317:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022321:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022327:	75 05                	jne    c002232e <SoundDevice::removeChannel(int)+0x30>
c0022329:	8b 00                	mov    eax,DWORD PTR [eax]
c002232b:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002232e:	c3                   	ret    
c002232f:	90                   	nop

c0022330 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022330:	57                   	push   edi
c0022331:	56                   	push   esi
c0022332:	53                   	push   ebx
c0022333:	31 db                	xor    ebx,ebx
c0022335:	83 ec 10             	sub    esp,0x10
c0022338:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002233c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022340:	0f 8d cb 00 00 00    	jge    c0022411 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022346:	83 ec 0c             	sub    esp,0xc
c0022349:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002234d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022350:	e8 d2 5e 00 00       	call   c0028227 <__extendsfdf2>
c0022355:	83 c4 10             	add    esp,0x10
c0022358:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002235c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022360:	68 00 00 f0 3f       	push   0x3ff00000
c0022365:	6a 00                	push   0x0
c0022367:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002236b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002236f:	e8 3f 4e 00 00       	call   c00271b3 <__adddf3>
c0022374:	83 c4 10             	add    esp,0x10
c0022377:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002237b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002237f:	68 00 00 e0 3f       	push   0x3fe00000
c0022384:	6a 00                	push   0x0
c0022386:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002238a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002238e:	e8 9d 54 00 00       	call   c0027830 <__muldf3>
c0022393:	83 c4 10             	add    esp,0x10
c0022396:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002239a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002239e:	68 00 00 60 40       	push   0x40600000
c00223a3:	6a 00                	push   0x0
c00223a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223ad:	e8 7e 54 00 00       	call   c0027830 <__muldf3>
c00223b2:	59                   	pop    ecx
c00223b3:	5f                   	pop    edi
c00223b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00223b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00223bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223c4:	e8 3a 5d 00 00       	call   c0028103 <__truncdfsf2>
c00223c9:	5a                   	pop    edx
c00223ca:	89 c7                	mov    edi,eax
c00223cc:	59                   	pop    ecx
c00223cd:	68 00 00 fe 42       	push   0x42fe0000
c00223d2:	50                   	push   eax
c00223d3:	e8 d5 4d 00 00       	call   c00271ad <__gesf2>
c00223d8:	83 c4 10             	add    esp,0x10
c00223db:	85 c0                	test   eax,eax
c00223dd:	78 06                	js     c00223e5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00223df:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00223e3:	eb 26                	jmp    c002240b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00223e5:	50                   	push   eax
c00223e6:	50                   	push   eax
c00223e7:	6a 00                	push   0x0
c00223e9:	57                   	push   edi
c00223ea:	e8 c2 4d 00 00       	call   c00271b1 <__lesf2>
c00223ef:	83 c4 10             	add    esp,0x10
c00223f2:	85 c0                	test   eax,eax
c00223f4:	7f 06                	jg     c00223fc <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00223f6:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00223fa:	eb 0f                	jmp    c002240b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00223fc:	83 ec 0c             	sub    esp,0xc
c00223ff:	57                   	push   edi
c0022400:	e8 b7 5e 00 00       	call   c00282bc <lrintf>
c0022405:	83 c4 10             	add    esp,0x10
c0022408:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002240b:	43                   	inc    ebx
c002240c:	e9 2b ff ff ff       	jmp    c002233c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022411:	83 c4 10             	add    esp,0x10
c0022414:	5b                   	pop    ebx
c0022415:	5e                   	pop    esi
c0022416:	5f                   	pop    edi
c0022417:	c3                   	ret    

c0022418 <SoundDevice::getAudio(int, float*, float*)>:
c0022418:	55                   	push   ebp
c0022419:	57                   	push   edi
c002241a:	56                   	push   esi
c002241b:	53                   	push   ebx
c002241c:	31 db                	xor    ebx,ebx
c002241e:	83 ec 20             	sub    esp,0x20
c0022421:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022425:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022429:	c1 e0 02             	shl    eax,0x2
c002242c:	50                   	push   eax
c002242d:	6a 00                	push   0x0
c002242f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022433:	e8 40 e3 fd ff       	call   c0000778 <memset>
c0022438:	83 c4 10             	add    esp,0x10
c002243b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002243f:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022446:	85 c0                	test   eax,eax
c0022448:	0f 84 d7 00 00 00    	je     c0022525 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002244e:	83 ec 0c             	sub    esp,0xc
c0022451:	50                   	push   eax
c0022452:	e8 a5 fb ff ff       	call   c0021ffc <SoundChannel::paused()>
c0022457:	83 c4 10             	add    esp,0x10
c002245a:	84 c0                	test   al,al
c002245c:	0f 85 c3 00 00 00    	jne    c0022525 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022462:	83 ec 0c             	sub    esp,0xc
c0022465:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002246c:	e8 19 fa ff ff       	call   c0021e8a <SoundChannel::getVolume()>
c0022471:	83 c4 10             	add    esp,0x10
c0022474:	85 c0                	test   eax,eax
c0022476:	0f 84 a9 00 00 00    	je     c0022525 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002247c:	83 ec 0c             	sub    esp,0xc
c002247f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022486:	e8 ff f9 ff ff       	call   c0021e8a <SoundChannel::getVolume()>
c002248b:	83 ec 0c             	sub    esp,0xc
c002248e:	50                   	push   eax
c002248f:	e8 c3 4a 00 00       	call   c0026f57 <__floatsisf>
c0022494:	59                   	pop    ecx
c0022495:	5d                   	pop    ebp
c0022496:	31 ed                	xor    ebp,ebp
c0022498:	68 00 00 c8 42       	push   0x42c80000
c002249d:	50                   	push   eax
c002249e:	e8 89 48 00 00       	call   c0026d2c <__divsf3>
c00224a3:	83 c4 10             	add    esp,0x10
c00224a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00224aa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00224ae:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00224b4:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00224b8:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00224bf:	e8 60 fb ff ff       	call   c0022024 <SoundChannel::unbuffer(float*, int, int)>
c00224c4:	83 c4 20             	add    esp,0x20
c00224c7:	89 c1                	mov    ecx,eax
c00224c9:	39 cd                	cmp    ebp,ecx
c00224cb:	7d 52                	jge    c002251f <SoundDevice::getAudio(int, float*, float*)+0x107>
c00224cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00224d1:	50                   	push   eax
c00224d2:	50                   	push   eax
c00224d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00224d7:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00224da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00224de:	e8 86 46 00 00       	call   c0026b69 <__mulsf3>
c00224e3:	5a                   	pop    edx
c00224e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00224e8:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00224ee:	e8 64 4a 00 00       	call   c0026f57 <__floatsisf>
c00224f3:	59                   	pop    ecx
c00224f4:	5a                   	pop    edx
c00224f5:	50                   	push   eax
c00224f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00224fa:	e8 2d 48 00 00       	call   c0026d2c <__divsf3>
c00224ff:	59                   	pop    ecx
c0022500:	5a                   	pop    edx
c0022501:	50                   	push   eax
c0022502:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022506:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022509:	e8 38 43 00 00       	call   c0026846 <__addsf3>
c002250e:	83 c4 10             	add    esp,0x10
c0022511:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022515:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022519:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002251c:	45                   	inc    ebp
c002251d:	eb aa                	jmp    c00224c9 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002251f:	39 cf                	cmp    edi,ecx
c0022521:	7e 02                	jle    c0022525 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022523:	89 cf                	mov    edi,ecx
c0022525:	43                   	inc    ebx
c0022526:	83 fb 20             	cmp    ebx,0x20
c0022529:	0f 85 10 ff ff ff    	jne    c002243f <SoundDevice::getAudio(int, float*, float*)+0x27>
c002252f:	83 c4 1c             	add    esp,0x1c
c0022532:	89 f8                	mov    eax,edi
c0022534:	5b                   	pop    ebx
c0022535:	5e                   	pop    esi
c0022536:	5f                   	pop    edi
c0022537:	5d                   	pop    ebp
c0022538:	c3                   	ret    
c0022539:	90                   	nop

c002253a <PCI::open(int, int, void*)>:
c002253a:	83 ec 18             	sub    esp,0x18
c002253d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022541:	8b 10                	mov    edx,DWORD PTR [eax]
c0022543:	50                   	push   eax
c0022544:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022547:	31 c0                	xor    eax,eax
c0022549:	83 c4 1c             	add    esp,0x1c
c002254c:	c3                   	ret    
c002254d:	90                   	nop

c002254e <PCI::close(int, int, void*)>:
c002254e:	31 c0                	xor    eax,eax
c0022550:	c3                   	ret    
c0022551:	90                   	nop

c0022552 <PCI::PCI()>:
c0022552:	83 ec 0c             	sub    esp,0xc
c0022555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022559:	83 ec 08             	sub    esp,0x8
c002255c:	68 84 c6 02 c0       	push   0xc002c684
c0022561:	50                   	push   eax
c0022562:	e8 e1 12 ff ff       	call   c0013848 <Bus::Bus(char const*)>
c0022567:	83 c4 10             	add    esp,0x10
c002256a:	ba f0 c6 02 c0       	mov    edx,0xc002c6f0
c002256f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022573:	89 10                	mov    DWORD PTR [eax],edx
c0022575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022579:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002257f:	0f b6 d0             	movzx  edx,al
c0022582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022586:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002258d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022591:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022597:	0f b6 d0             	movzx  edx,al
c002259a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002259e:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00225a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00225ad:	8d 50 01             	lea    edx,[eax+0x1]
c00225b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00225b4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00225ba:	0f b6 d0             	movzx  edx,al
c00225bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225c1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00225c5:	83 c9 c0             	or     ecx,0xffffffc0
c00225c8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00225cc:	90                   	nop
c00225cd:	83 c4 0c             	add    esp,0xc
c00225d0:	c3                   	ret    
c00225d1:	90                   	nop

c00225d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00225d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00225d6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00225db:	89 ca                	mov    edx,ecx
c00225dd:	c1 e0 10             	shl    eax,0x10
c00225e0:	81 e2 fc 00 00 00    	and    edx,0xfc
c00225e6:	09 d0                	or     eax,edx
c00225e8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00225ed:	c1 e2 08             	shl    edx,0x8
c00225f0:	09 d0                	or     eax,edx
c00225f2:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00225f7:	c1 e2 0b             	shl    edx,0xb
c00225fa:	09 d0                	or     eax,edx
c00225fc:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022601:	0d 00 00 00 80       	or     eax,0x80000000
c0022606:	ef                   	out    dx,eax
c0022607:	ba fc 0c 00 00       	mov    edx,0xcfc
c002260c:	ed                   	in     eax,dx
c002260d:	83 e1 02             	and    ecx,0x2
c0022610:	0f b6 c9             	movzx  ecx,cl
c0022613:	c1 e1 03             	shl    ecx,0x3
c0022616:	d3 e8                	shr    eax,cl
c0022618:	c3                   	ret    
c0022619:	90                   	nop

c002261a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002261a:	6a 00                	push   0x0
c002261c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022621:	50                   	push   eax
c0022622:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022627:	50                   	push   eax
c0022628:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002262d:	50                   	push   eax
c002262e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022632:	e8 9b ff ff ff       	call   c00225d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022637:	83 c4 14             	add    esp,0x14
c002263a:	c3                   	ret    
c002263b:	90                   	nop

c002263c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002263c:	6a 0e                	push   0xe
c002263e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022643:	50                   	push   eax
c0022644:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022649:	50                   	push   eax
c002264a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002264f:	50                   	push   eax
c0022650:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022654:	e8 79 ff ff ff       	call   c00225d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022659:	83 c4 14             	add    esp,0x14
c002265c:	0f b6 c0             	movzx  eax,al
c002265f:	c3                   	ret    

c0022660 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022660:	55                   	push   ebp
c0022661:	57                   	push   edi
c0022662:	56                   	push   esi
c0022663:	53                   	push   ebx
c0022664:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022669:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c002266e:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022673:	6a 0a                	push   0xa
c0022675:	56                   	push   esi
c0022676:	55                   	push   ebp
c0022677:	57                   	push   edi
c0022678:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002267c:	e8 51 ff ff ff       	call   c00225d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022681:	6a 0a                	push   0xa
c0022683:	89 c3                	mov    ebx,eax
c0022685:	56                   	push   esi
c0022686:	0f b6 db             	movzx  ebx,bl
c0022689:	55                   	push   ebp
c002268a:	57                   	push   edi
c002268b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002268f:	e8 3e ff ff ff       	call   c00225d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022694:	83 c4 28             	add    esp,0x28
c0022697:	25 00 ff 00 00       	and    eax,0xff00
c002269c:	09 d8                	or     eax,ebx
c002269e:	5b                   	pop    ebx
c002269f:	5e                   	pop    esi
c00226a0:	5f                   	pop    edi
c00226a1:	5d                   	pop    ebp
c00226a2:	c3                   	ret    
c00226a3:	90                   	nop

c00226a4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00226a4:	6a 08                	push   0x8
c00226a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226ab:	50                   	push   eax
c00226ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226b1:	50                   	push   eax
c00226b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226b7:	50                   	push   eax
c00226b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226bc:	e8 11 ff ff ff       	call   c00225d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226c1:	83 c4 14             	add    esp,0x14
c00226c4:	0f b6 c4             	movzx  eax,ah
c00226c7:	c3                   	ret    

c00226c8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00226c8:	6a 08                	push   0x8
c00226ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226cf:	50                   	push   eax
c00226d0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226d5:	50                   	push   eax
c00226d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226db:	50                   	push   eax
c00226dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226e0:	e8 ed fe ff ff       	call   c00225d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226e5:	83 c4 14             	add    esp,0x14
c00226e8:	c3                   	ret    
c00226e9:	90                   	nop

c00226ea <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00226ea:	6a 3c                	push   0x3c
c00226ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226f1:	50                   	push   eax
c00226f2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226f7:	50                   	push   eax
c00226f8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226fd:	50                   	push   eax
c00226fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022702:	e8 cb fe ff ff       	call   c00225d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022707:	83 c4 14             	add    esp,0x14
c002270a:	c3                   	ret    
c002270b:	90                   	nop

c002270c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002270c:	6a 18                	push   0x18
c002270e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022713:	50                   	push   eax
c0022714:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022719:	50                   	push   eax
c002271a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002271f:	50                   	push   eax
c0022720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022724:	e8 a9 fe ff ff       	call   c00225d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022729:	83 c4 14             	add    esp,0x14
c002272c:	0f b6 c4             	movzx  eax,ah
c002272f:	c3                   	ret    

c0022730 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022730:	55                   	push   ebp
c0022731:	57                   	push   edi
c0022732:	56                   	push   esi
c0022733:	53                   	push   ebx
c0022734:	50                   	push   eax
c0022735:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022739:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002273e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022743:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022748:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002274f:	8d 43 12             	lea    eax,[ebx+0x12]
c0022752:	83 c3 10             	add    ebx,0x10
c0022755:	0f b6 c0             	movzx  eax,al
c0022758:	0f b6 db             	movzx  ebx,bl
c002275b:	50                   	push   eax
c002275c:	51                   	push   ecx
c002275d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022761:	57                   	push   edi
c0022762:	55                   	push   ebp
c0022763:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022767:	e8 66 fe ff ff       	call   c00225d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002276c:	53                   	push   ebx
c002276d:	89 c6                	mov    esi,eax
c002276f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022773:	c1 e6 10             	shl    esi,0x10
c0022776:	51                   	push   ecx
c0022777:	57                   	push   edi
c0022778:	55                   	push   ebp
c0022779:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002277d:	e8 50 fe ff ff       	call   c00225d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022782:	83 c4 2c             	add    esp,0x2c
c0022785:	0f b7 c0             	movzx  eax,ax
c0022788:	5b                   	pop    ebx
c0022789:	09 f0                	or     eax,esi
c002278b:	5e                   	pop    esi
c002278c:	5f                   	pop    edi
c002278d:	5d                   	pop    ebp
c002278e:	c3                   	ret    
c002278f:	90                   	nop

c0022790 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022790:	53                   	push   ebx
c0022791:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022796:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002279b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002279f:	c1 e1 10             	shl    ecx,0x10
c00227a2:	25 fc 00 00 00       	and    eax,0xfc
c00227a7:	09 c1                	or     ecx,eax
c00227a9:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00227ae:	c1 e0 08             	shl    eax,0x8
c00227b1:	09 c1                	or     ecx,eax
c00227b3:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00227b8:	c1 e0 0b             	shl    eax,0xb
c00227bb:	09 c1                	or     ecx,eax
c00227bd:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00227c3:	89 c8                	mov    eax,ecx
c00227c5:	ef                   	out    dx,eax
c00227c6:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227cb:	ed                   	in     eax,dx
c00227cc:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00227d1:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00227d6:	74 0a                	je     c00227e2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c00227d8:	0f b7 d8             	movzx  ebx,ax
c00227db:	89 d0                	mov    eax,edx
c00227dd:	c1 e0 10             	shl    eax,0x10
c00227e0:	eb 05                	jmp    c00227e7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c00227e2:	66 31 c0             	xor    ax,ax
c00227e5:	89 d3                	mov    ebx,edx
c00227e7:	09 c3                	or     ebx,eax
c00227e9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227ee:	89 c8                	mov    eax,ecx
c00227f0:	ef                   	out    dx,eax
c00227f1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227f6:	89 d8                	mov    eax,ebx
c00227f8:	ef                   	out    dx,eax
c00227f9:	5b                   	pop    ebx
c00227fa:	c3                   	ret    
c00227fb:	90                   	nop

c00227fc <PCI::checkBus(unsigned char)>:
c00227fc:	56                   	push   esi
c00227fd:	53                   	push   ebx
c00227fe:	31 db                	xor    ebx,ebx
c0022800:	51                   	push   ecx
c0022801:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022806:	52                   	push   edx
c0022807:	53                   	push   ebx
c0022808:	43                   	inc    ebx
c0022809:	56                   	push   esi
c002280a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002280e:	e8 2b 03 00 00       	call   c0022b3e <PCI::checkDevice(unsigned char, unsigned char)>
c0022813:	83 c4 10             	add    esp,0x10
c0022816:	83 fb 20             	cmp    ebx,0x20
c0022819:	75 eb                	jne    c0022806 <PCI::checkBus(unsigned char)+0xa>
c002281b:	58                   	pop    eax
c002281c:	5b                   	pop    ebx
c002281d:	5e                   	pop    esi
c002281e:	c3                   	ret    
c002281f:	90                   	nop

c0022820 <PCI::foundDevice(PCIDeviceInfo)>:
c0022820:	55                   	push   ebp
c0022821:	57                   	push   edi
c0022822:	56                   	push   esi
c0022823:	53                   	push   ebx
c0022824:	83 ec 1c             	sub    esp,0x1c
c0022827:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002282b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022831:	0f 84 52 01 00 00    	je     c0022989 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022837:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002283b:	66 81 f9 06 04       	cmp    cx,0x406
c0022840:	75 2c                	jne    c002286e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022842:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022847:	50                   	push   eax
c0022848:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002284d:	50                   	push   eax
c002284e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022853:	50                   	push   eax
c0022854:	56                   	push   esi
c0022855:	e8 b2 fe ff ff       	call   c002270c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002285a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002285e:	0f b6 c0             	movzx  eax,al
c0022861:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022865:	83 c4 2c             	add    esp,0x2c
c0022868:	5b                   	pop    ebx
c0022869:	5e                   	pop    esi
c002286a:	5f                   	pop    edi
c002286b:	5d                   	pop    ebp
c002286c:	eb 8e                	jmp    c00227fc <PCI::checkBus(unsigned char)>
c002286e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022872:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022878:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002287c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022880:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022884:	88 d3                	mov    bl,dl
c0022886:	85 c0                	test   eax,eax
c0022888:	74 33                	je     c00228bd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002288a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002288d:	85 d2                	test   edx,edx
c002288f:	74 28                	je     c00228b9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022891:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022897:	31 ef                	xor    edi,ebp
c0022899:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002289f:	75 18                	jne    c00228b9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00228a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00228a5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00228ab:	75 0c                	jne    c00228b9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00228ad:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00228b3:	0f 84 d0 00 00 00    	je     c0022989 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00228b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00228bb:	eb c9                	jmp    c0022886 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00228bd:	66 81 f9 01 06       	cmp    cx,0x601
c00228c2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00228c6:	75 19                	jne    c00228e1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00228c8:	83 ec 0c             	sub    esp,0xc
c00228cb:	68 64 01 00 00       	push   0x164
c00228d0:	e8 6b cf fe ff       	call   c000f840 <malloc>
c00228d5:	89 c5                	mov    ebp,eax
c00228d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00228da:	e8 95 0f 00 00       	call   c0023874 <SATABus::SATABus()>
c00228df:	eb 1e                	jmp    c00228ff <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00228e1:	66 81 f9 01 01       	cmp    cx,0x101
c00228e6:	75 60                	jne    c0022948 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00228e8:	83 ec 0c             	sub    esp,0xc
c00228eb:	68 70 02 00 00       	push   0x270
c00228f0:	e8 4b cf fe ff       	call   c000f840 <malloc>
c00228f5:	89 c5                	mov    ebp,eax
c00228f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00228fa:	e8 03 03 00 00       	call   c0022c02 <IDE::IDE()>
c00228ff:	58                   	pop    eax
c0022900:	5a                   	pop    edx
c0022901:	55                   	push   ebp
c0022902:	56                   	push   esi
c0022903:	e8 cc 16 ff ff       	call   c0013fd4 <Device::addChild(Device*)>
c0022908:	83 ec 1c             	sub    esp,0x1c
c002290b:	b9 09 00 00 00       	mov    ecx,0x9
c0022910:	fc                   	cld    
c0022911:	89 e7                	mov    edi,esp
c0022913:	89 de                	mov    esi,ebx
c0022915:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022917:	55                   	push   ebp
c0022918:	e8 c1 15 ff ff       	call   c0013ede <Device::preOpenPCI(PCIDeviceInfo)>
c002291d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022920:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022924:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002292c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022934:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002293c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002293f:	83 c4 4c             	add    esp,0x4c
c0022942:	5b                   	pop    ebx
c0022943:	5e                   	pop    esi
c0022944:	5f                   	pop    edi
c0022945:	5d                   	pop    ebp
c0022946:	ff e0                	jmp    eax
c0022948:	83 ec 0c             	sub    esp,0xc
c002294b:	68 58 01 00 00       	push   0x158
c0022950:	e8 eb ce fe ff       	call   c000f840 <malloc>
c0022955:	89 c5                	mov    ebp,eax
c0022957:	58                   	pop    eax
c0022958:	5a                   	pop    edx
c0022959:	68 8c c6 02 c0       	push   0xc002c68c
c002295e:	55                   	push   ebp
c002295f:	e8 66 19 ff ff       	call   c00142ca <DriverlessDevice::DriverlessDevice(char const*)>
c0022964:	59                   	pop    ecx
c0022965:	5f                   	pop    edi
c0022966:	55                   	push   ebp
c0022967:	56                   	push   esi
c0022968:	e8 67 16 ff ff       	call   c0013fd4 <Device::addChild(Device*)>
c002296d:	b9 09 00 00 00       	mov    ecx,0x9
c0022972:	fc                   	cld    
c0022973:	89 df                	mov    edi,ebx
c0022975:	89 de                	mov    esi,ebx
c0022977:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022979:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c002297d:	83 c4 2c             	add    esp,0x2c
c0022980:	5b                   	pop    ebx
c0022981:	5e                   	pop    esi
c0022982:	5f                   	pop    edi
c0022983:	5d                   	pop    ebp
c0022984:	e9 55 15 ff ff       	jmp    c0013ede <Device::preOpenPCI(PCIDeviceInfo)>
c0022989:	83 c4 1c             	add    esp,0x1c
c002298c:	5b                   	pop    ebx
c002298d:	5e                   	pop    esi
c002298e:	5f                   	pop    edi
c002298f:	5d                   	pop    ebp
c0022990:	c3                   	ret    
c0022991:	90                   	nop

c0022992 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022992:	55                   	push   ebp
c0022993:	57                   	push   edi
c0022994:	56                   	push   esi
c0022995:	53                   	push   ebx
c0022996:	83 ec 5c             	sub    esp,0x5c
c0022999:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c002299d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00229a1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00229a5:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00229aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00229ae:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00229b2:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c00229b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00229bb:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00229c0:	6a 0c                	push   0xc
c00229c2:	55                   	push   ebp
c00229c3:	53                   	push   ebx
c00229c4:	57                   	push   edi
c00229c5:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00229cc:	e8 01 fc ff ff       	call   c00225d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229d1:	55                   	push   ebp
c00229d2:	53                   	push   ebx
c00229d3:	57                   	push   edi
c00229d4:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00229db:	e8 80 fc ff ff       	call   c0022660 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00229e0:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00229e5:	83 c4 24             	add    esp,0x24
c00229e8:	55                   	push   ebp
c00229e9:	53                   	push   ebx
c00229ea:	57                   	push   edi
c00229eb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00229ef:	e8 f6 fc ff ff       	call   c00226ea <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00229f4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00229f8:	6a 3c                	push   0x3c
c00229fa:	55                   	push   ebp
c00229fb:	53                   	push   ebx
c00229fc:	57                   	push   edi
c00229fd:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022a04:	e8 c9 fb ff ff       	call   c00225d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a09:	0f b6 c4             	movzx  eax,ah
c0022a0c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022a10:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022a14:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022a18:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0022a1d:	83 c4 24             	add    esp,0x24
c0022a20:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022a26:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022a2d:	74 6c                	je     c0022a9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022a2f:	31 f6                	xor    esi,esi
c0022a31:	8b 15 a8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0a8
c0022a37:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022a3d:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022a43:	7e 56                	jle    c0022a9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022a45:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022a48:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022a4f:	39 cb                	cmp    ebx,ecx
c0022a51:	75 45                	jne    c0022a98 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022a53:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022a5a:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022a5e:	75 38                	jne    c0022a98 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022a60:	83 ec 0c             	sub    esp,0xc
c0022a63:	68 a6 c6 02 c0       	push   0xc002c6a6
c0022a68:	e8 41 01 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0022a6d:	8b 15 a8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0a8
c0022a73:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022a79:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022a81:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022a85:	52                   	push   edx
c0022a86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022a8a:	53                   	push   ebx
c0022a8b:	68 cb c6 02 c0       	push   0xc002c6cb
c0022a90:	e8 19 01 ff ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0022a95:	83 c4 20             	add    esp,0x20
c0022a98:	46                   	inc    esi
c0022a99:	eb 96                	jmp    c0022a31 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022a9b:	31 d2                	xor    edx,edx
c0022a9d:	83 ec 0c             	sub    esp,0xc
c0022aa0:	55                   	push   ebp
c0022aa1:	53                   	push   ebx
c0022aa2:	57                   	push   edi
c0022aa3:	52                   	push   edx
c0022aa4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022aa8:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022aaf:	e8 7c fc ff ff       	call   c0022730 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab4:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022ab8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022abc:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022ac0:	42                   	inc    edx
c0022ac1:	83 c4 20             	add    esp,0x20
c0022ac4:	83 fa 06             	cmp    edx,0x6
c0022ac7:	75 d4                	jne    c0022a9d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022ac9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022acd:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022ad1:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022ad5:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022ad9:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022add:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022ae1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022ae6:	86 e0                	xchg   al,ah
c0022ae8:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022aed:	55                   	push   ebp
c0022aee:	53                   	push   ebx
c0022aef:	57                   	push   edi
c0022af0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022af4:	e8 ab fb ff ff       	call   c00226a4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022af9:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022afd:	55                   	push   ebp
c0022afe:	53                   	push   ebx
c0022aff:	57                   	push   edi
c0022b00:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022b07:	e8 0e fb ff ff       	call   c002261a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022b0c:	83 ec 0c             	sub    esp,0xc
c0022b0f:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022b14:	b9 09 00 00 00       	mov    ecx,0x9
c0022b19:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022b1d:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022b21:	fc                   	cld    
c0022b22:	89 e7                	mov    edi,esp
c0022b24:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b26:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022b2d:	e8 ee fc ff ff       	call   c0022820 <PCI::foundDevice(PCIDeviceInfo)>
c0022b32:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022b38:	5b                   	pop    ebx
c0022b39:	5e                   	pop    esi
c0022b3a:	5f                   	pop    edi
c0022b3b:	5d                   	pop    ebp
c0022b3c:	c3                   	ret    
c0022b3d:	90                   	nop

c0022b3e <PCI::checkDevice(unsigned char, unsigned char)>:
c0022b3e:	55                   	push   ebp
c0022b3f:	57                   	push   edi
c0022b40:	56                   	push   esi
c0022b41:	53                   	push   ebx
c0022b42:	83 ec 0c             	sub    esp,0xc
c0022b45:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022b49:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022b4e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b53:	6a 00                	push   0x0
c0022b55:	56                   	push   esi
c0022b56:	57                   	push   edi
c0022b57:	55                   	push   ebp
c0022b58:	e8 bd fa ff ff       	call   c002261a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022b5d:	6a 00                	push   0x0
c0022b5f:	56                   	push   esi
c0022b60:	57                   	push   edi
c0022b61:	55                   	push   ebp
c0022b62:	e8 2b fe ff ff       	call   c0022992 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022b67:	83 c4 20             	add    esp,0x20
c0022b6a:	6a 00                	push   0x0
c0022b6c:	56                   	push   esi
c0022b6d:	57                   	push   edi
c0022b6e:	55                   	push   ebp
c0022b6f:	e8 c8 fa ff ff       	call   c002263c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022b74:	83 c4 10             	add    esp,0x10
c0022b77:	84 c0                	test   al,al
c0022b79:	79 27                	jns    c0022ba2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022b7b:	bb 01 00 00 00       	mov    ebx,0x1
c0022b80:	53                   	push   ebx
c0022b81:	56                   	push   esi
c0022b82:	57                   	push   edi
c0022b83:	55                   	push   ebp
c0022b84:	e8 91 fa ff ff       	call   c002261a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022b89:	83 c4 10             	add    esp,0x10
c0022b8c:	66 40                	inc    ax
c0022b8e:	74 0c                	je     c0022b9c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022b90:	53                   	push   ebx
c0022b91:	56                   	push   esi
c0022b92:	57                   	push   edi
c0022b93:	55                   	push   ebp
c0022b94:	e8 f9 fd ff ff       	call   c0022992 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022b99:	83 c4 10             	add    esp,0x10
c0022b9c:	43                   	inc    ebx
c0022b9d:	83 fb 08             	cmp    ebx,0x8
c0022ba0:	75 de                	jne    c0022b80 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022ba2:	83 c4 0c             	add    esp,0xc
c0022ba5:	5b                   	pop    ebx
c0022ba6:	5e                   	pop    esi
c0022ba7:	5f                   	pop    edi
c0022ba8:	5d                   	pop    ebp
c0022ba9:	c3                   	ret    

c0022baa <PCI::detect()>:
c0022baa:	56                   	push   esi
c0022bab:	53                   	push   ebx
c0022bac:	53                   	push   ebx
c0022bad:	31 db                	xor    ebx,ebx
c0022baf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022bb3:	6a 00                	push   0x0
c0022bb5:	6a 00                	push   0x0
c0022bb7:	6a 00                	push   0x0
c0022bb9:	56                   	push   esi
c0022bba:	e8 7d fa ff ff       	call   c002263c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022bbf:	83 c4 10             	add    esp,0x10
c0022bc2:	a8 80                	test   al,0x80
c0022bc4:	75 21                	jne    c0022be7 <PCI::detect()+0x3d>
c0022bc6:	51                   	push   ecx
c0022bc7:	51                   	push   ecx
c0022bc8:	6a 00                	push   0x0
c0022bca:	56                   	push   esi
c0022bcb:	e8 2c fc ff ff       	call   c00227fc <PCI::checkBus(unsigned char)>
c0022bd0:	83 c4 10             	add    esp,0x10
c0022bd3:	eb 24                	jmp    c0022bf9 <PCI::detect()+0x4f>
c0022bd5:	52                   	push   edx
c0022bd6:	52                   	push   edx
c0022bd7:	53                   	push   ebx
c0022bd8:	43                   	inc    ebx
c0022bd9:	56                   	push   esi
c0022bda:	e8 1d fc ff ff       	call   c00227fc <PCI::checkBus(unsigned char)>
c0022bdf:	83 c4 10             	add    esp,0x10
c0022be2:	83 fb 08             	cmp    ebx,0x8
c0022be5:	74 12                	je     c0022bf9 <PCI::detect()+0x4f>
c0022be7:	53                   	push   ebx
c0022be8:	6a 00                	push   0x0
c0022bea:	6a 00                	push   0x0
c0022bec:	56                   	push   esi
c0022bed:	e8 28 fa ff ff       	call   c002261a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022bf2:	83 c4 10             	add    esp,0x10
c0022bf5:	66 40                	inc    ax
c0022bf7:	74 dc                	je     c0022bd5 <PCI::detect()+0x2b>
c0022bf9:	58                   	pop    eax
c0022bfa:	5b                   	pop    ebx
c0022bfb:	5e                   	pop    esi
c0022bfc:	c3                   	ret    
c0022bfd:	90                   	nop

c0022bfe <IDE::close(int, int, void*)>:
c0022bfe:	83 c8 ff             	or     eax,0xffffffff
c0022c01:	c3                   	ret    

c0022c02 <IDE::IDE()>:
c0022c02:	83 ec 0c             	sub    esp,0xc
c0022c05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c09:	83 ec 08             	sub    esp,0x8
c0022c0c:	68 14 c7 02 c0       	push   0xc002c714
c0022c11:	50                   	push   eax
c0022c12:	e8 49 17 ff ff       	call   c0014360 <HardDiskController::HardDiskController(char const*)>
c0022c17:	83 c4 10             	add    esp,0x10
c0022c1a:	ba 54 c9 02 c0       	mov    edx,0xc002c954
c0022c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c23:	89 10                	mov    DWORD PTR [eax],edx
c0022c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c29:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022c30:	90                   	nop
c0022c31:	83 c4 0c             	add    esp,0xc
c0022c34:	c3                   	ret    
c0022c35:	90                   	nop

c0022c36 <IDE::prepareInterrupt(unsigned char)>:
c0022c36:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022c3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022c3f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022c47:	c3                   	ret    

c0022c48 <selectDrive(unsigned char, unsigned char)>:
c0022c48:	c3                   	ret    
c0022c49:	90                   	nop

c0022c4a <IDE::getBase(unsigned char)>:
c0022c4a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022c4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c53:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022c5b:	c3                   	ret    

c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022c5c:	55                   	push   ebp
c0022c5d:	57                   	push   edi
c0022c5e:	56                   	push   esi
c0022c5f:	53                   	push   ebx
c0022c60:	83 ec 1c             	sub    esp,0x1c
c0022c63:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022c67:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022c6b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022c6e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022c72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022c76:	80 f9 03             	cmp    cl,0x3
c0022c79:	77 51                	ja     c0022ccc <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022c7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022c7f:	0f b6 f2             	movzx  esi,dl
c0022c82:	0f b6 db             	movzx  ebx,bl
c0022c85:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022c88:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022c8c:	83 ca 80             	or     edx,0xffffff80
c0022c8f:	0f b6 d2             	movzx  edx,dl
c0022c92:	52                   	push   edx
c0022c93:	6a 0c                	push   0xc
c0022c95:	56                   	push   esi
c0022c96:	57                   	push   edi
c0022c97:	e8 c0 ff ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c9c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022ca1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ca5:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022ca9:	ee                   	out    dx,al
c0022caa:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022caf:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022cb3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022cb7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022cbb:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022cc3:	83 c4 2c             	add    esp,0x2c
c0022cc6:	5b                   	pop    ebx
c0022cc7:	5e                   	pop    esi
c0022cc8:	5f                   	pop    edi
c0022cc9:	5d                   	pop    ebp
c0022cca:	eb 90                	jmp    c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ccc:	80 fb 07             	cmp    bl,0x7
c0022ccf:	77 12                	ja     c0022ce3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022cd1:	0f b6 d2             	movzx  edx,dl
c0022cd4:	0f b6 db             	movzx  ebx,bl
c0022cd7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022cdf:	89 da                	mov    edx,ebx
c0022ce1:	eb 2f                	jmp    c0022d12 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022ce3:	80 fb 0d             	cmp    bl,0xd
c0022ce6:	77 13                	ja     c0022cfb <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ce8:	0f b6 d2             	movzx  edx,dl
c0022ceb:	0f b6 db             	movzx  ebx,bl
c0022cee:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022cf5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022cf9:	eb 17                	jmp    c0022d12 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022cfb:	80 fb 15             	cmp    bl,0x15
c0022cfe:	77 13                	ja     c0022d13 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022d00:	0f b6 d2             	movzx  edx,dl
c0022d03:	0f b6 db             	movzx  ebx,bl
c0022d06:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022d0e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022d12:	ee                   	out    dx,al
c0022d13:	83 c4 1c             	add    esp,0x1c
c0022d16:	5b                   	pop    ebx
c0022d17:	5e                   	pop    esi
c0022d18:	5f                   	pop    edi
c0022d19:	5d                   	pop    ebp
c0022d1a:	c3                   	ret    
c0022d1b:	90                   	nop

c0022d1c <IDE::read(unsigned char, unsigned char)>:
c0022d1c:	55                   	push   ebp
c0022d1d:	57                   	push   edi
c0022d1e:	56                   	push   esi
c0022d1f:	53                   	push   ebx
c0022d20:	83 ec 1c             	sub    esp,0x1c
c0022d23:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022d27:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022d2b:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022d2e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022d32:	3c 03                	cmp    al,0x3
c0022d34:	77 43                	ja     c0022d79 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022d36:	0f b6 f2             	movzx  esi,dl
c0022d39:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022d3c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022d40:	83 c8 80             	or     eax,0xffffff80
c0022d43:	0f b6 c0             	movzx  eax,al
c0022d46:	50                   	push   eax
c0022d47:	6a 0c                	push   0xc
c0022d49:	56                   	push   esi
c0022d4a:	57                   	push   edi
c0022d4b:	e8 0c ff ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d50:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022d55:	0f b6 c3             	movzx  eax,bl
c0022d58:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022d5c:	ec                   	in     al,dx
c0022d5d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022d61:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022d66:	52                   	push   edx
c0022d67:	6a 0c                	push   0xc
c0022d69:	56                   	push   esi
c0022d6a:	57                   	push   edi
c0022d6b:	e8 ec fe ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d70:	83 c4 20             	add    esp,0x20
c0022d73:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022d77:	eb 49                	jmp    c0022dc2 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022d79:	80 fb 07             	cmp    bl,0x7
c0022d7c:	77 12                	ja     c0022d90 <IDE::read(unsigned char, unsigned char)+0x74>
c0022d7e:	0f b6 d2             	movzx  edx,dl
c0022d81:	0f b6 c3             	movzx  eax,bl
c0022d84:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022d8c:	89 c2                	mov    edx,eax
c0022d8e:	eb 31                	jmp    c0022dc1 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022d90:	80 fb 0d             	cmp    bl,0xd
c0022d93:	77 13                	ja     c0022da8 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022d95:	0f b6 d2             	movzx  edx,dl
c0022d98:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022d9f:	0f b6 d3             	movzx  edx,bl
c0022da2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022da6:	eb 19                	jmp    c0022dc1 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022da8:	31 c0                	xor    eax,eax
c0022daa:	80 fb 15             	cmp    bl,0x15
c0022dad:	77 13                	ja     c0022dc2 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022daf:	0f b6 d2             	movzx  edx,dl
c0022db2:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022dba:	0f b6 d3             	movzx  edx,bl
c0022dbd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022dc1:	ec                   	in     al,dx
c0022dc2:	83 c4 1c             	add    esp,0x1c
c0022dc5:	5b                   	pop    ebx
c0022dc6:	5e                   	pop    esi
c0022dc7:	5f                   	pop    edi
c0022dc8:	5d                   	pop    ebp
c0022dc9:	c3                   	ret    

c0022dca <IDE::waitInterrupt(unsigned char)>:
c0022dca:	55                   	push   ebp
c0022dcb:	57                   	push   edi
c0022dcc:	56                   	push   esi
c0022dcd:	53                   	push   ebx
c0022dce:	31 db                	xor    ebx,ebx
c0022dd0:	83 ec 0c             	sub    esp,0xc
c0022dd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022dd7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022ddc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022de4:	89 e8                	mov    eax,ebp
c0022de6:	84 c0                	test   al,al
c0022de8:	75 34                	jne    c0022e1e <IDE::waitInterrupt(unsigned char)+0x54>
c0022dea:	52                   	push   edx
c0022deb:	6a 0c                	push   0xc
c0022ded:	56                   	push   esi
c0022dee:	57                   	push   edi
c0022def:	e8 28 ff ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0022df4:	83 c4 10             	add    esp,0x10
c0022df7:	a8 01                	test   al,0x1
c0022df9:	75 2b                	jne    c0022e26 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022dfb:	f6 c3 04             	test   bl,0x4
c0022dfe:	75 16                	jne    c0022e16 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022e00:	83 fb 32             	cmp    ebx,0x32
c0022e03:	7e 11                	jle    c0022e16 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022e05:	50                   	push   eax
c0022e06:	50                   	push   eax
c0022e07:	6a 00                	push   0x0
c0022e09:	68 80 96 98 00       	push   0x989680
c0022e0e:	e8 8b b1 ff ff       	call   c001df9e <nanoSleep(unsigned long long)>
c0022e13:	83 c4 10             	add    esp,0x10
c0022e16:	83 fb 3c             	cmp    ebx,0x3c
c0022e19:	74 0b                	je     c0022e26 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022e1b:	43                   	inc    ebx
c0022e1c:	eb be                	jmp    c0022ddc <IDE::waitInterrupt(unsigned char)+0x12>
c0022e1e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022e26:	83 c4 0c             	add    esp,0xc
c0022e29:	89 e8                	mov    eax,ebp
c0022e2b:	5b                   	pop    ebx
c0022e2c:	5e                   	pop    esi
c0022e2d:	5f                   	pop    edi
c0022e2e:	5d                   	pop    ebp
c0022e2f:	c3                   	ret    

c0022e30 <ideChannel0IRQHandler(regs*, void*)>:
c0022e30:	83 ec 10             	sub    esp,0x10
c0022e33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e37:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022e3e:	6a 07                	push   0x7
c0022e40:	6a 00                	push   0x0
c0022e42:	50                   	push   eax
c0022e43:	e8 d4 fe ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0022e48:	83 c4 1c             	add    esp,0x1c
c0022e4b:	c3                   	ret    

c0022e4c <ideChannel1IRQHandler(regs*, void*)>:
c0022e4c:	83 ec 10             	sub    esp,0x10
c0022e4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e53:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022e5a:	6a 07                	push   0x7
c0022e5c:	6a 01                	push   0x1
c0022e5e:	50                   	push   eax
c0022e5f:	e8 b8 fe ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0022e64:	83 c4 1c             	add    esp,0x1c
c0022e67:	c3                   	ret    

c0022e68 <IDE::enableIRQs(unsigned char, bool)>:
c0022e68:	57                   	push   edi
c0022e69:	56                   	push   esi
c0022e6a:	be 04 00 00 00       	mov    esi,0x4
c0022e6f:	53                   	push   ebx
c0022e70:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022e75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022e79:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022e7e:	0f 94 c0             	sete   al
c0022e81:	d1 e0                	shl    eax,1
c0022e83:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022e8a:	0f b6 c0             	movzx  eax,al
c0022e8d:	50                   	push   eax
c0022e8e:	6a 0c                	push   0xc
c0022e90:	57                   	push   edi
c0022e91:	53                   	push   ebx
c0022e92:	e8 c5 fd ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e97:	83 c4 10             	add    esp,0x10
c0022e9a:	50                   	push   eax
c0022e9b:	6a 0c                	push   0xc
c0022e9d:	57                   	push   edi
c0022e9e:	53                   	push   ebx
c0022e9f:	e8 78 fe ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0022ea4:	83 c4 10             	add    esp,0x10
c0022ea7:	4e                   	dec    esi
c0022ea8:	75 f0                	jne    c0022e9a <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022eaa:	5b                   	pop    ebx
c0022eab:	5e                   	pop    esi
c0022eac:	5f                   	pop    edi
c0022ead:	c3                   	ret    

c0022eae <IDE::open(int, int, void*)>:
c0022eae:	55                   	push   ebp
c0022eaf:	57                   	push   edi
c0022eb0:	56                   	push   esi
c0022eb1:	53                   	push   ebx
c0022eb2:	83 ec 1c             	sub    esp,0x1c
c0022eb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022eb9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022ec2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022ecb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022ed2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022ed9:	0f 85 b0 02 00 00    	jne    c002318f <IDE::open(int, int, void*)+0x2e1>
c0022edf:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022ee5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022ee9:	83 e0 7f             	and    eax,0x7f
c0022eec:	3c 05                	cmp    al,0x5
c0022eee:	74 04                	je     c0022ef4 <IDE::open(int, int, void*)+0x46>
c0022ef0:	3c 0f                	cmp    al,0xf
c0022ef2:	75 32                	jne    c0022f26 <IDE::open(int, int, void*)+0x78>
c0022ef4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022efa:	83 e0 fc             	and    eax,0xfffffffc
c0022efd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022f04:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022f0a:	83 e0 fc             	and    eax,0xfffffffc
c0022f0d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022f14:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022f1a:	83 e0 fc             	and    eax,0xfffffffc
c0022f1d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022f24:	eb 14                	jmp    c0022f3a <IDE::open(int, int, void*)+0x8c>
c0022f26:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022f30:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022f3a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022f41:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022f48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022f4c:	89 c6                	mov    esi,eax
c0022f4e:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022f53:	c1 e6 10             	shl    esi,0x10
c0022f56:	89 e8                	mov    eax,ebp
c0022f58:	89 fa                	mov    edx,edi
c0022f5a:	c1 e0 0b             	shl    eax,0xb
c0022f5d:	09 f0                	or     eax,esi
c0022f5f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022f66:	c1 e6 08             	shl    esi,0x8
c0022f69:	09 c6                	or     esi,eax
c0022f6b:	89 f0                	mov    eax,esi
c0022f6d:	0d 08 00 00 80       	or     eax,0x80000008
c0022f72:	ef                   	out    dx,eax
c0022f73:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022f78:	89 ca                	mov    edx,ecx
c0022f7a:	ed                   	in     eax,dx
c0022f7b:	c1 e8 10             	shr    eax,0x10
c0022f7e:	3d ff ff 00 00       	cmp    eax,0xffff
c0022f83:	0f 84 f5 00 00 00    	je     c002307e <IDE::open(int, int, void*)+0x1d0>
c0022f89:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022f8f:	89 fa                	mov    edx,edi
c0022f91:	89 f0                	mov    eax,esi
c0022f93:	ef                   	out    dx,eax
c0022f94:	b0 fe                	mov    al,0xfe
c0022f96:	89 ca                	mov    edx,ecx
c0022f98:	ee                   	out    dx,al
c0022f99:	89 f0                	mov    eax,esi
c0022f9b:	89 fa                	mov    edx,edi
c0022f9d:	ef                   	out    dx,eax
c0022f9e:	89 ca                	mov    edx,ecx
c0022fa0:	ed                   	in     eax,dx
c0022fa1:	3c fe                	cmp    al,0xfe
c0022fa3:	0f 85 a9 00 00 00    	jne    c0023052 <IDE::open(int, int, void*)+0x1a4>
c0022fa9:	8b 15 a8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0a8
c0022faf:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022fb6:	74 33                	je     c0022feb <IDE::open(int, int, void*)+0x13d>
c0022fb8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022fbe:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022fc2:	40                   	inc    eax
c0022fc3:	83 ec 0c             	sub    esp,0xc
c0022fc6:	0f b6 c0             	movzx  eax,al
c0022fc9:	50                   	push   eax
c0022fca:	55                   	push   ebp
c0022fcb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022fcf:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022fd5:	51                   	push   ecx
c0022fd6:	e8 a7 4e ff ff       	call   c0017e82 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022fdb:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022fe0:	83 c4 1c             	add    esp,0x1c
c0022fe3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022fe9:	eb 0a                	jmp    c0022ff5 <IDE::open(int, int, void*)+0x147>
c0022feb:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022ff5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022ffc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023003:	c1 e1 10             	shl    ecx,0x10
c0023006:	c1 e0 08             	shl    eax,0x8
c0023009:	bf f8 0c 00 00       	mov    edi,0xcf8
c002300e:	09 c1                	or     ecx,eax
c0023010:	89 fa                	mov    edx,edi
c0023012:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023019:	c1 e0 0b             	shl    eax,0xb
c002301c:	09 c1                	or     ecx,eax
c002301e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023024:	89 c8                	mov    eax,ecx
c0023026:	ef                   	out    dx,eax
c0023027:	be fc 0c 00 00       	mov    esi,0xcfc
c002302c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023032:	89 f2                	mov    edx,esi
c0023034:	ee                   	out    dx,al
c0023035:	89 c8                	mov    eax,ecx
c0023037:	89 fa                	mov    edx,edi
c0023039:	ef                   	out    dx,eax
c002303a:	89 f2                	mov    edx,esi
c002303c:	ed                   	in     eax,dx
c002303d:	0f b6 c0             	movzx  eax,al
c0023040:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023046:	74 46                	je     c002308e <IDE::open(int, int, void*)+0x1e0>
c0023048:	83 ec 0c             	sub    esp,0xc
c002304b:	68 2c c7 02 c0       	push   0xc002c72c
c0023050:	eb 34                	jmp    c0023086 <IDE::open(int, int, void*)+0x1d8>
c0023052:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002305b:	75 17                	jne    c0023074 <IDE::open(int, int, void*)+0x1c6>
c002305d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023062:	74 07                	je     c002306b <IDE::open(int, int, void*)+0x1bd>
c0023064:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023069:	75 09                	jne    c0023074 <IDE::open(int, int, void*)+0x1c6>
c002306b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023072:	eb 1a                	jmp    c002308e <IDE::open(int, int, void*)+0x1e0>
c0023074:	83 ec 0c             	sub    esp,0xc
c0023077:	68 34 c7 02 c0       	push   0xc002c734
c002307c:	eb 08                	jmp    c0023086 <IDE::open(int, int, void*)+0x1d8>
c002307e:	83 ec 0c             	sub    esp,0xc
c0023081:	68 65 c7 02 c0       	push   0xc002c765
c0023086:	e8 9e 71 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c002308b:	83 c4 10             	add    esp,0x10
c002308e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023095:	79 1a                	jns    c00230b1 <IDE::open(int, int, void*)+0x203>
c0023097:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002309d:	83 e0 fc             	and    eax,0xfffffffc
c00230a0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00230a7:	83 c0 08             	add    eax,0x8
c00230aa:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00230b1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00230b7:	89 c2                	mov    edx,eax
c00230b9:	83 e2 0f             	and    edx,0xf
c00230bc:	66 83 fa 08          	cmp    dx,0x8
c00230c0:	75 0a                	jne    c00230cc <IDE::open(int, int, void*)+0x21e>
c00230c2:	83 e8 02             	sub    eax,0x2
c00230c5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00230cc:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00230d2:	89 c2                	mov    edx,eax
c00230d4:	83 e2 0f             	and    edx,0xf
c00230d7:	66 83 fa 08          	cmp    dx,0x8
c00230db:	75 0a                	jne    c00230e7 <IDE::open(int, int, void*)+0x239>
c00230dd:	83 e8 02             	sub    eax,0x2
c00230e0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00230e7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00230ee:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00230f5:	89 d0                	mov    eax,edx
c00230f7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00230fa:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00230fe:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023102:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023105:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002310a:	0f b6 c9             	movzx  ecx,cl
c002310d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023114:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023117:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002311b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002311f:	8d 50 02             	lea    edx,[eax+0x2]
c0023122:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023127:	0f b6 d2             	movzx  edx,dl
c002312a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023130:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023133:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023137:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002313b:	8d 48 03             	lea    ecx,[eax+0x3]
c002313e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023143:	0f b6 c9             	movzx  ecx,cl
c0023146:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002314c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002314f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023153:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023157:	8d 50 04             	lea    edx,[eax+0x4]
c002315a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023160:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023165:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002316c:	66 85 f6             	test   si,si
c002316f:	74 3e                	je     c00231af <IDE::open(int, int, void*)+0x301>
c0023171:	0f b6 d2             	movzx  edx,dl
c0023174:	83 c0 05             	add    eax,0x5
c0023177:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002317a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002317e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023182:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023188:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002318d:	eb 20                	jmp    c00231af <IDE::open(int, int, void*)+0x301>
c002318f:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023199:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00231a3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00231aa:	e9 02 ff ff ff       	jmp    c00230b1 <IDE::open(int, int, void*)+0x203>
c00231af:	52                   	push   edx
c00231b0:	52                   	push   edx
c00231b1:	6a 00                	push   0x0
c00231b3:	53                   	push   ebx
c00231b4:	e8 7d fa ff ff       	call   c0022c36 <IDE::prepareInterrupt(unsigned char)>
c00231b9:	59                   	pop    ecx
c00231ba:	5e                   	pop    esi
c00231bb:	6a 01                	push   0x1
c00231bd:	53                   	push   ebx
c00231be:	e8 73 fa ff ff       	call   c0022c36 <IDE::prepareInterrupt(unsigned char)>
c00231c3:	83 c4 0c             	add    esp,0xc
c00231c6:	6a 00                	push   0x0
c00231c8:	6a 00                	push   0x0
c00231ca:	53                   	push   ebx
c00231cb:	e8 98 fc ff ff       	call   c0022e68 <IDE::enableIRQs(unsigned char, bool)>
c00231d0:	83 c4 0c             	add    esp,0xc
c00231d3:	6a 00                	push   0x0
c00231d5:	6a 01                	push   0x1
c00231d7:	53                   	push   ebx
c00231d8:	e8 8b fc ff ff       	call   c0022e68 <IDE::enableIRQs(unsigned char, bool)>
c00231dd:	83 c4 10             	add    esp,0x10
c00231e0:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00231e7:	74 40                	je     c0023229 <IDE::open(int, int, void*)+0x37b>
c00231e9:	83 ec 0c             	sub    esp,0xc
c00231ec:	68 8f c7 02 c0       	push   0xc002c78f
c00231f1:	e8 b8 f9 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00231f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00231f9:	6a 01                	push   0x1
c00231fb:	68 30 2e 02 c0       	push   0xc0022e30
c0023200:	6a 0e                	push   0xe
c0023202:	53                   	push   ebx
c0023203:	e8 50 0d ff ff       	call   c0013f58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023208:	83 c4 14             	add    esp,0x14
c002320b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023211:	53                   	push   ebx
c0023212:	6a 01                	push   0x1
c0023214:	68 4c 2e 02 c0       	push   0xc0022e4c
c0023219:	6a 0f                	push   0xf
c002321b:	53                   	push   ebx
c002321c:	e8 37 0d ff ff       	call   c0013f58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023221:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023227:	eb 4a                	jmp    c0023273 <IDE::open(int, int, void*)+0x3c5>
c0023229:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023233:	50                   	push   eax
c0023234:	6a 0f                	push   0xf
c0023236:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002323c:	68 ab c7 02 c0       	push   0xc002c7ab
c0023241:	e8 68 f9 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0023246:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023249:	6a 00                	push   0x0
c002324b:	68 30 2e 02 c0       	push   0xc0022e30
c0023250:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023256:	53                   	push   ebx
c0023257:	e8 fc 0c ff ff       	call   c0013f58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002325c:	83 c4 14             	add    esp,0x14
c002325f:	53                   	push   ebx
c0023260:	6a 00                	push   0x0
c0023262:	68 4c 2e 02 c0       	push   0xc0022e4c
c0023267:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002326d:	53                   	push   ebx
c002326e:	e8 e5 0c ff ff       	call   c0013f58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023273:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023275:	83 c4 20             	add    esp,0x20
c0023278:	83 ec 0c             	sub    esp,0xc
c002327b:	53                   	push   ebx
c002327c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002327f:	83 c4 0c             	add    esp,0xc
c0023282:	6a 07                	push   0x7
c0023284:	6a 00                	push   0x0
c0023286:	53                   	push   ebx
c0023287:	e8 90 fa ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c002328c:	83 c4 0c             	add    esp,0xc
c002328f:	6a 07                	push   0x7
c0023291:	6a 01                	push   0x1
c0023293:	53                   	push   ebx
c0023294:	e8 83 fa ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0023299:	83 c4 0c             	add    esp,0xc
c002329c:	6a 01                	push   0x1
c002329e:	6a 00                	push   0x0
c00232a0:	53                   	push   ebx
c00232a1:	e8 c2 fb ff ff       	call   c0022e68 <IDE::enableIRQs(unsigned char, bool)>
c00232a6:	83 c4 0c             	add    esp,0xc
c00232a9:	6a 01                	push   0x1
c00232ab:	6a 01                	push   0x1
c00232ad:	53                   	push   ebx
c00232ae:	e8 b5 fb ff ff       	call   c0022e68 <IDE::enableIRQs(unsigned char, bool)>
c00232b3:	83 c4 2c             	add    esp,0x2c
c00232b6:	31 c0                	xor    eax,eax
c00232b8:	5b                   	pop    ebx
c00232b9:	5e                   	pop    esi
c00232ba:	5f                   	pop    edi
c00232bb:	5d                   	pop    ebp
c00232bc:	c3                   	ret    
c00232bd:	90                   	nop

c00232be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00232be:	55                   	push   ebp
c00232bf:	57                   	push   edi
c00232c0:	56                   	push   esi
c00232c1:	53                   	push   ebx
c00232c2:	83 ec 1c             	sub    esp,0x1c
c00232c5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00232c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00232cd:	8d 50 f8             	lea    edx,[eax-0x8]
c00232d0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00232d4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00232d8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00232dc:	80 fa 03             	cmp    dl,0x3
c00232df:	77 5d                	ja     c002333e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00232e1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00232e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00232e9:	0f b6 db             	movzx  ebx,bl
c00232ec:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00232ef:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00232f3:	83 ca 80             	or     edx,0xffffff80
c00232f6:	0f b6 d2             	movzx  edx,dl
c00232f9:	52                   	push   edx
c00232fa:	6a 0c                	push   0xc
c00232fc:	53                   	push   ebx
c00232fd:	56                   	push   esi
c00232fe:	e8 59 f9 ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023303:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023308:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002330c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023310:	0f b6 c0             	movzx  eax,al
c0023313:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023317:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023319:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002331e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023322:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023326:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002332a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023332:	83 c4 2c             	add    esp,0x2c
c0023335:	5b                   	pop    ebx
c0023336:	5e                   	pop    esi
c0023337:	5f                   	pop    edi
c0023338:	5d                   	pop    ebp
c0023339:	e9 1e f9 ff ff       	jmp    c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002333e:	3c 07                	cmp    al,0x7
c0023340:	77 10                	ja     c0023352 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023342:	0f b6 db             	movzx  ebx,bl
c0023345:	0f b6 d0             	movzx  edx,al
c0023348:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023350:	eb 2d                	jmp    c002337f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023352:	3c 0d                	cmp    al,0xd
c0023354:	77 13                	ja     c0023369 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023356:	0f b6 db             	movzx  ebx,bl
c0023359:	0f b6 c0             	movzx  eax,al
c002335c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023363:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023367:	eb 16                	jmp    c002337f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023369:	3c 15                	cmp    al,0x15
c002336b:	77 14                	ja     c0023381 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002336d:	0f b6 db             	movzx  ebx,bl
c0023370:	0f b6 c0             	movzx  eax,al
c0023373:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002337b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002337f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023381:	83 c4 1c             	add    esp,0x1c
c0023384:	5b                   	pop    ebx
c0023385:	5e                   	pop    esi
c0023386:	5f                   	pop    edi
c0023387:	5d                   	pop    ebp
c0023388:	c3                   	ret    
c0023389:	90                   	nop

c002338a <IDE::detect()>:
c002338a:	55                   	push   ebp
c002338b:	57                   	push   edi
c002338c:	56                   	push   esi
c002338d:	53                   	push   ebx
c002338e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023394:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002339b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00233a2:	0f 85 be 02 00 00    	jne    c0023666 <IDE::detect()+0x2dc>
c00233a8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00233af:	31 f6                	xor    esi,esi
c00233b1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00233b9:	31 ed                	xor    ebp,ebp
c00233bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233bf:	c1 e0 06             	shl    eax,0x6
c00233c2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00233ca:	89 e8                	mov    eax,ebp
c00233cc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00233d0:	c1 e0 04             	shl    eax,0x4
c00233d3:	83 c8 a0             	or     eax,0xffffffa0
c00233d6:	0f b6 c0             	movzx  eax,al
c00233d9:	50                   	push   eax
c00233da:	6a 06                	push   0x6
c00233dc:	56                   	push   esi
c00233dd:	53                   	push   ebx
c00233de:	e8 79 f8 ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233e3:	83 c4 0c             	add    esp,0xc
c00233e6:	6a 0c                	push   0xc
c00233e8:	56                   	push   esi
c00233e9:	53                   	push   ebx
c00233ea:	e8 2d f9 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c00233ef:	83 c4 0c             	add    esp,0xc
c00233f2:	6a 0c                	push   0xc
c00233f4:	56                   	push   esi
c00233f5:	53                   	push   ebx
c00233f6:	e8 21 f9 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c00233fb:	83 c4 0c             	add    esp,0xc
c00233fe:	6a 0c                	push   0xc
c0023400:	56                   	push   esi
c0023401:	53                   	push   ebx
c0023402:	e8 15 f9 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0023407:	83 c4 0c             	add    esp,0xc
c002340a:	6a 0c                	push   0xc
c002340c:	56                   	push   esi
c002340d:	53                   	push   ebx
c002340e:	e8 09 f9 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0023413:	68 ec 00 00 00       	push   0xec
c0023418:	6a 07                	push   0x7
c002341a:	56                   	push   esi
c002341b:	53                   	push   ebx
c002341c:	e8 3b f8 ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023421:	83 c4 1c             	add    esp,0x1c
c0023424:	6a 0c                	push   0xc
c0023426:	56                   	push   esi
c0023427:	53                   	push   ebx
c0023428:	e8 ef f8 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c002342d:	83 c4 0c             	add    esp,0xc
c0023430:	6a 0c                	push   0xc
c0023432:	56                   	push   esi
c0023433:	53                   	push   ebx
c0023434:	e8 e3 f8 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0023439:	83 c4 0c             	add    esp,0xc
c002343c:	6a 0c                	push   0xc
c002343e:	56                   	push   esi
c002343f:	53                   	push   ebx
c0023440:	e8 d7 f8 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0023445:	83 c4 0c             	add    esp,0xc
c0023448:	6a 0c                	push   0xc
c002344a:	56                   	push   esi
c002344b:	53                   	push   ebx
c002344c:	e8 cb f8 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0023451:	83 c4 0c             	add    esp,0xc
c0023454:	6a 0c                	push   0xc
c0023456:	56                   	push   esi
c0023457:	53                   	push   ebx
c0023458:	e8 bf f8 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c002345d:	83 c4 10             	add    esp,0x10
c0023460:	84 c0                	test   al,al
c0023462:	0f 84 8b 01 00 00    	je     c00235f3 <IDE::detect()+0x269>
c0023468:	31 ff                	xor    edi,edi
c002346a:	50                   	push   eax
c002346b:	6a 0c                	push   0xc
c002346d:	56                   	push   esi
c002346e:	53                   	push   ebx
c002346f:	e8 a8 f8 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0023474:	83 c4 10             	add    esp,0x10
c0023477:	a8 01                	test   al,0x1
c0023479:	0f 85 8e 01 00 00    	jne    c002360d <IDE::detect()+0x283>
c002347f:	84 c0                	test   al,al
c0023481:	78 04                	js     c0023487 <IDE::detect()+0xfd>
c0023483:	a8 08                	test   al,0x8
c0023485:	75 27                	jne    c00234ae <IDE::detect()+0x124>
c0023487:	47                   	inc    edi
c0023488:	81 ff 17 01 00 00    	cmp    edi,0x117
c002348e:	7e da                	jle    c002346a <IDE::detect()+0xe0>
c0023490:	50                   	push   eax
c0023491:	50                   	push   eax
c0023492:	6a 00                	push   0x0
c0023494:	68 40 4b 4c 00       	push   0x4c4b40
c0023499:	e8 00 ab ff ff       	call   c001df9e <nanoSleep(unsigned long long)>
c002349e:	83 c4 10             	add    esp,0x10
c00234a1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00234a7:	75 c1                	jne    c002346a <IDE::detect()+0xe0>
c00234a9:	e9 5f 01 00 00       	jmp    c002360d <IDE::detect()+0x283>
c00234ae:	31 c9                	xor    ecx,ecx
c00234b0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00234b4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00234b8:	83 ec 0c             	sub    esp,0xc
c00234bb:	68 80 00 00 00       	push   0x80
c00234c0:	57                   	push   edi
c00234c1:	6a 00                	push   0x0
c00234c3:	56                   	push   esi
c00234c4:	53                   	push   ebx
c00234c5:	e8 f4 fd ff ff       	call   c00232be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00234ca:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00234cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00234d3:	89 d1                	mov    ecx,edx
c00234d5:	c1 e0 06             	shl    eax,0x6
c00234d8:	01 d8                	add    eax,ebx
c00234da:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00234e1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00234e8:	89 f2                	mov    edx,esi
c00234ea:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00234f0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00234f4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00234fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00234fe:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023505:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002350d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023514:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002351c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023522:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023529:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002352f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023533:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023537:	83 c4 20             	add    esp,0x20
c002353a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002353d:	83 c0 02             	add    eax,0x2
c0023540:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023546:	83 c7 02             	add    edi,0x2
c0023549:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002354c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023552:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023556:	75 e2                	jne    c002353a <IDE::detect()+0x1b0>
c0023558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002355c:	c1 e0 06             	shl    eax,0x6
c002355f:	01 d8                	add    eax,ebx
c0023561:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023567:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002356e:	66 c1 ea 09          	shr    dx,0x9
c0023572:	83 e2 01             	and    edx,0x1
c0023575:	84 c9                	test   cl,cl
c0023577:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002357d:	75 2f                	jne    c00235ae <IDE::detect()+0x224>
c002357f:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023585:	85 c0                	test   eax,eax
c0023587:	74 66                	je     c00235ef <IDE::detect()+0x265>
c0023589:	50                   	push   eax
c002358a:	55                   	push   ebp
c002358b:	56                   	push   esi
c002358c:	68 c7 c7 02 c0       	push   0xc002c7c7
c0023591:	e8 18 f6 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0023596:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002359d:	e8 9e c2 fe ff       	call   c000f840 <malloc>
c00235a2:	89 c7                	mov    edi,eax
c00235a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00235a7:	e8 78 06 00 00       	call   c0023c24 <ATA::ATA()>
c00235ac:	eb 28                	jmp    c00235d6 <IDE::detect()+0x24c>
c00235ae:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00235b4:	55                   	push   ebp
c00235b5:	56                   	push   esi
c00235b6:	68 f6 c7 02 c0       	push   0xc002c7f6
c00235bb:	e8 ee f5 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00235c0:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00235c7:	e8 74 c2 fe ff       	call   c000f840 <malloc>
c00235cc:	89 c7                	mov    edi,eax
c00235ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00235d1:	e8 8e 0c 00 00       	call   c0024264 <ATAPI::ATAPI()>
c00235d6:	5a                   	pop    edx
c00235d7:	59                   	pop    ecx
c00235d8:	57                   	push   edi
c00235d9:	53                   	push   ebx
c00235da:	e8 f5 09 ff ff       	call   c0013fd4 <Device::addChild(Device*)>
c00235df:	8b 07                	mov    eax,DWORD PTR [edi]
c00235e1:	53                   	push   ebx
c00235e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00235e6:	6a 00                	push   0x0
c00235e8:	57                   	push   edi
c00235e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00235ec:	83 c4 20             	add    esp,0x20
c00235ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00235f3:	4d                   	dec    ebp
c00235f4:	74 0a                	je     c0023600 <IDE::detect()+0x276>
c00235f6:	bd 01 00 00 00       	mov    ebp,0x1
c00235fb:	e9 bb fd ff ff       	jmp    c00233bb <IDE::detect()+0x31>
c0023600:	4e                   	dec    esi
c0023601:	74 63                	je     c0023666 <IDE::detect()+0x2dc>
c0023603:	be 01 00 00 00       	mov    esi,0x1
c0023608:	e9 ac fd ff ff       	jmp    c00233b9 <IDE::detect()+0x2f>
c002360d:	50                   	push   eax
c002360e:	6a 04                	push   0x4
c0023610:	56                   	push   esi
c0023611:	53                   	push   ebx
c0023612:	e8 05 f7 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0023617:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002361b:	83 c4 0c             	add    esp,0xc
c002361e:	6a 05                	push   0x5
c0023620:	56                   	push   esi
c0023621:	53                   	push   ebx
c0023622:	e8 f5 f6 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0023627:	83 c4 10             	add    esp,0x10
c002362a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002362e:	80 fa 14             	cmp    dl,0x14
c0023631:	75 04                	jne    c0023637 <IDE::detect()+0x2ad>
c0023633:	3c eb                	cmp    al,0xeb
c0023635:	eb 07                	jmp    c002363e <IDE::detect()+0x2b4>
c0023637:	3c 96                	cmp    al,0x96
c0023639:	75 b8                	jne    c00235f3 <IDE::detect()+0x269>
c002363b:	80 fa 69             	cmp    dl,0x69
c002363e:	75 b3                	jne    c00235f3 <IDE::detect()+0x269>
c0023640:	68 a1 00 00 00       	push   0xa1
c0023645:	6a 07                	push   0x7
c0023647:	56                   	push   esi
c0023648:	53                   	push   ebx
c0023649:	e8 0e f6 ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002364e:	5f                   	pop    edi
c002364f:	58                   	pop    eax
c0023650:	6a 00                	push   0x0
c0023652:	68 40 42 0f 00       	push   0xf4240
c0023657:	e8 42 a9 ff ff       	call   c001df9e <nanoSleep(unsigned long long)>
c002365c:	83 c4 10             	add    esp,0x10
c002365f:	b1 01                	mov    cl,0x1
c0023661:	e9 4a fe ff ff       	jmp    c00234b0 <IDE::detect()+0x126>
c0023666:	81 c4 1c 02 00 00    	add    esp,0x21c
c002366c:	5b                   	pop    ebx
c002366d:	5e                   	pop    esi
c002366e:	5f                   	pop    edi
c002366f:	5d                   	pop    ebp
c0023670:	c3                   	ret    
c0023671:	90                   	nop

c0023672 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023672:	55                   	push   ebp
c0023673:	57                   	push   edi
c0023674:	56                   	push   esi
c0023675:	53                   	push   ebx
c0023676:	83 ec 1c             	sub    esp,0x1c
c0023679:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002367d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023681:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023685:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023689:	88 c3                	mov    bl,al
c002368b:	84 c0                	test   al,al
c002368d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023691:	0f 84 67 01 00 00    	je     c00237fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023697:	83 ec 0c             	sub    esp,0xc
c002369a:	68 27 c8 02 c0       	push   0xc002c827
c002369f:	e8 0a f5 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00236a4:	83 c4 10             	add    esp,0x10
c00236a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00236ab:	3c 01                	cmp    al,0x1
c00236ad:	75 17                	jne    c00236c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00236af:	83 ec 0c             	sub    esp,0xc
c00236b2:	b3 13                	mov    bl,0x13
c00236b4:	68 33 c8 02 c0       	push   0xc002c833
c00236b9:	e8 f0 f4 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00236be:	83 c4 10             	add    esp,0x10
c00236c1:	e9 25 01 00 00       	jmp    c00237eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00236c6:	3c 02                	cmp    al,0x2
c00236c8:	0f 85 ef 00 00 00    	jne    c00237bd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00236ce:	d1 e6                	shl    esi,1
c00236d0:	09 ee                	or     esi,ebp
c00236d2:	52                   	push   edx
c00236d3:	89 f0                	mov    eax,esi
c00236d5:	6a 01                	push   0x1
c00236d7:	0f b6 f0             	movzx  esi,al
c00236da:	c1 e6 06             	shl    esi,0x6
c00236dd:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00236e5:	50                   	push   eax
c00236e6:	57                   	push   edi
c00236e7:	e8 30 f6 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c00236ec:	83 c4 10             	add    esp,0x10
c00236ef:	89 c6                	mov    esi,eax
c00236f1:	a8 01                	test   al,0x1
c00236f3:	74 12                	je     c0023707 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00236f5:	83 ec 0c             	sub    esp,0xc
c00236f8:	b3 07                	mov    bl,0x7
c00236fa:	68 48 c8 02 c0       	push   0xc002c848
c00236ff:	e8 aa f4 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0023704:	83 c4 10             	add    esp,0x10
c0023707:	f7 c6 02 00 00 00    	test   esi,0x2
c002370d:	74 12                	je     c0023721 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002370f:	83 ec 0c             	sub    esp,0xc
c0023712:	b3 03                	mov    bl,0x3
c0023714:	68 66 c8 02 c0       	push   0xc002c866
c0023719:	e8 90 f4 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c002371e:	83 c4 10             	add    esp,0x10
c0023721:	f7 c6 04 00 00 00    	test   esi,0x4
c0023727:	74 12                	je     c002373b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023729:	83 ec 0c             	sub    esp,0xc
c002372c:	b3 14                	mov    bl,0x14
c002372e:	68 86 c8 02 c0       	push   0xc002c886
c0023733:	e8 76 f4 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0023738:	83 c4 10             	add    esp,0x10
c002373b:	f7 c6 08 00 00 00    	test   esi,0x8
c0023741:	74 12                	je     c0023755 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023743:	83 ec 0c             	sub    esp,0xc
c0023746:	b3 03                	mov    bl,0x3
c0023748:	68 66 c8 02 c0       	push   0xc002c866
c002374d:	e8 5c f4 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0023752:	83 c4 10             	add    esp,0x10
c0023755:	f7 c6 10 00 00 00    	test   esi,0x10
c002375b:	74 12                	je     c002376f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c002375d:	83 ec 0c             	sub    esp,0xc
c0023760:	b3 15                	mov    bl,0x15
c0023762:	68 9e c8 02 c0       	push   0xc002c89e
c0023767:	e8 42 f4 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c002376c:	83 c4 10             	add    esp,0x10
c002376f:	f7 c6 20 00 00 00    	test   esi,0x20
c0023775:	74 12                	je     c0023789 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023777:	83 ec 0c             	sub    esp,0xc
c002377a:	b3 03                	mov    bl,0x3
c002377c:	68 66 c8 02 c0       	push   0xc002c866
c0023781:	e8 28 f4 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0023786:	83 c4 10             	add    esp,0x10
c0023789:	f7 c6 40 00 00 00    	test   esi,0x40
c002378f:	74 12                	je     c00237a3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023791:	83 ec 0c             	sub    esp,0xc
c0023794:	b3 16                	mov    bl,0x16
c0023796:	68 b8 c8 02 c0       	push   0xc002c8b8
c002379b:	e8 0e f4 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00237a0:	83 c4 10             	add    esp,0x10
c00237a3:	89 f0                	mov    eax,esi
c00237a5:	84 c0                	test   al,al
c00237a7:	79 42                	jns    c00237eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00237a9:	83 ec 0c             	sub    esp,0xc
c00237ac:	b3 0d                	mov    bl,0xd
c00237ae:	68 d9 c8 02 c0       	push   0xc002c8d9
c00237b3:	e8 f6 f3 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00237b8:	83 c4 10             	add    esp,0x10
c00237bb:	eb 2e                	jmp    c00237eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00237bd:	3c 03                	cmp    al,0x3
c00237bf:	75 14                	jne    c00237d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00237c1:	83 ec 0c             	sub    esp,0xc
c00237c4:	b3 17                	mov    bl,0x17
c00237c6:	68 ed c8 02 c0       	push   0xc002c8ed
c00237cb:	e8 de f3 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00237d0:	83 c4 10             	add    esp,0x10
c00237d3:	eb 16                	jmp    c00237eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00237d5:	3c 04                	cmp    al,0x4
c00237d7:	75 12                	jne    c00237eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00237d9:	83 ec 0c             	sub    esp,0xc
c00237dc:	b3 08                	mov    bl,0x8
c00237de:	68 03 c9 02 c0       	push   0xc002c903
c00237e3:	e8 c6 f3 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00237e8:	83 c4 10             	add    esp,0x10
c00237eb:	50                   	push   eax
c00237ec:	50                   	push   eax
c00237ed:	0f b6 c3             	movzx  eax,bl
c00237f0:	50                   	push   eax
c00237f1:	68 1b c9 02 c0       	push   0xc002c91b
c00237f6:	e8 b3 f3 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00237fb:	83 c4 10             	add    esp,0x10
c00237fe:	83 c4 1c             	add    esp,0x1c
c0023801:	88 d8                	mov    al,bl
c0023803:	5b                   	pop    ebx
c0023804:	5e                   	pop    esi
c0023805:	5f                   	pop    edi
c0023806:	5d                   	pop    ebp
c0023807:	c3                   	ret    

c0023808 <IDE::polling(unsigned char, unsigned int)>:
c0023808:	57                   	push   edi
c0023809:	56                   	push   esi
c002380a:	53                   	push   ebx
c002380b:	bb 04 00 00 00       	mov    ebx,0x4
c0023810:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023814:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023819:	52                   	push   edx
c002381a:	6a 0c                	push   0xc
c002381c:	56                   	push   esi
c002381d:	57                   	push   edi
c002381e:	e8 f9 f4 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0023823:	83 c4 10             	add    esp,0x10
c0023826:	4b                   	dec    ebx
c0023827:	75 f0                	jne    c0023819 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023829:	bb a0 86 01 00       	mov    ebx,0x186a0
c002382e:	50                   	push   eax
c002382f:	6a 0c                	push   0xc
c0023831:	56                   	push   esi
c0023832:	57                   	push   edi
c0023833:	e8 e4 f4 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0023838:	83 c4 10             	add    esp,0x10
c002383b:	a8 01                	test   al,0x1
c002383d:	74 12                	je     c0023851 <IDE::polling(unsigned char, unsigned int)+0x49>
c002383f:	83 ec 0c             	sub    esp,0xc
c0023842:	68 35 c9 02 c0       	push   0xc002c935
c0023847:	e8 62 f3 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c002384c:	83 c4 10             	add    esp,0x10
c002384f:	eb 17                	jmp    c0023868 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023851:	a8 20                	test   al,0x20
c0023853:	75 0f                	jne    c0023864 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023855:	4b                   	dec    ebx
c0023856:	74 10                	je     c0023868 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023858:	84 c0                	test   al,al
c002385a:	78 d2                	js     c002382e <IDE::polling(unsigned char, unsigned int)+0x26>
c002385c:	a8 08                	test   al,0x8
c002385e:	74 ce                	je     c002382e <IDE::polling(unsigned char, unsigned int)+0x26>
c0023860:	31 c0                	xor    eax,eax
c0023862:	eb 06                	jmp    c002386a <IDE::polling(unsigned char, unsigned int)+0x62>
c0023864:	b0 01                	mov    al,0x1
c0023866:	eb 02                	jmp    c002386a <IDE::polling(unsigned char, unsigned int)+0x62>
c0023868:	b0 02                	mov    al,0x2
c002386a:	5b                   	pop    ebx
c002386b:	5e                   	pop    esi
c002386c:	5f                   	pop    edi
c002386d:	c3                   	ret    

c002386e <SATABus::close(int, int, void*)>:
c002386e:	31 c0                	xor    eax,eax
c0023870:	c3                   	ret    
c0023871:	90                   	nop

c0023872 <SATABus::detect()>:
c0023872:	c3                   	ret    
c0023873:	90                   	nop

c0023874 <SATABus::SATABus()>:
c0023874:	83 ec 0c             	sub    esp,0xc
c0023877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002387b:	83 ec 08             	sub    esp,0x8
c002387e:	68 78 c9 02 c0       	push   0xc002c978
c0023883:	50                   	push   eax
c0023884:	e8 d7 0a ff ff       	call   c0014360 <HardDiskController::HardDiskController(char const*)>
c0023889:	83 c4 10             	add    esp,0x10
c002388c:	ba 34 ca 02 c0       	mov    edx,0xc002ca34
c0023891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023895:	89 10                	mov    DWORD PTR [eax],edx
c0023897:	83 ec 0c             	sub    esp,0xc
c002389a:	6a 50                	push   0x50
c002389c:	e8 06 c7 fe ff       	call   c000ffa7 <Phys::allocateContiguousPages(int)>
c00238a1:	83 c4 10             	add    esp,0x10
c00238a4:	89 c2                	mov    edx,eax
c00238a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238aa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00238b0:	83 ec 0c             	sub    esp,0xc
c00238b3:	6a 50                	push   0x50
c00238b5:	e8 67 e2 fe ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c00238ba:	83 c4 10             	add    esp,0x10
c00238bd:	89 c2                	mov    edx,eax
c00238bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00238c9:	e8 e3 e3 fe ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c00238ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00238d2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00238d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00238dc:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00238e2:	83 ec 0c             	sub    esp,0xc
c00238e5:	6a 03                	push   0x3
c00238e7:	6a 50                	push   0x50
c00238e9:	51                   	push   ecx
c00238ea:	52                   	push   edx
c00238eb:	50                   	push   eax
c00238ec:	e8 ef eb fe ff       	call   c00124e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00238f1:	83 c4 20             	add    esp,0x20
c00238f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238f8:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00238fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023902:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023908:	83 ec 04             	sub    esp,0x4
c002390b:	52                   	push   edx
c002390c:	50                   	push   eax
c002390d:	68 9c c9 02 c0       	push   0xc002c99c
c0023912:	e8 97 f2 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0023917:	83 c4 10             	add    esp,0x10
c002391a:	90                   	nop
c002391b:	83 c4 0c             	add    esp,0xc
c002391e:	c3                   	ret    
c002391f:	90                   	nop

c0023920 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023920:	83 ec 0c             	sub    esp,0xc
c0023923:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023927:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002392a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002392d:	09 c2                	or     edx,eax
c002392f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023933:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023939:	8b 08                	mov    ecx,DWORD PTR [eax]
c002393b:	31 c0                	xor    eax,eax
c002393d:	c1 e9 08             	shr    ecx,0x8
c0023940:	83 e1 0f             	and    ecx,0xf
c0023943:	39 c8                	cmp    eax,ecx
c0023945:	74 0a                	je     c0023951 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023947:	f6 c2 01             	test   dl,0x1
c002394a:	74 18                	je     c0023964 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c002394c:	d1 ea                	shr    edx,1
c002394e:	40                   	inc    eax
c002394f:	eb f2                	jmp    c0023943 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023951:	83 ec 0c             	sub    esp,0xc
c0023954:	68 c0 c9 02 c0       	push   0xc002c9c0
c0023959:	e8 cb 68 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c002395e:	83 c4 10             	add    esp,0x10
c0023961:	83 c8 ff             	or     eax,0xffffffff
c0023964:	83 c4 0c             	add    esp,0xc
c0023967:	c3                   	ret    

c0023968 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023968:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002396c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002396f:	89 c2                	mov    edx,eax
c0023971:	c1 ea 08             	shr    edx,0x8
c0023974:	83 e2 0f             	and    edx,0xf
c0023977:	fe ca                	dec    dl
c0023979:	75 31                	jne    c00239ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002397b:	83 e0 0f             	and    eax,0xf
c002397e:	3c 03                	cmp    al,0x3
c0023980:	75 2a                	jne    c00239ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023982:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023985:	b8 02 00 00 00       	mov    eax,0x2
c002398a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023990:	74 1c                	je     c00239ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023992:	b8 04 00 00 00       	mov    eax,0x4
c0023997:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002399d:	74 0f                	je     c00239ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002399f:	31 c0                	xor    eax,eax
c00239a1:	83 fa 03             	cmp    edx,0x3
c00239a4:	0f 94 c0             	sete   al
c00239a7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00239ab:	c3                   	ret    
c00239ac:	31 c0                	xor    eax,eax
c00239ae:	c3                   	ret    
c00239af:	90                   	nop

c00239b0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00239b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00239b4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239b7:	0f ba e2 0f          	bt     edx,0xf
c00239bb:	72 f7                	jb     c00239b4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00239bd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239c0:	83 ca 10             	or     edx,0x10
c00239c3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239c9:	83 ca 01             	or     edx,0x1
c00239cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239cf:	c3                   	ret    

c00239d0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00239d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00239d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239d7:	83 e2 fe             	and    edx,0xfffffffe
c00239da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239dd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239e0:	83 e2 ef             	and    edx,0xffffffef
c00239e3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239e6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239e9:	0f ba e2 0e          	bt     edx,0xe
c00239ed:	72 f7                	jb     c00239e6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00239ef:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239f2:	0f ba e2 0f          	bt     edx,0xf
c00239f6:	72 ee                	jb     c00239e6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00239f8:	c3                   	ret    
c00239f9:	90                   	nop

c00239fa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00239fa:	55                   	push   ebp
c00239fb:	57                   	push   edi
c00239fc:	56                   	push   esi
c00239fd:	53                   	push   ebx
c00239fe:	83 ec 1c             	sub    esp,0x1c
c0023a01:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a05:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a09:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023a0d:	53                   	push   ebx
c0023a0e:	89 fd                	mov    ebp,edi
c0023a10:	56                   	push   esi
c0023a11:	c1 e5 0a             	shl    ebp,0xa
c0023a14:	e8 b7 ff ff ff       	call   c00239d0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023a19:	83 ec 0c             	sub    esp,0xc
c0023a1c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023a22:	01 e8                	add    eax,ebp
c0023a24:	89 03                	mov    DWORD PTR [ebx],eax
c0023a26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023a28:	68 00 04 00 00       	push   0x400
c0023a2d:	6a 00                	push   0x0
c0023a2f:	50                   	push   eax
c0023a30:	e8 43 cd fd ff       	call   c0000778 <memset>
c0023a35:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023a3b:	89 fa                	mov    edx,edi
c0023a3d:	01 e8                	add    eax,ebp
c0023a3f:	c1 e7 0d             	shl    edi,0xd
c0023a42:	89 03                	mov    DWORD PTR [ebx],eax
c0023a44:	c1 e2 08             	shl    edx,0x8
c0023a47:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023a4e:	81 c2 00 80 00 00    	add    edx,0x8000
c0023a54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023a58:	89 d0                	mov    eax,edx
c0023a5a:	83 c4 1c             	add    esp,0x1c
c0023a5d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023a63:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023a66:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023a69:	68 00 01 00 00       	push   0x100
c0023a6e:	6a 00                	push   0x0
c0023a70:	50                   	push   eax
c0023a71:	e8 02 cd fd ff       	call   c0000778 <memset>
c0023a76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023a7a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023a80:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023a86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023a8a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023a8d:	83 c4 10             	add    esp,0x10
c0023a90:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023a97:	31 ff                	xor    edi,edi
c0023a99:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023a9f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023aa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023aa9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023aaf:	83 c5 20             	add    ebp,0x20
c0023ab2:	01 f8                	add    eax,edi
c0023ab4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023ab7:	52                   	push   edx
c0023ab8:	68 00 01 00 00       	push   0x100
c0023abd:	6a 00                	push   0x0
c0023abf:	50                   	push   eax
c0023ac0:	e8 b3 cc fd ff       	call   c0000778 <memset>
c0023ac5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023ac9:	83 c4 10             	add    esp,0x10
c0023acc:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023ad2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023ad9:	01 f8                	add    eax,edi
c0023adb:	81 c7 00 01 00 00    	add    edi,0x100
c0023ae1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023ae4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023aea:	75 b3                	jne    c0023a9f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023aec:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023af0:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023af4:	83 c4 1c             	add    esp,0x1c
c0023af7:	5b                   	pop    ebx
c0023af8:	5e                   	pop    esi
c0023af9:	5f                   	pop    edi
c0023afa:	5d                   	pop    ebp
c0023afb:	e9 b0 fe ff ff       	jmp    c00239b0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023b00 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023b00:	55                   	push   ebp
c0023b01:	57                   	push   edi
c0023b02:	56                   	push   esi
c0023b03:	53                   	push   ebx
c0023b04:	31 db                	xor    ebx,ebx
c0023b06:	83 ec 0c             	sub    esp,0xc
c0023b09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023b0d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023b11:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023b14:	f7 c7 01 00 00 00    	test   edi,0x1
c0023b1a:	0f 84 aa 00 00 00    	je     c0023bca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023b20:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023b24:	89 d8                	mov    eax,ebx
c0023b26:	c1 e0 07             	shl    eax,0x7
c0023b29:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023b30:	55                   	push   ebp
c0023b31:	56                   	push   esi
c0023b32:	e8 31 fe ff ff       	call   c0023968 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023b37:	5a                   	pop    edx
c0023b38:	83 f8 01             	cmp    eax,0x1
c0023b3b:	59                   	pop    ecx
c0023b3c:	75 30                	jne    c0023b6e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023b3e:	50                   	push   eax
c0023b3f:	50                   	push   eax
c0023b40:	53                   	push   ebx
c0023b41:	68 e5 c9 02 c0       	push   0xc002c9e5
c0023b46:	e8 63 f0 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0023b4b:	83 c4 0c             	add    esp,0xc
c0023b4e:	53                   	push   ebx
c0023b4f:	55                   	push   ebp
c0023b50:	56                   	push   esi
c0023b51:	e8 a4 fe ff ff       	call   c00239fa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023b56:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023b5d:	e8 de bc fe ff       	call   c000f840 <malloc>
c0023b62:	89 c5                	mov    ebp,eax
c0023b64:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b67:	e8 60 0d 00 00       	call   c00248cc <SATA::SATA()>
c0023b6c:	eb 33                	jmp    c0023ba1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023b6e:	83 f8 04             	cmp    eax,0x4
c0023b71:	75 47                	jne    c0023bba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023b73:	50                   	push   eax
c0023b74:	50                   	push   eax
c0023b75:	53                   	push   ebx
c0023b76:	68 fc c9 02 c0       	push   0xc002c9fc
c0023b7b:	e8 2e f0 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0023b80:	83 c4 0c             	add    esp,0xc
c0023b83:	53                   	push   ebx
c0023b84:	55                   	push   ebp
c0023b85:	56                   	push   esi
c0023b86:	e8 6f fe ff ff       	call   c00239fa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023b8b:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023b92:	e8 a9 bc fe ff       	call   c000f840 <malloc>
c0023b97:	89 c5                	mov    ebp,eax
c0023b99:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b9c:	e8 d7 10 00 00       	call   c0024c78 <SATAPI::SATAPI()>
c0023ba1:	5a                   	pop    edx
c0023ba2:	59                   	pop    ecx
c0023ba3:	55                   	push   ebp
c0023ba4:	56                   	push   esi
c0023ba5:	e8 2a 04 ff ff       	call   c0013fd4 <Device::addChild(Device*)>
c0023baa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023bad:	56                   	push   esi
c0023bae:	6a 00                	push   0x0
c0023bb0:	53                   	push   ebx
c0023bb1:	55                   	push   ebp
c0023bb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023bb5:	83 c4 20             	add    esp,0x20
c0023bb8:	eb 10                	jmp    c0023bca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023bba:	50                   	push   eax
c0023bbb:	50                   	push   eax
c0023bbc:	53                   	push   ebx
c0023bbd:	68 15 ca 02 c0       	push   0xc002ca15
c0023bc2:	e8 e7 ef fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0023bc7:	83 c4 10             	add    esp,0x10
c0023bca:	d1 ef                	shr    edi,1
c0023bcc:	43                   	inc    ebx
c0023bcd:	83 fb 20             	cmp    ebx,0x20
c0023bd0:	0f 85 3e ff ff ff    	jne    c0023b14 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023bd6:	83 c4 0c             	add    esp,0xc
c0023bd9:	5b                   	pop    ebx
c0023bda:	5e                   	pop    esi
c0023bdb:	5f                   	pop    edi
c0023bdc:	5d                   	pop    ebp
c0023bdd:	c3                   	ret    

c0023bde <SATABus::open(int, int, void*)>:
c0023bde:	83 ec 14             	sub    esp,0x14
c0023be1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023be5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023beb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023bf1:	52                   	push   edx
c0023bf2:	50                   	push   eax
c0023bf3:	e8 08 ff ff ff       	call   c0023b00 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023bf8:	31 c0                	xor    eax,eax
c0023bfa:	83 c4 1c             	add    esp,0x1c
c0023bfd:	c3                   	ret    

c0023bfe <ATA::close(int, int, void*)>:
c0023bfe:	83 ec 0c             	sub    esp,0xc
c0023c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c05:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023c0b:	85 c0                	test   eax,eax
c0023c0d:	74 0c                	je     c0023c1b <ATA::close(int, int, void*)+0x1d>
c0023c0f:	83 ec 0c             	sub    esp,0xc
c0023c12:	8b 10                	mov    edx,DWORD PTR [eax]
c0023c14:	50                   	push   eax
c0023c15:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023c18:	83 c4 10             	add    esp,0x10
c0023c1b:	31 c0                	xor    eax,eax
c0023c1d:	83 c4 0c             	add    esp,0xc
c0023c20:	c3                   	ret    
c0023c21:	90                   	nop

c0023c22 <ATA::powerSaving(PowerSavingLevel)>:
c0023c22:	c3                   	ret    
c0023c23:	90                   	nop

c0023c24 <ATA::ATA()>:
c0023c24:	83 ec 0c             	sub    esp,0xc
c0023c27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c2b:	83 ec 04             	sub    esp,0x4
c0023c2e:	68 00 02 00 00       	push   0x200
c0023c33:	68 fd ca 02 c0       	push   0xc002cafd
c0023c38:	50                   	push   eax
c0023c39:	e8 ba 07 ff ff       	call   c00143f8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023c3e:	83 c4 10             	add    esp,0x10
c0023c41:	ba 80 ca 02 c0       	mov    edx,0xc002ca80
c0023c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4a:	89 10                	mov    DWORD PTR [eax],edx
c0023c4c:	90                   	nop
c0023c4d:	83 c4 0c             	add    esp,0xc
c0023c50:	c3                   	ret    
c0023c51:	90                   	nop

c0023c52 <ATA::flush(bool)>:
c0023c52:	53                   	push   ebx
c0023c53:	83 ec 08             	sub    esp,0x8
c0023c56:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023c5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023c5f:	19 c0                	sbb    eax,eax
c0023c61:	83 e0 fd             	and    eax,0xfffffffd
c0023c64:	05 ea 00 00 00       	add    eax,0xea
c0023c69:	50                   	push   eax
c0023c6a:	6a 07                	push   0x7
c0023c6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c73:	50                   	push   eax
c0023c74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c7a:	e8 dd ef ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c7f:	83 c4 0c             	add    esp,0xc
c0023c82:	6a 00                	push   0x0
c0023c84:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c8b:	50                   	push   eax
c0023c8c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c92:	e8 71 fb ff ff       	call   c0023808 <IDE::polling(unsigned char, unsigned int)>
c0023c97:	83 c4 18             	add    esp,0x18
c0023c9a:	5b                   	pop    ebx
c0023c9b:	c3                   	ret    

c0023c9c <ATA::readyForCommand()>:
c0023c9c:	56                   	push   esi
c0023c9d:	53                   	push   ebx
c0023c9e:	31 db                	xor    ebx,ebx
c0023ca0:	50                   	push   eax
c0023ca1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023ca5:	50                   	push   eax
c0023ca6:	6a 0c                	push   0xc
c0023ca8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023caf:	50                   	push   eax
c0023cb0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023cb6:	e8 61 f0 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c0023cbb:	83 c4 10             	add    esp,0x10
c0023cbe:	a8 88                	test   al,0x88
c0023cc0:	74 23                	je     c0023ce5 <ATA::readyForCommand()+0x49>
c0023cc2:	43                   	inc    ebx
c0023cc3:	83 fb 63             	cmp    ebx,0x63
c0023cc6:	7e dd                	jle    c0023ca5 <ATA::readyForCommand()+0x9>
c0023cc8:	51                   	push   ecx
c0023cc9:	51                   	push   ecx
c0023cca:	6a 00                	push   0x0
c0023ccc:	68 40 42 0f 00       	push   0xf4240
c0023cd1:	e8 c8 a2 ff ff       	call   c001df9e <nanoSleep(unsigned long long)>
c0023cd6:	83 c4 10             	add    esp,0x10
c0023cd9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023cdf:	75 c4                	jne    c0023ca5 <ATA::readyForCommand()+0x9>
c0023ce1:	31 c0                	xor    eax,eax
c0023ce3:	eb 02                	jmp    c0023ce7 <ATA::readyForCommand()+0x4b>
c0023ce5:	b0 01                	mov    al,0x1
c0023ce7:	5a                   	pop    edx
c0023ce8:	5b                   	pop    ebx
c0023ce9:	5e                   	pop    esi
c0023cea:	c3                   	ret    
c0023ceb:	90                   	nop

c0023cec <ATA::access(unsigned long long, int, void*, bool)>:
c0023cec:	55                   	push   ebp
c0023ced:	57                   	push   edi
c0023cee:	56                   	push   esi
c0023cef:	53                   	push   ebx
c0023cf0:	83 ec 2c             	sub    esp,0x2c
c0023cf3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023cf7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023cfb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023cff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023d03:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023d07:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023d0b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023d0f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023d15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023d19:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023d1f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d23:	c1 e0 06             	shl    eax,0x6
c0023d26:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023d2e:	74 5d                	je     c0023d8d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023d30:	89 fa                	mov    edx,edi
c0023d32:	89 f0                	mov    eax,esi
c0023d34:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023d38:	c1 ea 1c             	shr    edx,0x1c
c0023d3b:	89 d1                	mov    ecx,edx
c0023d3d:	09 c1                	or     ecx,eax
c0023d3f:	74 25                	je     c0023d66 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023d41:	31 ed                	xor    ebp,ebp
c0023d43:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023d4a:	89 fa                	mov    edx,edi
c0023d4c:	89 f0                	mov    eax,esi
c0023d4e:	0f ad d0             	shrd   eax,edx,cl
c0023d51:	d3 ea                	shr    edx,cl
c0023d53:	f6 c1 20             	test   cl,0x20
c0023d56:	74 02                	je     c0023d5a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023d58:	89 d0                	mov    eax,edx
c0023d5a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023d5e:	45                   	inc    ebp
c0023d5f:	83 fd 06             	cmp    ebp,0x6
c0023d62:	75 df                	jne    c0023d43 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023d64:	eb 76                	jmp    c0023ddc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023d66:	89 f0                	mov    eax,esi
c0023d68:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023d6d:	89 fa                	mov    edx,edi
c0023d6f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023d76:	0f ac d0 10          	shrd   eax,edx,0x10
c0023d7a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023d7f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023d83:	c1 ee 18             	shr    esi,0x18
c0023d86:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023d8b:	eb 56                	jmp    c0023de3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023d8d:	6a 00                	push   0x0
c0023d8f:	6a 3f                	push   0x3f
c0023d91:	57                   	push   edi
c0023d92:	56                   	push   esi
c0023d93:	e8 94 29 00 00       	call   c002672c <__umoddi3>
c0023d98:	83 c4 10             	add    esp,0x10
c0023d9b:	40                   	inc    eax
c0023d9c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023da0:	6a 00                	push   0x0
c0023da2:	68 f0 03 00 00       	push   0x3f0
c0023da7:	57                   	push   edi
c0023da8:	56                   	push   esi
c0023da9:	e8 7e 28 00 00       	call   c002662c <__udivdi3>
c0023dae:	83 c4 10             	add    esp,0x10
c0023db1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023db6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023dbd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023dc2:	6a 00                	push   0x0
c0023dc4:	6a 3f                	push   0x3f
c0023dc6:	57                   	push   edi
c0023dc7:	56                   	push   esi
c0023dc8:	e8 5f 28 00 00       	call   c002662c <__udivdi3>
c0023dcd:	83 c4 10             	add    esp,0x10
c0023dd0:	89 c6                	mov    esi,eax
c0023dd2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023dd7:	83 e6 0f             	and    esi,0xf
c0023dda:	eb 07                	jmp    c0023de3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023ddc:	31 f6                	xor    esi,esi
c0023dde:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023de3:	bf 01 00 00 00       	mov    edi,0x1
c0023de8:	50                   	push   eax
c0023de9:	6a 00                	push   0x0
c0023deb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023df2:	50                   	push   eax
c0023df3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023df7:	e8 6c f0 ff ff       	call   c0022e68 <IDE::enableIRQs(unsigned char, bool)>
c0023dfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023dff:	e8 98 fe ff ff       	call   c0023c9c <ATA::readyForCommand()>
c0023e04:	83 c4 10             	add    esp,0x10
c0023e07:	84 c0                	test   al,al
c0023e09:	0f 84 5a 02 00 00    	je     c0024069 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023e0f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023e15:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023e1b:	c1 e0 04             	shl    eax,0x4
c0023e1e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023e25:	09 c6                	or     esi,eax
c0023e27:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023e2c:	75 05                	jne    c0023e33 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023e2e:	83 ce a0             	or     esi,0xffffffa0
c0023e31:	eb 03                	jmp    c0023e36 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023e33:	83 ce e0             	or     esi,0xffffffe0
c0023e36:	89 f0                	mov    eax,esi
c0023e38:	0f b6 f0             	movzx  esi,al
c0023e3b:	56                   	push   esi
c0023e3c:	6a 06                	push   0x6
c0023e3e:	51                   	push   ecx
c0023e3f:	52                   	push   edx
c0023e40:	e8 17 ee ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e45:	83 c4 10             	add    esp,0x10
c0023e48:	6a 00                	push   0x0
c0023e4a:	6a 01                	push   0x1
c0023e4c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e53:	50                   	push   eax
c0023e54:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e5a:	e8 fd ed ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e5f:	83 c4 10             	add    esp,0x10
c0023e62:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023e67:	75 6e                	jne    c0023ed7 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023e69:	6a 00                	push   0x0
c0023e6b:	6a 08                	push   0x8
c0023e6d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e74:	50                   	push   eax
c0023e75:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e7b:	e8 dc ed ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e80:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023e85:	50                   	push   eax
c0023e86:	6a 09                	push   0x9
c0023e88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e8f:	50                   	push   eax
c0023e90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e96:	e8 c1 ed ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e9b:	83 c4 20             	add    esp,0x20
c0023e9e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023ea3:	50                   	push   eax
c0023ea4:	6a 0a                	push   0xa
c0023ea6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ead:	50                   	push   eax
c0023eae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eb4:	e8 a3 ed ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eb9:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023ebe:	50                   	push   eax
c0023ebf:	6a 0b                	push   0xb
c0023ec1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ec8:	50                   	push   eax
c0023ec9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ecf:	e8 88 ed ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ed4:	83 c4 20             	add    esp,0x20
c0023ed7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023edc:	50                   	push   eax
c0023edd:	6a 02                	push   0x2
c0023edf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ee6:	50                   	push   eax
c0023ee7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eed:	e8 6a ed ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ef2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023ef7:	50                   	push   eax
c0023ef8:	6a 03                	push   0x3
c0023efa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f01:	50                   	push   eax
c0023f02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f08:	e8 4f ed ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f0d:	83 c4 20             	add    esp,0x20
c0023f10:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023f15:	50                   	push   eax
c0023f16:	6a 04                	push   0x4
c0023f18:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f1f:	50                   	push   eax
c0023f20:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f26:	e8 31 ed ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023f30:	50                   	push   eax
c0023f31:	6a 05                	push   0x5
c0023f33:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f3a:	50                   	push   eax
c0023f3b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f41:	e8 16 ed ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f46:	83 c4 20             	add    esp,0x20
c0023f49:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023f4e:	0f 94 c0             	sete   al
c0023f51:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023f56:	74 09                	je     c0023f61 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023f58:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023f5f:	eb 07                	jmp    c0023f68 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023f61:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023f68:	0f b6 c0             	movzx  eax,al
c0023f6b:	50                   	push   eax
c0023f6c:	6a 07                	push   0x7
c0023f6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f75:	50                   	push   eax
c0023f76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f7c:	e8 db ec ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f81:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023f85:	83 c4 10             	add    esp,0x10
c0023f88:	85 f6                	test   esi,esi
c0023f8a:	0f 84 ba 00 00 00    	je     c002404a <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023f90:	50                   	push   eax
c0023f91:	6a 01                	push   0x1
c0023f93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f9a:	50                   	push   eax
c0023f9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fa1:	e8 62 f8 ff ff       	call   c0023808 <IDE::polling(unsigned char, unsigned int)>
c0023fa6:	83 c4 10             	add    esp,0x10
c0023fa9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023faf:	84 c0                	test   al,al
c0023fb1:	74 2c                	je     c0023fdf <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023fb3:	0f b6 f8             	movzx  edi,al
c0023fb6:	0f b6 d2             	movzx  edx,dl
c0023fb9:	57                   	push   edi
c0023fba:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023fc1:	50                   	push   eax
c0023fc2:	52                   	push   edx
c0023fc3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fc9:	e8 a4 f6 ff ff       	call   c0023672 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023fce:	c7 04 24 58 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca58
c0023fd5:	e8 d4 eb fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0023fda:	e9 87 00 00 00       	jmp    c0024066 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0023fdf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023fe4:	74 33                	je     c0024019 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0023fe6:	31 ed                	xor    ebp,ebp
c0023fe8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023fec:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023ff0:	50                   	push   eax
c0023ff1:	50                   	push   eax
c0023ff2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ff9:	50                   	push   eax
c0023ffa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024000:	e8 45 ec ff ff       	call   c0022c4a <IDE::getBase(unsigned char)>
c0024005:	89 c2                	mov    edx,eax
c0024007:	89 f8                	mov    eax,edi
c0024009:	66 ef                	out    dx,ax
c002400b:	45                   	inc    ebp
c002400c:	83 c4 10             	add    esp,0x10
c002400f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024015:	75 d1                	jne    c0023fe8 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024017:	eb 23                	jmp    c002403c <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024019:	0f b6 d2             	movzx  edx,dl
c002401c:	51                   	push   ecx
c002401d:	51                   	push   ecx
c002401e:	52                   	push   edx
c002401f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024025:	e8 20 ec ff ff       	call   c0022c4a <IDE::getBase(unsigned char)>
c002402a:	b9 00 01 00 00       	mov    ecx,0x100
c002402f:	89 c2                	mov    edx,eax
c0024031:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024035:	fc                   	cld    
c0024036:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024039:	83 c4 10             	add    esp,0x10
c002403c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024044:	4e                   	dec    esi
c0024045:	e9 3e ff ff ff       	jmp    c0023f88 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002404a:	31 ff                	xor    edi,edi
c002404c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024051:	74 16                	je     c0024069 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024053:	50                   	push   eax
c0024054:	50                   	push   eax
c0024055:	31 c0                	xor    eax,eax
c0024057:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002405c:	0f 94 c0             	sete   al
c002405f:	50                   	push   eax
c0024060:	53                   	push   ebx
c0024061:	e8 ec fb ff ff       	call   c0023c52 <ATA::flush(bool)>
c0024066:	83 c4 10             	add    esp,0x10
c0024069:	83 c4 2c             	add    esp,0x2c
c002406c:	89 f8                	mov    eax,edi
c002406e:	5b                   	pop    ebx
c002406f:	5e                   	pop    esi
c0024070:	5f                   	pop    edi
c0024071:	5d                   	pop    ebp
c0024072:	c3                   	ret    
c0024073:	90                   	nop

c0024074 <ATA::read(unsigned long long, int, void*)>:
c0024074:	57                   	push   edi
c0024075:	b8 04 00 00 00       	mov    eax,0x4
c002407a:	56                   	push   esi
c002407b:	53                   	push   ebx
c002407c:	83 ec 10             	sub    esp,0x10
c002407f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024083:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024087:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002408a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002408e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024092:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024098:	77 3b                	ja     c00240d5 <ATA::read(unsigned long long, int, void*)+0x61>
c002409a:	b8 06 00 00 00       	mov    eax,0x6
c002409f:	85 d2                	test   edx,edx
c00240a1:	74 32                	je     c00240d5 <ATA::read(unsigned long long, int, void*)+0x61>
c00240a3:	50                   	push   eax
c00240a4:	50                   	push   eax
c00240a5:	6a 00                	push   0x0
c00240a7:	52                   	push   edx
c00240a8:	53                   	push   ebx
c00240a9:	57                   	push   edi
c00240aa:	56                   	push   esi
c00240ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00240af:	e8 38 fc ff ff       	call   c0023cec <ATA::access(unsigned long long, int, void*, bool)>
c00240b4:	83 c4 20             	add    esp,0x20
c00240b7:	85 c0                	test   eax,eax
c00240b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00240bd:	75 11                	jne    c00240d0 <ATA::read(unsigned long long, int, void*)+0x5c>
c00240bf:	01 1d 08 24 03 c0    	add    DWORD PTR ds:0xc0032408,ebx
c00240c5:	e8 ac c8 fe ff       	call   c0010976 <VgaText::updateDiskUsage()>
c00240ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00240ce:	eb 05                	jmp    c00240d5 <ATA::read(unsigned long long, int, void*)+0x61>
c00240d0:	b8 01 00 00 00       	mov    eax,0x1
c00240d5:	83 c4 10             	add    esp,0x10
c00240d8:	5b                   	pop    ebx
c00240d9:	5e                   	pop    esi
c00240da:	5f                   	pop    edi
c00240db:	c3                   	ret    

c00240dc <ATA::write(unsigned long long, int, void*)>:
c00240dc:	57                   	push   edi
c00240dd:	b8 04 00 00 00       	mov    eax,0x4
c00240e2:	56                   	push   esi
c00240e3:	53                   	push   ebx
c00240e4:	83 ec 10             	sub    esp,0x10
c00240e7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00240eb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00240ef:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00240f2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00240f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00240fa:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024100:	77 3b                	ja     c002413d <ATA::write(unsigned long long, int, void*)+0x61>
c0024102:	b8 06 00 00 00       	mov    eax,0x6
c0024107:	85 d2                	test   edx,edx
c0024109:	74 32                	je     c002413d <ATA::write(unsigned long long, int, void*)+0x61>
c002410b:	50                   	push   eax
c002410c:	50                   	push   eax
c002410d:	6a 01                	push   0x1
c002410f:	52                   	push   edx
c0024110:	53                   	push   ebx
c0024111:	57                   	push   edi
c0024112:	56                   	push   esi
c0024113:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024117:	e8 d0 fb ff ff       	call   c0023cec <ATA::access(unsigned long long, int, void*, bool)>
c002411c:	83 c4 20             	add    esp,0x20
c002411f:	85 c0                	test   eax,eax
c0024121:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024125:	75 11                	jne    c0024138 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024127:	01 1d 04 24 03 c0    	add    DWORD PTR ds:0xc0032404,ebx
c002412d:	e8 44 c8 fe ff       	call   c0010976 <VgaText::updateDiskUsage()>
c0024132:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024136:	eb 05                	jmp    c002413d <ATA::write(unsigned long long, int, void*)+0x61>
c0024138:	b8 01 00 00 00       	mov    eax,0x1
c002413d:	83 c4 10             	add    esp,0x10
c0024140:	5b                   	pop    ebx
c0024141:	5e                   	pop    esi
c0024142:	5f                   	pop    edi
c0024143:	c3                   	ret    

c0024144 <ATA::detectCHS()>:
c0024144:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024148:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002414e:	c1 e0 06             	shl    eax,0x6
c0024151:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024157:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024161:	c7 44 24 04 63 ca 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ca63
c0024169:	e9 bb 60 ff ff       	jmp    c001a229 <Krnl::panic(char const*)>

c002416e <ATA::open(int, int, void*)>:
c002416e:	53                   	push   ebx
c002416f:	83 ec 08             	sub    esp,0x8
c0024172:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024176:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002417a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002417e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024184:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002418a:	c1 e0 06             	shl    eax,0x6
c002418d:	01 d0                	add    eax,edx
c002418f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024196:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002419c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00241a3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00241ad:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00241b3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00241ba:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00241c1:	75 0c                	jne    c00241cf <ATA::open(int, int, void*)+0x61>
c00241c3:	83 ec 0c             	sub    esp,0xc
c00241c6:	53                   	push   ebx
c00241c7:	e8 78 ff ff ff       	call   c0024144 <ATA::detectCHS()>
c00241cc:	83 c4 10             	add    esp,0x10
c00241cf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241d5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00241db:	c1 e0 06             	shl    eax,0x6
c00241de:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00241e5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00241ef:	d1 e8                	shr    eax,1
c00241f1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00241f7:	6a 04                	push   0x4
c00241f9:	6a 0c                	push   0xc
c00241fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024202:	50                   	push   eax
c0024203:	52                   	push   edx
c0024204:	e8 53 ea ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024209:	90                   	nop
c002420a:	90                   	nop
c002420b:	6a 00                	push   0x0
c002420d:	6a 0c                	push   0xc
c002420f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024216:	50                   	push   eax
c0024217:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002421d:	e8 3a ea ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024222:	83 c4 14             	add    esp,0x14
c0024225:	53                   	push   ebx
c0024226:	e8 35 02 ff ff       	call   c0014460 <PhysicalDisk::startCache()>
c002422b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002422e:	e8 7d 23 ff ff       	call   c00165b0 <createPartitionsForDisk(PhysicalDisk*)>
c0024233:	31 c0                	xor    eax,eax
c0024235:	83 c4 18             	add    esp,0x18
c0024238:	5b                   	pop    ebx
c0024239:	c3                   	ret    

c002423a <ATAPI::write(unsigned long long, int, void*)>:
c002423a:	b8 03 00 00 00       	mov    eax,0x3
c002423f:	c3                   	ret    

c0024240 <ATAPI::close(int, int, void*)>:
c0024240:	83 ec 0c             	sub    esp,0xc
c0024243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024247:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002424d:	85 c0                	test   eax,eax
c002424f:	74 0c                	je     c002425d <ATAPI::close(int, int, void*)+0x1d>
c0024251:	83 ec 0c             	sub    esp,0xc
c0024254:	8b 10                	mov    edx,DWORD PTR [eax]
c0024256:	50                   	push   eax
c0024257:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002425a:	83 c4 10             	add    esp,0x10
c002425d:	31 c0                	xor    eax,eax
c002425f:	83 c4 0c             	add    esp,0xc
c0024262:	c3                   	ret    
c0024263:	90                   	nop

c0024264 <ATAPI::ATAPI()>:
c0024264:	83 ec 0c             	sub    esp,0xc
c0024267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002426b:	83 ec 04             	sub    esp,0x4
c002426e:	68 00 08 00 00       	push   0x800
c0024273:	68 9d cb 02 c0       	push   0xc002cb9d
c0024278:	50                   	push   eax
c0024279:	e8 7a 01 ff ff       	call   c00143f8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002427e:	83 c4 10             	add    esp,0x10
c0024281:	ba b8 ca 02 c0       	mov    edx,0xc002cab8
c0024286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002428a:	89 10                	mov    DWORD PTR [eax],edx
c002428c:	90                   	nop
c002428d:	83 c4 0c             	add    esp,0xc
c0024290:	c3                   	ret    
c0024291:	90                   	nop

c0024292 <ATAPI::readyForCommand()>:
c0024292:	56                   	push   esi
c0024293:	53                   	push   ebx
c0024294:	31 db                	xor    ebx,ebx
c0024296:	50                   	push   eax
c0024297:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002429b:	50                   	push   eax
c002429c:	6a 0c                	push   0xc
c002429e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00242a5:	50                   	push   eax
c00242a6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00242ac:	e8 6b ea ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c00242b1:	83 c4 10             	add    esp,0x10
c00242b4:	a8 88                	test   al,0x88
c00242b6:	74 23                	je     c00242db <ATAPI::readyForCommand()+0x49>
c00242b8:	43                   	inc    ebx
c00242b9:	83 fb 63             	cmp    ebx,0x63
c00242bc:	7e dd                	jle    c002429b <ATAPI::readyForCommand()+0x9>
c00242be:	51                   	push   ecx
c00242bf:	51                   	push   ecx
c00242c0:	6a 00                	push   0x0
c00242c2:	68 40 42 0f 00       	push   0xf4240
c00242c7:	e8 d2 9c ff ff       	call   c001df9e <nanoSleep(unsigned long long)>
c00242cc:	83 c4 10             	add    esp,0x10
c00242cf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00242d5:	75 c4                	jne    c002429b <ATAPI::readyForCommand()+0x9>
c00242d7:	31 c0                	xor    eax,eax
c00242d9:	eb 02                	jmp    c00242dd <ATAPI::readyForCommand()+0x4b>
c00242db:	b0 01                	mov    al,0x1
c00242dd:	5a                   	pop    edx
c00242de:	5b                   	pop    ebx
c00242df:	5e                   	pop    esi
c00242e0:	c3                   	ret    
c00242e1:	90                   	nop

c00242e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00242e2:	55                   	push   ebp
c00242e3:	57                   	push   edi
c00242e4:	56                   	push   esi
c00242e5:	53                   	push   ebx
c00242e6:	83 ec 20             	sub    esp,0x20
c00242e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00242ed:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00242f1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00242f5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00242f9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00242fd:	6a 01                	push   0x1
c00242ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024306:	50                   	push   eax
c0024307:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002430d:	e8 56 eb ff ff       	call   c0022e68 <IDE::enableIRQs(unsigned char, bool)>
c0024312:	5e                   	pop    esi
c0024313:	58                   	pop    eax
c0024314:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002431b:	50                   	push   eax
c002431c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024322:	e8 0f e9 ff ff       	call   c0022c36 <IDE::prepareInterrupt(unsigned char)>
c0024327:	89 3c 24             	mov    DWORD PTR [esp],edi
c002432a:	e8 63 ff ff ff       	call   c0024292 <ATAPI::readyForCommand()>
c002432f:	83 c4 10             	add    esp,0x10
c0024332:	84 c0                	test   al,al
c0024334:	75 0a                	jne    c0024340 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024336:	bb 01 00 00 00       	mov    ebx,0x1
c002433b:	e9 57 02 00 00       	jmp    c0024597 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024340:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024346:	c1 e0 04             	shl    eax,0x4
c0024349:	0f b6 c0             	movzx  eax,al
c002434c:	50                   	push   eax
c002434d:	6a 06                	push   0x6
c002434f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024356:	50                   	push   eax
c0024357:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002435d:	e8 fa e8 ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024362:	6a 00                	push   0x0
c0024364:	6a 01                	push   0x1
c0024366:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002436d:	50                   	push   eax
c002436e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024374:	e8 e3 e8 ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024379:	83 c4 20             	add    esp,0x20
c002437c:	0f b6 c3             	movzx  eax,bl
c002437f:	0f b6 df             	movzx  ebx,bh
c0024382:	50                   	push   eax
c0024383:	6a 04                	push   0x4
c0024385:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002438c:	50                   	push   eax
c002438d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024393:	e8 c4 e8 ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024398:	53                   	push   ebx
c0024399:	6a 05                	push   0x5
c002439b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243a2:	50                   	push   eax
c00243a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243a9:	e8 ae e8 ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243ae:	83 c4 20             	add    esp,0x20
c00243b1:	68 a0 00 00 00       	push   0xa0
c00243b6:	6a 07                	push   0x7
c00243b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243bf:	50                   	push   eax
c00243c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243c6:	e8 91 e8 ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243cb:	83 c4 0c             	add    esp,0xc
c00243ce:	6a 01                	push   0x1
c00243d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243d7:	50                   	push   eax
c00243d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243de:	e8 25 f4 ff ff       	call   c0023808 <IDE::polling(unsigned char, unsigned int)>
c00243e3:	83 c4 10             	add    esp,0x10
c00243e6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00243ec:	84 c0                	test   al,al
c00243ee:	74 23                	je     c0024413 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00243f0:	0f b6 d8             	movzx  ebx,al
c00243f3:	0f b6 d2             	movzx  edx,dl
c00243f6:	53                   	push   ebx
c00243f7:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00243fe:	50                   	push   eax
c00243ff:	52                   	push   edx
c0024400:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024406:	e8 67 f2 ff ff       	call   c0023672 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002440b:	83 c4 10             	add    esp,0x10
c002440e:	e9 84 01 00 00       	jmp    c0024597 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024413:	0f b6 d2             	movzx  edx,dl
c0024416:	53                   	push   ebx
c0024417:	53                   	push   ebx
c0024418:	52                   	push   edx
c0024419:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002441f:	e8 26 e8 ff ff       	call   c0022c4a <IDE::getBase(unsigned char)>
c0024424:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024428:	b9 06 00 00 00       	mov    ecx,0x6
c002442d:	89 c2                	mov    edx,eax
c002442f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024432:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024436:	83 c4 10             	add    esp,0x10
c0024439:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002443f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024446:	85 db                	test   ebx,ebx
c0024448:	0f 84 ec 00 00 00    	je     c002453a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002444e:	51                   	push   ecx
c002444f:	51                   	push   ecx
c0024450:	52                   	push   edx
c0024451:	50                   	push   eax
c0024452:	e8 73 e9 ff ff       	call   c0022dca <IDE::waitInterrupt(unsigned char)>
c0024457:	83 c4 10             	add    esp,0x10
c002445a:	84 c0                	test   al,al
c002445c:	0f 84 d4 fe ff ff    	je     c0024336 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024462:	56                   	push   esi
c0024463:	56                   	push   esi
c0024464:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002446b:	50                   	push   eax
c002446c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024472:	e8 bf e7 ff ff       	call   c0022c36 <IDE::prepareInterrupt(unsigned char)>
c0024477:	83 c4 0c             	add    esp,0xc
c002447a:	6a 04                	push   0x4
c002447c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024483:	50                   	push   eax
c0024484:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002448a:	e8 8d e8 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c002448f:	83 c4 0c             	add    esp,0xc
c0024492:	89 c6                	mov    esi,eax
c0024494:	6a 05                	push   0x5
c0024496:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002449d:	50                   	push   eax
c002449e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244a4:	e8 73 e8 ff ff       	call   c0022d1c <IDE::read(unsigned char, unsigned char)>
c00244a9:	89 f1                	mov    ecx,esi
c00244ab:	0f b6 c0             	movzx  eax,al
c00244ae:	0f b6 f1             	movzx  esi,cl
c00244b1:	c1 e0 08             	shl    eax,0x8
c00244b4:	09 c6                	or     esi,eax
c00244b6:	d1 fe                	sar    esi,1
c00244b8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00244bc:	83 c4 10             	add    esp,0x10
c00244bf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00244c4:	74 41                	je     c0024507 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00244c6:	31 c9                	xor    ecx,ecx
c00244c8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00244ce:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00244d5:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00244d9:	75 0a                	jne    c00244e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00244db:	01 c9                	add    ecx,ecx
c00244dd:	01 cd                	add    ebp,ecx
c00244df:	4b                   	dec    ebx
c00244e0:	e9 54 ff ff ff       	jmp    c0024439 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00244e5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00244ea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00244ee:	51                   	push   ecx
c00244ef:	51                   	push   ecx
c00244f0:	52                   	push   edx
c00244f1:	50                   	push   eax
c00244f2:	e8 53 e7 ff ff       	call   c0022c4a <IDE::getBase(unsigned char)>
c00244f7:	89 c2                	mov    edx,eax
c00244f9:	89 f0                	mov    eax,esi
c00244fb:	66 ef                	out    dx,ax
c00244fd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024501:	83 c4 10             	add    esp,0x10
c0024504:	41                   	inc    ecx
c0024505:	eb c1                	jmp    c00244c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024507:	31 f6                	xor    esi,esi
c0024509:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002450f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024516:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002451a:	75 06                	jne    c0024522 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002451c:	01 f6                	add    esi,esi
c002451e:	01 f5                	add    ebp,esi
c0024520:	eb bd                	jmp    c00244df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024522:	51                   	push   ecx
c0024523:	51                   	push   ecx
c0024524:	52                   	push   edx
c0024525:	50                   	push   eax
c0024526:	e8 1f e7 ff ff       	call   c0022c4a <IDE::getBase(unsigned char)>
c002452b:	89 c2                	mov    edx,eax
c002452d:	66 ed                	in     ax,dx
c002452f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024534:	83 c4 10             	add    esp,0x10
c0024537:	46                   	inc    esi
c0024538:	eb cf                	jmp    c0024509 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002453a:	51                   	push   ecx
c002453b:	51                   	push   ecx
c002453c:	52                   	push   edx
c002453d:	50                   	push   eax
c002453e:	e8 87 e8 ff ff       	call   c0022dca <IDE::waitInterrupt(unsigned char)>
c0024543:	83 c4 10             	add    esp,0x10
c0024546:	84 c0                	test   al,al
c0024548:	0f 84 e8 fd ff ff    	je     c0024336 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002454e:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024553:	52                   	push   edx
c0024554:	52                   	push   edx
c0024555:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002455c:	50                   	push   eax
c002455d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024563:	e8 ce e6 ff ff       	call   c0022c36 <IDE::prepareInterrupt(unsigned char)>
c0024568:	83 c4 10             	add    esp,0x10
c002456b:	50                   	push   eax
c002456c:	50                   	push   eax
c002456d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024574:	50                   	push   eax
c0024575:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002457b:	e8 ca e6 ff ff       	call   c0022c4a <IDE::getBase(unsigned char)>
c0024580:	8d 50 07             	lea    edx,[eax+0x7]
c0024583:	ec                   	in     al,dx
c0024584:	83 c4 10             	add    esp,0x10
c0024587:	a8 88                	test   al,0x88
c0024589:	74 0a                	je     c0024595 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002458b:	4b                   	dec    ebx
c002458c:	75 dd                	jne    c002456b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002458e:	bb 02 00 00 00       	mov    ebx,0x2
c0024593:	eb 02                	jmp    c0024597 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024595:	31 db                	xor    ebx,ebx
c0024597:	83 c4 1c             	add    esp,0x1c
c002459a:	89 d8                	mov    eax,ebx
c002459c:	5b                   	pop    ebx
c002459d:	5e                   	pop    esi
c002459e:	5f                   	pop    edi
c002459f:	5d                   	pop    ebp
c00245a0:	c3                   	ret    
c00245a1:	90                   	nop

c00245a2 <ATAPI::diskRemoved()>:
c00245a2:	83 ec 18             	sub    esp,0x18
c00245a5:	68 a9 cb 02 c0       	push   0xc002cba9
c00245aa:	e8 ff e5 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00245af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245b3:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00245ba:	83 c4 1c             	add    esp,0x1c
c00245bd:	c3                   	ret    

c00245be <ATAPI::eject()>:
c00245be:	57                   	push   edi
c00245bf:	b9 03 00 00 00       	mov    ecx,0x3
c00245c4:	53                   	push   ebx
c00245c5:	83 ec 14             	sub    esp,0x14
c00245c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00245cc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00245d0:	fc                   	cld    
c00245d1:	31 c0                	xor    eax,eax
c00245d3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00245d5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00245da:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00245df:	50                   	push   eax
c00245e0:	50                   	push   eax
c00245e1:	6a 00                	push   0x0
c00245e3:	6a 00                	push   0x0
c00245e5:	6a 00                	push   0x0
c00245e7:	6a 02                	push   0x2
c00245e9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00245ed:	50                   	push   eax
c00245ee:	53                   	push   ebx
c00245ef:	e8 ee fc ff ff       	call   c00242e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00245f4:	83 c4 14             	add    esp,0x14
c00245f7:	53                   	push   ebx
c00245f8:	e8 a5 ff ff ff       	call   c00245a2 <ATAPI::diskRemoved()>
c00245fd:	83 c4 24             	add    esp,0x24
c0024600:	31 c0                	xor    eax,eax
c0024602:	5b                   	pop    ebx
c0024603:	5f                   	pop    edi
c0024604:	c3                   	ret    
c0024605:	90                   	nop

c0024606 <ATAPI::diskInserted()>:
c0024606:	53                   	push   ebx
c0024607:	83 ec 14             	sub    esp,0x14
c002460a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002460e:	68 c0 cb 02 c0       	push   0xc002cbc0
c0024613:	e8 96 e5 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0024618:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002461f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024622:	e8 39 fe fe ff       	call   c0014460 <PhysicalDisk::startCache()>
c0024627:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002462b:	83 c4 18             	add    esp,0x18
c002462e:	5b                   	pop    ebx
c002462f:	e9 7c 1f ff ff       	jmp    c00165b0 <createPartitionsForDisk(PhysicalDisk*)>

c0024634 <ATAPI::detectMedia()>:
c0024634:	56                   	push   esi
c0024635:	53                   	push   ebx
c0024636:	83 ec 28             	sub    esp,0x28
c0024639:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002463d:	6a 0c                	push   0xc
c002463f:	6a 00                	push   0x0
c0024641:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024645:	56                   	push   esi
c0024646:	e8 2d c1 fd ff       	call   c0000778 <memset>
c002464b:	58                   	pop    eax
c002464c:	5a                   	pop    edx
c002464d:	6a 00                	push   0x0
c002464f:	6a 00                	push   0x0
c0024651:	6a 00                	push   0x0
c0024653:	6a 00                	push   0x0
c0024655:	56                   	push   esi
c0024656:	53                   	push   ebx
c0024657:	e8 86 fc ff ff       	call   c00242e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002465c:	83 c4 1c             	add    esp,0x1c
c002465f:	6a 0c                	push   0xc
c0024661:	6a 00                	push   0x0
c0024663:	56                   	push   esi
c0024664:	e8 0f c1 fd ff       	call   c0000778 <memset>
c0024669:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002466e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024673:	59                   	pop    ecx
c0024674:	58                   	pop    eax
c0024675:	6a 01                	push   0x1
c0024677:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002467b:	50                   	push   eax
c002467c:	6a 00                	push   0x0
c002467e:	6a 12                	push   0x12
c0024680:	56                   	push   esi
c0024681:	53                   	push   ebx
c0024682:	e8 5b fc ff ff       	call   c00242e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024687:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002468b:	83 c4 20             	add    esp,0x20
c002468e:	83 e0 7f             	and    eax,0x7f
c0024691:	3c 70                	cmp    al,0x70
c0024693:	74 15                	je     c00246aa <ATAPI::detectMedia()+0x76>
c0024695:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002469c:	75 0c                	jne    c00246aa <ATAPI::detectMedia()+0x76>
c002469e:	83 ec 0c             	sub    esp,0xc
c00246a1:	53                   	push   ebx
c00246a2:	e8 5f ff ff ff       	call   c0024606 <ATAPI::diskInserted()>
c00246a7:	83 c4 10             	add    esp,0x10
c00246aa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00246ae:	83 e0 0f             	and    eax,0xf
c00246b1:	3c 02                	cmp    al,0x2
c00246b3:	75 1b                	jne    c00246d0 <ATAPI::detectMedia()+0x9c>
c00246b5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00246ba:	75 2d                	jne    c00246e9 <ATAPI::detectMedia()+0xb5>
c00246bc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246c3:	74 24                	je     c00246e9 <ATAPI::detectMedia()+0xb5>
c00246c5:	83 ec 0c             	sub    esp,0xc
c00246c8:	53                   	push   ebx
c00246c9:	e8 d4 fe ff ff       	call   c00245a2 <ATAPI::diskRemoved()>
c00246ce:	eb 16                	jmp    c00246e6 <ATAPI::detectMedia()+0xb2>
c00246d0:	84 c0                	test   al,al
c00246d2:	75 15                	jne    c00246e9 <ATAPI::detectMedia()+0xb5>
c00246d4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246db:	75 0c                	jne    c00246e9 <ATAPI::detectMedia()+0xb5>
c00246dd:	83 ec 0c             	sub    esp,0xc
c00246e0:	53                   	push   ebx
c00246e1:	e8 20 ff ff ff       	call   c0024606 <ATAPI::diskInserted()>
c00246e6:	83 c4 10             	add    esp,0x10
c00246e9:	83 c4 24             	add    esp,0x24
c00246ec:	5b                   	pop    ebx
c00246ed:	5e                   	pop    esi
c00246ee:	c3                   	ret    
c00246ef:	90                   	nop

c00246f0 <ATAPI::open(int, int, void*)>:
c00246f0:	53                   	push   ebx
c00246f1:	83 ec 08             	sub    esp,0x8
c00246f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00246f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00246fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024700:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024706:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002470c:	c1 e0 06             	shl    eax,0x6
c002470f:	01 d0                	add    eax,edx
c0024711:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024718:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002471e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024725:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002472f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024735:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002473c:	6a 04                	push   0x4
c002473e:	6a 0c                	push   0xc
c0024740:	51                   	push   ecx
c0024741:	52                   	push   edx
c0024742:	e8 15 e5 ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024747:	90                   	nop
c0024748:	90                   	nop
c0024749:	6a 00                	push   0x0
c002474b:	6a 0c                	push   0xc
c002474d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024754:	50                   	push   eax
c0024755:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002475b:	e8 fc e4 ff ff       	call   c0022c5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024760:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024767:	83 c4 14             	add    esp,0x14
c002476a:	53                   	push   ebx
c002476b:	e8 c4 fe ff ff       	call   c0024634 <ATAPI::detectMedia()>
c0024770:	31 c0                	xor    eax,eax
c0024772:	83 c4 18             	add    esp,0x18
c0024775:	5b                   	pop    ebx
c0024776:	c3                   	ret    
c0024777:	90                   	nop

c0024778 <ATAPI::read(unsigned long long, int, void*)>:
c0024778:	55                   	push   ebp
c0024779:	57                   	push   edi
c002477a:	56                   	push   esi
c002477b:	53                   	push   ebx
c002477c:	83 ec 1c             	sub    esp,0x1c
c002477f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024783:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024787:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002478b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024792:	74 41                	je     c00247d5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024794:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024798:	b9 03 00 00 00       	mov    ecx,0x3
c002479d:	fc                   	cld    
c002479e:	31 c0                	xor    eax,eax
c00247a0:	86 fb                	xchg   bl,bh
c00247a2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00247a4:	c1 c3 10             	rol    ebx,0x10
c00247a7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00247ac:	89 e8                	mov    eax,ebp
c00247ae:	86 fb                	xchg   bl,bh
c00247b0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00247b4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00247b8:	50                   	push   eax
c00247b9:	50                   	push   eax
c00247ba:	55                   	push   ebp
c00247bb:	c1 e5 0b             	shl    ebp,0xb
c00247be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00247c2:	6a 00                	push   0x0
c00247c4:	55                   	push   ebp
c00247c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00247c9:	50                   	push   eax
c00247ca:	56                   	push   esi
c00247cb:	e8 12 fb ff ff       	call   c00242e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247d0:	83 c4 20             	add    esp,0x20
c00247d3:	eb 1a                	jmp    c00247ef <ATAPI::read(unsigned long long, int, void*)+0x77>
c00247d5:	83 ec 0c             	sub    esp,0xc
c00247d8:	56                   	push   esi
c00247d9:	e8 56 fe ff ff       	call   c0024634 <ATAPI::detectMedia()>
c00247de:	83 c4 10             	add    esp,0x10
c00247e1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00247e8:	75 aa                	jne    c0024794 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00247ea:	b8 02 00 00 00       	mov    eax,0x2
c00247ef:	83 c4 1c             	add    esp,0x1c
c00247f2:	5b                   	pop    ebx
c00247f3:	5e                   	pop    esi
c00247f4:	5f                   	pop    edi
c00247f5:	5d                   	pop    ebp
c00247f6:	c3                   	ret    
c00247f7:	90                   	nop

c00247f8 <SATA::close(int, int, void*)>:
c00247f8:	83 ec 0c             	sub    esp,0xc
c00247fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247ff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024805:	85 c0                	test   eax,eax
c0024807:	74 0c                	je     c0024815 <SATA::close(int, int, void*)+0x1d>
c0024809:	83 ec 0c             	sub    esp,0xc
c002480c:	8b 10                	mov    edx,DWORD PTR [eax]
c002480e:	50                   	push   eax
c002480f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024812:	83 c4 10             	add    esp,0x10
c0024815:	31 c0                	xor    eax,eax
c0024817:	83 c4 0c             	add    esp,0xc
c002481a:	c3                   	ret    
c002481b:	90                   	nop

c002481c <SATA::powerSaving(PowerSavingLevel)>:
c002481c:	c3                   	ret    
c002481d:	90                   	nop

c002481e <SATA::open(int, int, void*)>:
c002481e:	56                   	push   esi
c002481f:	53                   	push   ebx
c0024820:	50                   	push   eax
c0024821:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024825:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024829:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024833:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024839:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024843:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024847:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024851:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024857:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002485e:	e8 7c b6 fe ff       	call   c000fedf <Phys::allocatePage()>
c0024863:	89 c6                	mov    esi,eax
c0024865:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002486b:	81 c6 00 10 00 00    	add    esi,0x1000
c0024871:	e8 69 b6 fe ff       	call   c000fedf <Phys::allocatePage()>
c0024876:	39 c6                	cmp    esi,eax
c0024878:	74 10                	je     c002488a <SATA::open(int, int, void*)+0x6c>
c002487a:	83 ec 0c             	sub    esp,0xc
c002487d:	68 e8 ca 02 c0       	push   0xc002cae8
c0024882:	e8 a2 59 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0024887:	83 c4 10             	add    esp,0x10
c002488a:	83 ec 0c             	sub    esp,0xc
c002488d:	6a 02                	push   0x2
c002488f:	e8 8d d2 fe ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c0024894:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002489a:	e8 12 d4 fe ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c002489f:	6a 03                	push   0x3
c00248a1:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00248a7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00248ad:	50                   	push   eax
c00248ae:	e8 39 d9 fe ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c00248b3:	83 c4 14             	add    esp,0x14
c00248b6:	53                   	push   ebx
c00248b7:	e8 a4 fb fe ff       	call   c0014460 <PhysicalDisk::startCache()>
c00248bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00248bf:	e8 ec 1c ff ff       	call   c00165b0 <createPartitionsForDisk(PhysicalDisk*)>
c00248c4:	83 c4 14             	add    esp,0x14
c00248c7:	31 c0                	xor    eax,eax
c00248c9:	5b                   	pop    ebx
c00248ca:	5e                   	pop    esi
c00248cb:	c3                   	ret    

c00248cc <SATA::SATA()>:
c00248cc:	83 ec 0c             	sub    esp,0xc
c00248cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248d3:	83 ec 04             	sub    esp,0x4
c00248d6:	68 00 02 00 00       	push   0x200
c00248db:	68 fc ca 02 c0       	push   0xc002cafc
c00248e0:	50                   	push   eax
c00248e1:	e8 12 fb fe ff       	call   c00143f8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00248e6:	83 c4 10             	add    esp,0x10
c00248e9:	ba 6c cb 02 c0       	mov    edx,0xc002cb6c
c00248ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248f2:	89 10                	mov    DWORD PTR [eax],edx
c00248f4:	90                   	nop
c00248f5:	83 c4 0c             	add    esp,0xc
c00248f8:	c3                   	ret    
c00248f9:	90                   	nop

c00248fa <SATA::access(unsigned long long, int, void*, bool)>:
c00248fa:	55                   	push   ebp
c00248fb:	57                   	push   edi
c00248fc:	56                   	push   esi
c00248fd:	53                   	push   ebx
c00248fe:	83 ec 2c             	sub    esp,0x2c
c0024901:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024905:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024909:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002490d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024911:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024915:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002491a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002491e:	7e 10                	jle    c0024930 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024920:	83 ec 0c             	sub    esp,0xc
c0024923:	68 0c cb 02 c0       	push   0xc002cb0c
c0024928:	e8 fc 58 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c002492d:	83 c4 10             	add    esp,0x10
c0024930:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024936:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002493c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024942:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024946:	89 f0                	mov    eax,esi
c0024948:	c1 e0 07             	shl    eax,0x7
c002494b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002494f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024959:	53                   	push   ebx
c002495a:	8d 46 02             	lea    eax,[esi+0x2]
c002495d:	53                   	push   ebx
c002495e:	c1 e0 07             	shl    eax,0x7
c0024961:	bb 01 00 00 00       	mov    ebx,0x1
c0024966:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c002496a:	50                   	push   eax
c002496b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024971:	e8 aa ef ff ff       	call   c0023920 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024976:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002497a:	83 c4 10             	add    esp,0x10
c002497d:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024982:	0f 84 ce 01 00 00    	je     c0024b56 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024988:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002498c:	c1 e0 09             	shl    eax,0x9
c002498f:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024994:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024998:	74 17                	je     c00249b1 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c002499a:	51                   	push   ecx
c002499b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002499f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00249a3:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00249a9:	e8 96 bd fd ff       	call   c0000744 <memcpy>
c00249ae:	83 c4 10             	add    esp,0x10
c00249b1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00249b7:	8d 46 02             	lea    eax,[esi+0x2]
c00249ba:	c1 e0 07             	shl    eax,0x7
c00249bd:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00249c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00249c3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00249c9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00249cf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00249d3:	c1 e1 05             	shl    ecx,0x5
c00249d6:	01 c8                	add    eax,ecx
c00249d8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00249dc:	8a 18                	mov    bl,BYTE PTR [eax]
c00249de:	83 e1 01             	and    ecx,0x1
c00249e1:	83 e3 bf             	and    ebx,0xffffffbf
c00249e4:	c1 e1 06             	shl    ecx,0x6
c00249e7:	09 d9                	or     ecx,ebx
c00249e9:	88 08                	mov    BYTE PTR [eax],cl
c00249eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00249ed:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00249f3:	81 c9 05 00 01 00    	or     ecx,0x10005
c00249f9:	89 08                	mov    DWORD PTR [eax],ecx
c00249fb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024a01:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024a07:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024a0d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024a10:	52                   	push   edx
c0024a11:	68 90 00 00 00       	push   0x90
c0024a16:	6a 00                	push   0x0
c0024a18:	53                   	push   ebx
c0024a19:	e8 5a bd fd ff       	call   c0000778 <memset>
c0024a1e:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024a24:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024a28:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024a2e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024a32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024a36:	83 c4 10             	add    esp,0x10
c0024a39:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024a3c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024a42:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024a48:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024a4d:	09 c8                	or     eax,ecx
c0024a4f:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024a55:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024a58:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024a5f:	66 25 00 7f          	and    ax,0x7f00
c0024a63:	66 0d 27 80          	or     ax,0x8027
c0024a67:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024a6c:	66 89 03             	mov    WORD PTR [ebx],ax
c0024a6f:	19 c0                	sbb    eax,eax
c0024a71:	83 e0 f0             	and    eax,0xfffffff0
c0024a74:	83 c0 35             	add    eax,0x35
c0024a77:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024a7a:	89 f8                	mov    eax,edi
c0024a7c:	c1 e8 10             	shr    eax,0x10
c0024a7f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024a82:	89 f8                	mov    eax,edi
c0024a84:	c1 e8 18             	shr    eax,0x18
c0024a87:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024a8a:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024a8e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024a91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a95:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024a98:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024a9c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024aa0:	89 f3                	mov    ebx,esi
c0024aa2:	31 c0                	xor    eax,eax
c0024aa4:	c1 e3 07             	shl    ebx,0x7
c0024aa7:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024aab:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024ab1:	80 e1 88             	and    cl,0x88
c0024ab4:	74 0a                	je     c0024ac0 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024ab6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024abb:	74 0a                	je     c0024ac7 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024abd:	40                   	inc    eax
c0024abe:	eb eb                	jmp    c0024aab <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024ac0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ac5:	75 0a                	jne    c0024ad1 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024ac7:	83 ec 0c             	sub    esp,0xc
c0024aca:	68 45 cb 02 c0       	push   0xc002cb45
c0024acf:	eb 56                	jmp    c0024b27 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024ad1:	b8 01 00 00 00       	mov    eax,0x1
c0024ad6:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024ada:	c1 e6 07             	shl    esi,0x7
c0024add:	d3 e0                	shl    eax,cl
c0024adf:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024ae3:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024ae9:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024aef:	85 c8                	test   eax,ecx
c0024af1:	74 20                	je     c0024b13 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024af3:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024af9:	0f ba e1 1e          	bt     ecx,0x1e
c0024afd:	73 ea                	jae    c0024ae9 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024aff:	83 ec 0c             	sub    esp,0xc
c0024b02:	31 db                	xor    ebx,ebx
c0024b04:	68 53 cb 02 c0       	push   0xc002cb53
c0024b09:	e8 1b 57 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0024b0e:	83 c4 10             	add    esp,0x10
c0024b11:	eb 43                	jmp    c0024b56 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024b13:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024b19:	0f ba e0 1e          	bt     eax,0x1e
c0024b1d:	73 17                	jae    c0024b36 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024b1f:	83 ec 0c             	sub    esp,0xc
c0024b22:	68 53 cb 02 c0       	push   0xc002cb53
c0024b27:	e8 fd 56 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0024b2c:	bb 01 00 00 00       	mov    ebx,0x1
c0024b31:	83 c4 10             	add    esp,0x10
c0024b34:	eb 20                	jmp    c0024b56 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024b36:	31 db                	xor    ebx,ebx
c0024b38:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024b3d:	75 17                	jne    c0024b56 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024b3f:	50                   	push   eax
c0024b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024b44:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024b4a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024b4e:	e8 f1 bb fd ff       	call   c0000744 <memcpy>
c0024b53:	83 c4 10             	add    esp,0x10
c0024b56:	83 c4 2c             	add    esp,0x2c
c0024b59:	89 d8                	mov    eax,ebx
c0024b5b:	5b                   	pop    ebx
c0024b5c:	5e                   	pop    esi
c0024b5d:	5f                   	pop    edi
c0024b5e:	5d                   	pop    ebp
c0024b5f:	c3                   	ret    

c0024b60 <SATA::read(unsigned long long, int, void*)>:
c0024b60:	57                   	push   edi
c0024b61:	b8 04 00 00 00       	mov    eax,0x4
c0024b66:	56                   	push   esi
c0024b67:	53                   	push   ebx
c0024b68:	83 ec 10             	sub    esp,0x10
c0024b6b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024b6f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024b73:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024b76:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024b7a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024b7e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024b84:	77 3b                	ja     c0024bc1 <SATA::read(unsigned long long, int, void*)+0x61>
c0024b86:	b8 06 00 00 00       	mov    eax,0x6
c0024b8b:	85 d2                	test   edx,edx
c0024b8d:	74 32                	je     c0024bc1 <SATA::read(unsigned long long, int, void*)+0x61>
c0024b8f:	50                   	push   eax
c0024b90:	50                   	push   eax
c0024b91:	6a 00                	push   0x0
c0024b93:	52                   	push   edx
c0024b94:	53                   	push   ebx
c0024b95:	57                   	push   edi
c0024b96:	56                   	push   esi
c0024b97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024b9b:	e8 5a fd ff ff       	call   c00248fa <SATA::access(unsigned long long, int, void*, bool)>
c0024ba0:	83 c4 20             	add    esp,0x20
c0024ba3:	85 c0                	test   eax,eax
c0024ba5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ba9:	75 11                	jne    c0024bbc <SATA::read(unsigned long long, int, void*)+0x5c>
c0024bab:	01 1d 08 24 03 c0    	add    DWORD PTR ds:0xc0032408,ebx
c0024bb1:	e8 c0 bd fe ff       	call   c0010976 <VgaText::updateDiskUsage()>
c0024bb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024bba:	eb 05                	jmp    c0024bc1 <SATA::read(unsigned long long, int, void*)+0x61>
c0024bbc:	b8 01 00 00 00       	mov    eax,0x1
c0024bc1:	83 c4 10             	add    esp,0x10
c0024bc4:	5b                   	pop    ebx
c0024bc5:	5e                   	pop    esi
c0024bc6:	5f                   	pop    edi
c0024bc7:	c3                   	ret    

c0024bc8 <SATA::write(unsigned long long, int, void*)>:
c0024bc8:	55                   	push   ebp
c0024bc9:	b8 04 00 00 00       	mov    eax,0x4
c0024bce:	57                   	push   edi
c0024bcf:	56                   	push   esi
c0024bd0:	53                   	push   ebx
c0024bd1:	83 ec 1c             	sub    esp,0x1c
c0024bd4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024bd8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024bdc:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024bdf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024be3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024be7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024bed:	77 56                	ja     c0024c45 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024bef:	b8 06 00 00 00       	mov    eax,0x6
c0024bf4:	85 ff                	test   edi,edi
c0024bf6:	74 4d                	je     c0024c45 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024bf8:	89 ee                	mov    esi,ebp
c0024bfa:	c1 e6 09             	shl    esi,0x9
c0024bfd:	01 fe                	add    esi,edi
c0024bff:	89 c8                	mov    eax,ecx
c0024c01:	89 da                	mov    edx,ebx
c0024c03:	83 c0 01             	add    eax,0x1
c0024c06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024c0a:	83 d2 00             	adc    edx,0x0
c0024c0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024c11:	50                   	push   eax
c0024c12:	50                   	push   eax
c0024c13:	6a 01                	push   0x1
c0024c15:	57                   	push   edi
c0024c16:	81 c7 00 02 00 00    	add    edi,0x200
c0024c1c:	6a 01                	push   0x1
c0024c1e:	53                   	push   ebx
c0024c1f:	51                   	push   ecx
c0024c20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024c24:	e8 d1 fc ff ff       	call   c00248fa <SATA::access(unsigned long long, int, void*, bool)>
c0024c29:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024c2d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c31:	83 c4 20             	add    esp,0x20
c0024c34:	39 f7                	cmp    edi,esi
c0024c36:	75 c7                	jne    c0024bff <SATA::write(unsigned long long, int, void*)+0x37>
c0024c38:	01 2d 04 24 03 c0    	add    DWORD PTR ds:0xc0032404,ebp
c0024c3e:	e8 33 bd fe ff       	call   c0010976 <VgaText::updateDiskUsage()>
c0024c43:	31 c0                	xor    eax,eax
c0024c45:	83 c4 1c             	add    esp,0x1c
c0024c48:	5b                   	pop    ebx
c0024c49:	5e                   	pop    esi
c0024c4a:	5f                   	pop    edi
c0024c4b:	5d                   	pop    ebp
c0024c4c:	c3                   	ret    
c0024c4d:	90                   	nop

c0024c4e <SATAPI::write(unsigned long long, int, void*)>:
c0024c4e:	b8 03 00 00 00       	mov    eax,0x3
c0024c53:	c3                   	ret    

c0024c54 <SATAPI::close(int, int, void*)>:
c0024c54:	83 ec 0c             	sub    esp,0xc
c0024c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c5b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c61:	85 c0                	test   eax,eax
c0024c63:	74 0c                	je     c0024c71 <SATAPI::close(int, int, void*)+0x1d>
c0024c65:	83 ec 0c             	sub    esp,0xc
c0024c68:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c6a:	50                   	push   eax
c0024c6b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c6e:	83 c4 10             	add    esp,0x10
c0024c71:	31 c0                	xor    eax,eax
c0024c73:	83 c4 0c             	add    esp,0xc
c0024c76:	c3                   	ret    
c0024c77:	90                   	nop

c0024c78 <SATAPI::SATAPI()>:
c0024c78:	83 ec 0c             	sub    esp,0xc
c0024c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c7f:	83 ec 04             	sub    esp,0x4
c0024c82:	68 00 08 00 00       	push   0x800
c0024c87:	68 9c cb 02 c0       	push   0xc002cb9c
c0024c8c:	50                   	push   eax
c0024c8d:	e8 66 f7 fe ff       	call   c00143f8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c92:	83 c4 10             	add    esp,0x10
c0024c95:	ba 48 cc 02 c0       	mov    edx,0xc002cc48
c0024c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c9e:	89 10                	mov    DWORD PTR [eax],edx
c0024ca0:	90                   	nop
c0024ca1:	83 c4 0c             	add    esp,0xc
c0024ca4:	c3                   	ret    
c0024ca5:	90                   	nop

c0024ca6 <SATAPI::diskRemoved()>:
c0024ca6:	83 ec 18             	sub    esp,0x18
c0024ca9:	68 a8 cb 02 c0       	push   0xc002cba8
c0024cae:	e8 fb de fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0024cb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cb7:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024cbe:	83 c4 1c             	add    esp,0x1c
c0024cc1:	c3                   	ret    

c0024cc2 <SATAPI::diskInserted()>:
c0024cc2:	53                   	push   ebx
c0024cc3:	83 ec 14             	sub    esp,0x14
c0024cc6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024cca:	68 bf cb 02 c0       	push   0xc002cbbf
c0024ccf:	e8 da de fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0024cd4:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024cdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024cde:	e8 7d f7 fe ff       	call   c0014460 <PhysicalDisk::startCache()>
c0024ce3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024ce7:	83 c4 18             	add    esp,0x18
c0024cea:	5b                   	pop    ebx
c0024ceb:	e9 c0 18 ff ff       	jmp    c00165b0 <createPartitionsForDisk(PhysicalDisk*)>

c0024cf0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024cf0:	55                   	push   ebp
c0024cf1:	57                   	push   edi
c0024cf2:	56                   	push   esi
c0024cf3:	53                   	push   ebx
c0024cf4:	83 ec 24             	sub    esp,0x24
c0024cf7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024cfb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024cff:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024d05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024d09:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024d0d:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024d13:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024d16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d1c:	c1 e3 07             	shl    ebx,0x7
c0024d1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024d23:	89 f8                	mov    eax,edi
c0024d25:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024d29:	c1 e0 07             	shl    eax,0x7
c0024d2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024d30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d34:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d3e:	53                   	push   ebx
c0024d3f:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024d45:	e8 d6 eb ff ff       	call   c0023920 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d4a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024d4e:	83 c4 10             	add    esp,0x10
c0024d51:	b8 01 00 00 00       	mov    eax,0x1
c0024d56:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024d5b:	0f 84 8a 01 00 00    	je     c0024eeb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024d61:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024d67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024d69:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d6f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d75:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0024d79:	c1 e1 05             	shl    ecx,0x5
c0024d7c:	01 c8                	add    eax,ecx
c0024d7e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d80:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024d86:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024d8c:	89 08                	mov    DWORD PTR [eax],ecx
c0024d8e:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024d94:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d9a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024da0:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024da3:	52                   	push   edx
c0024da4:	68 90 00 00 00       	push   0x90
c0024da9:	6a 00                	push   0x0
c0024dab:	53                   	push   ebx
c0024dac:	e8 c7 b9 fd ff       	call   c0000778 <memset>
c0024db1:	83 c4 0c             	add    esp,0xc
c0024db4:	8d 43 40             	lea    eax,[ebx+0x40]
c0024db7:	6a 0c                	push   0xc
c0024db9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024dbd:	50                   	push   eax
c0024dbe:	e8 81 b9 fd ff       	call   c0000744 <memcpy>
c0024dc3:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0024dc9:	89 ea                	mov    edx,ebp
c0024dcb:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024dd1:	c1 ea 18             	shr    edx,0x18
c0024dd4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024dd8:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024ddb:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024dde:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024de2:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024de8:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024dee:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024df3:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0024df7:	09 c8                	or     eax,ecx
c0024df9:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024dfd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e03:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e06:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e0d:	66 25 00 7f          	and    ax,0x7f00
c0024e11:	66 0d 27 80          	or     ax,0x8027
c0024e15:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e18:	89 e8                	mov    eax,ebp
c0024e1a:	c1 e8 10             	shr    eax,0x10
c0024e1d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e20:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e24:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e2b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e2e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024e32:	83 c4 10             	add    esp,0x10
c0024e35:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e39:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024e3d:	31 c0                	xor    eax,eax
c0024e3f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0024e45:	80 e1 88             	and    cl,0x88
c0024e48:	74 0a                	je     c0024e54 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0024e4a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e4f:	74 0a                	je     c0024e5b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024e51:	40                   	inc    eax
c0024e52:	eb eb                	jmp    c0024e3f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0024e54:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e59:	75 0f                	jne    c0024e6a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0024e5b:	83 ec 0c             	sub    esp,0xc
c0024e5e:	68 45 cb 02 c0       	push   0xc002cb45
c0024e63:	e8 c1 53 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0024e68:	eb 3a                	jmp    c0024ea4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0024e6a:	b8 01 00 00 00       	mov    eax,0x1
c0024e6f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024e73:	c1 e7 07             	shl    edi,0x7
c0024e76:	d3 e0                	shl    eax,cl
c0024e78:	03 3c 24             	add    edi,DWORD PTR [esp]
c0024e7b:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0024e81:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0024e87:	85 d0                	test   eax,edx
c0024e89:	74 23                	je     c0024eae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0024e8b:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0024e91:	0f ba e2 1e          	bt     edx,0x1e
c0024e95:	73 ea                	jae    c0024e81 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0024e97:	83 ec 0c             	sub    esp,0xc
c0024e9a:	68 d7 cb 02 c0       	push   0xc002cbd7
c0024e9f:	e8 0a dd fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0024ea4:	83 c4 10             	add    esp,0x10
c0024ea7:	b8 01 00 00 00       	mov    eax,0x1
c0024eac:	eb 3d                	jmp    c0024eeb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024eae:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0024eb4:	0f ba e0 1e          	bt     eax,0x1e
c0024eb8:	73 0a                	jae    c0024ec4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0024eba:	83 ec 0c             	sub    esp,0xc
c0024ebd:	68 ea cb 02 c0       	push   0xc002cbea
c0024ec2:	eb db                	jmp    c0024e9f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0024ec4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0024ec9:	74 1e                	je     c0024ee9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024ecb:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0024ed0:	74 17                	je     c0024ee9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024ed2:	50                   	push   eax
c0024ed3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ed7:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0024edd:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0024ee1:	e8 5e b8 fd ff       	call   c0000744 <memcpy>
c0024ee6:	83 c4 10             	add    esp,0x10
c0024ee9:	31 c0                	xor    eax,eax
c0024eeb:	83 c4 1c             	add    esp,0x1c
c0024eee:	5b                   	pop    ebx
c0024eef:	5e                   	pop    esi
c0024ef0:	5f                   	pop    edi
c0024ef1:	5d                   	pop    ebp
c0024ef2:	c3                   	ret    
c0024ef3:	90                   	nop

c0024ef4 <SATAPI::eject()>:
c0024ef4:	57                   	push   edi
c0024ef5:	b9 03 00 00 00       	mov    ecx,0x3
c0024efa:	53                   	push   ebx
c0024efb:	83 ec 14             	sub    esp,0x14
c0024efe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024f02:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024f06:	fc                   	cld    
c0024f07:	31 c0                	xor    eax,eax
c0024f09:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024f0b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024f10:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024f15:	50                   	push   eax
c0024f16:	6a 00                	push   0x0
c0024f18:	6a 00                	push   0x0
c0024f1a:	6a 00                	push   0x0
c0024f1c:	6a 00                	push   0x0
c0024f1e:	6a 02                	push   0x2
c0024f20:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024f24:	50                   	push   eax
c0024f25:	53                   	push   ebx
c0024f26:	e8 c5 fd ff ff       	call   c0024cf0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f2b:	83 c4 14             	add    esp,0x14
c0024f2e:	53                   	push   ebx
c0024f2f:	e8 72 fd ff ff       	call   c0024ca6 <SATAPI::diskRemoved()>
c0024f34:	83 c4 24             	add    esp,0x24
c0024f37:	31 c0                	xor    eax,eax
c0024f39:	5b                   	pop    ebx
c0024f3a:	5f                   	pop    edi
c0024f3b:	c3                   	ret    

c0024f3c <SATAPI::detectMedia()>:
c0024f3c:	56                   	push   esi
c0024f3d:	53                   	push   ebx
c0024f3e:	83 ec 28             	sub    esp,0x28
c0024f41:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f45:	6a 0c                	push   0xc
c0024f47:	6a 00                	push   0x0
c0024f49:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024f4d:	56                   	push   esi
c0024f4e:	e8 25 b8 fd ff       	call   c0000778 <memset>
c0024f53:	83 c4 0c             	add    esp,0xc
c0024f56:	6a 00                	push   0x0
c0024f58:	6a 00                	push   0x0
c0024f5a:	6a 00                	push   0x0
c0024f5c:	6a 00                	push   0x0
c0024f5e:	6a 00                	push   0x0
c0024f60:	56                   	push   esi
c0024f61:	53                   	push   ebx
c0024f62:	e8 89 fd ff ff       	call   c0024cf0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f67:	83 c4 1c             	add    esp,0x1c
c0024f6a:	6a 0c                	push   0xc
c0024f6c:	6a 00                	push   0x0
c0024f6e:	56                   	push   esi
c0024f6f:	e8 04 b8 fd ff       	call   c0000778 <memset>
c0024f74:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024f79:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024f7e:	83 c4 0c             	add    esp,0xc
c0024f81:	6a 01                	push   0x1
c0024f83:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024f87:	50                   	push   eax
c0024f88:	6a 00                	push   0x0
c0024f8a:	6a 00                	push   0x0
c0024f8c:	6a 12                	push   0x12
c0024f8e:	56                   	push   esi
c0024f8f:	53                   	push   ebx
c0024f90:	e8 5b fd ff ff       	call   c0024cf0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f95:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024f99:	83 c4 20             	add    esp,0x20
c0024f9c:	83 e0 7f             	and    eax,0x7f
c0024f9f:	3c 70                	cmp    al,0x70
c0024fa1:	74 15                	je     c0024fb8 <SATAPI::detectMedia()+0x7c>
c0024fa3:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024faa:	75 0c                	jne    c0024fb8 <SATAPI::detectMedia()+0x7c>
c0024fac:	83 ec 0c             	sub    esp,0xc
c0024faf:	53                   	push   ebx
c0024fb0:	e8 0d fd ff ff       	call   c0024cc2 <SATAPI::diskInserted()>
c0024fb5:	83 c4 10             	add    esp,0x10
c0024fb8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024fbc:	83 e0 0f             	and    eax,0xf
c0024fbf:	3c 02                	cmp    al,0x2
c0024fc1:	75 1b                	jne    c0024fde <SATAPI::detectMedia()+0xa2>
c0024fc3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024fc8:	75 2d                	jne    c0024ff7 <SATAPI::detectMedia()+0xbb>
c0024fca:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024fd1:	74 24                	je     c0024ff7 <SATAPI::detectMedia()+0xbb>
c0024fd3:	83 ec 0c             	sub    esp,0xc
c0024fd6:	53                   	push   ebx
c0024fd7:	e8 ca fc ff ff       	call   c0024ca6 <SATAPI::diskRemoved()>
c0024fdc:	eb 16                	jmp    c0024ff4 <SATAPI::detectMedia()+0xb8>
c0024fde:	84 c0                	test   al,al
c0024fe0:	75 15                	jne    c0024ff7 <SATAPI::detectMedia()+0xbb>
c0024fe2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024fe9:	75 0c                	jne    c0024ff7 <SATAPI::detectMedia()+0xbb>
c0024feb:	83 ec 0c             	sub    esp,0xc
c0024fee:	53                   	push   ebx
c0024fef:	e8 ce fc ff ff       	call   c0024cc2 <SATAPI::diskInserted()>
c0024ff4:	83 c4 10             	add    esp,0x10
c0024ff7:	83 c4 24             	add    esp,0x24
c0024ffa:	5b                   	pop    ebx
c0024ffb:	5e                   	pop    esi
c0024ffc:	c3                   	ret    
c0024ffd:	90                   	nop

c0024ffe <SATAPI::open(int, int, void*)>:
c0024ffe:	56                   	push   esi
c0024fff:	53                   	push   ebx
c0025000:	50                   	push   eax
c0025001:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025005:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025009:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025013:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025019:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025023:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025027:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025031:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025037:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002503e:	e8 9c ae fe ff       	call   c000fedf <Phys::allocatePage()>
c0025043:	89 c6                	mov    esi,eax
c0025045:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002504b:	81 c6 00 10 00 00    	add    esi,0x1000
c0025051:	e8 89 ae fe ff       	call   c000fedf <Phys::allocatePage()>
c0025056:	39 c6                	cmp    esi,eax
c0025058:	74 10                	je     c002506a <SATAPI::open(int, int, void*)+0x6c>
c002505a:	83 ec 0c             	sub    esp,0xc
c002505d:	68 ff cb 02 c0       	push   0xc002cbff
c0025062:	e8 c2 51 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0025067:	83 c4 10             	add    esp,0x10
c002506a:	83 ec 0c             	sub    esp,0xc
c002506d:	6a 02                	push   0x2
c002506f:	e8 ad ca fe ff       	call   c0011b21 <Virt::allocateKernelVirtualPages(int)>
c0025074:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002507a:	e8 32 cc fe ff       	call   c0011cb1 <Virt::getAKernelVAS()>
c002507f:	6a 03                	push   0x3
c0025081:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025087:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002508d:	50                   	push   eax
c002508e:	e8 59 d1 fe ff       	call   c00121ec <VAS::mapPage(unsigned long, unsigned long, int)>
c0025093:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002509a:	83 c4 14             	add    esp,0x14
c002509d:	53                   	push   ebx
c002509e:	e8 99 fe ff ff       	call   c0024f3c <SATAPI::detectMedia()>
c00250a3:	83 c4 14             	add    esp,0x14
c00250a6:	31 c0                	xor    eax,eax
c00250a8:	5b                   	pop    ebx
c00250a9:	5e                   	pop    esi
c00250aa:	c3                   	ret    
c00250ab:	90                   	nop

c00250ac <SATAPI::read(unsigned long long, int, void*)>:
c00250ac:	55                   	push   ebp
c00250ad:	57                   	push   edi
c00250ae:	56                   	push   esi
c00250af:	53                   	push   ebx
c00250b0:	83 ec 1c             	sub    esp,0x1c
c00250b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00250b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00250bb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00250bf:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00250c6:	74 19                	je     c00250e1 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00250c8:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00250cd:	7e 2e                	jle    c00250fd <SATAPI::read(unsigned long long, int, void*)+0x51>
c00250cf:	83 ec 0c             	sub    esp,0xc
c00250d2:	68 15 cc 02 c0       	push   0xc002cc15
c00250d7:	e8 4d 51 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c00250dc:	83 c4 10             	add    esp,0x10
c00250df:	eb 1c                	jmp    c00250fd <SATAPI::read(unsigned long long, int, void*)+0x51>
c00250e1:	83 ec 0c             	sub    esp,0xc
c00250e4:	55                   	push   ebp
c00250e5:	e8 52 fe ff ff       	call   c0024f3c <SATAPI::detectMedia()>
c00250ea:	83 c4 10             	add    esp,0x10
c00250ed:	b8 02 00 00 00       	mov    eax,0x2
c00250f2:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00250f9:	75 cd                	jne    c00250c8 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00250fb:	eb 49                	jmp    c0025146 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00250fd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025101:	b9 03 00 00 00       	mov    ecx,0x3
c0025106:	fc                   	cld    
c0025107:	31 c0                	xor    eax,eax
c0025109:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002510b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025110:	89 d8                	mov    eax,ebx
c0025112:	86 e0                	xchg   al,ah
c0025114:	c1 c0 10             	rol    eax,0x10
c0025117:	86 e0                	xchg   al,ah
c0025119:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002511d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025121:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025125:	50                   	push   eax
c0025126:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002512a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002512e:	56                   	push   esi
c002512f:	53                   	push   ebx
c0025130:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025134:	c1 e0 0b             	shl    eax,0xb
c0025137:	50                   	push   eax
c0025138:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002513c:	50                   	push   eax
c002513d:	55                   	push   ebp
c002513e:	e8 ad fb ff ff       	call   c0024cf0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025143:	83 c4 20             	add    esp,0x20
c0025146:	83 c4 1c             	add    esp,0x1c
c0025149:	5b                   	pop    ebx
c002514a:	5e                   	pop    esi
c002514b:	5f                   	pop    edi
c002514c:	5d                   	pop    ebp
c002514d:	c3                   	ret    

c002514e <AVX::open(int, int, void*)>:
c002514e:	83 ec 0c             	sub    esp,0xc
c0025151:	e8 42 11 00 00       	call   c0026298 <avxInit>
c0025156:	b8 00 00 00 00       	mov    eax,0x0
c002515b:	83 c4 0c             	add    esp,0xc
c002515e:	c3                   	ret    
c002515f:	90                   	nop

c0025160 <AVX::close(int, int, void*)>:
c0025160:	83 ec 0c             	sub    esp,0xc
c0025163:	e8 31 11 00 00       	call   c0026299 <avxClose>
c0025168:	b8 00 00 00 00       	mov    eax,0x0
c002516d:	83 c4 0c             	add    esp,0xc
c0025170:	c3                   	ret    
c0025171:	90                   	nop

c0025172 <AVX::available()>:
c0025172:	83 ec 0c             	sub    esp,0xc
c0025175:	e8 16 11 00 00       	call   c0026290 <avxDetect>
c002517a:	85 c0                	test   eax,eax
c002517c:	0f 95 c0             	setne  al
c002517f:	83 c4 0c             	add    esp,0xc
c0025182:	c3                   	ret    
c0025183:	90                   	nop

c0025184 <AVX::save(void*)>:
c0025184:	83 ec 0c             	sub    esp,0xc
c0025187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002518b:	83 ec 0c             	sub    esp,0xc
c002518e:	50                   	push   eax
c002518f:	e8 02 11 00 00       	call   c0026296 <avxSave>
c0025194:	83 c4 10             	add    esp,0x10
c0025197:	90                   	nop
c0025198:	83 c4 0c             	add    esp,0xc
c002519b:	c3                   	ret    

c002519c <AVX::load(void*)>:
c002519c:	83 ec 0c             	sub    esp,0xc
c002519f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251a3:	83 ec 0c             	sub    esp,0xc
c00251a6:	50                   	push   eax
c00251a7:	e8 eb 10 00 00       	call   c0026297 <avxLoad>
c00251ac:	83 c4 10             	add    esp,0x10
c00251af:	90                   	nop
c00251b0:	83 c4 0c             	add    esp,0xc
c00251b3:	c3                   	ret    

c00251b4 <AVX::AVX()>:
c00251b4:	83 ec 0c             	sub    esp,0xc
c00251b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251bb:	83 ec 08             	sub    esp,0x8
c00251be:	68 78 cc 02 c0       	push   0xc002cc78
c00251c3:	50                   	push   eax
c00251c4:	e8 0d f3 fe ff       	call   c00144d6 <FPU::FPU(char const*)>
c00251c9:	83 c4 10             	add    esp,0x10
c00251cc:	ba 88 cc 02 c0       	mov    edx,0xc002cc88
c00251d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251d5:	89 10                	mov    DWORD PTR [eax],edx
c00251d7:	90                   	nop
c00251d8:	83 c4 0c             	add    esp,0xc
c00251db:	c3                   	ret    

c00251dc <MMX::available()>:
c00251dc:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00251e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00251e7:	83 e0 20             	and    eax,0x20
c00251ea:	84 c0                	test   al,al
c00251ec:	0f 95 c0             	setne  al
c00251ef:	c3                   	ret    

c00251f0 <MMX::open(int, int, void*)>:
c00251f0:	83 ec 0c             	sub    esp,0xc
c00251f3:	e8 24 11 00 00       	call   c002631c <x87Init>
c00251f8:	b8 00 00 00 00       	mov    eax,0x0
c00251fd:	83 c4 0c             	add    esp,0xc
c0025200:	c3                   	ret    
c0025201:	90                   	nop

c0025202 <MMX::close(int, int, void*)>:
c0025202:	83 ec 0c             	sub    esp,0xc
c0025205:	e8 2c 11 00 00       	call   c0026336 <x87Close>
c002520a:	b8 00 00 00 00       	mov    eax,0x0
c002520f:	83 c4 0c             	add    esp,0xc
c0025212:	c3                   	ret    
c0025213:	90                   	nop

c0025214 <MMX::save(void*)>:
c0025214:	83 ec 0c             	sub    esp,0xc
c0025217:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002521b:	83 ec 0c             	sub    esp,0xc
c002521e:	50                   	push   eax
c002521f:	e8 ed 10 00 00       	call   c0026311 <x87Save>
c0025224:	83 c4 10             	add    esp,0x10
c0025227:	90                   	nop
c0025228:	83 c4 0c             	add    esp,0xc
c002522b:	c3                   	ret    

c002522c <MMX::load(void*)>:
c002522c:	83 ec 0c             	sub    esp,0xc
c002522f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025233:	83 ec 0c             	sub    esp,0xc
c0025236:	50                   	push   eax
c0025237:	e8 db 10 00 00       	call   c0026317 <x87Load>
c002523c:	83 c4 10             	add    esp,0x10
c002523f:	90                   	nop
c0025240:	83 c4 0c             	add    esp,0xc
c0025243:	c3                   	ret    

c0025244 <MMX::MMX()>:
c0025244:	83 ec 0c             	sub    esp,0xc
c0025247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002524b:	83 ec 08             	sub    esp,0x8
c002524e:	68 b8 cc 02 c0       	push   0xc002ccb8
c0025253:	50                   	push   eax
c0025254:	e8 7d f2 fe ff       	call   c00144d6 <FPU::FPU(char const*)>
c0025259:	83 c4 10             	add    esp,0x10
c002525c:	ba c8 cc 02 c0       	mov    edx,0xc002ccc8
c0025261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025265:	89 10                	mov    DWORD PTR [eax],edx
c0025267:	90                   	nop
c0025268:	83 c4 0c             	add    esp,0xc
c002526b:	c3                   	ret    

c002526c <SSE::open(int, int, void*)>:
c002526c:	83 ec 0c             	sub    esp,0xc
c002526f:	e8 60 10 00 00       	call   c00262d4 <sseInit>
c0025274:	b8 00 00 00 00       	mov    eax,0x0
c0025279:	83 c4 0c             	add    esp,0xc
c002527c:	c3                   	ret    
c002527d:	90                   	nop

c002527e <SSE::close(int, int, void*)>:
c002527e:	83 ec 0c             	sub    esp,0xc
c0025281:	e8 5e 10 00 00       	call   c00262e4 <sseClose>
c0025286:	b8 00 00 00 00       	mov    eax,0x0
c002528b:	83 c4 0c             	add    esp,0xc
c002528e:	c3                   	ret    
c002528f:	90                   	nop

c0025290 <SSE::available()>:
c0025290:	83 ec 1c             	sub    esp,0x1c
c0025293:	e8 18 10 00 00       	call   c00262b0 <absolutelyNoChanceInHell>
c0025298:	85 c0                	test   eax,eax
c002529a:	0f 95 c0             	setne  al
c002529d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00252a1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00252a5:	83 c4 1c             	add    esp,0x1c
c00252a8:	c3                   	ret    
c00252a9:	90                   	nop

c00252aa <SSE::save(void*)>:
c00252aa:	83 ec 0c             	sub    esp,0xc
c00252ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252b1:	83 ec 0c             	sub    esp,0xc
c00252b4:	50                   	push   eax
c00252b5:	e8 0e 10 00 00       	call   c00262c8 <sseSave>
c00252ba:	83 c4 10             	add    esp,0x10
c00252bd:	90                   	nop
c00252be:	83 c4 0c             	add    esp,0xc
c00252c1:	c3                   	ret    

c00252c2 <SSE::load(void*)>:
c00252c2:	83 ec 0c             	sub    esp,0xc
c00252c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252c9:	83 ec 0c             	sub    esp,0xc
c00252cc:	50                   	push   eax
c00252cd:	e8 fc 0f 00 00       	call   c00262ce <sseLoad>
c00252d2:	83 c4 10             	add    esp,0x10
c00252d5:	90                   	nop
c00252d6:	83 c4 0c             	add    esp,0xc
c00252d9:	c3                   	ret    

c00252da <SSE::SSE()>:
c00252da:	83 ec 0c             	sub    esp,0xc
c00252dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252e1:	83 ec 08             	sub    esp,0x8
c00252e4:	68 f8 cc 02 c0       	push   0xc002ccf8
c00252e9:	50                   	push   eax
c00252ea:	e8 e7 f1 fe ff       	call   c00144d6 <FPU::FPU(char const*)>
c00252ef:	83 c4 10             	add    esp,0x10
c00252f2:	ba 08 cd 02 c0       	mov    edx,0xc002cd08
c00252f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252fb:	89 10                	mov    DWORD PTR [eax],edx
c00252fd:	90                   	nop
c00252fe:	83 c4 0c             	add    esp,0xc
c0025301:	c3                   	ret    

c0025302 <x87::open(int, int, void*)>:
c0025302:	83 ec 0c             	sub    esp,0xc
c0025305:	e8 12 10 00 00       	call   c002631c <x87Init>
c002530a:	b8 00 00 00 00       	mov    eax,0x0
c002530f:	83 c4 0c             	add    esp,0xc
c0025312:	c3                   	ret    
c0025313:	90                   	nop

c0025314 <x87::close(int, int, void*)>:
c0025314:	83 ec 0c             	sub    esp,0xc
c0025317:	e8 1a 10 00 00       	call   c0026336 <x87Close>
c002531c:	b8 00 00 00 00       	mov    eax,0x0
c0025321:	83 c4 0c             	add    esp,0xc
c0025324:	c3                   	ret    
c0025325:	90                   	nop

c0025326 <x87::available()>:
c0025326:	83 ec 0c             	sub    esp,0xc
c0025329:	e8 c8 0f 00 00       	call   c00262f6 <x87Detect>
c002532e:	85 c0                	test   eax,eax
c0025330:	0f 95 c0             	setne  al
c0025333:	83 c4 0c             	add    esp,0xc
c0025336:	c3                   	ret    
c0025337:	90                   	nop

c0025338 <x87::save(void*)>:
c0025338:	83 ec 0c             	sub    esp,0xc
c002533b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002533f:	83 ec 0c             	sub    esp,0xc
c0025342:	50                   	push   eax
c0025343:	e8 c9 0f 00 00       	call   c0026311 <x87Save>
c0025348:	83 c4 10             	add    esp,0x10
c002534b:	90                   	nop
c002534c:	83 c4 0c             	add    esp,0xc
c002534f:	c3                   	ret    

c0025350 <x87::load(void*)>:
c0025350:	83 ec 0c             	sub    esp,0xc
c0025353:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025357:	83 ec 0c             	sub    esp,0xc
c002535a:	50                   	push   eax
c002535b:	e8 b7 0f 00 00       	call   c0026317 <x87Load>
c0025360:	83 c4 10             	add    esp,0x10
c0025363:	90                   	nop
c0025364:	83 c4 0c             	add    esp,0xc
c0025367:	c3                   	ret    

c0025368 <x87::x87()>:
c0025368:	83 ec 0c             	sub    esp,0xc
c002536b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002536f:	83 ec 08             	sub    esp,0x8
c0025372:	68 38 cd 02 c0       	push   0xc002cd38
c0025377:	50                   	push   eax
c0025378:	e8 59 f1 fe ff       	call   c00144d6 <FPU::FPU(char const*)>
c002537d:	83 c4 10             	add    esp,0x10
c0025380:	ba 48 cd 02 c0       	mov    edx,0xc002cd48
c0025385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025389:	89 10                	mov    DWORD PTR [eax],edx
c002538b:	90                   	nop
c002538c:	83 c4 0c             	add    esp,0xc
c002538f:	c3                   	ret    

c0025390 <APIC::disable()>:
c0025390:	90                   	nop
c0025391:	c3                   	ret    

c0025392 <APIC::close(int, int, void*)>:
c0025392:	55                   	push   ebp
c0025393:	89 e5                	mov    ebp,esp
c0025395:	83 ec 08             	sub    esp,0x8
c0025398:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002539b:	8b 00                	mov    eax,DWORD PTR [eax]
c002539d:	83 c0 3c             	add    eax,0x3c
c00253a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00253a2:	83 ec 0c             	sub    esp,0xc
c00253a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253a8:	ff d0                	call   eax
c00253aa:	83 c4 10             	add    esp,0x10
c00253ad:	b8 00 00 00 00       	mov    eax,0x0
c00253b2:	c9                   	leave  
c00253b3:	c3                   	ret    

c00253b4 <IOAPIC::close(int, int, void*)>:
c00253b4:	b8 00 00 00 00       	mov    eax,0x0
c00253b9:	c3                   	ret    

c00253ba <APIC::io_wait()>:
c00253ba:	eb 00                	jmp    c00253bc <APIC::io_wait()+0x2>
c00253bc:	eb 00                	jmp    c00253be <APIC::io_wait()+0x4>
c00253be:	90                   	nop
c00253bf:	c3                   	ret    

c00253c0 <APIC::getBase()>:
c00253c0:	55                   	push   ebp
c00253c1:	89 e5                	mov    ebp,esp
c00253c3:	83 ec 18             	sub    esp,0x18
c00253c6:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00253cb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00253d1:	83 e0 08             	and    eax,0x8
c00253d4:	84 c0                	test   al,al
c00253d6:	75 07                	jne    c00253df <APIC::getBase()+0x1f>
c00253d8:	b8 00 00 00 00       	mov    eax,0x0
c00253dd:	eb 21                	jmp    c0025400 <APIC::getBase()+0x40>
c00253df:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c00253e4:	83 ec 08             	sub    esp,0x8
c00253e7:	6a 1b                	push   0x1b
c00253e9:	50                   	push   eax
c00253ea:	e8 f9 99 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00253ef:	83 c4 10             	add    esp,0x10
c00253f2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00253f5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00253f8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00253fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025400:	c9                   	leave  
c0025401:	c3                   	ret    

c0025402 <APIC::eoi(unsigned char)>:
c0025402:	55                   	push   ebp
c0025403:	89 e5                	mov    ebp,esp
c0025405:	83 ec 28             	sub    esp,0x28
c0025408:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002540b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002540e:	83 ec 0c             	sub    esp,0xc
c0025411:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025414:	e8 a7 ff ff ff       	call   c00253c0 <APIC::getBase()>
c0025419:	83 c4 10             	add    esp,0x10
c002541c:	05 b0 00 00 00       	add    eax,0xb0
c0025421:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025424:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025427:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002542d:	90                   	nop
c002542e:	c9                   	leave  
c002542f:	c3                   	ret    

c0025430 <APIC::open(int, int, void*)>:
c0025430:	55                   	push   ebp
c0025431:	89 e5                	mov    ebp,esp
c0025433:	57                   	push   edi
c0025434:	56                   	push   esi
c0025435:	53                   	push   ebx
c0025436:	83 ec 2c             	sub    esp,0x2c
c0025439:	83 ec 0c             	sub    esp,0xc
c002543c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002543f:	e8 7c ff ff ff       	call   c00253c0 <APIC::getBase()>
c0025444:	83 c4 10             	add    esp,0x10
c0025447:	89 c2                	mov    edx,eax
c0025449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002544c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025452:	0f b6 f8             	movzx  edi,al
c0025455:	89 d0                	mov    eax,edx
c0025457:	ba 00 00 00 00       	mov    edx,0x0
c002545c:	89 c1                	mov    ecx,eax
c002545e:	80 e5 ff             	and    ch,0xff
c0025461:	89 cb                	mov    ebx,ecx
c0025463:	0f b6 f2             	movzx  esi,dl
c0025466:	89 d8                	mov    eax,ebx
c0025468:	89 f2                	mov    edx,esi
c002546a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002546d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025470:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025474:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025478:	83 e0 00             	and    eax,0x0
c002547b:	09 d0                	or     eax,edx
c002547d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025484:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002548a:	8d 50 01             	lea    edx,[eax+0x1]
c002548d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025490:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025496:	0f b6 d0             	movzx  edx,al
c0025499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002549c:	83 c2 08             	add    edx,0x8
c002549f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00254a3:	0f b6 c9             	movzx  ecx,cl
c00254a6:	81 c9 00 00 01 00    	or     ecx,0x10000
c00254ac:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00254b0:	83 ec 0c             	sub    esp,0xc
c00254b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254b6:	e8 05 ff ff ff       	call   c00253c0 <APIC::getBase()>
c00254bb:	83 c4 10             	add    esp,0x10
c00254be:	05 f0 00 00 00       	add    eax,0xf0
c00254c3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00254c6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00254cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00254ce:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00254d5:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00254dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254df:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00254e2:	89 10                	mov    DWORD PTR [eax],edx
c00254e4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00254eb:	a1 90 09 03 c0       	mov    eax,ds:0xc0030990
c00254f0:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00254f3:	7d 7c                	jge    c0025571 <APIC::open(int, int, void*)+0x141>
c00254f5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254f8:	8b 04 85 a0 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf660]
c00254ff:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025502:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025505:	8b 04 85 a0 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf660]
c002550c:	c1 e8 08             	shr    eax,0x8
c002550f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025513:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025516:	8b 04 85 a0 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf660]
c002551d:	c1 e8 18             	shr    eax,0x18
c0025520:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025523:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025527:	75 40                	jne    c0025569 <APIC::open(int, int, void*)+0x139>
c0025529:	83 ec 0c             	sub    esp,0xc
c002552c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002552f:	e8 8c fe ff ff       	call   c00253c0 <APIC::getBase()>
c0025534:	83 c4 10             	add    esp,0x10
c0025537:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002553b:	75 07                	jne    c0025544 <APIC::open(int, int, void*)+0x114>
c002553d:	ba 60 03 00 00       	mov    edx,0x360
c0025542:	eb 05                	jmp    c0025549 <APIC::open(int, int, void*)+0x119>
c0025544:	ba 50 03 00 00       	mov    edx,0x350
c0025549:	01 d0                	add    eax,edx
c002554b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002554e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025551:	8b 00                	mov    eax,DWORD PTR [eax]
c0025553:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025556:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002555d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025561:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025564:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025567:	89 10                	mov    DWORD PTR [eax],edx
c0025569:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002556c:	e9 7a ff ff ff       	jmp    c00254eb <APIC::open(int, int, void*)+0xbb>
c0025571:	b8 00 00 00 00       	mov    eax,0x0
c0025576:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025579:	5b                   	pop    ebx
c002557a:	5e                   	pop    esi
c002557b:	5f                   	pop    edi
c002557c:	5d                   	pop    ebp
c002557d:	c3                   	ret    

c002557e <IOAPIC::IOAPIC()>:
c002557e:	83 ec 0c             	sub    esp,0xc
c0025581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025585:	83 ec 08             	sub    esp,0x8
c0025588:	68 78 cd 02 c0       	push   0xc002cd78
c002558d:	50                   	push   eax
c002558e:	e8 31 ec fe ff       	call   c00141c4 <Device::Device(char const*)>
c0025593:	83 c4 10             	add    esp,0x10
c0025596:	ba a0 ce 02 c0       	mov    edx,0xc002cea0
c002559b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002559f:	89 10                	mov    DWORD PTR [eax],edx
c00255a1:	90                   	nop
c00255a2:	83 c4 0c             	add    esp,0xc
c00255a5:	c3                   	ret    

c00255a6 <APIC::APIC()>:
c00255a6:	53                   	push   ebx
c00255a7:	83 ec 18             	sub    esp,0x18
c00255aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00255ae:	83 ec 08             	sub    esp,0x8
c00255b1:	68 80 cd 02 c0       	push   0xc002cd80
c00255b6:	50                   	push   eax
c00255b7:	e8 74 f3 fe ff       	call   c0014930 <InterruptController::InterruptController(char const*)>
c00255bc:	83 c4 10             	add    esp,0x10
c00255bf:	ba 58 ce 02 c0       	mov    edx,0xc002ce58
c00255c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00255c8:	89 10                	mov    DWORD PTR [eax],edx
c00255ca:	a0 60 24 03 c0       	mov    al,ds:0xc0032460
c00255cf:	83 f0 01             	xor    eax,0x1
c00255d2:	84 c0                	test   al,al
c00255d4:	0f 84 a1 00 00 00    	je     c002567b <APIC::APIC()+0xd5>
c00255da:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00255df:	a0 40 0a 03 c0       	mov    al,ds:0xc0030a40
c00255e4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00255e8:	0f 83 86 00 00 00    	jae    c0025674 <APIC::APIC()+0xce>
c00255ee:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00255f6:	83 ec 0c             	sub    esp,0xc
c00255f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00255fd:	e8 3e a2 fe ff       	call   c000f840 <malloc>
c0025602:	83 c4 10             	add    esp,0x10
c0025605:	89 c3                	mov    ebx,eax
c0025607:	83 ec 0c             	sub    esp,0xc
c002560a:	53                   	push   ebx
c002560b:	e8 6e ff ff ff       	call   c002557e <IOAPIC::IOAPIC()>
c0025610:	83 c4 10             	add    esp,0x10
c0025613:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025617:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002561c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025620:	89 14 85 40 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdbc0],edx
c0025627:	a1 20 24 03 c0       	mov    eax,ds:0xc0032420
c002562c:	40                   	inc    eax
c002562d:	a3 20 24 03 c0       	mov    ds:0xc0032420,eax
c0025632:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0025637:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002563d:	83 ec 08             	sub    esp,0x8
c0025640:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025644:	50                   	push   eax
c0025645:	e8 8a e9 fe ff       	call   c0013fd4 <Device::addChild(Device*)>
c002564a:	83 c4 10             	add    esp,0x10
c002564d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025651:	8b 00                	mov    eax,DWORD PTR [eax]
c0025653:	83 c0 08             	add    eax,0x8
c0025656:	8b 00                	mov    eax,DWORD PTR [eax]
c0025658:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002565d:	6a 00                	push   0x0
c002565f:	6a 00                	push   0x0
c0025661:	52                   	push   edx
c0025662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025666:	ff d0                	call   eax
c0025668:	83 c4 10             	add    esp,0x10
c002566b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002566f:	e9 6b ff ff ff       	jmp    c00255df <APIC::APIC()+0x39>
c0025674:	c6 05 60 24 03 c0 01 	mov    BYTE PTR ds:0xc0032460,0x1
c002567b:	90                   	nop
c002567c:	83 c4 18             	add    esp,0x18
c002567f:	5b                   	pop    ebx
c0025680:	c3                   	ret    
c0025681:	90                   	nop

c0025682 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025682:	55                   	push   ebp
c0025683:	89 e5                	mov    ebp,esp
c0025685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025688:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002568e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025691:	72 1d                	jb     c00256b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025696:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002569c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002569f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00256a5:	01 d0                	add    eax,edx
c00256a7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00256aa:	73 04                	jae    c00256b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00256ac:	b0 01                	mov    al,0x1
c00256ae:	eb 02                	jmp    c00256b2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00256b0:	b0 00                	mov    al,0x0
c00256b2:	5d                   	pop    ebp
c00256b3:	c3                   	ret    

c00256b4 <IOAPIC::read(int)>:
c00256b4:	55                   	push   ebp
c00256b5:	89 e5                	mov    ebp,esp
c00256b7:	83 ec 10             	sub    esp,0x10
c00256ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256bd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00256c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00256c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256c9:	0f b6 d0             	movzx  edx,al
c00256cc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256cf:	89 10                	mov    DWORD PTR [eax],edx
c00256d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256d4:	83 c0 10             	add    eax,0x10
c00256d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00256d9:	c9                   	leave  
c00256da:	c3                   	ret    
c00256db:	90                   	nop

c00256dc <IOAPIC::open(int, int, void*)>:
c00256dc:	55                   	push   ebp
c00256dd:	89 e5                	mov    ebp,esp
c00256df:	57                   	push   edi
c00256e0:	56                   	push   esi
c00256e1:	53                   	push   ebx
c00256e2:	83 ec 0c             	sub    esp,0xc
c00256e5:	83 ec 0c             	sub    esp,0xc
c00256e8:	68 ab cd 02 c0       	push   0xc002cdab
c00256ed:	e8 bc d4 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c00256f2:	83 c4 10             	add    esp,0x10
c00256f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00256fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025704:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002570a:	8b 14 85 80 0a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf580]
c0025711:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025714:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002571a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002571d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025723:	8b 14 85 00 0b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf500]
c002572a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002572d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025736:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002573c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002573f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025745:	0f b6 f8             	movzx  edi,al
c0025748:	89 d0                	mov    eax,edx
c002574a:	ba 00 00 00 00       	mov    edx,0x0
c002574f:	89 c1                	mov    ecx,eax
c0025751:	80 e5 ff             	and    ch,0xff
c0025754:	89 cb                	mov    ebx,ecx
c0025756:	0f b6 f2             	movzx  esi,dl
c0025759:	89 d8                	mov    eax,ebx
c002575b:	89 f2                	mov    edx,esi
c002575d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025760:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025763:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025767:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002576b:	83 e0 00             	and    eax,0x0
c002576e:	09 d0                	or     eax,edx
c0025770:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025777:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002577d:	8d 50 01             	lea    edx,[eax+0x1]
c0025780:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025783:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025789:	0f b6 d0             	movzx  edx,al
c002578c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002578f:	83 c2 08             	add    edx,0x8
c0025792:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025796:	0f b6 c9             	movzx  ecx,cl
c0025799:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002579f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00257a3:	83 ec 08             	sub    esp,0x8
c00257a6:	6a 01                	push   0x1
c00257a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257ab:	e8 04 ff ff ff       	call   c00256b4 <IOAPIC::read(int)>
c00257b0:	83 c4 10             	add    esp,0x10
c00257b3:	c1 f8 10             	sar    eax,0x10
c00257b6:	0f b6 c0             	movzx  eax,al
c00257b9:	8d 50 01             	lea    edx,[eax+0x1]
c00257bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257bf:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00257c5:	b8 00 00 00 00       	mov    eax,0x0
c00257ca:	8d 65 f4             	lea    esp,[ebp-0xc]
c00257cd:	5b                   	pop    ebx
c00257ce:	5e                   	pop    esi
c00257cf:	5f                   	pop    edi
c00257d0:	5d                   	pop    ebp
c00257d1:	c3                   	ret    

c00257d2 <IOAPIC::write(int, int)>:
c00257d2:	55                   	push   ebp
c00257d3:	89 e5                	mov    ebp,esp
c00257d5:	83 ec 10             	sub    esp,0x10
c00257d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257db:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00257e1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257e7:	0f b6 d0             	movzx  edx,al
c00257ea:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257ed:	89 10                	mov    DWORD PTR [eax],edx
c00257ef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257f2:	8d 50 10             	lea    edx,[eax+0x10]
c00257f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00257f8:	89 02                	mov    DWORD PTR [edx],eax
c00257fa:	90                   	nop
c00257fb:	c9                   	leave  
c00257fc:	c3                   	ret    
c00257fd:	90                   	nop

c00257fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00257fe:	55                   	push   ebp
c00257ff:	89 e5                	mov    ebp,esp
c0025801:	53                   	push   ebx
c0025802:	83 ec 2c             	sub    esp,0x2c
c0025805:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025808:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002580b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002580e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025811:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025814:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025817:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002581a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002581d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025820:	88 d8                	mov    al,bl
c0025822:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025825:	88 c8                	mov    al,cl
c0025827:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002582a:	88 d0                	mov    al,dl
c002582c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002582f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025833:	83 c0 08             	add    eax,0x8
c0025836:	01 c0                	add    eax,eax
c0025838:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002583b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002583f:	83 c0 08             	add    eax,0x8
c0025842:	01 c0                	add    eax,eax
c0025844:	40                   	inc    eax
c0025845:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025848:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002584b:	50                   	push   eax
c002584c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002584f:	e8 60 fe ff ff       	call   c00256b4 <IOAPIC::read(int)>
c0025854:	83 c4 08             	add    esp,0x8
c0025857:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002585a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025861:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025864:	c1 e0 18             	shl    eax,0x18
c0025867:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002586a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002586d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025870:	52                   	push   edx
c0025871:	50                   	push   eax
c0025872:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025875:	e8 58 ff ff ff       	call   c00257d2 <IOAPIC::write(int, int)>
c002587a:	83 c4 0c             	add    esp,0xc
c002587d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025880:	50                   	push   eax
c0025881:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025884:	e8 2b fe ff ff       	call   c00256b4 <IOAPIC::read(int)>
c0025889:	83 c4 08             	add    esp,0x8
c002588c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002588f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025896:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002589d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00258a4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00258a8:	74 09                	je     c00258b3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00258aa:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00258b1:	eb 07                	jmp    c00258ba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00258b3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00258ba:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00258be:	74 09                	je     c00258c9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00258c0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00258c7:	eb 07                	jmp    c00258d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00258c9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00258d0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00258d7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00258db:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00258de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00258e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00258e4:	52                   	push   edx
c00258e5:	50                   	push   eax
c00258e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258e9:	e8 e4 fe ff ff       	call   c00257d2 <IOAPIC::write(int, int)>
c00258ee:	83 c4 0c             	add    esp,0xc
c00258f1:	90                   	nop
c00258f2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00258f5:	c9                   	leave  
c00258f6:	c3                   	ret    
c00258f7:	90                   	nop

c00258f8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00258f8:	55                   	push   ebp
c00258f9:	89 e5                	mov    ebp,esp
c00258fb:	57                   	push   edi
c00258fc:	56                   	push   esi
c00258fd:	53                   	push   ebx
c00258fe:	83 ec 2c             	sub    esp,0x2c
c0025901:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025904:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025907:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002590b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002590f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025913:	74 5a                	je     c002596f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025915:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025919:	7f 44                	jg     c002595f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002591b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002591e:	05 00 d3 02 c0       	add    eax,0xc002d300
c0025923:	8a 00                	mov    al,BYTE PTR [eax]
c0025925:	0f b6 c0             	movzx  eax,al
c0025928:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002592b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002592e:	66 8b 84 00 20 0a 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf5e0]
c0025936:	0f b7 c0             	movzx  eax,ax
c0025939:	83 e0 02             	and    eax,0x2
c002593c:	85 c0                	test   eax,eax
c002593e:	74 04                	je     c0025944 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025940:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025944:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025947:	66 8b 84 00 20 0a 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf5e0]
c002594f:	0f b7 c0             	movzx  eax,ax
c0025952:	83 e0 08             	and    eax,0x8
c0025955:	85 c0                	test   eax,eax
c0025957:	74 16                	je     c002596f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025959:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002595d:	eb 10                	jmp    c002596f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002595f:	83 ec 0c             	sub    esp,0xc
c0025962:	68 bc cd 02 c0       	push   0xc002cdbc
c0025967:	e8 bd 48 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c002596c:	83 c4 10             	add    esp,0x10
c002596f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025973:	a1 20 24 03 c0       	mov    eax,ds:0xc0032420
c0025978:	83 ec 08             	sub    esp,0x8
c002597b:	50                   	push   eax
c002597c:	68 f4 cd 02 c0       	push   0xc002cdf4
c0025981:	e8 28 d2 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0025986:	83 c4 10             	add    esp,0x10
c0025989:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025990:	a1 20 24 03 c0       	mov    eax,ds:0xc0032420
c0025995:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025998:	7d 67                	jge    c0025a01 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002599a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002599d:	8b 04 85 40 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdbc0]
c00259a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00259a7:	83 ec 08             	sub    esp,0x8
c00259aa:	52                   	push   edx
c00259ab:	50                   	push   eax
c00259ac:	e8 d1 fc ff ff       	call   c0025682 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00259b1:	83 c4 10             	add    esp,0x10
c00259b4:	84 c0                	test   al,al
c00259b6:	74 44                	je     c00259fc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00259b8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00259bb:	8b 1c 85 40 24 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcdbc0]
c00259c2:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00259c6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00259c9:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00259cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259d0:	83 c0 20             	add    eax,0x20
c00259d3:	0f b6 f0             	movzx  esi,al
c00259d6:	b8 00 00 00 00       	mov    eax,0x0
c00259db:	99                   	cdq    
c00259dc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00259df:	0f b6 c9             	movzx  ecx,cl
c00259e2:	83 ec 04             	sub    esp,0x4
c00259e5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00259e8:	57                   	push   edi
c00259e9:	56                   	push   esi
c00259ea:	52                   	push   edx
c00259eb:	50                   	push   eax
c00259ec:	51                   	push   ecx
c00259ed:	53                   	push   ebx
c00259ee:	e8 0b fe ff ff       	call   c00257fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00259f3:	83 c4 20             	add    esp,0x20
c00259f6:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00259fa:	eb 05                	jmp    c0025a01 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00259fc:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00259ff:	eb 8f                	jmp    c0025990 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025a01:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025a04:	83 f0 01             	xor    eax,0x1
c0025a07:	84 c0                	test   al,al
c0025a09:	74 10                	je     c0025a1b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025a0b:	83 ec 0c             	sub    esp,0xc
c0025a0e:	68 0b ce 02 c0       	push   0xc002ce0b
c0025a13:	e8 11 48 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0025a18:	83 c4 10             	add    esp,0x10
c0025a1b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025a1f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025a26:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025a2a:	7f 65                	jg     c0025a91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025a2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a2f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a32:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a39:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a3c:	01 ca                	add    edx,ecx
c0025a3e:	83 c2 54             	add    edx,0x54
c0025a41:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025a45:	85 c0                	test   eax,eax
c0025a47:	75 43                	jne    c0025a8c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a4c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a4f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a56:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a59:	01 ca                	add    edx,ecx
c0025a5b:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025a5e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025a61:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a68:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a6b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a72:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a75:	01 ca                	add    edx,ecx
c0025a77:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025a7d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025a80:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a87:	83 e8 20             	sub    eax,0x20
c0025a8a:	eb 1a                	jmp    c0025aa6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025a8c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025a8f:	eb 95                	jmp    c0025a26 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025a91:	83 ec 0c             	sub    esp,0xc
c0025a94:	68 18 ce 02 c0       	push   0xc002ce18
c0025a99:	e8 8b 47 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0025a9e:	83 c4 10             	add    esp,0x10
c0025aa1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025aa6:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025aa9:	5b                   	pop    ebx
c0025aaa:	5e                   	pop    esi
c0025aab:	5f                   	pop    edi
c0025aac:	5d                   	pop    ebp
c0025aad:	c3                   	ret    

c0025aae <PIC::disable()>:
c0025aae:	55                   	push   ebp
c0025aaf:	89 e5                	mov    ebp,esp
c0025ab1:	83 ec 10             	sub    esp,0x10
c0025ab4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025aba:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025abe:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ac1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ac5:	ee                   	out    dx,al
c0025ac6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025acc:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025ad0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025ad3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025ad7:	ee                   	out    dx,al
c0025ad8:	90                   	nop
c0025ad9:	c9                   	leave  
c0025ada:	c3                   	ret    
c0025adb:	90                   	nop

c0025adc <PIC::close(int, int, void*)>:
c0025adc:	55                   	push   ebp
c0025add:	89 e5                	mov    ebp,esp
c0025adf:	83 ec 08             	sub    esp,0x8
c0025ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ae7:	83 c0 3c             	add    eax,0x3c
c0025aea:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aec:	83 ec 0c             	sub    esp,0xc
c0025aef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025af2:	ff d0                	call   eax
c0025af4:	83 c4 10             	add    esp,0x10
c0025af7:	b8 00 00 00 00       	mov    eax,0x0
c0025afc:	c9                   	leave  
c0025afd:	c3                   	ret    

c0025afe <PIC::PIC()>:
c0025afe:	83 ec 0c             	sub    esp,0xc
c0025b01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b05:	83 ec 08             	sub    esp,0x8
c0025b08:	68 c4 ce 02 c0       	push   0xc002cec4
c0025b0d:	50                   	push   eax
c0025b0e:	e8 1d ee fe ff       	call   c0014930 <InterruptController::InterruptController(char const*)>
c0025b13:	83 c4 10             	add    esp,0x10
c0025b16:	ba f0 ce 02 c0       	mov    edx,0xc002cef0
c0025b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b1f:	89 10                	mov    DWORD PTR [eax],edx
c0025b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b25:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b2b:	0f b6 d0             	movzx  edx,al
c0025b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b32:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025b39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b3d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b43:	0f b6 d0             	movzx  edx,al
c0025b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b4a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b59:	8d 50 01             	lea    edx,[eax+0x1]
c0025b5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b60:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025b66:	0f b6 d0             	movzx  edx,al
c0025b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b6d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025b71:	83 e1 3f             	and    ecx,0x3f
c0025b74:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b82:	0f b6 d0             	movzx  edx,al
c0025b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b89:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b94:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b9a:	0f b6 d0             	movzx  edx,al
c0025b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ba1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025baa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025bb0:	8d 50 01             	lea    edx,[eax+0x1]
c0025bb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025bb7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025bbd:	0f b6 d0             	movzx  edx,al
c0025bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bc4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025bc8:	83 e1 3f             	and    ecx,0x3f
c0025bcb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025bcf:	90                   	nop
c0025bd0:	83 c4 0c             	add    esp,0xc
c0025bd3:	c3                   	ret    

c0025bd4 <PIC::ioWait()>:
c0025bd4:	eb 00                	jmp    c0025bd6 <PIC::ioWait()+0x2>
c0025bd6:	eb 00                	jmp    c0025bd8 <PIC::ioWait()+0x4>
c0025bd8:	90                   	nop
c0025bd9:	c3                   	ret    

c0025bda <PIC::getIRQReg(int)>:
c0025bda:	55                   	push   ebp
c0025bdb:	89 e5                	mov    ebp,esp
c0025bdd:	83 ec 10             	sub    esp,0x10
c0025be0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025be3:	0f b6 c0             	movzx  eax,al
c0025be6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025bec:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025bef:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025bf2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025bf6:	ee                   	out    dx,al
c0025bf7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bfa:	0f b6 c0             	movzx  eax,al
c0025bfd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025c03:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025c06:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025c09:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025c0d:	ee                   	out    dx,al
c0025c0e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025c14:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025c18:	89 c2                	mov    edx,eax
c0025c1a:	ec                   	in     al,dx
c0025c1b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025c1e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025c21:	0f b6 c0             	movzx  eax,al
c0025c24:	c1 e0 08             	shl    eax,0x8
c0025c27:	89 c1                	mov    ecx,eax
c0025c29:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025c2f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025c33:	89 c2                	mov    edx,eax
c0025c35:	ec                   	in     al,dx
c0025c36:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025c39:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025c3c:	0f b6 c0             	movzx  eax,al
c0025c3f:	09 c8                	or     eax,ecx
c0025c41:	c9                   	leave  
c0025c42:	c3                   	ret    
c0025c43:	90                   	nop

c0025c44 <PIC::eoi(unsigned char)>:
c0025c44:	55                   	push   ebp
c0025c45:	89 e5                	mov    ebp,esp
c0025c47:	83 ec 14             	sub    esp,0x14
c0025c4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c4d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025c50:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025c54:	75 1e                	jne    c0025c74 <PIC::eoi(unsigned char)+0x30>
c0025c56:	6a 0b                	push   0xb
c0025c58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c5b:	e8 7a ff ff ff       	call   c0025bda <PIC::getIRQReg(int)>
c0025c60:	83 c4 08             	add    esp,0x8
c0025c63:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025c67:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025c6b:	25 80 00 00 00       	and    eax,0x80
c0025c70:	85 c0                	test   eax,eax
c0025c72:	74 5f                	je     c0025cd3 <PIC::eoi(unsigned char)+0x8f>
c0025c74:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025c78:	75 2d                	jne    c0025ca7 <PIC::eoi(unsigned char)+0x63>
c0025c7a:	6a 0b                	push   0xb
c0025c7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c7f:	e8 56 ff ff ff       	call   c0025bda <PIC::getIRQReg(int)>
c0025c84:	83 c4 08             	add    esp,0x8
c0025c87:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025c8b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c8e:	66 85 c0             	test   ax,ax
c0025c91:	78 14                	js     c0025ca7 <PIC::eoi(unsigned char)+0x63>
c0025c93:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025c99:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025c9d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ca0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ca4:	ee                   	out    dx,al
c0025ca5:	eb 2d                	jmp    c0025cd4 <PIC::eoi(unsigned char)+0x90>
c0025ca7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025cab:	76 12                	jbe    c0025cbf <PIC::eoi(unsigned char)+0x7b>
c0025cad:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025cb3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025cb7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025cba:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025cbe:	ee                   	out    dx,al
c0025cbf:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025cc5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025cc9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ccc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025cd0:	ee                   	out    dx,al
c0025cd1:	eb 01                	jmp    c0025cd4 <PIC::eoi(unsigned char)+0x90>
c0025cd3:	90                   	nop
c0025cd4:	c9                   	leave  
c0025cd5:	c3                   	ret    

c0025cd6 <PIC::remap()>:
c0025cd6:	55                   	push   ebp
c0025cd7:	89 e5                	mov    ebp,esp
c0025cd9:	83 ec 48             	sub    esp,0x48
c0025cdc:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025ce3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025cea:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025cf0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025cf3:	89 c2                	mov    edx,eax
c0025cf5:	ec                   	in     al,dx
c0025cf6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025cf9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025cfc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025cff:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025d05:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025d08:	89 c2                	mov    edx,eax
c0025d0a:	ec                   	in     al,dx
c0025d0b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025d0e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025d11:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025d14:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025d1a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025d1e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025d21:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025d24:	ee                   	out    dx,al
c0025d25:	83 ec 0c             	sub    esp,0xc
c0025d28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d2b:	e8 a4 fe ff ff       	call   c0025bd4 <PIC::ioWait()>
c0025d30:	83 c4 10             	add    esp,0x10
c0025d33:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025d39:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025d3d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025d40:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025d43:	ee                   	out    dx,al
c0025d44:	83 ec 0c             	sub    esp,0xc
c0025d47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d4a:	e8 85 fe ff ff       	call   c0025bd4 <PIC::ioWait()>
c0025d4f:	83 c4 10             	add    esp,0x10
c0025d52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025d55:	0f b6 c0             	movzx  eax,al
c0025d58:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025d5e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025d61:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025d64:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025d67:	ee                   	out    dx,al
c0025d68:	83 ec 0c             	sub    esp,0xc
c0025d6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d6e:	e8 61 fe ff ff       	call   c0025bd4 <PIC::ioWait()>
c0025d73:	83 c4 10             	add    esp,0x10
c0025d76:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d79:	0f b6 c0             	movzx  eax,al
c0025d7c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025d82:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025d85:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025d88:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025d8b:	ee                   	out    dx,al
c0025d8c:	83 ec 0c             	sub    esp,0xc
c0025d8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d92:	e8 3d fe ff ff       	call   c0025bd4 <PIC::ioWait()>
c0025d97:	83 c4 10             	add    esp,0x10
c0025d9a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025da0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025da4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025da7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025daa:	ee                   	out    dx,al
c0025dab:	83 ec 0c             	sub    esp,0xc
c0025dae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025db1:	e8 1e fe ff ff       	call   c0025bd4 <PIC::ioWait()>
c0025db6:	83 c4 10             	add    esp,0x10
c0025db9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025dbf:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025dc3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025dc6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dc9:	ee                   	out    dx,al
c0025dca:	83 ec 0c             	sub    esp,0xc
c0025dcd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dd0:	e8 ff fd ff ff       	call   c0025bd4 <PIC::ioWait()>
c0025dd5:	83 c4 10             	add    esp,0x10
c0025dd8:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025dde:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025de2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025de5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025de8:	ee                   	out    dx,al
c0025de9:	83 ec 0c             	sub    esp,0xc
c0025dec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025def:	e8 e0 fd ff ff       	call   c0025bd4 <PIC::ioWait()>
c0025df4:	83 c4 10             	add    esp,0x10
c0025df7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025dfd:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025e01:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025e04:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025e07:	ee                   	out    dx,al
c0025e08:	83 ec 0c             	sub    esp,0xc
c0025e0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e0e:	e8 c1 fd ff ff       	call   c0025bd4 <PIC::ioWait()>
c0025e13:	83 c4 10             	add    esp,0x10
c0025e16:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025e1a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025e20:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025e23:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025e26:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025e29:	ee                   	out    dx,al
c0025e2a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025e2e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025e34:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025e37:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025e3a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025e3d:	ee                   	out    dx,al
c0025e3e:	90                   	nop
c0025e3f:	c9                   	leave  
c0025e40:	c3                   	ret    
c0025e41:	90                   	nop

c0025e42 <PIC::open(int, int, void*)>:
c0025e42:	55                   	push   ebp
c0025e43:	89 e5                	mov    ebp,esp
c0025e45:	83 ec 18             	sub    esp,0x18
c0025e48:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025e4e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025e52:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e55:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e59:	ee                   	out    dx,al
c0025e5a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025e60:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025e64:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e67:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e6b:	ee                   	out    dx,al
c0025e6c:	83 ec 0c             	sub    esp,0xc
c0025e6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e72:	e8 5f fe ff ff       	call   c0025cd6 <PIC::remap()>
c0025e77:	83 c4 10             	add    esp,0x10
c0025e7a:	b8 00 00 00 00       	mov    eax,0x0
c0025e7f:	c9                   	leave  
c0025e80:	c3                   	ret    
c0025e81:	90                   	nop

c0025e82 <APICTimer::close(int, int, void*)>:
c0025e82:	b8 00 00 00 00       	mov    eax,0x0
c0025e87:	c3                   	ret    

c0025e88 <apicTimerHandler(regs*, void*)>:
c0025e88:	83 ec 0c             	sub    esp,0xc
c0025e8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e91:	99                   	cdq    
c0025e92:	52                   	push   edx
c0025e93:	50                   	push   eax
c0025e94:	6a 00                	push   0x0
c0025e96:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025e9b:	e8 8c 07 00 00       	call   c002662c <__udivdi3>
c0025ea0:	83 c4 10             	add    esp,0x10
c0025ea3:	83 ec 08             	sub    esp,0x8
c0025ea6:	52                   	push   edx
c0025ea7:	50                   	push   eax
c0025ea8:	e8 a8 0a ff ff       	call   c0016955 <timerHandler(unsigned long long)>
c0025ead:	83 c4 10             	add    esp,0x10
c0025eb0:	90                   	nop
c0025eb1:	83 c4 0c             	add    esp,0xc
c0025eb4:	c3                   	ret    
c0025eb5:	90                   	nop

c0025eb6 <APICTimer::write(int)>:
c0025eb6:	53                   	push   ebx
c0025eb7:	83 ec 28             	sub    esp,0x28
c0025eba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025ebe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025ec2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ec8:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0025ecd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ed3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025ed9:	83 ec 0c             	sub    esp,0xc
c0025edc:	50                   	push   eax
c0025edd:	e8 de f4 ff ff       	call   c00253c0 <APIC::getBase()>
c0025ee2:	83 c4 10             	add    esp,0x10
c0025ee5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025ee9:	a1 30 e7 02 c0       	mov    eax,ds:0xc002e730
c0025eee:	8b 15 34 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e734
c0025ef4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025ef8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025efc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f00:	05 e0 03 00 00       	add    eax,0x3e0
c0025f05:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025f0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f0f:	05 80 03 00 00       	add    eax,0x380
c0025f14:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025f1a:	fb                   	sti    
c0025f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025f23:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025f28:	83 d2 00             	adc    edx,0x0
c0025f2b:	89 c1                	mov    ecx,eax
c0025f2d:	89 d3                	mov    ebx,edx
c0025f2f:	a1 30 e7 02 c0       	mov    eax,ds:0xc002e730
c0025f34:	8b 15 34 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e734
c0025f3a:	39 c8                	cmp    eax,ecx
c0025f3c:	89 d0                	mov    eax,edx
c0025f3e:	19 d8                	sbb    eax,ebx
c0025f40:	73 02                	jae    c0025f44 <APICTimer::write(int)+0x8e>
c0025f42:	eb d7                	jmp    c0025f1b <APICTimer::write(int)+0x65>
c0025f44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f48:	05 20 03 00 00       	add    eax,0x320
c0025f4d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025f53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f57:	05 90 03 00 00       	add    eax,0x390
c0025f5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f5e:	f7 d0                	not    eax
c0025f60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025f64:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025f6c:	ba 00 00 00 00       	mov    edx,0x0
c0025f71:	f7 f3                	div    ebx
c0025f73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025f77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f7b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025f81:	0d 00 00 02 00       	or     eax,0x20000
c0025f86:	89 c2                	mov    edx,eax
c0025f88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f8c:	05 20 03 00 00       	add    eax,0x320
c0025f91:	89 10                	mov    DWORD PTR [eax],edx
c0025f93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f97:	05 e0 03 00 00       	add    eax,0x3e0
c0025f9c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025fa2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fa6:	05 80 03 00 00       	add    eax,0x380
c0025fab:	89 c2                	mov    edx,eax
c0025fad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025fb1:	89 02                	mov    DWORD PTR [edx],eax
c0025fb3:	90                   	nop
c0025fb4:	83 c4 28             	add    esp,0x28
c0025fb7:	5b                   	pop    ebx
c0025fb8:	c3                   	ret    
c0025fb9:	90                   	nop

c0025fba <APICTimer::open(int, int, void*)>:
c0025fba:	57                   	push   edi
c0025fbb:	56                   	push   esi
c0025fbc:	53                   	push   ebx
c0025fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fc3:	83 c0 24             	add    eax,0x24
c0025fc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fc8:	83 ec 08             	sub    esp,0x8
c0025fcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fd3:	ff d0                	call   eax
c0025fd5:	83 c4 10             	add    esp,0x10
c0025fd8:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c0025fdd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025fe3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025fe9:	83 ec 0c             	sub    esp,0xc
c0025fec:	50                   	push   eax
c0025fed:	e8 ce f3 ff ff       	call   c00253c0 <APIC::getBase()>
c0025ff2:	83 c4 10             	add    esp,0x10
c0025ff5:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026005:	0f b6 f8             	movzx  edi,al
c0026008:	89 d0                	mov    eax,edx
c002600a:	ba 00 00 00 00       	mov    edx,0x0
c002600f:	89 c1                	mov    ecx,eax
c0026011:	80 e5 ff             	and    ch,0xff
c0026014:	89 cb                	mov    ebx,ecx
c0026016:	0f b6 f2             	movzx  esi,dl
c0026019:	89 d8                	mov    eax,ebx
c002601b:	89 f2                	mov    edx,esi
c002601d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026021:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026024:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026028:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002602c:	83 e0 00             	and    eax,0x0
c002602f:	09 d0                	or     eax,edx
c0026031:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026039:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002603f:	8d 50 01             	lea    edx,[eax+0x1]
c0026042:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026046:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002604c:	0f b6 d0             	movzx  edx,al
c002604f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026053:	83 c2 08             	add    edx,0x8
c0026056:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002605a:	0f b6 c9             	movzx  ecx,cl
c002605d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026063:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002606b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002606f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026079:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002607d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026083:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026087:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002608d:	83 ec 0c             	sub    esp,0xc
c0026090:	51                   	push   ecx
c0026091:	6a 01                	push   0x1
c0026093:	68 88 5e 02 c0       	push   0xc0025e88
c0026098:	52                   	push   edx
c0026099:	50                   	push   eax
c002609a:	e8 b9 de fe ff       	call   c0013f58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002609f:	83 c4 20             	add    esp,0x20
c00260a2:	89 c2                	mov    edx,eax
c00260a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260a8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00260ae:	b8 00 00 00 00       	mov    eax,0x0
c00260b3:	5b                   	pop    ebx
c00260b4:	5e                   	pop    esi
c00260b5:	5f                   	pop    edi
c00260b6:	c3                   	ret    
c00260b7:	90                   	nop

c00260b8 <APICTimer::APICTimer()>:
c00260b8:	83 ec 0c             	sub    esp,0xc
c00260bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260bf:	83 ec 08             	sub    esp,0x8
c00260c2:	68 30 cf 02 c0       	push   0xc002cf30
c00260c7:	50                   	push   eax
c00260c8:	e8 f9 07 ff ff       	call   c00168c6 <Timer::Timer(char const*)>
c00260cd:	83 c4 10             	add    esp,0x10
c00260d0:	ba 44 cf 02 c0       	mov    edx,0xc002cf44
c00260d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260d9:	89 10                	mov    DWORD PTR [eax],edx
c00260db:	90                   	nop
c00260dc:	83 c4 0c             	add    esp,0xc
c00260df:	c3                   	ret    

c00260e0 <PIT::write(int)>:
c00260e0:	83 ec 10             	sub    esp,0x10
c00260e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00260eb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00260f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00260f5:	a3 64 24 03 c0       	mov    ds:0xc0032464,eax
c00260fa:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00260ff:	99                   	cdq    
c0026100:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026104:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026108:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002610f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026114:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026118:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002611d:	ee                   	out    dx,al
c002611e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026122:	0f b6 c0             	movzx  eax,al
c0026125:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002612c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026130:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026134:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026139:	ee                   	out    dx,al
c002613a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002613e:	c1 f8 08             	sar    eax,0x8
c0026141:	0f b6 c0             	movzx  eax,al
c0026144:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002614b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002614f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026153:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026158:	ee                   	out    dx,al
c0026159:	90                   	nop
c002615a:	83 c4 10             	add    esp,0x10
c002615d:	c3                   	ret    

c002615e <pitHandler(regs*, void*)>:
c002615e:	83 ec 0c             	sub    esp,0xc
c0026161:	a1 64 24 03 c0       	mov    eax,ds:0xc0032464
c0026166:	99                   	cdq    
c0026167:	52                   	push   edx
c0026168:	50                   	push   eax
c0026169:	6a 00                	push   0x0
c002616b:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026170:	e8 b7 04 00 00       	call   c002662c <__udivdi3>
c0026175:	83 c4 10             	add    esp,0x10
c0026178:	83 ec 08             	sub    esp,0x8
c002617b:	52                   	push   edx
c002617c:	50                   	push   eax
c002617d:	e8 d3 07 ff ff       	call   c0016955 <timerHandler(unsigned long long)>
c0026182:	83 c4 10             	add    esp,0x10
c0026185:	90                   	nop
c0026186:	83 c4 0c             	add    esp,0xc
c0026189:	c3                   	ret    

c002618a <PIT::open(int, int, void*)>:
c002618a:	83 ec 0c             	sub    esp,0xc
c002618d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026191:	8b 00                	mov    eax,DWORD PTR [eax]
c0026193:	83 c0 24             	add    eax,0x24
c0026196:	8b 00                	mov    eax,DWORD PTR [eax]
c0026198:	83 ec 08             	sub    esp,0x8
c002619b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002619f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261a3:	ff d0                	call   eax
c00261a5:	83 c4 10             	add    esp,0x10
c00261a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ac:	83 ec 0c             	sub    esp,0xc
c00261af:	6a 00                	push   0x0
c00261b1:	6a 01                	push   0x1
c00261b3:	68 5e 61 02 c0       	push   0xc002615e
c00261b8:	6a 00                	push   0x0
c00261ba:	50                   	push   eax
c00261bb:	e8 98 dd fe ff       	call   c0013f58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00261c0:	83 c4 20             	add    esp,0x20
c00261c3:	89 c2                	mov    edx,eax
c00261c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c9:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00261cf:	b8 00 00 00 00       	mov    eax,0x0
c00261d4:	83 c4 0c             	add    esp,0xc
c00261d7:	c3                   	ret    

c00261d8 <PIT::close(int, int, void*)>:
c00261d8:	83 ec 0c             	sub    esp,0xc
c00261db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261df:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00261e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ed:	6a 01                	push   0x1
c00261ef:	68 5e 61 02 c0       	push   0xc002615e
c00261f4:	6a 00                	push   0x0
c00261f6:	50                   	push   eax
c00261f7:	e8 9a dd fe ff       	call   c0013f96 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00261fc:	83 c4 10             	add    esp,0x10
c00261ff:	b8 00 00 00 00       	mov    eax,0x0
c0026204:	83 c4 0c             	add    esp,0xc
c0026207:	c3                   	ret    

c0026208 <PIT::PIT()>:
c0026208:	83 ec 0c             	sub    esp,0xc
c002620b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002620f:	83 ec 08             	sub    esp,0x8
c0026212:	68 6c cf 02 c0       	push   0xc002cf6c
c0026217:	50                   	push   eax
c0026218:	e8 a9 06 ff ff       	call   c00168c6 <Timer::Timer(char const*)>
c002621d:	83 c4 10             	add    esp,0x10
c0026220:	ba 94 cf 02 c0       	mov    edx,0xc002cf94
c0026225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026229:	89 10                	mov    DWORD PTR [eax],edx
c002622b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002622f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026235:	0f b6 d0             	movzx  edx,al
c0026238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002623c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026247:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002624d:	0f b6 d0             	movzx  edx,al
c0026250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026254:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002625d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026263:	8d 50 01             	lea    edx,[eax+0x1]
c0026266:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002626a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026270:	0f b6 d0             	movzx  edx,al
c0026273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026277:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002627b:	83 e1 3f             	and    ecx,0x3f
c002627e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026282:	90                   	nop
c0026283:	83 c4 0c             	add    esp,0xc
c0026286:	c3                   	ret    
c0026287:	66 90                	xchg   ax,ax
c0026289:	66 90                	xchg   ax,ax
c002628b:	66 90                	xchg   ax,ax
c002628d:	66 90                	xchg   ax,ax
c002628f:	90                   	nop

c0026290 <avxDetect>:
c0026290:	b8 00 00 00 00       	mov    eax,0x0
c0026295:	c3                   	ret    

c0026296 <avxSave>:
c0026296:	c3                   	ret    

c0026297 <avxLoad>:
c0026297:	c3                   	ret    

c0026298 <avxInit>:
c0026298:	c3                   	ret    

c0026299 <avxClose>:
c0026299:	c3                   	ret    

c002629a <wouldSheSayYes>:
c002629a:	c3                   	ret    
c002629b:	49                   	dec    ecx
c002629c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00262a0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00262a4:	75 20                	jne    c00262c6 <sseDetect.noSSE+0x1>
c00262a6:	4e                   	dec    esi
c00262a7:	79 61                	jns    c002630a <x87Detect+0x14>
c00262a9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00262ae:	66 90                	xchg   ax,ax

c00262b0 <absolutelyNoChanceInHell>:
c00262b0:	b8 01 00 00 00       	mov    eax,0x1
c00262b5:	0f a2                	cpuid  
c00262b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00262bd:	74 06                	je     c00262c5 <sseDetect.noSSE>
c00262bf:	b8 01 00 00 00       	mov    eax,0x1
c00262c4:	c3                   	ret    

c00262c5 <sseDetect.noSSE>:
c00262c5:	31 c0                	xor    eax,eax
c00262c7:	c3                   	ret    

c00262c8 <sseSave>:
c00262c8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00262cd:	c3                   	ret    

c00262ce <sseLoad>:
c00262ce:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00262d3:	c3                   	ret    

c00262d4 <sseInit>:
c00262d4:	e8 43 00 00 00       	call   c002631c <x87Init>
c00262d9:	0f 20 e0             	mov    eax,cr4
c00262dc:	66 0d 00 06          	or     ax,0x600
c00262e0:	0f 22 e0             	mov    cr4,eax
c00262e3:	c3                   	ret    

c00262e4 <sseClose>:
c00262e4:	c3                   	ret    
c00262e5:	66 90                	xchg   ax,ax
c00262e7:	66 90                	xchg   ax,ax
c00262e9:	66 90                	xchg   ax,ax
c00262eb:	66 90                	xchg   ax,ax
c00262ed:	66 90                	xchg   ax,ax
c00262ef:	90                   	nop

c00262f0 <value_37F>:
c00262f0:	7f 03                	jg     c00262f5 <value_37A+0x1>

c00262f2 <value_37E>:
c00262f2:	7e 03                	jle    c00262f7 <x87Detect+0x1>

c00262f4 <value_37A>:
c00262f4:	7a 03                	jp     c00262f9 <x87Detect+0x3>

c00262f6 <x87Detect>:
c00262f6:	b8 01 00 00 00       	mov    eax,0x1
c00262fb:	0f a2                	cpuid  
c00262fd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026303:	74 06                	je     c002630b <x87Detect.nox87>
c0026305:	b8 01 00 00 00       	mov    eax,0x1
c002630a:	c3                   	ret    

c002630b <x87Detect.nox87>:
c002630b:	b8 00 00 00 00       	mov    eax,0x0
c0026310:	c3                   	ret    

c0026311 <x87Save>:
c0026311:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026316:	c3                   	ret    

c0026317 <x87Load>:
c0026317:	dd 64 24 08          	frstor [esp+0x8]
c002631b:	c3                   	ret    

c002631c <x87Init>:
c002631c:	9b db e3             	finit  
c002631f:	0f 20 c0             	mov    eax,cr0
c0026322:	66 25 fb ff          	and    ax,0xfffb
c0026326:	66 0d 22 00          	or     ax,0x22
c002632a:	0f 22 c0             	mov    cr0,eax
c002632d:	0f 06                	clts   
c002632f:	d9 2d f4 62 02 c0    	fldcw  WORD PTR ds:0xc00262f4
c0026335:	c3                   	ret    

c0026336 <x87Close>:
c0026336:	c3                   	ret    
c0026337:	90                   	nop

c0026338 <__do_global_ctors_aux>:
c0026338:	a1 7c 8e 02 c0       	mov    eax,ds:0xc0028e7c
c002633d:	83 f8 ff             	cmp    eax,0xffffffff
c0026340:	74 1a                	je     c002635c <__do_global_ctors_aux+0x24>
c0026342:	55                   	push   ebp
c0026343:	89 e5                	mov    ebp,esp
c0026345:	53                   	push   ebx
c0026346:	52                   	push   edx
c0026347:	bb 7c 8e 02 c0       	mov    ebx,0xc0028e7c
c002634c:	ff d0                	call   eax
c002634e:	83 eb 04             	sub    ebx,0x4
c0026351:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026353:	83 f8 ff             	cmp    eax,0xffffffff
c0026356:	75 f4                	jne    c002634c <__do_global_ctors_aux+0x14>
c0026358:	58                   	pop    eax
c0026359:	5b                   	pop    ebx
c002635a:	5d                   	pop    ebp
c002635b:	c3                   	ret    
c002635c:	c3                   	ret    
c002635d:	66 90                	xchg   ax,ax
c002635f:	90                   	nop

c0026360 <__divdi3>:
c0026360:	55                   	push   ebp
c0026361:	57                   	push   edi
c0026362:	56                   	push   esi
c0026363:	53                   	push   ebx
c0026364:	83 ec 1c             	sub    esp,0x1c
c0026367:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002636b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002636f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026372:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026376:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002637a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002637e:	85 db                	test   ebx,ebx
c0026380:	0f 88 8e 00 00 00    	js     c0026414 <__divdi3+0xb4>
c0026386:	89 dd                	mov    ebp,ebx
c0026388:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026390:	89 d3                	mov    ebx,edx
c0026392:	85 d2                	test   edx,edx
c0026394:	79 0d                	jns    c00263a3 <__divdi3+0x43>
c0026396:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002639a:	f7 d8                	neg    eax
c002639c:	83 d2 00             	adc    edx,0x0
c002639f:	f7 da                	neg    edx
c00263a1:	89 d3                	mov    ebx,edx
c00263a3:	89 c7                	mov    edi,eax
c00263a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00263a8:	85 db                	test   ebx,ebx
c00263aa:	75 48                	jne    c00263f4 <__divdi3+0x94>
c00263ac:	39 ef                	cmp    edi,ebp
c00263ae:	76 24                	jbe    c00263d4 <__divdi3+0x74>
c00263b0:	89 ea                	mov    edx,ebp
c00263b2:	f7 f7                	div    edi
c00263b4:	89 c1                	mov    ecx,eax
c00263b6:	31 f6                	xor    esi,esi
c00263b8:	89 c8                	mov    eax,ecx
c00263ba:	89 f2                	mov    edx,esi
c00263bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00263c0:	85 c9                	test   ecx,ecx
c00263c2:	74 07                	je     c00263cb <__divdi3+0x6b>
c00263c4:	f7 d8                	neg    eax
c00263c6:	83 d2 00             	adc    edx,0x0
c00263c9:	f7 da                	neg    edx
c00263cb:	83 c4 1c             	add    esp,0x1c
c00263ce:	5b                   	pop    ebx
c00263cf:	5e                   	pop    esi
c00263d0:	5f                   	pop    edi
c00263d1:	5d                   	pop    ebp
c00263d2:	c3                   	ret    
c00263d3:	90                   	nop
c00263d4:	85 ff                	test   edi,edi
c00263d6:	75 0b                	jne    c00263e3 <__divdi3+0x83>
c00263d8:	b8 01 00 00 00       	mov    eax,0x1
c00263dd:	31 d2                	xor    edx,edx
c00263df:	f7 f3                	div    ebx
c00263e1:	89 c7                	mov    edi,eax
c00263e3:	31 d2                	xor    edx,edx
c00263e5:	89 e8                	mov    eax,ebp
c00263e7:	f7 f7                	div    edi
c00263e9:	89 c6                	mov    esi,eax
c00263eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00263ee:	f7 f7                	div    edi
c00263f0:	89 c1                	mov    ecx,eax
c00263f2:	eb c4                	jmp    c00263b8 <__divdi3+0x58>
c00263f4:	39 eb                	cmp    ebx,ebp
c00263f6:	77 3c                	ja     c0026434 <__divdi3+0xd4>
c00263f8:	0f bd f3             	bsr    esi,ebx
c00263fb:	83 f6 1f             	xor    esi,0x1f
c00263fe:	75 40                	jne    c0026440 <__divdi3+0xe0>
c0026400:	39 eb                	cmp    ebx,ebp
c0026402:	72 09                	jb     c002640d <__divdi3+0xad>
c0026404:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026407:	0f 87 97 00 00 00    	ja     c00264a4 <__divdi3+0x144>
c002640d:	b9 01 00 00 00       	mov    ecx,0x1
c0026412:	eb a4                	jmp    c00263b8 <__divdi3+0x58>
c0026414:	f7 d9                	neg    ecx
c0026416:	83 d3 00             	adc    ebx,0x0
c0026419:	f7 db                	neg    ebx
c002641b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002641e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026422:	89 dd                	mov    ebp,ebx
c0026424:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002642c:	e9 5f ff ff ff       	jmp    c0026390 <__divdi3+0x30>
c0026431:	8d 76 00             	lea    esi,[esi+0x0]
c0026434:	31 f6                	xor    esi,esi
c0026436:	31 c9                	xor    ecx,ecx
c0026438:	e9 7b ff ff ff       	jmp    c00263b8 <__divdi3+0x58>
c002643d:	8d 76 00             	lea    esi,[esi+0x0]
c0026440:	b8 20 00 00 00       	mov    eax,0x20
c0026445:	29 f0                	sub    eax,esi
c0026447:	89 f1                	mov    ecx,esi
c0026449:	d3 e3                	shl    ebx,cl
c002644b:	89 fa                	mov    edx,edi
c002644d:	88 c1                	mov    cl,al
c002644f:	d3 ea                	shr    edx,cl
c0026451:	09 da                	or     edx,ebx
c0026453:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026457:	89 f1                	mov    ecx,esi
c0026459:	d3 e7                	shl    edi,cl
c002645b:	89 eb                	mov    ebx,ebp
c002645d:	88 c1                	mov    cl,al
c002645f:	d3 eb                	shr    ebx,cl
c0026461:	89 f1                	mov    ecx,esi
c0026463:	d3 e5                	shl    ebp,cl
c0026465:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026468:	88 c1                	mov    cl,al
c002646a:	d3 ea                	shr    edx,cl
c002646c:	09 d5                	or     ebp,edx
c002646e:	89 e8                	mov    eax,ebp
c0026470:	89 da                	mov    edx,ebx
c0026472:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026476:	89 d3                	mov    ebx,edx
c0026478:	89 c5                	mov    ebp,eax
c002647a:	f7 e7                	mul    edi
c002647c:	39 d3                	cmp    ebx,edx
c002647e:	72 18                	jb     c0026498 <__divdi3+0x138>
c0026480:	74 0a                	je     c002648c <__divdi3+0x12c>
c0026482:	89 e9                	mov    ecx,ebp
c0026484:	31 f6                	xor    esi,esi
c0026486:	e9 2d ff ff ff       	jmp    c00263b8 <__divdi3+0x58>
c002648b:	90                   	nop
c002648c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002648f:	89 f1                	mov    ecx,esi
c0026491:	d3 e7                	shl    edi,cl
c0026493:	39 c7                	cmp    edi,eax
c0026495:	73 eb                	jae    c0026482 <__divdi3+0x122>
c0026497:	90                   	nop
c0026498:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002649b:	31 f6                	xor    esi,esi
c002649d:	e9 16 ff ff ff       	jmp    c00263b8 <__divdi3+0x58>
c00264a2:	66 90                	xchg   ax,ax
c00264a4:	31 c9                	xor    ecx,ecx
c00264a6:	e9 0d ff ff ff       	jmp    c00263b8 <__divdi3+0x58>
c00264ab:	90                   	nop

c00264ac <__moddi3>:
c00264ac:	55                   	push   ebp
c00264ad:	57                   	push   edi
c00264ae:	56                   	push   esi
c00264af:	53                   	push   ebx
c00264b0:	83 ec 2c             	sub    esp,0x2c
c00264b3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00264b7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00264bb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00264bf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00264c3:	85 db                	test   ebx,ebx
c00264c5:	0f 88 85 00 00 00    	js     c0026550 <__moddi3+0xa4>
c00264cb:	89 de                	mov    esi,ebx
c00264cd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00264d5:	89 d7                	mov    edi,edx
c00264d7:	85 d2                	test   edx,edx
c00264d9:	79 09                	jns    c00264e4 <__moddi3+0x38>
c00264db:	f7 d8                	neg    eax
c00264dd:	83 d2 00             	adc    edx,0x0
c00264e0:	f7 da                	neg    edx
c00264e2:	89 d7                	mov    edi,edx
c00264e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264e8:	89 cd                	mov    ebp,ecx
c00264ea:	85 ff                	test   edi,edi
c00264ec:	75 52                	jne    c0026540 <__moddi3+0x94>
c00264ee:	89 c3                	mov    ebx,eax
c00264f0:	39 f0                	cmp    eax,esi
c00264f2:	76 24                	jbe    c0026518 <__moddi3+0x6c>
c00264f4:	89 c8                	mov    eax,ecx
c00264f6:	89 f2                	mov    edx,esi
c00264f8:	f7 f3                	div    ebx
c00264fa:	89 d6                	mov    esi,edx
c00264fc:	89 f0                	mov    eax,esi
c00264fe:	31 d2                	xor    edx,edx
c0026500:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026504:	85 c9                	test   ecx,ecx
c0026506:	74 07                	je     c002650f <__moddi3+0x63>
c0026508:	f7 d8                	neg    eax
c002650a:	83 d2 00             	adc    edx,0x0
c002650d:	f7 da                	neg    edx
c002650f:	83 c4 2c             	add    esp,0x2c
c0026512:	5b                   	pop    ebx
c0026513:	5e                   	pop    esi
c0026514:	5f                   	pop    edi
c0026515:	5d                   	pop    ebp
c0026516:	c3                   	ret    
c0026517:	90                   	nop
c0026518:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002651c:	85 db                	test   ebx,ebx
c002651e:	75 0d                	jne    c002652d <__moddi3+0x81>
c0026520:	b8 01 00 00 00       	mov    eax,0x1
c0026525:	31 d2                	xor    edx,edx
c0026527:	f7 f7                	div    edi
c0026529:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002652d:	89 f0                	mov    eax,esi
c002652f:	31 d2                	xor    edx,edx
c0026531:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026535:	f7 f7                	div    edi
c0026537:	89 e8                	mov    eax,ebp
c0026539:	f7 f7                	div    edi
c002653b:	89 d6                	mov    esi,edx
c002653d:	eb bd                	jmp    c00264fc <__moddi3+0x50>
c002653f:	90                   	nop
c0026540:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026544:	39 f7                	cmp    edi,esi
c0026546:	76 20                	jbe    c0026568 <__moddi3+0xbc>
c0026548:	89 c8                	mov    eax,ecx
c002654a:	89 f2                	mov    edx,esi
c002654c:	eb b2                	jmp    c0026500 <__moddi3+0x54>
c002654e:	66 90                	xchg   ax,ax
c0026550:	f7 d9                	neg    ecx
c0026552:	83 d3 00             	adc    ebx,0x0
c0026555:	f7 db                	neg    ebx
c0026557:	89 de                	mov    esi,ebx
c0026559:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026561:	e9 6f ff ff ff       	jmp    c00264d5 <__moddi3+0x29>
c0026566:	66 90                	xchg   ax,ax
c0026568:	0f bd c7             	bsr    eax,edi
c002656b:	83 f0 1f             	xor    eax,0x1f
c002656e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026572:	75 24                	jne    c0026598 <__moddi3+0xec>
c0026574:	39 f7                	cmp    edi,esi
c0026576:	72 06                	jb     c002657e <__moddi3+0xd2>
c0026578:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002657c:	77 0c                	ja     c002658a <__moddi3+0xde>
c002657e:	89 e9                	mov    ecx,ebp
c0026580:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026584:	19 fe                	sbb    esi,edi
c0026586:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002658a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002658e:	89 f2                	mov    edx,esi
c0026590:	e9 6b ff ff ff       	jmp    c0026500 <__moddi3+0x54>
c0026595:	8d 76 00             	lea    esi,[esi+0x0]
c0026598:	b8 20 00 00 00       	mov    eax,0x20
c002659d:	89 c2                	mov    edx,eax
c002659f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00265a3:	29 da                	sub    edx,ebx
c00265a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00265a9:	88 d9                	mov    cl,bl
c00265ab:	d3 e7                	shl    edi,cl
c00265ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265b1:	88 d1                	mov    cl,dl
c00265b3:	d3 e8                	shr    eax,cl
c00265b5:	09 c7                	or     edi,eax
c00265b7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00265bb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00265bf:	89 d8                	mov    eax,ebx
c00265c1:	88 d9                	mov    cl,bl
c00265c3:	d3 e7                	shl    edi,cl
c00265c5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00265c9:	89 f3                	mov    ebx,esi
c00265cb:	88 d1                	mov    cl,dl
c00265cd:	d3 eb                	shr    ebx,cl
c00265cf:	89 c7                	mov    edi,eax
c00265d1:	88 c1                	mov    cl,al
c00265d3:	d3 e6                	shl    esi,cl
c00265d5:	89 e8                	mov    eax,ebp
c00265d7:	88 d1                	mov    cl,dl
c00265d9:	d3 e8                	shr    eax,cl
c00265db:	09 f0                	or     eax,esi
c00265dd:	89 f9                	mov    ecx,edi
c00265df:	d3 e5                	shl    ebp,cl
c00265e1:	89 da                	mov    edx,ebx
c00265e3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00265e7:	89 d3                	mov    ebx,edx
c00265e9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00265ed:	89 c6                	mov    esi,eax
c00265ef:	89 d1                	mov    ecx,edx
c00265f1:	39 d3                	cmp    ebx,edx
c00265f3:	72 27                	jb     c002661c <__moddi3+0x170>
c00265f5:	74 21                	je     c0026618 <__moddi3+0x16c>
c00265f7:	29 f5                	sub    ebp,esi
c00265f9:	19 cb                	sbb    ebx,ecx
c00265fb:	89 de                	mov    esi,ebx
c00265fd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026601:	d3 e6                	shl    esi,cl
c0026603:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026607:	89 f9                	mov    ecx,edi
c0026609:	d3 ed                	shr    ebp,cl
c002660b:	09 ee                	or     esi,ebp
c002660d:	89 f0                	mov    eax,esi
c002660f:	d3 eb                	shr    ebx,cl
c0026611:	89 da                	mov    edx,ebx
c0026613:	e9 e8 fe ff ff       	jmp    c0026500 <__moddi3+0x54>
c0026618:	39 c5                	cmp    ebp,eax
c002661a:	73 db                	jae    c00265f7 <__moddi3+0x14b>
c002661c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026620:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026624:	89 d1                	mov    ecx,edx
c0026626:	89 c6                	mov    esi,eax
c0026628:	eb cd                	jmp    c00265f7 <__moddi3+0x14b>
c002662a:	66 90                	xchg   ax,ax

c002662c <__udivdi3>:
c002662c:	55                   	push   ebp
c002662d:	57                   	push   edi
c002662e:	56                   	push   esi
c002662f:	53                   	push   ebx
c0026630:	83 ec 1c             	sub    esp,0x1c
c0026633:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026637:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002663b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002663f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026643:	85 d2                	test   edx,edx
c0026645:	75 41                	jne    c0026688 <__udivdi3+0x5c>
c0026647:	39 f7                	cmp    edi,esi
c0026649:	76 15                	jbe    c0026660 <__udivdi3+0x34>
c002664b:	89 e8                	mov    eax,ebp
c002664d:	89 f2                	mov    edx,esi
c002664f:	f7 f7                	div    edi
c0026651:	31 db                	xor    ebx,ebx
c0026653:	89 da                	mov    edx,ebx
c0026655:	83 c4 1c             	add    esp,0x1c
c0026658:	5b                   	pop    ebx
c0026659:	5e                   	pop    esi
c002665a:	5f                   	pop    edi
c002665b:	5d                   	pop    ebp
c002665c:	c3                   	ret    
c002665d:	8d 76 00             	lea    esi,[esi+0x0]
c0026660:	89 f9                	mov    ecx,edi
c0026662:	85 ff                	test   edi,edi
c0026664:	75 0b                	jne    c0026671 <__udivdi3+0x45>
c0026666:	b8 01 00 00 00       	mov    eax,0x1
c002666b:	31 d2                	xor    edx,edx
c002666d:	f7 f7                	div    edi
c002666f:	89 c1                	mov    ecx,eax
c0026671:	31 d2                	xor    edx,edx
c0026673:	89 f0                	mov    eax,esi
c0026675:	f7 f1                	div    ecx
c0026677:	89 c3                	mov    ebx,eax
c0026679:	89 e8                	mov    eax,ebp
c002667b:	f7 f1                	div    ecx
c002667d:	89 da                	mov    edx,ebx
c002667f:	83 c4 1c             	add    esp,0x1c
c0026682:	5b                   	pop    ebx
c0026683:	5e                   	pop    esi
c0026684:	5f                   	pop    edi
c0026685:	5d                   	pop    ebp
c0026686:	c3                   	ret    
c0026687:	90                   	nop
c0026688:	39 f2                	cmp    edx,esi
c002668a:	77 1c                	ja     c00266a8 <__udivdi3+0x7c>
c002668c:	0f bd da             	bsr    ebx,edx
c002668f:	83 f3 1f             	xor    ebx,0x1f
c0026692:	75 24                	jne    c00266b8 <__udivdi3+0x8c>
c0026694:	39 f2                	cmp    edx,esi
c0026696:	72 08                	jb     c00266a0 <__udivdi3+0x74>
c0026698:	39 ef                	cmp    edi,ebp
c002669a:	0f 87 84 00 00 00    	ja     c0026724 <__udivdi3+0xf8>
c00266a0:	b8 01 00 00 00       	mov    eax,0x1
c00266a5:	eb ac                	jmp    c0026653 <__udivdi3+0x27>
c00266a7:	90                   	nop
c00266a8:	31 db                	xor    ebx,ebx
c00266aa:	31 c0                	xor    eax,eax
c00266ac:	89 da                	mov    edx,ebx
c00266ae:	83 c4 1c             	add    esp,0x1c
c00266b1:	5b                   	pop    ebx
c00266b2:	5e                   	pop    esi
c00266b3:	5f                   	pop    edi
c00266b4:	5d                   	pop    ebp
c00266b5:	c3                   	ret    
c00266b6:	66 90                	xchg   ax,ax
c00266b8:	b8 20 00 00 00       	mov    eax,0x20
c00266bd:	29 d8                	sub    eax,ebx
c00266bf:	88 d9                	mov    cl,bl
c00266c1:	d3 e2                	shl    edx,cl
c00266c3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00266c7:	89 fa                	mov    edx,edi
c00266c9:	88 c1                	mov    cl,al
c00266cb:	d3 ea                	shr    edx,cl
c00266cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00266d1:	09 d1                	or     ecx,edx
c00266d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00266d7:	88 d9                	mov    cl,bl
c00266d9:	d3 e7                	shl    edi,cl
c00266db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266df:	89 f7                	mov    edi,esi
c00266e1:	88 c1                	mov    cl,al
c00266e3:	d3 ef                	shr    edi,cl
c00266e5:	88 d9                	mov    cl,bl
c00266e7:	d3 e6                	shl    esi,cl
c00266e9:	89 ea                	mov    edx,ebp
c00266eb:	88 c1                	mov    cl,al
c00266ed:	d3 ea                	shr    edx,cl
c00266ef:	09 d6                	or     esi,edx
c00266f1:	89 f0                	mov    eax,esi
c00266f3:	89 fa                	mov    edx,edi
c00266f5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00266f9:	89 d7                	mov    edi,edx
c00266fb:	89 c6                	mov    esi,eax
c00266fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026701:	39 d7                	cmp    edi,edx
c0026703:	72 13                	jb     c0026718 <__udivdi3+0xec>
c0026705:	74 09                	je     c0026710 <__udivdi3+0xe4>
c0026707:	89 f0                	mov    eax,esi
c0026709:	31 db                	xor    ebx,ebx
c002670b:	e9 43 ff ff ff       	jmp    c0026653 <__udivdi3+0x27>
c0026710:	88 d9                	mov    cl,bl
c0026712:	d3 e5                	shl    ebp,cl
c0026714:	39 c5                	cmp    ebp,eax
c0026716:	73 ef                	jae    c0026707 <__udivdi3+0xdb>
c0026718:	8d 46 ff             	lea    eax,[esi-0x1]
c002671b:	31 db                	xor    ebx,ebx
c002671d:	e9 31 ff ff ff       	jmp    c0026653 <__udivdi3+0x27>
c0026722:	66 90                	xchg   ax,ax
c0026724:	31 c0                	xor    eax,eax
c0026726:	e9 28 ff ff ff       	jmp    c0026653 <__udivdi3+0x27>
c002672b:	90                   	nop

c002672c <__umoddi3>:
c002672c:	55                   	push   ebp
c002672d:	57                   	push   edi
c002672e:	56                   	push   esi
c002672f:	53                   	push   ebx
c0026730:	83 ec 1c             	sub    esp,0x1c
c0026733:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026737:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002673b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002673f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026743:	89 da                	mov    edx,ebx
c0026745:	85 c0                	test   eax,eax
c0026747:	75 37                	jne    c0026780 <__umoddi3+0x54>
c0026749:	39 df                	cmp    edi,ebx
c002674b:	76 13                	jbe    c0026760 <__umoddi3+0x34>
c002674d:	89 f0                	mov    eax,esi
c002674f:	f7 f7                	div    edi
c0026751:	89 d0                	mov    eax,edx
c0026753:	31 d2                	xor    edx,edx
c0026755:	83 c4 1c             	add    esp,0x1c
c0026758:	5b                   	pop    ebx
c0026759:	5e                   	pop    esi
c002675a:	5f                   	pop    edi
c002675b:	5d                   	pop    ebp
c002675c:	c3                   	ret    
c002675d:	8d 76 00             	lea    esi,[esi+0x0]
c0026760:	89 fd                	mov    ebp,edi
c0026762:	85 ff                	test   edi,edi
c0026764:	75 0b                	jne    c0026771 <__umoddi3+0x45>
c0026766:	b8 01 00 00 00       	mov    eax,0x1
c002676b:	31 d2                	xor    edx,edx
c002676d:	f7 f7                	div    edi
c002676f:	89 c5                	mov    ebp,eax
c0026771:	89 d8                	mov    eax,ebx
c0026773:	31 d2                	xor    edx,edx
c0026775:	f7 f5                	div    ebp
c0026777:	89 f0                	mov    eax,esi
c0026779:	f7 f5                	div    ebp
c002677b:	89 d0                	mov    eax,edx
c002677d:	eb d4                	jmp    c0026753 <__umoddi3+0x27>
c002677f:	90                   	nop
c0026780:	89 f1                	mov    ecx,esi
c0026782:	39 d8                	cmp    eax,ebx
c0026784:	76 0a                	jbe    c0026790 <__umoddi3+0x64>
c0026786:	89 f0                	mov    eax,esi
c0026788:	83 c4 1c             	add    esp,0x1c
c002678b:	5b                   	pop    ebx
c002678c:	5e                   	pop    esi
c002678d:	5f                   	pop    edi
c002678e:	5d                   	pop    ebp
c002678f:	c3                   	ret    
c0026790:	0f bd e8             	bsr    ebp,eax
c0026793:	83 f5 1f             	xor    ebp,0x1f
c0026796:	75 1c                	jne    c00267b4 <__umoddi3+0x88>
c0026798:	39 d8                	cmp    eax,ebx
c002679a:	72 04                	jb     c00267a0 <__umoddi3+0x74>
c002679c:	39 f7                	cmp    edi,esi
c002679e:	77 08                	ja     c00267a8 <__umoddi3+0x7c>
c00267a0:	89 da                	mov    edx,ebx
c00267a2:	29 fe                	sub    esi,edi
c00267a4:	19 c2                	sbb    edx,eax
c00267a6:	89 f1                	mov    ecx,esi
c00267a8:	89 c8                	mov    eax,ecx
c00267aa:	83 c4 1c             	add    esp,0x1c
c00267ad:	5b                   	pop    ebx
c00267ae:	5e                   	pop    esi
c00267af:	5f                   	pop    edi
c00267b0:	5d                   	pop    ebp
c00267b1:	c3                   	ret    
c00267b2:	66 90                	xchg   ax,ax
c00267b4:	ba 20 00 00 00       	mov    edx,0x20
c00267b9:	29 ea                	sub    edx,ebp
c00267bb:	89 e9                	mov    ecx,ebp
c00267bd:	d3 e0                	shl    eax,cl
c00267bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00267c3:	89 f8                	mov    eax,edi
c00267c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00267c9:	88 d1                	mov    cl,dl
c00267cb:	d3 e8                	shr    eax,cl
c00267cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267d1:	09 c1                	or     ecx,eax
c00267d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00267d7:	89 e9                	mov    ecx,ebp
c00267d9:	d3 e7                	shl    edi,cl
c00267db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267df:	89 d8                	mov    eax,ebx
c00267e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00267e5:	88 d1                	mov    cl,dl
c00267e7:	d3 e8                	shr    eax,cl
c00267e9:	89 c7                	mov    edi,eax
c00267eb:	89 e9                	mov    ecx,ebp
c00267ed:	d3 e3                	shl    ebx,cl
c00267ef:	89 f0                	mov    eax,esi
c00267f1:	88 d1                	mov    cl,dl
c00267f3:	d3 e8                	shr    eax,cl
c00267f5:	09 d8                	or     eax,ebx
c00267f7:	89 e9                	mov    ecx,ebp
c00267f9:	d3 e6                	shl    esi,cl
c00267fb:	89 f3                	mov    ebx,esi
c00267fd:	89 fa                	mov    edx,edi
c00267ff:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026803:	89 d1                	mov    ecx,edx
c0026805:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026809:	89 c6                	mov    esi,eax
c002680b:	89 d7                	mov    edi,edx
c002680d:	39 d1                	cmp    ecx,edx
c002680f:	72 27                	jb     c0026838 <__umoddi3+0x10c>
c0026811:	74 21                	je     c0026834 <__umoddi3+0x108>
c0026813:	89 ca                	mov    edx,ecx
c0026815:	29 f3                	sub    ebx,esi
c0026817:	19 fa                	sbb    edx,edi
c0026819:	89 d0                	mov    eax,edx
c002681b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002681f:	d3 e0                	shl    eax,cl
c0026821:	89 e9                	mov    ecx,ebp
c0026823:	d3 eb                	shr    ebx,cl
c0026825:	09 d8                	or     eax,ebx
c0026827:	d3 ea                	shr    edx,cl
c0026829:	83 c4 1c             	add    esp,0x1c
c002682c:	5b                   	pop    ebx
c002682d:	5e                   	pop    esi
c002682e:	5f                   	pop    edi
c002682f:	5d                   	pop    ebp
c0026830:	c3                   	ret    
c0026831:	8d 76 00             	lea    esi,[esi+0x0]
c0026834:	39 c3                	cmp    ebx,eax
c0026836:	73 db                	jae    c0026813 <__umoddi3+0xe7>
c0026838:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002683c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026840:	89 d7                	mov    edi,edx
c0026842:	89 c6                	mov    esi,eax
c0026844:	eb cd                	jmp    c0026813 <__umoddi3+0xe7>

c0026846 <__addsf3>:
c0026846:	55                   	push   ebp
c0026847:	89 e5                	mov    ebp,esp
c0026849:	57                   	push   edi
c002684a:	56                   	push   esi
c002684b:	53                   	push   ebx
c002684c:	83 ec 08             	sub    esp,0x8
c002684f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026852:	89 fa                	mov    edx,edi
c0026854:	89 f8                	mov    eax,edi
c0026856:	c1 f8 17             	sar    eax,0x17
c0026859:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002685c:	c1 e2 08             	shl    edx,0x8
c002685f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026865:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026868:	89 de                	mov    esi,ebx
c002686a:	c1 fe 17             	sar    esi,0x17
c002686d:	c1 e3 08             	shl    ebx,0x8
c0026870:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026876:	31 f0                	xor    eax,esi
c0026878:	0f 88 3b 01 00 00    	js     c00269b9 <__addsf3+0x173>
c002687e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026881:	29 f1                	sub    ecx,esi
c0026883:	85 c9                	test   ecx,ecx
c0026885:	7e 54                	jle    c00268db <__addsf3+0x95>
c0026887:	89 f0                	mov    eax,esi
c0026889:	84 c0                	test   al,al
c002688b:	75 10                	jne    c002689d <__addsf3+0x57>
c002688d:	85 db                	test   ebx,ebx
c002688f:	0f 84 aa 02 00 00    	je     c0026b3f <__addsf3+0x2f9>
c0026895:	49                   	dec    ecx
c0026896:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026899:	74 38                	je     c00268d3 <__addsf3+0x8d>
c002689b:	eb 13                	jmp    c00268b0 <__addsf3+0x6a>
c002689d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268a0:	f7 d0                	not    eax
c00268a2:	84 c0                	test   al,al
c00268a4:	0f 84 95 02 00 00    	je     c0026b3f <__addsf3+0x2f9>
c00268aa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00268b0:	83 f9 1f             	cmp    ecx,0x1f
c00268b3:	0f 8f 86 02 00 00    	jg     c0026b3f <__addsf3+0x2f9>
c00268b9:	89 de                	mov    esi,ebx
c00268bb:	d3 ee                	shr    esi,cl
c00268bd:	b8 20 00 00 00       	mov    eax,0x20
c00268c2:	29 c8                	sub    eax,ecx
c00268c4:	89 c1                	mov    ecx,eax
c00268c6:	d3 e3                	shl    ebx,cl
c00268c8:	31 c0                	xor    eax,eax
c00268ca:	85 db                	test   ebx,ebx
c00268cc:	0f 95 c0             	setne  al
c00268cf:	09 f0                	or     eax,esi
c00268d1:	01 d0                	add    eax,edx
c00268d3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00268d6:	e9 b6 00 00 00       	jmp    c0026991 <__addsf3+0x14b>
c00268db:	74 5c                	je     c0026939 <__addsf3+0xf3>
c00268dd:	89 f1                	mov    ecx,esi
c00268df:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00268e2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00268e5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00268e9:	75 14                	jne    c00268ff <__addsf3+0xb9>
c00268eb:	85 d2                	test   edx,edx
c00268ed:	0f 84 4c 02 00 00    	je     c0026b3f <__addsf3+0x2f9>
c00268f3:	49                   	dec    ecx
c00268f4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00268f7:	0f 84 94 00 00 00    	je     c0026991 <__addsf3+0x14b>
c00268fd:	eb 12                	jmp    c0026911 <__addsf3+0xcb>
c00268ff:	89 f0                	mov    eax,esi
c0026901:	f7 d0                	not    eax
c0026903:	84 c0                	test   al,al
c0026905:	0f 84 34 02 00 00    	je     c0026b3f <__addsf3+0x2f9>
c002690b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026911:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026914:	83 f9 1f             	cmp    ecx,0x1f
c0026917:	0f 8f 22 02 00 00    	jg     c0026b3f <__addsf3+0x2f9>
c002691d:	89 d7                	mov    edi,edx
c002691f:	d3 ef                	shr    edi,cl
c0026921:	b8 20 00 00 00       	mov    eax,0x20
c0026926:	29 c8                	sub    eax,ecx
c0026928:	89 c1                	mov    ecx,eax
c002692a:	d3 e2                	shl    edx,cl
c002692c:	31 c0                	xor    eax,eax
c002692e:	85 d2                	test   edx,edx
c0026930:	0f 95 c0             	setne  al
c0026933:	09 f8                	or     eax,edi
c0026935:	01 d8                	add    eax,ebx
c0026937:	eb 58                	jmp    c0026991 <__addsf3+0x14b>
c0026939:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002693c:	8d 70 01             	lea    esi,[eax+0x1]
c002693f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026945:	75 32                	jne    c0026979 <__addsf3+0x133>
c0026947:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002694b:	75 1f                	jne    c002696c <__addsf3+0x126>
c002694d:	85 d2                	test   edx,edx
c002694f:	0f 84 e0 01 00 00    	je     c0026b35 <__addsf3+0x2ef>
c0026955:	85 db                	test   ebx,ebx
c0026957:	0f 84 e2 01 00 00    	je     c0026b3f <__addsf3+0x2f9>
c002695d:	89 d0                	mov    eax,edx
c002695f:	01 d8                	add    eax,ebx
c0026961:	0f 89 a9 01 00 00    	jns    c0026b10 <__addsf3+0x2ca>
c0026967:	e9 9d 01 00 00       	jmp    c0026b09 <__addsf3+0x2c3>
c002696c:	85 d2                	test   edx,edx
c002696e:	0f 85 cb 01 00 00    	jne    c0026b3f <__addsf3+0x2f9>
c0026974:	e9 bc 01 00 00       	jmp    c0026b35 <__addsf3+0x2ef>
c0026979:	31 c0                	xor    eax,eax
c002697b:	89 f1                	mov    ecx,esi
c002697d:	f7 d1                	not    ecx
c002697f:	84 c9                	test   cl,cl
c0026981:	0f 84 90 01 00 00    	je     c0026b17 <__addsf3+0x2d1>
c0026987:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002698a:	d1 e8                	shr    eax,1
c002698c:	e9 86 01 00 00       	jmp    c0026b17 <__addsf3+0x2d1>
c0026991:	85 c0                	test   eax,eax
c0026993:	0f 89 7e 01 00 00    	jns    c0026b17 <__addsf3+0x2d1>
c0026999:	46                   	inc    esi
c002699a:	89 f2                	mov    edx,esi
c002699c:	f7 d2                	not    edx
c002699e:	84 d2                	test   dl,dl
c00269a0:	0f 84 6f 01 00 00    	je     c0026b15 <__addsf3+0x2cf>
c00269a6:	89 c2                	mov    edx,eax
c00269a8:	83 e2 01             	and    edx,0x1
c00269ab:	d1 e8                	shr    eax,1
c00269ad:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00269b2:	09 d0                	or     eax,edx
c00269b4:	e9 5e 01 00 00       	jmp    c0026b17 <__addsf3+0x2d1>
c00269b9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00269bd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00269c0:	89 f0                	mov    eax,esi
c00269c2:	0f b6 c0             	movzx  eax,al
c00269c5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269c8:	29 c1                	sub    ecx,eax
c00269ca:	85 c9                	test   ecx,ecx
c00269cc:	7e 55                	jle    c0026a23 <__addsf3+0x1dd>
c00269ce:	85 c0                	test   eax,eax
c00269d0:	75 11                	jne    c00269e3 <__addsf3+0x19d>
c00269d2:	85 db                	test   ebx,ebx
c00269d4:	0f 84 65 01 00 00    	je     c0026b3f <__addsf3+0x2f9>
c00269da:	49                   	dec    ecx
c00269db:	75 19                	jne    c00269f6 <__addsf3+0x1b0>
c00269dd:	89 d0                	mov    eax,edx
c00269df:	29 d8                	sub    eax,ebx
c00269e1:	eb 38                	jmp    c0026a1b <__addsf3+0x1d5>
c00269e3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269e6:	f7 d0                	not    eax
c00269e8:	84 c0                	test   al,al
c00269ea:	0f 84 4f 01 00 00    	je     c0026b3f <__addsf3+0x2f9>
c00269f0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00269f6:	83 f9 1f             	cmp    ecx,0x1f
c00269f9:	0f 8f 40 01 00 00    	jg     c0026b3f <__addsf3+0x2f9>
c00269ff:	89 de                	mov    esi,ebx
c0026a01:	d3 ee                	shr    esi,cl
c0026a03:	b8 20 00 00 00       	mov    eax,0x20
c0026a08:	29 c8                	sub    eax,ecx
c0026a0a:	89 c1                	mov    ecx,eax
c0026a0c:	d3 e3                	shl    ebx,cl
c0026a0e:	31 c0                	xor    eax,eax
c0026a10:	85 db                	test   ebx,ebx
c0026a12:	0f 95 c0             	setne  al
c0026a15:	09 f0                	or     eax,esi
c0026a17:	29 c2                	sub    edx,eax
c0026a19:	89 d0                	mov    eax,edx
c0026a1b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a1e:	e9 af 00 00 00       	jmp    c0026ad2 <__addsf3+0x28c>
c0026a23:	74 5c                	je     c0026a81 <__addsf3+0x23b>
c0026a25:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026a28:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a2b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026a2f:	75 14                	jne    c0026a45 <__addsf3+0x1ff>
c0026a31:	85 d2                	test   edx,edx
c0026a33:	0f 84 06 01 00 00    	je     c0026b3f <__addsf3+0x2f9>
c0026a39:	48                   	dec    eax
c0026a3a:	75 1b                	jne    c0026a57 <__addsf3+0x211>
c0026a3c:	89 d8                	mov    eax,ebx
c0026a3e:	29 d0                	sub    eax,edx
c0026a40:	e9 8d 00 00 00       	jmp    c0026ad2 <__addsf3+0x28c>
c0026a45:	89 f1                	mov    ecx,esi
c0026a47:	f7 d1                	not    ecx
c0026a49:	84 c9                	test   cl,cl
c0026a4b:	0f 84 ee 00 00 00    	je     c0026b3f <__addsf3+0x2f9>
c0026a51:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a57:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a5a:	83 f8 1f             	cmp    eax,0x1f
c0026a5d:	0f 8f dc 00 00 00    	jg     c0026b3f <__addsf3+0x2f9>
c0026a63:	89 d7                	mov    edi,edx
c0026a65:	88 c1                	mov    cl,al
c0026a67:	d3 ef                	shr    edi,cl
c0026a69:	b9 20 00 00 00       	mov    ecx,0x20
c0026a6e:	29 c1                	sub    ecx,eax
c0026a70:	d3 e2                	shl    edx,cl
c0026a72:	31 c0                	xor    eax,eax
c0026a74:	85 d2                	test   edx,edx
c0026a76:	0f 95 c0             	setne  al
c0026a79:	09 f8                	or     eax,edi
c0026a7b:	29 c3                	sub    ebx,eax
c0026a7d:	89 d8                	mov    eax,ebx
c0026a7f:	eb 51                	jmp    c0026ad2 <__addsf3+0x28c>
c0026a81:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a84:	40                   	inc    eax
c0026a85:	a8 fe                	test   al,0xfe
c0026a87:	75 3d                	jne    c0026ac6 <__addsf3+0x280>
c0026a89:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026a8d:	0f 85 a7 00 00 00    	jne    c0026b3a <__addsf3+0x2f4>
c0026a93:	85 d2                	test   edx,edx
c0026a95:	75 12                	jne    c0026aa9 <__addsf3+0x263>
c0026a97:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a9a:	85 db                	test   ebx,ebx
c0026a9c:	0f 85 9d 00 00 00    	jne    c0026b3f <__addsf3+0x2f9>
c0026aa2:	31 ff                	xor    edi,edi
c0026aa4:	e9 96 00 00 00       	jmp    c0026b3f <__addsf3+0x2f9>
c0026aa9:	85 db                	test   ebx,ebx
c0026aab:	0f 84 8e 00 00 00    	je     c0026b3f <__addsf3+0x2f9>
c0026ab1:	89 d0                	mov    eax,edx
c0026ab3:	29 d8                	sub    eax,ebx
c0026ab5:	79 06                	jns    c0026abd <__addsf3+0x277>
c0026ab7:	89 d8                	mov    eax,ebx
c0026ab9:	29 d0                	sub    eax,edx
c0026abb:	eb 5a                	jmp    c0026b17 <__addsf3+0x2d1>
c0026abd:	bf 00 00 00 00       	mov    edi,0x0
c0026ac2:	74 7b                	je     c0026b3f <__addsf3+0x2f9>
c0026ac4:	eb 4a                	jmp    c0026b10 <__addsf3+0x2ca>
c0026ac6:	89 d0                	mov    eax,edx
c0026ac8:	29 d8                	sub    eax,ebx
c0026aca:	79 12                	jns    c0026ade <__addsf3+0x298>
c0026acc:	89 d8                	mov    eax,ebx
c0026ace:	29 d0                	sub    eax,edx
c0026ad0:	eb 09                	jmp    c0026adb <__addsf3+0x295>
c0026ad2:	85 c0                	test   eax,eax
c0026ad4:	79 41                	jns    c0026b17 <__addsf3+0x2d1>
c0026ad6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026adb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026ade:	31 f6                	xor    esi,esi
c0026ae0:	85 c0                	test   eax,eax
c0026ae2:	74 33                	je     c0026b17 <__addsf3+0x2d1>
c0026ae4:	0f bd c8             	bsr    ecx,eax
c0026ae7:	83 f1 1f             	xor    ecx,0x1f
c0026aea:	d3 e0                	shl    eax,cl
c0026aec:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026af0:	39 ca                	cmp    edx,ecx
c0026af2:	7f 10                	jg     c0026b04 <__addsf3+0x2be>
c0026af4:	29 d1                	sub    ecx,edx
c0026af6:	41                   	inc    ecx
c0026af7:	d3 e8                	shr    eax,cl
c0026af9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026afc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026b02:	eb 13                	jmp    c0026b17 <__addsf3+0x2d1>
c0026b04:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b07:	29 ce                	sub    esi,ecx
c0026b09:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026b0e:	eb 07                	jmp    c0026b17 <__addsf3+0x2d1>
c0026b10:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b13:	eb 02                	jmp    c0026b17 <__addsf3+0x2d1>
c0026b15:	31 c0                	xor    eax,eax
c0026b17:	89 c2                	mov    edx,eax
c0026b19:	c1 ea 08             	shr    edx,0x8
c0026b1c:	a8 7f                	test   al,0x7f
c0026b1e:	0f 95 c1             	setne  cl
c0026b21:	09 d1                	or     ecx,edx
c0026b23:	83 e1 01             	and    ecx,0x1
c0026b26:	c1 e8 07             	shr    eax,0x7
c0026b29:	21 c8                	and    eax,ecx
c0026b2b:	c1 e6 17             	shl    esi,0x17
c0026b2e:	09 d6                	or     esi,edx
c0026b30:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026b33:	eb 0a                	jmp    c0026b3f <__addsf3+0x2f9>
c0026b35:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b38:	eb 05                	jmp    c0026b3f <__addsf3+0x2f9>
c0026b3a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026b3f:	89 f8                	mov    eax,edi
c0026b41:	5a                   	pop    edx
c0026b42:	59                   	pop    ecx
c0026b43:	5b                   	pop    ebx
c0026b44:	5e                   	pop    esi
c0026b45:	5f                   	pop    edi
c0026b46:	5d                   	pop    ebp
c0026b47:	c3                   	ret    

c0026b48 <__subsf3>:
c0026b48:	55                   	push   ebp
c0026b49:	89 e5                	mov    ebp,esp
c0026b4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b4e:	05 00 00 00 80       	add    eax,0x80000000
c0026b53:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026b56:	5d                   	pop    ebp
c0026b57:	e9 ea fc ff ff       	jmp    c0026846 <__addsf3>

c0026b5c <__negsf2>:
c0026b5c:	55                   	push   ebp
c0026b5d:	89 e5                	mov    ebp,esp
c0026b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026b62:	05 00 00 00 80       	add    eax,0x80000000
c0026b67:	5d                   	pop    ebp
c0026b68:	c3                   	ret    

c0026b69 <__mulsf3>:
c0026b69:	55                   	push   ebp
c0026b6a:	89 e5                	mov    ebp,esp
c0026b6c:	57                   	push   edi
c0026b6d:	56                   	push   esi
c0026b6e:	53                   	push   ebx
c0026b6f:	83 ec 1c             	sub    esp,0x1c
c0026b72:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026b75:	89 f0                	mov    eax,esi
c0026b77:	89 f1                	mov    ecx,esi
c0026b79:	c1 f9 17             	sar    ecx,0x17
c0026b7c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026b7f:	c1 e0 08             	shl    eax,0x8
c0026b82:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026b87:	89 c1                	mov    ecx,eax
c0026b89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b8c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026b8f:	89 c7                	mov    edi,eax
c0026b91:	c1 ff 17             	sar    edi,0x17
c0026b94:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026b98:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026b9b:	89 f8                	mov    eax,edi
c0026b9d:	0f b6 c0             	movzx  eax,al
c0026ba0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026ba3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026ba7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026baa:	42                   	inc    edx
c0026bab:	80 e2 fe             	and    dl,0xfe
c0026bae:	75 7b                	jne    c0026c2b <__mulsf3+0xc2>
c0026bb0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026bb4:	74 54                	je     c0026c0a <__mulsf3+0xa1>
c0026bb6:	85 c9                	test   ecx,ecx
c0026bb8:	0f 85 64 01 00 00    	jne    c0026d22 <__mulsf3+0x1b9>
c0026bbe:	8d 57 01             	lea    edx,[edi+0x1]
c0026bc1:	80 e2 fe             	and    dl,0xfe
c0026bc4:	75 1f                	jne    c0026be5 <__mulsf3+0x7c>
c0026bc6:	85 c0                	test   eax,eax
c0026bc8:	b8 00 00 00 00       	mov    eax,0x0
c0026bcd:	74 29                	je     c0026bf8 <__mulsf3+0x8f>
c0026bcf:	53                   	push   ebx
c0026bd0:	53                   	push   ebx
c0026bd1:	50                   	push   eax
c0026bd2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bd5:	e8 96 05 00 00       	call   c0027170 <__nesf2>
c0026bda:	83 c4 10             	add    esp,0x10
c0026bdd:	85 c0                	test   eax,eax
c0026bdf:	0f 85 3a 01 00 00    	jne    c0026d1f <__mulsf3+0x1b6>
c0026be5:	85 ff                	test   edi,edi
c0026be7:	0f 89 35 01 00 00    	jns    c0026d22 <__mulsf3+0x1b9>
c0026bed:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026bf3:	e9 2a 01 00 00       	jmp    c0026d22 <__mulsf3+0x1b9>
c0026bf8:	51                   	push   ecx
c0026bf9:	51                   	push   ecx
c0026bfa:	50                   	push   eax
c0026bfb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bfe:	e8 6d 05 00 00       	call   c0027170 <__nesf2>
c0026c03:	83 c4 10             	add    esp,0x10
c0026c06:	85 c0                	test   eax,eax
c0026c08:	eb 15                	jmp    c0026c1f <__mulsf3+0xb6>
c0026c0a:	85 c9                	test   ecx,ecx
c0026c0c:	74 0b                	je     c0026c19 <__mulsf3+0xb0>
c0026c0e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026c11:	01 c9                	add    ecx,ecx
c0026c13:	78 16                	js     c0026c2b <__mulsf3+0xc2>
c0026c15:	89 d3                	mov    ebx,edx
c0026c17:	eb f5                	jmp    c0026c0e <__mulsf3+0xa5>
c0026c19:	89 f8                	mov    eax,edi
c0026c1b:	f7 d0                	not    eax
c0026c1d:	84 c0                	test   al,al
c0026c1f:	75 c4                	jne    c0026be5 <__mulsf3+0x7c>
c0026c21:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026c26:	e9 f7 00 00 00       	jmp    c0026d22 <__mulsf3+0x1b9>
c0026c2b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026c2e:	c1 e6 08             	shl    esi,0x8
c0026c31:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026c37:	8d 57 01             	lea    edx,[edi+0x1]
c0026c3a:	80 e2 fe             	and    dl,0xfe
c0026c3d:	75 63                	jne    c0026ca2 <__mulsf3+0x139>
c0026c3f:	85 c0                	test   eax,eax
c0026c41:	74 2f                	je     c0026c72 <__mulsf3+0x109>
c0026c43:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c47:	0f 89 d2 00 00 00    	jns    c0026d1f <__mulsf3+0x1b6>
c0026c4d:	52                   	push   edx
c0026c4e:	52                   	push   edx
c0026c4f:	6a 00                	push   0x0
c0026c51:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c54:	e8 dc 04 00 00       	call   c0027135 <__eqsf2>
c0026c59:	83 c4 10             	add    esp,0x10
c0026c5c:	85 c0                	test   eax,eax
c0026c5e:	0f 85 bb 00 00 00    	jne    c0026d1f <__mulsf3+0x1b6>
c0026c64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c67:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026c6d:	e9 b0 00 00 00       	jmp    c0026d22 <__mulsf3+0x1b9>
c0026c72:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026c75:	50                   	push   eax
c0026c76:	50                   	push   eax
c0026c77:	6a 00                	push   0x0
c0026c79:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c7c:	e8 b4 04 00 00       	call   c0027135 <__eqsf2>
c0026c81:	83 c4 10             	add    esp,0x10
c0026c84:	85 c0                	test   eax,eax
c0026c86:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026c89:	75 0c                	jne    c0026c97 <__mulsf3+0x12e>
c0026c8b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c8f:	0f 89 8a 00 00 00    	jns    c0026d1f <__mulsf3+0x1b6>
c0026c95:	eb cd                	jmp    c0026c64 <__mulsf3+0xfb>
c0026c97:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026c9a:	01 f6                	add    esi,esi
c0026c9c:	78 04                	js     c0026ca2 <__mulsf3+0x139>
c0026c9e:	89 c3                	mov    ebx,eax
c0026ca0:	eb f5                	jmp    c0026c97 <__mulsf3+0x12e>
c0026ca2:	89 c8                	mov    eax,ecx
c0026ca4:	0d 00 00 00 80       	or     eax,0x80000000
c0026ca9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026caf:	f7 e6                	mul    esi
c0026cb1:	85 c0                	test   eax,eax
c0026cb3:	0f 95 c0             	setne  al
c0026cb6:	0f b6 c0             	movzx  eax,al
c0026cb9:	09 c2                	or     edx,eax
c0026cbb:	78 03                	js     c0026cc0 <__mulsf3+0x157>
c0026cbd:	01 d2                	add    edx,edx
c0026cbf:	4b                   	dec    ebx
c0026cc0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026cc6:	7f 22                	jg     c0026cea <__mulsf3+0x181>
c0026cc8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026cce:	85 db                	test   ebx,ebx
c0026cd0:	7f 23                	jg     c0026cf5 <__mulsf3+0x18c>
c0026cd2:	83 fb e9             	cmp    ebx,0xffffffe9
c0026cd5:	7c 1a                	jl     c0026cf1 <__mulsf3+0x188>
c0026cd7:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cdd:	b9 01 00 00 00       	mov    ecx,0x1
c0026ce2:	29 d9                	sub    ecx,ebx
c0026ce4:	d3 ea                	shr    edx,cl
c0026ce6:	31 db                	xor    ebx,ebx
c0026ce8:	eb 0b                	jmp    c0026cf5 <__mulsf3+0x18c>
c0026cea:	bb ff 00 00 00       	mov    ebx,0xff
c0026cef:	eb 02                	jmp    c0026cf3 <__mulsf3+0x18a>
c0026cf1:	31 db                	xor    ebx,ebx
c0026cf3:	31 d2                	xor    edx,edx
c0026cf5:	89 d0                	mov    eax,edx
c0026cf7:	c1 e8 08             	shr    eax,0x8
c0026cfa:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026cfd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026d03:	09 fb                	or     ebx,edi
c0026d05:	c1 e3 17             	shl    ebx,0x17
c0026d08:	09 c3                	or     ebx,eax
c0026d0a:	f6 c2 7f             	test   dl,0x7f
c0026d0d:	0f 95 c1             	setne  cl
c0026d10:	09 c8                	or     eax,ecx
c0026d12:	83 e0 01             	and    eax,0x1
c0026d15:	c1 ea 07             	shr    edx,0x7
c0026d18:	21 c2                	and    edx,eax
c0026d1a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026d1d:	eb 03                	jmp    c0026d22 <__mulsf3+0x1b9>
c0026d1f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026d22:	89 f0                	mov    eax,esi
c0026d24:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026d27:	5b                   	pop    ebx
c0026d28:	5e                   	pop    esi
c0026d29:	5f                   	pop    edi
c0026d2a:	5d                   	pop    ebp
c0026d2b:	c3                   	ret    

c0026d2c <__divsf3>:
c0026d2c:	55                   	push   ebp
c0026d2d:	89 e5                	mov    ebp,esp
c0026d2f:	57                   	push   edi
c0026d30:	56                   	push   esi
c0026d31:	53                   	push   ebx
c0026d32:	83 ec 1c             	sub    esp,0x1c
c0026d35:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026d38:	89 d8                	mov    eax,ebx
c0026d3a:	89 d9                	mov    ecx,ebx
c0026d3c:	c1 f9 17             	sar    ecx,0x17
c0026d3f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026d42:	c1 e0 08             	shl    eax,0x8
c0026d45:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d4a:	89 c1                	mov    ecx,eax
c0026d4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d4f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026d52:	89 c7                	mov    edi,eax
c0026d54:	c1 ff 17             	sar    edi,0x17
c0026d57:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026d5b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026d5e:	89 f8                	mov    eax,edi
c0026d60:	0f b6 c0             	movzx  eax,al
c0026d63:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026d66:	29 c6                	sub    esi,eax
c0026d68:	83 c6 7f             	add    esi,0x7f
c0026d6b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026d6e:	42                   	inc    edx
c0026d6f:	80 e2 fe             	and    dl,0xfe
c0026d72:	0f 85 9c 00 00 00    	jne    c0026e14 <__divsf3+0xe8>
c0026d78:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026d7c:	74 33                	je     c0026db1 <__divsf3+0x85>
c0026d7e:	85 c9                	test   ecx,ecx
c0026d80:	0f 85 c7 01 00 00    	jne    c0026f4d <__divsf3+0x221>
c0026d86:	8d 57 01             	lea    edx,[edi+0x1]
c0026d89:	80 e2 fe             	and    dl,0xfe
c0026d8c:	75 2f                	jne    c0026dbd <__divsf3+0x91>
c0026d8e:	85 c0                	test   eax,eax
c0026d90:	74 2b                	je     c0026dbd <__divsf3+0x91>
c0026d92:	51                   	push   ecx
c0026d93:	51                   	push   ecx
c0026d94:	6a 00                	push   0x0
c0026d96:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d99:	e8 d2 03 00 00       	call   c0027170 <__nesf2>
c0026d9e:	83 c4 10             	add    esp,0x10
c0026da1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026da4:	85 c0                	test   eax,eax
c0026da6:	0f 85 a1 01 00 00    	jne    c0026f4d <__divsf3+0x221>
c0026dac:	e9 92 01 00 00       	jmp    c0026f43 <__divsf3+0x217>
c0026db1:	85 c9                	test   ecx,ecx
c0026db3:	75 1b                	jne    c0026dd0 <__divsf3+0xa4>
c0026db5:	8d 57 01             	lea    edx,[edi+0x1]
c0026db8:	80 e2 fe             	and    dl,0xfe
c0026dbb:	74 1e                	je     c0026ddb <__divsf3+0xaf>
c0026dbd:	85 ff                	test   edi,edi
c0026dbf:	0f 89 88 01 00 00    	jns    c0026f4d <__divsf3+0x221>
c0026dc5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026dcb:	e9 7d 01 00 00       	jmp    c0026f4d <__divsf3+0x221>
c0026dd0:	8d 56 ff             	lea    edx,[esi-0x1]
c0026dd3:	01 c9                	add    ecx,ecx
c0026dd5:	78 3d                	js     c0026e14 <__divsf3+0xe8>
c0026dd7:	89 d6                	mov    esi,edx
c0026dd9:	eb f5                	jmp    c0026dd0 <__divsf3+0xa4>
c0026ddb:	85 c0                	test   eax,eax
c0026ddd:	b8 00 00 00 00       	mov    eax,0x0
c0026de2:	74 18                	je     c0026dfc <__divsf3+0xd0>
c0026de4:	52                   	push   edx
c0026de5:	52                   	push   edx
c0026de6:	50                   	push   eax
c0026de7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dea:	e8 81 03 00 00       	call   c0027170 <__nesf2>
c0026def:	83 c4 10             	add    esp,0x10
c0026df2:	85 c0                	test   eax,eax
c0026df4:	0f 85 50 01 00 00    	jne    c0026f4a <__divsf3+0x21e>
c0026dfa:	eb c1                	jmp    c0026dbd <__divsf3+0x91>
c0026dfc:	56                   	push   esi
c0026dfd:	56                   	push   esi
c0026dfe:	50                   	push   eax
c0026dff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e02:	e8 69 03 00 00       	call   c0027170 <__nesf2>
c0026e07:	83 c4 10             	add    esp,0x10
c0026e0a:	85 c0                	test   eax,eax
c0026e0c:	0f 84 31 01 00 00    	je     c0026f43 <__divsf3+0x217>
c0026e12:	eb a9                	jmp    c0026dbd <__divsf3+0x91>
c0026e14:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026e17:	c1 e3 08             	shl    ebx,0x8
c0026e1a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026e20:	8d 57 01             	lea    edx,[edi+0x1]
c0026e23:	80 e2 fe             	and    dl,0xfe
c0026e26:	75 71                	jne    c0026e99 <__divsf3+0x16d>
c0026e28:	85 c0                	test   eax,eax
c0026e2a:	ba 00 00 00 00       	mov    edx,0x0
c0026e2f:	74 2f                	je     c0026e60 <__divsf3+0x134>
c0026e31:	51                   	push   ecx
c0026e32:	51                   	push   ecx
c0026e33:	52                   	push   edx
c0026e34:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e37:	e8 f9 02 00 00       	call   c0027135 <__eqsf2>
c0026e3c:	83 c4 10             	add    esp,0x10
c0026e3f:	85 c0                	test   eax,eax
c0026e41:	0f 85 03 01 00 00    	jne    c0026f4a <__divsf3+0x21e>
c0026e47:	31 d2                	xor    edx,edx
c0026e49:	89 d3                	mov    ebx,edx
c0026e4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026e4e:	31 f8                	xor    eax,edi
c0026e50:	0f 89 f7 00 00 00    	jns    c0026f4d <__divsf3+0x221>
c0026e56:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026e5b:	e9 ed 00 00 00       	jmp    c0026f4d <__divsf3+0x221>
c0026e60:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026e63:	50                   	push   eax
c0026e64:	50                   	push   eax
c0026e65:	52                   	push   edx
c0026e66:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e69:	e8 c7 02 00 00       	call   c0027135 <__eqsf2>
c0026e6e:	83 c4 10             	add    esp,0x10
c0026e71:	85 c0                	test   eax,eax
c0026e73:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e76:	75 16                	jne    c0026e8e <__divsf3+0x162>
c0026e78:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026e7b:	31 fb                	xor    ebx,edi
c0026e7d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026e83:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026e89:	e9 bf 00 00 00       	jmp    c0026f4d <__divsf3+0x221>
c0026e8e:	8d 46 01             	lea    eax,[esi+0x1]
c0026e91:	01 db                	add    ebx,ebx
c0026e93:	78 04                	js     c0026e99 <__divsf3+0x16d>
c0026e95:	89 c6                	mov    esi,eax
c0026e97:	eb f5                	jmp    c0026e8e <__divsf3+0x162>
c0026e99:	89 c8                	mov    eax,ecx
c0026e9b:	0d 00 00 00 80       	or     eax,0x80000000
c0026ea0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ea6:	31 d2                	xor    edx,edx
c0026ea8:	39 d8                	cmp    eax,ebx
c0026eaa:	72 07                	jb     c0026eb3 <__divsf3+0x187>
c0026eac:	29 d8                	sub    eax,ebx
c0026eae:	ba 01 00 00 00       	mov    edx,0x1
c0026eb3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026eba:	01 d2                	add    edx,edx
c0026ebc:	89 c1                	mov    ecx,eax
c0026ebe:	01 c0                	add    eax,eax
c0026ec0:	85 c9                	test   ecx,ecx
c0026ec2:	78 04                	js     c0026ec8 <__divsf3+0x19c>
c0026ec4:	39 c3                	cmp    ebx,eax
c0026ec6:	77 05                	ja     c0026ecd <__divsf3+0x1a1>
c0026ec8:	29 d8                	sub    eax,ebx
c0026eca:	83 ca 01             	or     edx,0x1
c0026ecd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026ed0:	75 e8                	jne    c0026eba <__divsf3+0x18e>
c0026ed2:	85 c0                	test   eax,eax
c0026ed4:	0f 95 c0             	setne  al
c0026ed7:	0f b6 c0             	movzx  eax,al
c0026eda:	c1 e2 06             	shl    edx,0x6
c0026edd:	09 c2                	or     edx,eax
c0026edf:	78 03                	js     c0026ee4 <__divsf3+0x1b8>
c0026ee1:	01 d2                	add    edx,edx
c0026ee3:	4e                   	dec    esi
c0026ee4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026eea:	7f 22                	jg     c0026f0e <__divsf3+0x1e2>
c0026eec:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026ef2:	85 f6                	test   esi,esi
c0026ef4:	7f 23                	jg     c0026f19 <__divsf3+0x1ed>
c0026ef6:	83 fe e9             	cmp    esi,0xffffffe9
c0026ef9:	7c 1a                	jl     c0026f15 <__divsf3+0x1e9>
c0026efb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f01:	b9 01 00 00 00       	mov    ecx,0x1
c0026f06:	29 f1                	sub    ecx,esi
c0026f08:	d3 ea                	shr    edx,cl
c0026f0a:	31 f6                	xor    esi,esi
c0026f0c:	eb 0b                	jmp    c0026f19 <__divsf3+0x1ed>
c0026f0e:	be ff 00 00 00       	mov    esi,0xff
c0026f13:	eb 02                	jmp    c0026f17 <__divsf3+0x1eb>
c0026f15:	31 f6                	xor    esi,esi
c0026f17:	31 d2                	xor    edx,edx
c0026f19:	89 d0                	mov    eax,edx
c0026f1b:	c1 e8 08             	shr    eax,0x8
c0026f1e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026f21:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026f27:	09 fe                	or     esi,edi
c0026f29:	c1 e6 17             	shl    esi,0x17
c0026f2c:	09 c6                	or     esi,eax
c0026f2e:	f6 c2 7f             	test   dl,0x7f
c0026f31:	0f 95 c1             	setne  cl
c0026f34:	09 c8                	or     eax,ecx
c0026f36:	83 e0 01             	and    eax,0x1
c0026f39:	c1 ea 07             	shr    edx,0x7
c0026f3c:	21 c2                	and    edx,eax
c0026f3e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026f41:	eb 0a                	jmp    c0026f4d <__divsf3+0x221>
c0026f43:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026f48:	eb 03                	jmp    c0026f4d <__divsf3+0x221>
c0026f4a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026f4d:	89 d8                	mov    eax,ebx
c0026f4f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f52:	5b                   	pop    ebx
c0026f53:	5e                   	pop    esi
c0026f54:	5f                   	pop    edi
c0026f55:	5d                   	pop    ebp
c0026f56:	c3                   	ret    

c0026f57 <__floatsisf>:
c0026f57:	55                   	push   ebp
c0026f58:	89 e5                	mov    ebp,esp
c0026f5a:	53                   	push   ebx
c0026f5b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f5e:	85 d2                	test   edx,edx
c0026f60:	7e 2b                	jle    c0026f8d <__floatsisf+0x36>
c0026f62:	0f bd ca             	bsr    ecx,edx
c0026f65:	83 f1 1f             	xor    ecx,0x1f
c0026f68:	d3 e2                	shl    edx,cl
c0026f6a:	89 d0                	mov    eax,edx
c0026f6c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f71:	89 c3                	mov    ebx,eax
c0026f73:	c1 eb 08             	shr    ebx,0x8
c0026f76:	80 e2 7f             	and    dl,0x7f
c0026f79:	0f 95 c2             	setne  dl
c0026f7c:	09 da                	or     edx,ebx
c0026f7e:	83 e2 01             	and    edx,0x1
c0026f81:	c1 e8 07             	shr    eax,0x7
c0026f84:	21 c2                	and    edx,eax
c0026f86:	b8 9e 00 00 00       	mov    eax,0x9e
c0026f8b:	eb 32                	jmp    c0026fbf <__floatsisf+0x68>
c0026f8d:	b8 00 00 00 00       	mov    eax,0x0
c0026f92:	74 34                	je     c0026fc8 <__floatsisf+0x71>
c0026f94:	f7 da                	neg    edx
c0026f96:	0f bd ca             	bsr    ecx,edx
c0026f99:	83 f1 1f             	xor    ecx,0x1f
c0026f9c:	d3 e2                	shl    edx,cl
c0026f9e:	89 d0                	mov    eax,edx
c0026fa0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fa5:	89 c3                	mov    ebx,eax
c0026fa7:	c1 eb 08             	shr    ebx,0x8
c0026faa:	80 e2 7f             	and    dl,0x7f
c0026fad:	0f 95 c2             	setne  dl
c0026fb0:	09 da                	or     edx,ebx
c0026fb2:	83 e2 01             	and    edx,0x1
c0026fb5:	c1 e8 07             	shr    eax,0x7
c0026fb8:	21 c2                	and    edx,eax
c0026fba:	b8 9e 01 00 00       	mov    eax,0x19e
c0026fbf:	29 c8                	sub    eax,ecx
c0026fc1:	c1 e0 17             	shl    eax,0x17
c0026fc4:	09 d8                	or     eax,ebx
c0026fc6:	01 d0                	add    eax,edx
c0026fc8:	5b                   	pop    ebx
c0026fc9:	5d                   	pop    ebp
c0026fca:	c3                   	ret    

c0026fcb <__floatunsisf>:
c0026fcb:	55                   	push   ebp
c0026fcc:	89 e5                	mov    ebp,esp
c0026fce:	53                   	push   ebx
c0026fcf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026fd2:	31 c0                	xor    eax,eax
c0026fd4:	85 d2                	test   edx,edx
c0026fd6:	74 32                	je     c002700a <__floatunsisf+0x3f>
c0026fd8:	0f bd ca             	bsr    ecx,edx
c0026fdb:	83 f1 1f             	xor    ecx,0x1f
c0026fde:	d3 e2                	shl    edx,cl
c0026fe0:	89 d0                	mov    eax,edx
c0026fe2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fe7:	89 c3                	mov    ebx,eax
c0026fe9:	c1 eb 08             	shr    ebx,0x8
c0026fec:	80 e2 7f             	and    dl,0x7f
c0026fef:	0f 95 c2             	setne  dl
c0026ff2:	09 da                	or     edx,ebx
c0026ff4:	83 e2 01             	and    edx,0x1
c0026ff7:	c1 e8 07             	shr    eax,0x7
c0026ffa:	21 c2                	and    edx,eax
c0026ffc:	b8 9e 00 00 00       	mov    eax,0x9e
c0027001:	29 c8                	sub    eax,ecx
c0027003:	c1 e0 17             	shl    eax,0x17
c0027006:	09 d8                	or     eax,ebx
c0027008:	01 d0                	add    eax,edx
c002700a:	5b                   	pop    ebx
c002700b:	5d                   	pop    ebp
c002700c:	c3                   	ret    

c002700d <__fixsfsi>:
c002700d:	55                   	push   ebp
c002700e:	89 e5                	mov    ebp,esp
c0027010:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027013:	89 d1                	mov    ecx,edx
c0027015:	c1 e1 08             	shl    ecx,0x8
c0027018:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002701e:	c1 fa 17             	sar    edx,0x17
c0027021:	78 1c                	js     c002703f <__fixsfsi+0x32>
c0027023:	83 ea 7f             	sub    edx,0x7f
c0027026:	31 c0                	xor    eax,eax
c0027028:	83 fa 1e             	cmp    edx,0x1e
c002702b:	77 40                	ja     c002706d <__fixsfsi+0x60>
c002702d:	89 c8                	mov    eax,ecx
c002702f:	0d 00 00 00 80       	or     eax,0x80000000
c0027034:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027039:	29 d1                	sub    ecx,edx
c002703b:	d3 e8                	shr    eax,cl
c002703d:	eb 2e                	jmp    c002706d <__fixsfsi+0x60>
c002703f:	31 c0                	xor    eax,eax
c0027041:	81 c2 81 00 00 00    	add    edx,0x81
c0027047:	78 24                	js     c002706d <__fixsfsi+0x60>
c0027049:	83 fa 1e             	cmp    edx,0x1e
c002704c:	7e 09                	jle    c0027057 <__fixsfsi+0x4a>
c002704e:	83 fa 1f             	cmp    edx,0x1f
c0027051:	75 18                	jne    c002706b <__fixsfsi+0x5e>
c0027053:	85 c9                	test   ecx,ecx
c0027055:	75 14                	jne    c002706b <__fixsfsi+0x5e>
c0027057:	89 c8                	mov    eax,ecx
c0027059:	0d 00 00 00 80       	or     eax,0x80000000
c002705e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027063:	29 d1                	sub    ecx,edx
c0027065:	d3 e8                	shr    eax,cl
c0027067:	f7 d8                	neg    eax
c0027069:	eb 02                	jmp    c002706d <__fixsfsi+0x60>
c002706b:	31 c0                	xor    eax,eax
c002706d:	5d                   	pop    ebp
c002706e:	c3                   	ret    

c002706f <__fixunssfsi>:
c002706f:	55                   	push   ebp
c0027070:	89 e5                	mov    ebp,esp
c0027072:	53                   	push   ebx
c0027073:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027076:	89 d3                	mov    ebx,edx
c0027078:	c1 fb 17             	sar    ebx,0x17
c002707b:	83 eb 7f             	sub    ebx,0x7f
c002707e:	31 c0                	xor    eax,eax
c0027080:	83 fb 1f             	cmp    ebx,0x1f
c0027083:	77 18                	ja     c002709d <__fixunssfsi+0x2e>
c0027085:	89 d0                	mov    eax,edx
c0027087:	c1 e0 08             	shl    eax,0x8
c002708a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002708f:	0d 00 00 00 80       	or     eax,0x80000000
c0027094:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027099:	29 d9                	sub    ecx,ebx
c002709b:	d3 e8                	shr    eax,cl
c002709d:	5b                   	pop    ebx
c002709e:	5d                   	pop    ebp
c002709f:	c3                   	ret    

c00270a0 <__cmpsf2>:
c00270a0:	55                   	push   ebp
c00270a1:	89 e5                	mov    ebp,esp
c00270a3:	57                   	push   edi
c00270a4:	56                   	push   esi
c00270a5:	53                   	push   ebx
c00270a6:	83 ec 24             	sub    esp,0x24
c00270a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00270af:	e8 4f 10 00 00       	call   c0028103 <__truncdfsf2>
c00270b4:	5a                   	pop    edx
c00270b5:	59                   	pop    ecx
c00270b6:	89 c3                	mov    ebx,eax
c00270b8:	c1 e8 17             	shr    eax,0x17
c00270bb:	0f b6 f0             	movzx  esi,al
c00270be:	89 d8                	mov    eax,ebx
c00270c0:	c1 e8 1f             	shr    eax,0x1f
c00270c3:	31 c6                	xor    esi,eax
c00270c5:	c1 e3 08             	shl    ebx,0x8
c00270c8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00270cb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00270ce:	e8 30 10 00 00       	call   c0028103 <__truncdfsf2>
c00270d3:	83 c4 10             	add    esp,0x10
c00270d6:	89 c1                	mov    ecx,eax
c00270d8:	c1 e9 17             	shr    ecx,0x17
c00270db:	0f b6 c9             	movzx  ecx,cl
c00270de:	89 c7                	mov    edi,eax
c00270e0:	c1 ef 1f             	shr    edi,0x1f
c00270e3:	89 ca                	mov    edx,ecx
c00270e5:	31 fa                	xor    edx,edi
c00270e7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00270ea:	c1 e0 08             	shl    eax,0x8
c00270ed:	89 c2                	mov    edx,eax
c00270ef:	89 d8                	mov    eax,ebx
c00270f1:	09 d0                	or     eax,edx
c00270f3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270f8:	09 f0                	or     eax,esi
c00270fa:	75 08                	jne    c0027104 <__cmpsf2+0x64>
c00270fc:	31 c0                	xor    eax,eax
c00270fe:	39 f9                	cmp    ecx,edi
c0027100:	75 0c                	jne    c002710e <__cmpsf2+0x6e>
c0027102:	eb 29                	jmp    c002712d <__cmpsf2+0x8d>
c0027104:	b8 01 00 00 00       	mov    eax,0x1
c0027109:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002710c:	7f 1f                	jg     c002712d <__cmpsf2+0x8d>
c002710e:	83 c8 ff             	or     eax,0xffffffff
c0027111:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027114:	7c 17                	jl     c002712d <__cmpsf2+0x8d>
c0027116:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002711c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027122:	b8 01 00 00 00       	mov    eax,0x1
c0027127:	39 d3                	cmp    ebx,edx
c0027129:	77 02                	ja     c002712d <__cmpsf2+0x8d>
c002712b:	19 c0                	sbb    eax,eax
c002712d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027130:	5b                   	pop    ebx
c0027131:	5e                   	pop    esi
c0027132:	5f                   	pop    edi
c0027133:	5d                   	pop    ebp
c0027134:	c3                   	ret    

c0027135 <__eqsf2>:
c0027135:	55                   	push   ebp
c0027136:	89 e5                	mov    ebp,esp
c0027138:	83 ec 24             	sub    esp,0x24
c002713b:	6a 01                	push   0x1
c002713d:	83 ec 0c             	sub    esp,0xc
c0027140:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027143:	e8 df 10 00 00       	call   c0028227 <__extendsfdf2>
c0027148:	83 c4 10             	add    esp,0x10
c002714b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002714e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027151:	52                   	push   edx
c0027152:	50                   	push   eax
c0027153:	50                   	push   eax
c0027154:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027157:	e8 cb 10 00 00       	call   c0028227 <__extendsfdf2>
c002715c:	59                   	pop    ecx
c002715d:	59                   	pop    ecx
c002715e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027161:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027164:	52                   	push   edx
c0027165:	50                   	push   eax
c0027166:	e8 35 ff ff ff       	call   c00270a0 <__cmpsf2>
c002716b:	83 c4 20             	add    esp,0x20
c002716e:	c9                   	leave  
c002716f:	c3                   	ret    

c0027170 <__nesf2>:
c0027170:	eb c3                	jmp    c0027135 <__eqsf2>

c0027172 <__gtsf2>:
c0027172:	55                   	push   ebp
c0027173:	89 e5                	mov    ebp,esp
c0027175:	83 ec 24             	sub    esp,0x24
c0027178:	6a ff                	push   0xffffffff
c002717a:	83 ec 0c             	sub    esp,0xc
c002717d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027180:	e8 a2 10 00 00       	call   c0028227 <__extendsfdf2>
c0027185:	83 c4 10             	add    esp,0x10
c0027188:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002718b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002718e:	52                   	push   edx
c002718f:	50                   	push   eax
c0027190:	50                   	push   eax
c0027191:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027194:	e8 8e 10 00 00       	call   c0028227 <__extendsfdf2>
c0027199:	59                   	pop    ecx
c002719a:	59                   	pop    ecx
c002719b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002719e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00271a1:	52                   	push   edx
c00271a2:	50                   	push   eax
c00271a3:	e8 f8 fe ff ff       	call   c00270a0 <__cmpsf2>
c00271a8:	83 c4 20             	add    esp,0x20
c00271ab:	c9                   	leave  
c00271ac:	c3                   	ret    

c00271ad <__gesf2>:
c00271ad:	eb c3                	jmp    c0027172 <__gtsf2>

c00271af <__ltsf2>:
c00271af:	eb 84                	jmp    c0027135 <__eqsf2>

c00271b1 <__lesf2>:
c00271b1:	eb 82                	jmp    c0027135 <__eqsf2>

c00271b3 <__adddf3>:
c00271b3:	55                   	push   ebp
c00271b4:	89 e5                	mov    ebp,esp
c00271b6:	57                   	push   edi
c00271b7:	56                   	push   esi
c00271b8:	53                   	push   ebx
c00271b9:	83 ec 24             	sub    esp,0x24
c00271bc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00271bf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00271c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00271c5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271c8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00271cb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00271ce:	89 c8                	mov    eax,ecx
c00271d0:	89 ce                	mov    esi,ecx
c00271d2:	c1 fe 14             	sar    esi,0x14
c00271d5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00271d8:	89 fb                	mov    ebx,edi
c00271da:	89 fa                	mov    edx,edi
c00271dc:	c1 e2 0b             	shl    edx,0xb
c00271df:	c1 e0 0b             	shl    eax,0xb
c00271e2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00271e7:	c1 eb 15             	shr    ebx,0x15
c00271ea:	09 d8                	or     eax,ebx
c00271ec:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00271ef:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00271f2:	c1 fe 14             	sar    esi,0x14
c00271f5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00271f8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00271fb:	89 f3                	mov    ebx,esi
c00271fd:	c1 e3 0b             	shl    ebx,0xb
c0027200:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027203:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027206:	c1 e3 0b             	shl    ebx,0xb
c0027209:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002720f:	c1 ee 15             	shr    esi,0x15
c0027212:	09 f3                	or     ebx,esi
c0027214:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027217:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002721a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002721d:	0f 88 5f 02 00 00    	js     c0027482 <__adddf3+0x2cf>
c0027223:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027226:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027229:	85 db                	test   ebx,ebx
c002722b:	0f 8e c7 00 00 00    	jle    c00272f8 <__adddf3+0x145>
c0027231:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027238:	75 1a                	jne    c0027254 <__adddf3+0xa1>
c002723a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002723d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027240:	0f 84 b2 05 00 00    	je     c00277f8 <__adddf3+0x645>
c0027246:	4b                   	dec    ebx
c0027247:	75 23                	jne    c002726c <__adddf3+0xb9>
c0027249:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002724c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002724f:	e9 99 00 00 00       	jmp    c00272ed <__adddf3+0x13a>
c0027254:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027257:	f7 d6                	not    esi
c0027259:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002725f:	0f 84 93 05 00 00    	je     c00277f8 <__adddf3+0x645>
c0027265:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002726c:	83 fb 1f             	cmp    ebx,0x1f
c002726f:	7e 42                	jle    c00272b3 <__adddf3+0x100>
c0027271:	83 fb 3f             	cmp    ebx,0x3f
c0027274:	0f 8f 7e 05 00 00    	jg     c00277f8 <__adddf3+0x645>
c002727a:	83 e3 1f             	and    ebx,0x1f
c002727d:	89 d9                	mov    ecx,ebx
c002727f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027282:	d3 ef                	shr    edi,cl
c0027284:	31 db                	xor    ebx,ebx
c0027286:	85 c9                	test   ecx,ecx
c0027288:	74 15                	je     c002729f <__adddf3+0xec>
c002728a:	be 20 00 00 00       	mov    esi,0x20
c002728f:	29 ce                	sub    esi,ecx
c0027291:	89 f1                	mov    ecx,esi
c0027293:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027296:	d3 e6                	shl    esi,cl
c0027298:	31 db                	xor    ebx,ebx
c002729a:	85 f6                	test   esi,esi
c002729c:	0f 95 c3             	setne  bl
c002729f:	31 c9                	xor    ecx,ecx
c00272a1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00272a5:	0f 95 c1             	setne  cl
c00272a8:	09 cf                	or     edi,ecx
c00272aa:	09 fb                	or     ebx,edi
c00272ac:	01 da                	add    edx,ebx
c00272ae:	83 d0 00             	adc    eax,0x0
c00272b1:	eb 3a                	jmp    c00272ed <__adddf3+0x13a>
c00272b3:	bf 20 00 00 00       	mov    edi,0x20
c00272b8:	29 df                	sub    edi,ebx
c00272ba:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272bd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272c0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00272c3:	d3 e6                	shl    esi,cl
c00272c5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00272c8:	88 d9                	mov    cl,bl
c00272ca:	d3 ef                	shr    edi,cl
c00272cc:	09 fe                	or     esi,edi
c00272ce:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00272d1:	88 d9                	mov    cl,bl
c00272d3:	d3 ef                	shr    edi,cl
c00272d5:	89 fb                	mov    ebx,edi
c00272d7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00272da:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00272dd:	d3 e7                	shl    edi,cl
c00272df:	85 ff                	test   edi,edi
c00272e1:	0f 95 c1             	setne  cl
c00272e4:	0f b6 c9             	movzx  ecx,cl
c00272e7:	09 ce                	or     esi,ecx
c00272e9:	01 f2                	add    edx,esi
c00272eb:	11 d8                	adc    eax,ebx
c00272ed:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272f0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272f3:	e9 52 01 00 00       	jmp    c002744a <__adddf3+0x297>
c00272f8:	0f 84 d5 00 00 00    	je     c00273d3 <__adddf3+0x220>
c00272fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027301:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027304:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027307:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002730a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027311:	75 20                	jne    c0027333 <__adddf3+0x180>
c0027313:	89 d6                	mov    esi,edx
c0027315:	09 c6                	or     esi,eax
c0027317:	0f 84 db 04 00 00    	je     c00277f8 <__adddf3+0x645>
c002731d:	4b                   	dec    ebx
c002731e:	75 29                	jne    c0027349 <__adddf3+0x196>
c0027320:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027323:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027326:	01 d1                	add    ecx,edx
c0027328:	11 c6                	adc    esi,eax
c002732a:	89 f0                	mov    eax,esi
c002732c:	89 ca                	mov    edx,ecx
c002732e:	e9 17 01 00 00       	jmp    c002744a <__adddf3+0x297>
c0027333:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027336:	f7 d6                	not    esi
c0027338:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002733e:	0f 84 b4 04 00 00    	je     c00277f8 <__adddf3+0x645>
c0027344:	0d 00 00 00 80       	or     eax,0x80000000
c0027349:	83 fb 1f             	cmp    ebx,0x1f
c002734c:	7e 48                	jle    c0027396 <__adddf3+0x1e3>
c002734e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027351:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027354:	83 fb 3f             	cmp    ebx,0x3f
c0027357:	0f 8f 9b 04 00 00    	jg     c00277f8 <__adddf3+0x645>
c002735d:	83 e3 1f             	and    ebx,0x1f
c0027360:	89 d9                	mov    ecx,ebx
c0027362:	89 c7                	mov    edi,eax
c0027364:	d3 ef                	shr    edi,cl
c0027366:	31 db                	xor    ebx,ebx
c0027368:	85 c9                	test   ecx,ecx
c002736a:	74 12                	je     c002737e <__adddf3+0x1cb>
c002736c:	be 20 00 00 00       	mov    esi,0x20
c0027371:	29 ce                	sub    esi,ecx
c0027373:	89 f1                	mov    ecx,esi
c0027375:	d3 e0                	shl    eax,cl
c0027377:	31 db                	xor    ebx,ebx
c0027379:	85 c0                	test   eax,eax
c002737b:	0f 95 c3             	setne  bl
c002737e:	31 c0                	xor    eax,eax
c0027380:	85 d2                	test   edx,edx
c0027382:	0f 95 c0             	setne  al
c0027385:	09 c7                	or     edi,eax
c0027387:	09 fb                	or     ebx,edi
c0027389:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002738c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002738f:	01 da                	add    edx,ebx
c0027391:	83 d6 00             	adc    esi,0x0
c0027394:	eb 39                	jmp    c00273cf <__adddf3+0x21c>
c0027396:	be 20 00 00 00       	mov    esi,0x20
c002739b:	29 de                	sub    esi,ebx
c002739d:	89 c7                	mov    edi,eax
c002739f:	89 f1                	mov    ecx,esi
c00273a1:	d3 e7                	shl    edi,cl
c00273a3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00273a6:	89 d7                	mov    edi,edx
c00273a8:	88 d9                	mov    cl,bl
c00273aa:	d3 ef                	shr    edi,cl
c00273ac:	89 f9                	mov    ecx,edi
c00273ae:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273b1:	09 cf                	or     edi,ecx
c00273b3:	88 d9                	mov    cl,bl
c00273b5:	d3 e8                	shr    eax,cl
c00273b7:	89 f1                	mov    ecx,esi
c00273b9:	d3 e2                	shl    edx,cl
c00273bb:	85 d2                	test   edx,edx
c00273bd:	0f 95 c2             	setne  dl
c00273c0:	0f b6 d2             	movzx  edx,dl
c00273c3:	09 d7                	or     edi,edx
c00273c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273c8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00273cb:	01 fa                	add    edx,edi
c00273cd:	11 c6                	adc    esi,eax
c00273cf:	89 f0                	mov    eax,esi
c00273d1:	eb 77                	jmp    c002744a <__adddf3+0x297>
c00273d3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00273d6:	46                   	inc    esi
c00273d7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00273da:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00273e0:	75 41                	jne    c0027423 <__adddf3+0x270>
c00273e2:	89 d3                	mov    ebx,edx
c00273e4:	09 c3                	or     ebx,eax
c00273e6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00273ed:	75 27                	jne    c0027416 <__adddf3+0x263>
c00273ef:	85 db                	test   ebx,ebx
c00273f1:	0f 84 fb 03 00 00    	je     c00277f2 <__adddf3+0x63f>
c00273f7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00273fa:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00273fd:	0f 84 f5 03 00 00    	je     c00277f8 <__adddf3+0x645>
c0027403:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027406:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027409:	85 c0                	test   eax,eax
c002740b:	0f 89 91 03 00 00    	jns    c00277a2 <__adddf3+0x5ef>
c0027411:	e9 85 03 00 00       	jmp    c002779b <__adddf3+0x5e8>
c0027416:	85 db                	test   ebx,ebx
c0027418:	0f 85 da 03 00 00    	jne    c00277f8 <__adddf3+0x645>
c002741e:	e9 cf 03 00 00       	jmp    c00277f2 <__adddf3+0x63f>
c0027423:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027426:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027429:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002742c:	f7 d1                	not    ecx
c002742e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027434:	0f 84 70 03 00 00    	je     c00277aa <__adddf3+0x5f7>
c002743a:	d1 ea                	shr    edx,1
c002743c:	89 c1                	mov    ecx,eax
c002743e:	c1 e1 1f             	shl    ecx,0x1f
c0027441:	09 ca                	or     edx,ecx
c0027443:	d1 e8                	shr    eax,1
c0027445:	e9 6f 03 00 00       	jmp    c00277b9 <__adddf3+0x606>
c002744a:	85 c0                	test   eax,eax
c002744c:	0f 89 67 03 00 00    	jns    c00277b9 <__adddf3+0x606>
c0027452:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027455:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027458:	f7 d1                	not    ecx
c002745a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027460:	0f 84 44 03 00 00    	je     c00277aa <__adddf3+0x5f7>
c0027466:	89 d1                	mov    ecx,edx
c0027468:	d1 e9                	shr    ecx,1
c002746a:	83 e2 01             	and    edx,0x1
c002746d:	09 ca                	or     edx,ecx
c002746f:	89 c1                	mov    ecx,eax
c0027471:	c1 e1 1f             	shl    ecx,0x1f
c0027474:	09 ca                	or     edx,ecx
c0027476:	d1 e8                	shr    eax,1
c0027478:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002747d:	e9 37 03 00 00       	jmp    c00277b9 <__adddf3+0x606>
c0027482:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027485:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002748b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002748e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027491:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027497:	29 de                	sub    esi,ebx
c0027499:	85 f6                	test   esi,esi
c002749b:	0f 8e bd 00 00 00    	jle    c002755e <__adddf3+0x3ab>
c00274a1:	85 db                	test   ebx,ebx
c00274a3:	75 17                	jne    c00274bc <__adddf3+0x309>
c00274a5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00274a8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00274ab:	0f 84 47 03 00 00    	je     c00277f8 <__adddf3+0x645>
c00274b1:	4e                   	dec    esi
c00274b2:	75 20                	jne    c00274d4 <__adddf3+0x321>
c00274b4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00274b7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00274ba:	eb 5b                	jmp    c0027517 <__adddf3+0x364>
c00274bc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00274bf:	f7 d3                	not    ebx
c00274c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00274c7:	0f 84 2b 03 00 00    	je     c00277f8 <__adddf3+0x645>
c00274cd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00274d4:	83 fe 1f             	cmp    esi,0x1f
c00274d7:	7e 49                	jle    c0027522 <__adddf3+0x36f>
c00274d9:	83 fe 3f             	cmp    esi,0x3f
c00274dc:	0f 8f 16 03 00 00    	jg     c00277f8 <__adddf3+0x645>
c00274e2:	83 e6 1f             	and    esi,0x1f
c00274e5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00274e8:	89 f1                	mov    ecx,esi
c00274ea:	d3 ef                	shr    edi,cl
c00274ec:	31 db                	xor    ebx,ebx
c00274ee:	85 f6                	test   esi,esi
c00274f0:	74 13                	je     c0027505 <__adddf3+0x352>
c00274f2:	b9 20 00 00 00       	mov    ecx,0x20
c00274f7:	29 f1                	sub    ecx,esi
c00274f9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274fc:	d3 e6                	shl    esi,cl
c00274fe:	31 db                	xor    ebx,ebx
c0027500:	85 f6                	test   esi,esi
c0027502:	0f 95 c3             	setne  bl
c0027505:	31 c9                	xor    ecx,ecx
c0027507:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002750b:	0f 95 c1             	setne  cl
c002750e:	09 cf                	or     edi,ecx
c0027510:	09 fb                	or     ebx,edi
c0027512:	29 da                	sub    edx,ebx
c0027514:	83 d8 00             	sbb    eax,0x0
c0027517:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002751a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002751d:	e9 aa 01 00 00       	jmp    c00276cc <__adddf3+0x519>
c0027522:	bf 20 00 00 00       	mov    edi,0x20
c0027527:	29 f7                	sub    edi,esi
c0027529:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002752c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002752f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027532:	d3 e3                	shl    ebx,cl
c0027534:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027537:	89 f1                	mov    ecx,esi
c0027539:	d3 ef                	shr    edi,cl
c002753b:	09 fb                	or     ebx,edi
c002753d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027540:	89 f1                	mov    ecx,esi
c0027542:	d3 ef                	shr    edi,cl
c0027544:	89 fe                	mov    esi,edi
c0027546:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027549:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002754c:	d3 e7                	shl    edi,cl
c002754e:	85 ff                	test   edi,edi
c0027550:	0f 95 c1             	setne  cl
c0027553:	0f b6 c9             	movzx  ecx,cl
c0027556:	09 cb                	or     ebx,ecx
c0027558:	29 da                	sub    edx,ebx
c002755a:	19 f0                	sbb    eax,esi
c002755c:	eb b9                	jmp    c0027517 <__adddf3+0x364>
c002755e:	0f 84 cd 00 00 00    	je     c0027631 <__adddf3+0x47e>
c0027564:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027567:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002756a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002756d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027571:	75 1b                	jne    c002758e <__adddf3+0x3db>
c0027573:	89 d6                	mov    esi,edx
c0027575:	09 c6                	or     esi,eax
c0027577:	0f 84 7b 02 00 00    	je     c00277f8 <__adddf3+0x645>
c002757d:	4b                   	dec    ebx
c002757e:	75 24                	jne    c00275a4 <__adddf3+0x3f1>
c0027580:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027583:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027586:	29 d1                	sub    ecx,edx
c0027588:	19 c6                	sbb    esi,eax
c002758a:	89 ca                	mov    edx,ecx
c002758c:	eb 61                	jmp    c00275ef <__adddf3+0x43c>
c002758e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027591:	f7 d6                	not    esi
c0027593:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027599:	0f 84 59 02 00 00    	je     c00277f8 <__adddf3+0x645>
c002759f:	0d 00 00 00 80       	or     eax,0x80000000
c00275a4:	83 fb 1f             	cmp    ebx,0x1f
c00275a7:	7e 4d                	jle    c00275f6 <__adddf3+0x443>
c00275a9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275ac:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275af:	83 fb 3f             	cmp    ebx,0x3f
c00275b2:	0f 8f 40 02 00 00    	jg     c00277f8 <__adddf3+0x645>
c00275b8:	83 e3 1f             	and    ebx,0x1f
c00275bb:	89 d9                	mov    ecx,ebx
c00275bd:	89 c7                	mov    edi,eax
c00275bf:	d3 ef                	shr    edi,cl
c00275c1:	31 db                	xor    ebx,ebx
c00275c3:	85 c9                	test   ecx,ecx
c00275c5:	74 12                	je     c00275d9 <__adddf3+0x426>
c00275c7:	be 20 00 00 00       	mov    esi,0x20
c00275cc:	29 ce                	sub    esi,ecx
c00275ce:	89 f1                	mov    ecx,esi
c00275d0:	d3 e0                	shl    eax,cl
c00275d2:	31 db                	xor    ebx,ebx
c00275d4:	85 c0                	test   eax,eax
c00275d6:	0f 95 c3             	setne  bl
c00275d9:	31 c0                	xor    eax,eax
c00275db:	85 d2                	test   edx,edx
c00275dd:	0f 95 c0             	setne  al
c00275e0:	09 c7                	or     edi,eax
c00275e2:	09 fb                	or     ebx,edi
c00275e4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275e7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275ea:	29 da                	sub    edx,ebx
c00275ec:	83 de 00             	sbb    esi,0x0
c00275ef:	89 f0                	mov    eax,esi
c00275f1:	e9 d6 00 00 00       	jmp    c00276cc <__adddf3+0x519>
c00275f6:	be 20 00 00 00       	mov    esi,0x20
c00275fb:	29 de                	sub    esi,ebx
c00275fd:	89 c7                	mov    edi,eax
c00275ff:	89 f1                	mov    ecx,esi
c0027601:	d3 e7                	shl    edi,cl
c0027603:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027606:	89 d7                	mov    edi,edx
c0027608:	88 d9                	mov    cl,bl
c002760a:	d3 ef                	shr    edi,cl
c002760c:	89 f9                	mov    ecx,edi
c002760e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027611:	09 cf                	or     edi,ecx
c0027613:	88 d9                	mov    cl,bl
c0027615:	d3 e8                	shr    eax,cl
c0027617:	89 f1                	mov    ecx,esi
c0027619:	d3 e2                	shl    edx,cl
c002761b:	85 d2                	test   edx,edx
c002761d:	0f 95 c2             	setne  dl
c0027620:	0f b6 d2             	movzx  edx,dl
c0027623:	09 d7                	or     edi,edx
c0027625:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027628:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002762b:	29 fa                	sub    edx,edi
c002762d:	19 c6                	sbb    esi,eax
c002762f:	eb be                	jmp    c00275ef <__adddf3+0x43c>
c0027631:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027634:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027637:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002763d:	75 6a                	jne    c00276a9 <__adddf3+0x4f6>
c002763f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027643:	75 58                	jne    c002769d <__adddf3+0x4ea>
c0027645:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027648:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002764b:	89 d6                	mov    esi,edx
c002764d:	09 c6                	or     esi,eax
c002764f:	75 17                	jne    c0027668 <__adddf3+0x4b5>
c0027651:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027654:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027657:	85 db                	test   ebx,ebx
c0027659:	0f 85 99 01 00 00    	jne    c00277f8 <__adddf3+0x645>
c002765f:	31 ff                	xor    edi,edi
c0027661:	31 c9                	xor    ecx,ecx
c0027663:	e9 90 01 00 00       	jmp    c00277f8 <__adddf3+0x645>
c0027668:	85 db                	test   ebx,ebx
c002766a:	0f 84 88 01 00 00    	je     c00277f8 <__adddf3+0x645>
c0027670:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027673:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027676:	85 c0                	test   eax,eax
c0027678:	79 10                	jns    c002768a <__adddf3+0x4d7>
c002767a:	31 c9                	xor    ecx,ecx
c002767c:	f7 da                	neg    edx
c002767e:	0f 95 c1             	setne  cl
c0027681:	01 c8                	add    eax,ecx
c0027683:	f7 d8                	neg    eax
c0027685:	e9 2f 01 00 00       	jmp    c00277b9 <__adddf3+0x606>
c002768a:	31 ff                	xor    edi,edi
c002768c:	31 c9                	xor    ecx,ecx
c002768e:	89 c3                	mov    ebx,eax
c0027690:	09 d3                	or     ebx,edx
c0027692:	0f 84 60 01 00 00    	je     c00277f8 <__adddf3+0x645>
c0027698:	e9 05 01 00 00       	jmp    c00277a2 <__adddf3+0x5ef>
c002769d:	31 ff                	xor    edi,edi
c002769f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00276a4:	e9 4f 01 00 00       	jmp    c00277f8 <__adddf3+0x645>
c00276a9:	89 c1                	mov    ecx,eax
c00276ab:	89 d0                	mov    eax,edx
c00276ad:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00276b0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00276b3:	89 ca                	mov    edx,ecx
c00276b5:	85 c9                	test   ecx,ecx
c00276b7:	79 2c                	jns    c00276e5 <__adddf3+0x532>
c00276b9:	31 c9                	xor    ecx,ecx
c00276bb:	f7 d8                	neg    eax
c00276bd:	0f 95 c1             	setne  cl
c00276c0:	01 ca                	add    edx,ecx
c00276c2:	f7 da                	neg    edx
c00276c4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00276c7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276ca:	eb 19                	jmp    c00276e5 <__adddf3+0x532>
c00276cc:	85 c0                	test   eax,eax
c00276ce:	0f 89 e5 00 00 00    	jns    c00277b9 <__adddf3+0x606>
c00276d4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276d9:	89 c1                	mov    ecx,eax
c00276db:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00276de:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00276e1:	89 d0                	mov    eax,edx
c00276e3:	89 ca                	mov    edx,ecx
c00276e5:	85 d2                	test   edx,edx
c00276e7:	74 59                	je     c0027742 <__adddf3+0x58f>
c00276e9:	0f bd da             	bsr    ebx,edx
c00276ec:	83 f3 1f             	xor    ebx,0x1f
c00276ef:	88 d9                	mov    cl,bl
c00276f1:	d3 e2                	shl    edx,cl
c00276f3:	bf 20 00 00 00       	mov    edi,0x20
c00276f8:	89 f9                	mov    ecx,edi
c00276fa:	29 d9                	sub    ecx,ebx
c00276fc:	89 c6                	mov    esi,eax
c00276fe:	d3 ee                	shr    esi,cl
c0027700:	09 d6                	or     esi,edx
c0027702:	88 d9                	mov    cl,bl
c0027704:	d3 e0                	shl    eax,cl
c0027706:	89 c2                	mov    edx,eax
c0027708:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002770b:	25 ff 07 00 00       	and    eax,0x7ff
c0027710:	39 d8                	cmp    eax,ebx
c0027712:	7f 22                	jg     c0027736 <__adddf3+0x583>
c0027714:	29 c3                	sub    ebx,eax
c0027716:	43                   	inc    ebx
c0027717:	88 d9                	mov    cl,bl
c0027719:	d3 ea                	shr    edx,cl
c002771b:	29 df                	sub    edi,ebx
c002771d:	89 f9                	mov    ecx,edi
c002771f:	89 f0                	mov    eax,esi
c0027721:	d3 e0                	shl    eax,cl
c0027723:	09 c2                	or     edx,eax
c0027725:	89 f0                	mov    eax,esi
c0027727:	88 d9                	mov    cl,bl
c0027729:	d3 e8                	shr    eax,cl
c002772b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002772e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027734:	eb 6f                	jmp    c00277a5 <__adddf3+0x5f2>
c0027736:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027739:	29 d8                	sub    eax,ebx
c002773b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002773e:	89 f0                	mov    eax,esi
c0027740:	eb 59                	jmp    c002779b <__adddf3+0x5e8>
c0027742:	85 c0                	test   eax,eax
c0027744:	74 6a                	je     c00277b0 <__adddf3+0x5fd>
c0027746:	0f bd c8             	bsr    ecx,eax
c0027749:	83 f1 1f             	xor    ecx,0x1f
c002774c:	d3 e0                	shl    eax,cl
c002774e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027751:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027757:	83 c1 20             	add    ecx,0x20
c002775a:	39 cb                	cmp    ebx,ecx
c002775c:	7f 35                	jg     c0027793 <__adddf3+0x5e0>
c002775e:	29 d9                	sub    ecx,ebx
c0027760:	8d 71 01             	lea    esi,[ecx+0x1]
c0027763:	83 fe 1f             	cmp    esi,0x1f
c0027766:	7e 09                	jle    c0027771 <__adddf3+0x5be>
c0027768:	83 e9 1f             	sub    ecx,0x1f
c002776b:	d3 e8                	shr    eax,cl
c002776d:	89 c3                	mov    ebx,eax
c002776f:	eb 11                	jmp    c0027782 <__adddf3+0x5cf>
c0027771:	b9 20 00 00 00       	mov    ecx,0x20
c0027776:	29 f1                	sub    ecx,esi
c0027778:	89 c3                	mov    ebx,eax
c002777a:	d3 e3                	shl    ebx,cl
c002777c:	89 f1                	mov    ecx,esi
c002777e:	d3 e8                	shr    eax,cl
c0027780:	89 c2                	mov    edx,eax
c0027782:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027785:	25 00 f8 ff ff       	and    eax,0xfffff800
c002778a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002778d:	89 d0                	mov    eax,edx
c002778f:	89 da                	mov    edx,ebx
c0027791:	eb 26                	jmp    c00277b9 <__adddf3+0x606>
c0027793:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027796:	29 cf                	sub    edi,ecx
c0027798:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002779b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277a0:	eb 17                	jmp    c00277b9 <__adddf3+0x606>
c00277a2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277a5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277a8:	eb 0f                	jmp    c00277b9 <__adddf3+0x606>
c00277aa:	31 d2                	xor    edx,edx
c00277ac:	31 c0                	xor    eax,eax
c00277ae:	eb 09                	jmp    c00277b9 <__adddf3+0x606>
c00277b0:	89 c2                	mov    edx,eax
c00277b2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00277b9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277bc:	c1 e1 14             	shl    ecx,0x14
c00277bf:	89 c3                	mov    ebx,eax
c00277c1:	c1 eb 0b             	shr    ebx,0xb
c00277c4:	09 d9                	or     ecx,ebx
c00277c6:	89 d3                	mov    ebx,edx
c00277c8:	c1 eb 0b             	shr    ebx,0xb
c00277cb:	c1 e0 15             	shl    eax,0x15
c00277ce:	09 d8                	or     eax,ebx
c00277d0:	89 c7                	mov    edi,eax
c00277d2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00277d8:	0f 95 c0             	setne  al
c00277db:	89 c6                	mov    esi,eax
c00277dd:	09 f3                	or     ebx,esi
c00277df:	83 e3 01             	and    ebx,0x1
c00277e2:	c1 ea 0a             	shr    edx,0xa
c00277e5:	21 da                	and    edx,ebx
c00277e7:	89 f8                	mov    eax,edi
c00277e9:	01 d0                	add    eax,edx
c00277eb:	83 d1 00             	adc    ecx,0x0
c00277ee:	89 c7                	mov    edi,eax
c00277f0:	eb 06                	jmp    c00277f8 <__adddf3+0x645>
c00277f2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277f5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277f8:	89 f8                	mov    eax,edi
c00277fa:	89 ca                	mov    edx,ecx
c00277fc:	83 c4 24             	add    esp,0x24
c00277ff:	5b                   	pop    ebx
c0027800:	5e                   	pop    esi
c0027801:	5f                   	pop    edi
c0027802:	5d                   	pop    ebp
c0027803:	c3                   	ret    

c0027804 <__subdf3>:
c0027804:	55                   	push   ebp
c0027805:	89 e5                	mov    ebp,esp
c0027807:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002780a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002780d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027813:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027816:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027819:	5d                   	pop    ebp
c002781a:	e9 94 f9 ff ff       	jmp    c00271b3 <__adddf3>

c002781f <__negdf2>:
c002781f:	55                   	push   ebp
c0027820:	89 e5                	mov    ebp,esp
c0027822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027825:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027828:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002782e:	5d                   	pop    ebp
c002782f:	c3                   	ret    

c0027830 <__muldf3>:
c0027830:	55                   	push   ebp
c0027831:	89 e5                	mov    ebp,esp
c0027833:	57                   	push   edi
c0027834:	56                   	push   esi
c0027835:	53                   	push   ebx
c0027836:	83 ec 24             	sub    esp,0x24
c0027839:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002783c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002783f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027842:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027845:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027848:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002784b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002784e:	89 c8                	mov    eax,ecx
c0027850:	c1 f8 14             	sar    eax,0x14
c0027853:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027856:	89 f8                	mov    eax,edi
c0027858:	89 fb                	mov    ebx,edi
c002785a:	c1 e3 0b             	shl    ebx,0xb
c002785d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027860:	c1 e1 0b             	shl    ecx,0xb
c0027863:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027869:	c1 e8 15             	shr    eax,0x15
c002786c:	09 c1                	or     ecx,eax
c002786e:	89 d6                	mov    esi,edx
c0027870:	89 d0                	mov    eax,edx
c0027872:	c1 f8 14             	sar    eax,0x14
c0027875:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027878:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002787b:	89 c3                	mov    ebx,eax
c002787d:	c1 e3 0b             	shl    ebx,0xb
c0027880:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027883:	c1 e6 0b             	shl    esi,0xb
c0027886:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002788c:	c1 e8 15             	shr    eax,0x15
c002788f:	09 c6                	or     esi,eax
c0027891:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027894:	25 ff 07 00 00       	and    eax,0x7ff
c0027899:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002789c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002789f:	25 ff 07 00 00       	and    eax,0x7ff
c00278a4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00278a7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00278aa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00278ad:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00278b4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00278b7:	40                   	inc    eax
c00278b8:	a9 fe 07 00 00       	test   eax,0x7fe
c00278bd:	0f 85 8d 00 00 00    	jne    c0027950 <__muldf3+0x120>
c00278c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278c6:	09 c8                	or     eax,ecx
c00278c8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00278cc:	74 44                	je     c0027912 <__muldf3+0xe2>
c00278ce:	85 c0                	test   eax,eax
c00278d0:	0f 85 31 02 00 00    	jne    c0027b07 <__muldf3+0x2d7>
c00278d6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00278d9:	40                   	inc    eax
c00278da:	a9 fe 07 00 00       	test   eax,0x7fe
c00278df:	75 13                	jne    c00278f4 <__muldf3+0xc4>
c00278e1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278e4:	09 f1                	or     ecx,esi
c00278e6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278ea:	74 22                	je     c002790e <__muldf3+0xde>
c00278ec:	85 c9                	test   ecx,ecx
c00278ee:	0f 85 0d 02 00 00    	jne    c0027b01 <__muldf3+0x2d1>
c00278f4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00278f8:	0f 89 09 02 00 00    	jns    c0027b07 <__muldf3+0x2d7>
c00278fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027901:	05 00 00 00 80       	add    eax,0x80000000
c0027906:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027909:	e9 f9 01 00 00       	jmp    c0027b07 <__muldf3+0x2d7>
c002790e:	85 c9                	test   ecx,ecx
c0027910:	eb 2e                	jmp    c0027940 <__muldf3+0x110>
c0027912:	85 c0                	test   eax,eax
c0027914:	74 20                	je     c0027936 <__muldf3+0x106>
c0027916:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027919:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002791c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002791f:	c1 ef 1f             	shr    edi,0x1f
c0027922:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027925:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027928:	8d 43 ff             	lea    eax,[ebx-0x1]
c002792b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002792e:	09 f9                	or     ecx,edi
c0027930:	78 1e                	js     c0027950 <__muldf3+0x120>
c0027932:	89 c3                	mov    ebx,eax
c0027934:	eb e0                	jmp    c0027916 <__muldf3+0xe6>
c0027936:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027939:	f7 d0                	not    eax
c002793b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027940:	75 b2                	jne    c00278f4 <__muldf3+0xc4>
c0027942:	31 ff                	xor    edi,edi
c0027944:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002794b:	e9 b7 01 00 00       	jmp    c0027b07 <__muldf3+0x2d7>
c0027950:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027953:	40                   	inc    eax
c0027954:	a9 fe 07 00 00       	test   eax,0x7fe
c0027959:	75 57                	jne    c00279b2 <__muldf3+0x182>
c002795b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002795e:	09 f0                	or     eax,esi
c0027960:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027964:	74 23                	je     c0027989 <__muldf3+0x159>
c0027966:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002796a:	0f 89 91 01 00 00    	jns    c0027b01 <__muldf3+0x2d1>
c0027970:	85 c0                	test   eax,eax
c0027972:	0f 85 89 01 00 00    	jne    c0027b01 <__muldf3+0x2d1>
c0027978:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002797b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027981:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027984:	e9 7e 01 00 00       	jmp    c0027b07 <__muldf3+0x2d7>
c0027989:	85 c0                	test   eax,eax
c002798b:	75 0c                	jne    c0027999 <__muldf3+0x169>
c002798d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027991:	0f 89 6a 01 00 00    	jns    c0027b01 <__muldf3+0x2d1>
c0027997:	eb df                	jmp    c0027978 <__muldf3+0x148>
c0027999:	01 f6                	add    esi,esi
c002799b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002799e:	c1 ea 1f             	shr    edx,0x1f
c00279a1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279a4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00279a7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00279aa:	09 d6                	or     esi,edx
c00279ac:	78 04                	js     c00279b2 <__muldf3+0x182>
c00279ae:	89 c3                	mov    ebx,eax
c00279b0:	eb e7                	jmp    c0027999 <__muldf3+0x169>
c00279b2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00279b8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00279be:	89 c8                	mov    eax,ecx
c00279c0:	f7 e6                	mul    esi
c00279c2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00279c5:	89 c7                	mov    edi,eax
c00279c7:	89 c8                	mov    eax,ecx
c00279c9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00279cc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00279cf:	89 c1                	mov    ecx,eax
c00279d1:	89 f0                	mov    eax,esi
c00279d3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00279d6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00279d9:	89 c6                	mov    esi,eax
c00279db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279de:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00279e1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00279e4:	31 c0                	xor    eax,eax
c00279e6:	01 f1                	add    ecx,esi
c00279e8:	0f 92 c0             	setb   al
c00279eb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00279ee:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00279f1:	83 d6 00             	adc    esi,0x0
c00279f4:	01 c7                	add    edi,eax
c00279f6:	83 d6 00             	adc    esi,0x0
c00279f9:	01 ca                	add    edx,ecx
c00279fb:	0f 92 c1             	setb   cl
c00279fe:	0f b6 c9             	movzx  ecx,cl
c0027a01:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027a04:	83 d6 00             	adc    esi,0x0
c0027a07:	01 cf                	add    edi,ecx
c0027a09:	83 d6 00             	adc    esi,0x0
c0027a0c:	31 c9                	xor    ecx,ecx
c0027a0e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027a11:	0f 95 c1             	setne  cl
c0027a14:	09 cf                	or     edi,ecx
c0027a16:	85 f6                	test   esi,esi
c0027a18:	78 0c                	js     c0027a26 <__muldf3+0x1f6>
c0027a1a:	01 f6                	add    esi,esi
c0027a1c:	89 f8                	mov    eax,edi
c0027a1e:	c1 e8 1f             	shr    eax,0x1f
c0027a21:	09 c6                	or     esi,eax
c0027a23:	01 ff                	add    edi,edi
c0027a25:	4b                   	dec    ebx
c0027a26:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027a2c:	0f 8f 85 00 00 00    	jg     c0027ab7 <__muldf3+0x287>
c0027a32:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027a38:	85 db                	test   ebx,ebx
c0027a3a:	0f 8f 84 00 00 00    	jg     c0027ac4 <__muldf3+0x294>
c0027a40:	83 fb cc             	cmp    ebx,0xffffffcc
c0027a43:	7c 79                	jl     c0027abe <__muldf3+0x28e>
c0027a45:	ba 01 00 00 00       	mov    edx,0x1
c0027a4a:	29 da                	sub    edx,ebx
c0027a4c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027a52:	83 fa 1f             	cmp    edx,0x1f
c0027a55:	7e 30                	jle    c0027a87 <__muldf3+0x257>
c0027a57:	83 fa 20             	cmp    edx,0x20
c0027a5a:	75 0b                	jne    c0027a67 <__muldf3+0x237>
c0027a5c:	31 c0                	xor    eax,eax
c0027a5e:	85 ff                	test   edi,edi
c0027a60:	0f 95 c0             	setne  al
c0027a63:	89 c7                	mov    edi,eax
c0027a65:	eb 1a                	jmp    c0027a81 <__muldf3+0x251>
c0027a67:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027a6a:	89 f0                	mov    eax,esi
c0027a6c:	d3 e0                	shl    eax,cl
c0027a6e:	09 f8                	or     eax,edi
c0027a70:	0f 95 c0             	setne  al
c0027a73:	0f b6 c0             	movzx  eax,al
c0027a76:	89 c7                	mov    edi,eax
c0027a78:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027a7d:	29 d9                	sub    ecx,ebx
c0027a7f:	d3 ee                	shr    esi,cl
c0027a81:	09 f7                	or     edi,esi
c0027a83:	31 db                	xor    ebx,ebx
c0027a85:	eb 3b                	jmp    c0027ac2 <__muldf3+0x292>
c0027a87:	83 c3 1f             	add    ebx,0x1f
c0027a8a:	89 f0                	mov    eax,esi
c0027a8c:	88 d9                	mov    cl,bl
c0027a8e:	d3 e0                	shl    eax,cl
c0027a90:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a93:	89 f8                	mov    eax,edi
c0027a95:	88 d1                	mov    cl,dl
c0027a97:	d3 e8                	shr    eax,cl
c0027a99:	89 c1                	mov    ecx,eax
c0027a9b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a9e:	09 c8                	or     eax,ecx
c0027aa0:	88 d9                	mov    cl,bl
c0027aa2:	d3 e7                	shl    edi,cl
c0027aa4:	31 db                	xor    ebx,ebx
c0027aa6:	85 ff                	test   edi,edi
c0027aa8:	0f 95 c3             	setne  bl
c0027aab:	89 df                	mov    edi,ebx
c0027aad:	09 c7                	or     edi,eax
c0027aaf:	88 d1                	mov    cl,dl
c0027ab1:	d3 ee                	shr    esi,cl
c0027ab3:	31 db                	xor    ebx,ebx
c0027ab5:	eb 0d                	jmp    c0027ac4 <__muldf3+0x294>
c0027ab7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027abc:	eb 02                	jmp    c0027ac0 <__muldf3+0x290>
c0027abe:	31 db                	xor    ebx,ebx
c0027ac0:	31 ff                	xor    edi,edi
c0027ac2:	31 f6                	xor    esi,esi
c0027ac4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ac7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027aca:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027acf:	09 c3                	or     ebx,eax
c0027ad1:	c1 e3 14             	shl    ebx,0x14
c0027ad4:	89 f0                	mov    eax,esi
c0027ad6:	c1 e8 0b             	shr    eax,0xb
c0027ad9:	09 c3                	or     ebx,eax
c0027adb:	89 f8                	mov    eax,edi
c0027add:	c1 e8 0b             	shr    eax,0xb
c0027ae0:	c1 e6 15             	shl    esi,0x15
c0027ae3:	09 c6                	or     esi,eax
c0027ae5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027aeb:	0f 95 c1             	setne  cl
c0027aee:	09 c8                	or     eax,ecx
c0027af0:	83 e0 01             	and    eax,0x1
c0027af3:	c1 ef 0a             	shr    edi,0xa
c0027af6:	21 c7                	and    edi,eax
c0027af8:	01 f7                	add    edi,esi
c0027afa:	83 d3 00             	adc    ebx,0x0
c0027afd:	89 da                	mov    edx,ebx
c0027aff:	eb 03                	jmp    c0027b04 <__muldf3+0x2d4>
c0027b01:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027b04:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027b07:	89 f8                	mov    eax,edi
c0027b09:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027b0c:	83 c4 24             	add    esp,0x24
c0027b0f:	5b                   	pop    ebx
c0027b10:	5e                   	pop    esi
c0027b11:	5f                   	pop    edi
c0027b12:	5d                   	pop    ebp
c0027b13:	c3                   	ret    

c0027b14 <__divdf3>:
c0027b14:	55                   	push   ebp
c0027b15:	89 e5                	mov    ebp,esp
c0027b17:	57                   	push   edi
c0027b18:	56                   	push   esi
c0027b19:	53                   	push   ebx
c0027b1a:	83 ec 2c             	sub    esp,0x2c
c0027b1d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b20:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b23:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b26:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027b29:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027b2c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027b2f:	89 ce                	mov    esi,ecx
c0027b31:	89 c8                	mov    eax,ecx
c0027b33:	c1 f8 14             	sar    eax,0x14
c0027b36:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b39:	89 f8                	mov    eax,edi
c0027b3b:	89 fb                	mov    ebx,edi
c0027b3d:	c1 e3 0b             	shl    ebx,0xb
c0027b40:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027b43:	c1 e6 0b             	shl    esi,0xb
c0027b46:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027b4c:	c1 e8 15             	shr    eax,0x15
c0027b4f:	09 c6                	or     esi,eax
c0027b51:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027b54:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027b57:	89 c2                	mov    edx,eax
c0027b59:	c1 fa 14             	sar    edx,0x14
c0027b5c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027b5f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027b62:	89 de                	mov    esi,ebx
c0027b64:	c1 e6 0b             	shl    esi,0xb
c0027b67:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027b6a:	c1 e0 0b             	shl    eax,0xb
c0027b6d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027b72:	c1 eb 15             	shr    ebx,0x15
c0027b75:	09 d8                	or     eax,ebx
c0027b77:	89 c2                	mov    edx,eax
c0027b79:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b7c:	25 ff 07 00 00       	and    eax,0x7ff
c0027b81:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027b84:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b87:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b8d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027b90:	29 d8                	sub    eax,ebx
c0027b92:	05 ff 03 00 00       	add    eax,0x3ff
c0027b97:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027b9a:	46                   	inc    esi
c0027b9b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027ba1:	0f 85 a5 00 00 00    	jne    c0027c4c <__divdf3+0x138>
c0027ba7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027baa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027bad:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027bb1:	74 2a                	je     c0027bdd <__divdf3+0xc9>
c0027bb3:	85 f6                	test   esi,esi
c0027bb5:	0f 85 cc 02 00 00    	jne    c0027e87 <__divdf3+0x373>
c0027bbb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bbe:	40                   	inc    eax
c0027bbf:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bc4:	75 26                	jne    c0027bec <__divdf3+0xd8>
c0027bc6:	85 db                	test   ebx,ebx
c0027bc8:	74 22                	je     c0027bec <__divdf3+0xd8>
c0027bca:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027bcd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027bd0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bd3:	09 d0                	or     eax,edx
c0027bd5:	0f 85 ac 02 00 00    	jne    c0027e87 <__divdf3+0x373>
c0027bdb:	eb 63                	jmp    c0027c40 <__divdf3+0x12c>
c0027bdd:	85 f6                	test   esi,esi
c0027bdf:	75 22                	jne    c0027c03 <__divdf3+0xef>
c0027be1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027be4:	40                   	inc    eax
c0027be5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bea:	74 36                	je     c0027c22 <__divdf3+0x10e>
c0027bec:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027bf0:	0f 89 91 02 00 00    	jns    c0027e87 <__divdf3+0x373>
c0027bf6:	89 f8                	mov    eax,edi
c0027bf8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bfe:	e9 80 02 00 00       	jmp    c0027e83 <__divdf3+0x36f>
c0027c03:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027c06:	01 f6                	add    esi,esi
c0027c08:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027c0b:	c1 ef 1f             	shr    edi,0x1f
c0027c0e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027c11:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027c14:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027c17:	09 f7                	or     edi,esi
c0027c19:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027c1c:	78 2e                	js     c0027c4c <__divdf3+0x138>
c0027c1e:	89 c8                	mov    eax,ecx
c0027c20:	eb e1                	jmp    c0027c03 <__divdf3+0xef>
c0027c22:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c25:	09 d0                	or     eax,edx
c0027c27:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027c2b:	74 0f                	je     c0027c3c <__divdf3+0x128>
c0027c2d:	85 c0                	test   eax,eax
c0027c2f:	74 bb                	je     c0027bec <__divdf3+0xd8>
c0027c31:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c34:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c37:	e9 4b 02 00 00       	jmp    c0027e87 <__divdf3+0x373>
c0027c3c:	85 c0                	test   eax,eax
c0027c3e:	75 ac                	jne    c0027bec <__divdf3+0xd8>
c0027c40:	31 ff                	xor    edi,edi
c0027c42:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027c47:	e9 3b 02 00 00       	jmp    c0027e87 <__divdf3+0x373>
c0027c4c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c4f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027c52:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027c58:	75 6b                	jne    c0027cc5 <__divdf3+0x1b1>
c0027c5a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c5d:	09 d6                	or     esi,edx
c0027c5f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027c63:	74 28                	je     c0027c8d <__divdf3+0x179>
c0027c65:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c68:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c6b:	85 f6                	test   esi,esi
c0027c6d:	0f 85 14 02 00 00    	jne    c0027e87 <__divdf3+0x373>
c0027c73:	31 ff                	xor    edi,edi
c0027c75:	31 c9                	xor    ecx,ecx
c0027c77:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c7a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027c7d:	0f 89 04 02 00 00    	jns    c0027e87 <__divdf3+0x373>
c0027c83:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027c88:	e9 fa 01 00 00       	jmp    c0027e87 <__divdf3+0x373>
c0027c8d:	85 f6                	test   esi,esi
c0027c8f:	75 1b                	jne    c0027cac <__divdf3+0x198>
c0027c91:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c94:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027c97:	25 00 00 00 80       	and    eax,0x80000000
c0027c9c:	31 c9                	xor    ecx,ecx
c0027c9e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027ca3:	89 cf                	mov    edi,ecx
c0027ca5:	89 c1                	mov    ecx,eax
c0027ca7:	e9 db 01 00 00       	jmp    c0027e87 <__divdf3+0x373>
c0027cac:	01 d2                	add    edx,edx
c0027cae:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027cb1:	c1 eb 1f             	shr    ebx,0x1f
c0027cb4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027cb7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027cba:	8d 48 01             	lea    ecx,[eax+0x1]
c0027cbd:	09 da                	or     edx,ebx
c0027cbf:	78 04                	js     c0027cc5 <__divdf3+0x1b1>
c0027cc1:	89 c8                	mov    eax,ecx
c0027cc3:	eb e7                	jmp    c0027cac <__divdf3+0x198>
c0027cc5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027cc8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027cce:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027cd4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027cd7:	39 d6                	cmp    esi,edx
c0027cd9:	77 0d                	ja     c0027ce8 <__divdf3+0x1d4>
c0027cdb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027cde:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027ce1:	72 1b                	jb     c0027cfe <__divdf3+0x1ea>
c0027ce3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027ce6:	75 16                	jne    c0027cfe <__divdf3+0x1ea>
c0027ce8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027ceb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027cee:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027cf1:	83 de 00             	sbb    esi,0x0
c0027cf4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027cf7:	ba 01 00 00 00       	mov    edx,0x1
c0027cfc:	eb 02                	jmp    c0027d00 <__divdf3+0x1ec>
c0027cfe:	31 d2                	xor    edx,edx
c0027d00:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027d07:	31 ff                	xor    edi,edi
c0027d09:	01 ff                	add    edi,edi
c0027d0b:	89 d1                	mov    ecx,edx
c0027d0d:	c1 e9 1f             	shr    ecx,0x1f
c0027d10:	09 cf                	or     edi,ecx
c0027d12:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027d15:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027d18:	89 da                	mov    edx,ebx
c0027d1a:	89 f3                	mov    ebx,esi
c0027d1c:	8d 34 36             	lea    esi,[esi+esi*1]
c0027d1f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d22:	c1 e9 1f             	shr    ecx,0x1f
c0027d25:	09 ce                	or     esi,ecx
c0027d27:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d2a:	01 c9                	add    ecx,ecx
c0027d2c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027d2f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027d32:	85 db                	test   ebx,ebx
c0027d34:	78 29                	js     c0027d5f <__divdf3+0x24b>
c0027d36:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027d39:	72 07                	jb     c0027d42 <__divdf3+0x22e>
c0027d3b:	75 3c                	jne    c0027d79 <__divdf3+0x265>
c0027d3d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d40:	77 37                	ja     c0027d79 <__divdf3+0x265>
c0027d42:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d45:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027d48:	31 d2                	xor    edx,edx
c0027d4a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027d4d:	0f 97 c2             	seta   dl
c0027d50:	29 d6                	sub    esi,edx
c0027d52:	89 d9                	mov    ecx,ebx
c0027d54:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027d57:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027d5a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027d5d:	eb 17                	jmp    c0027d76 <__divdf3+0x262>
c0027d5f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d62:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d65:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d68:	0f 97 c1             	seta   cl
c0027d6b:	0f b6 c9             	movzx  ecx,cl
c0027d6e:	29 ce                	sub    esi,ecx
c0027d70:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027d73:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027d76:	83 ca 01             	or     edx,0x1
c0027d79:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027d7c:	75 8b                	jne    c0027d09 <__divdf3+0x1f5>
c0027d7e:	c1 e7 09             	shl    edi,0x9
c0027d81:	89 d1                	mov    ecx,edx
c0027d83:	c1 e9 17             	shr    ecx,0x17
c0027d86:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027d89:	09 f3                	or     ebx,esi
c0027d8b:	0f 95 c3             	setne  bl
c0027d8e:	0f b6 db             	movzx  ebx,bl
c0027d91:	c1 e2 09             	shl    edx,0x9
c0027d94:	09 d3                	or     ebx,edx
c0027d96:	89 ca                	mov    edx,ecx
c0027d98:	09 fa                	or     edx,edi
c0027d9a:	78 0c                	js     c0027da8 <__divdf3+0x294>
c0027d9c:	01 d2                	add    edx,edx
c0027d9e:	89 d9                	mov    ecx,ebx
c0027da0:	c1 e9 1f             	shr    ecx,0x1f
c0027da3:	09 ca                	or     edx,ecx
c0027da5:	01 db                	add    ebx,ebx
c0027da7:	48                   	dec    eax
c0027da8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027dad:	0f 8f 83 00 00 00    	jg     c0027e36 <__divdf3+0x322>
c0027db3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027db9:	85 c0                	test   eax,eax
c0027dbb:	0f 8f 82 00 00 00    	jg     c0027e43 <__divdf3+0x32f>
c0027dc1:	83 f8 cc             	cmp    eax,0xffffffcc
c0027dc4:	7c 77                	jl     c0027e3d <__divdf3+0x329>
c0027dc6:	be 01 00 00 00       	mov    esi,0x1
c0027dcb:	29 c6                	sub    esi,eax
c0027dcd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027dd3:	83 fe 1f             	cmp    esi,0x1f
c0027dd6:	7e 2f                	jle    c0027e07 <__divdf3+0x2f3>
c0027dd8:	83 fe 20             	cmp    esi,0x20
c0027ddb:	75 0a                	jne    c0027de7 <__divdf3+0x2d3>
c0027ddd:	85 db                	test   ebx,ebx
c0027ddf:	0f 95 c3             	setne  bl
c0027de2:	0f b6 db             	movzx  ebx,bl
c0027de5:	eb 1a                	jmp    c0027e01 <__divdf3+0x2ed>
c0027de7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027dea:	89 d7                	mov    edi,edx
c0027dec:	d3 e7                	shl    edi,cl
c0027dee:	89 f9                	mov    ecx,edi
c0027df0:	09 d9                	or     ecx,ebx
c0027df2:	0f 95 c3             	setne  bl
c0027df5:	0f b6 db             	movzx  ebx,bl
c0027df8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027dfd:	29 c1                	sub    ecx,eax
c0027dff:	d3 ea                	shr    edx,cl
c0027e01:	09 d3                	or     ebx,edx
c0027e03:	31 c0                	xor    eax,eax
c0027e05:	eb 3a                	jmp    c0027e41 <__divdf3+0x32d>
c0027e07:	83 c0 1f             	add    eax,0x1f
c0027e0a:	89 d7                	mov    edi,edx
c0027e0c:	88 c1                	mov    cl,al
c0027e0e:	d3 e7                	shl    edi,cl
c0027e10:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e13:	89 df                	mov    edi,ebx
c0027e15:	89 f1                	mov    ecx,esi
c0027e17:	d3 ef                	shr    edi,cl
c0027e19:	89 f9                	mov    ecx,edi
c0027e1b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e1e:	09 cf                	or     edi,ecx
c0027e20:	88 c1                	mov    cl,al
c0027e22:	d3 e3                	shl    ebx,cl
c0027e24:	85 db                	test   ebx,ebx
c0027e26:	0f 95 c3             	setne  bl
c0027e29:	0f b6 db             	movzx  ebx,bl
c0027e2c:	09 fb                	or     ebx,edi
c0027e2e:	89 f1                	mov    ecx,esi
c0027e30:	d3 ea                	shr    edx,cl
c0027e32:	31 c0                	xor    eax,eax
c0027e34:	eb 0d                	jmp    c0027e43 <__divdf3+0x32f>
c0027e36:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027e3b:	eb 02                	jmp    c0027e3f <__divdf3+0x32b>
c0027e3d:	31 c0                	xor    eax,eax
c0027e3f:	31 db                	xor    ebx,ebx
c0027e41:	31 d2                	xor    edx,edx
c0027e43:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027e46:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027e49:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027e4f:	09 c8                	or     eax,ecx
c0027e51:	c1 e0 14             	shl    eax,0x14
c0027e54:	89 d1                	mov    ecx,edx
c0027e56:	c1 e9 0b             	shr    ecx,0xb
c0027e59:	09 c8                	or     eax,ecx
c0027e5b:	89 c6                	mov    esi,eax
c0027e5d:	89 d9                	mov    ecx,ebx
c0027e5f:	c1 e9 0b             	shr    ecx,0xb
c0027e62:	c1 e2 15             	shl    edx,0x15
c0027e65:	09 ca                	or     edx,ecx
c0027e67:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027e6d:	0f 95 c0             	setne  al
c0027e70:	09 c1                	or     ecx,eax
c0027e72:	83 e1 01             	and    ecx,0x1
c0027e75:	c1 eb 0a             	shr    ebx,0xa
c0027e78:	21 cb                	and    ebx,ecx
c0027e7a:	01 d3                	add    ebx,edx
c0027e7c:	89 d8                	mov    eax,ebx
c0027e7e:	83 d6 00             	adc    esi,0x0
c0027e81:	89 f2                	mov    edx,esi
c0027e83:	89 c7                	mov    edi,eax
c0027e85:	89 d1                	mov    ecx,edx
c0027e87:	89 f8                	mov    eax,edi
c0027e89:	89 ca                	mov    edx,ecx
c0027e8b:	83 c4 2c             	add    esp,0x2c
c0027e8e:	5b                   	pop    ebx
c0027e8f:	5e                   	pop    esi
c0027e90:	5f                   	pop    edi
c0027e91:	5d                   	pop    ebp
c0027e92:	c3                   	ret    

c0027e93 <__floatsidf>:
c0027e93:	55                   	push   ebp
c0027e94:	89 e5                	mov    ebp,esp
c0027e96:	56                   	push   esi
c0027e97:	53                   	push   ebx
c0027e98:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027e9b:	85 db                	test   ebx,ebx
c0027e9d:	7e 15                	jle    c0027eb4 <__floatsidf+0x21>
c0027e9f:	0f bd cb             	bsr    ecx,ebx
c0027ea2:	83 f1 1f             	xor    ecx,0x1f
c0027ea5:	d3 e3                	shl    ebx,cl
c0027ea7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ead:	b8 1e 04 00 00       	mov    eax,0x41e
c0027eb2:	eb 21                	jmp    c0027ed5 <__floatsidf+0x42>
c0027eb4:	b8 00 00 00 00       	mov    eax,0x0
c0027eb9:	ba 00 00 00 00       	mov    edx,0x0
c0027ebe:	74 2a                	je     c0027eea <__floatsidf+0x57>
c0027ec0:	f7 db                	neg    ebx
c0027ec2:	0f bd cb             	bsr    ecx,ebx
c0027ec5:	83 f1 1f             	xor    ecx,0x1f
c0027ec8:	d3 e3                	shl    ebx,cl
c0027eca:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ed0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027ed5:	29 c8                	sub    eax,ecx
c0027ed7:	c1 e0 14             	shl    eax,0x14
c0027eda:	89 c1                	mov    ecx,eax
c0027edc:	89 de                	mov    esi,ebx
c0027ede:	c1 ee 0b             	shr    esi,0xb
c0027ee1:	09 f1                	or     ecx,esi
c0027ee3:	89 ca                	mov    edx,ecx
c0027ee5:	c1 e3 15             	shl    ebx,0x15
c0027ee8:	89 d8                	mov    eax,ebx
c0027eea:	5b                   	pop    ebx
c0027eeb:	5e                   	pop    esi
c0027eec:	5d                   	pop    ebp
c0027eed:	c3                   	ret    

c0027eee <__floatunsidf>:
c0027eee:	55                   	push   ebp
c0027eef:	89 e5                	mov    ebp,esp
c0027ef1:	56                   	push   esi
c0027ef2:	53                   	push   ebx
c0027ef3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027ef6:	85 db                	test   ebx,ebx
c0027ef8:	74 2a                	je     c0027f24 <__floatunsidf+0x36>
c0027efa:	0f bd cb             	bsr    ecx,ebx
c0027efd:	83 f1 1f             	xor    ecx,0x1f
c0027f00:	d3 e3                	shl    ebx,cl
c0027f02:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f08:	b8 1e 04 00 00       	mov    eax,0x41e
c0027f0d:	29 c8                	sub    eax,ecx
c0027f0f:	c1 e0 14             	shl    eax,0x14
c0027f12:	89 c1                	mov    ecx,eax
c0027f14:	89 de                	mov    esi,ebx
c0027f16:	c1 ee 0b             	shr    esi,0xb
c0027f19:	09 f1                	or     ecx,esi
c0027f1b:	89 ca                	mov    edx,ecx
c0027f1d:	c1 e3 15             	shl    ebx,0x15
c0027f20:	89 d8                	mov    eax,ebx
c0027f22:	eb 04                	jmp    c0027f28 <__floatunsidf+0x3a>
c0027f24:	31 c0                	xor    eax,eax
c0027f26:	31 d2                	xor    edx,edx
c0027f28:	5b                   	pop    ebx
c0027f29:	5e                   	pop    esi
c0027f2a:	5d                   	pop    ebp
c0027f2b:	c3                   	ret    

c0027f2c <__fixdfsi>:
c0027f2c:	55                   	push   ebp
c0027f2d:	89 e5                	mov    ebp,esp
c0027f2f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027f32:	89 d1                	mov    ecx,edx
c0027f34:	c1 e1 0b             	shl    ecx,0xb
c0027f37:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027f40:	c1 e8 15             	shr    eax,0x15
c0027f43:	09 c1                	or     ecx,eax
c0027f45:	c1 fa 14             	sar    edx,0x14
c0027f48:	78 1f                	js     c0027f69 <__fixdfsi+0x3d>
c0027f4a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027f50:	31 c0                	xor    eax,eax
c0027f52:	83 fa 1e             	cmp    edx,0x1e
c0027f55:	77 40                	ja     c0027f97 <__fixdfsi+0x6b>
c0027f57:	89 c8                	mov    eax,ecx
c0027f59:	0d 00 00 00 80       	or     eax,0x80000000
c0027f5e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f63:	29 d1                	sub    ecx,edx
c0027f65:	d3 e8                	shr    eax,cl
c0027f67:	eb 2e                	jmp    c0027f97 <__fixdfsi+0x6b>
c0027f69:	31 c0                	xor    eax,eax
c0027f6b:	81 c2 01 04 00 00    	add    edx,0x401
c0027f71:	78 24                	js     c0027f97 <__fixdfsi+0x6b>
c0027f73:	83 fa 1e             	cmp    edx,0x1e
c0027f76:	7e 09                	jle    c0027f81 <__fixdfsi+0x55>
c0027f78:	83 fa 1f             	cmp    edx,0x1f
c0027f7b:	75 18                	jne    c0027f95 <__fixdfsi+0x69>
c0027f7d:	85 c9                	test   ecx,ecx
c0027f7f:	75 14                	jne    c0027f95 <__fixdfsi+0x69>
c0027f81:	89 c8                	mov    eax,ecx
c0027f83:	0d 00 00 00 80       	or     eax,0x80000000
c0027f88:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f8d:	29 d1                	sub    ecx,edx
c0027f8f:	d3 e8                	shr    eax,cl
c0027f91:	f7 d8                	neg    eax
c0027f93:	eb 02                	jmp    c0027f97 <__fixdfsi+0x6b>
c0027f95:	31 c0                	xor    eax,eax
c0027f97:	5d                   	pop    ebp
c0027f98:	c3                   	ret    

c0027f99 <__fixunsdfsi>:
c0027f99:	55                   	push   ebp
c0027f9a:	89 e5                	mov    ebp,esp
c0027f9c:	53                   	push   ebx
c0027f9d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027fa0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027fa3:	89 d3                	mov    ebx,edx
c0027fa5:	c1 fb 14             	sar    ebx,0x14
c0027fa8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027fae:	31 c0                	xor    eax,eax
c0027fb0:	83 fb 1f             	cmp    ebx,0x1f
c0027fb3:	77 1d                	ja     c0027fd2 <__fixunsdfsi+0x39>
c0027fb5:	89 d0                	mov    eax,edx
c0027fb7:	c1 e0 0b             	shl    eax,0xb
c0027fba:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fbf:	c1 e9 15             	shr    ecx,0x15
c0027fc2:	09 c8                	or     eax,ecx
c0027fc4:	0d 00 00 00 80       	or     eax,0x80000000
c0027fc9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027fce:	29 d9                	sub    ecx,ebx
c0027fd0:	d3 e8                	shr    eax,cl
c0027fd2:	5b                   	pop    ebx
c0027fd3:	5d                   	pop    ebp
c0027fd4:	c3                   	ret    

c0027fd5 <__cmpdf2>:
c0027fd5:	55                   	push   ebp
c0027fd6:	89 e5                	mov    ebp,esp
c0027fd8:	57                   	push   edi
c0027fd9:	56                   	push   esi
c0027fda:	53                   	push   ebx
c0027fdb:	83 ec 0c             	sub    esp,0xc
c0027fde:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027fe1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027fe4:	89 ca                	mov    edx,ecx
c0027fe6:	c1 ea 14             	shr    edx,0x14
c0027fe9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027fef:	89 cb                	mov    ebx,ecx
c0027ff1:	c1 fb 1f             	sar    ebx,0x1f
c0027ff4:	31 da                	xor    edx,ebx
c0027ff6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027ff9:	89 df                	mov    edi,ebx
c0027ffb:	c1 e7 0b             	shl    edi,0xb
c0027ffe:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028001:	c1 e1 0b             	shl    ecx,0xb
c0028004:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002800a:	c1 eb 15             	shr    ebx,0x15
c002800d:	09 d9                	or     ecx,ebx
c002800f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028012:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028015:	89 ce                	mov    esi,ecx
c0028017:	c1 ee 14             	shr    esi,0x14
c002801a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028020:	89 cb                	mov    ebx,ecx
c0028022:	c1 fb 1f             	sar    ebx,0x1f
c0028025:	31 de                	xor    esi,ebx
c0028027:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002802a:	89 df                	mov    edi,ebx
c002802c:	c1 e7 0b             	shl    edi,0xb
c002802f:	c1 e1 0b             	shl    ecx,0xb
c0028032:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028038:	c1 eb 15             	shr    ebx,0x15
c002803b:	09 d9                	or     ecx,ebx
c002803d:	89 d3                	mov    ebx,edx
c002803f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028045:	43                   	inc    ebx
c0028046:	83 fb 01             	cmp    ebx,0x1
c0028049:	77 08                	ja     c0028053 <__cmpdf2+0x7e>
c002804b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002804e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028051:	75 68                	jne    c00280bb <__cmpdf2+0xe6>
c0028053:	89 f3                	mov    ebx,esi
c0028055:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002805b:	43                   	inc    ebx
c002805c:	83 fb 01             	cmp    ebx,0x1
c002805f:	77 06                	ja     c0028067 <__cmpdf2+0x92>
c0028061:	89 fb                	mov    ebx,edi
c0028063:	09 cb                	or     ebx,ecx
c0028065:	75 54                	jne    c00280bb <__cmpdf2+0xe6>
c0028067:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002806a:	09 f8                	or     eax,edi
c002806c:	09 c8                	or     eax,ecx
c002806e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028071:	75 12                	jne    c0028085 <__cmpdf2+0xb0>
c0028073:	8d 42 01             	lea    eax,[edx+0x1]
c0028076:	83 f8 01             	cmp    eax,0x1
c0028079:	77 0a                	ja     c0028085 <__cmpdf2+0xb0>
c002807b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002807e:	31 c0                	xor    eax,eax
c0028080:	83 fb 01             	cmp    ebx,0x1
c0028083:	76 36                	jbe    c00280bb <__cmpdf2+0xe6>
c0028085:	b8 01 00 00 00       	mov    eax,0x1
c002808a:	39 f2                	cmp    edx,esi
c002808c:	7f 2d                	jg     c00280bb <__cmpdf2+0xe6>
c002808e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028093:	7c 26                	jl     c00280bb <__cmpdf2+0xe6>
c0028095:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028098:	77 07                	ja     c00280a1 <__cmpdf2+0xcc>
c002809a:	72 16                	jb     c00280b2 <__cmpdf2+0xdd>
c002809c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002809f:	76 0a                	jbe    c00280ab <__cmpdf2+0xd6>
c00280a1:	89 d0                	mov    eax,edx
c00280a3:	c1 f8 1f             	sar    eax,0x1f
c00280a6:	83 c8 01             	or     eax,0x1
c00280a9:	eb 10                	jmp    c00280bb <__cmpdf2+0xe6>
c00280ab:	b8 00 00 00 00       	mov    eax,0x0
c00280b0:	73 09                	jae    c00280bb <__cmpdf2+0xe6>
c00280b2:	89 d0                	mov    eax,edx
c00280b4:	c1 f8 1f             	sar    eax,0x1f
c00280b7:	83 e0 02             	and    eax,0x2
c00280ba:	48                   	dec    eax
c00280bb:	83 c4 0c             	add    esp,0xc
c00280be:	5b                   	pop    ebx
c00280bf:	5e                   	pop    esi
c00280c0:	5f                   	pop    edi
c00280c1:	5d                   	pop    ebp
c00280c2:	c3                   	ret    

c00280c3 <__eqdf2>:
c00280c3:	55                   	push   ebp
c00280c4:	89 e5                	mov    ebp,esp
c00280c6:	50                   	push   eax
c00280c7:	6a 01                	push   0x1
c00280c9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00280cc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00280cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00280d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00280d5:	e8 fb fe ff ff       	call   c0027fd5 <__cmpdf2>
c00280da:	83 c4 18             	add    esp,0x18
c00280dd:	c9                   	leave  
c00280de:	c3                   	ret    

c00280df <__nedf2>:
c00280df:	eb e2                	jmp    c00280c3 <__eqdf2>

c00280e1 <__gtdf2>:
c00280e1:	55                   	push   ebp
c00280e2:	89 e5                	mov    ebp,esp
c00280e4:	50                   	push   eax
c00280e5:	6a ff                	push   0xffffffff
c00280e7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00280ea:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00280ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00280f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00280f3:	e8 dd fe ff ff       	call   c0027fd5 <__cmpdf2>
c00280f8:	83 c4 18             	add    esp,0x18
c00280fb:	c9                   	leave  
c00280fc:	c3                   	ret    

c00280fd <__gedf2>:
c00280fd:	eb e2                	jmp    c00280e1 <__gtdf2>

c00280ff <__ltdf2>:
c00280ff:	eb c2                	jmp    c00280c3 <__eqdf2>

c0028101 <__ledf2>:
c0028101:	eb c0                	jmp    c00280c3 <__eqdf2>

c0028103 <__truncdfsf2>:
c0028103:	55                   	push   ebp
c0028104:	89 e5                	mov    ebp,esp
c0028106:	57                   	push   edi
c0028107:	56                   	push   esi
c0028108:	53                   	push   ebx
c0028109:	83 ec 0c             	sub    esp,0xc
c002810c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002810f:	89 d1                	mov    ecx,edx
c0028111:	c1 f9 14             	sar    ecx,0x14
c0028114:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028117:	89 df                	mov    edi,ebx
c0028119:	c1 e7 0b             	shl    edi,0xb
c002811c:	89 d0                	mov    eax,edx
c002811e:	c1 e0 0b             	shl    eax,0xb
c0028121:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028126:	c1 eb 15             	shr    ebx,0x15
c0028129:	09 d8                	or     eax,ebx
c002812b:	89 cb                	mov    ebx,ecx
c002812d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028133:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028139:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002813f:	0f 86 9e 00 00 00    	jbe    c00281e3 <__truncdfsf2+0xe0>
c0028145:	85 db                	test   ebx,ebx
c0028147:	75 0a                	jne    c0028153 <__truncdfsf2+0x50>
c0028149:	c1 fa 17             	sar    edx,0x17
c002814c:	30 d2                	xor    dl,dl
c002814e:	e9 84 00 00 00       	jmp    c00281d7 <__truncdfsf2+0xd4>
c0028153:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028159:	83 fe 83             	cmp    esi,0xffffff83
c002815c:	7d 4b                	jge    c00281a9 <__truncdfsf2+0xa6>
c002815e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028163:	29 f1                	sub    ecx,esi
c0028165:	83 f9 1f             	cmp    ecx,0x1f
c0028168:	7f 6b                	jg     c00281d5 <__truncdfsf2+0xd2>
c002816a:	0d 00 00 00 80       	or     eax,0x80000000
c002816f:	89 c3                	mov    ebx,eax
c0028171:	d3 eb                	shr    ebx,cl
c0028173:	be 01 00 00 00       	mov    esi,0x1
c0028178:	d3 e6                	shl    esi,cl
c002817a:	4e                   	dec    esi
c002817b:	21 f0                	and    eax,esi
c002817d:	09 f8                	or     eax,edi
c002817f:	0f 95 c0             	setne  al
c0028182:	0f b6 c0             	movzx  eax,al
c0028185:	09 c3                	or     ebx,eax
c0028187:	89 d9                	mov    ecx,ebx
c0028189:	c1 e9 08             	shr    ecx,0x8
c002818c:	f6 c3 7f             	test   bl,0x7f
c002818f:	0f 95 c0             	setne  al
c0028192:	09 c8                	or     eax,ecx
c0028194:	83 e0 01             	and    eax,0x1
c0028197:	c1 eb 07             	shr    ebx,0x7
c002819a:	21 c3                	and    ebx,eax
c002819c:	81 e2 00 00 00 80    	and    edx,0x80000000
c00281a2:	09 d1                	or     ecx,edx
c00281a4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00281a7:	eb 76                	jmp    c002821f <__truncdfsf2+0x11c>
c00281a9:	83 c6 80             	add    esi,0xffffff80
c00281ac:	7e 1d                	jle    c00281cb <__truncdfsf2+0xc8>
c00281ae:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00281b4:	75 0b                	jne    c00281c1 <__truncdfsf2+0xbe>
c00281b6:	09 f8                	or     eax,edi
c00281b8:	74 09                	je     c00281c3 <__truncdfsf2+0xc0>
c00281ba:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00281bf:	eb 02                	jmp    c00281c3 <__truncdfsf2+0xc0>
c00281c1:	31 c0                	xor    eax,eax
c00281c3:	c1 fa 17             	sar    edx,0x17
c00281c6:	80 ca ff             	or     dl,0xff
c00281c9:	eb 0e                	jmp    c00281d9 <__truncdfsf2+0xd6>
c00281cb:	c1 fa 1f             	sar    edx,0x1f
c00281ce:	c1 e2 08             	shl    edx,0x8
c00281d1:	09 ca                	or     edx,ecx
c00281d3:	eb 04                	jmp    c00281d9 <__truncdfsf2+0xd6>
c00281d5:	31 d2                	xor    edx,edx
c00281d7:	31 c0                	xor    eax,eax
c00281d9:	c1 e2 17             	shl    edx,0x17
c00281dc:	c1 e8 08             	shr    eax,0x8
c00281df:	09 d0                	or     eax,edx
c00281e1:	eb 3c                	jmp    c002821f <__truncdfsf2+0x11c>
c00281e3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00281e9:	89 ca                	mov    edx,ecx
c00281eb:	c1 fa 0b             	sar    edx,0xb
c00281ee:	c1 e2 08             	shl    edx,0x8
c00281f1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00281f4:	31 db                	xor    ebx,ebx
c00281f6:	85 ff                	test   edi,edi
c00281f8:	0f 95 c3             	setne  bl
c00281fb:	09 d8                	or     eax,ebx
c00281fd:	89 c3                	mov    ebx,eax
c00281ff:	c1 eb 08             	shr    ebx,0x8
c0028202:	a8 7f                	test   al,0x7f
c0028204:	0f 95 c2             	setne  dl
c0028207:	89 d6                	mov    esi,edx
c0028209:	09 de                	or     esi,ebx
c002820b:	83 e6 01             	and    esi,0x1
c002820e:	c1 e8 07             	shr    eax,0x7
c0028211:	21 f0                	and    eax,esi
c0028213:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028216:	09 ca                	or     edx,ecx
c0028218:	c1 e2 17             	shl    edx,0x17
c002821b:	09 da                	or     edx,ebx
c002821d:	01 d0                	add    eax,edx
c002821f:	83 c4 0c             	add    esp,0xc
c0028222:	5b                   	pop    ebx
c0028223:	5e                   	pop    esi
c0028224:	5f                   	pop    edi
c0028225:	5d                   	pop    ebp
c0028226:	c3                   	ret    

c0028227 <__extendsfdf2>:
c0028227:	55                   	push   ebp
c0028228:	89 e5                	mov    ebp,esp
c002822a:	57                   	push   edi
c002822b:	56                   	push   esi
c002822c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002822f:	89 d1                	mov    ecx,edx
c0028231:	c1 f9 17             	sar    ecx,0x17
c0028234:	c1 e2 08             	shl    edx,0x8
c0028237:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002823d:	89 c8                	mov    eax,ecx
c002823f:	80 e4 f8             	and    ah,0xf8
c0028242:	8d 71 01             	lea    esi,[ecx+0x1]
c0028245:	81 e6 fe 00 00 00    	and    esi,0xfe
c002824b:	75 27                	jne    c0028274 <__extendsfdf2+0x4d>
c002824d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028253:	75 18                	jne    c002826d <__extendsfdf2+0x46>
c0028255:	85 d2                	test   edx,edx
c0028257:	74 20                	je     c0028279 <__extendsfdf2+0x52>
c0028259:	41                   	inc    ecx
c002825a:	01 d2                	add    edx,edx
c002825c:	79 fb                	jns    c0028259 <__extendsfdf2+0x32>
c002825e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028264:	29 c8                	sub    eax,ecx
c0028266:	05 81 03 00 00       	add    eax,0x381
c002826b:	eb 0c                	jmp    c0028279 <__extendsfdf2+0x52>
c002826d:	05 00 07 00 00       	add    eax,0x700
c0028272:	eb 05                	jmp    c0028279 <__extendsfdf2+0x52>
c0028274:	05 80 03 00 00       	add    eax,0x380
c0028279:	c1 e0 14             	shl    eax,0x14
c002827c:	89 c1                	mov    ecx,eax
c002827e:	89 d0                	mov    eax,edx
c0028280:	c1 e8 0b             	shr    eax,0xb
c0028283:	09 c1                	or     ecx,eax
c0028285:	c1 e2 15             	shl    edx,0x15
c0028288:	89 d0                	mov    eax,edx
c002828a:	89 ca                	mov    edx,ecx
c002828c:	5e                   	pop    esi
c002828d:	5f                   	pop    edi
c002828e:	5d                   	pop    ebp
c002828f:	c3                   	ret    

c0028290 <fabs>:
c0028290:	83 ec 0c             	sub    esp,0xc
c0028293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028297:	89 04 24             	mov    DWORD PTR [esp],eax
c002829a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002829e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00282a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00282a7:	dd 04 24             	fld    QWORD PTR [esp]
c00282aa:	83 c4 0c             	add    esp,0xc
c00282ad:	c3                   	ret    
c00282ae:	66 90                	xchg   ax,ax

c00282b0 <lrint>:
c00282b0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00282b4:	83 ec 04             	sub    esp,0x4
c00282b7:	db 1c 24             	fistp  DWORD PTR [esp]
c00282ba:	58                   	pop    eax
c00282bb:	c3                   	ret    

c00282bc <lrintf>:
c00282bc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00282c0:	83 ec 04             	sub    esp,0x4
c00282c3:	db 1c 24             	fistp  DWORD PTR [esp]
c00282c6:	58                   	pop    eax
c00282c7:	c3                   	ret    

Disassembly of section .init:

c00282c8 <_init>:
c00282c8:	55                   	push   ebp
c00282c9:	89 e5                	mov    ebp,esp
c00282cb:	e8 48 7e fd ff       	call   c0000118 <frame_dummy>
c00282d0:	e8 63 e0 ff ff       	call   c0026338 <__do_global_ctors_aux>
c00282d5:	5d                   	pop    ebp
c00282d6:	c3                   	ret    

Disassembly of section .fini:

c00282d7 <_fini>:
c00282d7:	55                   	push   ebp
c00282d8:	89 e5                	mov    ebp,esp
c00282da:	e8 c9 7d fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00282df:	5d                   	pop    ebp
c00282e0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00282e2 <Computer::~Computer()>:
c00282e2:	83 ec 0c             	sub    esp,0xc
c00282e5:	ba 28 9e 02 c0       	mov    edx,0xc0029e28
c00282ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ee:	89 10                	mov    DWORD PTR [eax],edx
c00282f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282f4:	83 ec 0c             	sub    esp,0xc
c00282f7:	50                   	push   eax
c00282f8:	e8 a9 bb fe ff       	call   c0013ea6 <Device::~Device()>
c00282fd:	83 c4 10             	add    esp,0x10
c0028300:	90                   	nop
c0028301:	83 c4 0c             	add    esp,0xc
c0028304:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028306 <Computer::~Computer()>:
c0028306:	83 ec 0c             	sub    esp,0xc
c0028309:	83 ec 0c             	sub    esp,0xc
c002830c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028310:	e8 cd ff ff ff       	call   c00282e2 <Computer::~Computer()>
c0028315:	83 c4 10             	add    esp,0x10
c0028318:	83 ec 08             	sub    esp,0x8
c002831b:	68 ec 01 00 00       	push   0x1ec
c0028320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028324:	e8 a5 a7 fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028329:	83 c4 10             	add    esp,0x10
c002832c:	83 c4 0c             	add    esp,0xc
c002832f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028330 <idleCommon()>:
c0028330:	83 ec 0c             	sub    esp,0xc
c0028333:	e8 16 57 ff ff       	call   c001da4e <lockScheduler()>
c0028338:	e8 4d 5a ff ff       	call   c001dd8a <schedule()>
c002833d:	83 c4 0c             	add    esp,0xc
c0028340:	e9 0b 57 ff ff       	jmp    c001da50 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028346 <LinkedList<UnixFile>::~LinkedList()>:
c0028346:	90                   	nop
c0028347:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028348 <LinkedList<UnixFile>::LinkedList()>:
c0028348:	83 ec 0c             	sub    esp,0xc
c002834b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002834f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028359:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028364:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002836b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002836f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028379:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028384:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002838b:	83 ec 0c             	sub    esp,0xc
c002838e:	68 e6 a0 02 c0       	push   0xc002a0e6
c0028393:	e8 16 a8 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0028398:	83 c4 10             	add    esp,0x10
c002839b:	90                   	nop
c002839c:	83 c4 0c             	add    esp,0xc
c002839f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00283a0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00283a0:	83 ec 0c             	sub    esp,0xc
c00283a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00283a8:	75 10                	jne    c00283ba <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00283aa:	83 ec 0c             	sub    esp,0xc
c00283ad:	68 00 a1 02 c0       	push   0xc002a100
c00283b2:	e8 72 1e ff ff       	call   c001a229 <Krnl::panic(char const*)>
c00283b7:	83 c4 10             	add    esp,0x10
c00283ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283be:	8b 00                	mov    eax,DWORD PTR [eax]
c00283c0:	85 c0                	test   eax,eax
c00283c2:	74 34                	je     c00283f8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00283c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283cb:	85 c0                	test   eax,eax
c00283cd:	74 29                	je     c00283f8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00283cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283da:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00283dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00283e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00283f6:	eb 65                	jmp    c002845d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00283f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00283fe:	85 c0                	test   eax,eax
c0028400:	75 4b                	jne    c002844d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028406:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028409:	85 c0                	test   eax,eax
c002840b:	75 40                	jne    c002844d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002840d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028415:	89 10                	mov    DWORD PTR [eax],edx
c0028417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002841b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002841f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028426:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028429:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028434:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028437:	85 c0                	test   eax,eax
c0028439:	74 22                	je     c002845d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002843b:	83 ec 0c             	sub    esp,0xc
c002843e:	68 22 a1 02 c0       	push   0xc002a122
c0028443:	e8 e1 1d ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0028448:	83 c4 10             	add    esp,0x10
c002844b:	eb 10                	jmp    c002845d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002844d:	83 ec 0c             	sub    esp,0xc
c0028450:	68 2c a1 02 c0       	push   0xc002a12c
c0028455:	e8 cf 1d ff ff       	call   c001a229 <Krnl::panic(char const*)>
c002845a:	83 c4 10             	add    esp,0x10
c002845d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028461:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028464:	8d 50 01             	lea    edx,[eax+0x1]
c0028467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002846b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002846e:	90                   	nop
c002846f:	83 c4 0c             	add    esp,0xc
c0028472:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028474 <LinkedList<UnixFile>::getFirstElement()>:
c0028474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028478:	8b 00                	mov    eax,DWORD PTR [eax]
c002847a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002847c <LinkedList<UnixFile>::removeFirst()>:
c002847c:	83 ec 0c             	sub    esp,0xc
c002847f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028483:	8b 00                	mov    eax,DWORD PTR [eax]
c0028485:	85 c0                	test   eax,eax
c0028487:	75 12                	jne    c002849b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028489:	83 ec 0c             	sub    esp,0xc
c002848c:	68 38 a1 02 c0       	push   0xc002a138
c0028491:	e8 93 1d ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0028496:	83 c4 10             	add    esp,0x10
c0028499:	eb 7e                	jmp    c0028519 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002849b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002849f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284a5:	85 c0                	test   eax,eax
c00284a7:	74 10                	je     c00284b9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00284a9:	83 ec 0c             	sub    esp,0xc
c00284ac:	68 83 a1 02 c0       	push   0xc002a183
c00284b1:	e8 73 1d ff ff       	call   c001a229 <Krnl::panic(char const*)>
c00284b6:	83 c4 10             	add    esp,0x10
c00284b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00284bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284c2:	85 c0                	test   eax,eax
c00284c4:	75 33                	jne    c00284f9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00284c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00284d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00284db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284e2:	83 f8 01             	cmp    eax,0x1
c00284e5:	74 21                	je     c0028508 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00284e7:	83 ec 0c             	sub    esp,0xc
c00284ea:	68 5c a1 02 c0       	push   0xc002a15c
c00284ef:	e8 35 1d ff ff       	call   c001a229 <Krnl::panic(char const*)>
c00284f4:	83 c4 10             	add    esp,0x10
c00284f7:	eb 0f                	jmp    c0028508 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00284f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00284ff:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028506:	89 10                	mov    DWORD PTR [eax],edx
c0028508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002850f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028516:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028519:	83 c4 0c             	add    esp,0xc
c002851c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002851e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002851e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028522:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028525:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028526 <DriverlessDevice::~DriverlessDevice()>:
c0028526:	ba c4 a8 02 c0       	mov    edx,0xc002a8c4
c002852b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002852f:	89 10                	mov    DWORD PTR [eax],edx
c0028531:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028535:	50                   	push   eax
c0028536:	e8 6b b9 fe ff       	call   c0013ea6 <Device::~Device()>
c002853b:	83 c4 04             	add    esp,0x4
c002853e:	90                   	nop
c002853f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028540 <DriverlessDevice::~DriverlessDevice()>:
c0028540:	83 ec 0c             	sub    esp,0xc
c0028543:	83 ec 0c             	sub    esp,0xc
c0028546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002854a:	e8 d7 ff ff ff       	call   c0028526 <DriverlessDevice::~DriverlessDevice()>
c002854f:	83 c4 10             	add    esp,0x10
c0028552:	83 ec 08             	sub    esp,0x8
c0028555:	68 58 01 00 00       	push   0x158
c002855a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002855e:	e8 6b a5 fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028563:	83 c4 10             	add    esp,0x10
c0028566:	83 c4 0c             	add    esp,0xc
c0028569:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002856a <LinkedList<Device>::addElement(Device*)>:
c002856a:	83 ec 0c             	sub    esp,0xc
c002856d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028572:	75 10                	jne    c0028584 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028574:	83 ec 0c             	sub    esp,0xc
c0028577:	68 00 a1 02 c0       	push   0xc002a100
c002857c:	e8 a8 1c ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0028581:	83 c4 10             	add    esp,0x10
c0028584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028588:	8b 00                	mov    eax,DWORD PTR [eax]
c002858a:	85 c0                	test   eax,eax
c002858c:	74 3a                	je     c00285c8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002858e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028595:	85 c0                	test   eax,eax
c0028597:	74 2f                	je     c00285c8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002859d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285a4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00285aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00285b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285bc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00285c6:	eb 68                	jmp    c0028630 <LinkedList<Device>::addElement(Device*)+0xc6>
c00285c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00285ce:	85 c0                	test   eax,eax
c00285d0:	75 4e                	jne    c0028620 <LinkedList<Device>::addElement(Device*)+0xb6>
c00285d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285d9:	85 c0                	test   eax,eax
c00285db:	75 43                	jne    c0028620 <LinkedList<Device>::addElement(Device*)+0xb6>
c00285dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285e5:	89 10                	mov    DWORD PTR [eax],edx
c00285e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00285f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285f9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028607:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002860a:	85 c0                	test   eax,eax
c002860c:	74 22                	je     c0028630 <LinkedList<Device>::addElement(Device*)+0xc6>
c002860e:	83 ec 0c             	sub    esp,0xc
c0028611:	68 22 a1 02 c0       	push   0xc002a122
c0028616:	e8 0e 1c ff ff       	call   c001a229 <Krnl::panic(char const*)>
c002861b:	83 c4 10             	add    esp,0x10
c002861e:	eb 10                	jmp    c0028630 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028620:	83 ec 0c             	sub    esp,0xc
c0028623:	68 2c a1 02 c0       	push   0xc002a12c
c0028628:	e8 fc 1b ff ff       	call   c001a229 <Krnl::panic(char const*)>
c002862d:	83 c4 10             	add    esp,0x10
c0028630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028634:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028637:	8d 50 01             	lea    edx,[eax+0x1]
c002863a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002863e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028641:	90                   	nop
c0028642:	83 c4 0c             	add    esp,0xc
c0028645:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028646 <LinkedList<Device>::LinkedList()>:
c0028646:	83 ec 0c             	sub    esp,0xc
c0028649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028657:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002865e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028662:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028677:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002867e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028682:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028689:	83 ec 0c             	sub    esp,0xc
c002868c:	68 e6 a0 02 c0       	push   0xc002a0e6
c0028691:	e8 18 a5 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0028696:	83 c4 10             	add    esp,0x10
c0028699:	90                   	nop
c002869a:	83 c4 0c             	add    esp,0xc
c002869d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002869e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002869e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00286a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00286a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00286a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00286ac:	85 c0                	test   eax,eax
c00286ae:	75 0e                	jne    c00286be <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00286b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286b7:	85 c0                	test   eax,eax
c00286b9:	75 03                	jne    c00286be <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00286bb:	b0 01                	mov    al,0x1
c00286bd:	c3                   	ret    
c00286be:	b0 00                	mov    al,0x0
c00286c0:	90                   	nop
c00286c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00286c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00286c2:	83 ec 0c             	sub    esp,0xc
c00286c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00286cb:	85 c0                	test   eax,eax
c00286cd:	75 15                	jne    c00286e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00286cf:	83 ec 0c             	sub    esp,0xc
c00286d2:	68 38 a1 02 c0       	push   0xc002a138
c00286d7:	e8 4d 1b ff ff       	call   c001a229 <Krnl::panic(char const*)>
c00286dc:	83 c4 10             	add    esp,0x10
c00286df:	e9 88 00 00 00       	jmp    c002876c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00286e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00286ee:	85 c0                	test   eax,eax
c00286f0:	0f 95 c0             	setne  al
c00286f3:	84 c0                	test   al,al
c00286f5:	74 10                	je     c0028707 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00286f7:	83 ec 0c             	sub    esp,0xc
c00286fa:	68 83 a1 02 c0       	push   0xc002a183
c00286ff:	e8 25 1b ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0028704:	83 c4 10             	add    esp,0x10
c0028707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870b:	8b 00                	mov    eax,DWORD PTR [eax]
c002870d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028710:	85 c0                	test   eax,eax
c0028712:	0f 94 c0             	sete   al
c0028715:	84 c0                	test   al,al
c0028717:	74 33                	je     c002874c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028727:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002872e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028732:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028735:	83 f8 01             	cmp    eax,0x1
c0028738:	74 21                	je     c002875b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002873a:	83 ec 0c             	sub    esp,0xc
c002873d:	68 5c a1 02 c0       	push   0xc002a15c
c0028742:	e8 e2 1a ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0028747:	83 c4 10             	add    esp,0x10
c002874a:	eb 0f                	jmp    c002875b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002874c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028750:	8b 00                	mov    eax,DWORD PTR [eax]
c0028752:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028759:	89 10                	mov    DWORD PTR [eax],edx
c002875b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028762:	8d 50 ff             	lea    edx,[eax-0x1]
c0028765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028769:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002876c:	83 c4 0c             	add    esp,0xc
c002876f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028770:	83 ec 0c             	sub    esp,0xc
c0028773:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028778:	75 10                	jne    c002878a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002877a:	83 ec 0c             	sub    esp,0xc
c002877d:	68 00 a1 02 c0       	push   0xc002a100
c0028782:	e8 a2 1a ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0028787:	83 c4 10             	add    esp,0x10
c002878a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028790:	85 c0                	test   eax,eax
c0028792:	74 34                	je     c00287c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002879b:	85 c0                	test   eax,eax
c002879d:	74 29                	je     c00287c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002879f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287aa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00287ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287bf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00287c6:	eb 65                	jmp    c002882d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00287c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ce:	85 c0                	test   eax,eax
c00287d0:	75 4b                	jne    c002881d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00287d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287d9:	85 c0                	test   eax,eax
c00287db:	75 40                	jne    c002881d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00287dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287e5:	89 10                	mov    DWORD PTR [eax],edx
c00287e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028804:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028807:	85 c0                	test   eax,eax
c0028809:	74 22                	je     c002882d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002880b:	83 ec 0c             	sub    esp,0xc
c002880e:	68 22 a1 02 c0       	push   0xc002a122
c0028813:	e8 11 1a ff ff       	call   c001a229 <Krnl::panic(char const*)>
c0028818:	83 c4 10             	add    esp,0x10
c002881b:	eb 10                	jmp    c002882d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002881d:	83 ec 0c             	sub    esp,0xc
c0028820:	68 2c a1 02 c0       	push   0xc002a12c
c0028825:	e8 ff 19 ff ff       	call   c001a229 <Krnl::panic(char const*)>
c002882a:	83 c4 10             	add    esp,0x10
c002882d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028831:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028834:	8d 50 01             	lea    edx,[eax+0x1]
c0028837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002883e:	90                   	nop
c002883f:	83 c4 0c             	add    esp,0xc
c0028842:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028844 <ACPI::~ACPI()>:
c0028844:	83 ec 0c             	sub    esp,0xc
c0028847:	ba 0c b2 02 c0       	mov    edx,0xc002b20c
c002884c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028850:	89 10                	mov    DWORD PTR [eax],edx
c0028852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028856:	83 ec 0c             	sub    esp,0xc
c0028859:	50                   	push   eax
c002885a:	e8 47 b6 fe ff       	call   c0013ea6 <Device::~Device()>
c002885f:	83 c4 10             	add    esp,0x10
c0028862:	90                   	nop
c0028863:	83 c4 0c             	add    esp,0xc
c0028866:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028868 <ACPI::~ACPI()>:
c0028868:	83 ec 0c             	sub    esp,0xc
c002886b:	83 ec 0c             	sub    esp,0xc
c002886e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028872:	e8 cd ff ff ff       	call   c0028844 <ACPI::~ACPI()>
c0028877:	83 c4 10             	add    esp,0x10
c002887a:	83 ec 08             	sub    esp,0x8
c002887d:	68 68 12 00 00       	push   0x1268
c0028882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028886:	e8 43 a2 fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c002888b:	83 c4 10             	add    esp,0x10
c002888e:	83 c4 0c             	add    esp,0xc
c0028891:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028892 <CPU::~CPU()>:
c0028892:	83 ec 0c             	sub    esp,0xc
c0028895:	ba fc b5 02 c0       	mov    edx,0xc002b5fc
c002889a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889e:	89 10                	mov    DWORD PTR [eax],edx
c00288a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a4:	83 ec 0c             	sub    esp,0xc
c00288a7:	50                   	push   eax
c00288a8:	e8 f9 b5 fe ff       	call   c0013ea6 <Device::~Device()>
c00288ad:	83 c4 10             	add    esp,0x10
c00288b0:	90                   	nop
c00288b1:	83 c4 0c             	add    esp,0xc
c00288b4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00288b6 <CPU::~CPU()>:
c00288b6:	83 ec 0c             	sub    esp,0xc
c00288b9:	83 ec 0c             	sub    esp,0xc
c00288bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288c0:	e8 cd ff ff ff       	call   c0028892 <CPU::~CPU()>
c00288c5:	83 c4 10             	add    esp,0x10
c00288c8:	83 ec 08             	sub    esp,0x8
c00288cb:	68 98 11 00 00       	push   0x1198
c00288d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288d4:	e8 f5 a1 fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c00288d9:	83 c4 10             	add    esp,0x10
c00288dc:	83 c4 0c             	add    esp,0xc
c00288df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00288e0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00288e0:	90                   	nop
c00288e1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00288e2 <ThreadControlBlock::ThreadControlBlock()>:
c00288e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288e6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288f1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00288f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288fc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028903:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028907:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002890e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028912:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002891a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002891e:	90                   	nop
c002891f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028920 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028920:	83 ec 0c             	sub    esp,0xc
c0028923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028927:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002892d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028931:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028947:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028951:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028963:	83 ec 0c             	sub    esp,0xc
c0028966:	68 e6 a0 02 c0       	push   0xc002a0e6
c002896b:	e8 3e a2 fe ff       	call   c0012bae <Dbg::kprintf(char const*, ...)>
c0028970:	83 c4 10             	add    esp,0x10
c0028973:	90                   	nop
c0028974:	83 c4 0c             	add    esp,0xc
c0028977:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028978 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028978:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002897c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002897f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028980 <Vm::_FPUState::_FPUState()>:
c0028980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028984:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002898b:	90                   	nop
c002898c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002898e <PCI::~PCI()>:
c002898e:	83 ec 0c             	sub    esp,0xc
c0028991:	ba f0 c6 02 c0       	mov    edx,0xc002c6f0
c0028996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899a:	89 10                	mov    DWORD PTR [eax],edx
c002899c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a0:	83 ec 0c             	sub    esp,0xc
c00289a3:	50                   	push   eax
c00289a4:	e8 d5 ae fe ff       	call   c001387e <Bus::~Bus()>
c00289a9:	83 c4 10             	add    esp,0x10
c00289ac:	90                   	nop
c00289ad:	83 c4 0c             	add    esp,0xc
c00289b0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00289b2 <PCI::~PCI()>:
c00289b2:	83 ec 0c             	sub    esp,0xc
c00289b5:	83 ec 0c             	sub    esp,0xc
c00289b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289bc:	e8 cd ff ff ff       	call   c002898e <PCI::~PCI()>
c00289c1:	83 c4 10             	add    esp,0x10
c00289c4:	83 ec 08             	sub    esp,0x8
c00289c7:	68 58 01 00 00       	push   0x158
c00289cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289d0:	e8 f9 a0 fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c00289d5:	83 c4 10             	add    esp,0x10
c00289d8:	83 c4 0c             	add    esp,0xc
c00289db:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00289dc <IDE::~IDE()>:
c00289dc:	83 ec 0c             	sub    esp,0xc
c00289df:	ba 54 c9 02 c0       	mov    edx,0xc002c954
c00289e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e8:	89 10                	mov    DWORD PTR [eax],edx
c00289ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ee:	83 ec 0c             	sub    esp,0xc
c00289f1:	50                   	push   eax
c00289f2:	e8 9f b9 fe ff       	call   c0014396 <HardDiskController::~HardDiskController()>
c00289f7:	83 c4 10             	add    esp,0x10
c00289fa:	90                   	nop
c00289fb:	83 c4 0c             	add    esp,0xc
c00289fe:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028a00 <IDE::~IDE()>:
c0028a00:	83 ec 0c             	sub    esp,0xc
c0028a03:	83 ec 0c             	sub    esp,0xc
c0028a06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a0a:	e8 cd ff ff ff       	call   c00289dc <IDE::~IDE()>
c0028a0f:	83 c4 10             	add    esp,0x10
c0028a12:	83 ec 08             	sub    esp,0x8
c0028a15:	68 70 02 00 00       	push   0x270
c0028a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a1e:	e8 ab a0 fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028a23:	83 c4 10             	add    esp,0x10
c0028a26:	83 c4 0c             	add    esp,0xc
c0028a29:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028a2a <SATABus::~SATABus()>:
c0028a2a:	83 ec 0c             	sub    esp,0xc
c0028a2d:	ba 34 ca 02 c0       	mov    edx,0xc002ca34
c0028a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a36:	89 10                	mov    DWORD PTR [eax],edx
c0028a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3c:	83 ec 0c             	sub    esp,0xc
c0028a3f:	50                   	push   eax
c0028a40:	e8 51 b9 fe ff       	call   c0014396 <HardDiskController::~HardDiskController()>
c0028a45:	83 c4 10             	add    esp,0x10
c0028a48:	90                   	nop
c0028a49:	83 c4 0c             	add    esp,0xc
c0028a4c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028a4e <SATABus::~SATABus()>:
c0028a4e:	83 ec 0c             	sub    esp,0xc
c0028a51:	83 ec 0c             	sub    esp,0xc
c0028a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a58:	e8 cd ff ff ff       	call   c0028a2a <SATABus::~SATABus()>
c0028a5d:	83 c4 10             	add    esp,0x10
c0028a60:	83 ec 08             	sub    esp,0x8
c0028a63:	68 64 01 00 00       	push   0x164
c0028a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a6c:	e8 5d a0 fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028a71:	83 c4 10             	add    esp,0x10
c0028a74:	83 c4 0c             	add    esp,0xc
c0028a77:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028a78 <ATA::~ATA()>:
c0028a78:	83 ec 0c             	sub    esp,0xc
c0028a7b:	ba 80 ca 02 c0       	mov    edx,0xc002ca80
c0028a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a84:	89 10                	mov    DWORD PTR [eax],edx
c0028a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8a:	83 ec 0c             	sub    esp,0xc
c0028a8d:	50                   	push   eax
c0028a8e:	e8 f5 b9 fe ff       	call   c0014488 <PhysicalDisk::~PhysicalDisk()>
c0028a93:	83 c4 10             	add    esp,0x10
c0028a96:	90                   	nop
c0028a97:	83 c4 0c             	add    esp,0xc
c0028a9a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028a9c <ATA::~ATA()>:
c0028a9c:	83 ec 0c             	sub    esp,0xc
c0028a9f:	83 ec 0c             	sub    esp,0xc
c0028aa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aa6:	e8 cd ff ff ff       	call   c0028a78 <ATA::~ATA()>
c0028aab:	83 c4 10             	add    esp,0x10
c0028aae:	83 ec 08             	sub    esp,0x8
c0028ab1:	68 7c 01 00 00       	push   0x17c
c0028ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aba:	e8 0f a0 fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028abf:	83 c4 10             	add    esp,0x10
c0028ac2:	83 c4 0c             	add    esp,0xc
c0028ac5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028ac6 <ATAPI::~ATAPI()>:
c0028ac6:	83 ec 0c             	sub    esp,0xc
c0028ac9:	ba b8 ca 02 c0       	mov    edx,0xc002cab8
c0028ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad2:	89 10                	mov    DWORD PTR [eax],edx
c0028ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad8:	83 ec 0c             	sub    esp,0xc
c0028adb:	50                   	push   eax
c0028adc:	e8 a7 b9 fe ff       	call   c0014488 <PhysicalDisk::~PhysicalDisk()>
c0028ae1:	83 c4 10             	add    esp,0x10
c0028ae4:	90                   	nop
c0028ae5:	83 c4 0c             	add    esp,0xc
c0028ae8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028aea <ATAPI::~ATAPI()>:
c0028aea:	83 ec 0c             	sub    esp,0xc
c0028aed:	83 ec 0c             	sub    esp,0xc
c0028af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028af4:	e8 cd ff ff ff       	call   c0028ac6 <ATAPI::~ATAPI()>
c0028af9:	83 c4 10             	add    esp,0x10
c0028afc:	83 ec 08             	sub    esp,0x8
c0028aff:	68 80 01 00 00       	push   0x180
c0028b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b08:	e8 c1 9f fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028b0d:	83 c4 10             	add    esp,0x10
c0028b10:	83 c4 0c             	add    esp,0xc
c0028b13:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028b14 <SATA::~SATA()>:
c0028b14:	83 ec 0c             	sub    esp,0xc
c0028b17:	ba 6c cb 02 c0       	mov    edx,0xc002cb6c
c0028b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b20:	89 10                	mov    DWORD PTR [eax],edx
c0028b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b26:	83 ec 0c             	sub    esp,0xc
c0028b29:	50                   	push   eax
c0028b2a:	e8 59 b9 fe ff       	call   c0014488 <PhysicalDisk::~PhysicalDisk()>
c0028b2f:	83 c4 10             	add    esp,0x10
c0028b32:	90                   	nop
c0028b33:	83 c4 0c             	add    esp,0xc
c0028b36:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028b38 <SATA::~SATA()>:
c0028b38:	83 ec 0c             	sub    esp,0xc
c0028b3b:	83 ec 0c             	sub    esp,0xc
c0028b3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b42:	e8 cd ff ff ff       	call   c0028b14 <SATA::~SATA()>
c0028b47:	83 c4 10             	add    esp,0x10
c0028b4a:	83 ec 08             	sub    esp,0x8
c0028b4d:	68 7c 01 00 00       	push   0x17c
c0028b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b56:	e8 73 9f fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028b5b:	83 c4 10             	add    esp,0x10
c0028b5e:	83 c4 0c             	add    esp,0xc
c0028b61:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028b62 <SATAPI::~SATAPI()>:
c0028b62:	83 ec 0c             	sub    esp,0xc
c0028b65:	ba 48 cc 02 c0       	mov    edx,0xc002cc48
c0028b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6e:	89 10                	mov    DWORD PTR [eax],edx
c0028b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b74:	83 ec 0c             	sub    esp,0xc
c0028b77:	50                   	push   eax
c0028b78:	e8 0b b9 fe ff       	call   c0014488 <PhysicalDisk::~PhysicalDisk()>
c0028b7d:	83 c4 10             	add    esp,0x10
c0028b80:	90                   	nop
c0028b81:	83 c4 0c             	add    esp,0xc
c0028b84:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028b86 <SATAPI::~SATAPI()>:
c0028b86:	83 ec 0c             	sub    esp,0xc
c0028b89:	83 ec 0c             	sub    esp,0xc
c0028b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b90:	e8 cd ff ff ff       	call   c0028b62 <SATAPI::~SATAPI()>
c0028b95:	83 c4 10             	add    esp,0x10
c0028b98:	83 ec 08             	sub    esp,0x8
c0028b9b:	68 80 01 00 00       	push   0x180
c0028ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ba4:	e8 25 9f fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028ba9:	83 c4 10             	add    esp,0x10
c0028bac:	83 c4 0c             	add    esp,0xc
c0028baf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028bb0 <AVX::~AVX()>:
c0028bb0:	83 ec 0c             	sub    esp,0xc
c0028bb3:	ba 88 cc 02 c0       	mov    edx,0xc002cc88
c0028bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbc:	89 10                	mov    DWORD PTR [eax],edx
c0028bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc2:	83 ec 0c             	sub    esp,0xc
c0028bc5:	50                   	push   eax
c0028bc6:	e8 41 b9 fe ff       	call   c001450c <FPU::~FPU()>
c0028bcb:	83 c4 10             	add    esp,0x10
c0028bce:	90                   	nop
c0028bcf:	83 c4 0c             	add    esp,0xc
c0028bd2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028bd4 <AVX::~AVX()>:
c0028bd4:	83 ec 0c             	sub    esp,0xc
c0028bd7:	83 ec 0c             	sub    esp,0xc
c0028bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bde:	e8 cd ff ff ff       	call   c0028bb0 <AVX::~AVX()>
c0028be3:	83 c4 10             	add    esp,0x10
c0028be6:	83 ec 08             	sub    esp,0x8
c0028be9:	68 58 01 00 00       	push   0x158
c0028bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf2:	e8 d7 9e fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028bf7:	83 c4 10             	add    esp,0x10
c0028bfa:	83 c4 0c             	add    esp,0xc
c0028bfd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028bfe <MMX::~MMX()>:
c0028bfe:	83 ec 0c             	sub    esp,0xc
c0028c01:	ba c8 cc 02 c0       	mov    edx,0xc002ccc8
c0028c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0a:	89 10                	mov    DWORD PTR [eax],edx
c0028c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c10:	83 ec 0c             	sub    esp,0xc
c0028c13:	50                   	push   eax
c0028c14:	e8 f3 b8 fe ff       	call   c001450c <FPU::~FPU()>
c0028c19:	83 c4 10             	add    esp,0x10
c0028c1c:	90                   	nop
c0028c1d:	83 c4 0c             	add    esp,0xc
c0028c20:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028c22 <MMX::~MMX()>:
c0028c22:	83 ec 0c             	sub    esp,0xc
c0028c25:	83 ec 0c             	sub    esp,0xc
c0028c28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c2c:	e8 cd ff ff ff       	call   c0028bfe <MMX::~MMX()>
c0028c31:	83 c4 10             	add    esp,0x10
c0028c34:	83 ec 08             	sub    esp,0x8
c0028c37:	68 58 01 00 00       	push   0x158
c0028c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c40:	e8 89 9e fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028c45:	83 c4 10             	add    esp,0x10
c0028c48:	83 c4 0c             	add    esp,0xc
c0028c4b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028c4c <SSE::~SSE()>:
c0028c4c:	83 ec 0c             	sub    esp,0xc
c0028c4f:	ba 08 cd 02 c0       	mov    edx,0xc002cd08
c0028c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c58:	89 10                	mov    DWORD PTR [eax],edx
c0028c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5e:	83 ec 0c             	sub    esp,0xc
c0028c61:	50                   	push   eax
c0028c62:	e8 a5 b8 fe ff       	call   c001450c <FPU::~FPU()>
c0028c67:	83 c4 10             	add    esp,0x10
c0028c6a:	90                   	nop
c0028c6b:	83 c4 0c             	add    esp,0xc
c0028c6e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028c70 <SSE::~SSE()>:
c0028c70:	83 ec 0c             	sub    esp,0xc
c0028c73:	83 ec 0c             	sub    esp,0xc
c0028c76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c7a:	e8 cd ff ff ff       	call   c0028c4c <SSE::~SSE()>
c0028c7f:	83 c4 10             	add    esp,0x10
c0028c82:	83 ec 08             	sub    esp,0x8
c0028c85:	68 58 01 00 00       	push   0x158
c0028c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c8e:	e8 3b 9e fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028c93:	83 c4 10             	add    esp,0x10
c0028c96:	83 c4 0c             	add    esp,0xc
c0028c99:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028c9a <x87::~x87()>:
c0028c9a:	83 ec 0c             	sub    esp,0xc
c0028c9d:	ba 48 cd 02 c0       	mov    edx,0xc002cd48
c0028ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca6:	89 10                	mov    DWORD PTR [eax],edx
c0028ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cac:	83 ec 0c             	sub    esp,0xc
c0028caf:	50                   	push   eax
c0028cb0:	e8 57 b8 fe ff       	call   c001450c <FPU::~FPU()>
c0028cb5:	83 c4 10             	add    esp,0x10
c0028cb8:	90                   	nop
c0028cb9:	83 c4 0c             	add    esp,0xc
c0028cbc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028cbe <x87::~x87()>:
c0028cbe:	83 ec 0c             	sub    esp,0xc
c0028cc1:	83 ec 0c             	sub    esp,0xc
c0028cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc8:	e8 cd ff ff ff       	call   c0028c9a <x87::~x87()>
c0028ccd:	83 c4 10             	add    esp,0x10
c0028cd0:	83 ec 08             	sub    esp,0x8
c0028cd3:	68 58 01 00 00       	push   0x158
c0028cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cdc:	e8 ed 9d fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028ce1:	83 c4 10             	add    esp,0x10
c0028ce4:	83 c4 0c             	add    esp,0xc
c0028ce7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028ce8 <IOAPIC::~IOAPIC()>:
c0028ce8:	83 ec 0c             	sub    esp,0xc
c0028ceb:	ba a0 ce 02 c0       	mov    edx,0xc002cea0
c0028cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf4:	89 10                	mov    DWORD PTR [eax],edx
c0028cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfa:	83 ec 0c             	sub    esp,0xc
c0028cfd:	50                   	push   eax
c0028cfe:	e8 a3 b1 fe ff       	call   c0013ea6 <Device::~Device()>
c0028d03:	83 c4 10             	add    esp,0x10
c0028d06:	90                   	nop
c0028d07:	83 c4 0c             	add    esp,0xc
c0028d0a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028d0c <IOAPIC::~IOAPIC()>:
c0028d0c:	83 ec 0c             	sub    esp,0xc
c0028d0f:	83 ec 0c             	sub    esp,0xc
c0028d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d16:	e8 cd ff ff ff       	call   c0028ce8 <IOAPIC::~IOAPIC()>
c0028d1b:	83 c4 10             	add    esp,0x10
c0028d1e:	83 ec 08             	sub    esp,0x8
c0028d21:	68 68 01 00 00       	push   0x168
c0028d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d2a:	e8 9f 9d fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028d2f:	83 c4 10             	add    esp,0x10
c0028d32:	83 c4 0c             	add    esp,0xc
c0028d35:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028d36 <APIC::~APIC()>:
c0028d36:	83 ec 0c             	sub    esp,0xc
c0028d39:	ba 58 ce 02 c0       	mov    edx,0xc002ce58
c0028d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d42:	89 10                	mov    DWORD PTR [eax],edx
c0028d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d48:	83 ec 0c             	sub    esp,0xc
c0028d4b:	50                   	push   eax
c0028d4c:	e8 85 bc fe ff       	call   c00149d6 <InterruptController::~InterruptController()>
c0028d51:	83 c4 10             	add    esp,0x10
c0028d54:	90                   	nop
c0028d55:	83 c4 0c             	add    esp,0xc
c0028d58:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028d5a <APIC::~APIC()>:
c0028d5a:	83 ec 0c             	sub    esp,0xc
c0028d5d:	83 ec 0c             	sub    esp,0xc
c0028d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d64:	e8 cd ff ff ff       	call   c0028d36 <APIC::~APIC()>
c0028d69:	83 c4 10             	add    esp,0x10
c0028d6c:	83 ec 08             	sub    esp,0x8
c0028d6f:	68 58 21 00 00       	push   0x2158
c0028d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d78:	e8 51 9d fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028d7d:	83 c4 10             	add    esp,0x10
c0028d80:	83 c4 0c             	add    esp,0xc
c0028d83:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028d84 <PIC::~PIC()>:
c0028d84:	83 ec 0c             	sub    esp,0xc
c0028d87:	ba f0 ce 02 c0       	mov    edx,0xc002cef0
c0028d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d90:	89 10                	mov    DWORD PTR [eax],edx
c0028d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d96:	83 ec 0c             	sub    esp,0xc
c0028d99:	50                   	push   eax
c0028d9a:	e8 37 bc fe ff       	call   c00149d6 <InterruptController::~InterruptController()>
c0028d9f:	83 c4 10             	add    esp,0x10
c0028da2:	90                   	nop
c0028da3:	83 c4 0c             	add    esp,0xc
c0028da6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028da8 <PIC::~PIC()>:
c0028da8:	83 ec 0c             	sub    esp,0xc
c0028dab:	83 ec 0c             	sub    esp,0xc
c0028dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db2:	e8 cd ff ff ff       	call   c0028d84 <PIC::~PIC()>
c0028db7:	83 c4 10             	add    esp,0x10
c0028dba:	83 ec 08             	sub    esp,0x8
c0028dbd:	68 58 21 00 00       	push   0x2158
c0028dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc6:	e8 03 9d fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028dcb:	83 c4 10             	add    esp,0x10
c0028dce:	83 c4 0c             	add    esp,0xc
c0028dd1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028dd2 <APICTimer::~APICTimer()>:
c0028dd2:	83 ec 0c             	sub    esp,0xc
c0028dd5:	ba 44 cf 02 c0       	mov    edx,0xc002cf44
c0028dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dde:	89 10                	mov    DWORD PTR [eax],edx
c0028de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de4:	83 ec 0c             	sub    esp,0xc
c0028de7:	50                   	push   eax
c0028de8:	e8 0f db fe ff       	call   c00168fc <Timer::~Timer()>
c0028ded:	83 c4 10             	add    esp,0x10
c0028df0:	90                   	nop
c0028df1:	83 c4 0c             	add    esp,0xc
c0028df4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028df6 <APICTimer::~APICTimer()>:
c0028df6:	83 ec 0c             	sub    esp,0xc
c0028df9:	83 ec 0c             	sub    esp,0xc
c0028dfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e00:	e8 cd ff ff ff       	call   c0028dd2 <APICTimer::~APICTimer()>
c0028e05:	83 c4 10             	add    esp,0x10
c0028e08:	83 ec 08             	sub    esp,0x8
c0028e0b:	68 60 01 00 00       	push   0x160
c0028e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e14:	e8 b5 9c fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028e19:	83 c4 10             	add    esp,0x10
c0028e1c:	83 c4 0c             	add    esp,0xc
c0028e1f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028e20 <PIT::~PIT()>:
c0028e20:	83 ec 0c             	sub    esp,0xc
c0028e23:	ba 94 cf 02 c0       	mov    edx,0xc002cf94
c0028e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e2c:	89 10                	mov    DWORD PTR [eax],edx
c0028e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e32:	83 ec 0c             	sub    esp,0xc
c0028e35:	50                   	push   eax
c0028e36:	e8 c1 da fe ff       	call   c00168fc <Timer::~Timer()>
c0028e3b:	83 c4 10             	add    esp,0x10
c0028e3e:	90                   	nop
c0028e3f:	83 c4 0c             	add    esp,0xc
c0028e42:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028e44 <PIT::~PIT()>:
c0028e44:	83 ec 0c             	sub    esp,0xc
c0028e47:	83 ec 0c             	sub    esp,0xc
c0028e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4e:	e8 cd ff ff ff       	call   c0028e20 <PIT::~PIT()>
c0028e53:	83 c4 10             	add    esp,0x10
c0028e56:	83 ec 08             	sub    esp,0x8
c0028e59:	68 5c 01 00 00       	push   0x15c
c0028e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e62:	e8 67 9c fe ff       	call   c0012ace <operator delete(void*, unsigned long)>
c0028e67:	83 c4 10             	add    esp,0x10
c0028e6a:	83 c4 0c             	add    esp,0xc
c0028e6d:	c3                   	ret    
