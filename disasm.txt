
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 84 39 02 c0       	mov    eax,0xc0023984
c0000025:	3d 84 39 02 c0       	cmp    eax,0xc0023984
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 84 39 02 c0       	push   0xc0023984
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 84 39 02 c0       	mov    eax,0xc0023984
c0000051:	2d 84 39 02 c0       	sub    eax,0xc0023984
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 84 39 02 c0       	push   0xc0023984
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 4c 00 02 c0       	mov    ebx,0xc002004c
c0000097:	81 eb 48 00 02 c0    	sub    ebx,0xc0020048
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 48 00 02 c0       	mov    esi,0xc0020048
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 84 39 02 c0       	push   0xc0023984
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 84 39 02 c0       	push   0xc0023984
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 93 52 01 00       	call   c0015540 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 71 52 01 00       	call   c0015540 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 7e 57 01 00       	call   c0015a6c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 3d 5e 01 00       	call   c0016134 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 bd 0f 01 00       	jmp    c001133c <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 60 00 02 c0 02 	test   BYTE PTR [edx-0x3ffdffa0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 60 00 02 c0 01 	test   BYTE PTR [edx-0x3ffdffa0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 60 00 02 c0 08 	test   BYTE PTR [edx-0x3ffdffa0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 60 00 02 c0 04 	test   BYTE PTR [ecx-0x3ffdffa0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 60 00 02 c0 01 	test   BYTE PTR [edx-0x3ffdffa0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 64 01 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfe9c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 36 79 01 00       	jmp    c00196d8 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 60 79 01 00       	jmp    c0019718 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 81 79 01 00       	jmp    c0019758 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 c0 02 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfd40]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 c0 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfd40]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba a4 29 02 c0       	mov    edx,0xc00229a4
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 7c 01 02 c0       	mov    edx,0xc002017c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 82 01 02 c0       	mov    eax,0xc0020182
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 40 02 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfdc0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 8b 01 02 c0       	mov    eax,0xc002018b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 c0 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfd40]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 10 02 02 c0       	mov    eax,0xc0020210
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 00 02 02 c0       	mov    ebx,0xc0020200
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 e0 01 02 c0       	mov    eax,0xc00201e0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 f0 01 02 c0       	mov    eax,0xc00201f0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 92 01 02 c0       	mov    edx,0xc0020192
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 9e 01 02 c0       	mov    edx,0xc002019e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba b2 01 02 c0       	mov    edx,0xc00201b2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c e0 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc00205e0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 e0 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc00205e0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 e0 03 02 c0       	mov    eax,0xc00203e0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 20 03 02 c0       	mov    eax,0xc0020320
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 e0 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfd20]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 e0 06 02 c0       	push   0xc00206e0
c000611b:	e8 54 3f 01 00       	call   c001a074 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ee 06 02 c0       	push   0xc00206ee
c0006153:	e8 1c 3f 01 00       	call   c001a074 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 85 3e 01 00       	call   c001a018 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 fd 06 02 c0       	push   0xc00206fd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 00 07 02 c0       	push   0xc0020700
c0006812:	e8 5d 38 01 00       	call   c001a074 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 71 38 01 00       	call   c001a090 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 05 07 02 c0 	mov    DWORD PTR [esp],0xc0020705
c000682c:	e8 43 38 01 00       	call   c001a074 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 53 38 01 00       	call   c001a090 <iso_kprintfd>
c000683d:	c7 04 24 0b 07 02 c0 	mov    DWORD PTR [esp],0xc002070b
c0006844:	e8 2b 38 01 00       	call   c001a074 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 3b 38 01 00       	call   c001a090 <iso_kprintfd>
c0006855:	c7 04 24 11 07 02 c0 	mov    DWORD PTR [esp],0xc0020711
c000685c:	e8 13 38 01 00       	call   c001a074 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 23 38 01 00       	call   c001a090 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 fd 06 02 c0       	push   0xc00206fd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 1a 07 02 c0       	push   0xc002071a
c0006a31:	e8 3e 36 01 00       	call   c001a074 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 25 07 02 c0       	push   0xc0020725
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 2c 07 02 c0       	push   0xc002072c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 33 07 02 c0       	push   0xc0020733
c0006b48:	e8 27 35 01 00       	call   c001a074 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 3e 07 02 c0       	push   0xc002073e
c0006b63:	e8 0c 35 01 00       	call   c001a074 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 2a 9f 00 00       	call   c0010b9c <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 c3 5b 00 00       	call   c000c844 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 4f 07 02 c0       	push   0xc002074f
c0006cb2:	e8 c4 9f 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 68 07 02 c0       	push   0xc0020768
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 b9 eb 00 00       	call   c0015898 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 c8 ed 00 00       	call   c0015abc <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 a4 65 01 c0       	push   0xc00165a4
c0006d03:	52                   	push   edx
c0006d04:	e8 b3 ed 00 00       	call   c0015abc <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d11:	68 64 08 02 c0       	push   0xc0020864
c0006d16:	e8 60 9f 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d22:	e8 e3 a7 00 00       	call   c001150a <KeInitRand()>
c0006d27:	e8 9b fc 00 00       	call   c00169c7 <Vm::initialise8086()>
c0006d2c:	e8 8b 48 00 00       	call   c000b5bc <Fs::initVFS()>
c0006d31:	c7 04 24 75 07 02 c0 	mov    DWORD PTR [esp],0xc0020775
c0006d38:	e8 3e 9f 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 64 08 02 c0       	push   0xc0020864
c0006d5c:	e8 1a 9f 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c0006d61:	e8 34 45 00 00       	call   c000b29a <KeInitialiseSymlinks()>
c0006d66:	e8 49 a4 00 00       	call   c00111b4 <KeLoadSystemEnv()>
c0006d6b:	e8 a6 a6 00 00       	call   c0011416 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 8f 07 02 c0       	push   0xc002078f
c0006d7a:	68 98 07 02 c0       	push   0xc0020798
c0006d7f:	e8 32 cd 00 00       	call   c0013ab6 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 18 54 00 00       	call   c000c1a4 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 88 08 02 c0 	mov    DWORD PTR [esp],0xc0020888
c0006d93:	e8 e3 9e 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 98 5a 00 00       	call   c000c842 <Device::loadDriversForAll()>
c0006daa:	c7 04 24 a0 07 02 c0 	mov    DWORD PTR [esp],0xc00207a0
c0006db1:	e8 c5 9e 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 b1 07 02 c0       	push   0xc00207b1
c0006dc5:	e8 e2 e4 00 00       	call   c00152ac <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 09 e7 00 00       	call   c00154dc <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 40 f1 00 00       	call   c0015f20 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 cd 07 02 c0       	push   0xc00207cd
c0006df5:	50                   	push   eax
c0006df6:	e8 c3 5a 00 00       	call   c000c8be <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba d4 08 02 c0       	mov    edx,0xc00208d4
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 51 81 01 00       	call   c001f046 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 81 91 00 00       	call   c00100b4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 5a 91 00 00       	call   c00100b4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 38 91 00 00       	call   c00100b4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 16 91 00 00       	call   c00100b4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 23 90 00 00       	call   c0010030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 fe 8f 00 00       	call   c0010030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 b0 7f 01 00       	call   c001f000 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 fe 7b 01 00       	call   c001ec70 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 14 90 00 00       	call   c00100b4 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 d6 07 02 c0       	push   0xc00207d6
c00070e2:	e8 6a a2 00 00       	call   c0011351 <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 dc 07 02 c0       	push   0xc00207dc
c000711e:	e8 2e a2 00 00       	call   c0011351 <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 65 89 00 00       	jmp    c000fad0 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071be:	68 e2 07 02 c0       	push   0xc00207e2
c00071c3:	0f 94 05 e0 31 02 c0 	sete   BYTE PTR ds:0xc00231e0
c00071ca:	e8 ac 9a 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 5f 84 00 00       	call   c000f644 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 32 55 00 00       	call   c000c726 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 fa 07 02 c0 	mov    DWORD PTR [esp],0xc00207fa
c000720d:	e8 69 9a 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 44 8f 00 00       	call   c001016c <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 ef 54 00 00       	call   c000c726 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 a8 08 02 c0       	push   0xc00208a8
c0007254:	e8 22 9a 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c0007259:	e8 a5 09 01 00       	call   c0017c03 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 14 08 02 c0 	mov    DWORD PTR [esp],0xc0020814
c0007265:	e8 11 9a 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 72 e9 00 00       	call   c0015be8 <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 2f 08 02 c0       	push   0xc002082f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 40 08 02 c0       	push   0xc0020840
c00072ed:	e8 5f a0 00 00       	call   c0011351 <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 4d 08 02 c0       	push   0xc002084d
c0007302:	e8 4a a0 00 00       	call   c0011351 <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 57 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020857
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 30 a0 00 00       	jmp    c0011351 <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 bc 03 01 00       	call   c00178cf <HalSystemIdle()>
c0007513:	e8 ea 80 01 00       	call   c001f602 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 00 ed 01 c0       	push   0xc001ed00
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 10 ed 01 c0       	push   0xc001ed10
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 1a ed 01 c0       	push   0xc001ed1a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 24 ed 01 c0       	push   0xc001ed24
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 2e ed 01 c0       	push   0xc001ed2e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 38 ed 01 c0       	push   0xc001ed38
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 42 ed 01 c0       	push   0xc001ed42
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 4c ed 01 c0       	push   0xc001ed4c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 56 ed 01 c0       	push   0xc001ed56
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 5e ed 01 c0       	push   0xc001ed5e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 68 ed 01 c0       	push   0xc001ed68
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 70 ed 01 c0       	push   0xc001ed70
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 78 ed 01 c0       	push   0xc001ed78
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 80 ed 01 c0       	push   0xc001ed80
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 9a ed 01 c0       	push   0xc001ed9a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 a2 ed 01 c0       	push   0xc001eda2
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 ac ed 01 c0       	push   0xc001edac
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 b6 ed 01 c0       	push   0xc001edb6
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 c0 ed 01 c0       	push   0xc001edc0
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 5a ee 01 c0       	push   0xc001ee5a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 61 ee 01 c0       	push   0xc001ee61
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 4c ee 01 c0       	push   0xc001ee4c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 53 ee 01 c0       	push   0xc001ee53
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 ca ed 01 c0       	push   0xc001edca
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 d4 ed 01 c0       	push   0xc001edd4
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 de ed 01 c0       	push   0xc001edde
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 e8 ed 01 c0       	push   0xc001ede8
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 f2 ed 01 c0       	push   0xc001edf2
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 fc ed 01 c0       	push   0xc001edfc
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 06 ee 01 c0       	push   0xc001ee06
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 10 ee 01 c0       	push   0xc001ee10
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 1a ee 01 c0       	push   0xc001ee1a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 24 ee 01 c0       	push   0xc001ee24
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 2e ee 01 c0       	push   0xc001ee2e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 38 ee 01 c0       	push   0xc001ee38
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 42 ee 01 c0       	push   0xc001ee42
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 9c ef 01 c0       	push   0xc001ef9c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 a6 ef 01 c0       	push   0xc001efa6
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 b0 ef 01 c0       	push   0xc001efb0
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 ba ef 01 c0       	push   0xc001efba
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 c4 ef 01 c0       	push   0xc001efc4
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 ce ef 01 c0       	push   0xc001efce
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 d8 ef 01 c0       	push   0xc001efd8
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 e2 ef 01 c0       	push   0xc001efe2
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 56 ed 01 c0       	push   0xc001ed56
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 d4 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231d4
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d d4 31 02 c0    	mov    edi,DWORD PTR ds:0xc00231d4
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 d4 31 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00231d4,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 d4 31 02 c0       	mov    eax,ds:0xc00231d4
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 f8 08 02 c0       	push   0xc00208f8
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 28 09 02 c0       	push   0xc0020928
c0007a27:	e8 25 99 00 00       	call   c0011351 <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 2d 09 02 c0       	push   0xc002092d
c0007a3d:	e8 0f 99 00 00       	call   c0011351 <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 34 09 02 c0       	push   0xc0020934
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 96 90 00 00       	call   c0010bff <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 bf 8f 00 00       	call   c0010b49 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 fa 79 01 00       	call   c001f59a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 4c 09 02 c0       	push   0xc002094c
c0007c31:	e8 1b 97 00 00       	call   c0011351 <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 4c 09 02 c0       	push   0xc002094c
c0007ca2:	e8 aa 96 00 00       	call   c0011351 <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 d8 31 02 c0    	mov    esi,DWORD PTR ds:0xc00231d8
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d d8 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231d8
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 d8 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231d8
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 f1 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc00209f1
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 a4 95 00 00       	jmp    c0011351 <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 74 09 02 c0       	push   0xc0020974
c0007e31:	e8 1b 95 00 00       	call   c0011351 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 07 0a 02 c0       	push   0xc0020a07
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 a4 09 02 c0       	push   0xc00209a4
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 c8 09 02 c0       	push   0xc00209c8
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 2d 0a 02 c0       	push   0xc0020a2d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 1f 0a 02 c0       	push   0xc0020a1f
c000813c:	e8 10 92 00 00       	call   c0011351 <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 8c 0a 02 c0       	mov    edx,0xc0020a8c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 49 0a 02 c0       	push   0xc0020a49
c0008311:	e8 3b 90 00 00       	call   c0011351 <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000835a:	e8 ad d9 00 00       	call   c0015d0c <schedule()>
c000835f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 89 70 01 00       	call   c001f480 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 66 0a 02 c0       	push   0xc0020a66
c000840c:	e8 40 8f 00 00       	call   c0011351 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 8c 0a 02 c0       	mov    edx,0xc0020a8c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba d4 0a 02 c0       	mov    edx,0xc0020ad4
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 0a 51 00 00       	call   c000d600 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 a8 05 01 00       	call   c0018ac4 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 00 32 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdce00]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 00 32 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdce00]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 b8 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf48]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 90 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf70]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 da 02 01 00       	call   c0018958 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 37 03 01 00       	jmp    c0018a60 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 a0 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020aa0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 db 8b 00 00       	jmp    c0011351 <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 78 38 00 00       	jmp    c000c14b <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be ae 0a 02 c0       	mov    esi,0xc0020aae
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 3e fe 00 00       	call   c0018a60 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba d4 0a 02 c0       	mov    edx,0xc0020ad4
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 bf 0a 02 c0       	push   0xc0020abf
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 c5 0a 02 c0       	push   0xc0020ac5
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 9c 0b 02 c0       	mov    edx,0xc0020b9c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 40 32 02 c0       	mov    eax,ds:0xc0023240
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 40 32 02 c0    	mov    DWORD PTR ds:0xc0023240,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 67 64 01 00       	call   c001f668 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba b8 0b 02 c0       	mov    edx,0xc0020bb8
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 9c 0b 02 c0       	mov    edx,0xc0020b9c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 67 63 01 00       	call   c001f73c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 5b 63 01 00       	call   c001f744 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 61 62 01 00       	call   c001f668 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 74 0b 02 c0       	push   0xc0020b74
c000942c:	e8 20 7f 00 00       	call   c0011351 <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba b8 0b 02 c0       	mov    edx,0xc0020bb8
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 66 62 01 00       	call   c001f73c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 f3 62 01 00       	call   c001f7e6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 b1 60 01 00       	call   c001f626 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 d0 31 02 c0       	push   0xc00231d0
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 24 f6 01 c0       	push   0xc001f624
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 48 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023248
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 48 32 02 c0    	mov    ecx,DWORD PTR ds:0xc0023248
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 44 32 02 c0    	mov    esi,DWORD PTR ds:0xc0023244
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 44 32 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023244,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 44 32 02 c0    	mov    DWORD PTR ds:0xc0023244,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 cc 0b 02 c0       	push   0xc0020bcc
c0009689:	e8 c3 7c 00 00       	call   c0011351 <KePanic(char const*)>
c000968e:	8b 35 44 32 02 c0    	mov    esi,DWORD PTR ds:0xc0023244
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 44 32 02 c0    	mov    DWORD PTR ds:0xc0023244,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 44 32 02 c0       	mov    eax,ds:0xc0023244
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 44 32 02 c0    	mov    DWORD PTR ds:0xc0023244,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 44 32 02 c0       	mov    ds:0xc0023244,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 4c 32 02 c0    	mov    edx,DWORD PTR ds:0xc002324c
c000975f:	8b 0d 54 32 02 c0    	mov    ecx,DWORD PTR ds:0xc0023254
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 4c 32 02 c0    	mov    ecx,DWORD PTR ds:0xc002324c
c000977a:	a1 50 32 02 c0       	mov    eax,ds:0xc0023250
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 50 32 02 c0    	cmp    DWORD PTR ds:0xc0023250,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 60 0e 02 c0       	push   0xc0020e60
c00097c0:	e8 8c 7b 00 00       	call   c0011351 <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 77 0e 02 c0       	push   0xc0020e77
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 50 32 02 c0    	mov    DWORD PTR ds:0xc0023250,ebx
c0009864:	c6 05 58 32 02 c0 43 	mov    BYTE PTR ds:0xc0023258,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 54 32 02 c0       	mov    ds:0xc0023254,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 4c 32 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002324c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 50 32 02 c0       	mov    eax,ds:0xc0023250
c0009896:	f7 35 4c 32 02 c0    	div    DWORD PTR ds:0xc002324c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 ec 0b 02 c0       	push   0xc0020bec
c00098d1:	e8 7b 7a 00 00       	call   c0011351 <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 8e 0e 02 c0       	push   0xc0020e8e
c00099a3:	e8 a9 79 00 00       	call   c0011351 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 10 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020c10
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 46 79 00 00       	jmp    c0011351 <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 aa 0e 02 c0       	push   0xc0020eaa
c0009a18:	e8 34 79 00 00       	call   c0011351 <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 c6 0e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020ec6
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 ea 78 00 00       	jmp    c0011351 <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 34 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020c34
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009d10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 58 0c 02 c0       	push   0xc0020c58
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 c0 0c 02 c0       	push   0xc0020cc0
c0009dad:	e8 9f 75 00 00       	call   c0011351 <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 e4 0c 02 c0       	push   0xc0020ce4
c0009e99:	e8 b3 74 00 00       	call   c0011351 <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 10 0d 02 c0       	push   0xc0020d10
c0009fed:	e8 5f 73 00 00       	call   c0011351 <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 96 27 00 00       	call   c000c9ba <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 e0 0e 02 c0       	push   0xc0020ee0
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 4c 32 02 c0       	mov    eax,ds:0xc002324c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 58 32 02 c0 	movsx  eax,BYTE PTR ds:0xc0023258
c000a2fd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a304:	50                   	push   eax
c000a305:	e8 6a 38 00 00       	call   c000db74 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 4c 32 02 c0    	cmp    DWORD PTR ds:0xc002324c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 34 0d 02 c0       	push   0xc0020d34
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 ee 0e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020eee
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 11 0f 02 c0       	push   0xc0020f11
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 ff 0e 02 c0       	push   0xc0020eff
c000a3db:	e8 71 6f 00 00       	call   c0011351 <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 11 0f 02 c0       	push   0xc0020f11
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 4c 32 02 c0    	mov    edx,DWORD PTR ds:0xc002324c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 58 32 02 c0 	movsx  eax,BYTE PTR ds:0xc0023258
c000a47a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a481:	50                   	push   eax
c000a482:	e8 81 36 00 00       	call   c000db08 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 4c 32 02 c0    	cmp    DWORD PTR ds:0xc002324c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 24 0f 02 c0       	push   0xc0020f24
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 64 0d 02 c0       	push   0xc0020d64
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 84 0d 02 c0       	push   0xc0020d84
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 e4 0d 02 c0 	mov    DWORD PTR [esp],0xc0020de4
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 39 0f 02 c0       	push   0xc0020f39
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 4d 0f 02 c0       	push   0xc0020f4d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 60 0f 02 c0       	push   0xc0020f60
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 6d 0f 02 c0       	push   0xc0020f6d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 86 0f 02 c0       	push   0xc0020f86
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 86 0f 02 c0       	push   0xc0020f86
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 8e 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f8e
c000a7f8:	e8 54 6b 00 00       	call   c0011351 <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 a6 0f 02 c0       	push   0xc0020fa6
c000a80a:	e8 42 6b 00 00       	call   c0011351 <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be af 0a 02 c0       	mov    esi,0xc0020aaf
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 ae 0a 02 c0       	mov    al,ds:0xc0020aae
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 bc 0f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf044]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 0c 11 02 c0       	push   0xc002110c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 20 11 02 c0       	push   0xc0021120
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 2a 11 02 c0       	push   0xc002112a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 34 11 02 c0       	push   0xc0021134
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 78 12 02 c0       	push   0xc0021278
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 3e 11 02 c0       	push   0xc002113e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 98 12 02 c0       	push   0xc0021298
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 53 11 02 c0       	push   0xc0021153
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 6d 11 02 c0       	push   0xc002116d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 60 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcda0]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 c0 12 02 c0       	push   0xc00212c0
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 78 12 02 c0       	push   0xc0021278
c000abb4:	e8 98 67 00 00       	call   c0011351 <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 08 13 02 c0       	push   0xc0021308
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 08 13 02 c0       	push   0xc0021308
c000abe3:	e8 69 67 00 00       	call   c0011351 <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 78 11 02 c0       	push   0xc0021178
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 78 11 02 c0       	push   0xc0021178
c000ac0f:	e8 3d 67 00 00       	call   c0011351 <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 95 11 02 c0       	push   0xc0021195
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 95 11 02 c0       	push   0xc0021195
c000ac3b:	e8 11 67 00 00       	call   c0011351 <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 28 13 02 c0       	push   0xc0021328
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 28 13 02 c0       	push   0xc0021328
c000ac67:	e8 e5 66 00 00       	call   c0011351 <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 4c 13 02 c0       	push   0xc002134c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 4c 13 02 c0       	push   0xc002134c
c000ac93:	e8 b9 66 00 00       	call   c0011351 <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 b1 11 02 c0       	push   0xc00211b1
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 b1 11 02 c0       	push   0xc00211b1
c000acbf:	e8 8d 66 00 00       	call   c0011351 <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 cd 11 02 c0       	push   0xc00211cd
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 cd 11 02 c0       	push   0xc00211cd
c000aceb:	e8 61 66 00 00       	call   c0011351 <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 6c 13 02 c0       	push   0xc002136c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 6c 13 02 c0       	push   0xc002136c
c000ad17:	e8 35 66 00 00       	call   c0011351 <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 90 13 02 c0       	push   0xc0021390
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 90 13 02 c0       	push   0xc0021390
c000ad43:	e8 09 66 00 00       	call   c0011351 <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateSymlinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 41 67 00 00       	call   c001149f <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateSymlinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 af 13 02 c0       	push   0xc00213af
c000ad97:	e8 b5 65 00 00       	call   c0011351 <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateSymlinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateSymlinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	6a 01                	push   0x1
c000adce:	89 c3                	mov    ebx,eax
c000add0:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000add6:	68 b8 13 02 c0       	push   0xc00213b8
c000addb:	50                   	push   eax
c000addc:	e8 0f 0a 00 00       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c000ade1:	83 c4 20             	add    esp,0x20
c000ade4:	85 db                	test   ebx,ebx
c000ade6:	75 10                	jne    c000adf8 <KiFlushSymlinkChanges()+0x3b>
c000ade8:	83 ec 0c             	sub    esp,0xc
c000adeb:	68 d6 13 02 c0       	push   0xc00213d6
c000adf0:	e8 5c 65 00 00       	call   c0011351 <KePanic(char const*)>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	50                   	push   eax
c000adf9:	50                   	push   eax
c000adfa:	6a 06                	push   0x6
c000adfc:	53                   	push   ebx
c000adfd:	e8 cc 0a 00 00       	call   c000b8ce <File::open(FileOpenMode)>
c000ae02:	83 c4 10             	add    esp,0x10
c000ae05:	85 c0                	test   eax,eax
c000ae07:	74 10                	je     c000ae19 <KiFlushSymlinkChanges()+0x5c>
c000ae09:	83 ec 0c             	sub    esp,0xc
c000ae0c:	68 f0 13 02 c0       	push   0xc00213f0
c000ae11:	e8 3b 65 00 00       	call   c0011351 <KePanic(char const*)>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	31 f6                	xor    esi,esi
c000ae1b:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae21:	7e 40                	jle    c000ae63 <KiFlushSymlinkChanges()+0xa6>
c000ae23:	83 ec 0c             	sub    esp,0xc
c000ae26:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae28:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2c:	50                   	push   eax
c000ae2d:	89 f0                	mov    eax,esi
c000ae2f:	c1 e0 08             	shl    eax,0x8
c000ae32:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae37:	50                   	push   eax
c000ae38:	6a 00                	push   0x0
c000ae3a:	68 00 01 00 00       	push   0x100
c000ae3f:	53                   	push   ebx
c000ae40:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae43:	83 c4 20             	add    esp,0x20
c000ae46:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4e:	74 10                	je     c000ae60 <KiFlushSymlinkChanges()+0xa3>
c000ae50:	83 ec 0c             	sub    esp,0xc
c000ae53:	68 0a 14 02 c0       	push   0xc002140a
c000ae58:	e8 f4 64 00 00       	call   c0011351 <KePanic(char const*)>
c000ae5d:	83 c4 10             	add    esp,0x10
c000ae60:	46                   	inc    esi
c000ae61:	eb b8                	jmp    c000ae1b <KiFlushSymlinkChanges()+0x5e>
c000ae63:	83 ec 0c             	sub    esp,0xc
c000ae66:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae70:	53                   	push   ebx
c000ae71:	e8 b6 0a 00 00       	call   c000b92c <File::close()>
c000ae76:	83 c4 10             	add    esp,0x10
c000ae79:	85 db                	test   ebx,ebx
c000ae7b:	74 0c                	je     c000ae89 <KiFlushSymlinkChanges()+0xcc>
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae82:	53                   	push   ebx
c000ae83:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae86:	83 c4 10             	add    esp,0x10
c000ae89:	83 c4 14             	add    esp,0x14
c000ae8c:	5b                   	pop    ebx
c000ae8d:	5e                   	pop    esi
c000ae8e:	c3                   	ret    

c000ae8f <KiDeinitialiseSymlinks(void*)>:
c000ae8f:	e9 29 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae94 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae94:	53                   	push   ebx
c000ae95:	83 ec 0c             	sub    esp,0xc
c000ae98:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea4:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aea9:	68 00 01 00 00       	push   0x100
c000aeae:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb5:	6a 00                	push   0x0
c000aeb7:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebe:	c1 e0 08             	shl    eax,0x8
c000aec1:	05 00 60 02 c0       	add    eax,0xc0026000
c000aec6:	50                   	push   eax
c000aec7:	e8 24 56 ff ff       	call   c00004f0 <memset>
c000aecc:	58                   	pop    eax
c000aecd:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed2:	5a                   	pop    edx
c000aed3:	c1 e0 08             	shl    eax,0x8
c000aed6:	53                   	push   ebx
c000aed7:	05 00 60 02 c0       	add    eax,0xc0026000
c000aedc:	50                   	push   eax
c000aedd:	e8 5e 57 ff ff       	call   c0000640 <strcpy>
c000aee2:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee7:	83 c4 10             	add    esp,0x10
c000aeea:	40                   	inc    eax
c000aeeb:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef0:	83 f8 03             	cmp    eax,0x3
c000aef3:	7e 09                	jle    c000aefe <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef5:	83 c4 08             	add    esp,0x8
c000aef8:	5b                   	pop    ebx
c000aef9:	e9 bf fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aefe:	83 c4 08             	add    esp,0x8
c000af01:	5b                   	pop    ebx
c000af02:	c3                   	ret    

c000af03 <KiIsSymlinkRegistered(char const*)>:
c000af03:	53                   	push   ebx
c000af04:	31 db                	xor    ebx,ebx
c000af06:	83 ec 08             	sub    esp,0x8
c000af09:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000af0f:	7e 30                	jle    c000af41 <KiIsSymlinkRegistered(char const*)+0x3e>
c000af11:	50                   	push   eax
c000af12:	50                   	push   eax
c000af13:	89 d8                	mov    eax,ebx
c000af15:	c1 e0 08             	shl    eax,0x8
c000af18:	05 00 60 02 c0       	add    eax,0xc0026000
c000af1d:	50                   	push   eax
c000af1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af22:	e8 29 58 ff ff       	call   c0000750 <strcmp>
c000af27:	83 c4 10             	add    esp,0x10
c000af2a:	85 c0                	test   eax,eax
c000af2c:	75 10                	jne    c000af3e <KiIsSymlinkRegistered(char const*)+0x3b>
c000af2e:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000af35:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000af3c:	eb 07                	jmp    c000af45 <KiIsSymlinkRegistered(char const*)+0x42>
c000af3e:	43                   	inc    ebx
c000af3f:	eb c8                	jmp    c000af09 <KiIsSymlinkRegistered(char const*)+0x6>
c000af41:	31 c0                	xor    eax,eax
c000af43:	31 d2                	xor    edx,edx
c000af45:	83 c4 08             	add    esp,0x8
c000af48:	5b                   	pop    ebx
c000af49:	c3                   	ret    

c000af4a <KeDereferenceSymlink(char const*, char*)>:
c000af4a:	55                   	push   ebp
c000af4b:	57                   	push   edi
c000af4c:	56                   	push   esi
c000af4d:	53                   	push   ebx
c000af4e:	83 ec 44             	sub    esp,0x44
c000af51:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af55:	56                   	push   esi
c000af56:	68 24 14 02 c0       	push   0xc0021424
c000af5b:	e8 e5 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af60:	89 34 24             	mov    DWORD PTR [esp],esi
c000af63:	e8 9b ff ff ff       	call   c000af03 <KiIsSymlinkRegistered(char const*)>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 c7                	mov    edi,eax
c000af6d:	89 d0                	mov    eax,edx
c000af6f:	09 f8                	or     eax,edi
c000af71:	0f 84 dd 01 00 00    	je     c000b154 <KeDereferenceSymlink(char const*, char*)+0x20a>
c000af77:	89 d5                	mov    ebp,edx
c000af79:	53                   	push   ebx
c000af7a:	53                   	push   ebx
c000af7b:	57                   	push   edi
c000af7c:	68 3e 14 02 c0       	push   0xc002143e
c000af81:	e8 bf f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af86:	58                   	pop    eax
c000af87:	5a                   	pop    edx
c000af88:	55                   	push   ebp
c000af89:	68 4c 14 02 c0       	push   0xc002144c
c000af8e:	e8 b2 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af93:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af9a:	e8 17 cb ff ff       	call   c0007ab6 <malloc>
c000af9f:	6a 01                	push   0x1
c000afa1:	89 c3                	mov    ebx,eax
c000afa3:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000afa9:	56                   	push   esi
c000afaa:	50                   	push   eax
c000afab:	e8 40 08 00 00       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c000afb0:	83 c4 20             	add    esp,0x20
c000afb3:	85 db                	test   ebx,ebx
c000afb5:	0f 84 68 01 00 00    	je     c000b123 <KeDereferenceSymlink(char const*, char*)+0x1d9>
c000afbb:	83 ec 0c             	sub    esp,0xc
c000afbe:	68 40 20 02 c0       	push   0xc0022040
c000afc3:	e8 7d f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000afc8:	5a                   	pop    edx
c000afc9:	59                   	pop    ecx
c000afca:	6a 01                	push   0x1
c000afcc:	53                   	push   ebx
c000afcd:	e8 fc 08 00 00       	call   c000b8ce <File::open(FileOpenMode)>
c000afd2:	83 c4 10             	add    esp,0x10
c000afd5:	85 c0                	test   eax,eax
c000afd7:	74 0b                	je     c000afe4 <KeDereferenceSymlink(char const*, char*)+0x9a>
c000afd9:	83 ec 0c             	sub    esp,0xc
c000afdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afde:	53                   	push   ebx
c000afdf:	e9 39 01 00 00       	jmp    c000b11d <KeDereferenceSymlink(char const*, char*)+0x1d3>
c000afe4:	83 ec 0c             	sub    esp,0xc
c000afe7:	68 46 0a 02 c0       	push   0xc0020a46
c000afec:	e8 54 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aff1:	58                   	pop    eax
c000aff2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000aff8:	56                   	push   esi
c000aff9:	8d 54 24 37          	lea    edx,[esp+0x37]
c000affd:	52                   	push   edx
c000affe:	6a 00                	push   0x0
c000b000:	6a 08                	push   0x8
c000b002:	53                   	push   ebx
c000b003:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b006:	83 c4 20             	add    esp,0x20
c000b009:	85 c0                	test   eax,eax
c000b00b:	0f 85 fe 00 00 00    	jne    c000b10f <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b011:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b016:	0f 85 f3 00 00 00    	jne    c000b10f <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b01c:	83 ec 0c             	sub    esp,0xc
c000b01f:	68 72 20 02 c0       	push   0xc0022072
c000b024:	e8 1c f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b029:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b02b:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b02f:	89 34 24             	mov    DWORD PTR [esp],esi
c000b032:	52                   	push   edx
c000b033:	6a 00                	push   0x0
c000b035:	6a 08                	push   0x8
c000b037:	53                   	push   ebx
c000b038:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b03b:	83 c4 20             	add    esp,0x20
c000b03e:	85 c0                	test   eax,eax
c000b040:	0f 85 c9 00 00 00    	jne    c000b10f <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b046:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b04b:	0f 85 be 00 00 00    	jne    c000b10f <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b051:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b055:	0f 85 f9 00 00 00    	jne    c000b154 <KeDereferenceSymlink(char const*, char*)+0x20a>
c000b05b:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b05f:	0f 85 ef 00 00 00    	jne    c000b154 <KeDereferenceSymlink(char const*, char*)+0x20a>
c000b065:	83 ec 0c             	sub    esp,0xc
c000b068:	68 5a 14 02 c0       	push   0xc002145a
c000b06d:	e8 d3 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b072:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b07a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b082:	83 c4 0c             	add    esp,0xc
c000b085:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b089:	50                   	push   eax
c000b08a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b08e:	50                   	push   eax
c000b08f:	53                   	push   ebx
c000b090:	e8 3b 0b 00 00       	call   c000bbd0 <File::stat(unsigned long long*, bool*)>
c000b095:	83 c4 10             	add    esp,0x10
c000b098:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b09d:	75 70                	jne    c000b10f <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b09f:	31 ff                	xor    edi,edi
c000b0a1:	b8 0f 00 00 00       	mov    eax,0xf
c000b0a6:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0aa:	89 f8                	mov    eax,edi
c000b0ac:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b0b0:	73 5d                	jae    c000b10f <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b0b2:	83 ec 0c             	sub    esp,0xc
c000b0b5:	68 5a 14 02 c0       	push   0xc002145a
c000b0ba:	e8 86 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b0bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b0c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b0c7:	83 c0 f0             	add    eax,0xfffffff0
c000b0ca:	b9 ff 00 00 00       	mov    ecx,0xff
c000b0cf:	83 d2 ff             	adc    edx,0xffffffff
c000b0d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0da:	83 c4 10             	add    esp,0x10
c000b0dd:	39 c1                	cmp    ecx,eax
c000b0df:	19 d7                	sbb    edi,edx
c000b0e1:	72 40                	jb     c000b123 <KeDereferenceSymlink(char const*, char*)+0x1d9>
c000b0e3:	83 ec 0c             	sub    esp,0xc
c000b0e6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0e8:	56                   	push   esi
c000b0e9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0ed:	52                   	push   edx
c000b0ee:	50                   	push   eax
c000b0ef:	53                   	push   ebx
c000b0f0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0f3:	83 c4 20             	add    esp,0x20
c000b0f6:	85 c0                	test   eax,eax
c000b0f8:	75 15                	jne    c000b10f <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b0fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0fe:	89 c7                	mov    edi,eax
c000b100:	c1 ff 1f             	sar    edi,0x1f
c000b103:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b107:	75 06                	jne    c000b10f <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b109:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b10d:	74 19                	je     c000b128 <KeDereferenceSymlink(char const*, char*)+0x1de>
c000b10f:	83 ec 0c             	sub    esp,0xc
c000b112:	53                   	push   ebx
c000b113:	e8 14 08 00 00       	call   c000b92c <File::close()>
c000b118:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b11a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b11d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b120:	83 c4 10             	add    esp,0x10
c000b123:	83 c8 ff             	or     eax,0xffffffff
c000b126:	eb 2e                	jmp    c000b156 <KeDereferenceSymlink(char const*, char*)+0x20c>
c000b128:	83 ec 0c             	sub    esp,0xc
c000b12b:	68 52 2b 02 c0       	push   0xc0022b52
c000b130:	e8 10 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b135:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b138:	e8 ef 07 00 00       	call   c000b92c <File::close()>
c000b13d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b13f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b142:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b145:	c7 04 24 5d 14 02 c0 	mov    DWORD PTR [esp],0xc002145d
c000b14c:	e8 f4 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b151:	83 c4 10             	add    esp,0x10
c000b154:	31 c0                	xor    eax,eax
c000b156:	83 c4 3c             	add    esp,0x3c
c000b159:	5b                   	pop    ebx
c000b15a:	5e                   	pop    esi
c000b15b:	5f                   	pop    edi
c000b15c:	5d                   	pop    ebp
c000b15d:	c3                   	ret    

c000b15e <KeCreateSymlink(char const*, char const*)>:
c000b15e:	55                   	push   ebp
c000b15f:	57                   	push   edi
c000b160:	56                   	push   esi
c000b161:	53                   	push   ebx
c000b162:	83 ec 38             	sub    esp,0x38
c000b165:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b169:	68 14 01 00 00       	push   0x114
c000b16e:	e8 43 c9 ff ff       	call   c0007ab6 <malloc>
c000b173:	6a 00                	push   0x0
c000b175:	89 c3                	mov    ebx,eax
c000b177:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b17d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b181:	50                   	push   eax
c000b182:	e8 69 06 00 00       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c000b187:	83 c4 20             	add    esp,0x20
c000b18a:	b8 01 00 00 00       	mov    eax,0x1
c000b18f:	85 db                	test   ebx,ebx
c000b191:	0f 84 fb 00 00 00    	je     c000b292 <KeCreateSymlink(char const*, char const*)+0x134>
c000b197:	52                   	push   edx
c000b198:	52                   	push   edx
c000b199:	6a 12                	push   0x12
c000b19b:	53                   	push   ebx
c000b19c:	e8 2d 07 00 00       	call   c000b8ce <File::open(FileOpenMode)>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	85 c0                	test   eax,eax
c000b1a6:	74 0b                	je     c000b1b3 <KeCreateSymlink(char const*, char const*)+0x55>
c000b1a8:	83 ec 0c             	sub    esp,0xc
c000b1ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1ad:	53                   	push   ebx
c000b1ae:	e9 d4 00 00 00       	jmp    c000b287 <KeCreateSymlink(char const*, char const*)+0x129>
c000b1b3:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b1b7:	be 60 14 02 c0       	mov    esi,0xc0021460
c000b1bc:	b9 09 00 00 00       	mov    ecx,0x9
c000b1c1:	fc                   	cld    
c000b1c2:	83 ec 0c             	sub    esp,0xc
c000b1c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b1c7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b1cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1cd:	56                   	push   esi
c000b1ce:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b1d2:	52                   	push   edx
c000b1d3:	6a 00                	push   0x0
c000b1d5:	6a 08                	push   0x8
c000b1d7:	53                   	push   ebx
c000b1d8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1db:	83 c4 20             	add    esp,0x20
c000b1de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1e3:	0f 85 90 00 00 00    	jne    c000b279 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1e9:	85 c0                	test   eax,eax
c000b1eb:	0f 85 88 00 00 00    	jne    c000b279 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1f1:	e8 5a fb ff ff       	call   c000ad50 <KiCreateSymlinkID()>
c000b1f6:	83 ec 0c             	sub    esp,0xc
c000b1f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b201:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b203:	56                   	push   esi
c000b204:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b208:	52                   	push   edx
c000b209:	6a 00                	push   0x0
c000b20b:	6a 08                	push   0x8
c000b20d:	53                   	push   ebx
c000b20e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b211:	83 c4 20             	add    esp,0x20
c000b214:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b219:	75 5e                	jne    c000b279 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b21b:	85 c0                	test   eax,eax
c000b21d:	75 5a                	jne    c000b279 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b21f:	83 ec 0c             	sub    esp,0xc
c000b222:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b224:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b227:	55                   	push   ebp
c000b228:	e8 43 53 ff ff       	call   c0000570 <strlen>
c000b22d:	89 34 24             	mov    DWORD PTR [esp],esi
c000b230:	31 d2                	xor    edx,edx
c000b232:	55                   	push   ebp
c000b233:	52                   	push   edx
c000b234:	50                   	push   eax
c000b235:	53                   	push   ebx
c000b236:	ff d7                	call   edi
c000b238:	83 c4 14             	add    esp,0x14
c000b23b:	89 c6                	mov    esi,eax
c000b23d:	55                   	push   ebp
c000b23e:	e8 2d 53 ff ff       	call   c0000570 <strlen>
c000b243:	83 c4 10             	add    esp,0x10
c000b246:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b24a:	75 2d                	jne    c000b279 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b24c:	85 f6                	test   esi,esi
c000b24e:	75 29                	jne    c000b279 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b250:	50                   	push   eax
c000b251:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b255:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b259:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b25d:	e8 32 fc ff ff       	call   c000ae94 <KeRegisterSymlink(char const*, unsigned long long)>
c000b262:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b265:	e8 c2 06 00 00       	call   c000b92c <File::close()>
c000b26a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b26c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b26f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b272:	83 c4 10             	add    esp,0x10
c000b275:	31 c0                	xor    eax,eax
c000b277:	eb 19                	jmp    c000b292 <KeCreateSymlink(char const*, char const*)+0x134>
c000b279:	83 ec 0c             	sub    esp,0xc
c000b27c:	53                   	push   ebx
c000b27d:	e8 aa 06 00 00       	call   c000b92c <File::close()>
c000b282:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b284:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b287:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b28a:	83 c4 10             	add    esp,0x10
c000b28d:	b8 01 00 00 00       	mov    eax,0x1
c000b292:	83 c4 2c             	add    esp,0x2c
c000b295:	5b                   	pop    ebx
c000b296:	5e                   	pop    esi
c000b297:	5f                   	pop    edi
c000b298:	5d                   	pop    ebp
c000b299:	c3                   	ret    

c000b29a <KeInitialiseSymlinks()>:
c000b29a:	53                   	push   ebx
c000b29b:	83 ec 10             	sub    esp,0x10
c000b29e:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b2a8:	6a 00                	push   0x0
c000b2aa:	68 8f ae 00 c0       	push   0xc000ae8f
c000b2af:	e8 b4 58 00 00       	call   c0010b68 <KeRegisterAtexit(void (*)(void*), void*)>
c000b2b4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b2bb:	e8 f6 c7 ff ff       	call   c0007ab6 <malloc>
c000b2c0:	6a 01                	push   0x1
c000b2c2:	89 c3                	mov    ebx,eax
c000b2c4:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b2ca:	68 b8 13 02 c0       	push   0xc00213b8
c000b2cf:	50                   	push   eax
c000b2d0:	e8 1b 05 00 00       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c000b2d5:	83 c4 20             	add    esp,0x20
c000b2d8:	85 db                	test   ebx,ebx
c000b2da:	75 10                	jne    c000b2ec <KeInitialiseSymlinks()+0x52>
c000b2dc:	83 ec 0c             	sub    esp,0xc
c000b2df:	68 69 14 02 c0       	push   0xc0021469
c000b2e4:	e8 68 60 00 00       	call   c0011351 <KePanic(char const*)>
c000b2e9:	83 c4 10             	add    esp,0x10
c000b2ec:	83 ec 0c             	sub    esp,0xc
c000b2ef:	53                   	push   ebx
c000b2f0:	e8 9d 08 00 00       	call   c000bb92 <File::exists()>
c000b2f5:	83 c4 10             	add    esp,0x10
c000b2f8:	84 c0                	test   al,al
c000b2fa:	75 2d                	jne    c000b329 <KeInitialiseSymlinks()+0x8f>
c000b2fc:	52                   	push   edx
c000b2fd:	52                   	push   edx
c000b2fe:	6a 12                	push   0x12
c000b300:	53                   	push   ebx
c000b301:	e8 c8 05 00 00       	call   c000b8ce <File::open(FileOpenMode)>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	85 c0                	test   eax,eax
c000b30b:	74 10                	je     c000b31d <KeInitialiseSymlinks()+0x83>
c000b30d:	83 ec 0c             	sub    esp,0xc
c000b310:	68 86 14 02 c0       	push   0xc0021486
c000b315:	e8 37 60 00 00       	call   c0011351 <KePanic(char const*)>
c000b31a:	83 c4 10             	add    esp,0x10
c000b31d:	83 ec 0c             	sub    esp,0xc
c000b320:	53                   	push   ebx
c000b321:	e8 06 06 00 00       	call   c000b92c <File::close()>
c000b326:	83 c4 10             	add    esp,0x10
c000b329:	85 db                	test   ebx,ebx
c000b32b:	74 0c                	je     c000b339 <KeInitialiseSymlinks()+0x9f>
c000b32d:	83 ec 0c             	sub    esp,0xc
c000b330:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b332:	53                   	push   ebx
c000b333:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b336:	83 c4 10             	add    esp,0x10
c000b339:	50                   	push   eax
c000b33a:	50                   	push   eax
c000b33b:	68 a3 14 02 c0       	push   0xc00214a3
c000b340:	68 b1 14 02 c0       	push   0xc00214b1
c000b345:	e8 14 fe ff ff       	call   c000b15e <KeCreateSymlink(char const*, char const*)>
c000b34a:	83 c4 18             	add    esp,0x18
c000b34d:	5b                   	pop    ebx
c000b34e:	c3                   	ret    
c000b34f:	90                   	nop

c000b350 <File::read(unsigned long long, void*, int*)>:
c000b350:	53                   	push   ebx
c000b351:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b355:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b359:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b360:	83 f8 19             	cmp    eax,0x19
c000b363:	77 35                	ja     c000b39a <File::read(unsigned long long, void*, int*)+0x4a>
c000b365:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b36c:	85 c0                	test   eax,eax
c000b36e:	74 2a                	je     c000b39a <File::read(unsigned long long, void*, int*)+0x4a>
c000b370:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b376:	85 c0                	test   eax,eax
c000b378:	74 20                	je     c000b39a <File::read(unsigned long long, void*, int*)+0x4a>
c000b37a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b37e:	74 21                	je     c000b3a1 <File::read(unsigned long long, void*, int*)+0x51>
c000b380:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b382:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b386:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b38c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b390:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b394:	5b                   	pop    ebx
c000b395:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b398:	ff e0                	jmp    eax
c000b39a:	b8 0b 00 00 00       	mov    eax,0xb
c000b39f:	eb 05                	jmp    c000b3a6 <File::read(unsigned long long, void*, int*)+0x56>
c000b3a1:	b8 05 00 00 00       	mov    eax,0x5
c000b3a6:	5b                   	pop    ebx
c000b3a7:	c3                   	ret    

c000b3a8 <File::write(unsigned long long, void*, int*)>:
c000b3a8:	53                   	push   ebx
c000b3a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3b1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3b8:	83 f8 19             	cmp    eax,0x19
c000b3bb:	77 35                	ja     c000b3f2 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3bd:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3c4:	85 c0                	test   eax,eax
c000b3c6:	74 2a                	je     c000b3f2 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3c8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3ce:	85 c0                	test   eax,eax
c000b3d0:	74 20                	je     c000b3f2 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3d2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3d6:	74 21                	je     c000b3f9 <File::write(unsigned long long, void*, int*)+0x51>
c000b3d8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3da:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3de:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ec:	5b                   	pop    ebx
c000b3ed:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3f0:	ff e0                	jmp    eax
c000b3f2:	b8 0b 00 00 00       	mov    eax,0xb
c000b3f7:	eb 05                	jmp    c000b3fe <File::write(unsigned long long, void*, int*)+0x56>
c000b3f9:	b8 05 00 00 00       	mov    eax,0x5
c000b3fe:	5b                   	pop    ebx
c000b3ff:	c3                   	ret    

c000b400 <Directory::read(unsigned long long, void*, int*)>:
c000b400:	53                   	push   ebx
c000b401:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b405:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b409:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b410:	83 f8 19             	cmp    eax,0x19
c000b413:	77 35                	ja     c000b44a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b415:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b41c:	85 c0                	test   eax,eax
c000b41e:	74 2a                	je     c000b44a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b420:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b426:	85 c0                	test   eax,eax
c000b428:	74 20                	je     c000b44a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b42a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b42e:	74 21                	je     c000b451 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b430:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b432:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b436:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b43c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b440:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b444:	5b                   	pop    ebx
c000b445:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b448:	ff e0                	jmp    eax
c000b44a:	b8 0b 00 00 00       	mov    eax,0xb
c000b44f:	eb 05                	jmp    c000b456 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b451:	b8 05 00 00 00       	mov    eax,0x5
c000b456:	5b                   	pop    ebx
c000b457:	c3                   	ret    

c000b458 <Directory::write(unsigned long long, void*, int*)>:
c000b458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b45c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b463:	b8 0b 00 00 00       	mov    eax,0xb
c000b468:	83 fa 19             	cmp    edx,0x19
c000b46b:	77 18                	ja     c000b485 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b46d:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b474:	85 d2                	test   edx,edx
c000b476:	74 0d                	je     c000b485 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b478:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b47f:	19 c0                	sbb    eax,eax
c000b481:	83 e0 0a             	and    eax,0xa
c000b484:	40                   	inc    eax
c000b485:	c3                   	ret    

c000b486 <File::isAtty()>:
c000b486:	31 c0                	xor    eax,eax
c000b488:	c3                   	ret    
c000b489:	90                   	nop

c000b48a <Directory::isAtty()>:
c000b48a:	31 c0                	xor    eax,eax
c000b48c:	c3                   	ret    
c000b48d:	90                   	nop

c000b48e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b48e:	b8 0a 00 00 00       	mov    eax,0xa
c000b493:	c3                   	ret    

c000b494 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b494:	b8 0a 00 00 00       	mov    eax,0xa
c000b499:	c3                   	ret    

c000b49a <Filesystem::allocateSwapfile(char const*, int)>:
c000b49a:	31 c0                	xor    eax,eax
c000b49c:	31 d2                	xor    edx,edx
c000b49e:	c3                   	ret    
c000b49f:	90                   	nop

c000b4a0 <File::~File()>:
c000b4a0:	83 ec 0c             	sub    esp,0xc
c000b4a3:	ba 6c 15 02 c0       	mov    edx,0xc002156c
c000b4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ac:	89 10                	mov    DWORD PTR [eax],edx
c000b4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b2:	83 ec 0c             	sub    esp,0xc
c000b4b5:	50                   	push   eax
c000b4b6:	e8 e9 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b4bb:	83 c4 10             	add    esp,0x10
c000b4be:	90                   	nop
c000b4bf:	83 c4 0c             	add    esp,0xc
c000b4c2:	c3                   	ret    
c000b4c3:	90                   	nop

c000b4c4 <File::~File()>:
c000b4c4:	83 ec 0c             	sub    esp,0xc
c000b4c7:	83 ec 0c             	sub    esp,0xc
c000b4ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ce:	e8 cd ff ff ff       	call   c000b4a0 <File::~File()>
c000b4d3:	83 c4 10             	add    esp,0x10
c000b4d6:	83 ec 08             	sub    esp,0x8
c000b4d9:	68 14 01 00 00       	push   0x114
c000b4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e2:	e8 31 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	83 c4 0c             	add    esp,0xc
c000b4ed:	c3                   	ret    

c000b4ee <Directory::~Directory()>:
c000b4ee:	83 ec 0c             	sub    esp,0xc
c000b4f1:	ba 88 15 02 c0       	mov    edx,0xc0021588
c000b4f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4fa:	89 10                	mov    DWORD PTR [eax],edx
c000b4fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b500:	83 ec 0c             	sub    esp,0xc
c000b503:	50                   	push   eax
c000b504:	e8 9b de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b509:	83 c4 10             	add    esp,0x10
c000b50c:	90                   	nop
c000b50d:	83 c4 0c             	add    esp,0xc
c000b510:	c3                   	ret    
c000b511:	90                   	nop

c000b512 <Directory::~Directory()>:
c000b512:	83 ec 0c             	sub    esp,0xc
c000b515:	83 ec 0c             	sub    esp,0xc
c000b518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b51c:	e8 cd ff ff ff       	call   c000b4ee <Directory::~Directory()>
c000b521:	83 c4 10             	add    esp,0x10
c000b524:	83 ec 08             	sub    esp,0x8
c000b527:	68 14 01 00 00       	push   0x114
c000b52c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b530:	e8 e3 f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b535:	83 c4 10             	add    esp,0x10
c000b538:	83 c4 0c             	add    esp,0xc
c000b53b:	c3                   	ret    

c000b53c <Filesystem::Filesystem()>:
c000b53c:	ba 00 15 02 c0       	mov    edx,0xc0021500
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	89 10                	mov    DWORD PTR [eax],edx
c000b547:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b54d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b551:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b558:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b55d:	90                   	nop
c000b55e:	c3                   	ret    
c000b55f:	90                   	nop

c000b560 <Filesystem::~Filesystem()>:
c000b560:	ba 00 15 02 c0       	mov    edx,0xc0021500
c000b565:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b569:	89 10                	mov    DWORD PTR [eax],edx
c000b56b:	90                   	nop
c000b56c:	c3                   	ret    
c000b56d:	90                   	nop

c000b56e <Filesystem::~Filesystem()>:
c000b56e:	83 ec 0c             	sub    esp,0xc
c000b571:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b575:	e8 e6 ff ff ff       	call   c000b560 <Filesystem::~Filesystem()>
c000b57a:	83 c4 04             	add    esp,0x4
c000b57d:	83 ec 08             	sub    esp,0x8
c000b580:	6a 08                	push   0x8
c000b582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b586:	e8 8d f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b58b:	83 c4 10             	add    esp,0x10
c000b58e:	83 c4 0c             	add    esp,0xc
c000b591:	c3                   	ret    

c000b592 <Fs::getcwd(Process*, char*, int)>:
c000b592:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b596:	31 c0                	xor    eax,eax
c000b598:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b59b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b59f:	7d 15                	jge    c000b5b6 <Fs::getcwd(Process*, char*, int)+0x24>
c000b5a1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b5a5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b5ac:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b5af:	84 c9                	test   cl,cl
c000b5b1:	74 06                	je     c000b5b9 <Fs::getcwd(Process*, char*, int)+0x27>
c000b5b3:	40                   	inc    eax
c000b5b4:	eb e2                	jmp    c000b598 <Fs::getcwd(Process*, char*, int)+0x6>
c000b5b6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b5b9:	31 c0                	xor    eax,eax
c000b5bb:	c3                   	ret    

c000b5bc <Fs::initVFS()>:
c000b5bc:	83 ec 18             	sub    esp,0x18
c000b5bf:	6a 08                	push   0x8
c000b5c1:	e8 f0 c4 ff ff       	call   c0007ab6 <malloc>
c000b5c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5c9:	e8 a6 e2 00 00       	call   c0019874 <FAT::FAT()>
c000b5ce:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b5d5:	e8 dc c4 ff ff       	call   c0007ab6 <malloc>
c000b5da:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5dd:	e8 be f1 00 00       	call   c001a7a0 <ISO9660::ISO9660()>
c000b5e2:	83 c4 1c             	add    esp,0x1c
c000b5e5:	c3                   	ret    

c000b5e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5e6:	55                   	push   ebp
c000b5e7:	57                   	push   edi
c000b5e8:	56                   	push   esi
c000b5e9:	53                   	push   ebx
c000b5ea:	81 ec 10 04 00 00    	sub    esp,0x410
c000b5f0:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b5f7:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b5fe:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b606:	68 00 04 00 00       	push   0x400
c000b60b:	6a 00                	push   0x0
c000b60d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b611:	57                   	push   edi
c000b612:	e8 d9 4e ff ff       	call   c00004f0 <memset>
c000b617:	83 c4 10             	add    esp,0x10
c000b61a:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b61e:	75 0b                	jne    c000b62b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b620:	50                   	push   eax
c000b621:	50                   	push   eax
c000b622:	55                   	push   ebp
c000b623:	57                   	push   edi
c000b624:	e8 17 50 ff ff       	call   c0000640 <strcpy>
c000b629:	eb 51                	jmp    c000b67c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b62b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b62f:	83 f8 5c             	cmp    eax,0x5c
c000b632:	74 05                	je     c000b639 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b634:	83 f8 2f             	cmp    eax,0x2f
c000b637:	75 1e                	jne    c000b657 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b639:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b640:	8a 00                	mov    al,BYTE PTR [eax]
c000b642:	3c 60                	cmp    al,0x60
c000b644:	7e 03                	jle    c000b649 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b646:	83 e8 20             	sub    eax,0x20
c000b649:	88 04 24             	mov    BYTE PTR [esp],al
c000b64c:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b653:	50                   	push   eax
c000b654:	50                   	push   eax
c000b655:	eb 1e                	jmp    c000b675 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b657:	50                   	push   eax
c000b658:	50                   	push   eax
c000b659:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b660:	57                   	push   edi
c000b661:	e8 da 4f ff ff       	call   c0000640 <strcpy>
c000b666:	58                   	pop    eax
c000b667:	5a                   	pop    edx
c000b668:	68 c3 24 02 c0       	push   0xc00224c3
c000b66d:	57                   	push   edi
c000b66e:	e8 cd 51 ff ff       	call   c0000840 <strcat>
c000b673:	59                   	pop    ecx
c000b674:	58                   	pop    eax
c000b675:	55                   	push   ebp
c000b676:	57                   	push   edi
c000b677:	e8 c4 51 ff ff       	call   c0000840 <strcat>
c000b67c:	83 c4 10             	add    esp,0x10
c000b67f:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b682:	3c 60                	cmp    al,0x60
c000b684:	7e 03                	jle    c000b689 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b686:	83 e8 20             	sub    eax,0x20
c000b689:	88 04 24             	mov    BYTE PTR [esp],al
c000b68c:	88 06                	mov    BYTE PTR [esi],al
c000b68e:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b695:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b69b:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b69f:	bf 03 00 00 00       	mov    edi,0x3
c000b6a4:	b8 03 00 00 00       	mov    eax,0x3
c000b6a9:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b6ad:	89 e9                	mov    ecx,ebp
c000b6af:	85 ed                	test   ebp,ebp
c000b6b1:	0f 84 97 00 00 00    	je     c000b74e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b6b7:	8d 57 01             	lea    edx,[edi+0x1]
c000b6ba:	83 fd 5c             	cmp    ebp,0x5c
c000b6bd:	74 05                	je     c000b6c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b6bf:	83 fd 2f             	cmp    ebp,0x2f
c000b6c2:	75 12                	jne    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6c4:	89 c5                	mov    ebp,eax
c000b6c6:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b6cb:	74 09                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6cd:	40                   	inc    eax
c000b6ce:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b6d2:	89 d7                	mov    edi,edx
c000b6d4:	eb d3                	jmp    c000b6a9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b6d6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b6db:	0f be e9             	movsx  ebp,cl
c000b6de:	75 5e                	jne    c000b73e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6e0:	83 fd 2e             	cmp    ebp,0x2e
c000b6e3:	75 59                	jne    c000b73e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6e5:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b6e9:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b6ee:	74 18                	je     c000b708 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b6f0:	83 fd 2e             	cmp    ebp,0x2e
c000b6f3:	74 53                	je     c000b748 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b6f5:	89 fa                	mov    edx,edi
c000b6f7:	42                   	inc    edx
c000b6f8:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b6fc:	83 f9 2f             	cmp    ecx,0x2f
c000b6ff:	74 f6                	je     c000b6f7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b701:	83 f9 5c             	cmp    ecx,0x5c
c000b704:	74 f1                	je     c000b6f7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b706:	eb ca                	jmp    c000b6d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b708:	83 fd 2e             	cmp    ebp,0x2e
c000b70b:	74 3b                	je     c000b748 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b70d:	83 f8 03             	cmp    eax,0x3
c000b710:	74 c0                	je     c000b6d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b712:	42                   	inc    edx
c000b713:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b717:	83 f9 5c             	cmp    ecx,0x5c
c000b71a:	74 f6                	je     c000b712 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b71c:	83 f9 2f             	cmp    ecx,0x2f
c000b71f:	74 f1                	je     c000b712 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b721:	48                   	dec    eax
c000b722:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b726:	75 06                	jne    c000b72e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b728:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b72c:	eb f3                	jmp    c000b721 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b72e:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b732:	74 07                	je     c000b73b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b734:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b738:	48                   	dec    eax
c000b739:	eb f3                	jmp    c000b72e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b73b:	40                   	inc    eax
c000b73c:	eb 94                	jmp    c000b6d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b73e:	83 fd 5c             	cmp    ebp,0x5c
c000b741:	74 8f                	je     c000b6d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b743:	83 fd 2f             	cmp    ebp,0x2f
c000b746:	74 8a                	je     c000b6d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b748:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b74b:	40                   	inc    eax
c000b74c:	eb 84                	jmp    c000b6d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b74e:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b752:	83 ec 0c             	sub    esp,0xc
c000b755:	56                   	push   esi
c000b756:	e8 15 4e ff ff       	call   c0000570 <strlen>
c000b75b:	83 c4 10             	add    esp,0x10
c000b75e:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b763:	74 17                	je     c000b77c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b765:	83 ec 0c             	sub    esp,0xc
c000b768:	56                   	push   esi
c000b769:	e8 02 4e ff ff       	call   c0000570 <strlen>
c000b76e:	83 c4 10             	add    esp,0x10
c000b771:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b776:	74 04                	je     c000b77c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b778:	31 ff                	xor    edi,edi
c000b77a:	eb 4c                	jmp    c000b7c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000b77c:	83 ec 0c             	sub    esp,0xc
c000b77f:	56                   	push   esi
c000b780:	e8 eb 4d ff ff       	call   c0000570 <strlen>
c000b785:	83 c4 10             	add    esp,0x10
c000b788:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b78d:	74 e9                	je     c000b778 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000b78f:	83 ec 0c             	sub    esp,0xc
c000b792:	56                   	push   esi
c000b793:	e8 d8 4d ff ff       	call   c0000570 <strlen>
c000b798:	83 c4 10             	add    esp,0x10
c000b79b:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b7a0:	eb b0                	jmp    c000b752 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000b7a2:	50                   	push   eax
c000b7a3:	50                   	push   eax
c000b7a4:	56                   	push   esi
c000b7a5:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000b7a9:	55                   	push   ebp
c000b7aa:	e8 91 4e ff ff       	call   c0000640 <strcpy>
c000b7af:	5a                   	pop    edx
c000b7b0:	59                   	pop    ecx
c000b7b1:	56                   	push   esi
c000b7b2:	55                   	push   ebp
c000b7b3:	e8 92 f7 ff ff       	call   c000af4a <KeDereferenceSymlink(char const*, char*)>
c000b7b8:	83 c4 10             	add    esp,0x10
c000b7bb:	48                   	dec    eax
c000b7bc:	75 27                	jne    c000b7e5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000b7be:	8d 47 01             	lea    eax,[edi+0x1]
c000b7c1:	83 ff 14             	cmp    edi,0x14
c000b7c4:	74 08                	je     c000b7ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e8>
c000b7c6:	89 c7                	mov    edi,eax
c000b7c8:	85 db                	test   ebx,ebx
c000b7ca:	75 d6                	jne    c000b7a2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000b7cc:	eb 17                	jmp    c000b7e5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000b7ce:	83 ec 0c             	sub    esp,0xc
c000b7d1:	bf 15 00 00 00       	mov    edi,0x15
c000b7d6:	68 cf 14 02 c0       	push   0xc00214cf
c000b7db:	e8 71 5b 00 00       	call   c0011351 <KePanic(char const*)>
c000b7e0:	83 c4 10             	add    esp,0x10
c000b7e3:	eb e3                	jmp    c000b7c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000b7e5:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b7eb:	5b                   	pop    ebx
c000b7ec:	5e                   	pop    esi
c000b7ed:	5f                   	pop    edi
c000b7ee:	5d                   	pop    ebp
c000b7ef:	c3                   	ret    

c000b7f0 <File::File(char const*, Process*, bool)>:
c000b7f0:	83 ec 1c             	sub    esp,0x1c
c000b7f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b7f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b7fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7ff:	83 ec 08             	sub    esp,0x8
c000b802:	6a 00                	push   0x0
c000b804:	50                   	push   eax
c000b805:	e8 b4 d9 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b80a:	83 c4 10             	add    esp,0x10
c000b80d:	ba 6c 15 02 c0       	mov    edx,0xc002156c
c000b812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b816:	89 10                	mov    DWORD PTR [eax],edx
c000b818:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b81d:	85 c0                	test   eax,eax
c000b81f:	74 0f                	je     c000b830 <File::File(char const*, Process*, bool)+0x40>
c000b821:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b826:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000b82a:	74 04                	je     c000b830 <File::File(char const*, Process*, bool)+0x40>
c000b82c:	b0 01                	mov    al,0x1
c000b82e:	eb 02                	jmp    c000b832 <File::File(char const*, Process*, bool)+0x42>
c000b830:	b0 00                	mov    al,0x0
c000b832:	0f b6 c0             	movzx  eax,al
c000b835:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b839:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b83f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b843:	83 c2 0d             	add    edx,0xd
c000b846:	50                   	push   eax
c000b847:	51                   	push   ecx
c000b848:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b84c:	52                   	push   edx
c000b84d:	e8 94 fd ff ff       	call   c000b5e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b852:	83 c4 10             	add    esp,0x10
c000b855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b859:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b85c:	83 e8 41             	sub    eax,0x41
c000b85f:	88 c2                	mov    dl,al
c000b861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b865:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b86b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b86f:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b877:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b87d:	0f b6 c0             	movzx  eax,al
c000b880:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b887:	85 c0                	test   eax,eax
c000b889:	74 3e                	je     c000b8c9 <File::File(char const*, Process*, bool)+0xd9>
c000b88b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b88f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b895:	0f b6 c0             	movzx  eax,al
c000b898:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b89f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b8a5:	85 c0                	test   eax,eax
c000b8a7:	75 20                	jne    c000b8c9 <File::File(char const*, Process*, bool)+0xd9>
c000b8a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b8ad:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8b3:	0f b6 c0             	movzx  eax,al
c000b8b6:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8bd:	83 ec 0c             	sub    esp,0xc
c000b8c0:	50                   	push   eax
c000b8c1:	e8 80 21 00 00       	call   c000da46 <LogicalDisk::mount()>
c000b8c6:	83 c4 10             	add    esp,0x10
c000b8c9:	90                   	nop
c000b8ca:	83 c4 1c             	add    esp,0x1c
c000b8cd:	c3                   	ret    

c000b8ce <File::open(FileOpenMode)>:
c000b8ce:	53                   	push   ebx
c000b8cf:	b8 0b 00 00 00       	mov    eax,0xb
c000b8d4:	83 ec 08             	sub    esp,0x8
c000b8d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b8db:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b8e2:	83 fa 19             	cmp    edx,0x19
c000b8e5:	77 40                	ja     c000b927 <File::open(FileOpenMode)+0x59>
c000b8e7:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b8ee:	85 d2                	test   edx,edx
c000b8f0:	74 35                	je     c000b927 <File::open(FileOpenMode)+0x59>
c000b8f2:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8f8:	85 d2                	test   edx,edx
c000b8fa:	74 2b                	je     c000b927 <File::open(FileOpenMode)+0x59>
c000b8fc:	b8 06 00 00 00       	mov    eax,0x6
c000b901:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b905:	75 20                	jne    c000b927 <File::open(FileOpenMode)+0x59>
c000b907:	8b 02                	mov    eax,DWORD PTR [edx]
c000b909:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b90f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b913:	51                   	push   ecx
c000b914:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b917:	51                   	push   ecx
c000b918:	52                   	push   edx
c000b919:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b91c:	83 c4 10             	add    esp,0x10
c000b91f:	85 c0                	test   eax,eax
c000b921:	75 04                	jne    c000b927 <File::open(FileOpenMode)+0x59>
c000b923:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b927:	83 c4 08             	add    esp,0x8
c000b92a:	5b                   	pop    ebx
c000b92b:	c3                   	ret    

c000b92c <File::close()>:
c000b92c:	53                   	push   ebx
c000b92d:	b8 0b 00 00 00       	mov    eax,0xb
c000b932:	83 ec 08             	sub    esp,0x8
c000b935:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b939:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b940:	83 f9 19             	cmp    ecx,0x19
c000b943:	77 41                	ja     c000b986 <File::close()+0x5a>
c000b945:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b94c:	85 db                	test   ebx,ebx
c000b94e:	74 36                	je     c000b986 <File::close()+0x5a>
c000b950:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b957:	74 2d                	je     c000b986 <File::close()+0x5a>
c000b959:	b8 05 00 00 00       	mov    eax,0x5
c000b95e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b962:	74 22                	je     c000b986 <File::close()+0x5a>
c000b964:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b968:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b96f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b975:	53                   	push   ebx
c000b976:	53                   	push   ebx
c000b977:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b979:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b97f:	50                   	push   eax
c000b980:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b983:	83 c4 10             	add    esp,0x10
c000b986:	83 c4 08             	add    esp,0x8
c000b989:	5b                   	pop    ebx
c000b98a:	c3                   	ret    
c000b98b:	90                   	nop

c000b98c <File::seek(unsigned long long)>:
c000b98c:	56                   	push   esi
c000b98d:	53                   	push   ebx
c000b98e:	b8 0b 00 00 00       	mov    eax,0xb
c000b993:	51                   	push   ecx
c000b994:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b998:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b99c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9a7:	83 fa 19             	cmp    edx,0x19
c000b9aa:	77 31                	ja     c000b9dd <File::seek(unsigned long long)+0x51>
c000b9ac:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9b3:	85 d2                	test   edx,edx
c000b9b5:	74 26                	je     c000b9dd <File::seek(unsigned long long)+0x51>
c000b9b7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9bd:	85 d2                	test   edx,edx
c000b9bf:	74 1c                	je     c000b9dd <File::seek(unsigned long long)+0x51>
c000b9c1:	b8 05 00 00 00       	mov    eax,0x5
c000b9c6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b9ca:	74 11                	je     c000b9dd <File::seek(unsigned long long)+0x51>
c000b9cc:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9ce:	53                   	push   ebx
c000b9cf:	51                   	push   ecx
c000b9d0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b9d6:	52                   	push   edx
c000b9d7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9da:	83 c4 10             	add    esp,0x10
c000b9dd:	5a                   	pop    edx
c000b9de:	5b                   	pop    ebx
c000b9df:	5e                   	pop    esi
c000b9e0:	c3                   	ret    
c000b9e1:	90                   	nop

c000b9e2 <File::truncate(unsigned long long)>:
c000b9e2:	56                   	push   esi
c000b9e3:	53                   	push   ebx
c000b9e4:	b8 0b 00 00 00       	mov    eax,0xb
c000b9e9:	51                   	push   ecx
c000b9ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9f2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9fd:	83 fa 19             	cmp    edx,0x19
c000ba00:	77 31                	ja     c000ba33 <File::truncate(unsigned long long)+0x51>
c000ba02:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba09:	85 d2                	test   edx,edx
c000ba0b:	74 26                	je     c000ba33 <File::truncate(unsigned long long)+0x51>
c000ba0d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba13:	85 d2                	test   edx,edx
c000ba15:	74 1c                	je     c000ba33 <File::truncate(unsigned long long)+0x51>
c000ba17:	b8 05 00 00 00       	mov    eax,0x5
c000ba1c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba20:	74 11                	je     c000ba33 <File::truncate(unsigned long long)+0x51>
c000ba22:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba24:	53                   	push   ebx
c000ba25:	51                   	push   ecx
c000ba26:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba2c:	52                   	push   edx
c000ba2d:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ba30:	83 c4 10             	add    esp,0x10
c000ba33:	5a                   	pop    edx
c000ba34:	5b                   	pop    ebx
c000ba35:	5e                   	pop    esi
c000ba36:	c3                   	ret    
c000ba37:	90                   	nop

c000ba38 <File::tell(unsigned long long*)>:
c000ba38:	83 ec 0c             	sub    esp,0xc
c000ba3b:	b8 0b 00 00 00       	mov    eax,0xb
c000ba40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba44:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ba4b:	83 fa 19             	cmp    edx,0x19
c000ba4e:	77 34                	ja     c000ba84 <File::tell(unsigned long long*)+0x4c>
c000ba50:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba57:	85 d2                	test   edx,edx
c000ba59:	74 29                	je     c000ba84 <File::tell(unsigned long long*)+0x4c>
c000ba5b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba61:	85 d2                	test   edx,edx
c000ba63:	74 1f                	je     c000ba84 <File::tell(unsigned long long*)+0x4c>
c000ba65:	b8 05 00 00 00       	mov    eax,0x5
c000ba6a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ba6e:	74 14                	je     c000ba84 <File::tell(unsigned long long*)+0x4c>
c000ba70:	50                   	push   eax
c000ba71:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba77:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ba7d:	52                   	push   edx
c000ba7e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ba81:	83 c4 10             	add    esp,0x10
c000ba84:	83 c4 0c             	add    esp,0xc
c000ba87:	c3                   	ret    

c000ba88 <File::rewind()>:
c000ba88:	83 ec 10             	sub    esp,0x10
c000ba8b:	6a 00                	push   0x0
c000ba8d:	6a 00                	push   0x0
c000ba8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba93:	e8 f4 fe ff ff       	call   c000b98c <File::seek(unsigned long long)>
c000ba98:	83 c4 1c             	add    esp,0x1c
c000ba9b:	c3                   	ret    

c000ba9c <File::unlink()>:
c000ba9c:	83 ec 0c             	sub    esp,0xc
c000ba9f:	b8 0b 00 00 00       	mov    eax,0xb
c000baa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baa8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baaf:	83 f9 19             	cmp    ecx,0x19
c000bab2:	77 2f                	ja     c000bae3 <File::unlink()+0x47>
c000bab4:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000babb:	85 c9                	test   ecx,ecx
c000babd:	74 24                	je     c000bae3 <File::unlink()+0x47>
c000babf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bac5:	85 c9                	test   ecx,ecx
c000bac7:	74 1a                	je     c000bae3 <File::unlink()+0x47>
c000bac9:	b8 06 00 00 00       	mov    eax,0x6
c000bace:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bad2:	75 0f                	jne    c000bae3 <File::unlink()+0x47>
c000bad4:	83 c2 0d             	add    edx,0xd
c000bad7:	50                   	push   eax
c000bad8:	50                   	push   eax
c000bad9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000badb:	52                   	push   edx
c000badc:	51                   	push   ecx
c000badd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bae0:	83 c4 10             	add    esp,0x10
c000bae3:	83 c4 0c             	add    esp,0xc
c000bae6:	c3                   	ret    
c000bae7:	90                   	nop

c000bae8 <File::rename(char const*)>:
c000bae8:	83 ec 0c             	sub    esp,0xc
c000baeb:	b8 0b 00 00 00       	mov    eax,0xb
c000baf0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baf4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bafb:	83 f9 19             	cmp    ecx,0x19
c000bafe:	77 32                	ja     c000bb32 <File::rename(char const*)+0x4a>
c000bb00:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb07:	85 c9                	test   ecx,ecx
c000bb09:	74 27                	je     c000bb32 <File::rename(char const*)+0x4a>
c000bb0b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb11:	85 c9                	test   ecx,ecx
c000bb13:	74 1d                	je     c000bb32 <File::rename(char const*)+0x4a>
c000bb15:	b8 06 00 00 00       	mov    eax,0x6
c000bb1a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb1e:	75 12                	jne    c000bb32 <File::rename(char const*)+0x4a>
c000bb20:	83 c2 0d             	add    edx,0xd
c000bb23:	50                   	push   eax
c000bb24:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb2a:	52                   	push   edx
c000bb2b:	51                   	push   ecx
c000bb2c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bb2f:	83 c4 10             	add    esp,0x10
c000bb32:	83 c4 0c             	add    esp,0xc
c000bb35:	c3                   	ret    

c000bb36 <File::chfatattr(unsigned char, unsigned char)>:
c000bb36:	57                   	push   edi
c000bb37:	b8 0b 00 00 00       	mov    eax,0xb
c000bb3c:	56                   	push   esi
c000bb3d:	53                   	push   ebx
c000bb3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb42:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb46:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb4d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb51:	83 f9 19             	cmp    ecx,0x19
c000bb54:	77 37                	ja     c000bb8d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb56:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb5d:	85 c9                	test   ecx,ecx
c000bb5f:	74 2c                	je     c000bb8d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb61:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb67:	85 c9                	test   ecx,ecx
c000bb69:	74 22                	je     c000bb8d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb6b:	b8 06 00 00 00       	mov    eax,0x6
c000bb70:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb74:	75 17                	jne    c000bb8d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb76:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bb78:	89 f0                	mov    eax,esi
c000bb7a:	83 c2 0d             	add    edx,0xd
c000bb7d:	0f b6 f0             	movzx  esi,al
c000bb80:	0f b6 db             	movzx  ebx,bl
c000bb83:	56                   	push   esi
c000bb84:	53                   	push   ebx
c000bb85:	52                   	push   edx
c000bb86:	51                   	push   ecx
c000bb87:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	5b                   	pop    ebx
c000bb8e:	5e                   	pop    esi
c000bb8f:	5f                   	pop    edi
c000bb90:	c3                   	ret    
c000bb91:	90                   	nop

c000bb92 <File::exists()>:
c000bb92:	83 ec 0c             	sub    esp,0xc
c000bb95:	31 c0                	xor    eax,eax
c000bb97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb9b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bba2:	83 f9 19             	cmp    ecx,0x19
c000bba5:	77 24                	ja     c000bbcb <File::exists()+0x39>
c000bba7:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbae:	85 c9                	test   ecx,ecx
c000bbb0:	74 19                	je     c000bbcb <File::exists()+0x39>
c000bbb2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbb8:	85 c9                	test   ecx,ecx
c000bbba:	74 0f                	je     c000bbcb <File::exists()+0x39>
c000bbbc:	83 c2 0d             	add    edx,0xd
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbc3:	52                   	push   edx
c000bbc4:	51                   	push   ecx
c000bbc5:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bbc8:	83 c4 10             	add    esp,0x10
c000bbcb:	83 c4 0c             	add    esp,0xc
c000bbce:	c3                   	ret    
c000bbcf:	90                   	nop

c000bbd0 <File::stat(unsigned long long*, bool*)>:
c000bbd0:	56                   	push   esi
c000bbd1:	53                   	push   ebx
c000bbd2:	50                   	push   eax
c000bbd3:	b8 0b 00 00 00       	mov    eax,0xb
c000bbd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbdc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbe0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbe7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bbeb:	83 f9 19             	cmp    ecx,0x19
c000bbee:	77 3d                	ja     c000bc2d <File::stat(unsigned long long*, bool*)+0x5d>
c000bbf0:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbf7:	85 c9                	test   ecx,ecx
c000bbf9:	74 32                	je     c000bc2d <File::stat(unsigned long long*, bool*)+0x5d>
c000bbfb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bc01:	85 c9                	test   ecx,ecx
c000bc03:	74 28                	je     c000bc2d <File::stat(unsigned long long*, bool*)+0x5d>
c000bc05:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc07:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc0b:	74 13                	je     c000bc20 <File::stat(unsigned long long*, bool*)+0x50>
c000bc0d:	83 ec 04             	sub    esp,0x4
c000bc10:	56                   	push   esi
c000bc11:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc17:	51                   	push   ecx
c000bc18:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bc1b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bc1e:	eb 0a                	jmp    c000bc2a <File::stat(unsigned long long*, bool*)+0x5a>
c000bc20:	53                   	push   ebx
c000bc21:	83 c2 0d             	add    edx,0xd
c000bc24:	56                   	push   esi
c000bc25:	52                   	push   edx
c000bc26:	51                   	push   ecx
c000bc27:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bc2a:	83 c4 10             	add    esp,0x10
c000bc2d:	5a                   	pop    edx
c000bc2e:	5b                   	pop    ebx
c000bc2f:	5e                   	pop    esi
c000bc30:	c3                   	ret    

c000bc31 <Fs::setcwd(Process*, char*)>:
c000bc31:	55                   	push   ebp
c000bc32:	57                   	push   edi
c000bc33:	56                   	push   esi
c000bc34:	53                   	push   ebx
c000bc35:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bc3b:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bc42:	6a 00                	push   0x0
c000bc44:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bc4a:	57                   	push   edi
c000bc4b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bc52:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bc56:	56                   	push   esi
c000bc57:	e8 8a f9 ff ff       	call   c000b5e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bc5c:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc5f:	e8 0c 49 ff ff       	call   c0000570 <strlen>
c000bc64:	83 c4 10             	add    esp,0x10
c000bc67:	83 f8 02             	cmp    eax,0x2
c000bc6a:	77 15                	ja     c000bc81 <Fs::setcwd(Process*, char*)+0x50>
c000bc6c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bc71:	83 eb 41             	sub    ebx,0x41
c000bc74:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bc7b:	85 c0                	test   eax,eax
c000bc7d:	75 1c                	jne    c000bc9b <Fs::setcwd(Process*, char*)+0x6a>
c000bc7f:	eb 2f                	jmp    c000bcb0 <Fs::setcwd(Process*, char*)+0x7f>
c000bc81:	83 ec 0c             	sub    esp,0xc
c000bc84:	56                   	push   esi
c000bc85:	e8 e6 48 ff ff       	call   c0000570 <strlen>
c000bc8a:	83 c4 10             	add    esp,0x10
c000bc8d:	83 f8 03             	cmp    eax,0x3
c000bc90:	75 57                	jne    c000bce9 <Fs::setcwd(Process*, char*)+0xb8>
c000bc92:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bc97:	75 50                	jne    c000bce9 <Fs::setcwd(Process*, char*)+0xb8>
c000bc99:	eb d1                	jmp    c000bc6c <Fs::setcwd(Process*, char*)+0x3b>
c000bc9b:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bca2:	75 0c                	jne    c000bcb0 <Fs::setcwd(Process*, char*)+0x7f>
c000bca4:	83 ec 0c             	sub    esp,0xc
c000bca7:	50                   	push   eax
c000bca8:	e8 99 1d 00 00       	call   c000da46 <LogicalDisk::mount()>
c000bcad:	83 c4 10             	add    esp,0x10
c000bcb0:	b8 03 00 00 00       	mov    eax,0x3
c000bcb5:	83 fb 19             	cmp    ebx,0x19
c000bcb8:	0f 87 c5 00 00 00    	ja     c000bd83 <Fs::setcwd(Process*, char*)+0x152>
c000bcbe:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bcc5:	b8 05 00 00 00       	mov    eax,0x5
c000bcca:	85 d2                	test   edx,edx
c000bccc:	0f 84 b1 00 00 00    	je     c000bd83 <Fs::setcwd(Process*, char*)+0x152>
c000bcd2:	b8 06 00 00 00       	mov    eax,0x6
c000bcd7:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bcde:	0f 85 91 00 00 00    	jne    c000bd75 <Fs::setcwd(Process*, char*)+0x144>
c000bce4:	e9 9a 00 00 00       	jmp    c000bd83 <Fs::setcwd(Process*, char*)+0x152>
c000bce9:	83 ec 0c             	sub    esp,0xc
c000bcec:	68 14 01 00 00       	push   0x114
c000bcf1:	e8 c0 bd ff ff       	call   c0007ab6 <malloc>
c000bcf6:	6a 01                	push   0x1
c000bcf8:	89 c3                	mov    ebx,eax
c000bcfa:	55                   	push   ebp
c000bcfb:	56                   	push   esi
c000bcfc:	50                   	push   eax
c000bcfd:	e8 ee fa ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c000bd02:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000bd07:	83 c4 1c             	add    esp,0x1c
c000bd0a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bd0e:	50                   	push   eax
c000bd0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bd13:	50                   	push   eax
c000bd14:	53                   	push   ebx
c000bd15:	e8 b6 fe ff ff       	call   c000bbd0 <File::stat(unsigned long long*, bool*)>
c000bd1a:	83 c4 10             	add    esp,0x10
c000bd1d:	83 f8 02             	cmp    eax,0x2
c000bd20:	74 27                	je     c000bd49 <Fs::setcwd(Process*, char*)+0x118>
c000bd22:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bd27:	75 1c                	jne    c000bd45 <Fs::setcwd(Process*, char*)+0x114>
c000bd29:	b8 02 00 00 00       	mov    eax,0x2
c000bd2e:	85 db                	test   ebx,ebx
c000bd30:	74 51                	je     c000bd83 <Fs::setcwd(Process*, char*)+0x152>
c000bd32:	83 ec 0c             	sub    esp,0xc
c000bd35:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd37:	53                   	push   ebx
c000bd38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd3b:	83 c4 10             	add    esp,0x10
c000bd3e:	b8 02 00 00 00       	mov    eax,0x2
c000bd43:	eb 3e                	jmp    c000bd83 <Fs::setcwd(Process*, char*)+0x152>
c000bd45:	85 c0                	test   eax,eax
c000bd47:	74 1c                	je     c000bd65 <Fs::setcwd(Process*, char*)+0x134>
c000bd49:	b8 01 00 00 00       	mov    eax,0x1
c000bd4e:	85 db                	test   ebx,ebx
c000bd50:	74 31                	je     c000bd83 <Fs::setcwd(Process*, char*)+0x152>
c000bd52:	83 ec 0c             	sub    esp,0xc
c000bd55:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd57:	53                   	push   ebx
c000bd58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	b8 01 00 00 00       	mov    eax,0x1
c000bd63:	eb 1e                	jmp    c000bd83 <Fs::setcwd(Process*, char*)+0x152>
c000bd65:	85 db                	test   ebx,ebx
c000bd67:	74 0c                	je     c000bd75 <Fs::setcwd(Process*, char*)+0x144>
c000bd69:	83 ec 0c             	sub    esp,0xc
c000bd6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd6e:	53                   	push   ebx
c000bd6f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd72:	83 c4 10             	add    esp,0x10
c000bd75:	50                   	push   eax
c000bd76:	50                   	push   eax
c000bd77:	56                   	push   esi
c000bd78:	57                   	push   edi
c000bd79:	e8 c2 48 ff ff       	call   c0000640 <strcpy>
c000bd7e:	83 c4 10             	add    esp,0x10
c000bd81:	31 c0                	xor    eax,eax
c000bd83:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bd89:	5b                   	pop    ebx
c000bd8a:	5e                   	pop    esi
c000bd8b:	5f                   	pop    edi
c000bd8c:	5d                   	pop    ebp
c000bd8d:	c3                   	ret    

c000bd8e <Directory::Directory(char const*, Process*)>:
c000bd8e:	83 ec 0c             	sub    esp,0xc
c000bd91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd95:	83 ec 08             	sub    esp,0x8
c000bd98:	6a 00                	push   0x0
c000bd9a:	50                   	push   eax
c000bd9b:	e8 1e d4 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bda0:	83 c4 10             	add    esp,0x10
c000bda3:	ba 88 15 02 c0       	mov    edx,0xc0021588
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	89 10                	mov    DWORD PTR [eax],edx
c000bdae:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000bdb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bdb7:	0f 95 c0             	setne  al
c000bdba:	0f b6 c0             	movzx  eax,al
c000bdbd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdc1:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bdc7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdcb:	83 c2 0d             	add    edx,0xd
c000bdce:	50                   	push   eax
c000bdcf:	51                   	push   ecx
c000bdd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdd4:	52                   	push   edx
c000bdd5:	e8 0c f8 ff ff       	call   c000b5e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bdda:	83 c4 10             	add    esp,0x10
c000bddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bde1:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bde4:	83 e8 41             	sub    eax,0x41
c000bde7:	88 c2                	mov    dl,al
c000bde9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bded:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bdf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdf7:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bdfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdff:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be05:	0f b6 c0             	movzx  eax,al
c000be08:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be0f:	85 c0                	test   eax,eax
c000be11:	74 3e                	je     c000be51 <Directory::Directory(char const*, Process*)+0xc3>
c000be13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be17:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be1d:	0f b6 c0             	movzx  eax,al
c000be20:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be27:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be2d:	85 c0                	test   eax,eax
c000be2f:	75 20                	jne    c000be51 <Directory::Directory(char const*, Process*)+0xc3>
c000be31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be35:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be3b:	0f b6 c0             	movzx  eax,al
c000be3e:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be45:	83 ec 0c             	sub    esp,0xc
c000be48:	50                   	push   eax
c000be49:	e8 f8 1b 00 00       	call   c000da46 <LogicalDisk::mount()>
c000be4e:	83 c4 10             	add    esp,0x10
c000be51:	90                   	nop
c000be52:	83 c4 0c             	add    esp,0xc
c000be55:	c3                   	ret    

c000be56 <Directory::open()>:
c000be56:	53                   	push   ebx
c000be57:	b8 0b 00 00 00       	mov    eax,0xb
c000be5c:	83 ec 08             	sub    esp,0x8
c000be5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be63:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000be6a:	83 fa 19             	cmp    edx,0x19
c000be6d:	77 3d                	ja     c000beac <Directory::open()+0x56>
c000be6f:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000be76:	85 d2                	test   edx,edx
c000be78:	74 32                	je     c000beac <Directory::open()+0x56>
c000be7a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000be80:	85 d2                	test   edx,edx
c000be82:	74 28                	je     c000beac <Directory::open()+0x56>
c000be84:	b8 06 00 00 00       	mov    eax,0x6
c000be89:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000be8d:	75 1d                	jne    c000beac <Directory::open()+0x56>
c000be8f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000be95:	50                   	push   eax
c000be96:	8b 02                	mov    eax,DWORD PTR [edx]
c000be98:	51                   	push   ecx
c000be99:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000be9c:	51                   	push   ecx
c000be9d:	52                   	push   edx
c000be9e:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bea1:	83 c4 10             	add    esp,0x10
c000bea4:	85 c0                	test   eax,eax
c000bea6:	75 04                	jne    c000beac <Directory::open()+0x56>
c000bea8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000beac:	83 c4 08             	add    esp,0x8
c000beaf:	5b                   	pop    ebx
c000beb0:	c3                   	ret    
c000beb1:	90                   	nop

c000beb2 <Directory::close()>:
c000beb2:	53                   	push   ebx
c000beb3:	b8 0b 00 00 00       	mov    eax,0xb
c000beb8:	83 ec 08             	sub    esp,0x8
c000bebb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bebf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bec6:	83 f9 19             	cmp    ecx,0x19
c000bec9:	77 41                	ja     c000bf0c <Directory::close()+0x5a>
c000becb:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bed2:	85 db                	test   ebx,ebx
c000bed4:	74 36                	je     c000bf0c <Directory::close()+0x5a>
c000bed6:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bedd:	74 2d                	je     c000bf0c <Directory::close()+0x5a>
c000bedf:	b8 05 00 00 00       	mov    eax,0x5
c000bee4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bee8:	74 22                	je     c000bf0c <Directory::close()+0x5a>
c000beea:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000beee:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bef5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000befb:	53                   	push   ebx
c000befc:	53                   	push   ebx
c000befd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000beff:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf05:	50                   	push   eax
c000bf06:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bf09:	83 c4 10             	add    esp,0x10
c000bf0c:	83 c4 08             	add    esp,0x8
c000bf0f:	5b                   	pop    ebx
c000bf10:	c3                   	ret    
c000bf11:	90                   	nop

c000bf12 <Directory::unlink()>:
c000bf12:	83 ec 0c             	sub    esp,0xc
c000bf15:	b8 0b 00 00 00       	mov    eax,0xb
c000bf1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf25:	83 f9 19             	cmp    ecx,0x19
c000bf28:	77 2f                	ja     c000bf59 <Directory::unlink()+0x47>
c000bf2a:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf31:	85 c9                	test   ecx,ecx
c000bf33:	74 24                	je     c000bf59 <Directory::unlink()+0x47>
c000bf35:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf3b:	85 c9                	test   ecx,ecx
c000bf3d:	74 1a                	je     c000bf59 <Directory::unlink()+0x47>
c000bf3f:	b8 06 00 00 00       	mov    eax,0x6
c000bf44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf48:	75 0f                	jne    c000bf59 <Directory::unlink()+0x47>
c000bf4a:	83 c2 0d             	add    edx,0xd
c000bf4d:	50                   	push   eax
c000bf4e:	50                   	push   eax
c000bf4f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf51:	52                   	push   edx
c000bf52:	51                   	push   ecx
c000bf53:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bf56:	83 c4 10             	add    esp,0x10
c000bf59:	83 c4 0c             	add    esp,0xc
c000bf5c:	c3                   	ret    
c000bf5d:	90                   	nop

c000bf5e <Directory::rename(char const*)>:
c000bf5e:	83 ec 0c             	sub    esp,0xc
c000bf61:	b8 0b 00 00 00       	mov    eax,0xb
c000bf66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf6a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf71:	83 f9 19             	cmp    ecx,0x19
c000bf74:	77 32                	ja     c000bfa8 <Directory::rename(char const*)+0x4a>
c000bf76:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf7d:	85 c9                	test   ecx,ecx
c000bf7f:	74 27                	je     c000bfa8 <Directory::rename(char const*)+0x4a>
c000bf81:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf87:	85 c9                	test   ecx,ecx
c000bf89:	74 1d                	je     c000bfa8 <Directory::rename(char const*)+0x4a>
c000bf8b:	b8 06 00 00 00       	mov    eax,0x6
c000bf90:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf94:	75 12                	jne    c000bfa8 <Directory::rename(char const*)+0x4a>
c000bf96:	83 c2 0d             	add    edx,0xd
c000bf99:	50                   	push   eax
c000bf9a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfa0:	52                   	push   edx
c000bfa1:	51                   	push   ecx
c000bfa2:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	83 c4 0c             	add    esp,0xc
c000bfab:	c3                   	ret    

c000bfac <Directory::exists()>:
c000bfac:	83 ec 0c             	sub    esp,0xc
c000bfaf:	31 c0                	xor    eax,eax
c000bfb1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfb5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfbc:	83 f9 19             	cmp    ecx,0x19
c000bfbf:	77 24                	ja     c000bfe5 <Directory::exists()+0x39>
c000bfc1:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfc8:	85 c9                	test   ecx,ecx
c000bfca:	74 19                	je     c000bfe5 <Directory::exists()+0x39>
c000bfcc:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfd2:	85 c9                	test   ecx,ecx
c000bfd4:	74 0f                	je     c000bfe5 <Directory::exists()+0x39>
c000bfd6:	83 c2 0d             	add    edx,0xd
c000bfd9:	50                   	push   eax
c000bfda:	50                   	push   eax
c000bfdb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfdd:	52                   	push   edx
c000bfde:	51                   	push   ecx
c000bfdf:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bfe2:	83 c4 10             	add    esp,0x10
c000bfe5:	83 c4 0c             	add    esp,0xc
c000bfe8:	c3                   	ret    
c000bfe9:	90                   	nop

c000bfea <Directory::read(dirent*)>:
c000bfea:	83 ec 1c             	sub    esp,0x1c
c000bfed:	b8 0b 00 00 00       	mov    eax,0xb
c000bff2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bff6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bffd:	83 f9 19             	cmp    ecx,0x19
c000c000:	77 30                	ja     c000c032 <Directory::read(dirent*)+0x48>
c000c002:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c009:	85 c9                	test   ecx,ecx
c000c00b:	74 25                	je     c000c032 <Directory::read(dirent*)+0x48>
c000c00d:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c014:	74 1c                	je     c000c032 <Directory::read(dirent*)+0x48>
c000c016:	83 ec 0c             	sub    esp,0xc
c000c019:	8b 02                	mov    eax,DWORD PTR [edx]
c000c01b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c01f:	51                   	push   ecx
c000c020:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c024:	6a 00                	push   0x0
c000c026:	68 10 01 00 00       	push   0x110
c000c02b:	52                   	push   edx
c000c02c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c02f:	83 c4 20             	add    esp,0x20
c000c032:	83 c4 1c             	add    esp,0x1c
c000c035:	c3                   	ret    

c000c036 <Directory::create()>:
c000c036:	83 ec 0c             	sub    esp,0xc
c000c039:	b8 0b 00 00 00       	mov    eax,0xb
c000c03e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c042:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c049:	83 f9 19             	cmp    ecx,0x19
c000c04c:	77 2f                	ja     c000c07d <Directory::create()+0x47>
c000c04e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c055:	85 c9                	test   ecx,ecx
c000c057:	74 24                	je     c000c07d <Directory::create()+0x47>
c000c059:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c05f:	85 c9                	test   ecx,ecx
c000c061:	74 1a                	je     c000c07d <Directory::create()+0x47>
c000c063:	b8 06 00 00 00       	mov    eax,0x6
c000c068:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c06c:	75 0f                	jne    c000c07d <Directory::create()+0x47>
c000c06e:	83 c2 0d             	add    edx,0xd
c000c071:	50                   	push   eax
c000c072:	50                   	push   eax
c000c073:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c075:	52                   	push   edx
c000c076:	51                   	push   ecx
c000c077:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c07a:	83 c4 10             	add    esp,0x10
c000c07d:	83 c4 0c             	add    esp,0xc
c000c080:	c3                   	ret    
c000c081:	90                   	nop

c000c082 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c082:	b8 0a 00 00 00       	mov    eax,0xa
c000c087:	c3                   	ret    

c000c088 <Bus::Bus(char const*)>:
c000c088:	83 ec 0c             	sub    esp,0xc
c000c08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08f:	83 ec 08             	sub    esp,0x8
c000c092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c096:	50                   	push   eax
c000c097:	e8 22 08 00 00       	call   c000c8be <Device::Device(char const*)>
c000c09c:	83 c4 10             	add    esp,0x10
c000c09f:	ba a4 15 02 c0       	mov    edx,0xc00215a4
c000c0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a8:	89 10                	mov    DWORD PTR [eax],edx
c000c0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ae:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c0b8:	90                   	nop
c000c0b9:	83 c4 0c             	add    esp,0xc
c000c0bc:	c3                   	ret    
c000c0bd:	90                   	nop
c000c0be:	66 90                	xchg   ax,ax

c000c0c0 <Bus::~Bus()>:
c000c0c0:	83 ec 0c             	sub    esp,0xc
c000c0c3:	ba a4 15 02 c0       	mov    edx,0xc00215a4
c000c0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0cc:	89 10                	mov    DWORD PTR [eax],edx
c000c0ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d2:	83 ec 0c             	sub    esp,0xc
c000c0d5:	50                   	push   eax
c000c0d6:	e8 4d 05 00 00       	call   c000c628 <Device::~Device()>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	90                   	nop
c000c0df:	83 c4 0c             	add    esp,0xc
c000c0e2:	c3                   	ret    
c000c0e3:	90                   	nop

c000c0e4 <Bus::~Bus()>:
c000c0e4:	83 ec 0c             	sub    esp,0xc
c000c0e7:	83 ec 0c             	sub    esp,0xc
c000c0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ee:	e8 cd ff ff ff       	call   c000c0c0 <Bus::~Bus()>
c000c0f3:	83 c4 10             	add    esp,0x10
c000c0f6:	83 ec 08             	sub    esp,0x8
c000c0f9:	68 58 01 00 00       	push   0x158
c000c0fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c102:	e8 11 e7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c107:	83 c4 10             	add    esp,0x10
c000c10a:	83 c4 0c             	add    esp,0xc
c000c10d:	c3                   	ret    

c000c10e <beepThread(void*)>:
c000c10e:	83 ec 0c             	sub    esp,0xc
c000c111:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c116:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c11a:	48                   	dec    eax
c000c11b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c120:	75 01                	jne    c000c123 <beepThread(void*)+0x15>
c000c122:	fb                   	sti    
c000c123:	83 ec 0c             	sub    esp,0xc
c000c126:	6b c2 0a             	imul   eax,edx,0xa
c000c129:	50                   	push   eax
c000c12a:	e8 0d 9f 00 00       	call   c001603c <milliTenthSleep(unsigned int)>
c000c12f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c136:	e8 5b be 00 00       	call   c0017f96 <HalMakeBeep(int)>
c000c13b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c143:	83 c4 1c             	add    esp,0x1c
c000c146:	e9 d5 9d 00 00       	jmp    c0015f20 <blockTask(TaskState)>

c000c14b <Krnl::beep(int, int, bool)>:
c000c14b:	56                   	push   esi
c000c14c:	53                   	push   ebx
c000c14d:	83 ec 10             	sub    esp,0x10
c000c150:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c154:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c15c:	e8 35 be 00 00       	call   c0017f96 <HalMakeBeep(int)>
c000c161:	83 c4 10             	add    esp,0x10
c000c164:	89 f0                	mov    eax,esi
c000c166:	84 c0                	test   al,al
c000c168:	74 1e                	je     c000c188 <Krnl::beep(int, int, bool)+0x3d>
c000c16a:	83 ec 0c             	sub    esp,0xc
c000c16d:	6b db 0a             	imul   ebx,ebx,0xa
c000c170:	53                   	push   ebx
c000c171:	e8 c6 9e 00 00       	call   c001603c <milliTenthSleep(unsigned int)>
c000c176:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c17e:	83 c4 14             	add    esp,0x14
c000c181:	5b                   	pop    ebx
c000c182:	5e                   	pop    esi
c000c183:	e9 0e be 00 00       	jmp    c0017f96 <HalMakeBeep(int)>
c000c188:	68 e6 00 00 00       	push   0xe6
c000c18d:	53                   	push   ebx
c000c18e:	68 0e c1 00 c0       	push   0xc000c10e
c000c193:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c199:	e8 1e 99 00 00       	call   c0015abc <Process::createThread(void (*)(void*), void*, int)>
c000c19e:	83 c4 14             	add    esp,0x14
c000c1a1:	5b                   	pop    ebx
c000c1a2:	5e                   	pop    esi
c000c1a3:	c3                   	ret    

c000c1a4 <User::loadClockSettings(int)>:
c000c1a4:	53                   	push   ebx
c000c1a5:	83 ec 14             	sub    esp,0x14
c000c1a8:	68 14 01 00 00       	push   0x114
c000c1ad:	e8 04 b9 ff ff       	call   c0007ab6 <malloc>
c000c1b2:	6a 01                	push   0x1
c000c1b4:	89 c3                	mov    ebx,eax
c000c1b6:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1bc:	68 c8 15 02 c0       	push   0xc00215c8
c000c1c1:	50                   	push   eax
c000c1c2:	e8 29 f6 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c000c1c7:	83 c4 18             	add    esp,0x18
c000c1ca:	6a 01                	push   0x1
c000c1cc:	53                   	push   ebx
c000c1cd:	e8 fc f6 ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c000c1d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c1d5:	e8 52 f7 ff ff       	call   c000b92c <File::close()>
c000c1da:	83 c4 10             	add    esp,0x10
c000c1dd:	85 db                	test   ebx,ebx
c000c1df:	74 0f                	je     c000c1f0 <User::loadClockSettings(int)+0x4c>
c000c1e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c1e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1ea:	83 c4 08             	add    esp,0x8
c000c1ed:	5b                   	pop    ebx
c000c1ee:	ff e0                	jmp    eax
c000c1f0:	83 c4 08             	add    esp,0x8
c000c1f3:	5b                   	pop    ebx
c000c1f4:	c3                   	ret    
c000c1f5:	90                   	nop

c000c1f6 <Clock::Clock(char const*)>:
c000c1f6:	83 ec 0c             	sub    esp,0xc
c000c1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1fd:	83 ec 08             	sub    esp,0x8
c000c200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c204:	50                   	push   eax
c000c205:	e8 b4 06 00 00       	call   c000c8be <Device::Device(char const*)>
c000c20a:	83 c4 10             	add    esp,0x10
c000c20d:	ba f0 15 02 c0       	mov    edx,0xc00215f0
c000c212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c216:	89 10                	mov    DWORD PTR [eax],edx
c000c218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c226:	90                   	nop
c000c227:	83 c4 0c             	add    esp,0xc
c000c22a:	c3                   	ret    
c000c22b:	90                   	nop

c000c22c <Clock::~Clock()>:
c000c22c:	83 ec 0c             	sub    esp,0xc
c000c22f:	ba f0 15 02 c0       	mov    edx,0xc00215f0
c000c234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c238:	89 10                	mov    DWORD PTR [eax],edx
c000c23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23e:	83 ec 0c             	sub    esp,0xc
c000c241:	50                   	push   eax
c000c242:	e8 e1 03 00 00       	call   c000c628 <Device::~Device()>
c000c247:	83 c4 10             	add    esp,0x10
c000c24a:	90                   	nop
c000c24b:	83 c4 0c             	add    esp,0xc
c000c24e:	c3                   	ret    
c000c24f:	90                   	nop

c000c250 <Clock::~Clock()>:
c000c250:	83 ec 0c             	sub    esp,0xc
c000c253:	83 ec 0c             	sub    esp,0xc
c000c256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c25a:	e8 cd ff ff ff       	call   c000c22c <Clock::~Clock()>
c000c25f:	83 c4 10             	add    esp,0x10
c000c262:	83 ec 08             	sub    esp,0x8
c000c265:	68 58 01 00 00       	push   0x158
c000c26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c26e:	e8 a5 e5 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	83 c4 0c             	add    esp,0xc
c000c279:	c3                   	ret    

c000c27a <Clock::timeInSecondsLocal()>:
c000c27a:	53                   	push   ebx
c000c27b:	83 ec 14             	sub    esp,0x14
c000c27e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c282:	8b 10                	mov    edx,DWORD PTR [eax]
c000c284:	50                   	push   eax
c000c285:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c288:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c28f:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c295:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c29b:	89 cb                	mov    ebx,ecx
c000c29d:	c1 fb 1f             	sar    ebx,0x1f
c000c2a0:	01 c8                	add    eax,ecx
c000c2a2:	11 da                	adc    edx,ebx
c000c2a4:	83 c4 10             	add    esp,0x10
c000c2a7:	31 c9                	xor    ecx,ecx
c000c2a9:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2b0:	74 05                	je     c000c2b7 <Clock::timeInSecondsLocal()+0x3d>
c000c2b2:	b9 08 07 00 00       	mov    ecx,0x708
c000c2b7:	31 db                	xor    ebx,ebx
c000c2b9:	01 c8                	add    eax,ecx
c000c2bb:	11 da                	adc    edx,ebx
c000c2bd:	83 c4 08             	add    esp,0x8
c000c2c0:	5b                   	pop    ebx
c000c2c1:	c3                   	ret    

c000c2c2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c2c2:	57                   	push   edi
c000c2c3:	56                   	push   esi
c000c2c4:	53                   	push   ebx
c000c2c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c2c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c2d3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c2d6:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c2dd:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c2e3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c2e9:	99                   	cdq    
c000c2ea:	29 c6                	sub    esi,eax
c000c2ec:	19 d7                	sbb    edi,edx
c000c2ee:	89 f0                	mov    eax,esi
c000c2f0:	89 fa                	mov    edx,edi
c000c2f2:	31 f6                	xor    esi,esi
c000c2f4:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2fb:	74 05                	je     c000c302 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c2fd:	be 08 07 00 00       	mov    esi,0x708
c000c302:	31 ff                	xor    edi,edi
c000c304:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c308:	29 f0                	sub    eax,esi
c000c30a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c30e:	19 fa                	sbb    edx,edi
c000c310:	89 d8                	mov    eax,ebx
c000c312:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c316:	5b                   	pop    ebx
c000c317:	5e                   	pop    esi
c000c318:	5f                   	pop    edi
c000c319:	ff e0                	jmp    eax

c000c31b <datetimeToSeconds(datetime_t)>:
c000c31b:	55                   	push   ebp
c000c31c:	57                   	push   edi
c000c31d:	56                   	push   esi
c000c31e:	53                   	push   ebx
c000c31f:	83 ec 0c             	sub    esp,0xc
c000c322:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c326:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c32a:	89 d6                	mov    esi,edx
c000c32c:	0f b6 c7             	movzx  eax,bh
c000c32f:	c1 ee 10             	shr    esi,0x10
c000c332:	6b e8 3c             	imul   ebp,eax,0x3c
c000c335:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c33b:	0f b6 ce             	movzx  ecx,dh
c000c33e:	89 df                	mov    edi,ebx
c000c340:	49                   	dec    ecx
c000c341:	c1 ef 10             	shr    edi,0x10
c000c344:	0f b6 db             	movzx  ebx,bl
c000c347:	89 f8                	mov    eax,edi
c000c349:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c34f:	0f b6 f8             	movzx  edi,al
c000c352:	0f b6 d2             	movzx  edx,dl
c000c355:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c359:	01 d8                	add    eax,ebx
c000c35b:	0f b7 de             	movzx  ebx,si
c000c35e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c361:	c1 f8 1f             	sar    eax,0x1f
c000c364:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c368:	0f b6 c1             	movzx  eax,cl
c000c36b:	8b 0c 85 40 16 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde9c0]
c000c372:	83 f8 01             	cmp    eax,0x1
c000c375:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c379:	76 27                	jbe    c000c3a2 <datetimeToSeconds(datetime_t)+0x87>
c000c37b:	83 e6 03             	and    esi,0x3
c000c37e:	75 22                	jne    c000c3a2 <datetimeToSeconds(datetime_t)+0x87>
c000c380:	31 d2                	xor    edx,edx
c000c382:	be 64 00 00 00       	mov    esi,0x64
c000c387:	89 d8                	mov    eax,ebx
c000c389:	f7 f6                	div    esi
c000c38b:	85 d2                	test   edx,edx
c000c38d:	75 12                	jne    c000c3a1 <datetimeToSeconds(datetime_t)+0x86>
c000c38f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c395:	be 90 01 00 00       	mov    esi,0x190
c000c39a:	99                   	cdq    
c000c39b:	f7 fe                	idiv   esi
c000c39d:	85 d2                	test   edx,edx
c000c39f:	75 01                	jne    c000c3a2 <datetimeToSeconds(datetime_t)+0x87>
c000c3a1:	41                   	inc    ecx
c000c3a2:	83 fb 46             	cmp    ebx,0x46
c000c3a5:	76 48                	jbe    c000c3ef <datetimeToSeconds(datetime_t)+0xd4>
c000c3a7:	be 46 00 00 00       	mov    esi,0x46
c000c3ac:	bf 64 00 00 00       	mov    edi,0x64
c000c3b1:	bd 90 01 00 00       	mov    ebp,0x190
c000c3b6:	b8 6d 01 00 00       	mov    eax,0x16d
c000c3bb:	f7 c6 03 00 00 00    	test   esi,0x3
c000c3c1:	75 23                	jne    c000c3e6 <datetimeToSeconds(datetime_t)+0xcb>
c000c3c3:	89 f0                	mov    eax,esi
c000c3c5:	99                   	cdq    
c000c3c6:	f7 ff                	idiv   edi
c000c3c8:	b8 6e 01 00 00       	mov    eax,0x16e
c000c3cd:	85 d2                	test   edx,edx
c000c3cf:	75 15                	jne    c000c3e6 <datetimeToSeconds(datetime_t)+0xcb>
c000c3d1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c3d7:	99                   	cdq    
c000c3d8:	f7 fd                	idiv   ebp
c000c3da:	83 fa 01             	cmp    edx,0x1
c000c3dd:	19 c0                	sbb    eax,eax
c000c3df:	f7 d0                	not    eax
c000c3e1:	05 6e 01 00 00       	add    eax,0x16e
c000c3e6:	01 c1                	add    ecx,eax
c000c3e8:	46                   	inc    esi
c000c3e9:	39 de                	cmp    esi,ebx
c000c3eb:	7c c9                	jl     c000c3b6 <datetimeToSeconds(datetime_t)+0x9b>
c000c3ed:	eb 34                	jmp    c000c423 <datetimeToSeconds(datetime_t)+0x108>
c000c3ef:	74 32                	je     c000c423 <datetimeToSeconds(datetime_t)+0x108>
c000c3f1:	b8 45 00 00 00       	mov    eax,0x45
c000c3f6:	89 c2                	mov    edx,eax
c000c3f8:	83 e2 03             	and    edx,0x3
c000c3fb:	39 d8                	cmp    eax,ebx
c000c3fd:	7e 0f                	jle    c000c40e <datetimeToSeconds(datetime_t)+0xf3>
c000c3ff:	83 fa 01             	cmp    edx,0x1
c000c402:	19 d2                	sbb    edx,edx
c000c404:	48                   	dec    eax
c000c405:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c40c:	eb e8                	jmp    c000c3f6 <datetimeToSeconds(datetime_t)+0xdb>
c000c40e:	b8 6d 01 00 00       	mov    eax,0x16d
c000c413:	85 d2                	test   edx,edx
c000c415:	75 0a                	jne    c000c421 <datetimeToSeconds(datetime_t)+0x106>
c000c417:	83 fb 01             	cmp    ebx,0x1
c000c41a:	19 c0                	sbb    eax,eax
c000c41c:	05 6e 01 00 00       	add    eax,0x16e
c000c421:	29 c1                	sub    ecx,eax
c000c423:	b8 80 51 01 00       	mov    eax,0x15180
c000c428:	f7 e9                	imul   ecx
c000c42a:	03 04 24             	add    eax,DWORD PTR [esp]
c000c42d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c431:	83 c4 0c             	add    esp,0xc
c000c434:	5b                   	pop    ebx
c000c435:	5e                   	pop    esi
c000c436:	5f                   	pop    edi
c000c437:	5d                   	pop    ebp
c000c438:	c3                   	ret    
c000c439:	90                   	nop

c000c43a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c43a:	57                   	push   edi
c000c43b:	56                   	push   esi
c000c43c:	53                   	push   ebx
c000c43d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c441:	8b 06                	mov    eax,DWORD PTR [esi]
c000c443:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c446:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c44a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c44e:	e8 c8 fe ff ff       	call   c000c31b <datetimeToSeconds(datetime_t)>
c000c453:	59                   	pop    ecx
c000c454:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c45b:	5b                   	pop    ebx
c000c45c:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c462:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c468:	89 cb                	mov    ebx,ecx
c000c46a:	c1 fb 1f             	sar    ebx,0x1f
c000c46d:	29 c8                	sub    eax,ecx
c000c46f:	19 da                	sbb    edx,ebx
c000c471:	31 c9                	xor    ecx,ecx
c000c473:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c47a:	74 05                	je     c000c481 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c47c:	b9 08 07 00 00       	mov    ecx,0x708
c000c481:	31 db                	xor    ebx,ebx
c000c483:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c487:	29 c8                	sub    eax,ecx
c000c489:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c48d:	19 da                	sbb    edx,ebx
c000c48f:	89 f8                	mov    eax,edi
c000c491:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c495:	5b                   	pop    ebx
c000c496:	5e                   	pop    esi
c000c497:	5f                   	pop    edi
c000c498:	ff e0                	jmp    eax

c000c49a <secondsToDatetime(unsigned long long)>:
c000c49a:	55                   	push   ebp
c000c49b:	57                   	push   edi
c000c49c:	56                   	push   esi
c000c49d:	53                   	push   ebx
c000c49e:	83 ec 1c             	sub    esp,0x1c
c000c4a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c4a5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4a9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c4ad:	6a 00                	push   0x0
c000c4af:	68 80 51 01 00       	push   0x15180
c000c4b4:	55                   	push   ebp
c000c4b5:	57                   	push   edi
c000c4b6:	e8 c5 2e 01 00       	call   c001f380 <__udivdi3>
c000c4bb:	83 c4 10             	add    esp,0x10
c000c4be:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c4c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4c8:	6a 00                	push   0x0
c000c4ca:	68 80 51 01 00       	push   0x15180
c000c4cf:	55                   	push   ebp
c000c4d0:	57                   	push   edi
c000c4d1:	bf 10 0e 00 00       	mov    edi,0xe10
c000c4d6:	e8 a5 2f 01 00       	call   c001f480 <__umoddi3>
c000c4db:	83 c4 10             	add    esp,0x10
c000c4de:	99                   	cdq    
c000c4df:	f7 ff                	idiv   edi
c000c4e1:	bf 3c 00 00 00       	mov    edi,0x3c
c000c4e6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c4e9:	89 d0                	mov    eax,edx
c000c4eb:	99                   	cdq    
c000c4ec:	f7 ff                	idiv   edi
c000c4ee:	85 db                	test   ebx,ebx
c000c4f0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c4f3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c4f6:	79 11                	jns    c000c509 <secondsToDatetime(unsigned long long)+0x6f>
c000c4f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4fc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c502:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c507:	eb 07                	jmp    c000c510 <secondsToDatetime(unsigned long long)+0x76>
c000c509:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c50e:	89 d8                	mov    eax,ebx
c000c510:	bf b4 05 00 00       	mov    edi,0x5b4
c000c515:	99                   	cdq    
c000c516:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c51b:	f7 f9                	idiv   ecx
c000c51d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c522:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c526:	31 d2                	xor    edx,edx
c000c528:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c530:	01 c3                	add    ebx,eax
c000c532:	89 d8                	mov    eax,ebx
c000c534:	f7 f1                	div    ecx
c000c536:	31 d2                	xor    edx,edx
c000c538:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c53b:	89 d8                	mov    eax,ebx
c000c53d:	f7 f7                	div    edi
c000c53f:	31 d2                	xor    edx,edx
c000c541:	29 c1                	sub    ecx,eax
c000c543:	89 d8                	mov    eax,ebx
c000c545:	f7 f5                	div    ebp
c000c547:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c54c:	29 c1                	sub    ecx,eax
c000c54e:	31 d2                	xor    edx,edx
c000c550:	89 c8                	mov    eax,ecx
c000c552:	f7 f5                	div    ebp
c000c554:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c559:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c55d:	31 d2                	xor    edx,edx
c000c55f:	89 c8                	mov    eax,ecx
c000c561:	f7 f5                	div    ebp
c000c563:	31 d2                	xor    edx,edx
c000c565:	01 c3                	add    ebx,eax
c000c567:	89 c8                	mov    eax,ecx
c000c569:	f7 f7                	div    edi
c000c56b:	bf 99 00 00 00       	mov    edi,0x99
c000c570:	29 c3                	sub    ebx,eax
c000c572:	31 d2                	xor    edx,edx
c000c574:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c57c:	29 c3                	sub    ebx,eax
c000c57e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c581:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c584:	bb 05 00 00 00       	mov    ebx,0x5
c000c589:	83 c1 02             	add    ecx,0x2
c000c58c:	89 c8                	mov    eax,ecx
c000c58e:	f7 f7                	div    edi
c000c590:	31 d2                	xor    edx,edx
c000c592:	89 c7                	mov    edi,eax
c000c594:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c59a:	83 c0 02             	add    eax,0x2
c000c59d:	f7 f3                	div    ebx
c000c59f:	89 eb                	mov    ebx,ebp
c000c5a1:	29 c3                	sub    ebx,eax
c000c5a3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c5a9:	88 1e                	mov    BYTE PTR [esi],bl
c000c5ab:	19 c0                	sbb    eax,eax
c000c5ad:	31 d2                	xor    edx,edx
c000c5af:	83 e0 0c             	and    eax,0xc
c000c5b2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c5b6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c5be:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c5c2:	83 f9 01             	cmp    ecx,0x1
c000c5c5:	0f 96 c2             	setbe  dl
c000c5c8:	41                   	inc    ecx
c000c5c9:	01 d0                	add    eax,edx
c000c5cb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c5ce:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c5d2:	83 c4 1c             	add    esp,0x1c
c000c5d5:	89 f0                	mov    eax,esi
c000c5d7:	5b                   	pop    ebx
c000c5d8:	5e                   	pop    esi
c000c5d9:	5f                   	pop    edi
c000c5da:	5d                   	pop    ebp
c000c5db:	c2 04 00             	ret    0x4

c000c5de <Clock::timeInDatetimeLocal()>:
c000c5de:	53                   	push   ebx
c000c5df:	83 ec 14             	sub    esp,0x14
c000c5e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c5e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c5ea:	e8 8b fc ff ff       	call   c000c27a <Clock::timeInSecondsLocal()>
c000c5ef:	83 c4 0c             	add    esp,0xc
c000c5f2:	52                   	push   edx
c000c5f3:	50                   	push   eax
c000c5f4:	53                   	push   ebx
c000c5f5:	e8 a0 fe ff ff       	call   c000c49a <secondsToDatetime(unsigned long long)>
c000c5fa:	89 d8                	mov    eax,ebx
c000c5fc:	83 c4 14             	add    esp,0x14
c000c5ff:	5b                   	pop    ebx
c000c600:	c2 04 00             	ret    0x4
c000c603:	90                   	nop

c000c604 <Device::hibernate()>:
c000c604:	c3                   	ret    
c000c605:	90                   	nop

c000c606 <Device::wake()>:
c000c606:	c3                   	ret    
c000c607:	90                   	nop

c000c608 <Device::detect()>:
c000c608:	c3                   	ret    
c000c609:	90                   	nop

c000c60a <Device::disableLegacy()>:
c000c60a:	c3                   	ret    
c000c60b:	90                   	nop

c000c60c <Device::powerSaving(PowerSavingLevel)>:
c000c60c:	c3                   	ret    
c000c60d:	90                   	nop

c000c60e <DriverlessDevice::close(int, int, void*)>:
c000c60e:	31 c0                	xor    eax,eax
c000c610:	c3                   	ret    
c000c611:	90                   	nop

c000c612 <DriverlessDevice::detect()>:
c000c612:	c3                   	ret    
c000c613:	90                   	nop

c000c614 <DriverlessDevice::open(int, int, void*)>:
c000c614:	83 ec 18             	sub    esp,0x18
c000c617:	68 70 16 02 c0       	push   0xc0021670
c000c61c:	e8 30 4d 00 00       	call   c0011351 <KePanic(char const*)>
c000c621:	83 c8 ff             	or     eax,0xffffffff
c000c624:	83 c4 1c             	add    esp,0x1c
c000c627:	c3                   	ret    

c000c628 <Device::~Device()>:
c000c628:	ba d0 16 02 c0       	mov    edx,0xc00216d0
c000c62d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c631:	89 10                	mov    DWORD PTR [eax],edx
c000c633:	90                   	nop
c000c634:	c3                   	ret    
c000c635:	90                   	nop

c000c636 <Device::~Device()>:
c000c636:	83 ec 0c             	sub    esp,0xc
c000c639:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c63d:	e8 e6 ff ff ff       	call   c000c628 <Device::~Device()>
c000c642:	83 c4 04             	add    esp,0x4
c000c645:	83 ec 08             	sub    esp,0x8
c000c648:	68 58 01 00 00       	push   0x158
c000c64d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c651:	e8 c2 e1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c656:	83 c4 10             	add    esp,0x10
c000c659:	83 c4 0c             	add    esp,0xc
c000c65c:	c3                   	ret    
c000c65d:	90                   	nop

c000c65e <Device::findAndLoadDriver()>:
c000c65e:	c7 44 24 04 8e 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc002168e
c000c666:	e9 da e2 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c66b:	90                   	nop

c000c66c <Device::preOpenPCI(PCIDeviceInfo)>:
c000c66c:	57                   	push   edi
c000c66d:	b9 09 00 00 00       	mov    ecx,0x9
c000c672:	56                   	push   esi
c000c673:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c677:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c67b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c685:	81 c7 18 01 00 00    	add    edi,0x118
c000c68b:	fc                   	cld    
c000c68c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c68e:	5e                   	pop    esi
c000c68f:	5f                   	pop    edi
c000c690:	c3                   	ret    
c000c691:	90                   	nop

c000c692 <Device::preOpenACPI(void*, char*, char*)>:
c000c692:	57                   	push   edi
c000c693:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c698:	56                   	push   esi
c000c699:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c69d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c6a1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c6ab:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c6b1:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c6b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c6bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6bd:	b9 0e 00 00 00       	mov    ecx,0xe
c000c6c2:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c6c8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c6cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6ce:	5e                   	pop    esi
c000c6cf:	5f                   	pop    edi
c000c6d0:	c3                   	ret    
c000c6d1:	90                   	nop

c000c6d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c6d2:	53                   	push   ebx
c000c6d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c6db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c6e3:	0f b6 c0             	movzx  eax,al
c000c6e6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c6ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c6ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c6f2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6f6:	5b                   	pop    ebx
c000c6f7:	e9 a8 05 00 00       	jmp    c000cca4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c6fc <Device::getParent()>:
c000c6fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c700:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c706:	c3                   	ret    
c000c707:	90                   	nop

c000c708 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c708:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c70c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c710:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c715:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c719:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c71d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c721:	e9 e6 06 00 00       	jmp    c000ce0c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c726 <Device::addChild(Device*)>:
c000c726:	53                   	push   ebx
c000c727:	83 ec 08             	sub    esp,0x8
c000c72a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c72e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c732:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c738:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c73e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c740:	85 d2                	test   edx,edx
c000c742:	74 04                	je     c000c748 <Device::addChild(Device*)+0x22>
c000c744:	89 d3                	mov    ebx,edx
c000c746:	eb f6                	jmp    c000c73e <Device::addChild(Device*)+0x18>
c000c748:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c74b:	83 ec 0c             	sub    esp,0xc
c000c74e:	6a 08                	push   0x8
c000c750:	e8 61 b3 ff ff       	call   c0007ab6 <malloc>
c000c755:	89 03                	mov    DWORD PTR [ebx],eax
c000c757:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c75d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c764:	83 c4 18             	add    esp,0x18
c000c767:	5b                   	pop    ebx
c000c768:	c3                   	ret    
c000c769:	90                   	nop

c000c76a <Device::removeAllChildren()>:
c000c76a:	56                   	push   esi
c000c76b:	53                   	push   ebx
c000c76c:	52                   	push   edx
c000c76d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c771:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c777:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c77a:	74 17                	je     c000c793 <Device::removeAllChildren()+0x29>
c000c77c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c77f:	85 c0                	test   eax,eax
c000c781:	74 0c                	je     c000c78f <Device::removeAllChildren()+0x25>
c000c783:	83 ec 0c             	sub    esp,0xc
c000c786:	8b 10                	mov    edx,DWORD PTR [eax]
c000c788:	50                   	push   eax
c000c789:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c78c:	83 c4 10             	add    esp,0x10
c000c78f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c791:	eb e4                	jmp    c000c777 <Device::removeAllChildren()+0xd>
c000c793:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c799:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c79f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7ac:	58                   	pop    eax
c000c7ad:	5b                   	pop    ebx
c000c7ae:	5e                   	pop    esi
c000c7af:	c3                   	ret    

c000c7b0 <Device::hibernateAll()>:
c000c7b0:	53                   	push   ebx
c000c7b1:	83 ec 14             	sub    esp,0x14
c000c7b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7ba:	53                   	push   ebx
c000c7bb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c7be:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7c4:	83 c4 10             	add    esp,0x10
c000c7c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7ca:	74 0f                	je     c000c7db <Device::hibernateAll()+0x2b>
c000c7cc:	83 ec 0c             	sub    esp,0xc
c000c7cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7d2:	e8 d9 ff ff ff       	call   c000c7b0 <Device::hibernateAll()>
c000c7d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7d9:	eb e9                	jmp    c000c7c4 <Device::hibernateAll()+0x14>
c000c7db:	83 c4 08             	add    esp,0x8
c000c7de:	5b                   	pop    ebx
c000c7df:	c3                   	ret    

c000c7e0 <Device::wakeAll()>:
c000c7e0:	53                   	push   ebx
c000c7e1:	83 ec 14             	sub    esp,0x14
c000c7e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7ea:	53                   	push   ebx
c000c7eb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c7ee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7f4:	83 c4 10             	add    esp,0x10
c000c7f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7fa:	74 0f                	je     c000c80b <Device::wakeAll()+0x2b>
c000c7fc:	83 ec 0c             	sub    esp,0xc
c000c7ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c802:	e8 d9 ff ff ff       	call   c000c7e0 <Device::wakeAll()>
c000c807:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c809:	eb e9                	jmp    c000c7f4 <Device::wakeAll()+0x14>
c000c80b:	83 c4 08             	add    esp,0x8
c000c80e:	5b                   	pop    ebx
c000c80f:	c3                   	ret    

c000c810 <Device::detectAll()>:
c000c810:	53                   	push   ebx
c000c811:	83 ec 14             	sub    esp,0x14
c000c814:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c818:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c81a:	53                   	push   ebx
c000c81b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c81e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c82a:	74 0f                	je     c000c83b <Device::detectAll()+0x2b>
c000c82c:	83 ec 0c             	sub    esp,0xc
c000c82f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c832:	e8 d9 ff ff ff       	call   c000c810 <Device::detectAll()>
c000c837:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c839:	eb e9                	jmp    c000c824 <Device::detectAll()+0x14>
c000c83b:	83 c4 08             	add    esp,0x8
c000c83e:	5b                   	pop    ebx
c000c83f:	c3                   	ret    

c000c840 <Device::disableLegacyAll()>:
c000c840:	c3                   	ret    
c000c841:	90                   	nop

c000c842 <Device::loadDriversForAll()>:
c000c842:	c3                   	ret    
c000c843:	90                   	nop

c000c844 <Device::closeAll()>:
c000c844:	53                   	push   ebx
c000c845:	83 ec 08             	sub    esp,0x8
c000c848:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c84c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c84e:	6a 00                	push   0x0
c000c850:	6a 00                	push   0x0
c000c852:	6a 00                	push   0x0
c000c854:	53                   	push   ebx
c000c855:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c858:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c85e:	83 c4 10             	add    esp,0x10
c000c861:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c864:	74 0f                	je     c000c875 <Device::closeAll()+0x31>
c000c866:	83 ec 0c             	sub    esp,0xc
c000c869:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c86c:	e8 d3 ff ff ff       	call   c000c844 <Device::closeAll()>
c000c871:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c873:	eb e9                	jmp    c000c85e <Device::closeAll()+0x1a>
c000c875:	83 c4 08             	add    esp,0x8
c000c878:	5b                   	pop    ebx
c000c879:	c3                   	ret    

c000c87a <Device::powerSavingAll(PowerSavingLevel)>:
c000c87a:	56                   	push   esi
c000c87b:	53                   	push   ebx
c000c87c:	83 ec 0c             	sub    esp,0xc
c000c87f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c883:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c887:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c889:	56                   	push   esi
c000c88a:	53                   	push   ebx
c000c88b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c88e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c894:	83 c4 10             	add    esp,0x10
c000c897:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c89a:	74 0f                	je     c000c8ab <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c89c:	52                   	push   edx
c000c89d:	52                   	push   edx
c000c89e:	56                   	push   esi
c000c89f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8a2:	e8 d3 ff ff ff       	call   c000c87a <Device::powerSavingAll(PowerSavingLevel)>
c000c8a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8a9:	eb e9                	jmp    c000c894 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c8ab:	58                   	pop    eax
c000c8ac:	5b                   	pop    ebx
c000c8ad:	5e                   	pop    esi
c000c8ae:	c3                   	ret    
c000c8af:	90                   	nop

c000c8b0 <Device::setName(char const*)>:
c000c8b0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c8b8:	e9 83 3d ff ff       	jmp    c0000640 <strcpy>
c000c8bd:	90                   	nop

c000c8be <Device::Device(char const*)>:
c000c8be:	83 ec 1c             	sub    esp,0x1c
c000c8c1:	ba d0 16 02 c0       	mov    edx,0xc00216d0
c000c8c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ca:	89 10                	mov    DWORD PTR [eax],edx
c000c8cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8d0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c8da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8de:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c8e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ec:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c8f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8fa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c904:	83 ec 08             	sub    esp,0x8
c000c907:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c90b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c90f:	e8 9c ff ff ff       	call   c000c8b0 <Device::setName(char const*)>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c91f:	83 ec 0c             	sub    esp,0xc
c000c922:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c926:	e8 8b b1 ff ff       	call   c0007ab6 <malloc>
c000c92b:	83 c4 10             	add    esp,0x10
c000c92e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c93b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c93f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c945:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c949:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c94f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c959:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c95f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c96a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c971:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c975:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c97c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c980:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c98a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c98e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c9a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9aa:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c9b4:	90                   	nop
c000c9b5:	83 c4 1c             	add    esp,0x1c
c000c9b8:	c3                   	ret    
c000c9b9:	90                   	nop

c000c9ba <Device::getName()>:
c000c9ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9be:	05 d0 00 00 00       	add    eax,0xd0
c000c9c3:	c3                   	ret    

c000c9c4 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c9c4:	83 ec 0c             	sub    esp,0xc
c000c9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9cb:	83 ec 08             	sub    esp,0x8
c000c9ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9d2:	50                   	push   eax
c000c9d3:	e8 e6 fe ff ff       	call   c000c8be <Device::Device(char const*)>
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	ba fc 16 02 c0       	mov    edx,0xc00216fc
c000c9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9e4:	89 10                	mov    DWORD PTR [eax],edx
c000c9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ea:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c9f4:	90                   	nop
c000c9f5:	83 c4 0c             	add    esp,0xc
c000c9f8:	c3                   	ret    
c000c9f9:	90                   	nop

c000c9fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c9fa:	57                   	push   edi
c000c9fb:	56                   	push   esi
c000c9fc:	53                   	push   ebx
c000c9fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca01:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ca05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ca09:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ca0f:	75 0c                	jne    c000ca1d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ca11:	52                   	push   edx
c000ca12:	52                   	push   edx
c000ca13:	53                   	push   ebx
c000ca14:	56                   	push   esi
c000ca15:	e8 18 2e 01 00       	call   c001f832 <LinkedList<Device>::addElement(Device*)>
c000ca1a:	83 c4 10             	add    esp,0x10
c000ca1d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca23:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca26:	74 12                	je     c000ca3a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ca28:	50                   	push   eax
c000ca29:	57                   	push   edi
c000ca2a:	56                   	push   esi
c000ca2b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca2e:	e8 c7 ff ff ff       	call   c000c9fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca33:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca35:	83 c4 10             	add    esp,0x10
c000ca38:	eb e9                	jmp    c000ca23 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ca3a:	5b                   	pop    ebx
c000ca3b:	5e                   	pop    esi
c000ca3c:	5f                   	pop    edi
c000ca3d:	c3                   	ret    

c000ca3e <getDevicesOfType(DeviceType)>:
c000ca3e:	53                   	push   ebx
c000ca3f:	83 ec 14             	sub    esp,0x14
c000ca42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca46:	53                   	push   ebx
c000ca47:	e8 c2 2e 01 00       	call   c001f90e <LinkedList<Device>::LinkedList()>
c000ca4c:	83 c4 0c             	add    esp,0xc
c000ca4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca53:	53                   	push   ebx
c000ca54:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000ca5a:	e8 9b ff ff ff       	call   c000c9fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca5f:	89 d8                	mov    eax,ebx
c000ca61:	83 c4 18             	add    esp,0x18
c000ca64:	5b                   	pop    ebx
c000ca65:	c2 04 00             	ret    0x4

c000ca68 <HardDiskController::HardDiskController(char const*)>:
c000ca68:	83 ec 0c             	sub    esp,0xc
c000ca6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca6f:	83 ec 08             	sub    esp,0x8
c000ca72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca76:	50                   	push   eax
c000ca77:	e8 42 fe ff ff       	call   c000c8be <Device::Device(char const*)>
c000ca7c:	83 c4 10             	add    esp,0x10
c000ca7f:	ba 28 17 02 c0       	mov    edx,0xc0021728
c000ca84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca88:	89 10                	mov    DWORD PTR [eax],edx
c000ca8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca8e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ca98:	90                   	nop
c000ca99:	83 c4 0c             	add    esp,0xc
c000ca9c:	c3                   	ret    
c000ca9d:	90                   	nop
c000ca9e:	66 90                	xchg   ax,ax

c000caa0 <HardDiskController::~HardDiskController()>:
c000caa0:	83 ec 0c             	sub    esp,0xc
c000caa3:	ba 28 17 02 c0       	mov    edx,0xc0021728
c000caa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caac:	89 10                	mov    DWORD PTR [eax],edx
c000caae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab2:	83 ec 0c             	sub    esp,0xc
c000cab5:	50                   	push   eax
c000cab6:	e8 6d fb ff ff       	call   c000c628 <Device::~Device()>
c000cabb:	83 c4 10             	add    esp,0x10
c000cabe:	90                   	nop
c000cabf:	83 c4 0c             	add    esp,0xc
c000cac2:	c3                   	ret    
c000cac3:	90                   	nop

c000cac4 <HardDiskController::~HardDiskController()>:
c000cac4:	83 ec 0c             	sub    esp,0xc
c000cac7:	83 ec 0c             	sub    esp,0xc
c000caca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cace:	e8 cd ff ff ff       	call   c000caa0 <HardDiskController::~HardDiskController()>
c000cad3:	83 c4 10             	add    esp,0x10
c000cad6:	83 ec 08             	sub    esp,0x8
c000cad9:	68 58 01 00 00       	push   0x158
c000cade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cae2:	e8 31 dd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cae7:	83 c4 10             	add    esp,0x10
c000caea:	83 c4 0c             	add    esp,0xc
c000caed:	c3                   	ret    

c000caee <PhysicalDisk::eject()>:
c000caee:	83 c8 ff             	or     eax,0xffffffff
c000caf1:	c3                   	ret    

c000caf2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000caf2:	83 ec 0c             	sub    esp,0xc
c000caf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf9:	83 ec 08             	sub    esp,0x8
c000cafc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb00:	50                   	push   eax
c000cb01:	e8 b8 fd ff ff       	call   c000c8be <Device::Device(char const*)>
c000cb06:	83 c4 10             	add    esp,0x10
c000cb09:	ba 54 17 02 c0       	mov    edx,0xc0021754
c000cb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb12:	89 10                	mov    DWORD PTR [eax],edx
c000cb14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb18:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cb40:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb4a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cb54:	90                   	nop
c000cb55:	83 c4 0c             	add    esp,0xc
c000cb58:	c3                   	ret    
c000cb59:	90                   	nop

c000cb5a <PhysicalDisk::startCache()>:
c000cb5a:	56                   	push   esi
c000cb5b:	53                   	push   ebx
c000cb5c:	83 ec 10             	sub    esp,0x10
c000cb5f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb63:	6a 44                	push   0x44
c000cb65:	e8 4c af ff ff       	call   c0007ab6 <malloc>
c000cb6a:	89 c6                	mov    esi,eax
c000cb6c:	58                   	pop    eax
c000cb6d:	5a                   	pop    edx
c000cb6e:	53                   	push   ebx
c000cb6f:	56                   	push   esi
c000cb70:	e8 7b 17 00 00       	call   c000e2f0 <VCache::VCache(PhysicalDisk*)>
c000cb75:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cb7b:	83 c4 14             	add    esp,0x14
c000cb7e:	5b                   	pop    ebx
c000cb7f:	5e                   	pop    esi
c000cb80:	c3                   	ret    
c000cb81:	90                   	nop

c000cb82 <PhysicalDisk::~PhysicalDisk()>:
c000cb82:	83 ec 0c             	sub    esp,0xc
c000cb85:	ba 54 17 02 c0       	mov    edx,0xc0021754
c000cb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb8e:	89 10                	mov    DWORD PTR [eax],edx
c000cb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb94:	83 ec 0c             	sub    esp,0xc
c000cb97:	50                   	push   eax
c000cb98:	e8 8b fa ff ff       	call   c000c628 <Device::~Device()>
c000cb9d:	83 c4 10             	add    esp,0x10
c000cba0:	90                   	nop
c000cba1:	83 c4 0c             	add    esp,0xc
c000cba4:	c3                   	ret    
c000cba5:	90                   	nop

c000cba6 <PhysicalDisk::~PhysicalDisk()>:
c000cba6:	83 ec 0c             	sub    esp,0xc
c000cba9:	83 ec 0c             	sub    esp,0xc
c000cbac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb0:	e8 cd ff ff ff       	call   c000cb82 <PhysicalDisk::~PhysicalDisk()>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	83 ec 08             	sub    esp,0x8
c000cbbb:	68 6c 01 00 00       	push   0x16c
c000cbc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc4:	e8 4f dc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cbc9:	83 c4 10             	add    esp,0x10
c000cbcc:	83 c4 0c             	add    esp,0xc
c000cbcf:	c3                   	ret    

c000cbd0 <int_handler>:
c000cbd0:	55                   	push   ebp
c000cbd1:	57                   	push   edi
c000cbd2:	56                   	push   esi
c000cbd3:	53                   	push   ebx
c000cbd4:	83 ec 0c             	sub    esp,0xc
c000cbd7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cbdb:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cbe2:	74 0b                	je     c000cbef <int_handler+0x1f>
c000cbe4:	fa                   	cli    
c000cbe5:	f4                   	hlt    
c000cbe6:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cbed:	75 f5                	jne    c000cbe4 <int_handler+0x14>
c000cbef:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cbf2:	8d 46 e0             	lea    eax,[esi-0x20]
c000cbf5:	83 f8 17             	cmp    eax,0x17
c000cbf8:	76 40                	jbe    c000cc3a <int_handler+0x6a>
c000cbfa:	c1 e6 04             	shl    esi,0x4
c000cbfd:	31 db                	xor    ebx,ebx
c000cbff:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cc05:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cc0b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cc0f:	85 c0                	test   eax,eax
c000cc11:	74 13                	je     c000cc26 <int_handler+0x56>
c000cc13:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cc16:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cc1a:	74 2c                	je     c000cc48 <int_handler+0x78>
c000cc1c:	83 ec 08             	sub    esp,0x8
c000cc1f:	52                   	push   edx
c000cc20:	57                   	push   edi
c000cc21:	ff d0                	call   eax
c000cc23:	83 c4 10             	add    esp,0x10
c000cc26:	83 c3 01             	add    ebx,0x1
c000cc29:	83 fb 04             	cmp    ebx,0x4
c000cc2c:	75 dd                	jne    c000cc0b <int_handler+0x3b>
c000cc2e:	83 c4 0c             	add    esp,0xc
c000cc31:	31 c0                	xor    eax,eax
c000cc33:	5b                   	pop    ebx
c000cc34:	31 d2                	xor    edx,edx
c000cc36:	5e                   	pop    esi
c000cc37:	5f                   	pop    edi
c000cc38:	5d                   	pop    ebp
c000cc39:	c3                   	ret    
c000cc3a:	83 ec 0c             	sub    esp,0xc
c000cc3d:	50                   	push   eax
c000cc3e:	e8 90 b3 00 00       	call   c0017fd3 <HalEndOfInterrupt(int)>
c000cc43:	83 c4 10             	add    esp,0x10
c000cc46:	eb b2                	jmp    c000cbfa <int_handler+0x2a>
c000cc48:	83 ec 08             	sub    esp,0x8
c000cc4b:	52                   	push   edx
c000cc4c:	57                   	push   edi
c000cc4d:	ff d0                	call   eax
c000cc4f:	83 c4 10             	add    esp,0x10
c000cc52:	83 c4 0c             	add    esp,0xc
c000cc55:	5b                   	pop    ebx
c000cc56:	5e                   	pop    esi
c000cc57:	5f                   	pop    edi
c000cc58:	5d                   	pop    ebp
c000cc59:	c3                   	ret    

c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cc5a:	56                   	push   esi
c000cc5b:	31 c0                	xor    eax,eax
c000cc5d:	53                   	push   ebx
c000cc5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc66:	89 ca                	mov    edx,ecx
c000cc68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc6c:	c1 e2 04             	shl    edx,0x4
c000cc6f:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cc77:	74 17                	je     c000cc90 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cc79:	83 c0 01             	add    eax,0x1
c000cc7c:	83 f8 04             	cmp    eax,0x4
c000cc7f:	75 ee                	jne    c000cc6f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cc81:	c7 44 24 0c 84 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021784
c000cc89:	5b                   	pop    ebx
c000cc8a:	5e                   	pop    esi
c000cc8b:	e9 c1 46 00 00       	jmp    c0011351 <KePanic(char const*)>
c000cc90:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cc93:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cc9a:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cca1:	5b                   	pop    ebx
c000cca2:	5e                   	pop    esi
c000cca3:	c3                   	ret    

c000cca4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cca4:	57                   	push   edi
c000cca5:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ccab:	56                   	push   esi
c000ccac:	53                   	push   ebx
c000ccad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccb5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000ccbc:	74 54                	je     c000cd12 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000ccbe:	89 c7                	mov    edi,eax
c000ccc0:	84 c0                	test   al,al
c000ccc2:	74 1d                	je     c000cce1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000ccc4:	83 fe 0f             	cmp    esi,0xf
c000ccc7:	0f 8f d5 00 00 00    	jg     c000cda2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cccd:	0f b6 b6 88 32 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcd78]
c000ccd4:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000ccdc:	d1 ef                	shr    edi,1
c000ccde:	83 e7 01             	and    edi,0x1
c000cce1:	83 ec 08             	sub    esp,0x8
c000cce4:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cce9:	31 db                	xor    ebx,ebx
c000cceb:	50                   	push   eax
c000ccec:	68 91 17 02 c0       	push   0xc0021791
c000ccf1:	e8 4f dc ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	7f 55                	jg     c000cd57 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cd02:	83 ec 0c             	sub    esp,0xc
c000cd05:	68 a8 17 02 c0       	push   0xc00217a8
c000cd0a:	e8 42 46 00 00       	call   c0011351 <KePanic(char const*)>
c000cd0f:	83 c4 10             	add    esp,0x10
c000cd12:	8d 7e 20             	lea    edi,[esi+0x20]
c000cd15:	89 f8                	mov    eax,edi
c000cd17:	31 d2                	xor    edx,edx
c000cd19:	c1 e0 04             	shl    eax,0x4
c000cd1c:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cd23:	85 c9                	test   ecx,ecx
c000cd25:	0f 84 8e 00 00 00    	je     c000cdb9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cd2b:	83 c2 01             	add    edx,0x1
c000cd2e:	83 fa 04             	cmp    edx,0x4
c000cd31:	75 e9                	jne    c000cd1c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cd33:	83 ec 0c             	sub    esp,0xc
c000cd36:	68 fc 17 02 c0       	push   0xc00217fc
c000cd3b:	e8 11 46 00 00       	call   c0011351 <KePanic(char const*)>
c000cd40:	83 c4 10             	add    esp,0x10
c000cd43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd48:	5b                   	pop    ebx
c000cd49:	5e                   	pop    esi
c000cd4a:	5f                   	pop    edi
c000cd4b:	c3                   	ret    
c000cd4c:	83 c3 01             	add    ebx,0x1
c000cd4f:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cd55:	7e ab                	jle    c000cd02 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cd57:	83 ec 08             	sub    esp,0x8
c000cd5a:	8b 04 9d e0 a0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd61:	56                   	push   esi
c000cd62:	50                   	push   eax
c000cd63:	e8 f2 19 01 00       	call   c001e75a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cd68:	83 c4 10             	add    esp,0x10
c000cd6b:	84 c0                	test   al,al
c000cd6d:	74 dd                	je     c000cd4c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cd6f:	83 ec 04             	sub    esp,0x4
c000cd72:	89 f8                	mov    eax,edi
c000cd74:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd7b:	0f b6 f8             	movzx  edi,al
c000cd7e:	57                   	push   edi
c000cd7f:	8d 7e 20             	lea    edi,[esi+0x20]
c000cd82:	6a 00                	push   0x0
c000cd84:	89 f8                	mov    eax,edi
c000cd86:	0f b6 c0             	movzx  eax,al
c000cd89:	50                   	push   eax
c000cd8a:	89 f0                	mov    eax,esi
c000cd8c:	6a 00                	push   0x0
c000cd8e:	0f b6 c0             	movzx  eax,al
c000cd91:	6a 00                	push   0x0
c000cd93:	50                   	push   eax
c000cd94:	53                   	push   ebx
c000cd95:	e8 2c 1b 01 00       	call   c001e8c6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cd9a:	83 c4 20             	add    esp,0x20
c000cd9d:	e9 73 ff ff ff       	jmp    c000cd15 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000cda2:	83 ec 0c             	sub    esp,0xc
c000cda5:	31 ff                	xor    edi,edi
c000cda7:	68 c4 17 02 c0       	push   0xc00217c4
c000cdac:	e8 a0 45 00 00       	call   c0011351 <KePanic(char const*)>
c000cdb1:	83 c4 10             	add    esp,0x10
c000cdb4:	e9 28 ff ff ff       	jmp    c000cce1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cdb9:	8d 04 ba             	lea    eax,[edx+edi*4]
c000cdbc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdc0:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000cdc7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cdcb:	5b                   	pop    ebx
c000cdcc:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cdd3:	89 f0                	mov    eax,esi
c000cdd5:	5e                   	pop    esi
c000cdd6:	5f                   	pop    edi
c000cdd7:	c3                   	ret    

c000cdd8 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cddc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cde0:	c1 e0 04             	shl    eax,0x4
c000cde3:	8d 50 10             	lea    edx,[eax+0x10]
c000cde6:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000cdec:	74 08                	je     c000cdf6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000cdee:	83 c0 04             	add    eax,0x4
c000cdf1:	39 d0                	cmp    eax,edx
c000cdf3:	75 f1                	jne    c000cde6 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000cdf5:	c3                   	ret    
c000cdf6:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce00:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce0a:	eb e2                	jmp    c000cdee <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ce0c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ce0c:	53                   	push   ebx
c000ce0d:	83 ec 08             	sub    esp,0x8
c000ce10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ce14:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce19:	74 0e                	je     c000ce29 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ce1b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce20:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce27:	75 37                	jne    c000ce60 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000ce29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2d:	83 c0 20             	add    eax,0x20
c000ce30:	c1 e0 04             	shl    eax,0x4
c000ce33:	8d 50 10             	lea    edx,[eax+0x10]
c000ce36:	39 98 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ebx
c000ce3c:	74 0c                	je     c000ce4a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000ce3e:	83 c0 04             	add    eax,0x4
c000ce41:	39 d0                	cmp    eax,edx
c000ce43:	75 f1                	jne    c000ce36 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000ce45:	83 c4 08             	add    esp,0x8
c000ce48:	5b                   	pop    ebx
c000ce49:	c3                   	ret    
c000ce4a:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce54:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce5e:	eb de                	jmp    c000ce3e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000ce60:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000ce65:	7f 11                	jg     c000ce78 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000ce67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce6b:	0f b6 80 88 32 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcd78]
c000ce72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce76:	eb b1                	jmp    c000ce29 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ce78:	83 ec 0c             	sub    esp,0xc
c000ce7b:	68 b5 17 02 c0       	push   0xc00217b5
c000ce80:	e8 cc 44 00 00       	call   c0011351 <KePanic(char const*)>
c000ce85:	83 c4 10             	add    esp,0x10
c000ce88:	eb 9f                	jmp    c000ce29 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000ce8a <setupINTS()>:
c000ce8a:	31 c0                	xor    eax,eax
c000ce8c:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce96:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cea0:	c7 80 24 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bdc],0x0
c000ceaa:	c7 80 24 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bdc],0x0
c000ceb4:	c7 80 28 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd8],0x0
c000cebe:	c7 80 28 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd8],0x0
c000cec8:	c7 80 2c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd4],0x0
c000ced2:	c7 80 2c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd4],0x0
c000cedc:	83 c0 10             	add    eax,0x10
c000cedf:	3d 00 10 00 00       	cmp    eax,0x1000
c000cee4:	75 a6                	jne    c000ce8c <setupINTS()+0x2>
c000cee6:	c3                   	ret    

c000cee7 <convertLegacyIRQNumber(int)>:
c000cee7:	83 ec 0c             	sub    esp,0xc
c000ceea:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cef4:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cefb:	74 0c                	je     c000cf09 <convertLegacyIRQNumber(int)+0x22>
c000cefd:	83 f8 0f             	cmp    eax,0xf
c000cf00:	7f 0b                	jg     c000cf0d <convertLegacyIRQNumber(int)+0x26>
c000cf02:	0f b6 80 88 32 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcd78]
c000cf09:	83 c4 0c             	add    esp,0xc
c000cf0c:	c3                   	ret    
c000cf0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf11:	83 ec 0c             	sub    esp,0xc
c000cf14:	68 c4 17 02 c0       	push   0xc00217c4
c000cf19:	e8 33 44 00 00       	call   c0011351 <KePanic(char const*)>
c000cf1e:	83 c4 10             	add    esp,0x10
c000cf21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf25:	83 c4 0c             	add    esp,0xc
c000cf28:	c3                   	ret    
c000cf29:	90                   	nop

c000cf2a <startGUI(void*)>:
c000cf2a:	55                   	push   ebp
c000cf2b:	89 e5                	mov    ebp,esp
c000cf2d:	53                   	push   ebx
c000cf2e:	83 ec 04             	sub    esp,0x4
c000cf31:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf36:	83 e8 01             	sub    eax,0x1
c000cf39:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf3e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf43:	85 c0                	test   eax,eax
c000cf45:	75 01                	jne    c000cf48 <startGUI(void*)+0x1e>
c000cf47:	fb                   	sti    
c000cf48:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf4e:	83 ec 08             	sub    esp,0x8
c000cf51:	6a 01                	push   0x1
c000cf53:	68 21 18 02 c0       	push   0xc0021821
c000cf58:	e8 4f 83 00 00       	call   c00152ac <Thr::loadDLL(char const*, bool)>
c000cf5d:	83 c4 10             	add    esp,0x10
c000cf60:	83 ec 08             	sub    esp,0x8
c000cf63:	53                   	push   ebx
c000cf64:	50                   	push   eax
c000cf65:	e8 72 85 00 00       	call   c00154dc <Thr::executeDLL(unsigned long, void*)>
c000cf6a:	83 c4 10             	add    esp,0x10
c000cf6d:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf73:	83 ec 08             	sub    esp,0x8
c000cf76:	6a 01                	push   0x1
c000cf78:	68 3b 18 02 c0       	push   0xc002183b
c000cf7d:	e8 2a 83 00 00       	call   c00152ac <Thr::loadDLL(char const*, bool)>
c000cf82:	83 c4 10             	add    esp,0x10
c000cf85:	83 ec 08             	sub    esp,0x8
c000cf88:	53                   	push   ebx
c000cf89:	50                   	push   eax
c000cf8a:	e8 4d 85 00 00       	call   c00154dc <Thr::executeDLL(unsigned long, void*)>
c000cf8f:	83 c4 10             	add    esp,0x10
c000cf92:	90                   	nop
c000cf93:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf96:	c9                   	leave  
c000cf97:	c3                   	ret    

c000cf98 <startGUIVESA(void*)>:
c000cf98:	55                   	push   ebp
c000cf99:	89 e5                	mov    ebp,esp
c000cf9b:	53                   	push   ebx
c000cf9c:	83 ec 04             	sub    esp,0x4
c000cf9f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfa4:	83 e8 01             	sub    eax,0x1
c000cfa7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cfac:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfb1:	85 c0                	test   eax,eax
c000cfb3:	75 01                	jne    c000cfb6 <startGUIVESA(void*)+0x1e>
c000cfb5:	fb                   	sti    
c000cfb6:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfbc:	83 ec 08             	sub    esp,0x8
c000cfbf:	6a 01                	push   0x1
c000cfc1:	68 59 18 02 c0       	push   0xc0021859
c000cfc6:	e8 e1 82 00 00       	call   c00152ac <Thr::loadDLL(char const*, bool)>
c000cfcb:	83 c4 10             	add    esp,0x10
c000cfce:	83 ec 08             	sub    esp,0x8
c000cfd1:	53                   	push   ebx
c000cfd2:	50                   	push   eax
c000cfd3:	e8 04 85 00 00       	call   c00154dc <Thr::executeDLL(unsigned long, void*)>
c000cfd8:	83 c4 10             	add    esp,0x10
c000cfdb:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfe1:	83 ec 08             	sub    esp,0x8
c000cfe4:	6a 01                	push   0x1
c000cfe6:	68 3b 18 02 c0       	push   0xc002183b
c000cfeb:	e8 bc 82 00 00       	call   c00152ac <Thr::loadDLL(char const*, bool)>
c000cff0:	83 c4 10             	add    esp,0x10
c000cff3:	83 ec 08             	sub    esp,0x8
c000cff6:	53                   	push   ebx
c000cff7:	50                   	push   eax
c000cff8:	e8 df 84 00 00       	call   c00154dc <Thr::executeDLL(unsigned long, void*)>
c000cffd:	83 c4 10             	add    esp,0x10
c000d000:	90                   	nop
c000d001:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d004:	c9                   	leave  
c000d005:	c3                   	ret    

c000d006 <sendKeyToTerminal(unsigned char)>:
c000d006:	55                   	push   ebp
c000d007:	89 e5                	mov    ebp,esp
c000d009:	83 ec 28             	sub    esp,0x28
c000d00c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d00f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d012:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000d017:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d01b:	83 ec 08             	sub    esp,0x8
c000d01e:	52                   	push   edx
c000d01f:	50                   	push   eax
c000d020:	e8 91 bd ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d025:	83 c4 10             	add    esp,0x10
c000d028:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d02c:	83 f8 0a             	cmp    eax,0xa
c000d02f:	74 16                	je     c000d047 <sendKeyToTerminal(unsigned char)+0x41>
c000d031:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d035:	83 f8 03             	cmp    eax,0x3
c000d038:	74 0d                	je     c000d047 <sendKeyToTerminal(unsigned char)+0x41>
c000d03a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d03e:	83 f8 1c             	cmp    eax,0x1c
c000d041:	0f 85 97 00 00 00    	jne    c000d0de <sendKeyToTerminal(unsigned char)+0xd8>
c000d047:	fa                   	cli    
c000d048:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d04d:	83 c0 01             	add    eax,0x1
c000d050:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d055:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d05a:	83 c0 01             	add    eax,0x1
c000d05d:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d062:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d067:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d06a:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d074:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d078:	74 1f                	je     c000d099 <sendKeyToTerminal(unsigned char)+0x93>
c000d07a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d07d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d080:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d083:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d086:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d089:	83 ec 0c             	sub    esp,0xc
c000d08c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d08f:	e8 90 91 00 00       	call   c0016224 <unblockTask(ThreadControlBlock*)>
c000d094:	83 c4 10             	add    esp,0x10
c000d097:	eb db                	jmp    c000d074 <sendKeyToTerminal(unsigned char)+0x6e>
c000d099:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d09e:	83 e8 01             	sub    eax,0x1
c000d0a1:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0a6:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0ab:	85 c0                	test   eax,eax
c000d0ad:	75 18                	jne    c000d0c7 <sendKeyToTerminal(unsigned char)+0xc1>
c000d0af:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d0b4:	85 c0                	test   eax,eax
c000d0b6:	74 0f                	je     c000d0c7 <sendKeyToTerminal(unsigned char)+0xc1>
c000d0b8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d0c2:	e8 45 8c 00 00       	call   c0015d0c <schedule()>
c000d0c7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0cc:	83 e8 01             	sub    eax,0x1
c000d0cf:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d0d4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0d9:	85 c0                	test   eax,eax
c000d0db:	75 01                	jne    c000d0de <sendKeyToTerminal(unsigned char)+0xd8>
c000d0dd:	fb                   	sti    
c000d0de:	90                   	nop
c000d0df:	c9                   	leave  
c000d0e0:	c3                   	ret    

c000d0e1 <sendKeyboardToken(KeyboardToken)>:
c000d0e1:	55                   	push   ebp
c000d0e2:	89 e5                	mov    ebp,esp
c000d0e4:	83 ec 18             	sub    esp,0x18
c000d0e7:	e8 b5 42 00 00       	call   c00113a1 <KeUserIOReceived()>
c000d0ec:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d0ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0f2:	0f b7 c0             	movzx  eax,ax
c000d0f5:	83 f2 01             	xor    edx,0x1
c000d0f8:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d0fe:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d103:	85 c0                	test   eax,eax
c000d105:	74 24                	je     c000d12b <sendKeyboardToken(KeyboardToken)+0x4a>
c000d107:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d10d:	83 ec 04             	sub    esp,0x4
c000d110:	68 40 84 02 c0       	push   0xc0028440
c000d115:	83 ec 08             	sub    esp,0x8
c000d118:	89 e2                	mov    edx,esp
c000d11a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d11d:	89 02                	mov    DWORD PTR [edx],eax
c000d11f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d122:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d126:	ff d1                	call   ecx
c000d128:	83 c4 10             	add    esp,0x10
c000d12b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d12f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d132:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d137:	0f b6 d2             	movzx  edx,dl
c000d13a:	0f b6 c0             	movzx  eax,al
c000d13d:	39 c2                	cmp    edx,eax
c000d13f:	74 1c                	je     c000d15d <sendKeyboardToken(KeyboardToken)+0x7c>
c000d141:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d144:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d149:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d14e:	0f b6 c0             	movzx  eax,al
c000d151:	83 ec 0c             	sub    esp,0xc
c000d154:	50                   	push   eax
c000d155:	e8 a8 b3 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d15a:	83 c4 10             	add    esp,0x10
c000d15d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d160:	0f b6 c0             	movzx  eax,al
c000d163:	85 c0                	test   eax,eax
c000d165:	0f 84 da 00 00 00    	je     c000d245 <sendKeyboardToken(KeyboardToken)+0x164>
c000d16b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d16e:	0f b7 c0             	movzx  eax,ax
c000d171:	3d 18 03 00 00       	cmp    eax,0x318
c000d176:	75 06                	jne    c000d17e <sendKeyboardToken(KeyboardToken)+0x9d>
c000d178:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d17e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d181:	0f b7 c0             	movzx  eax,ax
c000d184:	3d 19 03 00 00       	cmp    eax,0x319
c000d189:	75 06                	jne    c000d191 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d18b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d194:	0f b7 c0             	movzx  eax,ax
c000d197:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d19c:	75 06                	jne    c000d1a4 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d19e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d1a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1a7:	0f b7 c0             	movzx  eax,ax
c000d1aa:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d1af:	75 06                	jne    c000d1b7 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d1b1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d1b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ba:	0f b7 c0             	movzx  eax,ax
c000d1bd:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1c2:	75 06                	jne    c000d1ca <sendKeyboardToken(KeyboardToken)+0xe9>
c000d1c4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d1ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1cd:	0f b7 c0             	movzx  eax,ax
c000d1d0:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1d5:	75 06                	jne    c000d1dd <sendKeyboardToken(KeyboardToken)+0xfc>
c000d1d7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1e0:	0f b7 c0             	movzx  eax,ax
c000d1e3:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1e8:	75 06                	jne    c000d1f0 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d1ea:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d1f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f3:	0f b7 c0             	movzx  eax,ax
c000d1f6:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d1fb:	75 06                	jne    c000d203 <sendKeyboardToken(KeyboardToken)+0x122>
c000d1fd:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d206:	0f b7 c0             	movzx  eax,ax
c000d209:	3d 20 03 00 00       	cmp    eax,0x320
c000d20e:	75 06                	jne    c000d216 <sendKeyboardToken(KeyboardToken)+0x135>
c000d210:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d219:	0f b7 c0             	movzx  eax,ax
c000d21c:	3d 21 03 00 00       	cmp    eax,0x321
c000d221:	75 06                	jne    c000d229 <sendKeyboardToken(KeyboardToken)+0x148>
c000d223:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d22c:	0f b7 c0             	movzx  eax,ax
c000d22f:	3d 22 03 00 00       	cmp    eax,0x322
c000d234:	0f 85 f1 00 00 00    	jne    c000d32b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d23a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d240:	e9 e6 00 00 00       	jmp    c000d32b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d248:	0f b7 c0             	movzx  eax,ax
c000d24b:	3d 18 03 00 00       	cmp    eax,0x318
c000d250:	75 0a                	jne    c000d25c <sendKeyboardToken(KeyboardToken)+0x17b>
c000d252:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d258:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d25c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d25f:	0f b7 c0             	movzx  eax,ax
c000d262:	3d 19 03 00 00       	cmp    eax,0x319
c000d267:	75 0a                	jne    c000d273 <sendKeyboardToken(KeyboardToken)+0x192>
c000d269:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d26f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d276:	0f b7 c0             	movzx  eax,ax
c000d279:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d27e:	75 0a                	jne    c000d28a <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d280:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d286:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d28a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d28d:	0f b7 c0             	movzx  eax,ax
c000d290:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d295:	75 0a                	jne    c000d2a1 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d297:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d29d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a4:	0f b7 c0             	movzx  eax,ax
c000d2a7:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d2ac:	75 0a                	jne    c000d2b8 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d2ae:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d2b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2bb:	0f b7 c0             	movzx  eax,ax
c000d2be:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d2c3:	75 0a                	jne    c000d2cf <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d2c5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d2cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2d2:	0f b7 c0             	movzx  eax,ax
c000d2d5:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d2da:	75 0a                	jne    c000d2e6 <sendKeyboardToken(KeyboardToken)+0x205>
c000d2dc:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d2e2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2e9:	0f b7 c0             	movzx  eax,ax
c000d2ec:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d2f1:	75 0a                	jne    c000d2fd <sendKeyboardToken(KeyboardToken)+0x21c>
c000d2f3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d2f9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d300:	0f b7 c0             	movzx  eax,ax
c000d303:	3d 20 03 00 00       	cmp    eax,0x320
c000d308:	75 0a                	jne    c000d314 <sendKeyboardToken(KeyboardToken)+0x233>
c000d30a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d310:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d317:	0f b7 c0             	movzx  eax,ax
c000d31a:	3d 21 03 00 00       	cmp    eax,0x321
c000d31f:	75 0a                	jne    c000d32b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d321:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d327:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d32b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d32e:	0f b7 c0             	movzx  eax,ax
c000d331:	3d 00 02 00 00       	cmp    eax,0x200
c000d336:	75 2f                	jne    c000d367 <sendKeyboardToken(KeyboardToken)+0x286>
c000d338:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d33d:	83 f0 01             	xor    eax,0x1
c000d340:	0f b6 c0             	movzx  eax,al
c000d343:	85 c0                	test   eax,eax
c000d345:	74 20                	je     c000d367 <sendKeyboardToken(KeyboardToken)+0x286>
c000d347:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d34c:	6a 01                	push   0x1
c000d34e:	6a 00                	push   0x0
c000d350:	68 2a cf 00 c0       	push   0xc000cf2a
c000d355:	50                   	push   eax
c000d356:	e8 61 87 00 00       	call   c0015abc <Process::createThread(void (*)(void*), void*, int)>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d365:	eb 3a                	jmp    c000d3a1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d36a:	0f b7 c0             	movzx  eax,ax
c000d36d:	3d 01 02 00 00       	cmp    eax,0x201
c000d372:	75 2d                	jne    c000d3a1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d374:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d379:	83 f0 01             	xor    eax,0x1
c000d37c:	0f b6 c0             	movzx  eax,al
c000d37f:	85 c0                	test   eax,eax
c000d381:	74 1e                	je     c000d3a1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d383:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d388:	6a 01                	push   0x1
c000d38a:	6a 00                	push   0x0
c000d38c:	68 98 cf 00 c0       	push   0xc000cf98
c000d391:	50                   	push   eax
c000d392:	e8 25 87 00 00       	call   c0015abc <Process::createThread(void (*)(void*), void*, int)>
c000d397:	83 c4 10             	add    esp,0x10
c000d39a:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3a4:	0f b7 c0             	movzx  eax,ax
c000d3a7:	3d 25 03 00 00       	cmp    eax,0x325
c000d3ac:	75 06                	jne    c000d3b4 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d3ae:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d3b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3b7:	0f b7 c0             	movzx  eax,ax
c000d3ba:	3d 24 03 00 00       	cmp    eax,0x324
c000d3bf:	75 06                	jne    c000d3c7 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d3c1:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d3c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ca:	0f b7 c0             	movzx  eax,ax
c000d3cd:	3d 23 03 00 00       	cmp    eax,0x323
c000d3d2:	75 06                	jne    c000d3da <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d3d4:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d3da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3dd:	0f b7 c0             	movzx  eax,ax
c000d3e0:	3d 26 03 00 00       	cmp    eax,0x326
c000d3e5:	75 06                	jne    c000d3ed <sendKeyboardToken(KeyboardToken)+0x30c>
c000d3e7:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f0:	0f b7 c0             	movzx  eax,ax
c000d3f3:	3d 27 03 00 00       	cmp    eax,0x327
c000d3f8:	75 06                	jne    c000d400 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d3fa:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d403:	0f b7 c0             	movzx  eax,ax
c000d406:	3d 22 03 00 00       	cmp    eax,0x322
c000d40b:	75 06                	jne    c000d413 <sendKeyboardToken(KeyboardToken)+0x332>
c000d40d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d413:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d417:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d41a:	83 f0 01             	xor    eax,0x1
c000d41d:	0f b6 c0             	movzx  eax,al
c000d420:	85 c0                	test   eax,eax
c000d422:	74 7c                	je     c000d4a0 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d424:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d429:	0f b6 c0             	movzx  eax,al
c000d42c:	85 c0                	test   eax,eax
c000d42e:	74 43                	je     c000d473 <sendKeyboardToken(KeyboardToken)+0x392>
c000d430:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d434:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d438:	85 c0                	test   eax,eax
c000d43a:	74 2b                	je     c000d467 <sendKeyboardToken(KeyboardToken)+0x386>
c000d43c:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d442:	89 d0                	mov    eax,edx
c000d444:	c1 e0 02             	shl    eax,0x2
c000d447:	01 d0                	add    eax,edx
c000d449:	01 c0                	add    eax,eax
c000d44b:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d453:	0f b7 c0             	movzx  eax,ax
c000d456:	8d 50 d0             	lea    edx,[eax-0x30]
c000d459:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d45e:	01 d0                	add    eax,edx
c000d460:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d465:	eb 71                	jmp    c000d4d8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d467:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d471:	eb 65                	jmp    c000d4d8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d473:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d478:	85 c0                	test   eax,eax
c000d47a:	74 18                	je     c000d494 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d47c:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d481:	0f b6 c0             	movzx  eax,al
c000d484:	83 ec 0c             	sub    esp,0xc
c000d487:	50                   	push   eax
c000d488:	e8 79 fb ff ff       	call   c000d006 <sendKeyToTerminal(unsigned char)>
c000d48d:	83 c4 10             	add    esp,0x10
c000d490:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d494:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d49e:	eb 38                	jmp    c000d4d8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a3:	0f b7 c0             	movzx  eax,ax
c000d4a6:	3d 01 01 00 00       	cmp    eax,0x101
c000d4ab:	75 2b                	jne    c000d4d8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4ad:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4b2:	85 c0                	test   eax,eax
c000d4b4:	74 18                	je     c000d4ce <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d4b6:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4bb:	0f b6 c0             	movzx  eax,al
c000d4be:	83 ec 0c             	sub    esp,0xc
c000d4c1:	50                   	push   eax
c000d4c2:	e8 3f fb ff ff       	call   c000d006 <sendKeyToTerminal(unsigned char)>
c000d4c7:	83 c4 10             	add    esp,0x10
c000d4ca:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4ce:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4d8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d4db:	83 f0 01             	xor    eax,0x1
c000d4de:	0f b6 c0             	movzx  eax,al
c000d4e1:	85 c0                	test   eax,eax
c000d4e3:	74 5a                	je     c000d53f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4e5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4e8:	83 f0 01             	xor    eax,0x1
c000d4eb:	0f b6 c0             	movzx  eax,al
c000d4ee:	85 c0                	test   eax,eax
c000d4f0:	74 4d                	je     c000d53f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4f2:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d4f7:	83 f0 01             	xor    eax,0x1
c000d4fa:	0f b6 c0             	movzx  eax,al
c000d4fd:	85 c0                	test   eax,eax
c000d4ff:	74 3e                	je     c000d53f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d504:	0f b7 c0             	movzx  eax,ax
c000d507:	83 f8 1f             	cmp    eax,0x1f
c000d50a:	76 0b                	jbe    c000d517 <sendKeyboardToken(KeyboardToken)+0x436>
c000d50c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50f:	0f b7 c0             	movzx  eax,ax
c000d512:	83 f8 7e             	cmp    eax,0x7e
c000d515:	76 16                	jbe    c000d52d <sendKeyboardToken(KeyboardToken)+0x44c>
c000d517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d51a:	0f b7 c0             	movzx  eax,ax
c000d51d:	83 f8 0a             	cmp    eax,0xa
c000d520:	74 0b                	je     c000d52d <sendKeyboardToken(KeyboardToken)+0x44c>
c000d522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d525:	0f b7 c0             	movzx  eax,ax
c000d528:	83 f8 08             	cmp    eax,0x8
c000d52b:	75 12                	jne    c000d53f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d52d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d530:	0f b6 c0             	movzx  eax,al
c000d533:	83 ec 0c             	sub    esp,0xc
c000d536:	50                   	push   eax
c000d537:	e8 ca fa ff ff       	call   c000d006 <sendKeyToTerminal(unsigned char)>
c000d53c:	83 c4 10             	add    esp,0x10
c000d53f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d542:	83 f0 01             	xor    eax,0x1
c000d545:	0f b6 c0             	movzx  eax,al
c000d548:	85 c0                	test   eax,eax
c000d54a:	74 5d                	je     c000d5a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d54c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d54f:	83 f0 01             	xor    eax,0x1
c000d552:	0f b6 c0             	movzx  eax,al
c000d555:	85 c0                	test   eax,eax
c000d557:	74 50                	je     c000d5a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d559:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d55e:	0f b6 c0             	movzx  eax,al
c000d561:	85 c0                	test   eax,eax
c000d563:	74 44                	je     c000d5a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d568:	0f b7 c0             	movzx  eax,ax
c000d56b:	83 f8 3f             	cmp    eax,0x3f
c000d56e:	76 39                	jbe    c000d5a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d573:	0f b7 c0             	movzx  eax,ax
c000d576:	83 f8 7f             	cmp    eax,0x7f
c000d579:	77 2e                	ja     c000d5a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d57b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d57e:	88 c2                	mov    dl,al
c000d580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d583:	0f b7 c0             	movzx  eax,ax
c000d586:	83 f8 5f             	cmp    eax,0x5f
c000d589:	76 04                	jbe    c000d58f <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d58b:	b0 20                	mov    al,0x20
c000d58d:	eb 02                	jmp    c000d591 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d58f:	b0 00                	mov    al,0x0
c000d591:	89 d1                	mov    ecx,edx
c000d593:	29 c1                	sub    ecx,eax
c000d595:	89 c8                	mov    eax,ecx
c000d597:	83 e8 40             	sub    eax,0x40
c000d59a:	0f b6 c0             	movzx  eax,al
c000d59d:	83 ec 0c             	sub    esp,0xc
c000d5a0:	50                   	push   eax
c000d5a1:	e8 60 fa ff ff       	call   c000d006 <sendKeyToTerminal(unsigned char)>
c000d5a6:	83 c4 10             	add    esp,0x10
c000d5a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ac:	0f b7 c0             	movzx  eax,ax
c000d5af:	3d 00 03 00 00       	cmp    eax,0x300
c000d5b4:	75 12                	jne    c000d5c8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5b6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d5b9:	83 f0 01             	xor    eax,0x1
c000d5bc:	0f b6 c0             	movzx  eax,al
c000d5bf:	85 c0                	test   eax,eax
c000d5c1:	74 05                	je     c000d5c8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5c3:	e8 3b af ff ff       	call   c0008503 <doTerminalCycle()>
c000d5c8:	90                   	nop
c000d5c9:	c9                   	leave  
c000d5ca:	c3                   	ret    

c000d5cb <clearInternalKeybuffer(VgaText*)>:
c000d5cb:	55                   	push   ebp
c000d5cc:	89 e5                	mov    ebp,esp
c000d5ce:	83 ec 08             	sub    esp,0x8
c000d5d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d4:	05 02 01 00 00       	add    eax,0x102
c000d5d9:	83 ec 0c             	sub    esp,0xc
c000d5dc:	50                   	push   eax
c000d5dd:	e8 8e 2f ff ff       	call   c0000570 <strlen>
c000d5e2:	83 c4 10             	add    esp,0x10
c000d5e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5e8:	81 c2 02 01 00 00    	add    edx,0x102
c000d5ee:	83 ec 04             	sub    esp,0x4
c000d5f1:	50                   	push   eax
c000d5f2:	6a 00                	push   0x0
c000d5f4:	52                   	push   edx
c000d5f5:	e8 f6 2e ff ff       	call   c00004f0 <memset>
c000d5fa:	83 c4 10             	add    esp,0x10
c000d5fd:	90                   	nop
c000d5fe:	c9                   	leave  
c000d5ff:	c3                   	ret    

c000d600 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d600:	55                   	push   ebp
c000d601:	89 e5                	mov    ebp,esp
c000d603:	83 ec 18             	sub    esp,0x18
c000d606:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d60b:	85 c0                	test   eax,eax
c000d60d:	74 2a                	je     c000d639 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d60f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d615:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d61b:	83 ec 04             	sub    esp,0x4
c000d61e:	68 40 84 02 c0       	push   0xc0028440
c000d623:	83 ec 08             	sub    esp,0x8
c000d626:	89 e2                	mov    edx,esp
c000d628:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d62b:	89 02                	mov    DWORD PTR [edx],eax
c000d62d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d630:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d634:	ff d1                	call   ecx
c000d636:	83 c4 10             	add    esp,0x10
c000d639:	fb                   	sti    
c000d63a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d641:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d645:	0f 84 0d 01 00 00    	je     c000d758 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d64b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d64e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d654:	0f be c0             	movsx  eax,al
c000d657:	85 c0                	test   eax,eax
c000d659:	75 2c                	jne    c000d687 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d65b:	fa                   	cli    
c000d65c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d661:	83 c0 01             	add    eax,0x1
c000d664:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d669:	e8 9e 86 00 00       	call   c0015d0c <schedule()>
c000d66e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d673:	83 e8 01             	sub    eax,0x1
c000d676:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d67b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d680:	85 c0                	test   eax,eax
c000d682:	75 c7                	jne    c000d64b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d684:	fb                   	sti    
c000d685:	eb c4                	jmp    c000d64b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d687:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d68a:	8d 50 01             	lea    edx,[eax+0x1]
c000d68d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d690:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d693:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d699:	88 10                	mov    BYTE PTR [eax],dl
c000d69b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d69e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d6a4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d6a7:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6ab:	83 f8 03             	cmp    eax,0x3
c000d6ae:	75 1e                	jne    c000d6ce <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d6b0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6ba:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6c0:	83 ec 08             	sub    esp,0x8
c000d6c3:	6a 02                	push   0x2
c000d6c5:	50                   	push   eax
c000d6c6:	e8 27 41 00 00       	call   c00117f2 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6d2:	83 f8 1c             	cmp    eax,0x1c
c000d6d5:	75 1e                	jne    c000d6f5 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d6d7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6e1:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6e7:	83 ec 08             	sub    esp,0x8
c000d6ea:	6a 09                	push   0x9
c000d6ec:	50                   	push   eax
c000d6ed:	e8 00 41 00 00       	call   c00117f2 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6f2:	83 c4 10             	add    esp,0x10
c000d6f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f8:	05 02 01 00 00       	add    eax,0x102
c000d6fd:	83 ec 0c             	sub    esp,0xc
c000d700:	50                   	push   eax
c000d701:	e8 6a 2e ff ff       	call   c0000570 <strlen>
c000d706:	83 c4 10             	add    esp,0x10
c000d709:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d70c:	81 c2 02 01 00 00    	add    edx,0x102
c000d712:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d715:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d718:	81 c2 02 01 00 00    	add    edx,0x102
c000d71e:	83 ec 04             	sub    esp,0x4
c000d721:	50                   	push   eax
c000d722:	51                   	push   ecx
c000d723:	52                   	push   edx
c000d724:	e8 a7 2c ff ff       	call   c00003d0 <memmove>
c000d729:	83 c4 10             	add    esp,0x10
c000d72c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d730:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d734:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d738:	83 f8 0a             	cmp    eax,0xa
c000d73b:	74 16                	je     c000d753 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d73d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d741:	83 f8 03             	cmp    eax,0x3
c000d744:	74 0d                	je     c000d753 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d746:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d74a:	83 f8 1c             	cmp    eax,0x1c
c000d74d:	0f 85 ee fe ff ff    	jne    c000d641 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d753:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d756:	eb 03                	jmp    c000d75b <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d758:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d75b:	c9                   	leave  
c000d75c:	c3                   	ret    
c000d75d:	90                   	nop

c000d75e <Keyboard::Keyboard(char const*)>:
c000d75e:	83 ec 0c             	sub    esp,0xc
c000d761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d765:	83 ec 08             	sub    esp,0x8
c000d768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d76c:	50                   	push   eax
c000d76d:	e8 4c f1 ff ff       	call   c000c8be <Device::Device(char const*)>
c000d772:	83 c4 10             	add    esp,0x10
c000d775:	ba 7c 18 02 c0       	mov    edx,0xc002187c
c000d77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d77e:	89 10                	mov    DWORD PTR [eax],edx
c000d780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d784:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d78e:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d795:	90                   	nop
c000d796:	83 c4 0c             	add    esp,0xc
c000d799:	c3                   	ret    

c000d79a <Keyboard::~Keyboard()>:
c000d79a:	83 ec 0c             	sub    esp,0xc
c000d79d:	ba 7c 18 02 c0       	mov    edx,0xc002187c
c000d7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a6:	89 10                	mov    DWORD PTR [eax],edx
c000d7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ac:	83 ec 0c             	sub    esp,0xc
c000d7af:	50                   	push   eax
c000d7b0:	e8 73 ee ff ff       	call   c000c628 <Device::~Device()>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	90                   	nop
c000d7b9:	83 c4 0c             	add    esp,0xc
c000d7bc:	c3                   	ret    
c000d7bd:	90                   	nop

c000d7be <Keyboard::~Keyboard()>:
c000d7be:	83 ec 0c             	sub    esp,0xc
c000d7c1:	83 ec 0c             	sub    esp,0xc
c000d7c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c8:	e8 cd ff ff ff       	call   c000d79a <Keyboard::~Keyboard()>
c000d7cd:	83 c4 10             	add    esp,0x10
c000d7d0:	83 ec 08             	sub    esp,0x8
c000d7d3:	68 5c 01 00 00       	push   0x15c
c000d7d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7dc:	e8 37 d0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d7e1:	83 c4 10             	add    esp,0x10
c000d7e4:	83 c4 0c             	add    esp,0xc
c000d7e7:	c3                   	ret    

c000d7e8 <LogicalDisk::close(int, int, void*)>:
c000d7e8:	83 c8 ff             	or     eax,0xffffffff
c000d7eb:	c3                   	ret    

c000d7ec <LogicalDisk::~LogicalDisk()>:
c000d7ec:	83 ec 0c             	sub    esp,0xc
c000d7ef:	ba f4 18 02 c0       	mov    edx,0xc00218f4
c000d7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f8:	89 10                	mov    DWORD PTR [eax],edx
c000d7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fe:	83 ec 0c             	sub    esp,0xc
c000d801:	50                   	push   eax
c000d802:	e8 21 ee ff ff       	call   c000c628 <Device::~Device()>
c000d807:	83 c4 10             	add    esp,0x10
c000d80a:	90                   	nop
c000d80b:	83 c4 0c             	add    esp,0xc
c000d80e:	c3                   	ret    
c000d80f:	90                   	nop

c000d810 <LogicalDisk::~LogicalDisk()>:
c000d810:	83 ec 0c             	sub    esp,0xc
c000d813:	83 ec 0c             	sub    esp,0xc
c000d816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81a:	e8 cd ff ff ff       	call   c000d7ec <LogicalDisk::~LogicalDisk()>
c000d81f:	83 c4 10             	add    esp,0x10
c000d822:	83 ec 08             	sub    esp,0x8
c000d825:	68 78 01 00 00       	push   0x178
c000d82a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d82e:	e8 e5 cf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d833:	83 c4 10             	add    esp,0x10
c000d836:	83 c4 0c             	add    esp,0xc
c000d839:	c3                   	ret    

c000d83a <LogicalDisk::open(int, int, void*)>:
c000d83a:	83 ec 18             	sub    esp,0x18
c000d83d:	68 a8 18 02 c0       	push   0xc00218a8
c000d842:	e8 0a 3b 00 00       	call   c0011351 <KePanic(char const*)>
c000d847:	83 c8 ff             	or     eax,0xffffffff
c000d84a:	83 c4 1c             	add    esp,0x1c
c000d84d:	c3                   	ret    

c000d84e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d84e:	53                   	push   ebx
c000d84f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d853:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d857:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d85b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d861:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d867:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d86d:	77 10                	ja     c000d87f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d86f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d875:	89 d3                	mov    ebx,edx
c000d877:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d87d:	72 05                	jb     c000d884 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d87f:	83 c8 ff             	or     eax,0xffffffff
c000d882:	89 c2                	mov    edx,eax
c000d884:	5b                   	pop    ebx
c000d885:	c3                   	ret    

c000d886 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d886:	56                   	push   esi
c000d887:	83 c8 ff             	or     eax,0xffffffff
c000d88a:	53                   	push   ebx
c000d88b:	89 c2                	mov    edx,eax
c000d88d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d891:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d895:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d899:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d89f:	77 27                	ja     c000d8c8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8a1:	89 d8                	mov    eax,ebx
c000d8a3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d8a9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d8af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d8b4:	89 c2                	mov    edx,eax
c000d8b6:	73 10                	jae    c000d8c8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8b8:	89 c8                	mov    eax,ecx
c000d8ba:	89 da                	mov    edx,ebx
c000d8bc:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d8c2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d8c8:	5b                   	pop    ebx
c000d8c9:	5e                   	pop    esi
c000d8ca:	c3                   	ret    
c000d8cb:	90                   	nop

c000d8cc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d8cc:	83 ec 1c             	sub    esp,0x1c
c000d8cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d8e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d8e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d8ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d8ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8f2:	83 ec 08             	sub    esp,0x8
c000d8f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d8f9:	50                   	push   eax
c000d8fa:	e8 bf ef ff ff       	call   c000c8be <Device::Device(char const*)>
c000d8ff:	83 c4 10             	add    esp,0x10
c000d902:	ba f4 18 02 c0       	mov    edx,0xc00218f4
c000d907:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d90b:	89 10                	mov    DWORD PTR [eax],edx
c000d90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d911:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d91c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d927:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d92e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d932:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d93c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d940:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d944:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d948:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d94e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d954:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d95b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d95f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d965:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d96b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d96f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d973:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d987:	90                   	nop
c000d988:	83 c4 1c             	add    esp,0x1c
c000d98b:	c3                   	ret    

c000d98c <LogicalDisk::assignDriveLetter()>:
c000d98c:	55                   	push   ebp
c000d98d:	57                   	push   edi
c000d98e:	56                   	push   esi
c000d98f:	53                   	push   ebx
c000d990:	83 ec 14             	sub    esp,0x14
c000d993:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d997:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d99d:	b0 41                	mov    al,0x41
c000d99f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d9a5:	84 d2                	test   dl,dl
c000d9a7:	75 02                	jne    c000d9ab <LogicalDisk::assignDriveLetter()+0x1f>
c000d9a9:	b0 43                	mov    al,0x43
c000d9ab:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d9b1:	0f b6 ca             	movzx  ecx,dl
c000d9b4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d9b8:	0f be e8             	movsx  ebp,al
c000d9bb:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d9c1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d9c5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d9c9:	3c 43                	cmp    al,0x43
c000d9cb:	75 10                	jne    c000d9dd <LogicalDisk::assignDriveLetter()+0x51>
c000d9cd:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d9d4:	75 5a                	jne    c000da30 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9d6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d9db:	75 53                	jne    c000da30 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9dd:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d9e0:	ba 01 00 00 00       	mov    edx,0x1
c000d9e5:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9e8:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d9eb:	d3 e2                	shl    edx,cl
c000d9ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d9f1:	89 d7                	mov    edi,edx
c000d9f3:	89 d6                	mov    esi,edx
c000d9f5:	c1 ff 1f             	sar    edi,0x1f
c000d9f8:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d9fc:	21 f9                	and    ecx,edi
c000d9fe:	09 d1                	or     ecx,edx
c000da00:	75 2e                	jne    c000da30 <LogicalDisk::assignDriveLetter()+0xa4>
c000da02:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000da06:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da0a:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000da10:	09 f2                	or     edx,esi
c000da12:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da15:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000da1b:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000da22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da26:	09 fa                	or     edx,edi
c000da28:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da2e:	eb 0d                	jmp    c000da3d <LogicalDisk::assignDriveLetter()+0xb1>
c000da30:	8d 50 01             	lea    edx,[eax+0x1]
c000da33:	45                   	inc    ebp
c000da34:	88 d0                	mov    al,dl
c000da36:	80 fa 5b             	cmp    dl,0x5b
c000da39:	75 8e                	jne    c000d9c9 <LogicalDisk::assignDriveLetter()+0x3d>
c000da3b:	31 c0                	xor    eax,eax
c000da3d:	83 c4 14             	add    esp,0x14
c000da40:	5b                   	pop    ebx
c000da41:	5e                   	pop    esi
c000da42:	5f                   	pop    edi
c000da43:	5d                   	pop    ebp
c000da44:	c3                   	ret    
c000da45:	90                   	nop

c000da46 <LogicalDisk::mount()>:
c000da46:	56                   	push   esi
c000da47:	53                   	push   ebx
c000da48:	53                   	push   ebx
c000da49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da4d:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000da53:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000da5d:	85 db                	test   ebx,ebx
c000da5f:	74 27                	je     c000da88 <LogicalDisk::mount()+0x42>
c000da61:	51                   	push   ecx
c000da62:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000da69:	8b 13                	mov    edx,DWORD PTR [ebx]
c000da6b:	83 e8 41             	sub    eax,0x41
c000da6e:	50                   	push   eax
c000da6f:	56                   	push   esi
c000da70:	53                   	push   ebx
c000da71:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000da74:	83 c4 10             	add    esp,0x10
c000da77:	84 c0                	test   al,al
c000da79:	74 08                	je     c000da83 <LogicalDisk::mount()+0x3d>
c000da7b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000da81:	eb 07                	jmp    c000da8a <LogicalDisk::mount()+0x44>
c000da83:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000da86:	eb d5                	jmp    c000da5d <LogicalDisk::mount()+0x17>
c000da88:	31 c0                	xor    eax,eax
c000da8a:	5a                   	pop    edx
c000da8b:	5b                   	pop    ebx
c000da8c:	5e                   	pop    esi
c000da8d:	c3                   	ret    

c000da8e <LogicalDisk::unmount()>:
c000da8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da92:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000da9c:	c3                   	ret    
c000da9d:	90                   	nop

c000da9e <LogicalDisk::eject()>:
c000da9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daa2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000daa8:	8b 10                	mov    edx,DWORD PTR [eax]
c000daaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000daae:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dab1:	90                   	nop

c000dab2 <LogicalDisk::unassignDriveLetter()>:
c000dab2:	57                   	push   edi
c000dab3:	56                   	push   esi
c000dab4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dab8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dabf:	85 c9                	test   ecx,ecx
c000dac1:	75 0f                	jne    c000dad2 <LogicalDisk::unassignDriveLetter()+0x20>
c000dac3:	c7 44 24 0c cc 18 02 c0 	mov    DWORD PTR [esp+0xc],0xc00218cc
c000dacb:	5e                   	pop    esi
c000dacc:	5f                   	pop    edi
c000dacd:	e9 7f 38 00 00       	jmp    c0011351 <KePanic(char const*)>
c000dad2:	83 e9 41             	sub    ecx,0x41
c000dad5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dadc:	b8 01 00 00 00       	mov    eax,0x1
c000dae1:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000daec:	d3 e0                	shl    eax,cl
c000daee:	89 c7                	mov    edi,eax
c000daf0:	f7 d0                	not    eax
c000daf2:	c1 ff 1f             	sar    edi,0x1f
c000daf5:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000dafb:	89 fe                	mov    esi,edi
c000dafd:	f7 d6                	not    esi
c000daff:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000db05:	5e                   	pop    esi
c000db06:	5f                   	pop    edi
c000db07:	c3                   	ret    

c000db08 <LogicalDisk::read(unsigned long long, int, void*)>:
c000db08:	57                   	push   edi
c000db09:	56                   	push   esi
c000db0a:	53                   	push   ebx
c000db0b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db13:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db1b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db21:	77 41                	ja     c000db64 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000db23:	99                   	cdq    
c000db24:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db2a:	01 c8                	add    eax,ecx
c000db2c:	11 da                	adc    edx,ebx
c000db2e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db34:	19 d7                	sbb    edi,edx
c000db36:	72 33                	jb     c000db6b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000db38:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db3e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db44:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db48:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db4c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db52:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db5c:	5b                   	pop    ebx
c000db5d:	5e                   	pop    esi
c000db5e:	5f                   	pop    edi
c000db5f:	e9 c6 0a 00 00       	jmp    c000e62a <VCache::read(unsigned long long, int, void*)>
c000db64:	b8 05 00 00 00       	mov    eax,0x5
c000db69:	eb 05                	jmp    c000db70 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000db6b:	b8 07 00 00 00       	mov    eax,0x7
c000db70:	5b                   	pop    ebx
c000db71:	5e                   	pop    esi
c000db72:	5f                   	pop    edi
c000db73:	c3                   	ret    

c000db74 <LogicalDisk::write(unsigned long long, int, void*)>:
c000db74:	57                   	push   edi
c000db75:	56                   	push   esi
c000db76:	53                   	push   ebx
c000db77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db7f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db87:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db8d:	77 41                	ja     c000dbd0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000db8f:	99                   	cdq    
c000db90:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db96:	01 c8                	add    eax,ecx
c000db98:	11 da                	adc    edx,ebx
c000db9a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dba0:	19 d7                	sbb    edi,edx
c000dba2:	72 33                	jb     c000dbd7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dba4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dbaa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dbb0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dbb4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbb8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dbbe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbc8:	5b                   	pop    ebx
c000dbc9:	5e                   	pop    esi
c000dbca:	5f                   	pop    edi
c000dbcb:	e9 6c 09 00 00       	jmp    c000e53c <VCache::write(unsigned long long, int, void*)>
c000dbd0:	b8 05 00 00 00       	mov    eax,0x5
c000dbd5:	eb 05                	jmp    c000dbdc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dbd7:	b8 07 00 00 00       	mov    eax,0x7
c000dbdc:	5b                   	pop    ebx
c000dbdd:	5e                   	pop    esi
c000dbde:	5f                   	pop    edi
c000dbdf:	c3                   	ret    

c000dbe0 <Mouse::Mouse(char const*)>:
c000dbe0:	83 ec 0c             	sub    esp,0xc
c000dbe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbe7:	83 ec 08             	sub    esp,0x8
c000dbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbee:	50                   	push   eax
c000dbef:	e8 ca ec ff ff       	call   c000c8be <Device::Device(char const*)>
c000dbf4:	83 c4 10             	add    esp,0x10
c000dbf7:	ba 20 19 02 c0       	mov    edx,0xc0021920
c000dbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc00:	89 10                	mov    DWORD PTR [eax],edx
c000dc02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc06:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dc10:	90                   	nop
c000dc11:	83 c4 0c             	add    esp,0xc
c000dc14:	c3                   	ret    
c000dc15:	90                   	nop
c000dc16:	66 90                	xchg   ax,ax

c000dc18 <Mouse::~Mouse()>:
c000dc18:	83 ec 0c             	sub    esp,0xc
c000dc1b:	ba 20 19 02 c0       	mov    edx,0xc0021920
c000dc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc24:	89 10                	mov    DWORD PTR [eax],edx
c000dc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc2a:	83 ec 0c             	sub    esp,0xc
c000dc2d:	50                   	push   eax
c000dc2e:	e8 f5 e9 ff ff       	call   c000c628 <Device::~Device()>
c000dc33:	83 c4 10             	add    esp,0x10
c000dc36:	90                   	nop
c000dc37:	83 c4 0c             	add    esp,0xc
c000dc3a:	c3                   	ret    
c000dc3b:	90                   	nop

c000dc3c <Mouse::~Mouse()>:
c000dc3c:	83 ec 0c             	sub    esp,0xc
c000dc3f:	83 ec 0c             	sub    esp,0xc
c000dc42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc46:	e8 cd ff ff ff       	call   c000dc18 <Mouse::~Mouse()>
c000dc4b:	83 c4 10             	add    esp,0x10
c000dc4e:	83 ec 08             	sub    esp,0x8
c000dc51:	68 58 01 00 00       	push   0x158
c000dc56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc5a:	e8 b9 cb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dc5f:	83 c4 10             	add    esp,0x10
c000dc62:	83 c4 0c             	add    esp,0xc
c000dc65:	c3                   	ret    

c000dc66 <NIC::getMAC()>:
c000dc66:	31 c0                	xor    eax,eax
c000dc68:	31 d2                	xor    edx,edx
c000dc6a:	c3                   	ret    
c000dc6b:	90                   	nop

c000dc6c <NIC::write(int, unsigned char*, int*)>:
c000dc6c:	b8 01 00 00 00       	mov    eax,0x1
c000dc71:	c3                   	ret    

c000dc72 <NIC::NIC(char const*)>:
c000dc72:	83 ec 0c             	sub    esp,0xc
c000dc75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc79:	83 ec 08             	sub    esp,0x8
c000dc7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc80:	50                   	push   eax
c000dc81:	e8 38 ec ff ff       	call   c000c8be <Device::Device(char const*)>
c000dc86:	83 c4 10             	add    esp,0x10
c000dc89:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c000dc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc92:	89 10                	mov    DWORD PTR [eax],edx
c000dc94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc98:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dca2:	90                   	nop
c000dca3:	83 c4 0c             	add    esp,0xc
c000dca6:	c3                   	ret    
c000dca7:	90                   	nop

c000dca8 <NIC::~NIC()>:
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c000dcb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcb4:	89 10                	mov    DWORD PTR [eax],edx
c000dcb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcba:	83 ec 0c             	sub    esp,0xc
c000dcbd:	50                   	push   eax
c000dcbe:	e8 65 e9 ff ff       	call   c000c628 <Device::~Device()>
c000dcc3:	83 c4 10             	add    esp,0x10
c000dcc6:	90                   	nop
c000dcc7:	83 c4 0c             	add    esp,0xc
c000dcca:	c3                   	ret    
c000dccb:	90                   	nop

c000dccc <NIC::~NIC()>:
c000dccc:	83 ec 0c             	sub    esp,0xc
c000dccf:	83 ec 0c             	sub    esp,0xc
c000dcd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcd6:	e8 cd ff ff ff       	call   c000dca8 <NIC::~NIC()>
c000dcdb:	83 c4 10             	add    esp,0x10
c000dcde:	83 ec 08             	sub    esp,0x8
c000dce1:	68 58 01 00 00       	push   0x158
c000dce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcea:	e8 29 cb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dcef:	83 c4 10             	add    esp,0x10
c000dcf2:	83 c4 0c             	add    esp,0xc
c000dcf5:	c3                   	ret    

c000dcf6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dcf6:	55                   	push   ebp
c000dcf7:	57                   	push   edi
c000dcf8:	56                   	push   esi
c000dcf9:	53                   	push   ebx
c000dcfa:	81 ec 28 01 00 00    	sub    esp,0x128
c000dd00:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dd07:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dd0e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dd15:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dd1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd20:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd24:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd2b:	e8 8a ec ff ff       	call   c000c9ba <Device::getName()>
c000dd30:	5a                   	pop    edx
c000dd31:	59                   	pop    ecx
c000dd32:	50                   	push   eax
c000dd33:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dd37:	55                   	push   ebp
c000dd38:	e8 03 29 ff ff       	call   c0000640 <strcpy>
c000dd3d:	5b                   	pop    ebx
c000dd3e:	58                   	pop    eax
c000dd3f:	68 78 19 02 c0       	push   0xc0021978
c000dd44:	55                   	push   ebp
c000dd45:	e8 f6 2a ff ff       	call   c0000840 <strcat>
c000dd4a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dd51:	e8 60 9d ff ff       	call   c0007ab6 <malloc>
c000dd56:	83 c4 0c             	add    esp,0xc
c000dd59:	89 c3                	mov    ebx,eax
c000dd5b:	57                   	push   edi
c000dd5c:	56                   	push   esi
c000dd5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd65:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dd6c:	55                   	push   ebp
c000dd6d:	50                   	push   eax
c000dd6e:	e8 59 fb ff ff       	call   c000d8cc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd73:	83 c4 14             	add    esp,0x14
c000dd76:	53                   	push   ebx
c000dd77:	e8 10 fc ff ff       	call   c000d98c <LogicalDisk::assignDriveLetter()>
c000dd7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd7f:	e8 c2 fc ff ff       	call   c000da46 <LogicalDisk::mount()>
c000dd84:	58                   	pop    eax
c000dd85:	5a                   	pop    edx
c000dd86:	53                   	push   ebx
c000dd87:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd8e:	e8 93 e9 ff ff       	call   c000c726 <Device::addChild(Device*)>
c000dd93:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dd99:	5b                   	pop    ebx
c000dd9a:	5e                   	pop    esi
c000dd9b:	5f                   	pop    edi
c000dd9c:	5d                   	pop    ebp
c000dd9d:	c3                   	ret    

c000dd9e <createPartitionsForDisk(PhysicalDisk*)>:
c000dd9e:	55                   	push   ebp
c000dd9f:	57                   	push   edi
c000dda0:	56                   	push   esi
c000dda1:	53                   	push   ebx
c000dda2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dda8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ddaf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ddb5:	3d 00 02 00 00       	cmp    eax,0x200
c000ddba:	74 27                	je     c000dde3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ddbc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ddc2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ddc8:	83 ec 10             	sub    esp,0x10
c000ddcb:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ddcf:	99                   	cdq    
c000ddd0:	c1 e6 0a             	shl    esi,0xa
c000ddd3:	52                   	push   edx
c000ddd4:	89 fd                	mov    ebp,edi
c000ddd6:	50                   	push   eax
c000ddd7:	55                   	push   ebp
c000ddd8:	56                   	push   esi
c000ddd9:	e8 a2 15 01 00       	call   c001f380 <__udivdi3>
c000ddde:	e9 b9 00 00 00       	jmp    c000de9c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dde3:	83 ec 0c             	sub    esp,0xc
c000dde6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dde8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ddec:	56                   	push   esi
c000dded:	6a 01                	push   0x1
c000ddef:	6a 00                	push   0x0
c000ddf1:	6a 00                	push   0x0
c000ddf3:	53                   	push   ebx
c000ddf4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ddf7:	83 c4 20             	add    esp,0x20
c000ddfa:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000de02:	75 0a                	jne    c000de0e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000de04:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000de0c:	74 2c                	je     c000de3a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000de0e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de14:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de1a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de20:	83 ec 10             	sub    esp,0x10
c000de23:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de27:	89 f7                	mov    edi,esi
c000de29:	c1 e0 0a             	shl    eax,0xa
c000de2c:	c1 ff 1f             	sar    edi,0x1f
c000de2f:	57                   	push   edi
c000de30:	56                   	push   esi
c000de31:	52                   	push   edx
c000de32:	50                   	push   eax
c000de33:	e8 48 15 01 00       	call   c001f380 <__udivdi3>
c000de38:	eb 62                	jmp    c000de9c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de3a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000de41:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000de48:	89 cf                	mov    edi,ecx
c000de4a:	83 e2 7f             	and    edx,0x7f
c000de4d:	83 e7 7f             	and    edi,0x7f
c000de50:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000de57:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000de5a:	83 e0 7f             	and    eax,0x7f
c000de5d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000de60:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000de67:	83 e0 7f             	and    eax,0x7f
c000de6a:	01 d0                	add    eax,edx
c000de6c:	89 c5                	mov    ebp,eax
c000de6e:	84 c0                	test   al,al
c000de70:	74 41                	je     c000deb3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000de72:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de78:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de7e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de84:	83 ec 10             	sub    esp,0x10
c000de87:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de8b:	89 f7                	mov    edi,esi
c000de8d:	c1 e0 0a             	shl    eax,0xa
c000de90:	c1 ff 1f             	sar    edi,0x1f
c000de93:	57                   	push   edi
c000de94:	56                   	push   esi
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	e8 e4 14 01 00       	call   c001f380 <__udivdi3>
c000de9c:	83 c4 14             	add    esp,0x14
c000de9f:	52                   	push   edx
c000dea0:	50                   	push   eax
c000dea1:	6a 00                	push   0x0
c000dea3:	6a 00                	push   0x0
c000dea5:	53                   	push   ebx
c000dea6:	e8 4b fe ff ff       	call   c000dcf6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000deab:	83 c4 20             	add    esp,0x20
c000deae:	e9 73 01 00 00       	jmp    c000e026 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000deb3:	89 f0                	mov    eax,esi
c000deb5:	31 c9                	xor    ecx,ecx
c000deb7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000debe:	75 02                	jne    c000dec2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dec0:	89 cd                	mov    ebp,ecx
c000dec2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000dec9:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ded0:	c1 e2 08             	shl    edx,0x8
c000ded3:	c1 e6 10             	shl    esi,0x10
c000ded6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000dede:	09 f2                	or     edx,esi
c000dee0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000dee8:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000deef:	83 c0 10             	add    eax,0x10
c000def2:	09 f2                	or     edx,esi
c000def4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000defb:	c1 e6 18             	shl    esi,0x18
c000defe:	09 f2                	or     edx,esi
c000df00:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000df07:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000df0b:	c1 e6 10             	shl    esi,0x10
c000df0e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000df15:	c1 e2 08             	shl    edx,0x8
c000df18:	09 f2                	or     edx,esi
c000df1a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000df21:	09 f2                	or     edx,esi
c000df23:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df2a:	c1 e6 18             	shl    esi,0x18
c000df2d:	09 f2                	or     edx,esi
c000df2f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df33:	41                   	inc    ecx
c000df34:	83 f9 04             	cmp    ecx,0x4
c000df37:	0f 85 7a ff ff ff    	jne    c000deb7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000df3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df41:	83 f0 01             	xor    eax,0x1
c000df44:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000df48:	75 4f                	jne    c000df99 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df4e:	83 f0 01             	xor    eax,0x1
c000df51:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000df55:	75 42                	jne    c000df99 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df57:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000df5f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000df67:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000df6d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000df73:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000df79:	0f a4 c2 0a          	shld   edx,eax,0xa
c000df7d:	89 f7                	mov    edi,esi
c000df7f:	c1 e0 0a             	shl    eax,0xa
c000df82:	c1 ff 1f             	sar    edi,0x1f
c000df85:	57                   	push   edi
c000df86:	56                   	push   esi
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	e8 f2 13 01 00       	call   c001f380 <__udivdi3>
c000df8e:	83 c4 10             	add    esp,0x10
c000df91:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000df99:	89 e8                	mov    eax,ebp
c000df9b:	0f b6 e8             	movzx  ebp,al
c000df9e:	85 ed                	test   ebp,ebp
c000dfa0:	74 50                	je     c000dff2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000dfa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfa6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dfaa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dfb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfba:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dfbe:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dfc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfc6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dfca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfce:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000dfd2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000dfd6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dfda:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000dfde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dfe2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000dfe6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000dfea:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000dfee:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000dff2:	31 ed                	xor    ebp,ebp
c000dff4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dff8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000dffc:	89 f8                	mov    eax,edi
c000dffe:	09 f0                	or     eax,esi
c000e000:	74 1e                	je     c000e020 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e002:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e006:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e00a:	89 d1                	mov    ecx,edx
c000e00c:	09 c1                	or     ecx,eax
c000e00e:	74 10                	je     c000e020 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e010:	83 ec 0c             	sub    esp,0xc
c000e013:	57                   	push   edi
c000e014:	56                   	push   esi
c000e015:	52                   	push   edx
c000e016:	50                   	push   eax
c000e017:	53                   	push   ebx
c000e018:	e8 d9 fc ff ff       	call   c000dcf6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	45                   	inc    ebp
c000e021:	83 fd 04             	cmp    ebp,0x4
c000e024:	75 ce                	jne    c000dff4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e026:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e02c:	5b                   	pop    ebx
c000e02d:	5e                   	pop    esi
c000e02e:	5f                   	pop    edi
c000e02f:	5d                   	pop    ebp
c000e030:	c3                   	ret    
c000e031:	66 90                	xchg   ax,ax
c000e033:	90                   	nop

c000e034 <Serial::Serial(char const*)>:
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03b:	83 ec 08             	sub    esp,0x8
c000e03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e042:	50                   	push   eax
c000e043:	e8 76 e8 ff ff       	call   c000c8be <Device::Device(char const*)>
c000e048:	83 c4 10             	add    esp,0x10
c000e04b:	ba 8c 19 02 c0       	mov    edx,0xc002198c
c000e050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e054:	89 10                	mov    DWORD PTR [eax],edx
c000e056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e05a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e064:	90                   	nop
c000e065:	83 c4 0c             	add    esp,0xc
c000e068:	c3                   	ret    
c000e069:	90                   	nop
c000e06a:	66 90                	xchg   ax,ax

c000e06c <Serial::~Serial()>:
c000e06c:	83 ec 0c             	sub    esp,0xc
c000e06f:	ba 8c 19 02 c0       	mov    edx,0xc002198c
c000e074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e078:	89 10                	mov    DWORD PTR [eax],edx
c000e07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e07e:	83 ec 0c             	sub    esp,0xc
c000e081:	50                   	push   eax
c000e082:	e8 a1 e5 ff ff       	call   c000c628 <Device::~Device()>
c000e087:	83 c4 10             	add    esp,0x10
c000e08a:	90                   	nop
c000e08b:	83 c4 0c             	add    esp,0xc
c000e08e:	c3                   	ret    
c000e08f:	90                   	nop

c000e090 <Serial::~Serial()>:
c000e090:	83 ec 0c             	sub    esp,0xc
c000e093:	83 ec 0c             	sub    esp,0xc
c000e096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e09a:	e8 cd ff ff ff       	call   c000e06c <Serial::~Serial()>
c000e09f:	83 c4 10             	add    esp,0x10
c000e0a2:	83 ec 08             	sub    esp,0x8
c000e0a5:	68 58 01 00 00       	push   0x158
c000e0aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ae:	e8 65 c7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e0b3:	83 c4 10             	add    esp,0x10
c000e0b6:	83 c4 0c             	add    esp,0xc
c000e0b9:	c3                   	ret    
c000e0ba:	66 90                	xchg   ax,ax

c000e0bc <Timer::Timer(char const*)>:
c000e0bc:	83 ec 0c             	sub    esp,0xc
c000e0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c3:	83 ec 08             	sub    esp,0x8
c000e0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ca:	50                   	push   eax
c000e0cb:	e8 ee e7 ff ff       	call   c000c8be <Device::Device(char const*)>
c000e0d0:	83 c4 10             	add    esp,0x10
c000e0d3:	ba d0 19 02 c0       	mov    edx,0xc00219d0
c000e0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0dc:	89 10                	mov    DWORD PTR [eax],edx
c000e0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0e2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e0ec:	90                   	nop
c000e0ed:	83 c4 0c             	add    esp,0xc
c000e0f0:	c3                   	ret    
c000e0f1:	90                   	nop
c000e0f2:	66 90                	xchg   ax,ax

c000e0f4 <Timer::~Timer()>:
c000e0f4:	83 ec 0c             	sub    esp,0xc
c000e0f7:	ba d0 19 02 c0       	mov    edx,0xc00219d0
c000e0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e100:	89 10                	mov    DWORD PTR [eax],edx
c000e102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e106:	83 ec 0c             	sub    esp,0xc
c000e109:	50                   	push   eax
c000e10a:	e8 19 e5 ff ff       	call   c000c628 <Device::~Device()>
c000e10f:	83 c4 10             	add    esp,0x10
c000e112:	90                   	nop
c000e113:	83 c4 0c             	add    esp,0xc
c000e116:	c3                   	ret    
c000e117:	90                   	nop

c000e118 <Timer::~Timer()>:
c000e118:	83 ec 0c             	sub    esp,0xc
c000e11b:	83 ec 0c             	sub    esp,0xc
c000e11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e122:	e8 cd ff ff ff       	call   c000e0f4 <Timer::~Timer()>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	83 ec 08             	sub    esp,0x8
c000e12d:	68 5c 01 00 00       	push   0x15c
c000e132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e136:	e8 dd c6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e13b:	83 c4 10             	add    esp,0x10
c000e13e:	83 c4 0c             	add    esp,0xc
c000e141:	c3                   	ret    

c000e142 <Timer::read()>:
c000e142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e146:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e14c:	c3                   	ret    

c000e14d <setupTimer(int)>:
c000e14d:	53                   	push   ebx
c000e14e:	83 ec 14             	sub    esp,0x14
c000e151:	68 5c 01 00 00       	push   0x15c
c000e156:	e8 5b 99 ff ff       	call   c0007ab6 <malloc>
c000e15b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e15e:	89 c3                	mov    ebx,eax
c000e160:	e8 7f 0a 01 00       	call   c001ebe4 <PIT::PIT()>
c000e165:	58                   	pop    eax
c000e166:	5a                   	pop    edx
c000e167:	53                   	push   ebx
c000e168:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e16e:	e8 b3 e5 ff ff       	call   c000c726 <Device::addChild(Device*)>
c000e173:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e175:	6a 00                	push   0x0
c000e177:	6a 00                	push   0x0
c000e179:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e17d:	53                   	push   ebx
c000e17e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e181:	89 d8                	mov    eax,ebx
c000e183:	83 c4 28             	add    esp,0x28
c000e186:	5b                   	pop    ebx
c000e187:	c3                   	ret    

c000e188 <timerHandler(unsigned int)>:
c000e188:	56                   	push   esi
c000e189:	53                   	push   ebx
c000e18a:	51                   	push   ecx
c000e18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e18f:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e195:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e19c:	0f 84 4a 01 00 00    	je     c000e2ec <timerHandler(unsigned int)+0x164>
c000e1a2:	fa                   	cli    
c000e1a3:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e1a9:	83 ec 0c             	sub    esp,0xc
c000e1ac:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e1b2:	68 d8 96 02 c0       	push   0xc00296d8
c000e1b7:	e8 94 17 01 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e1bc:	83 c4 10             	add    esp,0x10
c000e1bf:	84 c0                	test   al,al
c000e1c1:	0f 85 a1 00 00 00    	jne    c000e268 <timerHandler(unsigned int)+0xe0>
c000e1c7:	83 ec 0c             	sub    esp,0xc
c000e1ca:	68 d8 96 02 c0       	push   0xc00296d8
c000e1cf:	e8 98 17 01 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1d4:	83 c4 10             	add    esp,0x10
c000e1d7:	89 c6                	mov    esi,eax
c000e1d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e1dc:	83 ec 0c             	sub    esp,0xc
c000e1df:	68 d8 96 02 c0       	push   0xc00296d8
c000e1e4:	e8 83 17 01 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1e9:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e1f0:	89 c3                	mov    ebx,eax
c000e1f2:	e8 7d 17 01 00       	call   c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e1f7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e1fa:	83 c4 10             	add    esp,0x10
c000e1fd:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e203:	77 23                	ja     c000e228 <timerHandler(unsigned int)+0xa0>
c000e205:	83 ec 0c             	sub    esp,0xc
c000e208:	53                   	push   ebx
c000e209:	e8 16 80 00 00       	call   c0016224 <unblockTask(ThreadControlBlock*)>
c000e20e:	83 c4 10             	add    esp,0x10
c000e211:	39 de                	cmp    esi,ebx
c000e213:	75 27                	jne    c000e23c <timerHandler(unsigned int)+0xb4>
c000e215:	83 ec 0c             	sub    esp,0xc
c000e218:	68 d8 96 02 c0       	push   0xc00296d8
c000e21d:	e8 4a 17 01 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e222:	89 c6                	mov    esi,eax
c000e224:	eb 12                	jmp    c000e238 <timerHandler(unsigned int)+0xb0>
c000e226:	66 90                	xchg   ax,ax
c000e228:	52                   	push   edx
c000e229:	52                   	push   edx
c000e22a:	53                   	push   ebx
c000e22b:	68 d8 96 02 c0       	push   0xc00296d8
c000e230:	e8 fb 17 01 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e235:	8d 76 00             	lea    esi,[esi+0x0]
c000e238:	83 c4 10             	add    esp,0x10
c000e23b:	90                   	nop
c000e23c:	83 ec 0c             	sub    esp,0xc
c000e23f:	68 d8 96 02 c0       	push   0xc00296d8
c000e244:	e8 07 17 01 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e249:	83 c4 10             	add    esp,0x10
c000e24c:	84 c0                	test   al,al
c000e24e:	75 18                	jne    c000e268 <timerHandler(unsigned int)+0xe0>
c000e250:	83 ec 0c             	sub    esp,0xc
c000e253:	68 d8 96 02 c0       	push   0xc00296d8
c000e258:	e8 0f 17 01 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e25d:	83 c4 10             	add    esp,0x10
c000e260:	39 f0                	cmp    eax,esi
c000e262:	0f 85 74 ff ff ff    	jne    c000e1dc <timerHandler(unsigned int)+0x54>
c000e268:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e26d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e271:	74 41                	je     c000e2b4 <timerHandler(unsigned int)+0x12c>
c000e273:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e27a:	74 38                	je     c000e2b4 <timerHandler(unsigned int)+0x12c>
c000e27c:	fa                   	cli    
c000e27d:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e283:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e288:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e28e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e291:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e297:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e29a:	72 08                	jb     c000e2a4 <timerHandler(unsigned int)+0x11c>
c000e29c:	e8 6b 7a 00 00       	call   c0015d0c <schedule()>
c000e2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2a4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2a9:	48                   	dec    eax
c000e2aa:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2af:	75 03                	jne    c000e2b4 <timerHandler(unsigned int)+0x12c>
c000e2b1:	fb                   	sti    
c000e2b2:	66 90                	xchg   ax,ax
c000e2b4:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e2b9:	48                   	dec    eax
c000e2ba:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e2bf:	75 1b                	jne    c000e2dc <timerHandler(unsigned int)+0x154>
c000e2c1:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e2c8:	74 12                	je     c000e2dc <timerHandler(unsigned int)+0x154>
c000e2ca:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e2d4:	e8 33 7a 00 00       	call   c0015d0c <schedule()>
c000e2d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2dc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2e1:	48                   	dec    eax
c000e2e2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2e7:	75 03                	jne    c000e2ec <timerHandler(unsigned int)+0x164>
c000e2e9:	fb                   	sti    
c000e2ea:	66 90                	xchg   ax,ax
c000e2ec:	58                   	pop    eax
c000e2ed:	5b                   	pop    ebx
c000e2ee:	5e                   	pop    esi
c000e2ef:	c3                   	ret    

c000e2f0 <VCache::VCache(PhysicalDisk*)>:
c000e2f0:	53                   	push   ebx
c000e2f1:	83 ec 18             	sub    esp,0x18
c000e2f4:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c000e2f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2fd:	89 10                	mov    DWORD PTR [eax],edx
c000e2ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e303:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e30e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e319:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e320:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e327:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e32b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e332:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e33d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e344:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e348:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e34c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e350:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e357:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e35e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e362:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e36a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e36e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e372:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e37a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e381:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e389:	83 ec 0c             	sub    esp,0xc
c000e38c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e390:	e8 21 97 ff ff       	call   c0007ab6 <malloc>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	89 c3                	mov    ebx,eax
c000e39a:	83 ec 0c             	sub    esp,0xc
c000e39d:	53                   	push   ebx
c000e39e:	e8 05 77 00 00       	call   c0015aa8 <Mutex::Mutex()>
c000e3a3:	83 c4 10             	add    esp,0x10
c000e3a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3aa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e3ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e3b5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3bc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e3c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3c7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e3cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3d8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e3de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e3e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e3e8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e3eb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3f2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e3f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3fa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e400:	05 00 02 00 00       	add    eax,0x200
c000e405:	c1 e0 03             	shl    eax,0x3
c000e408:	83 ec 0c             	sub    esp,0xc
c000e40b:	50                   	push   eax
c000e40c:	e8 a5 96 ff ff       	call   c0007ab6 <malloc>
c000e411:	83 c4 10             	add    esp,0x10
c000e414:	89 c2                	mov    edx,eax
c000e416:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e41a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e41d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e421:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e42c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e430:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e434:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e43a:	89 d0                	mov    eax,edx
c000e43c:	c1 e0 02             	shl    eax,0x2
c000e43f:	01 d0                	add    eax,edx
c000e441:	c1 e0 04             	shl    eax,0x4
c000e444:	83 ec 0c             	sub    esp,0xc
c000e447:	50                   	push   eax
c000e448:	e8 69 96 ff ff       	call   c0007ab6 <malloc>
c000e44d:	83 c4 10             	add    esp,0x10
c000e450:	89 c2                	mov    edx,eax
c000e452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e456:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e459:	90                   	nop
c000e45a:	83 c4 18             	add    esp,0x18
c000e45d:	5b                   	pop    ebx
c000e45e:	c3                   	ret    
c000e45f:	90                   	nop

c000e460 <VCache::invalidateReadBuffer()>:
c000e460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e464:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e46a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e46e:	c3                   	ret    
c000e46f:	90                   	nop

c000e470 <VCache::writeWriteBuffer()>:
c000e470:	53                   	push   ebx
c000e471:	83 ec 08             	sub    esp,0x8
c000e474:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e478:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e47c:	74 1e                	je     c000e49c <VCache::writeWriteBuffer()+0x2c>
c000e47e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e481:	83 ec 0c             	sub    esp,0xc
c000e484:	8b 10                	mov    edx,DWORD PTR [eax]
c000e486:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e489:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e48c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e48f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e492:	50                   	push   eax
c000e493:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e496:	83 c4 20             	add    esp,0x20
c000e499:	8d 76 00             	lea    esi,[esi+0x0]
c000e49c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e4a3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e4aa:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e4ae:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e4b5:	83 c4 08             	add    esp,0x8
c000e4b8:	5b                   	pop    ebx
c000e4b9:	c3                   	ret    
c000e4ba:	66 90                	xchg   ax,ax

c000e4bc <VCache::~VCache()>:
c000e4bc:	83 ec 0c             	sub    esp,0xc
c000e4bf:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c000e4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4c8:	89 10                	mov    DWORD PTR [eax],edx
c000e4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ce:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e4d1:	0f b6 c0             	movzx  eax,al
c000e4d4:	85 c0                	test   eax,eax
c000e4d6:	74 10                	je     c000e4e8 <VCache::~VCache()+0x2c>
c000e4d8:	83 ec 0c             	sub    esp,0xc
c000e4db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4df:	e8 8c ff ff ff       	call   c000e470 <VCache::writeWriteBuffer()>
c000e4e4:	83 c4 10             	add    esp,0x10
c000e4e7:	90                   	nop
c000e4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e4ef:	83 ec 0c             	sub    esp,0xc
c000e4f2:	50                   	push   eax
c000e4f3:	e8 ce 95 ff ff       	call   c0007ac6 <free>
c000e4f8:	83 c4 10             	add    esp,0x10
c000e4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e502:	83 ec 0c             	sub    esp,0xc
c000e505:	50                   	push   eax
c000e506:	e8 bb 95 ff ff       	call   c0007ac6 <free>
c000e50b:	83 c4 10             	add    esp,0x10
c000e50e:	90                   	nop
c000e50f:	83 c4 0c             	add    esp,0xc
c000e512:	c3                   	ret    
c000e513:	90                   	nop

c000e514 <VCache::~VCache()>:
c000e514:	83 ec 0c             	sub    esp,0xc
c000e517:	83 ec 0c             	sub    esp,0xc
c000e51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e51e:	e8 99 ff ff ff       	call   c000e4bc <VCache::~VCache()>
c000e523:	83 c4 10             	add    esp,0x10
c000e526:	83 ec 08             	sub    esp,0x8
c000e529:	6a 44                	push   0x44
c000e52b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52f:	e8 e4 c2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e534:	83 c4 10             	add    esp,0x10
c000e537:	83 c4 0c             	add    esp,0xc
c000e53a:	c3                   	ret    
c000e53b:	90                   	nop

c000e53c <VCache::write(unsigned long long, int, void*)>:
c000e53c:	55                   	push   ebp
c000e53d:	57                   	push   edi
c000e53e:	56                   	push   esi
c000e53f:	53                   	push   ebx
c000e540:	83 ec 1c             	sub    esp,0x1c
c000e543:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e547:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e54b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e54f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e553:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e557:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e55b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e55f:	74 07                	je     c000e568 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e561:	53                   	push   ebx
c000e562:	e8 f9 fe ff ff       	call   c000e460 <VCache::invalidateReadBuffer()>
c000e567:	58                   	pop    eax
c000e568:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e56c:	74 62                	je     c000e5d0 <VCache::write(unsigned long long, int, void*)+0x94>
c000e56e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e571:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e575:	99                   	cdq    
c000e576:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e57a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e57d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e580:	31 c1                	xor    ecx,eax
c000e582:	89 d0                	mov    eax,edx
c000e584:	89 ca                	mov    edx,ecx
c000e586:	31 e8                	xor    eax,ebp
c000e588:	09 c2                	or     edx,eax
c000e58a:	75 38                	jne    c000e5c4 <VCache::write(unsigned long long, int, void*)+0x88>
c000e58c:	83 ff 01             	cmp    edi,0x1
c000e58f:	75 33                	jne    c000e5c4 <VCache::write(unsigned long long, int, void*)+0x88>
c000e591:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e594:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e598:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e59e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e5a1:	0f af c8             	imul   ecx,eax
c000e5a4:	01 cf                	add    edi,ecx
c000e5a6:	89 c1                	mov    ecx,eax
c000e5a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5ad:	40                   	inc    eax
c000e5ae:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e5b1:	83 f8 50             	cmp    eax,0x50
c000e5b4:	75 6a                	jne    c000e620 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e5b6:	83 ec 0c             	sub    esp,0xc
c000e5b9:	53                   	push   ebx
c000e5ba:	e8 b1 fe ff ff       	call   c000e470 <VCache::writeWriteBuffer()>
c000e5bf:	83 c4 10             	add    esp,0x10
c000e5c2:	eb 5c                	jmp    c000e620 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e5c4:	83 ec 0c             	sub    esp,0xc
c000e5c7:	53                   	push   ebx
c000e5c8:	e8 a3 fe ff ff       	call   c000e470 <VCache::writeWriteBuffer()>
c000e5cd:	83 c4 10             	add    esp,0x10
c000e5d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5d3:	83 ff 4f             	cmp    edi,0x4f
c000e5d6:	7f 20                	jg     c000e5f8 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e5d8:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e5db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5df:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e5e2:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e5e5:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e5e9:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e5ec:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5f4:	eb 2a                	jmp    c000e620 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e5f6:	66 90                	xchg   ax,ax
c000e5f8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5fa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e5fe:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e602:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e606:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e60a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e60e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e612:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e615:	83 c4 1c             	add    esp,0x1c
c000e618:	5b                   	pop    ebx
c000e619:	5e                   	pop    esi
c000e61a:	5f                   	pop    edi
c000e61b:	5d                   	pop    ebp
c000e61c:	ff e0                	jmp    eax
c000e61e:	66 90                	xchg   ax,ax
c000e620:	83 c4 1c             	add    esp,0x1c
c000e623:	31 c0                	xor    eax,eax
c000e625:	5b                   	pop    ebx
c000e626:	5e                   	pop    esi
c000e627:	5f                   	pop    edi
c000e628:	5d                   	pop    ebp
c000e629:	c3                   	ret    

c000e62a <VCache::read(unsigned long long, int, void*)>:
c000e62a:	55                   	push   ebp
c000e62b:	57                   	push   edi
c000e62c:	56                   	push   esi
c000e62d:	53                   	push   ebx
c000e62e:	83 ec 1c             	sub    esp,0x1c
c000e631:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e635:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e639:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e63d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e641:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e645:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e649:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e64d:	74 0d                	je     c000e65c <VCache::read(unsigned long long, int, void*)+0x32>
c000e64f:	83 ec 0c             	sub    esp,0xc
c000e652:	57                   	push   edi
c000e653:	e8 18 fe ff ff       	call   c000e470 <VCache::writeWriteBuffer()>
c000e658:	83 c4 10             	add    esp,0x10
c000e65b:	90                   	nop
c000e65c:	83 fd 01             	cmp    ebp,0x1
c000e65f:	0f 85 93 00 00 00    	jne    c000e6f8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e665:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e668:	89 04 24             	mov    DWORD PTR [esp],eax
c000e66b:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e672:	0f 85 80 00 00 00    	jne    c000e6f8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e678:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e67b:	89 e9                	mov    ecx,ebp
c000e67d:	f7 d9                	neg    ecx
c000e67f:	89 c8                	mov    eax,ecx
c000e681:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e685:	c1 f8 1f             	sar    eax,0x1f
c000e688:	21 d9                	and    ecx,ebx
c000e68a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e68e:	89 c8                	mov    eax,ecx
c000e690:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e694:	21 f1                	and    ecx,esi
c000e696:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e69a:	89 ca                	mov    edx,ecx
c000e69c:	74 2e                	je     c000e6cc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e69e:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e6a1:	75 29                	jne    c000e6cc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6a3:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e6a6:	75 24                	jne    c000e6cc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6a8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6ab:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e6b1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e6b4:	8d 70 ff             	lea    esi,[eax-0x1]
c000e6b7:	21 f3                	and    ebx,esi
c000e6b9:	0f af d9             	imul   ebx,ecx
c000e6bc:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e6bf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e6c3:	89 de                	mov    esi,ebx
c000e6c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6c7:	31 c0                	xor    eax,eax
c000e6c9:	eb 61                	jmp    c000e72c <VCache::read(unsigned long long, int, void*)+0x102>
c000e6cb:	90                   	nop
c000e6cc:	83 ec 0c             	sub    esp,0xc
c000e6cf:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e6d3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e6d7:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e6da:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e6dd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e6df:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e6e2:	55                   	push   ebp
c000e6e3:	52                   	push   edx
c000e6e4:	50                   	push   eax
c000e6e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6e9:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e6ec:	83 c4 20             	add    esp,0x20
c000e6ef:	85 c0                	test   eax,eax
c000e6f1:	75 39                	jne    c000e72c <VCache::read(unsigned long long, int, void*)+0x102>
c000e6f3:	eb b3                	jmp    c000e6a8 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e6f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	57                   	push   edi
c000e6fc:	e8 5f fd ff ff       	call   c000e460 <VCache::invalidateReadBuffer()>
c000e701:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e704:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e708:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e70e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e712:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e716:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e71a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e71e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e721:	83 c4 2c             	add    esp,0x2c
c000e724:	5b                   	pop    ebx
c000e725:	5e                   	pop    esi
c000e726:	5f                   	pop    edi
c000e727:	5d                   	pop    ebp
c000e728:	ff e0                	jmp    eax
c000e72a:	66 90                	xchg   ax,ax
c000e72c:	83 c4 1c             	add    esp,0x1c
c000e72f:	5b                   	pop    ebx
c000e730:	5e                   	pop    esi
c000e731:	5f                   	pop    edi
c000e732:	5d                   	pop    ebp
c000e733:	c3                   	ret    

c000e734 <Video::putrect(int, int, int, int, unsigned int)>:
c000e734:	55                   	push   ebp
c000e735:	57                   	push   edi
c000e736:	56                   	push   esi
c000e737:	53                   	push   ebx
c000e738:	83 ec 1c             	sub    esp,0x1c
c000e73b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e73f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e743:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e747:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e74b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e74f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e753:	01 df                	add    edi,ebx
c000e755:	39 fb                	cmp    ebx,edi
c000e757:	7d 1f                	jge    c000e778 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e759:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e75d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e761:	7d 12                	jge    c000e775 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e763:	8b 16                	mov    edx,DWORD PTR [esi]
c000e765:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e769:	53                   	push   ebx
c000e76a:	55                   	push   ebp
c000e76b:	45                   	inc    ebp
c000e76c:	56                   	push   esi
c000e76d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e770:	83 c4 10             	add    esp,0x10
c000e773:	eb e8                	jmp    c000e75d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e775:	43                   	inc    ebx
c000e776:	eb dd                	jmp    c000e755 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e778:	83 c4 1c             	add    esp,0x1c
c000e77b:	5b                   	pop    ebx
c000e77c:	5e                   	pop    esi
c000e77d:	5f                   	pop    edi
c000e77e:	5d                   	pop    ebp
c000e77f:	c3                   	ret    

c000e780 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e780:	55                   	push   ebp
c000e781:	57                   	push   edi
c000e782:	31 ff                	xor    edi,edi
c000e784:	56                   	push   esi
c000e785:	53                   	push   ebx
c000e786:	83 ec 1c             	sub    esp,0x1c
c000e789:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e78d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e791:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e798:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e79d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7a1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e7a5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e7a9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e7ac:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7b0:	01 f9                	add    ecx,edi
c000e7b2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e7b6:	7d 2f                	jge    c000e7e7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e7b8:	31 f6                	xor    esi,esi
c000e7ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e7be:	01 f2                	add    edx,esi
c000e7c0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e7c4:	7d 1a                	jge    c000e7e0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e7c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e7c9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e7cc:	46                   	inc    esi
c000e7cd:	51                   	push   ecx
c000e7ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e7d2:	52                   	push   edx
c000e7d3:	55                   	push   ebp
c000e7d4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7de:	eb da                	jmp    c000e7ba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e7e0:	47                   	inc    edi
c000e7e1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e7e5:	eb c5                	jmp    c000e7ac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e7e7:	83 c4 1c             	add    esp,0x1c
c000e7ea:	5b                   	pop    ebx
c000e7eb:	5e                   	pop    esi
c000e7ec:	5f                   	pop    edi
c000e7ed:	5d                   	pop    ebp
c000e7ee:	c3                   	ret    
c000e7ef:	90                   	nop

c000e7f0 <Video::blit(unsigned int*, int, int, int, int)>:
c000e7f0:	55                   	push   ebp
c000e7f1:	57                   	push   edi
c000e7f2:	56                   	push   esi
c000e7f3:	53                   	push   ebx
c000e7f4:	83 ec 1c             	sub    esp,0x1c
c000e7f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e7ff:	85 c0                	test   eax,eax
c000e801:	79 02                	jns    c000e805 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e803:	31 c0                	xor    eax,eax
c000e805:	c1 e0 02             	shl    eax,0x2
c000e808:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e80c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e810:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e814:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e818:	39 d8                	cmp    eax,ebx
c000e81a:	7e 49                	jle    c000e865 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e81c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e822:	7c 41                	jl     c000e865 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e824:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e828:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e82c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e830:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e834:	39 f9                	cmp    ecx,edi
c000e836:	7e 22                	jle    c000e85a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e838:	83 c5 04             	add    ebp,0x4
c000e83b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e841:	7c 14                	jl     c000e857 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e843:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e845:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e848:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e84c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e850:	56                   	push   esi
c000e851:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e854:	83 c4 10             	add    esp,0x10
c000e857:	47                   	inc    edi
c000e858:	eb d2                	jmp    c000e82c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e85a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e85e:	43                   	inc    ebx
c000e85f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e863:	eb ab                	jmp    c000e810 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e865:	83 c4 1c             	add    esp,0x1c
c000e868:	5b                   	pop    ebx
c000e869:	5e                   	pop    esi
c000e86a:	5f                   	pop    edi
c000e86b:	5d                   	pop    ebp
c000e86c:	c3                   	ret    
c000e86d:	90                   	nop

c000e86e <Video::clearScreen(unsigned int)>:
c000e86e:	57                   	push   edi
c000e86f:	56                   	push   esi
c000e870:	53                   	push   ebx
c000e871:	31 db                	xor    ebx,ebx
c000e873:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e877:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e87d:	7e 1f                	jle    c000e89e <Video::clearScreen(unsigned int)+0x30>
c000e87f:	31 ff                	xor    edi,edi
c000e881:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e887:	7e 12                	jle    c000e89b <Video::clearScreen(unsigned int)+0x2d>
c000e889:	8b 06                	mov    eax,DWORD PTR [esi]
c000e88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e88f:	53                   	push   ebx
c000e890:	57                   	push   edi
c000e891:	47                   	inc    edi
c000e892:	56                   	push   esi
c000e893:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e896:	83 c4 10             	add    esp,0x10
c000e899:	eb e6                	jmp    c000e881 <Video::clearScreen(unsigned int)+0x13>
c000e89b:	43                   	inc    ebx
c000e89c:	eb d9                	jmp    c000e877 <Video::clearScreen(unsigned int)+0x9>
c000e89e:	5b                   	pop    ebx
c000e89f:	5e                   	pop    esi
c000e8a0:	5f                   	pop    edi
c000e8a1:	c3                   	ret    

c000e8a2 <Video::putpixel(int, int, unsigned int)>:
c000e8a2:	c7 44 24 04 08 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a08
c000e8aa:	e9 a2 2a 00 00       	jmp    c0011351 <KePanic(char const*)>
c000e8af:	90                   	nop

c000e8b0 <Video::readPixelApprox(int, int)>:
c000e8b0:	83 ec 18             	sub    esp,0x18
c000e8b3:	68 29 1a 02 c0       	push   0xc0021a29
c000e8b8:	e8 94 2a 00 00       	call   c0011351 <KePanic(char const*)>
c000e8bd:	31 c0                	xor    eax,eax
c000e8bf:	83 c4 1c             	add    esp,0x1c
c000e8c2:	c3                   	ret    
c000e8c3:	90                   	nop

c000e8c4 <Video::Video(char const*)>:
c000e8c4:	83 ec 0c             	sub    esp,0xc
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	83 ec 08             	sub    esp,0x8
c000e8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d2:	50                   	push   eax
c000e8d3:	e8 e6 df ff ff       	call   c000c8be <Device::Device(char const*)>
c000e8d8:	83 c4 10             	add    esp,0x10
c000e8db:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c000e8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e4:	89 10                	mov    DWORD PTR [eax],edx
c000e8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ea:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e8f4:	90                   	nop
c000e8f5:	83 c4 0c             	add    esp,0xc
c000e8f8:	c3                   	ret    
c000e8f9:	90                   	nop

c000e8fa <Video::~Video()>:
c000e8fa:	83 ec 0c             	sub    esp,0xc
c000e8fd:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c000e902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e906:	89 10                	mov    DWORD PTR [eax],edx
c000e908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e90c:	83 ec 0c             	sub    esp,0xc
c000e90f:	50                   	push   eax
c000e910:	e8 13 dd ff ff       	call   c000c628 <Device::~Device()>
c000e915:	83 c4 10             	add    esp,0x10
c000e918:	90                   	nop
c000e919:	83 c4 0c             	add    esp,0xc
c000e91c:	c3                   	ret    
c000e91d:	90                   	nop

c000e91e <Video::~Video()>:
c000e91e:	83 ec 0c             	sub    esp,0xc
c000e921:	83 ec 0c             	sub    esp,0xc
c000e924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e928:	e8 cd ff ff ff       	call   c000e8fa <Video::~Video()>
c000e92d:	83 c4 10             	add    esp,0x10
c000e930:	83 ec 08             	sub    esp,0x8
c000e933:	68 64 01 00 00       	push   0x164
c000e938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e93c:	e8 d7 be ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	83 c4 0c             	add    esp,0xc
c000e947:	c3                   	ret    

c000e948 <Video::isMonochrome()>:
c000e948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e94c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e952:	c3                   	ret    
c000e953:	90                   	nop

c000e954 <Video::getWidth()>:
c000e954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e958:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e95e:	c3                   	ret    
c000e95f:	90                   	nop

c000e960 <Video::getHeight()>:
c000e960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e964:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e96a:	c3                   	ret    
c000e96b:	90                   	nop

c000e96c <Video::drawCursor(int, int, unsigned int*, int)>:
c000e96c:	55                   	push   ebp
c000e96d:	57                   	push   edi
c000e96e:	56                   	push   esi
c000e96f:	53                   	push   ebx
c000e970:	83 ec 2c             	sub    esp,0x2c
c000e973:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e977:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e97b:	83 f8 01             	cmp    eax,0x1
c000e97e:	19 c9                	sbb    ecx,ecx
c000e980:	31 db                	xor    ebx,ebx
c000e982:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e986:	89 cd                	mov    ebp,ecx
c000e988:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e990:	f7 d5                	not    ebp
c000e992:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e998:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e99c:	01 d8                	add    eax,ebx
c000e99e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9a2:	56                   	push   esi
c000e9a3:	e8 b8 ff ff ff       	call   c000e960 <Video::getHeight()>
c000e9a8:	59                   	pop    ecx
c000e9a9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e9ad:	7e 70                	jle    c000ea1f <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e9af:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9b3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e9b7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e9ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e9be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9c2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e9c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9cd:	89 f8                	mov    eax,edi
c000e9cf:	83 c0 20             	add    eax,0x20
c000e9d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9d6:	56                   	push   esi
c000e9d7:	e8 78 ff ff ff       	call   c000e954 <Video::getWidth()>
c000e9dc:	5a                   	pop    edx
c000e9dd:	39 c7                	cmp    edi,eax
c000e9df:	7d 34                	jge    c000ea15 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e9e1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e9e6:	74 05                	je     c000e9ed <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e9e8:	8b 06                	mov    eax,DWORD PTR [esi]
c000e9ea:	55                   	push   ebp
c000e9eb:	eb 0d                	jmp    c000e9fa <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e9ed:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e9f2:	74 12                	je     c000ea06 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e9f4:	8b 06                	mov    eax,DWORD PTR [esi]
c000e9f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9fa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9fe:	57                   	push   edi
c000e9ff:	56                   	push   esi
c000ea00:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea03:	83 c4 10             	add    esp,0x10
c000ea06:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ea0a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ea0e:	47                   	inc    edi
c000ea0f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ea13:	75 c1                	jne    c000e9d6 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea15:	43                   	inc    ebx
c000ea16:	83 fb 20             	cmp    ebx,0x20
c000ea19:	0f 85 79 ff ff ff    	jne    c000e998 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea1f:	83 c4 2c             	add    esp,0x2c
c000ea22:	5b                   	pop    ebx
c000ea23:	5e                   	pop    esi
c000ea24:	5f                   	pop    edi
c000ea25:	5d                   	pop    ebp
c000ea26:	c3                   	ret    
c000ea27:	90                   	nop

c000ea28 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea28:	55                   	push   ebp
c000ea29:	57                   	push   edi
c000ea2a:	56                   	push   esi
c000ea2b:	53                   	push   ebx
c000ea2c:	83 ec 28             	sub    esp,0x28
c000ea2f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea33:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ea37:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ea3b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ea3f:	c1 e6 08             	shl    esi,0x8
c000ea42:	01 c6                	add    esi,eax
c000ea44:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ea48:	c1 e0 08             	shl    eax,0x8
c000ea4b:	01 d0                	add    eax,edx
c000ea4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea55:	0f af c6             	imul   eax,esi
c000ea58:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ea5f:	50                   	push   eax
c000ea60:	e8 51 90 ff ff       	call   c0007ab6 <malloc>
c000ea65:	83 c4 10             	add    esp,0x10
c000ea68:	89 c7                	mov    edi,eax
c000ea6a:	85 c0                	test   eax,eax
c000ea6c:	75 10                	jne    c000ea7e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ea6e:	83 ec 0c             	sub    esp,0xc
c000ea71:	68 54 1a 02 c0       	push   0xc0021a54
c000ea76:	e8 d6 28 00 00       	call   c0011351 <KePanic(char const*)>
c000ea7b:	83 c4 10             	add    esp,0x10
c000ea7e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ea82:	ba 12 00 00 00       	mov    edx,0x12
c000ea87:	85 c0                	test   eax,eax
c000ea89:	74 11                	je     c000ea9c <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ea8b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ea8f:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ea93:	c1 fa 03             	sar    edx,0x3
c000ea96:	0f af d1             	imul   edx,ecx
c000ea99:	83 c2 12             	add    edx,0x12
c000ea9c:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eaa0:	74 04                	je     c000eaa6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eaa2:	85 f6                	test   esi,esi
c000eaa4:	75 12                	jne    c000eab8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eaa6:	83 ec 0c             	sub    esp,0xc
c000eaa9:	68 64 1a 02 c0       	push   0xc0021a64
c000eaae:	e8 92 be ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eab3:	e9 b8 00 00 00       	jmp    c000eb70 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eab8:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eabc:	83 f9 02             	cmp    ecx,0x2
c000eabf:	0f 85 96 00 00 00    	jne    c000eb5b <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eac5:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eaca:	75 0e                	jne    c000eada <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eacc:	85 c0                	test   eax,eax
c000eace:	75 0a                	jne    c000eada <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ead0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ead3:	83 e8 18             	sub    eax,0x18
c000ead6:	a8 f7                	test   al,0xf7
c000ead8:	74 0a                	je     c000eae4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eada:	83 ec 0c             	sub    esp,0xc
c000eadd:	68 79 1a 02 c0       	push   0xc0021a79
c000eae2:	eb 7f                	jmp    c000eb63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eae4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eaec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eaf4:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000eaf8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb00:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eb04:	75 0c                	jne    c000eb12 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eb06:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000eb0b:	c1 e0 18             	shl    eax,0x18
c000eb0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eb12:	45                   	inc    ebp
c000eb13:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb18:	c1 e1 10             	shl    ecx,0x10
c000eb1b:	89 c8                	mov    eax,ecx
c000eb1d:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb22:	c1 e1 08             	shl    ecx,0x8
c000eb25:	09 c1                	or     ecx,eax
c000eb27:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb2b:	09 c1                	or     ecx,eax
c000eb2d:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb31:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000eb35:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eb39:	c1 f8 03             	sar    eax,0x3
c000eb3c:	01 c2                	add    edx,eax
c000eb3e:	89 e8                	mov    eax,ebp
c000eb40:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eb44:	39 c6                	cmp    esi,eax
c000eb46:	7f b0                	jg     c000eaf8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eb48:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb50:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eb53:	7e 22                	jle    c000eb77 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eb55:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000eb59:	eb 99                	jmp    c000eaf4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eb5b:	50                   	push   eax
c000eb5c:	50                   	push   eax
c000eb5d:	51                   	push   ecx
c000eb5e:	68 87 1a 02 c0       	push   0xc0021a87
c000eb63:	e8 dd bd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eb68:	89 3c 24             	mov    DWORD PTR [esp],edi
c000eb6b:	e8 56 8f ff ff       	call   c0007ac6 <free>
c000eb70:	83 c4 10             	add    esp,0x10
c000eb73:	31 ff                	xor    edi,edi
c000eb75:	eb 0f                	jmp    c000eb86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eb77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb7b:	89 30                	mov    DWORD PTR [eax],esi
c000eb7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb81:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000eb84:	89 30                	mov    DWORD PTR [eax],esi
c000eb86:	83 c4 1c             	add    esp,0x1c
c000eb89:	89 f8                	mov    eax,edi
c000eb8b:	5b                   	pop    ebx
c000eb8c:	5e                   	pop    esi
c000eb8d:	5f                   	pop    edi
c000eb8e:	5d                   	pop    ebp
c000eb8f:	c3                   	ret    

c000eb90 <Video::putTGA(int, int, unsigned char*, int)>:
c000eb90:	55                   	push   ebp
c000eb91:	57                   	push   edi
c000eb92:	56                   	push   esi
c000eb93:	53                   	push   ebx
c000eb94:	83 ec 28             	sub    esp,0x28
c000eb97:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000eb9b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eb9f:	50                   	push   eax
c000eba0:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eba4:	50                   	push   eax
c000eba5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eba9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebad:	56                   	push   esi
c000ebae:	e8 75 fe ff ff       	call   c000ea28 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ebb3:	83 c4 20             	add    esp,0x20
c000ebb6:	85 c0                	test   eax,eax
c000ebb8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ebbc:	74 35                	je     c000ebf3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebbe:	89 c7                	mov    edi,eax
c000ebc0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebc4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ebc8:	39 d8                	cmp    eax,ebx
c000ebca:	7e 27                	jle    c000ebf3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebcc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ebd0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ebd4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ebd8:	39 e8                	cmp    eax,ebp
c000ebda:	7e 14                	jle    c000ebf0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ebdc:	8b 06                	mov    eax,DWORD PTR [esi]
c000ebde:	83 c7 04             	add    edi,0x4
c000ebe1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ebe4:	53                   	push   ebx
c000ebe5:	55                   	push   ebp
c000ebe6:	45                   	inc    ebp
c000ebe7:	56                   	push   esi
c000ebe8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ebeb:	83 c4 10             	add    esp,0x10
c000ebee:	eb e0                	jmp    c000ebd0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ebf0:	43                   	inc    ebx
c000ebf1:	eb cd                	jmp    c000ebc0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ebf3:	83 c4 1c             	add    esp,0x1c
c000ebf6:	5b                   	pop    ebx
c000ebf7:	5e                   	pop    esi
c000ebf8:	5f                   	pop    edi
c000ebf9:	5d                   	pop    ebp
c000ebfa:	c3                   	ret    
c000ebfb:	90                   	nop

c000ebfc <ACPI::close(int, int, void*)>:
c000ebfc:	83 ec 1c             	sub    esp,0x1c
c000ebff:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ec07:	74 0b                	je     c000ec14 <ACPI::close(int, int, void*)+0x18>
c000ec09:	b8 00 00 00 00       	mov    eax,0x0
c000ec0e:	e9 99 00 00 00       	jmp    c000ecac <ACPI::close(int, int, void*)+0xb0>
c000ec13:	90                   	nop
c000ec14:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec19:	75 29                	jne    c000ec44 <ACPI::close(int, int, void*)+0x48>
c000ec1b:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec20:	85 c0                	test   eax,eax
c000ec22:	74 08                	je     c000ec2c <ACPI::close(int, int, void*)+0x30>
c000ec24:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec29:	ff d0                	call   eax
c000ec2b:	90                   	nop
c000ec2c:	83 ec 0c             	sub    esp,0xc
c000ec2f:	68 e8 1a 02 c0       	push   0xc0021ae8
c000ec34:	e8 18 27 00 00       	call   c0011351 <KePanic(char const*)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec41:	eb 69                	jmp    c000ecac <ACPI::close(int, int, void*)+0xb0>
c000ec43:	90                   	nop
c000ec44:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ec49:	75 59                	jne    c000eca4 <ACPI::close(int, int, void*)+0xa8>
c000ec4b:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec50:	85 c0                	test   eax,eax
c000ec52:	74 08                	je     c000ec5c <ACPI::close(int, int, void*)+0x60>
c000ec54:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec59:	ff d0                	call   eax
c000ec5b:	90                   	nop
c000ec5c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ec61:	8d 76 00             	lea    esi,[esi+0x0]
c000ec64:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ec69:	83 e0 02             	and    eax,0x2
c000ec6c:	74 1e                	je     c000ec8c <ACPI::close(int, int, void*)+0x90>
c000ec6e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ec75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec79:	89 c2                	mov    edx,eax
c000ec7b:	ec                   	in     al,dx
c000ec7c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ec80:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ec84:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ec88:	eb da                	jmp    c000ec64 <ACPI::close(int, int, void*)+0x68>
c000ec8a:	66 90                	xchg   ax,ax
c000ec8c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ec93:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ec98:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ec9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eca0:	ee                   	out    dx,al
c000eca1:	8d 76 00             	lea    esi,[esi+0x0]
c000eca4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eca9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecac:	83 c4 1c             	add    esp,0x1c
c000ecaf:	c3                   	ret    

c000ecb0 <findRSDP()>:
c000ecb0:	83 ec 1c             	sub    esp,0x1c
c000ecb3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ecb8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ecbe:	83 e0 04             	and    eax,0x4
c000ecc1:	0f b6 c0             	movzx  eax,al
c000ecc4:	85 c0                	test   eax,eax
c000ecc6:	75 08                	jne    c000ecd0 <findRSDP()+0x20>
c000ecc8:	b8 00 00 00 00       	mov    eax,0x0
c000eccd:	eb 75                	jmp    c000ed44 <findRSDP()+0x94>
c000eccf:	90                   	nop
c000ecd0:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ecd5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ecda:	7f 1c                	jg     c000ecf8 <findRSDP()+0x48>
c000ecdc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ece1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ece7:	83 e2 fb             	and    edx,0xfffffffb
c000ecea:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ecf0:	b8 00 00 00 00       	mov    eax,0x0
c000ecf5:	eb 4d                	jmp    c000ed44 <findRSDP()+0x94>
c000ecf7:	90                   	nop
c000ecf8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ed00:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ed08:	77 32                	ja     c000ed3c <findRSDP()+0x8c>
c000ed0a:	83 ec 04             	sub    esp,0x4
c000ed0d:	6a 08                	push   0x8
c000ed0f:	68 83 1b 02 c0       	push   0xc0021b83
c000ed14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed18:	e8 63 16 ff ff       	call   c0000380 <memcmp>
c000ed1d:	83 c4 10             	add    esp,0x10
c000ed20:	85 c0                	test   eax,eax
c000ed22:	0f 94 c0             	sete   al
c000ed25:	0f b6 c0             	movzx  eax,al
c000ed28:	85 c0                	test   eax,eax
c000ed2a:	74 08                	je     c000ed34 <findRSDP()+0x84>
c000ed2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed30:	eb 12                	jmp    c000ed44 <findRSDP()+0x94>
c000ed32:	66 90                	xchg   ax,ax
c000ed34:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ed39:	eb c5                	jmp    c000ed00 <findRSDP()+0x50>
c000ed3b:	90                   	nop
c000ed3c:	b8 00 00 00 00       	mov    eax,0x0
c000ed41:	8d 76 00             	lea    esi,[esi+0x0]
c000ed44:	83 c4 1c             	add    esp,0x1c
c000ed47:	c3                   	ret    

c000ed48 <loadACPITables(unsigned char*)>:
c000ed48:	57                   	push   edi
c000ed49:	56                   	push   esi
c000ed4a:	53                   	push   ebx
c000ed4b:	83 ec 60             	sub    esp,0x60
c000ed4e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed53:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed59:	83 e0 04             	and    eax,0x4
c000ed5c:	0f b6 c0             	movzx  eax,al
c000ed5f:	85 c0                	test   eax,eax
c000ed61:	0f 84 41 02 00 00    	je     c000efa8 <loadACPITables(unsigned char*)+0x260>
c000ed67:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ed6c:	0f b6 c0             	movzx  eax,al
c000ed6f:	85 c0                	test   eax,eax
c000ed71:	74 79                	je     c000edec <loadACPITables(unsigned char*)+0xa4>
c000ed73:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed77:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ed7b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ed7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed82:	83 e8 24             	sub    eax,0x24
c000ed85:	c1 e8 03             	shr    eax,0x3
c000ed88:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ed8c:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ed94:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ed98:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ed9c:	0f 8d ba 00 00 00    	jge    c000ee5c <loadACPITables(unsigned char*)+0x114>
c000eda2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000eda6:	83 c0 24             	add    eax,0x24
c000eda9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000edad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000edb1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000edb9:	c1 e0 03             	shl    eax,0x3
c000edbc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000edc0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000edc7:	8b 00                	mov    eax,DWORD PTR [eax]
c000edc9:	89 c1                	mov    ecx,eax
c000edcb:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000edd0:	8d 50 01             	lea    edx,[eax+0x1]
c000edd3:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000edd9:	89 ca                	mov    edx,ecx
c000eddb:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ede2:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ede7:	eb ab                	jmp    c000ed94 <loadACPITables(unsigned char*)+0x4c>
c000ede9:	8d 76 00             	lea    esi,[esi+0x0]
c000edec:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edf0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000edf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000edf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edfb:	83 e8 24             	sub    eax,0x24
c000edfe:	c1 e8 02             	shr    eax,0x2
c000ee01:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee05:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ee0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee10:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee14:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee18:	7d 42                	jge    c000ee5c <loadACPITables(unsigned char*)+0x114>
c000ee1a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee1e:	83 c0 24             	add    eax,0x24
c000ee21:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee25:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee29:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee2d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee31:	c1 e0 02             	shl    eax,0x2
c000ee34:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ee38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee3c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee3e:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee43:	8d 50 01             	lea    edx,[eax+0x1]
c000ee46:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee4c:	89 ca                	mov    edx,ecx
c000ee4e:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee55:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ee5a:	eb b4                	jmp    c000ee10 <loadACPITables(unsigned char*)+0xc8>
c000ee5c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ee64:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee69:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ee6d:	0f 8d 39 01 00 00    	jge    c000efac <loadACPITables(unsigned char*)+0x264>
c000ee73:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee77:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000ee7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee86:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ee8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee8e:	25 ff 0f 00 00       	and    eax,0xfff
c000ee93:	89 c6                	mov    esi,eax
c000ee95:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee9b:	83 ec 0c             	sub    esp,0xc
c000ee9e:	6a 01                	push   0x1
c000eea0:	e8 68 a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000eea5:	83 c4 10             	add    esp,0x10
c000eea8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eeac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eeb2:	83 ec 0c             	sub    esp,0xc
c000eeb5:	6a 01                	push   0x1
c000eeb7:	6a 01                	push   0x1
c000eeb9:	50                   	push   eax
c000eeba:	52                   	push   edx
c000eebb:	53                   	push   ebx
c000eebc:	e8 59 b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eec1:	83 c4 20             	add    esp,0x20
c000eec4:	09 f0                	or     eax,esi
c000eec6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eeca:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eece:	c1 e0 03             	shl    eax,0x3
c000eed1:	05 20 89 02 c0       	add    eax,0xc0028920
c000eed6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eeda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eede:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eee2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000eeea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eeee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eef2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eef6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eefa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eefe:	89 c6                	mov    esi,eax
c000ef00:	89 d7                	mov    edi,edx
c000ef02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef04:	89 c8                	mov    eax,ecx
c000ef06:	89 fa                	mov    edx,edi
c000ef08:	89 f3                	mov    ebx,esi
c000ef0a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef0e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef1d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef25:	05 00 10 00 00       	add    eax,0x1000
c000ef2a:	c1 e8 0c             	shr    eax,0xc
c000ef2d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef35:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef3d:	25 ff 0f 00 00       	and    eax,0xfff
c000ef42:	89 c6                	mov    esi,eax
c000ef44:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef4a:	83 ec 0c             	sub    esp,0xc
c000ef4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef51:	e8 b7 a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef56:	83 c4 10             	add    esp,0x10
c000ef59:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ef5d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef63:	83 ec 0c             	sub    esp,0xc
c000ef66:	6a 01                	push   0x1
c000ef68:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef6c:	50                   	push   eax
c000ef6d:	52                   	push   edx
c000ef6e:	53                   	push   ebx
c000ef6f:	e8 a6 af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef74:	83 c4 20             	add    esp,0x20
c000ef77:	09 f0                	or     eax,esi
c000ef79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef81:	83 ec 0c             	sub    esp,0xc
c000ef84:	50                   	push   eax
c000ef85:	e8 a1 a9 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000ef8a:	83 c4 10             	add    esp,0x10
c000ef8d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef91:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ef95:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ef9c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000efa1:	e9 be fe ff ff       	jmp    c000ee64 <loadACPITables(unsigned char*)+0x11c>
c000efa6:	66 90                	xchg   ax,ax
c000efa8:	90                   	nop
c000efa9:	8d 76 00             	lea    esi,[esi+0x0]
c000efac:	83 c4 60             	add    esp,0x60
c000efaf:	5b                   	pop    ebx
c000efb0:	5e                   	pop    esi
c000efb1:	5f                   	pop    edi
c000efb2:	c3                   	ret    
c000efb3:	90                   	nop

c000efb4 <findRSDT(unsigned char*)>:
c000efb4:	57                   	push   edi
c000efb5:	56                   	push   esi
c000efb6:	53                   	push   ebx
c000efb7:	83 ec 50             	sub    esp,0x50
c000efba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000efbf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efc5:	83 e0 04             	and    eax,0x4
c000efc8:	0f b6 c0             	movzx  eax,al
c000efcb:	85 c0                	test   eax,eax
c000efcd:	75 0d                	jne    c000efdc <findRSDT(unsigned char*)+0x28>
c000efcf:	b8 00 00 00 00       	mov    eax,0x0
c000efd4:	e9 2b 01 00 00       	jmp    c000f104 <findRSDT(unsigned char*)+0x150>
c000efd9:	8d 76 00             	lea    esi,[esi+0x0]
c000efdc:	89 e0                	mov    eax,esp
c000efde:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000efe2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efe6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000efea:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000eff2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eff6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000effa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000effe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f002:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f006:	89 c6                	mov    esi,eax
c000f008:	89 d7                	mov    edi,edx
c000f00a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f00c:	89 c8                	mov    eax,ecx
c000f00e:	89 fa                	mov    edx,edi
c000f010:	89 f3                	mov    ebx,esi
c000f012:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f016:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f01a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f01e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f022:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f026:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f02e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f032:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f036:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f03e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f042:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f046:	25 ff 0f 00 00       	and    eax,0xfff
c000f04b:	89 c6                	mov    esi,eax
c000f04d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f053:	83 ec 0c             	sub    esp,0xc
c000f056:	6a 02                	push   0x2
c000f058:	e8 b0 a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f05d:	83 c4 10             	add    esp,0x10
c000f060:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f064:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f06a:	83 ec 0c             	sub    esp,0xc
c000f06d:	6a 01                	push   0x1
c000f06f:	6a 02                	push   0x2
c000f071:	50                   	push   eax
c000f072:	52                   	push   edx
c000f073:	53                   	push   ebx
c000f074:	e8 a1 ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f079:	83 c4 20             	add    esp,0x20
c000f07c:	09 f0                	or     eax,esi
c000f07e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f082:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f086:	25 ff 0f 00 00       	and    eax,0xfff
c000f08b:	89 c6                	mov    esi,eax
c000f08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f093:	83 ec 0c             	sub    esp,0xc
c000f096:	6a 02                	push   0x2
c000f098:	e8 70 a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f09d:	83 c4 10             	add    esp,0x10
c000f0a0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f0a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0aa:	83 ec 0c             	sub    esp,0xc
c000f0ad:	6a 01                	push   0x1
c000f0af:	6a 02                	push   0x2
c000f0b1:	50                   	push   eax
c000f0b2:	52                   	push   edx
c000f0b3:	53                   	push   ebx
c000f0b4:	e8 61 ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0b9:	83 c4 20             	add    esp,0x20
c000f0bc:	09 f0                	or     eax,esi
c000f0be:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0c2:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f0c7:	85 c0                	test   eax,eax
c000f0c9:	75 11                	jne    c000f0dc <findRSDT(unsigned char*)+0x128>
c000f0cb:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f0d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0d6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0da:	eb 24                	jmp    c000f100 <findRSDT(unsigned char*)+0x14c>
c000f0dc:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f0e1:	83 f8 02             	cmp    eax,0x2
c000f0e4:	75 12                	jne    c000f0f8 <findRSDT(unsigned char*)+0x144>
c000f0e6:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f0ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0f5:	eb 09                	jmp    c000f100 <findRSDT(unsigned char*)+0x14c>
c000f0f7:	90                   	nop
c000f0f8:	b8 00 00 00 00       	mov    eax,0x0
c000f0fd:	eb 05                	jmp    c000f104 <findRSDT(unsigned char*)+0x150>
c000f0ff:	90                   	nop
c000f100:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f104:	83 c4 50             	add    esp,0x50
c000f107:	5b                   	pop    ebx
c000f108:	5e                   	pop    esi
c000f109:	5f                   	pop    edi
c000f10a:	c3                   	ret    
c000f10b:	90                   	nop

c000f10c <findDataTable(unsigned char*, char*)>:
c000f10c:	83 ec 1c             	sub    esp,0x1c
c000f10f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f114:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f11a:	83 e0 04             	and    eax,0x4
c000f11d:	0f b6 c0             	movzx  eax,al
c000f120:	85 c0                	test   eax,eax
c000f122:	75 08                	jne    c000f12c <findDataTable(unsigned char*, char*)+0x20>
c000f124:	b8 00 00 00 00       	mov    eax,0x0
c000f129:	eb 5d                	jmp    c000f188 <findDataTable(unsigned char*, char*)+0x7c>
c000f12b:	90                   	nop
c000f12c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f134:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f139:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f13d:	7d 41                	jge    c000f180 <findDataTable(unsigned char*, char*)+0x74>
c000f13f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f143:	c1 e0 03             	shl    eax,0x3
c000f146:	05 20 89 02 c0       	add    eax,0xc0028920
c000f14b:	83 ec 04             	sub    esp,0x4
c000f14e:	6a 04                	push   0x4
c000f150:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f154:	50                   	push   eax
c000f155:	e8 26 12 ff ff       	call   c0000380 <memcmp>
c000f15a:	83 c4 10             	add    esp,0x10
c000f15d:	85 c0                	test   eax,eax
c000f15f:	0f 94 c0             	sete   al
c000f162:	0f b6 c0             	movzx  eax,al
c000f165:	85 c0                	test   eax,eax
c000f167:	74 0f                	je     c000f178 <findDataTable(unsigned char*, char*)+0x6c>
c000f169:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f16d:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f174:	eb 12                	jmp    c000f188 <findDataTable(unsigned char*, char*)+0x7c>
c000f176:	66 90                	xchg   ax,ax
c000f178:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f17d:	eb b5                	jmp    c000f134 <findDataTable(unsigned char*, char*)+0x28>
c000f17f:	90                   	nop
c000f180:	b8 00 00 00 00       	mov    eax,0x0
c000f185:	8d 76 00             	lea    esi,[esi+0x0]
c000f188:	83 c4 1c             	add    esp,0x1c
c000f18b:	c3                   	ret    

c000f18c <scanMADT()>:
c000f18c:	53                   	push   ebx
c000f18d:	83 ec 38             	sub    esp,0x38
c000f190:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f195:	25 00 04 00 00       	and    eax,0x400
c000f19a:	74 14                	je     c000f1b0 <scanMADT()+0x24>
c000f19c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1a1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1a7:	83 e2 fb             	and    edx,0xfffffffb
c000f1aa:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1b0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1b5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1bb:	83 e0 04             	and    eax,0x4
c000f1be:	0f b6 c0             	movzx  eax,al
c000f1c1:	85 c0                	test   eax,eax
c000f1c3:	0f 84 6b 04 00 00    	je     c000f634 <scanMADT()+0x4a8>
c000f1c9:	e8 e2 fa ff ff       	call   c000ecb0 <findRSDP()>
c000f1ce:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f1d3:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f1d8:	85 c0                	test   eax,eax
c000f1da:	75 1c                	jne    c000f1f8 <scanMADT()+0x6c>
c000f1dc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1e1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1e7:	83 e2 fb             	and    edx,0xfffffffb
c000f1ea:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1f0:	e9 47 04 00 00       	jmp    c000f63c <scanMADT()+0x4b0>
c000f1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f1f8:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f1fd:	83 ec 0c             	sub    esp,0xc
c000f200:	50                   	push   eax
c000f201:	e8 ae fd ff ff       	call   c000efb4 <findRSDT(unsigned char*)>
c000f206:	83 c4 10             	add    esp,0x10
c000f209:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f20e:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f213:	85 c0                	test   eax,eax
c000f215:	75 19                	jne    c000f230 <scanMADT()+0xa4>
c000f217:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f21c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f222:	83 e2 fb             	and    edx,0xfffffffb
c000f225:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f22b:	e9 0c 04 00 00       	jmp    c000f63c <scanMADT()+0x4b0>
c000f230:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f235:	83 ec 0c             	sub    esp,0xc
c000f238:	50                   	push   eax
c000f239:	e8 0a fb ff ff       	call   c000ed48 <loadACPITables(unsigned char*)>
c000f23e:	83 c4 10             	add    esp,0x10
c000f241:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f246:	83 ec 08             	sub    esp,0x8
c000f249:	68 8c 1b 02 c0       	push   0xc0021b8c
c000f24e:	50                   	push   eax
c000f24f:	e8 b8 fe ff ff       	call   c000f10c <findDataTable(unsigned char*, char*)>
c000f254:	83 c4 10             	add    esp,0x10
c000f257:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f25b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f260:	75 1a                	jne    c000f27c <scanMADT()+0xf0>
c000f262:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f267:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f26d:	83 e2 fe             	and    edx,0xfffffffe
c000f270:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f276:	e9 c1 03 00 00       	jmp    c000f63c <scanMADT()+0x4b0>
c000f27b:	90                   	nop
c000f27c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f284:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f288:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f28b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f28f:	0f 87 a7 03 00 00    	ja     c000f63c <scanMADT()+0x4b0>
c000f295:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f29d:	0f 87 99 03 00 00    	ja     c000f63c <scanMADT()+0x4b0>
c000f2a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2af:	8d 50 01             	lea    edx,[eax+0x1]
c000f2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2ba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2be:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f2c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2c6:	8d 50 01             	lea    edx,[eax+0x1]
c000f2c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2d5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f2d9:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f2de:	83 f8 02             	cmp    eax,0x2
c000f2e1:	0f 86 51 03 00 00    	jbe    c000f638 <scanMADT()+0x4ac>
c000f2e7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f2ec:	85 c0                	test   eax,eax
c000f2ee:	75 58                	jne    c000f348 <scanMADT()+0x1bc>
c000f2f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2f4:	8d 50 01             	lea    edx,[eax+0x1]
c000f2f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2fb:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f301:	0f b6 d2             	movzx  edx,dl
c000f304:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f308:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f30c:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f312:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f316:	8d 50 01             	lea    edx,[eax+0x1]
c000f319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f31d:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f323:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f326:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f32c:	0f b6 d2             	movzx  edx,dl
c000f32f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f333:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f337:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f33d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f342:	e9 d9 02 00 00       	jmp    c000f620 <scanMADT()+0x494>
c000f347:	90                   	nop
c000f348:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f34d:	83 f8 01             	cmp    eax,0x1
c000f350:	0f 85 1a 01 00 00    	jne    c000f470 <scanMADT()+0x2e4>
c000f356:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f35a:	8d 50 01             	lea    edx,[eax+0x1]
c000f35d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f361:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f367:	0f b6 d2             	movzx  edx,dl
c000f36a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f36e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f372:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f378:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f37d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f381:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f385:	01 d0                	add    eax,edx
c000f387:	83 c0 2c             	add    eax,0x2c
c000f38a:	8a 00                	mov    al,BYTE PTR [eax]
c000f38c:	0f b6 d0             	movzx  edx,al
c000f38f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f393:	8d 48 01             	lea    ecx,[eax+0x1]
c000f396:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f39a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f39e:	0f b6 c0             	movzx  eax,al
c000f3a1:	c1 e0 08             	shl    eax,0x8
c000f3a4:	89 d1                	mov    ecx,edx
c000f3a6:	09 c1                	or     ecx,eax
c000f3a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ac:	8d 50 02             	lea    edx,[eax+0x2]
c000f3af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3b3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3b7:	0f b6 c0             	movzx  eax,al
c000f3ba:	c1 e0 10             	shl    eax,0x10
c000f3bd:	09 c1                	or     ecx,eax
c000f3bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3c3:	8d 50 03             	lea    edx,[eax+0x3]
c000f3c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3ce:	0f b6 c0             	movzx  eax,al
c000f3d1:	c1 e0 18             	shl    eax,0x18
c000f3d4:	09 c1                	or     ecx,eax
c000f3d6:	89 ca                	mov    edx,ecx
c000f3d8:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f3dd:	0f b6 c0             	movzx  eax,al
c000f3e0:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f3e7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f3ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3f4:	01 d0                	add    eax,edx
c000f3f6:	83 c0 2c             	add    eax,0x2c
c000f3f9:	8a 00                	mov    al,BYTE PTR [eax]
c000f3fb:	0f b6 d0             	movzx  edx,al
c000f3fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f402:	8d 48 01             	lea    ecx,[eax+0x1]
c000f405:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f409:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f40d:	0f b6 c0             	movzx  eax,al
c000f410:	c1 e0 08             	shl    eax,0x8
c000f413:	89 d1                	mov    ecx,edx
c000f415:	09 c1                	or     ecx,eax
c000f417:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f41b:	8d 50 02             	lea    edx,[eax+0x2]
c000f41e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f422:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f426:	0f b6 c0             	movzx  eax,al
c000f429:	c1 e0 10             	shl    eax,0x10
c000f42c:	09 c1                	or     ecx,eax
c000f42e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f432:	8d 50 03             	lea    edx,[eax+0x3]
c000f435:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f439:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f43d:	0f b6 c0             	movzx  eax,al
c000f440:	c1 e0 18             	shl    eax,0x18
c000f443:	09 c1                	or     ecx,eax
c000f445:	89 ca                	mov    edx,ecx
c000f447:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f44c:	0f b6 c0             	movzx  eax,al
c000f44f:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f456:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f45b:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f460:	83 c0 01             	add    eax,0x1
c000f463:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f468:	e9 b3 01 00 00       	jmp    c000f620 <scanMADT()+0x494>
c000f46d:	8d 76 00             	lea    esi,[esi+0x0]
c000f470:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f475:	83 f8 02             	cmp    eax,0x2
c000f478:	0f 85 ea 00 00 00    	jne    c000f568 <scanMADT()+0x3dc>
c000f47e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f482:	8d 50 01             	lea    edx,[eax+0x1]
c000f485:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f489:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f48d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f491:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f495:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f499:	8d 50 01             	lea    edx,[eax+0x1]
c000f49c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4a4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4a8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f4ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4b4:	01 d0                	add    eax,edx
c000f4b6:	83 c0 2c             	add    eax,0x2c
c000f4b9:	8a 00                	mov    al,BYTE PTR [eax]
c000f4bb:	0f b6 d0             	movzx  edx,al
c000f4be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4c2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4c9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4cd:	0f b6 c0             	movzx  eax,al
c000f4d0:	c1 e0 08             	shl    eax,0x8
c000f4d3:	89 d1                	mov    ecx,edx
c000f4d5:	09 c1                	or     ecx,eax
c000f4d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4db:	8d 50 02             	lea    edx,[eax+0x2]
c000f4de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4e2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f4e6:	0f b6 c0             	movzx  eax,al
c000f4e9:	c1 e0 10             	shl    eax,0x10
c000f4ec:	09 c1                	or     ecx,eax
c000f4ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4f2:	8d 50 03             	lea    edx,[eax+0x3]
c000f4f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4f9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f4fd:	0f b6 c0             	movzx  eax,al
c000f500:	c1 e0 18             	shl    eax,0x18
c000f503:	09 c8                	or     eax,ecx
c000f505:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f509:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f50e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f512:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f516:	01 d0                	add    eax,edx
c000f518:	83 c0 2c             	add    eax,0x2c
c000f51b:	8a 00                	mov    al,BYTE PTR [eax]
c000f51d:	0f b6 c0             	movzx  eax,al
c000f520:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f524:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f527:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f52b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f52f:	0f b6 d2             	movzx  edx,dl
c000f532:	c1 e2 08             	shl    edx,0x8
c000f535:	09 d0                	or     eax,edx
c000f537:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f53c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f541:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f546:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f54a:	88 90 88 32 02 c0    	mov    BYTE PTR [eax-0x3ffdcd78],dl
c000f550:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f555:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f55a:	66 89 84 12 c0 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7440],ax
c000f562:	e9 b9 00 00 00       	jmp    c000f620 <scanMADT()+0x494>
c000f567:	90                   	nop
c000f568:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f56d:	83 f8 04             	cmp    eax,0x4
c000f570:	0f 85 9a 00 00 00    	jne    c000f610 <scanMADT()+0x484>
c000f576:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f57a:	8d 50 01             	lea    edx,[eax+0x1]
c000f57d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f581:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f585:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f589:	0f b6 c0             	movzx  eax,al
c000f58c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f590:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f594:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f598:	01 d0                	add    eax,edx
c000f59a:	83 c0 2c             	add    eax,0x2c
c000f59d:	8a 00                	mov    al,BYTE PTR [eax]
c000f59f:	0f b6 d0             	movzx  edx,al
c000f5a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5a6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5ad:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5b1:	0f b6 c0             	movzx  eax,al
c000f5b4:	c1 e0 08             	shl    eax,0x8
c000f5b7:	09 d0                	or     eax,edx
c000f5b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f5bd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f5c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c6:	8d 50 01             	lea    edx,[eax+0x1]
c000f5c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5d5:	0f b6 c0             	movzx  eax,al
c000f5d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5e0:	c1 e0 08             	shl    eax,0x8
c000f5e3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f5e7:	89 c1                	mov    ecx,eax
c000f5e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5ed:	c1 e0 18             	shl    eax,0x18
c000f5f0:	89 c3                	mov    ebx,eax
c000f5f2:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f5f7:	8d 50 01             	lea    edx,[eax+0x1]
c000f5fa:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f600:	09 d9                	or     ecx,ebx
c000f602:	89 ca                	mov    edx,ecx
c000f604:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f60b:	eb 13                	jmp    c000f620 <scanMADT()+0x494>
c000f60d:	8d 76 00             	lea    esi,[esi+0x0]
c000f610:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f615:	83 f8 05             	cmp    eax,0x5
c000f618:	75 06                	jne    c000f620 <scanMADT()+0x494>
c000f61a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f61f:	90                   	nop
c000f620:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f625:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f629:	01 d0                	add    eax,edx
c000f62b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f62f:	e9 50 fc ff ff       	jmp    c000f284 <scanMADT()+0xf8>
c000f634:	90                   	nop
c000f635:	eb 05                	jmp    c000f63c <scanMADT()+0x4b0>
c000f637:	90                   	nop
c000f638:	90                   	nop
c000f639:	8d 76 00             	lea    esi,[esi+0x0]
c000f63c:	83 c4 38             	add    esp,0x38
c000f63f:	5b                   	pop    ebx
c000f640:	c3                   	ret    
c000f641:	90                   	nop
c000f642:	66 90                	xchg   ax,ax

c000f644 <ACPI::ACPI()>:
c000f644:	83 ec 0c             	sub    esp,0xc
c000f647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f64b:	83 ec 08             	sub    esp,0x8
c000f64e:	68 91 1b 02 c0       	push   0xc0021b91
c000f653:	50                   	push   eax
c000f654:	e8 65 d2 ff ff       	call   c000c8be <Device::Device(char const*)>
c000f659:	83 c4 10             	add    esp,0x10
c000f65c:	ba e4 1c 02 c0       	mov    edx,0xc0021ce4
c000f661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f665:	89 10                	mov    DWORD PTR [eax],edx
c000f667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f66b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f676:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f684:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f68e:	e8 f9 fa ff ff       	call   c000f18c <scanMADT()>
c000f693:	90                   	nop
c000f694:	83 c4 0c             	add    esp,0xc
c000f697:	c3                   	ret    

c000f698 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f698:	83 ec 2c             	sub    esp,0x2c
c000f69b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f69f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6a3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f6a7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f6ab:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f6b0:	88 d0                	mov    al,dl
c000f6b2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6b6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f6bb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f6c3:	90                   	nop
c000f6c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6c8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6ce:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f6d2:	0f 8d b0 00 00 00    	jge    c000f788 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f6d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6e0:	83 c2 2a             	add    edx,0x2a
c000f6e3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f6e7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f6ec:	0f b7 c0             	movzx  eax,ax
c000f6ef:	39 c2                	cmp    edx,eax
c000f6f1:	0f 85 85 00 00 00    	jne    c000f77c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f6f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6ff:	83 c2 2a             	add    edx,0x2a
c000f702:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f706:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f70b:	0f b6 c0             	movzx  eax,al
c000f70e:	39 c2                	cmp    edx,eax
c000f710:	75 6a                	jne    c000f77c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f712:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f717:	85 c0                	test   eax,eax
c000f719:	74 3d                	je     c000f758 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f71b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f71f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f723:	83 c2 2a             	add    edx,0x2a
c000f726:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f72a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f72e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f731:	39 c2                	cmp    edx,eax
c000f733:	74 13                	je     c000f748 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f735:	83 ec 0c             	sub    esp,0xc
c000f738:	68 0c 1b 02 c0       	push   0xc0021b0c
c000f73d:	e8 0f 1c 00 00       	call   c0011351 <KePanic(char const*)>
c000f742:	83 c4 10             	add    esp,0x10
c000f745:	8d 76 00             	lea    esi,[esi+0x0]
c000f748:	83 ec 0c             	sub    esp,0xc
c000f74b:	68 96 1b 02 c0       	push   0xc0021b96
c000f750:	e8 fc 1b 00 00       	call   c0011351 <KePanic(char const*)>
c000f755:	83 c4 10             	add    esp,0x10
c000f758:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f75c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f760:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f764:	83 c2 2a             	add    edx,0x2a
c000f767:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f76b:	8b 02                	mov    eax,DWORD PTR [edx]
c000f76d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f770:	89 01                	mov    DWORD PTR [ecx],eax
c000f772:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f775:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f77a:	66 90                	xchg   ax,ax
c000f77c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f781:	e9 3e ff ff ff       	jmp    c000f6c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f786:	66 90                	xchg   ax,ax
c000f788:	90                   	nop
c000f789:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f78d:	83 c4 2c             	add    esp,0x2c
c000f790:	c2 04 00             	ret    0x4
c000f793:	90                   	nop

c000f794 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f794:	83 ec 1c             	sub    esp,0x1c
c000f797:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f79b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f79f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f7a3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f7a8:	88 c8                	mov    al,cl
c000f7aa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f7ae:	88 d0                	mov    al,dl
c000f7b0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f7b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7b8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7c2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f7c5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f7c9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f7cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7d1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f7d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f7db:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f7de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7e2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f7e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7eb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7f1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f7f5:	83 c0 01             	add    eax,0x1
c000f7f8:	88 c1                	mov    cl,al
c000f7fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7fe:	83 c2 2a             	add    edx,0x2a
c000f801:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f805:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f809:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f80f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f813:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f816:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f81a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f81e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f822:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f828:	8d 50 01             	lea    edx,[eax+0x1]
c000f82b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f82f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f839:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f83f:	3d 00 02 00 00       	cmp    eax,0x200
c000f844:	75 12                	jne    c000f858 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f846:	83 ec 0c             	sub    esp,0xc
c000f849:	68 a5 1b 02 c0       	push   0xc0021ba5
c000f84e:	e8 fe 1a 00 00       	call   c0011351 <KePanic(char const*)>
c000f853:	83 c4 10             	add    esp,0x10
c000f856:	66 90                	xchg   ax,ax
c000f858:	90                   	nop
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    
c000f85d:	90                   	nop
c000f85e:	66 90                	xchg   ax,ax

c000f860 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f860:	b8 00 00 00 00       	mov    eax,0x0
c000f865:	c3                   	ret    
c000f866:	66 90                	xchg   ax,ax

c000f868 <ACPI::detectPCI()>:
c000f868:	53                   	push   ebx
c000f869:	83 ec 28             	sub    esp,0x28
c000f86c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f871:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f876:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f87b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f881:	83 e0 04             	and    eax,0x4
c000f884:	0f b6 c0             	movzx  eax,al
c000f887:	85 c0                	test   eax,eax
c000f889:	74 2d                	je     c000f8b8 <ACPI::detectPCI()+0x50>
c000f88b:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f890:	83 ec 08             	sub    esp,0x8
c000f893:	68 c2 1b 02 c0       	push   0xc0021bc2
c000f898:	50                   	push   eax
c000f899:	e8 6e f8 ff ff       	call   c000f10c <findDataTable(unsigned char*, char*)>
c000f89e:	83 c4 10             	add    esp,0x10
c000f8a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8a5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f8aa:	74 0c                	je     c000f8b8 <ACPI::detectPCI()+0x50>
c000f8ac:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8b1:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8b6:	66 90                	xchg   ax,ax
c000f8b8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f8c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8c4:	8a 00                	mov    al,BYTE PTR [eax]
c000f8c6:	0f b6 c0             	movzx  eax,al
c000f8c9:	83 f8 01             	cmp    eax,0x1
c000f8cc:	75 0e                	jne    c000f8dc <ACPI::detectPCI()+0x74>
c000f8ce:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8d3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8d8:	eb 2e                	jmp    c000f908 <ACPI::detectPCI()+0xa0>
c000f8da:	66 90                	xchg   ax,ax
c000f8dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8e0:	8a 00                	mov    al,BYTE PTR [eax]
c000f8e2:	0f b6 c0             	movzx  eax,al
c000f8e5:	83 f8 02             	cmp    eax,0x2
c000f8e8:	75 1e                	jne    c000f908 <ACPI::detectPCI()+0xa0>
c000f8ea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8ef:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f8f4:	85 c0                	test   eax,eax
c000f8f6:	74 10                	je     c000f908 <ACPI::detectPCI()+0xa0>
c000f8f8:	83 ec 0c             	sub    esp,0xc
c000f8fb:	68 3c 1b 02 c0       	push   0xc0021b3c
c000f900:	e8 4c 1a 00 00       	call   c0011351 <KePanic(char const*)>
c000f905:	83 c4 10             	add    esp,0x10
c000f908:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f90c:	83 f0 01             	xor    eax,0x1
c000f90f:	0f b6 c0             	movzx  eax,al
c000f912:	85 c0                	test   eax,eax
c000f914:	74 46                	je     c000f95c <ACPI::detectPCI()+0xf4>
c000f916:	e8 15 08 ff ff       	call   c0000130 <manualPCIProbe>
c000f91b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f91f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f924:	75 0e                	jne    c000f934 <ACPI::detectPCI()+0xcc>
c000f926:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f92b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f930:	eb 2a                	jmp    c000f95c <ACPI::detectPCI()+0xf4>
c000f932:	66 90                	xchg   ax,ax
c000f934:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f939:	75 21                	jne    c000f95c <ACPI::detectPCI()+0xf4>
c000f93b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f940:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f945:	85 c0                	test   eax,eax
c000f947:	74 13                	je     c000f95c <ACPI::detectPCI()+0xf4>
c000f949:	83 ec 0c             	sub    esp,0xc
c000f94c:	68 3c 1b 02 c0       	push   0xc0021b3c
c000f951:	e8 fb 19 00 00       	call   c0011351 <KePanic(char const*)>
c000f956:	83 c4 10             	add    esp,0x10
c000f959:	8d 76 00             	lea    esi,[esi+0x0]
c000f95c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f961:	85 c0                	test   eax,eax
c000f963:	0f 84 87 00 00 00    	je     c000f9f0 <ACPI::detectPCI()+0x188>
c000f969:	83 ec 0c             	sub    esp,0xc
c000f96c:	68 c7 1b 02 c0       	push   0xc0021bc7
c000f971:	e8 05 13 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c000f976:	83 c4 10             	add    esp,0x10
c000f979:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f981:	83 ec 0c             	sub    esp,0xc
c000f984:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f988:	e8 29 81 ff ff       	call   c0007ab6 <malloc>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	89 c3                	mov    ebx,eax
c000f992:	83 ec 0c             	sub    esp,0xc
c000f995:	53                   	push   ebx
c000f996:	e8 45 b4 00 00       	call   c001ade0 <PCI::PCI()>
c000f99b:	83 c4 10             	add    esp,0x10
c000f99e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f9a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9a6:	83 ec 08             	sub    esp,0x8
c000f9a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9ad:	50                   	push   eax
c000f9ae:	e8 73 cd ff ff       	call   c000c726 <Device::addChild(Device*)>
c000f9b3:	83 c4 10             	add    esp,0x10
c000f9b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9bc:	83 c0 08             	add    eax,0x8
c000f9bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c1:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f9c6:	85 d2                	test   edx,edx
c000f9c8:	74 0a                	je     c000f9d4 <ACPI::detectPCI()+0x16c>
c000f9ca:	ba 01 00 00 00       	mov    edx,0x1
c000f9cf:	eb 0b                	jmp    c000f9dc <ACPI::detectPCI()+0x174>
c000f9d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9d4:	ba 02 00 00 00       	mov    edx,0x2
c000f9d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9dc:	6a 00                	push   0x0
c000f9de:	6a 00                	push   0x0
c000f9e0:	52                   	push   edx
c000f9e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9e5:	ff d0                	call   eax
c000f9e7:	83 c4 10             	add    esp,0x10
c000f9ea:	e9 91 00 00 00       	jmp    c000fa80 <ACPI::detectPCI()+0x218>
c000f9ef:	90                   	nop
c000f9f0:	83 ec 0c             	sub    esp,0xc
c000f9f3:	68 df 1b 02 c0       	push   0xc0021bdf
c000f9f8:	e8 7e 12 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c000f9fd:	83 c4 10             	add    esp,0x10
c000fa00:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fa07:	83 ec 0c             	sub    esp,0xc
c000fa0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fa0e:	e8 a3 80 ff ff       	call   c0007ab6 <malloc>
c000fa13:	83 c4 10             	add    esp,0x10
c000fa16:	89 c3                	mov    ebx,eax
c000fa18:	83 ec 0c             	sub    esp,0xc
c000fa1b:	53                   	push   ebx
c000fa1c:	e8 59 bf 00 00       	call   c001b97a <IDE::IDE()>
c000fa21:	83 c4 10             	add    esp,0x10
c000fa24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa2c:	83 ec 08             	sub    esp,0x8
c000fa2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa33:	50                   	push   eax
c000fa34:	e8 ed cc ff ff       	call   c000c726 <Device::addChild(Device*)>
c000fa39:	83 c4 10             	add    esp,0x10
c000fa3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa40:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fa4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa4e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fa57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa5b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fa64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa68:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa6a:	83 c0 08             	add    eax,0x8
c000fa6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa6f:	6a 00                	push   0x0
c000fa71:	6a 00                	push   0x0
c000fa73:	6a 00                	push   0x0
c000fa75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa79:	ff d0                	call   eax
c000fa7b:	83 c4 10             	add    esp,0x10
c000fa7e:	66 90                	xchg   ax,ax
c000fa80:	90                   	nop
c000fa81:	83 c4 28             	add    esp,0x28
c000fa84:	5b                   	pop    ebx
c000fa85:	c3                   	ret    
c000fa86:	66 90                	xchg   ax,ax

c000fa88 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fa88:	83 ec 1c             	sub    esp,0x1c
c000fa8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa8f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa92:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fa96:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fa9b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000faa0:	83 ec 08             	sub    esp,0x8
c000faa3:	52                   	push   edx
c000faa4:	50                   	push   eax
c000faa5:	e8 ce 76 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000faaa:	83 c4 10             	add    esp,0x10
c000faad:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fab1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fab6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fabb:	83 ec 04             	sub    esp,0x4
c000fabe:	6a 01                	push   0x1
c000fac0:	52                   	push   edx
c000fac1:	50                   	push   eax
c000fac2:	e8 cb 77 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fac7:	83 c4 10             	add    esp,0x10
c000faca:	90                   	nop
c000facb:	83 c4 1c             	add    esp,0x1c
c000face:	c3                   	ret    
c000facf:	90                   	nop

c000fad0 <ACPI::sleep()>:
c000fad0:	83 ec 0c             	sub    esp,0xc
c000fad3:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fad8:	85 c0                	test   eax,eax
c000fada:	74 08                	je     c000fae4 <ACPI::sleep()+0x14>
c000fadc:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fae1:	ff d0                	call   eax
c000fae3:	90                   	nop
c000fae4:	90                   	nop
c000fae5:	83 c4 0c             	add    esp,0xc
c000fae8:	c3                   	ret    
c000fae9:	90                   	nop
c000faea:	66 90                	xchg   ax,ax

c000faec <ACPI::open(int, int, void*)>:
c000faec:	57                   	push   edi
c000faed:	56                   	push   esi
c000faee:	53                   	push   ebx
c000faef:	81 ec 70 01 00 00    	sub    esp,0x170
c000faf5:	83 ec 0c             	sub    esp,0xc
c000faf8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000faff:	e8 64 fd ff ff       	call   c000f868 <ACPI::detectPCI()>
c000fb04:	83 c4 10             	add    esp,0x10
c000fb07:	83 ec 0c             	sub    esp,0xc
c000fb0a:	68 64 1b 02 c0       	push   0xc0021b64
c000fb0f:	e8 67 11 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c000fb14:	83 c4 10             	add    esp,0x10
c000fb17:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb1c:	8a 00                	mov    al,BYTE PTR [eax]
c000fb1e:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fb25:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fb2d:	83 f8 01             	cmp    eax,0x1
c000fb30:	75 12                	jne    c000fb44 <ACPI::open(int, int, void*)+0x58>
c000fb32:	83 ec 0c             	sub    esp,0xc
c000fb35:	68 b1 14 02 c0       	push   0xc00214b1
c000fb3a:	e8 f0 4c 00 00       	call   c001482f <Thr::loadKernelSymbolTable(char const*)>
c000fb3f:	83 c4 10             	add    esp,0x10
c000fb42:	eb 34                	jmp    c000fb78 <ACPI::open(int, int, void*)+0x8c>
c000fb44:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fb4c:	3d bb 00 00 00       	cmp    eax,0xbb
c000fb51:	75 15                	jne    c000fb68 <ACPI::open(int, int, void*)+0x7c>
c000fb53:	83 ec 0c             	sub    esp,0xc
c000fb56:	68 f4 1b 02 c0       	push   0xc0021bf4
c000fb5b:	e8 cf 4c 00 00       	call   c001482f <Thr::loadKernelSymbolTable(char const*)>
c000fb60:	83 c4 10             	add    esp,0x10
c000fb63:	eb 13                	jmp    c000fb78 <ACPI::open(int, int, void*)+0x8c>
c000fb65:	8d 76 00             	lea    esi,[esi+0x0]
c000fb68:	83 ec 0c             	sub    esp,0xc
c000fb6b:	68 12 1c 02 c0       	push   0xc0021c12
c000fb70:	e8 dc 17 00 00       	call   c0011351 <KePanic(char const*)>
c000fb75:	83 c4 10             	add    esp,0x10
c000fb78:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fb80:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fb8b:	83 ec 0c             	sub    esp,0xc
c000fb8e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fb95:	e8 1c 7f ff ff       	call   c0007ab6 <malloc>
c000fb9a:	83 c4 10             	add    esp,0x10
c000fb9d:	89 c3                	mov    ebx,eax
c000fb9f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fba4:	6a 01                	push   0x1
c000fba6:	50                   	push   eax
c000fba7:	68 2c 1c 02 c0       	push   0xc0021c2c
c000fbac:	53                   	push   ebx
c000fbad:	e8 3e bc ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c000fbb2:	83 c4 10             	add    esp,0x10
c000fbb5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fbbc:	83 ec 08             	sub    esp,0x8
c000fbbf:	6a 01                	push   0x1
c000fbc1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fbc8:	e8 01 bd ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c000fbcd:	83 c4 10             	add    esp,0x10
c000fbd0:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fbd7:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fbdf:	75 17                	jne    c000fbf8 <ACPI::open(int, int, void*)+0x10c>
c000fbe1:	83 ec 0c             	sub    esp,0xc
c000fbe4:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fbeb:	e8 3c bd ff ff       	call   c000b92c <File::close()>
c000fbf0:	83 c4 10             	add    esp,0x10
c000fbf3:	eb 0b                	jmp    c000fc00 <ACPI::open(int, int, void*)+0x114>
c000fbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fbf8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fc00:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fc08:	74 1e                	je     c000fc28 <ACPI::open(int, int, void*)+0x13c>
c000fc0a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fc11:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc13:	83 c0 08             	add    eax,0x8
c000fc16:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc18:	83 ec 0c             	sub    esp,0xc
c000fc1b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc22:	ff d0                	call   eax
c000fc24:	83 c4 10             	add    esp,0x10
c000fc27:	90                   	nop
c000fc28:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fc2f:	83 f0 01             	xor    eax,0x1
c000fc32:	0f b6 c0             	movzx  eax,al
c000fc35:	85 c0                	test   eax,eax
c000fc37:	74 43                	je     c000fc7c <ACPI::open(int, int, void*)+0x190>
c000fc39:	83 ec 0c             	sub    esp,0xc
c000fc3c:	68 4a 1c 02 c0       	push   0xc0021c4a
c000fc41:	e8 35 10 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c000fc46:	83 c4 10             	add    esp,0x10
c000fc49:	83 ec 04             	sub    esp,0x4
c000fc4c:	6a 0c                	push   0xc
c000fc4e:	68 65 1c 02 c0       	push   0xc0021c65
c000fc53:	68 76 1c 02 c0       	push   0xc0021c76
c000fc58:	e8 59 3e 00 00       	call   c0013ab6 <Reg::readIntWithDefault(char*, char*, int)>
c000fc5d:	83 c4 10             	add    esp,0x10
c000fc60:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fc67:	83 ec 0c             	sub    esp,0xc
c000fc6a:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fc71:	e8 c6 9b ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fc76:	83 c4 10             	add    esp,0x10
c000fc79:	8d 76 00             	lea    esi,[esi+0x0]
c000fc7c:	83 ec 0c             	sub    esp,0xc
c000fc7f:	68 75 07 02 c0       	push   0xc0020775
c000fc84:	e8 f2 0f 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c000fc89:	83 c4 10             	add    esp,0x10
c000fc8c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fc93:	83 ec 08             	sub    esp,0x8
c000fc96:	6a 13                	push   0x13
c000fc98:	50                   	push   eax
c000fc99:	e8 a0 cd ff ff       	call   c000ca3e <getDevicesOfType(DeviceType)>
c000fc9e:	83 c4 0c             	add    esp,0xc
c000fca1:	8d 76 00             	lea    esi,[esi+0x0]
c000fca4:	83 ec 0c             	sub    esp,0xc
c000fca7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fcae:	50                   	push   eax
c000fcaf:	e8 ac fe 00 00       	call   c001fb60 <LinkedList<Device>::isEmpty()>
c000fcb4:	83 c4 10             	add    esp,0x10
c000fcb7:	83 f0 01             	xor    eax,0x1
c000fcba:	0f b6 c0             	movzx  eax,al
c000fcbd:	85 c0                	test   eax,eax
c000fcbf:	0f 84 47 01 00 00    	je     c000fe0c <ACPI::open(int, int, void*)+0x320>
c000fcc5:	83 ec 0c             	sub    esp,0xc
c000fcc8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fccf:	50                   	push   eax
c000fcd0:	e8 a7 fe 00 00       	call   c001fb7c <LinkedList<Device>::getFirstElement()>
c000fcd5:	83 c4 10             	add    esp,0x10
c000fcd8:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fcdf:	83 ec 0c             	sub    esp,0xc
c000fce2:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fce9:	50                   	push   eax
c000fcea:	e8 95 fe 00 00       	call   c001fb84 <LinkedList<Device>::removeFirst()>
c000fcef:	83 c4 10             	add    esp,0x10
c000fcf2:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fcf9:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fd00:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fd07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd0b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fd11:	ba 09 00 00 00       	mov    edx,0x9
c000fd16:	fc                   	cld    
c000fd17:	89 c7                	mov    edi,eax
c000fd19:	89 de                	mov    esi,ebx
c000fd1b:	89 d1                	mov    ecx,edx
c000fd1d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd1f:	83 ec 08             	sub    esp,0x8
c000fd22:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fd26:	50                   	push   eax
c000fd27:	83 ec 24             	sub    esp,0x24
c000fd2a:	89 e0                	mov    eax,esp
c000fd2c:	89 c3                	mov    ebx,eax
c000fd2e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fd32:	ba 09 00 00 00       	mov    edx,0x9
c000fd37:	89 df                	mov    edi,ebx
c000fd39:	89 c6                	mov    esi,eax
c000fd3b:	89 d1                	mov    ecx,edx
c000fd3d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd3f:	e8 86 b5 00 00       	call   c001b2ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fd44:	83 c4 30             	add    esp,0x30
c000fd47:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fd4e:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fd56:	0f 84 48 ff ff ff    	je     c000fca4 <ACPI::open(int, int, void*)+0x1b8>
c000fd5c:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fd67:	83 ec 0c             	sub    esp,0xc
c000fd6a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fd71:	e8 40 7d ff ff       	call   c0007ab6 <malloc>
c000fd76:	83 c4 10             	add    esp,0x10
c000fd79:	89 c3                	mov    ebx,eax
c000fd7b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd80:	6a 01                	push   0x1
c000fd82:	50                   	push   eax
c000fd83:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fd8a:	53                   	push   ebx
c000fd8b:	e8 60 ba ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c000fd90:	83 c4 10             	add    esp,0x10
c000fd93:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fd9a:	83 ec 0c             	sub    esp,0xc
c000fd9d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fda4:	e8 e9 bd ff ff       	call   c000bb92 <File::exists()>
c000fda9:	83 c4 10             	add    esp,0x10
c000fdac:	0f b6 c0             	movzx  eax,al
c000fdaf:	85 c0                	test   eax,eax
c000fdb1:	74 29                	je     c000fddc <ACPI::open(int, int, void*)+0x2f0>
c000fdb3:	83 ec 08             	sub    esp,0x8
c000fdb6:	6a 01                	push   0x1
c000fdb8:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fdbf:	e8 e8 54 00 00       	call   c00152ac <Thr::loadDLL(char const*, bool)>
c000fdc4:	83 c4 10             	add    esp,0x10
c000fdc7:	83 ec 08             	sub    esp,0x8
c000fdca:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fdd1:	50                   	push   eax
c000fdd2:	e8 05 57 00 00       	call   c00154dc <Thr::executeDLL(unsigned long, void*)>
c000fdd7:	83 c4 10             	add    esp,0x10
c000fdda:	66 90                	xchg   ax,ax
c000fddc:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fde4:	0f 84 ba fe ff ff    	je     c000fca4 <ACPI::open(int, int, void*)+0x1b8>
c000fdea:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fdf1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdf3:	83 c0 08             	add    eax,0x8
c000fdf6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdf8:	83 ec 0c             	sub    esp,0xc
c000fdfb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fe02:	ff d0                	call   eax
c000fe04:	83 c4 10             	add    esp,0x10
c000fe07:	e9 98 fe ff ff       	jmp    c000fca4 <ACPI::open(int, int, void*)+0x1b8>
c000fe0c:	83 ec 0c             	sub    esp,0xc
c000fe0f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fe16:	50                   	push   eax
c000fe17:	e8 40 fd 00 00       	call   c001fb5c <LinkedList<Device>::~LinkedList()>
c000fe1c:	83 c4 10             	add    esp,0x10
c000fe1f:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fe25:	83 ec 08             	sub    esp,0x8
c000fe28:	6a 01                	push   0x1
c000fe2a:	68 7d 1c 02 c0       	push   0xc0021c7d
c000fe2f:	e8 78 54 00 00       	call   c00152ac <Thr::loadDLL(char const*, bool)>
c000fe34:	83 c4 10             	add    esp,0x10
c000fe37:	83 ec 08             	sub    esp,0x8
c000fe3a:	53                   	push   ebx
c000fe3b:	50                   	push   eax
c000fe3c:	e8 9b 56 00 00       	call   c00154dc <Thr::executeDLL(unsigned long, void*)>
c000fe41:	83 c4 10             	add    esp,0x10
c000fe44:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fe49:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fe4f:	83 e0 04             	and    eax,0x4
c000fe52:	0f b6 c0             	movzx  eax,al
c000fe55:	85 c0                	test   eax,eax
c000fe57:	0f 84 17 01 00 00    	je     c000ff74 <ACPI::open(int, int, void*)+0x488>
c000fe5d:	83 ec 0c             	sub    esp,0xc
c000fe60:	68 9a 1c 02 c0       	push   0xc0021c9a
c000fe65:	e8 11 0e 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c000fe6a:	83 c4 10             	add    esp,0x10
c000fe6d:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000fe78:	83 ec 0c             	sub    esp,0xc
c000fe7b:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000fe82:	e8 2f 7c ff ff       	call   c0007ab6 <malloc>
c000fe87:	83 c4 10             	add    esp,0x10
c000fe8a:	89 c3                	mov    ebx,eax
c000fe8c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fe91:	6a 01                	push   0x1
c000fe93:	50                   	push   eax
c000fe94:	68 b7 1c 02 c0       	push   0xc0021cb7
c000fe99:	53                   	push   ebx
c000fe9a:	e8 51 b9 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000fea9:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000feb1:	74 1d                	je     c000fed0 <ACPI::open(int, int, void*)+0x3e4>
c000feb3:	83 ec 0c             	sub    esp,0xc
c000feb6:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000febd:	e8 d0 bc ff ff       	call   c000bb92 <File::exists()>
c000fec2:	83 c4 10             	add    esp,0x10
c000fec5:	0f b6 c0             	movzx  eax,al
c000fec8:	85 c0                	test   eax,eax
c000feca:	74 04                	je     c000fed0 <ACPI::open(int, int, void*)+0x3e4>
c000fecc:	b0 01                	mov    al,0x1
c000fece:	eb 04                	jmp    c000fed4 <ACPI::open(int, int, void*)+0x3e8>
c000fed0:	b0 00                	mov    al,0x0
c000fed2:	66 90                	xchg   ax,ax
c000fed4:	0f b6 c0             	movzx  eax,al
c000fed7:	85 c0                	test   eax,eax
c000fed9:	74 25                	je     c000ff00 <ACPI::open(int, int, void*)+0x414>
c000fedb:	83 ec 08             	sub    esp,0x8
c000fede:	6a 01                	push   0x1
c000fee0:	68 b7 1c 02 c0       	push   0xc0021cb7
c000fee5:	e8 c2 53 00 00       	call   c00152ac <Thr::loadDLL(char const*, bool)>
c000feea:	83 c4 10             	add    esp,0x10
c000feed:	83 ec 08             	sub    esp,0x8
c000fef0:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000fef7:	50                   	push   eax
c000fef8:	e8 df 55 00 00       	call   c00154dc <Thr::executeDLL(unsigned long, void*)>
c000fefd:	83 c4 10             	add    esp,0x10
c000ff00:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff08:	74 2a                	je     c000ff34 <ACPI::open(int, int, void*)+0x448>
c000ff0a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff12:	74 20                	je     c000ff34 <ACPI::open(int, int, void*)+0x448>
c000ff14:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ff1b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff1d:	83 c0 08             	add    eax,0x8
c000ff20:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff22:	83 ec 0c             	sub    esp,0xc
c000ff25:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ff2c:	ff d0                	call   eax
c000ff2e:	83 c4 10             	add    esp,0x10
c000ff31:	8d 76 00             	lea    esi,[esi+0x0]
c000ff34:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000ff39:	83 ec 08             	sub    esp,0x8
c000ff3c:	68 d4 1c 02 c0       	push   0xc0021cd4
c000ff41:	50                   	push   eax
c000ff42:	e8 c5 f1 ff ff       	call   c000f10c <findDataTable(unsigned char*, char*)>
c000ff47:	83 c4 10             	add    esp,0x10
c000ff4a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ff51:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ff59:	74 19                	je     c000ff74 <ACPI::open(int, int, void*)+0x488>
c000ff5b:	83 ec 08             	sub    esp,0x8
c000ff5e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ff65:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ff6c:	e8 17 fb ff ff       	call   c000fa88 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ff71:	83 c4 10             	add    esp,0x10
c000ff74:	b8 00 00 00 00       	mov    eax,0x0
c000ff79:	81 c4 70 01 00 00    	add    esp,0x170
c000ff7f:	5b                   	pop    ebx
c000ff80:	5e                   	pop    esi
c000ff81:	5f                   	pop    edi
c000ff82:	c3                   	ret    
c000ff83:	90                   	nop

c000ff84 <CPU::close(int, int, void*)>:
c000ff84:	31 c0                	xor    eax,eax
c000ff86:	c3                   	ret    
c000ff87:	90                   	nop

c000ff88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ff88:	60                   	pusha  
c000ff89:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff95:	9c                   	pushf  
c000ff96:	fa                   	cli    
c000ff97:	0f 09                	wbinvd 
c000ff99:	0f 30                	wrmsr  
c000ff9b:	9d                   	popf   
c000ff9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ffa0:	89 02                	mov    DWORD PTR [edx],eax
c000ffa2:	61                   	popa   
c000ffa3:	c3                   	ret    

c000ffa4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ffa4:	60                   	pusha  
c000ffa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ffa9:	9c                   	pushf  
c000ffaa:	fa                   	cli    
c000ffab:	0f 09                	wbinvd 
c000ffad:	31 c0                	xor    eax,eax
c000ffaf:	31 d2                	xor    edx,edx
c000ffb1:	0f 32                	rdmsr  
c000ffb3:	9d                   	popf   
c000ffb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffb8:	89 02                	mov    DWORD PTR [edx],eax
c000ffba:	61                   	popa   
c000ffbb:	c3                   	ret    

c000ffbc <CPU::AMD_K6_writeback(int, int, int)>:
c000ffbc:	56                   	push   esi
c000ffbd:	53                   	push   ebx
c000ffbe:	83 ec 10             	sub    esp,0x10
c000ffc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffc5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ffca:	75 5d                	jne    c0010029 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ffcc:	83 f8 08             	cmp    eax,0x8
c000ffcf:	75 09                	jne    c000ffda <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ffd1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ffd6:	7e 13                	jle    c000ffeb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ffd8:	eb 30                	jmp    c001000a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ffda:	83 f8 06             	cmp    eax,0x6
c000ffdd:	7c 4a                	jl     c0010029 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ffdf:	83 f8 07             	cmp    eax,0x7
c000ffe2:	7e 07                	jle    c000ffeb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ffe4:	83 f8 09             	cmp    eax,0x9
c000ffe7:	74 21                	je     c001000a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ffe9:	eb 3e                	jmp    c0010029 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ffeb:	89 e6                	mov    esi,esp
c000ffed:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000fff3:	56                   	push   esi
c000fff4:	c1 eb 15             	shr    ebx,0x15
c000fff7:	68 82 00 00 c0       	push   0xc0000082
c000fffc:	83 e3 7e             	and    ebx,0x7e
c000ffff:	e8 a0 ff ff ff       	call   c000ffa4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010004:	56                   	push   esi
c0010005:	6a 00                	push   0x0
c0010007:	53                   	push   ebx
c0010008:	eb 12                	jmp    c001001c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001000a:	89 e3                	mov    ebx,esp
c001000c:	53                   	push   ebx
c001000d:	68 82 00 00 c0       	push   0xc0000082
c0010012:	e8 8d ff ff ff       	call   c000ffa4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010017:	53                   	push   ebx
c0010018:	6a 00                	push   0x0
c001001a:	6a 00                	push   0x0
c001001c:	68 82 00 00 c0       	push   0xc0000082
c0010021:	e8 62 ff ff ff       	call   c000ff88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010026:	83 c4 18             	add    esp,0x18
c0010029:	83 c4 10             	add    esp,0x10
c001002c:	5b                   	pop    ebx
c001002d:	5e                   	pop    esi
c001002e:	c3                   	ret    
c001002f:	90                   	nop

c0010030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010030:	55                   	push   ebp
c0010031:	57                   	push   edi
c0010032:	56                   	push   esi
c0010033:	53                   	push   ebx
c0010034:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010038:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001003c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010040:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010044:	39 05 98 32 02 c0    	cmp    DWORD PTR ds:0xc0023298,eax
c001004a:	75 23                	jne    c001006f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001004c:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c0010051:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010055:	89 06                	mov    DWORD PTR [esi],eax
c0010057:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c001005c:	89 07                	mov    DWORD PTR [edi],eax
c001005e:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c0010063:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010066:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c001006b:	89 02                	mov    DWORD PTR [edx],eax
c001006d:	eb 3f                	jmp    c00100ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001006f:	31 c9                	xor    ecx,ecx
c0010071:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010075:	0f a2                	cpuid  
c0010077:	89 06                	mov    DWORD PTR [esi],eax
c0010079:	89 1f                	mov    DWORD PTR [edi],ebx
c001007b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001007f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010082:	89 10                	mov    DWORD PTR [eax],edx
c0010084:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010088:	a3 98 32 02 c0       	mov    ds:0xc0023298,eax
c001008d:	8b 06                	mov    eax,DWORD PTR [esi]
c001008f:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c0010094:	8b 07                	mov    eax,DWORD PTR [edi]
c0010096:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c001009b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001009e:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c00100a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00100a9:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c00100ae:	5b                   	pop    ebx
c00100af:	5e                   	pop    esi
c00100b0:	5f                   	pop    edi
c00100b1:	5d                   	pop    ebp
c00100b2:	c3                   	ret    
c00100b3:	90                   	nop

c00100b4 <CPU::cpuidCheckEDX(unsigned int)>:
c00100b4:	83 ec 10             	sub    esp,0x10
c00100b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100bb:	50                   	push   eax
c00100bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100c0:	50                   	push   eax
c00100c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100c5:	50                   	push   eax
c00100c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100ca:	50                   	push   eax
c00100cb:	6a 01                	push   0x1
c00100cd:	e8 5e ff ff ff       	call   c0010030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100d6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00100da:	0f 95 c0             	setne  al
c00100dd:	83 c4 24             	add    esp,0x24
c00100e0:	c3                   	ret    
c00100e1:	90                   	nop

c00100e2 <CPU::cpuidCheckECX(unsigned int)>:
c00100e2:	83 ec 10             	sub    esp,0x10
c00100e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100e9:	50                   	push   eax
c00100ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100ee:	50                   	push   eax
c00100ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100f3:	50                   	push   eax
c00100f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100f8:	50                   	push   eax
c00100f9:	6a 01                	push   0x1
c00100fb:	e8 30 ff ff ff       	call   c0010030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010100:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010104:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010108:	0f 95 c0             	setne  al
c001010b:	83 c4 24             	add    esp,0x24
c001010e:	c3                   	ret    
c001010f:	90                   	nop

c0010110 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010110:	83 ec 10             	sub    esp,0x10
c0010113:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010117:	50                   	push   eax
c0010118:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001011c:	50                   	push   eax
c001011d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010121:	50                   	push   eax
c0010122:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010126:	50                   	push   eax
c0010127:	6a 07                	push   0x7
c0010129:	e8 02 ff ff ff       	call   c0010030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001012e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010132:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010136:	0f 95 c0             	setne  al
c0010139:	83 c4 24             	add    esp,0x24
c001013c:	c3                   	ret    
c001013d:	90                   	nop

c001013e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001013e:	83 ec 10             	sub    esp,0x10
c0010141:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010145:	50                   	push   eax
c0010146:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001014a:	50                   	push   eax
c001014b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001014f:	50                   	push   eax
c0010150:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010154:	50                   	push   eax
c0010155:	6a 07                	push   0x7
c0010157:	e8 d4 fe ff ff       	call   c0010030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001015c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010160:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010164:	0f 95 c0             	setne  al
c0010167:	83 c4 24             	add    esp,0x24
c001016a:	c3                   	ret    
c001016b:	90                   	nop

c001016c <CPU::CPU()>:
c001016c:	83 ec 0c             	sub    esp,0xc
c001016f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010173:	83 ec 08             	sub    esp,0x8
c0010176:	68 f9 1d 02 c0       	push   0xc0021df9
c001017b:	50                   	push   eax
c001017c:	e8 3d c7 ff ff       	call   c000c8be <Device::Device(char const*)>
c0010181:	83 c4 10             	add    esp,0x10
c0010184:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c0010189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001018d:	89 10                	mov    DWORD PTR [eax],edx
c001018f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010193:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001019d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101a1:	05 78 01 00 00       	add    eax,0x178
c00101a6:	83 ec 0c             	sub    esp,0xc
c00101a9:	50                   	push   eax
c00101aa:	e8 ad 71 ff ff       	call   c000735c <GDT::GDT()>
c00101af:	83 c4 10             	add    esp,0x10
c00101b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101b6:	05 7c 09 00 00       	add    eax,0x97c
c00101bb:	83 ec 0c             	sub    esp,0xc
c00101be:	50                   	push   eax
c00101bf:	e8 e8 73 ff ff       	call   c00075ac <IDT::IDT()>
c00101c4:	83 c4 10             	add    esp,0x10
c00101c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101cb:	05 7c 11 00 00       	add    eax,0x117c
c00101d0:	83 ec 0c             	sub    esp,0xc
c00101d3:	50                   	push   eax
c00101d4:	e8 6b 8d ff ff       	call   c0008f44 <TSS::TSS()>
c00101d9:	83 c4 10             	add    esp,0x10
c00101dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101e0:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00101e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101eb:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00101f5:	90                   	nop
c00101f6:	83 c4 0c             	add    esp,0xc
c00101f9:	c3                   	ret    

c00101fa <CPU::displayFeatures()>:
c00101fa:	c3                   	ret    
c00101fb:	90                   	nop

c00101fc <CPU::detectFeatures()>:
c00101fc:	55                   	push   ebp
c00101fd:	57                   	push   edi
c00101fe:	56                   	push   esi
c00101ff:	53                   	push   ebx
c0010200:	83 ec 30             	sub    esp,0x30
c0010203:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010207:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010211:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010218:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001021e:	6a 0d                	push   0xd
c0010220:	6a 00                	push   0x0
c0010222:	55                   	push   ebp
c0010223:	e8 c8 02 ff ff       	call   c00004f0 <memset>
c0010228:	83 c4 10             	add    esp,0x10
c001022b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010230:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010237:	0f 84 db 05 00 00    	je     c0010818 <CPU::detectFeatures()+0x61c>
c001023d:	83 ec 0c             	sub    esp,0xc
c0010240:	89 ef                	mov    edi,ebp
c0010242:	6a 10                	push   0x10
c0010244:	e8 6b fe ff ff       	call   c00100b4 <CPU::cpuidCheckEDX(unsigned int)>
c0010249:	83 e0 01             	and    eax,0x1
c001024c:	8d 14 00             	lea    edx,[eax+eax*1]
c001024f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010255:	83 e0 fd             	and    eax,0xfffffffd
c0010258:	09 d0                	or     eax,edx
c001025a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010260:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010267:	e8 48 fe ff ff       	call   c00100b4 <CPU::cpuidCheckEDX(unsigned int)>
c001026c:	83 e0 01             	and    eax,0x1
c001026f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010276:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001027c:	83 e0 fb             	and    eax,0xfffffffb
c001027f:	09 d0                	or     eax,edx
c0010281:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010287:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001028e:	e8 21 fe ff ff       	call   c00100b4 <CPU::cpuidCheckEDX(unsigned int)>
c0010293:	83 e0 01             	and    eax,0x1
c0010296:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001029d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102a3:	83 e0 f7             	and    eax,0xfffffff7
c00102a6:	09 d0                	or     eax,edx
c00102a8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102ae:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00102b5:	e8 fa fd ff ff       	call   c00100b4 <CPU::cpuidCheckEDX(unsigned int)>
c00102ba:	83 e0 01             	and    eax,0x1
c00102bd:	c1 e0 04             	shl    eax,0x4
c00102c0:	89 c2                	mov    edx,eax
c00102c2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102c8:	83 e0 ef             	and    eax,0xffffffef
c00102cb:	09 d0                	or     eax,edx
c00102cd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102d3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00102da:	e8 d5 fd ff ff       	call   c00100b4 <CPU::cpuidCheckEDX(unsigned int)>
c00102df:	83 e0 01             	and    eax,0x1
c00102e2:	c1 e0 05             	shl    eax,0x5
c00102e5:	89 c2                	mov    edx,eax
c00102e7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102ed:	83 e0 df             	and    eax,0xffffffdf
c00102f0:	09 d0                	or     eax,edx
c00102f2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102f8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00102ff:	e8 b0 fd ff ff       	call   c00100b4 <CPU::cpuidCheckEDX(unsigned int)>
c0010304:	83 e0 01             	and    eax,0x1
c0010307:	8d 14 00             	lea    edx,[eax+eax*1]
c001030a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010310:	83 e0 fd             	and    eax,0xfffffffd
c0010313:	09 d0                	or     eax,edx
c0010315:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001031b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010322:	e8 8d fd ff ff       	call   c00100b4 <CPU::cpuidCheckEDX(unsigned int)>
c0010327:	83 e0 01             	and    eax,0x1
c001032a:	c1 e0 06             	shl    eax,0x6
c001032d:	89 c2                	mov    edx,eax
c001032f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010335:	83 e0 bf             	and    eax,0xffffffbf
c0010338:	09 d0                	or     eax,edx
c001033a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010340:	58                   	pop    eax
c0010341:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010345:	50                   	push   eax
c0010346:	8d 44 24 28          	lea    eax,[esp+0x28]
c001034a:	50                   	push   eax
c001034b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001034f:	56                   	push   esi
c0010350:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010354:	50                   	push   eax
c0010355:	6a 00                	push   0x0
c0010357:	e8 d4 fc ff ff       	call   c0010030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001035c:	b8 04 00 00 00       	mov    eax,0x4
c0010361:	89 c1                	mov    ecx,eax
c0010363:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010365:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001036b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001036f:	89 c1                	mov    ecx,eax
c0010371:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010373:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010379:	8d 74 24 38          	lea    esi,[esp+0x38]
c001037d:	89 c1                	mov    ecx,eax
c001037f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010381:	83 c4 18             	add    esp,0x18
c0010384:	68 08 1d 02 c0       	push   0xc0021d08
c0010389:	55                   	push   ebp
c001038a:	e8 c1 03 ff ff       	call   c0000750 <strcmp>
c001038f:	83 c4 10             	add    esp,0x10
c0010392:	85 c0                	test   eax,eax
c0010394:	75 0f                	jne    c00103a5 <CPU::detectFeatures()+0x1a9>
c0010396:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00103a0:	e9 22 02 00 00       	jmp    c00105c7 <CPU::detectFeatures()+0x3cb>
c00103a5:	50                   	push   eax
c00103a6:	50                   	push   eax
c00103a7:	68 15 1d 02 c0       	push   0xc0021d15
c00103ac:	55                   	push   ebp
c00103ad:	e8 9e 03 ff ff       	call   c0000750 <strcmp>
c00103b2:	83 c4 10             	add    esp,0x10
c00103b5:	85 c0                	test   eax,eax
c00103b7:	74 dd                	je     c0010396 <CPU::detectFeatures()+0x19a>
c00103b9:	50                   	push   eax
c00103ba:	50                   	push   eax
c00103bb:	68 22 1d 02 c0       	push   0xc0021d22
c00103c0:	55                   	push   ebp
c00103c1:	e8 8a 03 ff ff       	call   c0000750 <strcmp>
c00103c6:	83 c4 10             	add    esp,0x10
c00103c9:	85 c0                	test   eax,eax
c00103cb:	74 2a                	je     c00103f7 <CPU::detectFeatures()+0x1fb>
c00103cd:	50                   	push   eax
c00103ce:	50                   	push   eax
c00103cf:	68 2f 1d 02 c0       	push   0xc0021d2f
c00103d4:	55                   	push   ebp
c00103d5:	e8 76 03 ff ff       	call   c0000750 <strcmp>
c00103da:	83 c4 10             	add    esp,0x10
c00103dd:	85 c0                	test   eax,eax
c00103df:	74 16                	je     c00103f7 <CPU::detectFeatures()+0x1fb>
c00103e1:	50                   	push   eax
c00103e2:	50                   	push   eax
c00103e3:	68 3c 1d 02 c0       	push   0xc0021d3c
c00103e8:	55                   	push   ebp
c00103e9:	e8 62 03 ff ff       	call   c0000750 <strcmp>
c00103ee:	83 c4 10             	add    esp,0x10
c00103f1:	85 c0                	test   eax,eax
c00103f3:	74 48                	je     c001043d <CPU::detectFeatures()+0x241>
c00103f5:	eb 0f                	jmp    c0010406 <CPU::detectFeatures()+0x20a>
c00103f7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010401:	e9 c1 01 00 00       	jmp    c00105c7 <CPU::detectFeatures()+0x3cb>
c0010406:	50                   	push   eax
c0010407:	50                   	push   eax
c0010408:	68 49 1d 02 c0       	push   0xc0021d49
c001040d:	55                   	push   ebp
c001040e:	e8 3d 03 ff ff       	call   c0000750 <strcmp>
c0010413:	83 c4 10             	add    esp,0x10
c0010416:	85 c0                	test   eax,eax
c0010418:	74 23                	je     c001043d <CPU::detectFeatures()+0x241>
c001041a:	57                   	push   edi
c001041b:	57                   	push   edi
c001041c:	68 56 1d 02 c0       	push   0xc0021d56
c0010421:	55                   	push   ebp
c0010422:	e8 29 03 ff ff       	call   c0000750 <strcmp>
c0010427:	83 c4 10             	add    esp,0x10
c001042a:	85 c0                	test   eax,eax
c001042c:	75 1e                	jne    c001044c <CPU::detectFeatures()+0x250>
c001042e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010438:	e9 8a 01 00 00       	jmp    c00105c7 <CPU::detectFeatures()+0x3cb>
c001043d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010447:	e9 7b 01 00 00       	jmp    c00105c7 <CPU::detectFeatures()+0x3cb>
c001044c:	56                   	push   esi
c001044d:	56                   	push   esi
c001044e:	68 63 1d 02 c0       	push   0xc0021d63
c0010453:	55                   	push   ebp
c0010454:	e8 f7 02 ff ff       	call   c0000750 <strcmp>
c0010459:	83 c4 10             	add    esp,0x10
c001045c:	85 c0                	test   eax,eax
c001045e:	75 0f                	jne    c001046f <CPU::detectFeatures()+0x273>
c0010460:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001046a:	e9 58 01 00 00       	jmp    c00105c7 <CPU::detectFeatures()+0x3cb>
c001046f:	51                   	push   ecx
c0010470:	51                   	push   ecx
c0010471:	68 22 1d 02 c0       	push   0xc0021d22
c0010476:	55                   	push   ebp
c0010477:	e8 d4 02 ff ff       	call   c0000750 <strcmp>
c001047c:	83 c4 10             	add    esp,0x10
c001047f:	85 c0                	test   eax,eax
c0010481:	75 0f                	jne    c0010492 <CPU::detectFeatures()+0x296>
c0010483:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001048d:	e9 35 01 00 00       	jmp    c00105c7 <CPU::detectFeatures()+0x3cb>
c0010492:	52                   	push   edx
c0010493:	52                   	push   edx
c0010494:	68 70 1d 02 c0       	push   0xc0021d70
c0010499:	55                   	push   ebp
c001049a:	e8 b1 02 ff ff       	call   c0000750 <strcmp>
c001049f:	83 c4 10             	add    esp,0x10
c00104a2:	85 c0                	test   eax,eax
c00104a4:	75 0f                	jne    c00104b5 <CPU::detectFeatures()+0x2b9>
c00104a6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00104b0:	e9 12 01 00 00       	jmp    c00105c7 <CPU::detectFeatures()+0x3cb>
c00104b5:	50                   	push   eax
c00104b6:	50                   	push   eax
c00104b7:	68 7d 1d 02 c0       	push   0xc0021d7d
c00104bc:	55                   	push   ebp
c00104bd:	e8 8e 02 ff ff       	call   c0000750 <strcmp>
c00104c2:	83 c4 10             	add    esp,0x10
c00104c5:	85 c0                	test   eax,eax
c00104c7:	75 0f                	jne    c00104d8 <CPU::detectFeatures()+0x2dc>
c00104c9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00104d3:	e9 ef 00 00 00       	jmp    c00105c7 <CPU::detectFeatures()+0x3cb>
c00104d8:	50                   	push   eax
c00104d9:	50                   	push   eax
c00104da:	68 8a 1d 02 c0       	push   0xc0021d8a
c00104df:	55                   	push   ebp
c00104e0:	e8 6b 02 ff ff       	call   c0000750 <strcmp>
c00104e5:	83 c4 10             	add    esp,0x10
c00104e8:	85 c0                	test   eax,eax
c00104ea:	75 0f                	jne    c00104fb <CPU::detectFeatures()+0x2ff>
c00104ec:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00104f6:	e9 cc 00 00 00       	jmp    c00105c7 <CPU::detectFeatures()+0x3cb>
c00104fb:	50                   	push   eax
c00104fc:	50                   	push   eax
c00104fd:	68 97 1d 02 c0       	push   0xc0021d97
c0010502:	55                   	push   ebp
c0010503:	e8 48 02 ff ff       	call   c0000750 <strcmp>
c0010508:	83 c4 10             	add    esp,0x10
c001050b:	85 c0                	test   eax,eax
c001050d:	75 0f                	jne    c001051e <CPU::detectFeatures()+0x322>
c001050f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010519:	e9 a9 00 00 00       	jmp    c00105c7 <CPU::detectFeatures()+0x3cb>
c001051e:	50                   	push   eax
c001051f:	50                   	push   eax
c0010520:	68 a4 1d 02 c0       	push   0xc0021da4
c0010525:	55                   	push   ebp
c0010526:	e8 25 02 ff ff       	call   c0000750 <strcmp>
c001052b:	83 c4 10             	add    esp,0x10
c001052e:	85 c0                	test   eax,eax
c0010530:	75 0f                	jne    c0010541 <CPU::detectFeatures()+0x345>
c0010532:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001053c:	e9 86 00 00 00       	jmp    c00105c7 <CPU::detectFeatures()+0x3cb>
c0010541:	50                   	push   eax
c0010542:	50                   	push   eax
c0010543:	68 b1 1d 02 c0       	push   0xc0021db1
c0010548:	55                   	push   ebp
c0010549:	e8 02 02 ff ff       	call   c0000750 <strcmp>
c001054e:	83 c4 10             	add    esp,0x10
c0010551:	85 c0                	test   eax,eax
c0010553:	75 0c                	jne    c0010561 <CPU::detectFeatures()+0x365>
c0010555:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001055f:	eb 66                	jmp    c00105c7 <CPU::detectFeatures()+0x3cb>
c0010561:	50                   	push   eax
c0010562:	50                   	push   eax
c0010563:	68 be 1d 02 c0       	push   0xc0021dbe
c0010568:	55                   	push   ebp
c0010569:	e8 e2 01 ff ff       	call   c0000750 <strcmp>
c001056e:	83 c4 10             	add    esp,0x10
c0010571:	85 c0                	test   eax,eax
c0010573:	75 0c                	jne    c0010581 <CPU::detectFeatures()+0x385>
c0010575:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001057f:	eb 46                	jmp    c00105c7 <CPU::detectFeatures()+0x3cb>
c0010581:	57                   	push   edi
c0010582:	57                   	push   edi
c0010583:	68 cb 1d 02 c0       	push   0xc0021dcb
c0010588:	55                   	push   ebp
c0010589:	e8 c2 01 ff ff       	call   c0000750 <strcmp>
c001058e:	83 c4 10             	add    esp,0x10
c0010591:	85 c0                	test   eax,eax
c0010593:	74 e0                	je     c0010575 <CPU::detectFeatures()+0x379>
c0010595:	56                   	push   esi
c0010596:	56                   	push   esi
c0010597:	68 d8 1d 02 c0       	push   0xc0021dd8
c001059c:	55                   	push   ebp
c001059d:	e8 ae 01 ff ff       	call   c0000750 <strcmp>
c00105a2:	83 c4 10             	add    esp,0x10
c00105a5:	85 c0                	test   eax,eax
c00105a7:	74 cc                	je     c0010575 <CPU::detectFeatures()+0x379>
c00105a9:	51                   	push   ecx
c00105aa:	51                   	push   ecx
c00105ab:	68 e5 1d 02 c0       	push   0xc0021de5
c00105b0:	55                   	push   ebp
c00105b1:	e8 9a 01 ff ff       	call   c0000750 <strcmp>
c00105b6:	83 c4 10             	add    esp,0x10
c00105b9:	85 c0                	test   eax,eax
c00105bb:	74 b8                	je     c0010575 <CPU::detectFeatures()+0x379>
c00105bd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00105c7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00105cc:	0f 86 be 00 00 00    	jbe    c0010690 <CPU::detectFeatures()+0x494>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	68 80 00 00 00       	push   0x80
c00105da:	e8 31 fb ff ff       	call   c0010110 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00105df:	83 e0 01             	and    eax,0x1
c00105e2:	c1 e0 06             	shl    eax,0x6
c00105e5:	89 c2                	mov    edx,eax
c00105e7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105ed:	83 e0 bf             	and    eax,0xffffffbf
c00105f0:	09 d0                	or     eax,edx
c00105f2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105f8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00105ff:	e8 0c fb ff ff       	call   c0010110 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010604:	83 e0 01             	and    eax,0x1
c0010607:	c1 e0 04             	shl    eax,0x4
c001060a:	89 c2                	mov    edx,eax
c001060c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010612:	83 e0 ef             	and    eax,0xffffffef
c0010615:	09 d0                	or     eax,edx
c0010617:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001061d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010624:	e8 e7 fa ff ff       	call   c0010110 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010629:	89 c2                	mov    edx,eax
c001062b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010631:	c1 e2 07             	shl    edx,0x7
c0010634:	83 e0 7f             	and    eax,0x7f
c0010637:	09 d0                	or     eax,edx
c0010639:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001063f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010646:	e8 f3 fa ff ff       	call   c001013e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001064b:	83 e0 01             	and    eax,0x1
c001064e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010655:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001065b:	83 e0 f7             	and    eax,0xfffffff7
c001065e:	09 d0                	or     eax,edx
c0010660:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010666:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001066d:	e8 cc fa ff ff       	call   c001013e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010672:	83 c4 10             	add    esp,0x10
c0010675:	83 e0 01             	and    eax,0x1
c0010678:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001067f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010685:	83 e0 fb             	and    eax,0xfffffffb
c0010688:	09 d0                	or     eax,edx
c001068a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010690:	83 ec 0c             	sub    esp,0xc
c0010693:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010697:	50                   	push   eax
c0010698:	8d 44 24 28          	lea    eax,[esp+0x28]
c001069c:	50                   	push   eax
c001069d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00106a1:	57                   	push   edi
c00106a2:	8d 74 24 28          	lea    esi,[esp+0x28]
c00106a6:	56                   	push   esi
c00106a7:	6a 01                	push   0x1
c00106a9:	e8 82 f9 ff ff       	call   c0010030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00106b2:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00106b8:	89 c1                	mov    ecx,eax
c00106ba:	83 e2 f0             	and    edx,0xfffffff0
c00106bd:	83 e1 0f             	and    ecx,0xf
c00106c0:	09 ca                	or     edx,ecx
c00106c2:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00106c8:	89 c2                	mov    edx,eax
c00106ca:	c1 ea 04             	shr    edx,0x4
c00106cd:	83 e2 0f             	and    edx,0xf
c00106d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00106d4:	89 d1                	mov    ecx,edx
c00106d6:	83 c4 20             	add    esp,0x20
c00106d9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00106df:	c1 e1 06             	shl    ecx,0x6
c00106e2:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00106e8:	09 ca                	or     edx,ecx
c00106ea:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00106f1:	89 c2                	mov    edx,eax
c00106f3:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00106f9:	c1 ea 08             	shr    edx,0x8
c00106fc:	83 e1 3f             	and    ecx,0x3f
c00106ff:	83 e2 0f             	and    edx,0xf
c0010702:	89 d5                	mov    ebp,edx
c0010704:	83 e5 03             	and    ebp,0x3
c0010707:	c1 e5 06             	shl    ebp,0x6
c001070a:	09 e9                	or     ecx,ebp
c001070c:	89 d5                	mov    ebp,edx
c001070e:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010714:	c1 ed 02             	shr    ebp,0x2
c0010717:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001071d:	83 e1 c0             	and    ecx,0xffffffc0
c0010720:	09 e9                	or     ecx,ebp
c0010722:	89 c5                	mov    ebp,eax
c0010724:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001072a:	c1 ed 08             	shr    ebp,0x8
c001072d:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010733:	83 e5 30             	and    ebp,0x30
c0010736:	83 e1 cf             	and    ecx,0xffffffcf
c0010739:	09 e9                	or     ecx,ebp
c001073b:	83 fa 06             	cmp    edx,0x6
c001073e:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010744:	74 05                	je     c001074b <CPU::detectFeatures()+0x54f>
c0010746:	83 fa 0f             	cmp    edx,0xf
c0010749:	75 64                	jne    c00107af <CPU::detectFeatures()+0x5b3>
c001074b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010751:	89 c1                	mov    ecx,eax
c0010753:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010759:	c1 e9 10             	shr    ecx,0x10
c001075c:	c1 e1 04             	shl    ecx,0x4
c001075f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010763:	0f b6 c9             	movzx  ecx,cl
c0010766:	c1 e1 06             	shl    ecx,0x6
c0010769:	09 e9                	or     ecx,ebp
c001076b:	83 fa 0f             	cmp    edx,0xf
c001076e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010775:	75 38                	jne    c00107af <CPU::detectFeatures()+0x5b3>
c0010777:	c1 e8 14             	shr    eax,0x14
c001077a:	83 c0 0f             	add    eax,0xf
c001077d:	0f b6 c0             	movzx  eax,al
c0010780:	89 c2                	mov    edx,eax
c0010782:	c1 e8 02             	shr    eax,0x2
c0010785:	83 e2 03             	and    edx,0x3
c0010788:	89 d1                	mov    ecx,edx
c001078a:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010790:	c1 e1 06             	shl    ecx,0x6
c0010793:	83 e2 3f             	and    edx,0x3f
c0010796:	09 ca                	or     edx,ecx
c0010798:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001079e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00107a4:	83 e2 c0             	and    edx,0xffffffc0
c00107a7:	09 d0                	or     eax,edx
c00107a9:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00107af:	83 ec 0c             	sub    esp,0xc
c00107b2:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107b8:	83 c8 07             	or     eax,0x7
c00107bb:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00107c1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00107c5:	50                   	push   eax
c00107c6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00107ca:	55                   	push   ebp
c00107cb:	57                   	push   edi
c00107cc:	56                   	push   esi
c00107cd:	68 00 00 00 80       	push   0x80000000
c00107d2:	e8 59 f8 ff ff       	call   c0010030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00107d7:	83 c4 20             	add    esp,0x20
c00107da:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00107e2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00107e6:	76 1e                	jbe    c0010806 <CPU::detectFeatures()+0x60a>
c00107e8:	83 ec 0c             	sub    esp,0xc
c00107eb:	50                   	push   eax
c00107ec:	55                   	push   ebp
c00107ed:	57                   	push   edi
c00107ee:	56                   	push   esi
c00107ef:	68 01 00 00 80       	push   0x80000001
c00107f4:	e8 37 f8 ff ff       	call   c0010030 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00107f9:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010803:	83 c4 20             	add    esp,0x20
c0010806:	52                   	push   edx
c0010807:	52                   	push   edx
c0010808:	68 f1 1d 02 c0       	push   0xc0021df1
c001080d:	53                   	push   ebx
c001080e:	e8 9d c0 ff ff       	call   c000c8b0 <Device::setName(char const*)>
c0010813:	83 c4 10             	add    esp,0x10
c0010816:	eb 69                	jmp    c0010881 <CPU::detectFeatures()+0x685>
c0010818:	50                   	push   eax
c0010819:	50                   	push   eax
c001081a:	68 56 1d 02 c0       	push   0xc0021d56
c001081f:	55                   	push   ebp
c0010820:	e8 1b fe fe ff       	call   c0000640 <strcpy>
c0010825:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001082f:	e8 8f f9 fe ff       	call   c00001c3 <is486>
c0010834:	83 c4 10             	add    esp,0x10
c0010837:	85 c0                	test   eax,eax
c0010839:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001083f:	74 1f                	je     c0010860 <CPU::detectFeatures()+0x664>
c0010841:	83 c8 07             	or     eax,0x7
c0010844:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001084a:	0f 20 c0             	mov    eax,cr0
c001084d:	83 e0 14             	and    eax,0x14
c0010850:	83 f8 04             	cmp    eax,0x4
c0010853:	75 10                	jne    c0010865 <CPU::detectFeatures()+0x669>
c0010855:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001085b:	83 e0 fd             	and    eax,0xfffffffd
c001085e:	eb 1b                	jmp    c001087b <CPU::detectFeatures()+0x67f>
c0010860:	83 e0 f8             	and    eax,0xfffffff8
c0010863:	eb df                	jmp    c0010844 <CPU::detectFeatures()+0x648>
c0010865:	e8 34 f9 fe ff       	call   c000019e <hasLegacyFPU>
c001086a:	83 e0 01             	and    eax,0x1
c001086d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010870:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010876:	83 e0 fd             	and    eax,0xfffffffd
c0010879:	09 d0                	or     eax,edx
c001087b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010881:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010888:	74 17                	je     c00108a1 <CPU::detectFeatures()+0x6a5>
c001088a:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c0010890:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010896:	83 c8 10             	or     eax,0x10
c0010899:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001089f:	eb 20                	jmp    c00108c1 <CPU::detectFeatures()+0x6c5>
c00108a1:	e8 f8 f8 fe ff       	call   c000019e <hasLegacyFPU>
c00108a6:	83 e0 01             	and    eax,0x1
c00108a9:	8d 14 00             	lea    edx,[eax+eax*1]
c00108ac:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108b2:	83 e0 fd             	and    eax,0xfffffffd
c00108b5:	09 d0                	or     eax,edx
c00108b7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108bd:	a8 02                	test   al,0x2
c00108bf:	75 c9                	jne    c001088a <CPU::detectFeatures()+0x68e>
c00108c1:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00108c8:	83 c4 2c             	add    esp,0x2c
c00108cb:	5b                   	pop    ebx
c00108cc:	5e                   	pop    esi
c00108cd:	5f                   	pop    edi
c00108ce:	5d                   	pop    ebp
c00108cf:	c3                   	ret    

c00108d0 <CPU::setupSMEP()>:
c00108d0:	0f 20 e0             	mov    eax,cr4
c00108d3:	0d 00 00 10 00       	or     eax,0x100000
c00108d8:	0f 22 e0             	mov    cr4,eax
c00108db:	c3                   	ret    

c00108dc <CPU::setupUMIP()>:
c00108dc:	0f 20 e0             	mov    eax,cr4
c00108df:	80 cc 08             	or     ah,0x8
c00108e2:	0f 22 e0             	mov    cr4,eax
c00108e5:	c3                   	ret    

c00108e6 <CPU::setupTSC()>:
c00108e6:	0f 20 e0             	mov    eax,cr4
c00108e9:	83 c8 04             	or     eax,0x4
c00108ec:	0f 22 e0             	mov    cr4,eax
c00108ef:	c3                   	ret    

c00108f0 <CPU::setupLargePages()>:
c00108f0:	0f 20 e0             	mov    eax,cr4
c00108f3:	83 c8 10             	or     eax,0x10
c00108f6:	0f 22 e0             	mov    cr4,eax
c00108f9:	c3                   	ret    

c00108fa <CPU::setupPAT()>:
c00108fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00108ff:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010906:	74 2c                	je     c0010934 <CPU::setupPAT()+0x3a>
c0010908:	53                   	push   ebx
c0010909:	83 ec 10             	sub    esp,0x10
c001090c:	68 77 02 00 00       	push   0x277
c0010911:	50                   	push   eax
c0010912:	e8 a9 67 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010917:	83 e2 f8             	and    edx,0xfffffff8
c001091a:	83 ca 01             	or     edx,0x1
c001091d:	52                   	push   edx
c001091e:	50                   	push   eax
c001091f:	68 77 02 00 00       	push   0x277
c0010924:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001092a:	e8 bd 67 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c001092f:	83 c4 28             	add    esp,0x28
c0010932:	5b                   	pop    ebx
c0010933:	c3                   	ret    
c0010934:	c3                   	ret    
c0010935:	90                   	nop

c0010936 <CPU::setupMTRR()>:
c0010936:	c3                   	ret    
c0010937:	90                   	nop

c0010938 <CPU::setupGlobalPages()>:
c0010938:	0f 20 e0             	mov    eax,cr4
c001093b:	0c 80                	or     al,0x80
c001093d:	0f 22 e0             	mov    cr4,eax
c0010940:	c3                   	ret    
c0010941:	90                   	nop

c0010942 <CPU::allowUsermodeDataAccess()>:
c0010942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010946:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001094d:	74 03                	je     c0010952 <CPU::allowUsermodeDataAccess()+0x10>
c001094f:	0f 01 cb             	stac   
c0010952:	c3                   	ret    
c0010953:	90                   	nop

c0010954 <CPU::prohibitUsermodeDataAccess()>:
c0010954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010958:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001095f:	74 03                	je     c0010964 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010961:	0f 01 ca             	clac   
c0010964:	c3                   	ret    
c0010965:	90                   	nop

c0010966 <CPU::setupSMAP()>:
c0010966:	0f 20 e0             	mov    eax,cr4
c0010969:	0d 00 00 20 00       	or     eax,0x200000
c001096e:	0f 22 e0             	mov    cr4,eax
c0010971:	eb e1                	jmp    c0010954 <CPU::prohibitUsermodeDataAccess()>
c0010973:	90                   	nop

c0010974 <CPU::setupFeatures()>:
c0010974:	53                   	push   ebx
c0010975:	83 ec 08             	sub    esp,0x8
c0010978:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001097c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010983:	74 18                	je     c001099d <CPU::setupFeatures()+0x29>
c0010985:	83 ec 0c             	sub    esp,0xc
c0010988:	68 fd 1d 02 c0       	push   0xc0021dfd
c001098d:	e8 b3 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010992:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010995:	e8 42 ff ff ff       	call   c00108dc <CPU::setupUMIP()>
c001099a:	83 c4 10             	add    esp,0x10
c001099d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00109a4:	74 18                	je     c00109be <CPU::setupFeatures()+0x4a>
c00109a6:	83 ec 0c             	sub    esp,0xc
c00109a9:	68 07 1e 02 c0       	push   0xc0021e07
c00109ae:	e8 92 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109b6:	e8 2b ff ff ff       	call   c00108e6 <CPU::setupTSC()>
c00109bb:	83 c4 10             	add    esp,0x10
c00109be:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00109c5:	74 18                	je     c00109df <CPU::setupFeatures()+0x6b>
c00109c7:	83 ec 0c             	sub    esp,0xc
c00109ca:	68 10 1e 02 c0       	push   0xc0021e10
c00109cf:	e8 71 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109d7:	e8 14 ff ff ff       	call   c00108f0 <CPU::setupLargePages()>
c00109dc:	83 c4 10             	add    esp,0x10
c00109df:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00109e6:	74 18                	je     c0010a00 <CPU::setupFeatures()+0x8c>
c00109e8:	83 ec 0c             	sub    esp,0xc
c00109eb:	68 19 1e 02 c0       	push   0xc0021e19
c00109f0:	e8 50 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109f8:	e8 3b ff ff ff       	call   c0010938 <CPU::setupGlobalPages()>
c00109fd:	83 c4 10             	add    esp,0x10
c0010a00:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010a07:	74 18                	je     c0010a21 <CPU::setupFeatures()+0xad>
c0010a09:	83 ec 0c             	sub    esp,0xc
c0010a0c:	68 2b 1e 02 c0       	push   0xc0021e2b
c0010a11:	e8 2f 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a19:	e8 dc fe ff ff       	call   c00108fa <CPU::setupPAT()>
c0010a1e:	83 c4 10             	add    esp,0x10
c0010a21:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010a28:	74 11                	je     c0010a3b <CPU::setupFeatures()+0xc7>
c0010a2a:	c7 44 24 10 34 1e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021e34
c0010a32:	83 c4 08             	add    esp,0x8
c0010a35:	5b                   	pop    ebx
c0010a36:	e9 0a 9f ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010a3b:	83 c4 08             	add    esp,0x8
c0010a3e:	5b                   	pop    ebx
c0010a3f:	c3                   	ret    

c0010a40 <CPU::open(int, int, void*)>:
c0010a40:	55                   	push   ebp
c0010a41:	57                   	push   edi
c0010a42:	56                   	push   esi
c0010a43:	53                   	push   ebx
c0010a44:	83 ec 18             	sub    esp,0x18
c0010a47:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a4b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010a4f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010a53:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010a59:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010a5f:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010a65:	50                   	push   eax
c0010a66:	e8 53 69 ff ff       	call   c00073be <GDT::setup()>
c0010a6b:	83 c4 0c             	add    esp,0xc
c0010a6e:	6a 00                	push   0x0
c0010a70:	68 ef be ad de       	push   0xdeadbeef
c0010a75:	55                   	push   ebp
c0010a76:	e8 0d 85 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010a7b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010a7e:	e8 e5 84 ff ff       	call   c0008f68 <TSS::flush()>
c0010a83:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010a89:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a8c:	e8 91 6b ff ff       	call   c0007622 <IDT::setup()>
c0010a91:	b8 00 04 00 00       	mov    eax,0x400
c0010a96:	0f 23 f8             	mov    db7,eax
c0010a99:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010aa3:	e8 17 73 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010aa8:	83 c4 10             	add    esp,0x10
c0010aab:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010ab1:	85 f6                	test   esi,esi
c0010ab3:	89 38                	mov    DWORD PTR [eax],edi
c0010ab5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010abb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010abe:	74 10                	je     c0010ad0 <CPU::open(int, int, void*)+0x90>
c0010ac0:	50                   	push   eax
c0010ac1:	50                   	push   eax
c0010ac2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010ac8:	56                   	push   esi
c0010ac9:	e8 e0 8d ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010ace:	eb 0d                	jmp    c0010add <CPU::open(int, int, void*)+0x9d>
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	68 3e 1e 02 c0       	push   0xc0021e3e
c0010ad8:	e8 74 08 00 00       	call   c0011351 <KePanic(char const*)>
c0010add:	83 c4 10             	add    esp,0x10
c0010ae0:	83 ec 0c             	sub    esp,0xc
c0010ae3:	68 4c 1e 02 c0       	push   0xc0021e4c
c0010ae8:	e8 8e 01 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c0010aed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010af0:	e8 07 f7 ff ff       	call   c00101fc <CPU::detectFeatures()>
c0010af5:	c7 04 24 6f 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e6f
c0010afc:	e8 7a 01 00 00       	call   c0010c7b <KeSetBootMessage(char const*)>
c0010b01:	e8 da 72 00 00       	call   c0017de0 <HalInitialise()>
c0010b06:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010b0b:	83 e0 10             	and    eax,0x10
c0010b0e:	83 f8 01             	cmp    eax,0x1
c0010b11:	19 c0                	sbb    eax,eax
c0010b13:	83 e0 46             	and    eax,0x46
c0010b16:	83 c0 1e             	add    eax,0x1e
c0010b19:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b1c:	e8 2c d6 ff ff       	call   c000e14d <setupTimer(int)>
c0010b21:	83 c4 10             	add    esp,0x10
c0010b24:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010b2a:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010b31:	74 0c                	je     c0010b3f <CPU::open(int, int, void*)+0xff>
c0010b33:	83 ec 0c             	sub    esp,0xc
c0010b36:	53                   	push   ebx
c0010b37:	e8 38 fe ff ff       	call   c0010974 <CPU::setupFeatures()>
c0010b3c:	83 c4 10             	add    esp,0x10
c0010b3f:	83 c4 0c             	add    esp,0xc
c0010b42:	31 c0                	xor    eax,eax
c0010b44:	5b                   	pop    ebx
c0010b45:	5e                   	pop    esi
c0010b46:	5f                   	pop    edi
c0010b47:	5d                   	pop    ebp
c0010b48:	c3                   	ret    

c0010b49 <KeInitialiseAtexit()>:
c0010b49:	83 ec 10             	sub    esp,0x10
c0010b4c:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010b56:	6a 60                	push   0x60
c0010b58:	6a 00                	push   0x0
c0010b5a:	68 20 8e 02 c0       	push   0xc0028e20
c0010b5f:	e8 8c f9 fe ff       	call   c00004f0 <memset>
c0010b64:	83 c4 1c             	add    esp,0x1c
c0010b67:	c3                   	ret    

c0010b68 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010b68:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010b6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b71:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010b78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b7c:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010b83:	40                   	inc    eax
c0010b84:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010b89:	83 f8 17             	cmp    eax,0x17
c0010b8c:	7e 0d                	jle    c0010b9b <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010b8e:	c7 44 24 04 b0 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021eb0
c0010b96:	e9 b6 07 00 00       	jmp    c0011351 <KePanic(char const*)>
c0010b9b:	c3                   	ret    

c0010b9c <KeExecuteAtexit()>:
c0010b9c:	53                   	push   ebx
c0010b9d:	31 db                	xor    ebx,ebx
c0010b9f:	83 ec 08             	sub    esp,0x8
c0010ba2:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010ba8:	7e 50                	jle    c0010bfa <KeExecuteAtexit()+0x5e>
c0010baa:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010bb1:	85 c0                	test   eax,eax
c0010bb3:	74 42                	je     c0010bf7 <KeExecuteAtexit()+0x5b>
c0010bb5:	51                   	push   ecx
c0010bb6:	50                   	push   eax
c0010bb7:	53                   	push   ebx
c0010bb8:	68 c9 1e 02 c0       	push   0xc0021ec9
c0010bbd:	e8 83 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010bc2:	58                   	pop    eax
c0010bc3:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010bca:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010bd1:	c7 04 24 eb 1e 02 c0 	mov    DWORD PTR [esp],0xc0021eeb
c0010bd8:	e8 68 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010bdd:	c7 04 24 4b 30 02 c0 	mov    DWORD PTR [esp],0xc002304b
c0010be4:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010bef:	e8 51 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010bf4:	83 c4 10             	add    esp,0x10
c0010bf7:	43                   	inc    ebx
c0010bf8:	eb a8                	jmp    c0010ba2 <KeExecuteAtexit()+0x6>
c0010bfa:	83 c4 08             	add    esp,0x8
c0010bfd:	5b                   	pop    ebx
c0010bfe:	c3                   	ret    

c0010bff <KeDisplaySplashScreen()>:
c0010bff:	55                   	push   ebp
c0010c00:	bd 05 00 00 00       	mov    ebp,0x5
c0010c05:	57                   	push   edi
c0010c06:	bf 0a 00 00 00       	mov    edi,0xa
c0010c0b:	56                   	push   esi
c0010c0c:	31 f6                	xor    esi,esi
c0010c0e:	53                   	push   ebx
c0010c0f:	31 db                	xor    ebx,ebx
c0010c11:	83 ec 0c             	sub    esp,0xc
c0010c14:	0f b6 96 a0 32 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcd60]
c0010c1b:	89 d0                	mov    eax,edx
c0010c1d:	85 d2                	test   edx,edx
c0010c1f:	74 52                	je     c0010c73 <KeDisplaySplashScreen()+0x74>
c0010c21:	80 bb d6 32 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcd2a],0xdb
c0010c28:	75 13                	jne    c0010c3d <KeDisplaySplashScreen()+0x3e>
c0010c2a:	0f b6 8b d5 32 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcd2b]
c0010c31:	83 e1 fe             	and    ecx,0xfffffffe
c0010c34:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010c3a:	75 01                	jne    c0010c3d <KeDisplaySplashScreen()+0x3e>
c0010c3c:	47                   	inc    edi
c0010c3d:	83 fa 0d             	cmp    edx,0xd
c0010c40:	74 28                	je     c0010c6a <KeDisplaySplashScreen()+0x6b>
c0010c42:	83 fa 0a             	cmp    edx,0xa
c0010c45:	75 0a                	jne    c0010c51 <KeDisplaySplashScreen()+0x52>
c0010c47:	45                   	inc    ebp
c0010c48:	bf 0a 00 00 00       	mov    edi,0xa
c0010c4d:	31 db                	xor    ebx,ebx
c0010c4f:	eb 19                	jmp    c0010c6a <KeDisplaySplashScreen()+0x6b>
c0010c51:	83 ec 0c             	sub    esp,0xc
c0010c54:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010c57:	55                   	push   ebp
c0010c58:	0f be c0             	movsx  eax,al
c0010c5b:	52                   	push   edx
c0010c5c:	43                   	inc    ebx
c0010c5d:	6a 00                	push   0x0
c0010c5f:	6a 0e                	push   0xe
c0010c61:	50                   	push   eax
c0010c62:	e8 f9 7d 00 00       	call   c0018a60 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010c67:	83 c4 20             	add    esp,0x20
c0010c6a:	46                   	inc    esi
c0010c6b:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010c71:	75 a1                	jne    c0010c14 <KeDisplaySplashScreen()+0x15>
c0010c73:	83 c4 0c             	add    esp,0xc
c0010c76:	5b                   	pop    ebx
c0010c77:	5e                   	pop    esi
c0010c78:	5f                   	pop    edi
c0010c79:	5d                   	pop    ebp
c0010c7a:	c3                   	ret    

c0010c7b <KeSetBootMessage(char const*)>:
c0010c7b:	57                   	push   edi
c0010c7c:	56                   	push   esi
c0010c7d:	53                   	push   ebx
c0010c7e:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010c84:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010c8b:	68 9e 00 00 00       	push   0x9e
c0010c90:	6a 00                	push   0x0
c0010c92:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010c96:	56                   	push   esi
c0010c97:	e8 54 f8 fe ff       	call   c00004f0 <memset>
c0010c9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c9f:	e8 cc f8 fe ff       	call   c0000570 <strlen>
c0010ca4:	ba 50 00 00 00       	mov    edx,0x50
c0010ca9:	83 c4 10             	add    esp,0x10
c0010cac:	29 c2                	sub    edx,eax
c0010cae:	31 c9                	xor    ecx,ecx
c0010cb0:	83 e2 fe             	and    edx,0xfffffffe
c0010cb3:	01 f2                	add    edx,esi
c0010cb5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010cba:	84 c0                	test   al,al
c0010cbc:	74 0a                	je     c0010cc8 <KeSetBootMessage(char const*)+0x4d>
c0010cbe:	80 cc 0f             	or     ah,0xf
c0010cc1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010cc5:	41                   	inc    ecx
c0010cc6:	eb ed                	jmp    c0010cb5 <KeSetBootMessage(char const*)+0x3a>
c0010cc8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010ccd:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010cd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cd4:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010cda:	5b                   	pop    ebx
c0010cdb:	5e                   	pop    esi
c0010cdc:	5f                   	pop    edi
c0010cdd:	c3                   	ret    
c0010cde:	66 90                	xchg   ax,ax

c0010ce0 <Krnl::handlePowerButton()>:
c0010ce0:	83 ec 0c             	sub    esp,0xc
c0010ce3:	e8 c4 06 00 00       	call   c00113ac <KeHandlePowerButton()>
c0010ce8:	90                   	nop
c0010ce9:	83 c4 0c             	add    esp,0xc
c0010cec:	c3                   	ret    
c0010ced:	8d 76 00             	lea    esi,[esi+0x0]

c0010cf0 <Krnl::handleSleepButton()>:
c0010cf0:	83 ec 0c             	sub    esp,0xc
c0010cf3:	e8 e9 06 00 00       	call   c00113e1 <KeHandleSleepButton()>
c0010cf8:	90                   	nop
c0010cf9:	83 c4 0c             	add    esp,0xc
c0010cfc:	c3                   	ret    
c0010cfd:	90                   	nop

c0010cfe <EnvVarContainer::getEnv(char const*)>:
c0010cfe:	57                   	push   edi
c0010cff:	56                   	push   esi
c0010d00:	53                   	push   ebx
c0010d01:	31 db                	xor    ebx,ebx
c0010d03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d07:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010d09:	7e 2b                	jle    c0010d36 <EnvVarContainer::getEnv(char const*)+0x38>
c0010d0b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010d12:	50                   	push   eax
c0010d13:	50                   	push   eax
c0010d14:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d17:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010d1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010d1e:	e8 2d fa fe ff       	call   c0000750 <strcmp>
c0010d23:	83 c4 10             	add    esp,0x10
c0010d26:	85 c0                	test   eax,eax
c0010d28:	75 09                	jne    c0010d33 <EnvVarContainer::getEnv(char const*)+0x35>
c0010d2a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d2d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010d31:	eb 05                	jmp    c0010d38 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010d33:	43                   	inc    ebx
c0010d34:	eb d1                	jmp    c0010d07 <EnvVarContainer::getEnv(char const*)+0x9>
c0010d36:	31 c0                	xor    eax,eax
c0010d38:	5b                   	pop    ebx
c0010d39:	5e                   	pop    esi
c0010d3a:	5f                   	pop    edi
c0010d3b:	c3                   	ret    

c0010d3c <EnvVarContainer::setEnv(char const*, char const*)>:
c0010d3c:	55                   	push   ebp
c0010d3d:	57                   	push   edi
c0010d3e:	56                   	push   esi
c0010d3f:	53                   	push   ebx
c0010d40:	83 ec 28             	sub    esp,0x28
c0010d43:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010d47:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010d4b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010d4f:	56                   	push   esi
c0010d50:	e8 1b f8 fe ff       	call   c0000570 <strlen>
c0010d55:	40                   	inc    eax
c0010d56:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d59:	e8 58 6d ff ff       	call   c0007ab6 <malloc>
c0010d5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010d65:	e8 06 f8 fe ff       	call   c0000570 <strlen>
c0010d6a:	40                   	inc    eax
c0010d6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d6e:	e8 43 6d ff ff       	call   c0007ab6 <malloc>
c0010d73:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d76:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010d7a:	e8 f1 f7 fe ff       	call   c0000570 <strlen>
c0010d7f:	83 c4 0c             	add    esp,0xc
c0010d82:	40                   	inc    eax
c0010d83:	50                   	push   eax
c0010d84:	6a 00                	push   0x0
c0010d86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010d8a:	e8 61 f7 fe ff       	call   c00004f0 <memset>
c0010d8f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d92:	e8 d9 f7 fe ff       	call   c0000570 <strlen>
c0010d97:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010d9b:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010da0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010da3:	89 de                	mov    esi,ebx
c0010da5:	e8 c6 f7 fe ff       	call   c0000570 <strlen>
c0010daa:	83 c4 0c             	add    esp,0xc
c0010dad:	40                   	inc    eax
c0010dae:	50                   	push   eax
c0010daf:	6a 00                	push   0x0
c0010db1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010db5:	e8 36 f7 fe ff       	call   c00004f0 <memset>
c0010dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dbd:	e8 ae f7 fe ff       	call   c0000570 <strlen>
c0010dc2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010dc6:	8d 48 01             	lea    ecx,[eax+0x1]
c0010dc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dcb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010dce:	40                   	inc    eax
c0010dcf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010dd2:	c1 e0 03             	shl    eax,0x3
c0010dd5:	5a                   	pop    edx
c0010dd6:	59                   	pop    ecx
c0010dd7:	50                   	push   eax
c0010dd8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010ddb:	e8 c2 6c ff ff       	call   c0007aa2 <realloc>
c0010de0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010de4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010de7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010dea:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010dee:	b9 08 00 00 00       	mov    ecx,0x8
c0010df3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010df5:	83 c4 2c             	add    esp,0x2c
c0010df8:	5b                   	pop    ebx
c0010df9:	5e                   	pop    esi
c0010dfa:	5f                   	pop    edi
c0010dfb:	5d                   	pop    ebp
c0010dfc:	c3                   	ret    
c0010dfd:	90                   	nop

c0010dfe <EnvVarContainer::deleteEnv(char const*)>:
c0010dfe:	c3                   	ret    
c0010dff:	90                   	nop

c0010e00 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010e00:	55                   	push   ebp
c0010e01:	57                   	push   edi
c0010e02:	56                   	push   esi
c0010e03:	53                   	push   ebx
c0010e04:	81 ec 38 01 00 00    	sub    esp,0x138
c0010e0a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010e11:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010e18:	68 14 01 00 00       	push   0x114
c0010e1d:	e8 94 6c ff ff       	call   c0007ab6 <malloc>
c0010e22:	6a 01                	push   0x1
c0010e24:	89 c3                	mov    ebx,eax
c0010e26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010e29:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010e30:	50                   	push   eax
c0010e31:	e8 ba a9 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c0010e36:	83 c4 14             	add    esp,0x14
c0010e39:	53                   	push   ebx
c0010e3a:	e8 53 ad ff ff       	call   c000bb92 <File::exists()>
c0010e3f:	83 c4 10             	add    esp,0x10
c0010e42:	84 c0                	test   al,al
c0010e44:	75 31                	jne    c0010e77 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010e46:	50                   	push   eax
c0010e47:	50                   	push   eax
c0010e48:	6a 12                	push   0x12
c0010e4a:	53                   	push   ebx
c0010e4b:	e8 7e aa ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c0010e50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e52:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010e55:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e58:	e8 13 f7 fe ff       	call   c0000570 <strlen>
c0010e5d:	5a                   	pop    edx
c0010e5e:	31 d2                	xor    edx,edx
c0010e60:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010e64:	51                   	push   ecx
c0010e65:	56                   	push   esi
c0010e66:	52                   	push   edx
c0010e67:	50                   	push   eax
c0010e68:	53                   	push   ebx
c0010e69:	ff d7                	call   edi
c0010e6b:	83 c4 14             	add    esp,0x14
c0010e6e:	53                   	push   ebx
c0010e6f:	e8 b8 aa ff ff       	call   c000b92c <File::close()>
c0010e74:	83 c4 10             	add    esp,0x10
c0010e77:	56                   	push   esi
c0010e78:	31 f6                	xor    esi,esi
c0010e7a:	68 00 01 00 00       	push   0x100
c0010e7f:	6a 00                	push   0x0
c0010e81:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010e85:	50                   	push   eax
c0010e86:	e8 65 f6 fe ff       	call   c00004f0 <memset>
c0010e8b:	5f                   	pop    edi
c0010e8c:	58                   	pop    eax
c0010e8d:	6a 01                	push   0x1
c0010e8f:	53                   	push   ebx
c0010e90:	e8 39 aa ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ea0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010ea8:	83 ec 0c             	sub    esp,0xc
c0010eab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ead:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010eb1:	51                   	push   ecx
c0010eb2:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010eb6:	52                   	push   edx
c0010eb7:	6a 00                	push   0x0
c0010eb9:	6a 01                	push   0x1
c0010ebb:	53                   	push   ebx
c0010ebc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010ebf:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010ec4:	83 c4 20             	add    esp,0x20
c0010ec7:	89 c2                	mov    edx,eax
c0010ec9:	85 c0                	test   eax,eax
c0010ecb:	0f 84 36 01 00 00    	je     c0011007 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010ed1:	83 f8 0d             	cmp    eax,0xd
c0010ed4:	0f 84 22 01 00 00    	je     c0010ffc <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010eda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010edf:	0f 84 f0 00 00 00    	je     c0010fd5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010ee5:	83 f8 0a             	cmp    eax,0xa
c0010ee8:	74 13                	je     c0010efd <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010eea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010eef:	74 0c                	je     c0010efd <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010ef1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010ef7:	0f 8e f6 00 00 00    	jle    c0010ff3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010efd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f01:	83 ec 0c             	sub    esp,0xc
c0010f04:	8d 78 01             	lea    edi,[eax+0x1]
c0010f07:	57                   	push   edi
c0010f08:	e8 a9 6b ff ff       	call   c0007ab6 <malloc>
c0010f0d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010f11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010f15:	8d 56 04             	lea    edx,[esi+0x4]
c0010f18:	89 14 24             	mov    DWORD PTR [esp],edx
c0010f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010f1f:	e8 92 6b ff ff       	call   c0007ab6 <malloc>
c0010f24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010f28:	83 c4 0c             	add    esp,0xc
c0010f2b:	57                   	push   edi
c0010f2c:	6a 00                	push   0x0
c0010f2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010f32:	e8 b9 f5 fe ff       	call   c00004f0 <memset>
c0010f37:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010f3b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f3f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010f43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f45:	83 c4 0c             	add    esp,0xc
c0010f48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f4c:	52                   	push   edx
c0010f4d:	6a 00                	push   0x0
c0010f4f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f53:	e8 98 f5 fe ff       	call   c00004f0 <memset>
c0010f58:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010f5c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010f60:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f63:	e8 08 f6 fe ff       	call   c0000570 <strlen>
c0010f68:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010f6c:	89 c1                	mov    ecx,eax
c0010f6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f70:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f73:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010f76:	40                   	inc    eax
c0010f77:	83 c4 10             	add    esp,0x10
c0010f7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010f7d:	85 d2                	test   edx,edx
c0010f7f:	75 0c                	jne    c0010f8d <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010f81:	83 ec 0c             	sub    esp,0xc
c0010f84:	6a 08                	push   0x8
c0010f86:	e8 2b 6b ff ff       	call   c0007ab6 <malloc>
c0010f8b:	eb 0c                	jmp    c0010f99 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010f8d:	c1 e0 03             	shl    eax,0x3
c0010f90:	51                   	push   ecx
c0010f91:	51                   	push   ecx
c0010f92:	50                   	push   eax
c0010f93:	52                   	push   edx
c0010f94:	e8 09 6b ff ff       	call   c0007aa2 <realloc>
c0010f99:	83 c4 10             	add    esp,0x10
c0010f9c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010f9f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010fa2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010fa5:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010fa9:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010fad:	b9 08 00 00 00       	mov    ecx,0x8
c0010fb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fb4:	31 f6                	xor    esi,esi
c0010fb6:	50                   	push   eax
c0010fb7:	68 00 01 00 00       	push   0x100
c0010fbc:	6a 00                	push   0x0
c0010fbe:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010fc2:	50                   	push   eax
c0010fc3:	e8 28 f5 fe ff       	call   c00004f0 <memset>
c0010fc8:	83 c4 10             	add    esp,0x10
c0010fcb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fd3:	eb 27                	jmp    c0010ffc <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010fd5:	83 f8 3d             	cmp    eax,0x3d
c0010fd8:	74 1e                	je     c0010ff8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010fda:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010fe0:	7f 07                	jg     c0010fe9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010fe2:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0010fe6:	46                   	inc    esi
c0010fe7:	eb 13                	jmp    c0010ffc <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010fe9:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010ff1:	eb 09                	jmp    c0010ffc <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010ff3:	83 f8 3d             	cmp    eax,0x3d
c0010ff6:	75 ea                	jne    c0010fe2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010ff8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010ffc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011001:	0f 85 99 fe ff ff    	jne    c0010ea0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011007:	83 ec 0c             	sub    esp,0xc
c001100a:	53                   	push   ebx
c001100b:	e8 1c a9 ff ff       	call   c000b92c <File::close()>
c0011010:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011012:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011015:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011018:	81 c4 3c 01 00 00    	add    esp,0x13c
c001101e:	5b                   	pop    ebx
c001101f:	5e                   	pop    esi
c0011020:	5f                   	pop    edi
c0011021:	5d                   	pop    ebp
c0011022:	c3                   	ret    
c0011023:	90                   	nop

c0011024 <EnvVarContainer::__loadSystem()>:
c0011024:	83 ec 10             	sub    esp,0x10
c0011027:	68 00 34 02 c0       	push   0xc0023400
c001102c:	68 f0 1e 02 c0       	push   0xc0021ef0
c0011031:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011035:	e8 c6 fd ff ff       	call   c0010e00 <EnvVarContainer::loadFrom(char const*, char const*)>
c001103a:	83 c4 1c             	add    esp,0x1c
c001103d:	c3                   	ret    

c001103e <EnvVarContainer::__loadUser()>:
c001103e:	c3                   	ret    
c001103f:	90                   	nop

c0011040 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011044:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001104a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001104e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011052:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011055:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011059:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011060:	90                   	nop
c0011061:	c3                   	ret    

c0011062 <EnvVarContainer::~EnvVarContainer()>:
c0011062:	83 ec 0c             	sub    esp,0xc
c0011065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011069:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001106c:	85 c0                	test   eax,eax
c001106e:	74 1d                	je     c001108d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011074:	8b 00                	mov    eax,DWORD PTR [eax]
c0011076:	85 c0                	test   eax,eax
c0011078:	74 13                	je     c001108d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001107a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001107e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011081:	83 ec 0c             	sub    esp,0xc
c0011084:	50                   	push   eax
c0011085:	e8 3c 6a ff ff       	call   c0007ac6 <free>
c001108a:	83 c4 10             	add    esp,0x10
c001108d:	90                   	nop
c001108e:	83 c4 0c             	add    esp,0xc
c0011091:	c3                   	ret    

c0011092 <KeGetEnv(Process*, char const*)>:
c0011092:	53                   	push   ebx
c0011093:	83 ec 08             	sub    esp,0x8
c0011096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001109e:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c00110a4:	74 04                	je     c00110aa <KeGetEnv(Process*, char const*)+0x18>
c00110a6:	85 c0                	test   eax,eax
c00110a8:	75 0b                	jne    c00110b5 <KeGetEnv(Process*, char const*)+0x23>
c00110aa:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c00110af:	85 c0                	test   eax,eax
c00110b1:	75 19                	jne    c00110cc <KeGetEnv(Process*, char const*)+0x3a>
c00110b3:	eb 27                	jmp    c00110dc <KeGetEnv(Process*, char const*)+0x4a>
c00110b5:	52                   	push   edx
c00110b6:	52                   	push   edx
c00110b7:	53                   	push   ebx
c00110b8:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00110be:	e8 3b fc ff ff       	call   c0010cfe <EnvVarContainer::getEnv(char const*)>
c00110c3:	83 c4 10             	add    esp,0x10
c00110c6:	85 c0                	test   eax,eax
c00110c8:	75 28                	jne    c00110f2 <KeGetEnv(Process*, char const*)+0x60>
c00110ca:	eb de                	jmp    c00110aa <KeGetEnv(Process*, char const*)+0x18>
c00110cc:	52                   	push   edx
c00110cd:	52                   	push   edx
c00110ce:	53                   	push   ebx
c00110cf:	50                   	push   eax
c00110d0:	e8 29 fc ff ff       	call   c0010cfe <EnvVarContainer::getEnv(char const*)>
c00110d5:	83 c4 10             	add    esp,0x10
c00110d8:	85 c0                	test   eax,eax
c00110da:	75 16                	jne    c00110f2 <KeGetEnv(Process*, char const*)+0x60>
c00110dc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00110e0:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c00110e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00110e9:	83 c4 08             	add    esp,0x8
c00110ec:	5b                   	pop    ebx
c00110ed:	e9 0c fc ff ff       	jmp    c0010cfe <EnvVarContainer::getEnv(char const*)>
c00110f2:	83 c4 08             	add    esp,0x8
c00110f5:	5b                   	pop    ebx
c00110f6:	c3                   	ret    

c00110f7 <KeSetEnvSystem(char const*, char const*)>:
c00110f7:	83 ec 10             	sub    esp,0x10
c00110fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011102:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011108:	e8 2f fc ff ff       	call   c0010d3c <EnvVarContainer::setEnv(char const*, char const*)>
c001110d:	83 c4 1c             	add    esp,0x1c
c0011110:	c3                   	ret    

c0011111 <KeSetEnvUser(char const*, char const*)>:
c0011111:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0011116:	85 c0                	test   eax,eax
c0011118:	74 15                	je     c001112f <KeSetEnvUser(char const*, char const*)+0x1e>
c001111a:	83 ec 10             	sub    esp,0x10
c001111d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011121:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011125:	50                   	push   eax
c0011126:	e8 11 fc ff ff       	call   c0010d3c <EnvVarContainer::setEnv(char const*, char const*)>
c001112b:	83 c4 1c             	add    esp,0x1c
c001112e:	c3                   	ret    
c001112f:	c3                   	ret    

c0011130 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011134:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001113a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001113e:	e9 f9 fb ff ff       	jmp    c0010d3c <EnvVarContainer::setEnv(char const*, char const*)>

c0011143 <KeDeleteEnvSystem(char const*)>:
c0011143:	c3                   	ret    

c0011144 <KeDeleteEnvUser(char const*)>:
c0011144:	c3                   	ret    

c0011145 <KeDeleteEnvProcess(Process*, char const*)>:
c0011145:	c3                   	ret    

c0011146 <KeNewProcessEnv(Process*)>:
c0011146:	83 ec 28             	sub    esp,0x28
c0011149:	6a 0c                	push   0xc
c001114b:	e8 66 69 ff ff       	call   c0007ab6 <malloc>
c0011150:	5a                   	pop    edx
c0011151:	59                   	pop    ecx
c0011152:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011156:	50                   	push   eax
c0011157:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001115b:	e8 e0 fe ff ff       	call   c0011040 <EnvVarContainer::EnvVarContainer(Process*)>
c0011160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011164:	83 c4 2c             	add    esp,0x2c
c0011167:	c3                   	ret    

c0011168 <KeCopyProcessEnv(Process*, Process*)>:
c0011168:	57                   	push   edi
c0011169:	56                   	push   esi
c001116a:	53                   	push   ebx
c001116b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001116f:	83 ec 0c             	sub    esp,0xc
c0011172:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011178:	6a 0c                	push   0xc
c001117a:	e8 37 69 ff ff       	call   c0007ab6 <malloc>
c001117f:	89 c3                	mov    ebx,eax
c0011181:	58                   	pop    eax
c0011182:	5a                   	pop    edx
c0011183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011187:	53                   	push   ebx
c0011188:	e8 b3 fe ff ff       	call   c0011040 <EnvVarContainer::EnvVarContainer(Process*)>
c001118d:	8b 07                	mov    eax,DWORD PTR [edi]
c001118f:	89 03                	mov    DWORD PTR [ebx],eax
c0011191:	c1 e0 03             	shl    eax,0x3
c0011194:	89 04 24             	mov    DWORD PTR [esp],eax
c0011197:	e8 1a 69 ff ff       	call   c0007ab6 <malloc>
c001119c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001119f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00111a1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00111a4:	c1 e1 03             	shl    ecx,0x3
c00111a7:	89 c7                	mov    edi,eax
c00111a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111ab:	83 c4 10             	add    esp,0x10
c00111ae:	89 d8                	mov    eax,ebx
c00111b0:	5b                   	pop    ebx
c00111b1:	5e                   	pop    esi
c00111b2:	5f                   	pop    edi
c00111b3:	c3                   	ret    

c00111b4 <KeLoadSystemEnv()>:
c00111b4:	53                   	push   ebx
c00111b5:	83 ec 14             	sub    esp,0x14
c00111b8:	6a 0c                	push   0xc
c00111ba:	e8 f7 68 ff ff       	call   c0007ab6 <malloc>
c00111bf:	89 c3                	mov    ebx,eax
c00111c1:	58                   	pop    eax
c00111c2:	5a                   	pop    edx
c00111c3:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00111c9:	53                   	push   ebx
c00111ca:	e8 71 fe ff ff       	call   c0011040 <EnvVarContainer::EnvVarContainer(Process*)>
c00111cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111d2:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c00111d8:	e8 47 fe ff ff       	call   c0011024 <EnvVarContainer::__loadSystem()>
c00111dd:	83 c4 18             	add    esp,0x18
c00111e0:	5b                   	pop    ebx
c00111e1:	c3                   	ret    

c00111e2 <KeLoadUserEnv()>:
c00111e2:	53                   	push   ebx
c00111e3:	83 ec 14             	sub    esp,0x14
c00111e6:	6a 0c                	push   0xc
c00111e8:	e8 c9 68 ff ff       	call   c0007ab6 <malloc>
c00111ed:	89 c3                	mov    ebx,eax
c00111ef:	58                   	pop    eax
c00111f0:	5a                   	pop    edx
c00111f1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00111f7:	53                   	push   ebx
c00111f8:	e8 43 fe ff ff       	call   c0011040 <EnvVarContainer::EnvVarContainer(Process*)>
c00111fd:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c0011203:	83 c4 18             	add    esp,0x18
c0011206:	5b                   	pop    ebx
c0011207:	c3                   	ret    

c0011208 <KeFlushEnv()>:
c0011208:	c3                   	ret    

c0011209 <KeGetProcessTotalEnvCount(Process*)>:
c0011209:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001120d:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c0011213:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011219:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001121e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011220:	03 01                	add    eax,DWORD PTR [ecx]
c0011222:	85 d2                	test   edx,edx
c0011224:	74 02                	je     c0011228 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011226:	03 02                	add    eax,DWORD PTR [edx]
c0011228:	c3                   	ret    

c0011229 <KeGetProcessEnvPair(Process*, int)>:
c0011229:	57                   	push   edi
c001122a:	56                   	push   esi
c001122b:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c0011231:	53                   	push   ebx
c0011232:	85 f6                	test   esi,esi
c0011234:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011238:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001123c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011242:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011246:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011248:	75 16                	jne    c0011260 <KeGetProcessEnvPair(Process*, int)+0x37>
c001124a:	39 c2                	cmp    edx,eax
c001124c:	7c 16                	jl     c0011264 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001124e:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c0011254:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011256:	01 c6                	add    esi,eax
c0011258:	39 d6                	cmp    esi,edx
c001125a:	7e 3c                	jle    c0011298 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001125c:	29 c2                	sub    edx,eax
c001125e:	eb 04                	jmp    c0011264 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011260:	39 c2                	cmp    edx,eax
c0011262:	7d 05                	jge    c0011269 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011264:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011267:	eb 20                	jmp    c0011289 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011269:	8b 3e                	mov    edi,DWORD PTR [esi]
c001126b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001126e:	39 d1                	cmp    ecx,edx
c0011270:	7e 04                	jle    c0011276 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011272:	29 c2                	sub    edx,eax
c0011274:	eb 10                	jmp    c0011286 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011276:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c001127c:	03 0e                	add    ecx,DWORD PTR [esi]
c001127e:	39 d1                	cmp    ecx,edx
c0011280:	7e 16                	jle    c0011298 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011282:	29 c2                	sub    edx,eax
c0011284:	29 fa                	sub    edx,edi
c0011286:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011289:	8d 14 d0             	lea    edx,[eax+edx*8]
c001128c:	8b 02                	mov    eax,DWORD PTR [edx]
c001128e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011291:	89 03                	mov    DWORD PTR [ebx],eax
c0011293:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011296:	eb 1d                	jmp    c00112b5 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011298:	83 ec 0c             	sub    esp,0xc
c001129b:	68 12 1f 02 c0       	push   0xc0021f12
c00112a0:	e8 ac 00 00 00       	call   c0011351 <KePanic(char const*)>
c00112a5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00112ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00112b2:	83 c4 10             	add    esp,0x10
c00112b5:	89 d8                	mov    eax,ebx
c00112b7:	5b                   	pop    ebx
c00112b8:	5e                   	pop    esi
c00112b9:	5f                   	pop    edi
c00112ba:	c2 04 00             	ret    0x4

c00112bd <CPU::current()>:
c00112bd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00112c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00112c8:	c3                   	ret    

c00112c9 <operator new(unsigned long)>:
c00112c9:	e9 e8 67 ff ff       	jmp    c0007ab6 <malloc>

c00112ce <operator delete(void*)>:
c00112ce:	e9 03 68 ff ff       	jmp    c0007ad6 <rfree>

c00112d3 <disableIRQs()>:
c00112d3:	fa                   	cli    
c00112d4:	c3                   	ret    

c00112d5 <enableIRQs()>:
c00112d5:	fb                   	sti    
c00112d6:	c3                   	ret    

c00112d7 <lockScheduler()>:
c00112d7:	fa                   	cli    
c00112d8:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00112de:	c3                   	ret    

c00112df <unlockScheduler()>:
c00112df:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00112e4:	48                   	dec    eax
c00112e5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00112ea:	75 01                	jne    c00112ed <unlockScheduler()+0xe>
c00112ec:	fb                   	sti    
c00112ed:	c3                   	ret    

c00112ee <lockStuff()>:
c00112ee:	fa                   	cli    
c00112ef:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00112f5:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c00112fb:	c3                   	ret    

c00112fc <unlockStuff()>:
c00112fc:	83 ec 0c             	sub    esp,0xc
c00112ff:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0011304:	48                   	dec    eax
c0011305:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001130a:	75 18                	jne    c0011324 <unlockStuff()+0x28>
c001130c:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c0011313:	74 0f                	je     c0011324 <unlockStuff()+0x28>
c0011315:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001131f:	e8 e8 49 00 00       	call   c0015d0c <schedule()>
c0011324:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011329:	48                   	dec    eax
c001132a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001132f:	75 01                	jne    c0011332 <unlockStuff()+0x36>
c0011331:	fb                   	sti    
c0011332:	83 c4 0c             	add    esp,0xc
c0011335:	c3                   	ret    

c0011336 <Virt::getAKernelVAS()>:
c0011336:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001133b:	c3                   	ret    

c001133c <__not_memcpy>:
c001133c:	57                   	push   edi
c001133d:	56                   	push   esi
c001133e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011342:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011346:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001134a:	89 c7                	mov    edi,eax
c001134c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001134e:	5e                   	pop    esi
c001134f:	5f                   	pop    edi
c0011350:	c3                   	ret    

c0011351 <KePanic(char const*)>:
c0011351:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c0011358:	e9 54 69 00 00       	jmp    c0017cb1 <HalPanic(char const*)>

c001135d <KePowerThread(void*)>:
c001135d:	83 ec 0c             	sub    esp,0xc
c0011360:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011365:	48                   	dec    eax
c0011366:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001136b:	75 01                	jne    c001136e <KePowerThread(void*)+0x11>
c001136d:	fb                   	sti    
c001136e:	83 ec 0c             	sub    esp,0xc
c0011371:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011378:	6a 0a                	push   0xa
c001137a:	e8 d1 4c 00 00       	call   c0016050 <sleep(unsigned int)>
c001137f:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c0011386:	83 c4 10             	add    esp,0x10
c0011389:	eb e3                	jmp    c001136e <KePowerThread(void*)+0x11>

c001138b <KeChangePowerSettings(PowerSettings)>:
c001138b:	57                   	push   edi
c001138c:	b9 09 00 00 00       	mov    ecx,0x9
c0011391:	56                   	push   esi
c0011392:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c0011397:	fc                   	cld    
c0011398:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001139c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001139e:	5e                   	pop    esi
c001139f:	5f                   	pop    edi
c00113a0:	c3                   	ret    

c00113a1 <KeUserIOReceived()>:
c00113a1:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00113ab:	c3                   	ret    

c00113ac <KeHandlePowerButton()>:
c00113ac:	83 ec 0c             	sub    esp,0xc
c00113af:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00113b4:	83 f8 02             	cmp    eax,0x2
c00113b7:	75 10                	jne    c00113c9 <KeHandlePowerButton()+0x1d>
c00113b9:	83 ec 0c             	sub    esp,0xc
c00113bc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113c2:	e8 61 5d ff ff       	call   c0007128 <Computer::shutdown()>
c00113c7:	eb 11                	jmp    c00113da <KeHandlePowerButton()+0x2e>
c00113c9:	48                   	dec    eax
c00113ca:	75 11                	jne    c00113dd <KeHandlePowerButton()+0x31>
c00113cc:	83 ec 0c             	sub    esp,0xc
c00113cf:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113d5:	e8 7e 5d ff ff       	call   c0007158 <Computer::sleep()>
c00113da:	83 c4 10             	add    esp,0x10
c00113dd:	83 c4 0c             	add    esp,0xc
c00113e0:	c3                   	ret    

c00113e1 <KeHandleSleepButton()>:
c00113e1:	83 ec 0c             	sub    esp,0xc
c00113e4:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c00113e9:	83 f8 02             	cmp    eax,0x2
c00113ec:	75 10                	jne    c00113fe <KeHandleSleepButton()+0x1d>
c00113ee:	83 ec 0c             	sub    esp,0xc
c00113f1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113f7:	e8 2c 5d ff ff       	call   c0007128 <Computer::shutdown()>
c00113fc:	eb 11                	jmp    c001140f <KeHandleSleepButton()+0x2e>
c00113fe:	48                   	dec    eax
c00113ff:	75 11                	jne    c0011412 <KeHandleSleepButton()+0x31>
c0011401:	83 ec 0c             	sub    esp,0xc
c0011404:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001140a:	e8 49 5d ff ff       	call   c0007158 <Computer::sleep()>
c001140f:	83 c4 10             	add    esp,0x10
c0011412:	83 c4 0c             	add    esp,0xc
c0011415:	c3                   	ret    

c0011416 <KeSetupPowerManager()>:
c0011416:	83 ec 0c             	sub    esp,0xc
c0011419:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c0011423:	68 f0 00 00 00       	push   0xf0
c0011428:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c001142f:	6a 00                	push   0x0
c0011431:	68 5d 13 01 c0       	push   0xc001135d
c0011436:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001143c:	e8 7b 46 00 00       	call   c0015abc <Process::createThread(void (*)(void*), void*, int)>
c0011441:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c001144b:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c0011455:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c001145f:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c0011469:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c0011473:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c001147d:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c0011487:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c0011491:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c001149b:	83 c4 1c             	add    esp,0x1c
c001149e:	c3                   	ret    

c001149f <KeRand()>:
c001149f:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c00114a9:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c00114b3:	53                   	push   ebx
c00114b4:	01 c1                	add    ecx,eax
c00114b6:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00114bb:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c00114c1:	01 ca                	add    edx,ecx
c00114c3:	05 ef 04 b5 00       	add    eax,0xb504ef
c00114c8:	83 d2 00             	adc    edx,0x0
c00114cb:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c00114d0:	0f b7 da             	movzx  ebx,dx
c00114d3:	89 da                	mov    edx,ebx
c00114d5:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c00114db:	0f ac d0 0e          	shrd   eax,edx,0xe
c00114df:	5b                   	pop    ebx
c00114e0:	c3                   	ret    

c00114e1 <KeSeedRand(unsigned int)>:
c00114e1:	53                   	push   ebx
c00114e2:	83 ec 08             	sub    esp,0x8
c00114e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114e9:	e8 e2 6a 00 00       	call   c0017fd0 <HalGetRand()>
c00114ee:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c00114f8:	31 d8                	xor    eax,ebx
c00114fa:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c00114ff:	e8 9b ff ff ff       	call   c001149f <KeRand()>
c0011504:	83 c4 08             	add    esp,0x8
c0011507:	5b                   	pop    ebx
c0011508:	eb 95                	jmp    c001149f <KeRand()>

c001150a <KeInitRand()>:
c001150a:	83 ec 0c             	sub    esp,0xc
c001150d:	e8 b3 68 00 00       	call   c0017dc5 <HalQueryPerformanceCounter()>
c0011512:	0f 20 da             	mov    edx,cr3
c0011515:	0f 22 da             	mov    cr3,edx
c0011518:	0f 20 da             	mov    edx,cr3
c001151b:	0f 22 da             	mov    cr3,edx
c001151e:	0f 20 da             	mov    edx,cr3
c0011521:	0f 22 da             	mov    cr3,edx
c0011524:	0f 20 da             	mov    edx,cr3
c0011527:	0f 22 da             	mov    cr3,edx
c001152a:	83 ec 0c             	sub    esp,0xc
c001152d:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011532:	50                   	push   eax
c0011533:	e8 a9 ff ff ff       	call   c00114e1 <KeSeedRand(unsigned int)>
c0011538:	83 c4 1c             	add    esp,0x1c
c001153b:	c3                   	ret    

c001153c <KeResolveCompatibilitySymbol(char*)>:
c001153c:	83 ec 0c             	sub    esp,0xc
c001153f:	83 ec 08             	sub    esp,0x8
c0011542:	68 2c 1f 02 c0       	push   0xc0021f2c
c0011547:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001154b:	e8 00 f2 fe ff       	call   c0000750 <strcmp>
c0011550:	83 c4 10             	add    esp,0x10
c0011553:	85 c0                	test   eax,eax
c0011555:	0f 94 c0             	sete   al
c0011558:	0f b6 c0             	movzx  eax,al
c001155b:	85 c0                	test   eax,eax
c001155d:	74 0d                	je     c001156c <KeResolveCompatibilitySymbol(char*)+0x30>
c001155f:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0011564:	e9 8b 01 00 00       	jmp    c00116f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011569:	8d 76 00             	lea    esi,[esi+0x0]
c001156c:	83 ec 08             	sub    esp,0x8
c001156f:	68 35 1f 02 c0       	push   0xc0021f35
c0011574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011578:	e8 d3 f1 fe ff       	call   c0000750 <strcmp>
c001157d:	83 c4 10             	add    esp,0x10
c0011580:	85 c0                	test   eax,eax
c0011582:	0f 94 c0             	sete   al
c0011585:	0f b6 c0             	movzx  eax,al
c0011588:	85 c0                	test   eax,eax
c001158a:	74 0c                	je     c0011598 <KeResolveCompatibilitySymbol(char*)+0x5c>
c001158c:	b8 80 f3 01 c0       	mov    eax,0xc001f380
c0011591:	e9 5e 01 00 00       	jmp    c00116f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011596:	66 90                	xchg   ax,ax
c0011598:	83 ec 08             	sub    esp,0x8
c001159b:	68 3f 1f 02 c0       	push   0xc0021f3f
c00115a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115a4:	e8 a7 f1 fe ff       	call   c0000750 <strcmp>
c00115a9:	83 c4 10             	add    esp,0x10
c00115ac:	85 c0                	test   eax,eax
c00115ae:	0f 94 c0             	sete   al
c00115b1:	0f b6 c0             	movzx  eax,al
c00115b4:	85 c0                	test   eax,eax
c00115b6:	74 0c                	je     c00115c4 <KeResolveCompatibilitySymbol(char*)+0x88>
c00115b8:	b8 b4 f0 01 c0       	mov    eax,0xc001f0b4
c00115bd:	e9 32 01 00 00       	jmp    c00116f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115c2:	66 90                	xchg   ax,ax
c00115c4:	83 ec 08             	sub    esp,0x8
c00115c7:	68 48 1f 02 c0       	push   0xc0021f48
c00115cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115d0:	e8 7b f1 fe ff       	call   c0000750 <strcmp>
c00115d5:	83 c4 10             	add    esp,0x10
c00115d8:	85 c0                	test   eax,eax
c00115da:	0f 94 c0             	sete   al
c00115dd:	0f b6 c0             	movzx  eax,al
c00115e0:	85 c0                	test   eax,eax
c00115e2:	74 0c                	je     c00115f0 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00115e4:	b8 51 13 01 c0       	mov    eax,0xc0011351
c00115e9:	e9 06 01 00 00       	jmp    c00116f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115ee:	66 90                	xchg   ax,ax
c00115f0:	83 ec 08             	sub    esp,0x8
c00115f3:	68 5b 1f 02 c0       	push   0xc0021f5b
c00115f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115fc:	e8 4f f1 fe ff       	call   c0000750 <strcmp>
c0011601:	83 c4 10             	add    esp,0x10
c0011604:	85 c0                	test   eax,eax
c0011606:	0f 94 c0             	sete   al
c0011609:	0f b6 c0             	movzx  eax,al
c001160c:	85 c0                	test   eax,eax
c001160e:	74 0c                	je     c001161c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011610:	b8 7b 0c 01 c0       	mov    eax,0xc0010c7b
c0011615:	e9 da 00 00 00       	jmp    c00116f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001161a:	66 90                	xchg   ax,ax
c001161c:	83 ec 08             	sub    esp,0x8
c001161f:	68 78 1f 02 c0       	push   0xc0021f78
c0011624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011628:	e8 23 f1 fe ff       	call   c0000750 <strcmp>
c001162d:	83 c4 10             	add    esp,0x10
c0011630:	85 c0                	test   eax,eax
c0011632:	0f 94 c0             	sete   al
c0011635:	0f b6 c0             	movzx  eax,al
c0011638:	85 c0                	test   eax,eax
c001163a:	74 0c                	je     c0011648 <KeResolveCompatibilitySymbol(char*)+0x10c>
c001163c:	b8 80 f4 01 c0       	mov    eax,0xc001f480
c0011641:	e9 ae 00 00 00       	jmp    c00116f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011646:	66 90                	xchg   ax,ax
c0011648:	83 ec 08             	sub    esp,0x8
c001164b:	68 82 1f 02 c0       	push   0xc0021f82
c0011650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011654:	e8 f7 f0 fe ff       	call   c0000750 <strcmp>
c0011659:	83 c4 10             	add    esp,0x10
c001165c:	85 c0                	test   eax,eax
c001165e:	0f 94 c0             	sete   al
c0011661:	0f b6 c0             	movzx  eax,al
c0011664:	85 c0                	test   eax,eax
c0011666:	74 0c                	je     c0011674 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011668:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c001166d:	e9 82 00 00 00       	jmp    c00116f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011672:	66 90                	xchg   ax,ax
c0011674:	83 ec 08             	sub    esp,0x8
c0011677:	68 8b 1f 02 c0       	push   0xc0021f8b
c001167c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011680:	e8 cb f0 fe ff       	call   c0000750 <strcmp>
c0011685:	83 c4 10             	add    esp,0x10
c0011688:	85 c0                	test   eax,eax
c001168a:	0f 94 c0             	sete   al
c001168d:	0f b6 c0             	movzx  eax,al
c0011690:	85 c0                	test   eax,eax
c0011692:	74 08                	je     c001169c <KeResolveCompatibilitySymbol(char*)+0x160>
c0011694:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011699:	eb 59                	jmp    c00116f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001169b:	90                   	nop
c001169c:	83 ec 08             	sub    esp,0x8
c001169f:	68 a3 1f 02 c0       	push   0xc0021fa3
c00116a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116a8:	e8 a3 f0 fe ff       	call   c0000750 <strcmp>
c00116ad:	83 c4 10             	add    esp,0x10
c00116b0:	85 c0                	test   eax,eax
c00116b2:	0f 94 c0             	sete   al
c00116b5:	0f b6 c0             	movzx  eax,al
c00116b8:	85 c0                	test   eax,eax
c00116ba:	74 08                	je     c00116c4 <KeResolveCompatibilitySymbol(char*)+0x188>
c00116bc:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00116c1:	eb 31                	jmp    c00116f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116c3:	90                   	nop
c00116c4:	83 ec 08             	sub    esp,0x8
c00116c7:	68 b0 1f 02 c0       	push   0xc0021fb0
c00116cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116d0:	e8 7b f0 fe ff       	call   c0000750 <strcmp>
c00116d5:	83 c4 10             	add    esp,0x10
c00116d8:	85 c0                	test   eax,eax
c00116da:	0f 94 c0             	sete   al
c00116dd:	0f b6 c0             	movzx  eax,al
c00116e0:	85 c0                	test   eax,eax
c00116e2:	74 08                	je     c00116ec <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00116e4:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c00116e9:	eb 09                	jmp    c00116f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116eb:	90                   	nop
c00116ec:	b8 00 00 00 00       	mov    eax,0x0
c00116f1:	8d 76 00             	lea    esi,[esi+0x0]
c00116f4:	83 c4 0c             	add    esp,0xc
c00116f7:	c3                   	ret    

c00116f8 <KiSigKill(int)>:
c00116f8:	83 ec 0c             	sub    esp,0xc
c00116fb:	6a 00                	push   0x0
c00116fd:	6a 00                	push   0x0
c00116ff:	6a ff                	push   0xffffffff
c0011701:	6a 01                	push   0x1
c0011703:	e8 4a 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011708:	83 c4 1c             	add    esp,0x1c
c001170b:	c3                   	ret    

c001170c <KiDefaultSignalHandlerIgnore(int)>:
c001170c:	c3                   	ret    

c001170d <KiDefaultSignalHandlerPause(int)>:
c001170d:	57                   	push   edi
c001170e:	b9 07 00 00 00       	mov    ecx,0x7
c0011713:	56                   	push   esi
c0011714:	be f9 1f 02 c0       	mov    esi,0xc0021ff9
c0011719:	83 ec 24             	sub    esp,0x24
c001171c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011720:	fc                   	cld    
c0011721:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011723:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011727:	50                   	push   eax
c0011728:	6a 00                	push   0x0
c001172a:	6a 00                	push   0x0
c001172c:	6a 27                	push   0x27
c001172e:	e8 1f 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011733:	83 c4 34             	add    esp,0x34
c0011736:	5e                   	pop    esi
c0011737:	5f                   	pop    edi
c0011738:	c3                   	ret    

c0011739 <KiDefaultSignalHandlerResume(int)>:
c0011739:	57                   	push   edi
c001173a:	b9 1d 00 00 00       	mov    ecx,0x1d
c001173f:	56                   	push   esi
c0011740:	be 15 20 02 c0       	mov    esi,0xc0022015
c0011745:	83 ec 24             	sub    esp,0x24
c0011748:	8d 7c 24 03          	lea    edi,[esp+0x3]
c001174c:	fc                   	cld    
c001174d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001174f:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011753:	50                   	push   eax
c0011754:	6a 00                	push   0x0
c0011756:	6a 00                	push   0x0
c0011758:	6a 27                	push   0x27
c001175a:	e8 f3 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001175f:	83 c4 34             	add    esp,0x34
c0011762:	5e                   	pop    esi
c0011763:	5f                   	pop    edi
c0011764:	c3                   	ret    

c0011765 <KeDeinitSignals(SigHandlerBlock*)>:
c0011765:	e9 5c 63 ff ff       	jmp    c0007ac6 <free>

c001176a <KeInitSignals()>:
c001176a:	53                   	push   ebx
c001176b:	83 ec 14             	sub    esp,0x14
c001176e:	68 c8 00 00 00       	push   0xc8
c0011773:	e8 3e 63 ff ff       	call   c0007ab6 <malloc>
c0011778:	83 c4 0c             	add    esp,0xc
c001177b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011785:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001178f:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011796:	89 c3                	mov    ebx,eax
c0011798:	6a 20                	push   0x20
c001179a:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00117a0:	6a 00                	push   0x0
c00117a2:	50                   	push   eax
c00117a3:	e8 48 ed fe ff       	call   c00004f0 <memset>
c00117a8:	83 c4 0c             	add    esp,0xc
c00117ab:	6a 44                	push   0x44
c00117ad:	6a 00                	push   0x0
c00117af:	53                   	push   ebx
c00117b0:	e8 3b ed fe ff       	call   c00004f0 <memset>
c00117b5:	89 d8                	mov    eax,ebx
c00117b7:	83 c4 18             	add    esp,0x18
c00117ba:	5b                   	pop    ebx
c00117bb:	c3                   	ret    

c00117bc <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00117bc:	53                   	push   ebx
c00117bd:	b8 01 00 00 00       	mov    eax,0x1
c00117c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00117c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117ca:	83 f9 10             	cmp    ecx,0x10
c00117cd:	7f 21                	jg     c00117f0 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00117cf:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00117d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117d6:	89 03                	mov    DWORD PTR [ebx],eax
c00117d8:	b8 01 00 00 00       	mov    eax,0x1
c00117dd:	d3 e0                	shl    eax,cl
c00117df:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00117e3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00117e6:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00117ee:	31 c0                	xor    eax,eax
c00117f0:	5b                   	pop    ebx
c00117f1:	c3                   	ret    

c00117f2 <KeRaiseSignal(SigHandlerBlock*, int)>:
c00117f2:	55                   	push   ebp
c00117f3:	57                   	push   edi
c00117f4:	bf 08 00 00 00       	mov    edi,0x8
c00117f9:	56                   	push   esi
c00117fa:	53                   	push   ebx
c00117fb:	83 ec 18             	sub    esp,0x18
c00117fe:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011802:	68 32 20 02 c0       	push   0xc0022032
c0011807:	e8 39 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001180c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011813:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011819:	83 c4 10             	add    esp,0x10
c001181c:	31 c9                	xor    ecx,ecx
c001181e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011822:	99                   	cdq    
c0011823:	f7 ff                	idiv   edi
c0011825:	8d 42 24             	lea    eax,[edx+0x24]
c0011828:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c001182c:	85 f6                	test   esi,esi
c001182e:	75 1a                	jne    c001184a <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011830:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011834:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011838:	50                   	push   eax
c0011839:	50                   	push   eax
c001183a:	52                   	push   edx
c001183b:	68 43 20 02 c0       	push   0xc0022043
c0011840:	e8 00 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011845:	83 c4 10             	add    esp,0x10
c0011848:	eb 1b                	jmp    c0011865 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c001184a:	41                   	inc    ecx
c001184b:	83 f9 08             	cmp    ecx,0x8
c001184e:	75 ce                	jne    c001181e <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011850:	83 ec 0c             	sub    esp,0xc
c0011853:	be 01 00 00 00       	mov    esi,0x1
c0011858:	68 64 20 02 c0       	push   0xc0022064
c001185d:	e8 e3 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011862:	83 c4 10             	add    esp,0x10
c0011865:	83 c4 0c             	add    esp,0xc
c0011868:	89 f0                	mov    eax,esi
c001186a:	5b                   	pop    ebx
c001186b:	5e                   	pop    esi
c001186c:	5f                   	pop    edi
c001186d:	5d                   	pop    ebp
c001186e:	c3                   	ret    

c001186f <KeCheckSignal(SigHandlerBlock*, int*)>:
c001186f:	55                   	push   ebp
c0011870:	57                   	push   edi
c0011871:	56                   	push   esi
c0011872:	53                   	push   ebx
c0011873:	51                   	push   ecx
c0011874:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011878:	85 db                	test   ebx,ebx
c001187a:	0f 84 bc 00 00 00    	je     c001193c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011880:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011887:	0f 84 af 00 00 00    	je     c001193c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001188d:	31 c9                	xor    ecx,ecx
c001188f:	bf 08 00 00 00       	mov    edi,0x8
c0011894:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001189a:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001189d:	99                   	cdq    
c001189e:	f7 ff                	idiv   edi
c00118a0:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00118a7:	85 ed                	test   ebp,ebp
c00118a9:	0f 84 9e 00 00 00    	je     c001194d <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00118af:	89 e9                	mov    ecx,ebp
c00118b1:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00118b7:	bf 01 00 00 00       	mov    edi,0x1
c00118bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00118bf:	d3 e7                	shl    edi,cl
c00118c1:	31 c9                	xor    ecx,ecx
c00118c3:	b8 01 00 00 00       	mov    eax,0x1
c00118c8:	d3 e0                	shl    eax,cl
c00118ca:	85 04 24             	test   DWORD PTR [esp],eax
c00118cd:	74 06                	je     c00118d5 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00118cf:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00118d3:	75 67                	jne    c001193c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118d5:	41                   	inc    ecx
c00118d6:	83 f9 11             	cmp    ecx,0x11
c00118d9:	75 e8                	jne    c00118c3 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00118db:	46                   	inc    esi
c00118dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00118df:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00118e5:	09 f8                	or     eax,edi
c00118e7:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00118f2:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00118f8:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00118ff:	31 c0                	xor    eax,eax
c0011901:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011909:	74 09                	je     c0011914 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c001190b:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011912:	eb 06                	jmp    c001191a <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011914:	40                   	inc    eax
c0011915:	83 f8 08             	cmp    eax,0x8
c0011918:	75 e7                	jne    c0011901 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c001191a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001191d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011921:	83 fd 09             	cmp    ebp,0x9
c0011924:	89 2a                	mov    DWORD PTR [edx],ebp
c0011926:	75 07                	jne    c001192f <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011928:	b8 f8 16 01 c0       	mov    eax,0xc00116f8
c001192d:	eb 31                	jmp    c0011960 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001192f:	83 f8 01             	cmp    eax,0x1
c0011932:	75 0c                	jne    c0011940 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011934:	f7 d7                	not    edi
c0011936:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001193c:	31 c0                	xor    eax,eax
c001193e:	eb 20                	jmp    c0011960 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011940:	85 c0                	test   eax,eax
c0011942:	75 1c                	jne    c0011960 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011944:	8b 04 ad 60 34 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcba0]
c001194b:	eb 13                	jmp    c0011960 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001194d:	46                   	inc    esi
c001194e:	41                   	inc    ecx
c001194f:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011955:	83 f9 08             	cmp    ecx,0x8
c0011958:	0f 85 36 ff ff ff    	jne    c0011894 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c001195e:	eb dc                	jmp    c001193c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011960:	5a                   	pop    edx
c0011961:	5b                   	pop    ebx
c0011962:	5e                   	pop    esi
c0011963:	5f                   	pop    edi
c0011964:	5d                   	pop    ebp
c0011965:	c3                   	ret    

c0011966 <KiCheckSignalZ>:
c0011966:	83 ec 10             	sub    esp,0x10
c0011969:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001196d:	50                   	push   eax
c001196e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011973:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011976:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001197c:	e8 ee fe ff ff       	call   c001186f <KeCheckSignal(SigHandlerBlock*, int*)>
c0011981:	5a                   	pop    edx
c0011982:	31 d2                	xor    edx,edx
c0011984:	59                   	pop    ecx
c0011985:	85 c0                	test   eax,eax
c0011987:	74 19                	je     c00119a2 <KiCheckSignalZ+0x3c>
c0011989:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001198f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011992:	89 02                	mov    DWORD PTR [edx],eax
c0011994:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001199b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001199f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00119a2:	89 d0                	mov    eax,edx
c00119a4:	83 c4 10             	add    esp,0x10
c00119a7:	c3                   	ret    

c00119a8 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00119a8:	56                   	push   esi
c00119a9:	53                   	push   ebx
c00119aa:	bb 01 00 00 00       	mov    ebx,0x1
c00119af:	52                   	push   edx
c00119b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00119b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00119b8:	d3 e3                	shl    ebx,cl
c00119ba:	83 f9 10             	cmp    ecx,0x10
c00119bd:	7f 08                	jg     c00119c7 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00119bf:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00119c5:	75 10                	jne    c00119d7 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00119c7:	83 ec 0c             	sub    esp,0xc
c00119ca:	68 75 20 02 c0       	push   0xc0022075
c00119cf:	e8 7d f9 ff ff       	call   c0011351 <KePanic(char const*)>
c00119d4:	83 c4 10             	add    esp,0x10
c00119d7:	f7 d3                	not    ebx
c00119d9:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00119df:	58                   	pop    eax
c00119e0:	5b                   	pop    ebx
c00119e1:	5e                   	pop    esi
c00119e2:	c3                   	ret    

c00119e3 <KiFinishSignalZ>:
c00119e3:	53                   	push   ebx
c00119e4:	83 ec 10             	sub    esp,0x10
c00119e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00119eb:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00119ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119f6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00119fc:	e8 a7 ff ff ff       	call   c00119a8 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011a07:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011a0e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011a15:	83 c4 18             	add    esp,0x18
c0011a18:	5b                   	pop    ebx
c0011a19:	c3                   	ret    

c0011a1a <SysSeekDir(regs*)>:
c0011a1a:	31 c0                	xor    eax,eax
c0011a1c:	31 d2                	xor    edx,edx
c0011a1e:	c3                   	ret    

c0011a1f <SysTellDir(regs*)>:
c0011a1f:	31 c0                	xor    eax,eax
c0011a21:	31 d2                	xor    edx,edx
c0011a23:	c3                   	ret    

c0011a24 <SysVerify(regs*)>:
c0011a24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a28:	31 d2                	xor    edx,edx
c0011a2a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a2d:	c3                   	ret    

c0011a2e <SysGetArgc(regs*)>:
c0011a2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a33:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a36:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011a3c:	89 c2                	mov    edx,eax
c0011a3e:	c1 fa 1f             	sar    edx,0x1f
c0011a41:	c3                   	ret    

c0011a42 <SysTTYName(regs*)>:
c0011a42:	b8 01 00 00 00       	mov    eax,0x1
c0011a47:	31 d2                	xor    edx,edx
c0011a49:	c3                   	ret    

c0011a4a <SysFormatDisk(regs*)>:
c0011a4a:	56                   	push   esi
c0011a4b:	53                   	push   ebx
c0011a4c:	83 ec 04             	sub    esp,0x4
c0011a4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a53:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0011a59:	eb 28                	jmp    c0011a83 <SysFormatDisk(regs*)+0x39>
c0011a5b:	83 ec 0c             	sub    esp,0xc
c0011a5e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011a61:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011a64:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a66:	51                   	push   ecx
c0011a67:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011a6a:	51                   	push   ecx
c0011a6b:	50                   	push   eax
c0011a6c:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0011a73:	50                   	push   eax
c0011a74:	53                   	push   ebx
c0011a75:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011a78:	83 c4 20             	add    esp,0x20
c0011a7b:	83 f8 08             	cmp    eax,0x8
c0011a7e:	75 14                	jne    c0011a94 <SysFormatDisk(regs*)+0x4a>
c0011a80:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011a83:	85 db                	test   ebx,ebx
c0011a85:	75 d4                	jne    c0011a5b <SysFormatDisk(regs*)+0x11>
c0011a87:	83 c4 04             	add    esp,0x4
c0011a8a:	b8 03 00 00 00       	mov    eax,0x3
c0011a8f:	31 d2                	xor    edx,edx
c0011a91:	5b                   	pop    ebx
c0011a92:	5e                   	pop    esi
c0011a93:	c3                   	ret    
c0011a94:	85 c0                	test   eax,eax
c0011a96:	74 1f                	je     c0011ab7 <SysFormatDisk(regs*)+0x6d>
c0011a98:	83 f8 09             	cmp    eax,0x9
c0011a9b:	74 0d                	je     c0011aaa <SysFormatDisk(regs*)+0x60>
c0011a9d:	83 c4 04             	add    esp,0x4
c0011aa0:	b8 02 00 00 00       	mov    eax,0x2
c0011aa5:	31 d2                	xor    edx,edx
c0011aa7:	5b                   	pop    ebx
c0011aa8:	5e                   	pop    esi
c0011aa9:	c3                   	ret    
c0011aaa:	83 c4 04             	add    esp,0x4
c0011aad:	b8 01 00 00 00       	mov    eax,0x1
c0011ab2:	31 d2                	xor    edx,edx
c0011ab4:	5b                   	pop    ebx
c0011ab5:	5e                   	pop    esi
c0011ab6:	c3                   	ret    
c0011ab7:	83 c4 04             	add    esp,0x4
c0011aba:	31 c0                	xor    eax,eax
c0011abc:	31 d2                	xor    edx,edx
c0011abe:	5b                   	pop    ebx
c0011abf:	5e                   	pop    esi
c0011ac0:	c3                   	ret    

c0011ac1 <SysSetDiskVolumeLabel(regs*)>:
c0011ac1:	56                   	push   esi
c0011ac2:	53                   	push   ebx
c0011ac3:	83 ec 04             	sub    esp,0x4
c0011ac6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011aca:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011acd:	83 f8 19             	cmp    eax,0x19
c0011ad0:	77 33                	ja     c0011b05 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ad2:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011ad9:	85 c9                	test   ecx,ecx
c0011adb:	74 28                	je     c0011b05 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011add:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011ae0:	85 db                	test   ebx,ebx
c0011ae2:	74 21                	je     c0011b05 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ae4:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011aea:	85 d2                	test   edx,edx
c0011aec:	74 17                	je     c0011b05 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011aee:	8b 32                	mov    esi,DWORD PTR [edx]
c0011af0:	53                   	push   ebx
c0011af1:	50                   	push   eax
c0011af2:	51                   	push   ecx
c0011af3:	52                   	push   edx
c0011af4:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011af7:	83 c4 10             	add    esp,0x10
c0011afa:	89 c2                	mov    edx,eax
c0011afc:	83 c4 04             	add    esp,0x4
c0011aff:	c1 fa 1f             	sar    edx,0x1f
c0011b02:	5b                   	pop    ebx
c0011b03:	5e                   	pop    esi
c0011b04:	c3                   	ret    
c0011b05:	83 c4 04             	add    esp,0x4
c0011b08:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b0d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b12:	5b                   	pop    ebx
c0011b13:	5e                   	pop    esi
c0011b14:	c3                   	ret    

c0011b15 <SysGetDiskVolumeLabel(regs*)>:
c0011b15:	57                   	push   edi
c0011b16:	56                   	push   esi
c0011b17:	53                   	push   ebx
c0011b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b1c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011b1f:	83 fa 19             	cmp    edx,0x19
c0011b22:	77 3c                	ja     c0011b60 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b24:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011b2b:	85 c9                	test   ecx,ecx
c0011b2d:	74 31                	je     c0011b60 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b2f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b32:	85 db                	test   ebx,ebx
c0011b34:	74 2a                	je     c0011b60 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b36:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011b39:	85 f6                	test   esi,esi
c0011b3b:	74 23                	je     c0011b60 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b3d:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011b43:	85 c0                	test   eax,eax
c0011b45:	74 19                	je     c0011b60 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b47:	83 ec 0c             	sub    esp,0xc
c0011b4a:	8b 38                	mov    edi,DWORD PTR [eax]
c0011b4c:	56                   	push   esi
c0011b4d:	53                   	push   ebx
c0011b4e:	52                   	push   edx
c0011b4f:	51                   	push   ecx
c0011b50:	50                   	push   eax
c0011b51:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011b54:	83 c4 20             	add    esp,0x20
c0011b57:	89 c2                	mov    edx,eax
c0011b59:	5b                   	pop    ebx
c0011b5a:	c1 fa 1f             	sar    edx,0x1f
c0011b5d:	5e                   	pop    esi
c0011b5e:	5f                   	pop    edi
c0011b5f:	c3                   	ret    
c0011b60:	5b                   	pop    ebx
c0011b61:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b66:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b6b:	5e                   	pop    esi
c0011b6c:	5f                   	pop    edi
c0011b6d:	c3                   	ret    

c0011b6e <SysShutdown(regs*)>:
c0011b6e:	83 ec 0c             	sub    esp,0xc
c0011b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b75:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b78:	85 c0                	test   eax,eax
c0011b7a:	74 18                	je     c0011b94 <SysShutdown(regs*)+0x26>
c0011b7c:	83 f8 01             	cmp    eax,0x1
c0011b7f:	74 38                	je     c0011bb9 <SysShutdown(regs*)+0x4b>
c0011b81:	83 f8 02             	cmp    eax,0x2
c0011b84:	74 24                	je     c0011baa <SysShutdown(regs*)+0x3c>
c0011b86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b8b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b90:	83 c4 0c             	add    esp,0xc
c0011b93:	c3                   	ret    
c0011b94:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b9b:	6a 00                	push   0x0
c0011b9d:	6a 00                	push   0x0
c0011b9f:	6a 00                	push   0x0
c0011ba1:	50                   	push   eax
c0011ba2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ba5:	83 c4 10             	add    esp,0x10
c0011ba8:	eb dc                	jmp    c0011b86 <SysShutdown(regs*)+0x18>
c0011baa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011baf:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bb1:	6a 00                	push   0x0
c0011bb3:	6a 00                	push   0x0
c0011bb5:	6a 01                	push   0x1
c0011bb7:	eb e8                	jmp    c0011ba1 <SysShutdown(regs*)+0x33>
c0011bb9:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011bbe:	85 c0                	test   eax,eax
c0011bc0:	74 02                	je     c0011bc4 <SysShutdown(regs*)+0x56>
c0011bc2:	ff d0                	call   eax
c0011bc4:	31 c0                	xor    eax,eax
c0011bc6:	31 d2                	xor    edx,edx
c0011bc8:	83 c4 0c             	add    esp,0xc
c0011bcb:	c3                   	ret    

c0011bcc <SysRealpath(regs*)>:
c0011bcc:	83 ec 0c             	sub    esp,0xc
c0011bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bd3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011bd6:	85 d2                	test   edx,edx
c0011bd8:	74 07                	je     c0011be1 <SysRealpath(regs*)+0x15>
c0011bda:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011bdd:	85 c0                	test   eax,eax
c0011bdf:	75 0b                	jne    c0011bec <SysRealpath(regs*)+0x20>
c0011be1:	b8 01 00 00 00       	mov    eax,0x1
c0011be6:	31 d2                	xor    edx,edx
c0011be8:	83 c4 0c             	add    esp,0xc
c0011beb:	c3                   	ret    
c0011bec:	6a 00                	push   0x0
c0011bee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011bf4:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011bf7:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011bfd:	51                   	push   ecx
c0011bfe:	52                   	push   edx
c0011bff:	50                   	push   eax
c0011c00:	e8 e1 99 ff ff       	call   c000b5e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011c05:	83 c4 10             	add    esp,0x10
c0011c08:	31 c0                	xor    eax,eax
c0011c0a:	31 d2                	xor    edx,edx
c0011c0c:	83 c4 0c             	add    esp,0xc
c0011c0f:	c3                   	ret    

c0011c10 <SysReadDir(regs*)>:
c0011c10:	53                   	push   ebx
c0011c11:	83 ec 18             	sub    esp,0x18
c0011c14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c18:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c1b:	83 f8 02             	cmp    eax,0x2
c0011c1e:	76 61                	jbe    c0011c81 <SysReadDir(regs*)+0x71>
c0011c20:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011c27:	77 49                	ja     c0011c72 <SysReadDir(regs*)+0x62>
c0011c29:	83 ec 0c             	sub    esp,0xc
c0011c2c:	50                   	push   eax
c0011c2d:	e8 81 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c32:	83 c4 10             	add    esp,0x10
c0011c35:	85 c0                	test   eax,eax
c0011c37:	74 39                	je     c0011c72 <SysReadDir(regs*)+0x62>
c0011c39:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c41:	83 ec 0c             	sub    esp,0xc
c0011c44:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c46:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011c4a:	51                   	push   ecx
c0011c4b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011c4e:	51                   	push   ecx
c0011c4f:	6a 00                	push   0x0
c0011c51:	68 10 01 00 00       	push   0x110
c0011c56:	50                   	push   eax
c0011c57:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011c5a:	83 c4 20             	add    esp,0x20
c0011c5d:	85 c0                	test   eax,eax
c0011c5f:	74 29                	je     c0011c8a <SysReadDir(regs*)+0x7a>
c0011c61:	83 f8 07             	cmp    eax,0x7
c0011c64:	74 1b                	je     c0011c81 <SysReadDir(regs*)+0x71>
c0011c66:	b8 02 00 00 00       	mov    eax,0x2
c0011c6b:	31 d2                	xor    edx,edx
c0011c6d:	83 c4 18             	add    esp,0x18
c0011c70:	5b                   	pop    ebx
c0011c71:	c3                   	ret    
c0011c72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c77:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c7c:	83 c4 18             	add    esp,0x18
c0011c7f:	5b                   	pop    ebx
c0011c80:	c3                   	ret    
c0011c81:	b8 01 00 00 00       	mov    eax,0x1
c0011c86:	31 d2                	xor    edx,edx
c0011c88:	eb e3                	jmp    c0011c6d <SysReadDir(regs*)+0x5d>
c0011c8a:	31 c0                	xor    eax,eax
c0011c8c:	31 d2                	xor    edx,edx
c0011c8e:	eb dd                	jmp    c0011c6d <SysReadDir(regs*)+0x5d>

c0011c90 <SysIsATTY(regs*)>:
c0011c90:	83 ec 0c             	sub    esp,0xc
c0011c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c97:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c9a:	83 f8 02             	cmp    eax,0x2
c0011c9d:	76 07                	jbe    c0011ca6 <SysIsATTY(regs*)+0x16>
c0011c9f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011ca4:	75 26                	jne    c0011ccc <SysIsATTY(regs*)+0x3c>
c0011ca6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011cb4:	85 c0                	test   eax,eax
c0011cb6:	74 24                	je     c0011cdc <SysIsATTY(regs*)+0x4c>
c0011cb8:	83 ec 0c             	sub    esp,0xc
c0011cbb:	8b 10                	mov    edx,DWORD PTR [eax]
c0011cbd:	50                   	push   eax
c0011cbe:	ff 12                	call   DWORD PTR [edx]
c0011cc0:	31 d2                	xor    edx,edx
c0011cc2:	0f b6 c0             	movzx  eax,al
c0011cc5:	83 c4 10             	add    esp,0x10
c0011cc8:	83 c4 0c             	add    esp,0xc
c0011ccb:	c3                   	ret    
c0011ccc:	83 ec 0c             	sub    esp,0xc
c0011ccf:	50                   	push   eax
c0011cd0:	e8 de 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011cd5:	83 c4 10             	add    esp,0x10
c0011cd8:	85 c0                	test   eax,eax
c0011cda:	75 dc                	jne    c0011cb8 <SysIsATTY(regs*)+0x28>
c0011cdc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ce1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ce6:	83 c4 0c             	add    esp,0xc
c0011ce9:	c3                   	ret    

c0011cea <SysSeek(regs*)>:
c0011cea:	53                   	push   ebx
c0011ceb:	83 ec 08             	sub    esp,0x8
c0011cee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cf2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cf5:	8d 50 fd             	lea    edx,[eax-0x3]
c0011cf8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011cfe:	77 32                	ja     c0011d32 <SysSeek(regs*)+0x48>
c0011d00:	83 ec 0c             	sub    esp,0xc
c0011d03:	50                   	push   eax
c0011d04:	e8 aa 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d09:	83 c4 0c             	add    esp,0xc
c0011d0c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011d0f:	31 db                	xor    ebx,ebx
c0011d11:	53                   	push   ebx
c0011d12:	51                   	push   ecx
c0011d13:	50                   	push   eax
c0011d14:	e8 73 9c ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0011d19:	83 c4 10             	add    esp,0x10
c0011d1c:	85 c0                	test   eax,eax
c0011d1e:	0f 95 c0             	setne  al
c0011d21:	31 d2                	xor    edx,edx
c0011d23:	0f b6 c0             	movzx  eax,al
c0011d26:	f7 d8                	neg    eax
c0011d28:	83 d2 00             	adc    edx,0x0
c0011d2b:	83 c4 08             	add    esp,0x8
c0011d2e:	f7 da                	neg    edx
c0011d30:	5b                   	pop    ebx
c0011d31:	c3                   	ret    
c0011d32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d37:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d3c:	83 c4 08             	add    esp,0x8
c0011d3f:	5b                   	pop    ebx
c0011d40:	c3                   	ret    

c0011d41 <SysTell(regs*)>:
c0011d41:	53                   	push   ebx
c0011d42:	83 ec 08             	sub    esp,0x8
c0011d45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d49:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d4c:	83 f8 02             	cmp    eax,0x2
c0011d4f:	76 4e                	jbe    c0011d9f <SysTell(regs*)+0x5e>
c0011d51:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d56:	76 19                	jbe    c0011d71 <SysTell(regs*)+0x30>
c0011d58:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d5b:	31 d2                	xor    edx,edx
c0011d5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d6a:	31 c0                	xor    eax,eax
c0011d6c:	83 c4 08             	add    esp,0x8
c0011d6f:	5b                   	pop    ebx
c0011d70:	c3                   	ret    
c0011d71:	83 ec 0c             	sub    esp,0xc
c0011d74:	50                   	push   eax
c0011d75:	e8 39 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d7a:	5a                   	pop    edx
c0011d7b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011d7e:	59                   	pop    ecx
c0011d7f:	53                   	push   ebx
c0011d80:	50                   	push   eax
c0011d81:	e8 b2 9c ff ff       	call   c000ba38 <File::tell(unsigned long long*)>
c0011d86:	83 c4 10             	add    esp,0x10
c0011d89:	85 c0                	test   eax,eax
c0011d8b:	0f 95 c0             	setne  al
c0011d8e:	31 d2                	xor    edx,edx
c0011d90:	0f b6 c0             	movzx  eax,al
c0011d93:	f7 d8                	neg    eax
c0011d95:	83 d2 00             	adc    edx,0x0
c0011d98:	83 c4 08             	add    esp,0x8
c0011d9b:	f7 da                	neg    edx
c0011d9d:	5b                   	pop    ebx
c0011d9e:	c3                   	ret    
c0011d9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011da4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011da9:	83 c4 08             	add    esp,0x8
c0011dac:	5b                   	pop    ebx
c0011dad:	c3                   	ret    

c0011dae <SysSize(regs*)>:
c0011dae:	53                   	push   ebx
c0011daf:	83 ec 18             	sub    esp,0x18
c0011db2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011db6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011db9:	83 f8 02             	cmp    eax,0x2
c0011dbc:	76 54                	jbe    c0011e12 <SysSize(regs*)+0x64>
c0011dbe:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011dc3:	76 19                	jbe    c0011dde <SysSize(regs*)+0x30>
c0011dc5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011dc8:	31 d2                	xor    edx,edx
c0011dca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011dd0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011dd7:	31 c0                	xor    eax,eax
c0011dd9:	83 c4 18             	add    esp,0x18
c0011ddc:	5b                   	pop    ebx
c0011ddd:	c3                   	ret    
c0011dde:	83 ec 0c             	sub    esp,0xc
c0011de1:	50                   	push   eax
c0011de2:	e8 cc 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011de7:	83 c4 0c             	add    esp,0xc
c0011dea:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011dee:	52                   	push   edx
c0011def:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011df2:	52                   	push   edx
c0011df3:	50                   	push   eax
c0011df4:	e8 d7 9d ff ff       	call   c000bbd0 <File::stat(unsigned long long*, bool*)>
c0011df9:	83 c4 10             	add    esp,0x10
c0011dfc:	85 c0                	test   eax,eax
c0011dfe:	0f 95 c0             	setne  al
c0011e01:	31 d2                	xor    edx,edx
c0011e03:	0f b6 c0             	movzx  eax,al
c0011e06:	f7 d8                	neg    eax
c0011e08:	83 d2 00             	adc    edx,0x0
c0011e0b:	83 c4 18             	add    esp,0x18
c0011e0e:	f7 da                	neg    edx
c0011e10:	5b                   	pop    ebx
c0011e11:	c3                   	ret    
c0011e12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e17:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e1c:	83 c4 18             	add    esp,0x18
c0011e1f:	5b                   	pop    ebx
c0011e20:	c3                   	ret    

c0011e21 <SysSizeFromFilename(regs*)>:
c0011e21:	57                   	push   edi
c0011e22:	56                   	push   esi
c0011e23:	53                   	push   ebx
c0011e24:	83 ec 20             	sub    esp,0x20
c0011e27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011e2b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011e2e:	83 fb 02             	cmp    ebx,0x2
c0011e31:	0f 86 89 00 00 00    	jbe    c0011ec0 <SysSizeFromFilename(regs*)+0x9f>
c0011e37:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011e3d:	76 1b                	jbe    c0011e5a <SysSizeFromFilename(regs*)+0x39>
c0011e3f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011e42:	31 d2                	xor    edx,edx
c0011e44:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e51:	83 c4 20             	add    esp,0x20
c0011e54:	31 c0                	xor    eax,eax
c0011e56:	5b                   	pop    ebx
c0011e57:	5e                   	pop    esi
c0011e58:	5f                   	pop    edi
c0011e59:	c3                   	ret    
c0011e5a:	83 ec 0c             	sub    esp,0xc
c0011e5d:	68 14 01 00 00       	push   0x114
c0011e62:	e8 4f 5c ff ff       	call   c0007ab6 <malloc>
c0011e67:	6a 01                	push   0x1
c0011e69:	89 c7                	mov    edi,eax
c0011e6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e73:	50                   	push   eax
c0011e74:	53                   	push   ebx
c0011e75:	57                   	push   edi
c0011e76:	e8 75 99 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c0011e7b:	83 c4 1c             	add    esp,0x1c
c0011e7e:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011e82:	50                   	push   eax
c0011e83:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011e86:	52                   	push   edx
c0011e87:	57                   	push   edi
c0011e88:	e8 43 9d ff ff       	call   c000bbd0 <File::stat(unsigned long long*, bool*)>
c0011e8d:	83 c4 10             	add    esp,0x10
c0011e90:	85 ff                	test   edi,edi
c0011e92:	74 14                	je     c0011ea8 <SysSizeFromFilename(regs*)+0x87>
c0011e94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e98:	8b 17                	mov    edx,DWORD PTR [edi]
c0011e9a:	83 ec 0c             	sub    esp,0xc
c0011e9d:	57                   	push   edi
c0011e9e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011ea1:	83 c4 10             	add    esp,0x10
c0011ea4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ea8:	85 c0                	test   eax,eax
c0011eaa:	0f 95 c0             	setne  al
c0011ead:	31 d2                	xor    edx,edx
c0011eaf:	0f b6 c0             	movzx  eax,al
c0011eb2:	f7 d8                	neg    eax
c0011eb4:	83 d2 00             	adc    edx,0x0
c0011eb7:	83 c4 20             	add    esp,0x20
c0011eba:	f7 da                	neg    edx
c0011ebc:	5b                   	pop    ebx
c0011ebd:	5e                   	pop    esi
c0011ebe:	5f                   	pop    edi
c0011ebf:	c3                   	ret    
c0011ec0:	83 c4 20             	add    esp,0x20
c0011ec3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ec8:	5b                   	pop    ebx
c0011ec9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ece:	5e                   	pop    esi
c0011ecf:	5f                   	pop    edi
c0011ed0:	c3                   	ret    

c0011ed1 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011ed1:	55                   	push   ebp
c0011ed2:	57                   	push   edi
c0011ed3:	56                   	push   esi
c0011ed4:	53                   	push   ebx
c0011ed5:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0011edb:	8b 9c 24 50 01 00 00 	mov    ebx,DWORD PTR [esp+0x150]
c0011ee2:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011ee5:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011ee8:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011eee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ef1:	83 f8 02             	cmp    eax,0x2
c0011ef4:	0f 86 97 00 00 00    	jbe    c0011f91 <SysSizeFromFilenameNoSymlink(regs*)+0xc0>
c0011efa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011eff:	76 1f                	jbe    c0011f20 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0011f01:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f04:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011f0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f11:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011f17:	31 c0                	xor    eax,eax
c0011f19:	5b                   	pop    ebx
c0011f1a:	31 d2                	xor    edx,edx
c0011f1c:	5e                   	pop    esi
c0011f1d:	5f                   	pop    edi
c0011f1e:	5d                   	pop    ebp
c0011f1f:	c3                   	ret    
c0011f20:	83 ec 0c             	sub    esp,0xc
c0011f23:	68 14 01 00 00       	push   0x114
c0011f28:	e8 89 5b ff ff       	call   c0007ab6 <malloc>
c0011f2d:	6a 00                	push   0x0
c0011f2f:	89 c5                	mov    ebp,eax
c0011f31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f39:	50                   	push   eax
c0011f3a:	57                   	push   edi
c0011f3b:	55                   	push   ebp
c0011f3c:	e8 af 98 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c0011f41:	83 c4 1c             	add    esp,0x1c
c0011f44:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0011f48:	50                   	push   eax
c0011f49:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011f4c:	52                   	push   edx
c0011f4d:	55                   	push   ebp
c0011f4e:	e8 7d 9c ff ff       	call   c000bbd0 <File::stat(unsigned long long*, bool*)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	85 ed                	test   ebp,ebp
c0011f58:	74 15                	je     c0011f6f <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c0011f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f5e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011f61:	83 ec 0c             	sub    esp,0xc
c0011f64:	55                   	push   ebp
c0011f65:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011f68:	83 c4 10             	add    esp,0x10
c0011f6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f6f:	85 c0                	test   eax,eax
c0011f71:	75 1e                	jne    c0011f91 <SysSizeFromFilenameNoSymlink(regs*)+0xc0>
c0011f73:	83 ec 08             	sub    esp,0x8
c0011f76:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011f7a:	50                   	push   eax
c0011f7b:	57                   	push   edi
c0011f7c:	e8 c9 8f ff ff       	call   c000af4a <KeDereferenceSymlink(char const*, char*)>
c0011f81:	83 c4 10             	add    esp,0x10
c0011f84:	83 f8 01             	cmp    eax,0x1
c0011f87:	75 88                	jne    c0011f11 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011f89:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011f8f:	eb 80                	jmp    c0011f11 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011f91:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011f97:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f9c:	5b                   	pop    ebx
c0011f9d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fa2:	5e                   	pop    esi
c0011fa3:	5f                   	pop    edi
c0011fa4:	5d                   	pop    ebp
c0011fa5:	c3                   	ret    

c0011fa6 <SysClose(regs*)>:
c0011fa6:	53                   	push   ebx
c0011fa7:	83 ec 08             	sub    esp,0x8
c0011faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fb1:	83 f8 02             	cmp    eax,0x2
c0011fb4:	76 41                	jbe    c0011ff7 <SysClose(regs*)+0x51>
c0011fb6:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011fbc:	83 fa 01             	cmp    edx,0x1
c0011fbf:	76 2d                	jbe    c0011fee <SysClose(regs*)+0x48>
c0011fc1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011fc6:	77 2f                	ja     c0011ff7 <SysClose(regs*)+0x51>
c0011fc8:	83 ec 0c             	sub    esp,0xc
c0011fcb:	50                   	push   eax
c0011fcc:	e8 e2 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011fd1:	89 c3                	mov    ebx,eax
c0011fd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0011fd6:	e8 51 99 ff ff       	call   c000b92c <File::close()>
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	85 db                	test   ebx,ebx
c0011fe0:	74 0c                	je     c0011fee <SysClose(regs*)+0x48>
c0011fe2:	83 ec 0c             	sub    esp,0xc
c0011fe5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fe7:	53                   	push   ebx
c0011fe8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011feb:	83 c4 10             	add    esp,0x10
c0011fee:	31 c0                	xor    eax,eax
c0011ff0:	31 d2                	xor    edx,edx
c0011ff2:	83 c4 08             	add    esp,0x8
c0011ff5:	5b                   	pop    ebx
c0011ff6:	c3                   	ret    
c0011ff7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ffc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012001:	83 c4 08             	add    esp,0x8
c0012004:	5b                   	pop    ebx
c0012005:	c3                   	ret    

c0012006 <SysOpenDir(regs*)>:
c0012006:	56                   	push   esi
c0012007:	53                   	push   ebx
c0012008:	83 ec 04             	sub    esp,0x4
c001200b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001200f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012012:	85 c9                	test   ecx,ecx
c0012014:	74 5d                	je     c0012073 <SysOpenDir(regs*)+0x6d>
c0012016:	83 ec 0c             	sub    esp,0xc
c0012019:	68 14 01 00 00       	push   0x114
c001201e:	e8 93 5a ff ff       	call   c0007ab6 <malloc>
c0012023:	83 c4 0c             	add    esp,0xc
c0012026:	89 c6                	mov    esi,eax
c0012028:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001202d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012030:	50                   	push   eax
c0012031:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012034:	52                   	push   edx
c0012035:	56                   	push   esi
c0012036:	e8 53 9d ff ff       	call   c000bd8e <Directory::Directory(char const*, Process*)>
c001203b:	83 c4 10             	add    esp,0x10
c001203e:	85 f6                	test   esi,esi
c0012040:	74 31                	je     c0012073 <SysOpenDir(regs*)+0x6d>
c0012042:	83 ec 0c             	sub    esp,0xc
c0012045:	56                   	push   esi
c0012046:	e8 0b 9e ff ff       	call   c000be56 <Directory::open()>
c001204b:	83 c4 10             	add    esp,0x10
c001204e:	85 c0                	test   eax,eax
c0012050:	75 21                	jne    c0012073 <SysOpenDir(regs*)+0x6d>
c0012052:	83 ec 0c             	sub    esp,0xc
c0012055:	56                   	push   esi
c0012056:	e8 5b 71 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001205b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001205e:	83 c4 10             	add    esp,0x10
c0012061:	89 02                	mov    DWORD PTR [edx],eax
c0012063:	c1 f8 1f             	sar    eax,0x1f
c0012066:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012069:	83 c4 04             	add    esp,0x4
c001206c:	31 c0                	xor    eax,eax
c001206e:	31 d2                	xor    edx,edx
c0012070:	5b                   	pop    ebx
c0012071:	5e                   	pop    esi
c0012072:	c3                   	ret    
c0012073:	83 c4 04             	add    esp,0x4
c0012076:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001207b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012080:	5b                   	pop    ebx
c0012081:	5e                   	pop    esi
c0012082:	c3                   	ret    

c0012083 <SysMakeDir(regs*)>:
c0012083:	56                   	push   esi
c0012084:	53                   	push   ebx
c0012085:	83 ec 10             	sub    esp,0x10
c0012088:	68 14 01 00 00       	push   0x114
c001208d:	e8 24 5a ff ff       	call   c0007ab6 <malloc>
c0012092:	83 c4 0c             	add    esp,0xc
c0012095:	89 c3                	mov    ebx,eax
c0012097:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001209c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001209f:	50                   	push   eax
c00120a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120a4:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00120a7:	52                   	push   edx
c00120a8:	53                   	push   ebx
c00120a9:	e8 e0 9c ff ff       	call   c000bd8e <Directory::Directory(char const*, Process*)>
c00120ae:	83 c4 10             	add    esp,0x10
c00120b1:	85 db                	test   ebx,ebx
c00120b3:	74 2c                	je     c00120e1 <SysMakeDir(regs*)+0x5e>
c00120b5:	83 ec 0c             	sub    esp,0xc
c00120b8:	53                   	push   ebx
c00120b9:	e8 78 9f ff ff       	call   c000c036 <Directory::create()>
c00120be:	89 c6                	mov    esi,eax
c00120c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120c8:	83 c4 10             	add    esp,0x10
c00120cb:	31 c0                	xor    eax,eax
c00120cd:	85 f6                	test   esi,esi
c00120cf:	0f 95 c0             	setne  al
c00120d2:	31 d2                	xor    edx,edx
c00120d4:	f7 d8                	neg    eax
c00120d6:	83 d2 00             	adc    edx,0x0
c00120d9:	83 c4 04             	add    esp,0x4
c00120dc:	f7 da                	neg    edx
c00120de:	5b                   	pop    ebx
c00120df:	5e                   	pop    esi
c00120e0:	c3                   	ret    
c00120e1:	83 c4 04             	add    esp,0x4
c00120e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120ee:	5b                   	pop    ebx
c00120ef:	5e                   	pop    esi
c00120f0:	c3                   	ret    

c00120f1 <SysCloseDir(regs*)>:
c00120f1:	53                   	push   ebx
c00120f2:	83 ec 08             	sub    esp,0x8
c00120f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120f9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00120fc:	8d 50 fd             	lea    edx,[eax-0x3]
c00120ff:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012105:	77 2f                	ja     c0012136 <SysCloseDir(regs*)+0x45>
c0012107:	83 ec 0c             	sub    esp,0xc
c001210a:	50                   	push   eax
c001210b:	e8 a3 73 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012110:	89 c3                	mov    ebx,eax
c0012112:	89 04 24             	mov    DWORD PTR [esp],eax
c0012115:	e8 98 9d ff ff       	call   c000beb2 <Directory::close()>
c001211a:	83 c4 10             	add    esp,0x10
c001211d:	85 db                	test   ebx,ebx
c001211f:	74 0c                	je     c001212d <SysCloseDir(regs*)+0x3c>
c0012121:	83 ec 0c             	sub    esp,0xc
c0012124:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012126:	53                   	push   ebx
c0012127:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001212a:	83 c4 10             	add    esp,0x10
c001212d:	31 c0                	xor    eax,eax
c001212f:	31 d2                	xor    edx,edx
c0012131:	83 c4 08             	add    esp,0x8
c0012134:	5b                   	pop    ebx
c0012135:	c3                   	ret    
c0012136:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001213b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012140:	83 c4 08             	add    esp,0x8
c0012143:	5b                   	pop    ebx
c0012144:	c3                   	ret    

c0012145 <SysWait(regs*)>:
c0012145:	83 ec 10             	sub    esp,0x10
c0012148:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001214c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001214f:	52                   	push   edx
c0012150:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012153:	51                   	push   ecx
c0012154:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012157:	50                   	push   eax
c0012158:	e8 fb 3d 00 00       	call   c0015f58 <waitTask(int, int*, int)>
c001215d:	83 c4 1c             	add    esp,0x1c
c0012160:	89 c2                	mov    edx,eax
c0012162:	c1 fa 1f             	sar    edx,0x1f
c0012165:	c3                   	ret    

c0012166 <SysNotImpl(regs*)>:
c0012166:	83 ec 18             	sub    esp,0x18
c0012169:	68 86 20 02 c0       	push   0xc0022086
c001216e:	e8 de f1 ff ff       	call   c0011351 <KePanic(char const*)>
c0012173:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012178:	ba ff ff ff ff       	mov    edx,0xffffffff
c001217d:	83 c4 1c             	add    esp,0x1c
c0012180:	c3                   	ret    

c0012181 <SysPanic(regs*)>:
c0012181:	83 ec 18             	sub    esp,0x18
c0012184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012188:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001218b:	50                   	push   eax
c001218c:	e8 c0 f1 ff ff       	call   c0011351 <KePanic(char const*)>
c0012191:	b8 01 00 00 00       	mov    eax,0x1
c0012196:	31 d2                	xor    edx,edx
c0012198:	83 c4 1c             	add    esp,0x1c
c001219b:	c3                   	ret    

c001219c <SysRmdir(regs*)>:
c001219c:	56                   	push   esi
c001219d:	53                   	push   ebx
c001219e:	83 ec 20             	sub    esp,0x20
c00121a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121a5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00121a8:	68 14 01 00 00       	push   0x114
c00121ad:	e8 04 59 ff ff       	call   c0007ab6 <malloc>
c00121b2:	6a 00                	push   0x0
c00121b4:	89 c3                	mov    ebx,eax
c00121b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121be:	50                   	push   eax
c00121bf:	56                   	push   esi
c00121c0:	53                   	push   ebx
c00121c1:	e8 2a 96 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c00121c6:	83 c4 14             	add    esp,0x14
c00121c9:	53                   	push   ebx
c00121ca:	e8 cd 98 ff ff       	call   c000ba9c <File::unlink()>
c00121cf:	83 c4 10             	add    esp,0x10
c00121d2:	85 db                	test   ebx,ebx
c00121d4:	74 14                	je     c00121ea <SysRmdir(regs*)+0x4e>
c00121d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121da:	8b 13                	mov    edx,DWORD PTR [ebx]
c00121dc:	83 ec 0c             	sub    esp,0xc
c00121df:	53                   	push   ebx
c00121e0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00121e3:	83 c4 10             	add    esp,0x10
c00121e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121ea:	85 c0                	test   eax,eax
c00121ec:	0f 95 c0             	setne  al
c00121ef:	31 d2                	xor    edx,edx
c00121f1:	0f b6 c0             	movzx  eax,al
c00121f4:	f7 d8                	neg    eax
c00121f6:	83 d2 00             	adc    edx,0x0
c00121f9:	83 c4 14             	add    esp,0x14
c00121fc:	f7 da                	neg    edx
c00121fe:	5b                   	pop    ebx
c00121ff:	5e                   	pop    esi
c0012200:	c3                   	ret    

c0012201 <SysUnlink(regs*)>:
c0012201:	56                   	push   esi
c0012202:	53                   	push   ebx
c0012203:	83 ec 20             	sub    esp,0x20
c0012206:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001220a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001220d:	68 14 01 00 00       	push   0x114
c0012212:	e8 9f 58 ff ff       	call   c0007ab6 <malloc>
c0012217:	6a 00                	push   0x0
c0012219:	89 c3                	mov    ebx,eax
c001221b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012220:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012223:	50                   	push   eax
c0012224:	56                   	push   esi
c0012225:	53                   	push   ebx
c0012226:	e8 c5 95 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c001222b:	83 c4 14             	add    esp,0x14
c001222e:	53                   	push   ebx
c001222f:	e8 68 98 ff ff       	call   c000ba9c <File::unlink()>
c0012234:	83 c4 10             	add    esp,0x10
c0012237:	85 db                	test   ebx,ebx
c0012239:	74 14                	je     c001224f <SysUnlink(regs*)+0x4e>
c001223b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001223f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012241:	83 ec 0c             	sub    esp,0xc
c0012244:	53                   	push   ebx
c0012245:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012248:	83 c4 10             	add    esp,0x10
c001224b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001224f:	85 c0                	test   eax,eax
c0012251:	0f 95 c0             	setne  al
c0012254:	31 d2                	xor    edx,edx
c0012256:	0f b6 c0             	movzx  eax,al
c0012259:	f7 d8                	neg    eax
c001225b:	83 d2 00             	adc    edx,0x0
c001225e:	83 c4 14             	add    esp,0x14
c0012261:	f7 da                	neg    edx
c0012263:	5b                   	pop    ebx
c0012264:	5e                   	pop    esi
c0012265:	c3                   	ret    

c0012266 <SysGetArgv(regs*)>:
c0012266:	83 ec 0c             	sub    esp,0xc
c0012269:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001226d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012270:	85 c0                	test   eax,eax
c0012272:	78 2c                	js     c00122a0 <SysGetArgv(regs*)+0x3a>
c0012274:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001227a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001227d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012283:	7d 1b                	jge    c00122a0 <SysGetArgv(regs*)+0x3a>
c0012285:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001228c:	85 c0                	test   eax,eax
c001228e:	74 18                	je     c00122a8 <SysGetArgv(regs*)+0x42>
c0012290:	83 ec 08             	sub    esp,0x8
c0012293:	50                   	push   eax
c0012294:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012297:	50                   	push   eax
c0012298:	e8 a3 e3 fe ff       	call   c0000640 <strcpy>
c001229d:	83 c4 10             	add    esp,0x10
c00122a0:	31 c0                	xor    eax,eax
c00122a2:	31 d2                	xor    edx,edx
c00122a4:	83 c4 0c             	add    esp,0xc
c00122a7:	c3                   	ret    
c00122a8:	b8 01 00 00 00       	mov    eax,0x1
c00122ad:	31 d2                	xor    edx,edx
c00122af:	83 c4 0c             	add    esp,0xc
c00122b2:	c3                   	ret    

c00122b3 <SysUSleep(regs*)>:
c00122b3:	83 ec 1c             	sub    esp,0x1c
c00122b6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00122ba:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00122bd:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00122c0:	6a 00                	push   0x0
c00122c2:	6a 64                	push   0x64
c00122c4:	52                   	push   edx
c00122c5:	50                   	push   eax
c00122c6:	e8 b5 d0 00 00       	call   c001f380 <__udivdi3>
c00122cb:	83 c4 14             	add    esp,0x14
c00122ce:	50                   	push   eax
c00122cf:	e8 68 3d 00 00       	call   c001603c <milliTenthSleep(unsigned int)>
c00122d4:	31 c0                	xor    eax,eax
c00122d6:	31 d2                	xor    edx,edx
c00122d8:	83 c4 1c             	add    esp,0x1c
c00122db:	c3                   	ret    

c00122dc <SysSpawn(regs*)>:
c00122dc:	56                   	push   esi
c00122dd:	53                   	push   ebx
c00122de:	83 ec 04             	sub    esp,0x4
c00122e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122e5:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00122e8:	85 f6                	test   esi,esi
c00122ea:	75 0a                	jne    c00122f6 <SysSpawn(regs*)+0x1a>
c00122ec:	83 c4 04             	add    esp,0x4
c00122ef:	31 c0                	xor    eax,eax
c00122f1:	31 d2                	xor    edx,edx
c00122f3:	5b                   	pop    ebx
c00122f4:	5e                   	pop    esi
c00122f5:	c3                   	ret    
c00122f6:	83 ec 0c             	sub    esp,0xc
c00122f9:	68 24 07 00 00       	push   0x724
c00122fe:	e8 b3 57 ff ff       	call   c0007ab6 <malloc>
c0012303:	83 c4 10             	add    esp,0x10
c0012306:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012309:	89 c6                	mov    esi,eax
c001230b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001230e:	85 c9                	test   ecx,ecx
c0012310:	75 39                	jne    c001234b <SysSpawn(regs*)+0x6f>
c0012312:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012317:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001231a:	52                   	push   edx
c001231b:	50                   	push   eax
c001231c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001231f:	50                   	push   eax
c0012320:	56                   	push   esi
c0012321:	e8 66 33 00 00       	call   c001568c <Process::Process(char const*, Process*, char**)>
c0012326:	83 c4 10             	add    esp,0x10
c0012329:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012330:	75 ba                	jne    c00122ec <SysSpawn(regs*)+0x10>
c0012332:	83 ec 0c             	sub    esp,0xc
c0012335:	56                   	push   esi
c0012336:	e8 8d 38 00 00       	call   c0015bc8 <Process::createUserThread()>
c001233b:	8b 06                	mov    eax,DWORD PTR [esi]
c001233d:	83 c4 10             	add    esp,0x10
c0012340:	89 c2                	mov    edx,eax
c0012342:	83 c4 04             	add    esp,0x4
c0012345:	c1 fa 1f             	sar    edx,0x1f
c0012348:	5b                   	pop    ebx
c0012349:	5e                   	pop    esi
c001234a:	c3                   	ret    
c001234b:	31 c0                	xor    eax,eax
c001234d:	eb cb                	jmp    c001231a <SysSpawn(regs*)+0x3e>

c001234f <SysGetEnv(regs*)>:
c001234f:	57                   	push   edi
c0012350:	56                   	push   esi
c0012351:	53                   	push   ebx
c0012352:	83 ec 1c             	sub    esp,0x1c
c0012355:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012359:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001235e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012361:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012364:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012367:	51                   	push   ecx
c0012368:	e8 9c ee ff ff       	call   c0011209 <KeGetProcessTotalEnvCount(Process*)>
c001236d:	83 c4 10             	add    esp,0x10
c0012370:	39 c7                	cmp    edi,eax
c0012372:	7c 14                	jl     c0012388 <SysGetEnv(regs*)+0x39>
c0012374:	85 f6                	test   esi,esi
c0012376:	75 0b                	jne    c0012383 <SysGetEnv(regs*)+0x34>
c0012378:	83 c4 10             	add    esp,0x10
c001237b:	31 c0                	xor    eax,eax
c001237d:	5b                   	pop    ebx
c001237e:	31 d2                	xor    edx,edx
c0012380:	5e                   	pop    esi
c0012381:	5f                   	pop    edi
c0012382:	c3                   	ret    
c0012383:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012386:	eb f0                	jmp    c0012378 <SysGetEnv(regs*)+0x29>
c0012388:	8d 44 24 08          	lea    eax,[esp+0x8]
c001238c:	83 ec 04             	sub    esp,0x4
c001238f:	57                   	push   edi
c0012390:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012396:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012399:	57                   	push   edi
c001239a:	50                   	push   eax
c001239b:	e8 89 ee ff ff       	call   c0011229 <KeGetProcessEnvPair(Process*, int)>
c00123a0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00123a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00123ab:	83 c4 0c             	add    esp,0xc
c00123ae:	85 d2                	test   edx,edx
c00123b0:	75 23                	jne    c00123d5 <SysGetEnv(regs*)+0x86>
c00123b2:	83 ec 0c             	sub    esp,0xc
c00123b5:	50                   	push   eax
c00123b6:	e8 b5 e1 fe ff       	call   c0000570 <strlen>
c00123bb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00123be:	89 c3                	mov    ebx,eax
c00123c0:	e8 ab e1 fe ff       	call   c0000570 <strlen>
c00123c5:	83 c4 10             	add    esp,0x10
c00123c8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00123cc:	83 c4 10             	add    esp,0x10
c00123cf:	31 d2                	xor    edx,edx
c00123d1:	5b                   	pop    ebx
c00123d2:	5e                   	pop    esi
c00123d3:	5f                   	pop    edi
c00123d4:	c3                   	ret    
c00123d5:	83 ec 08             	sub    esp,0x8
c00123d8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123db:	50                   	push   eax
c00123dc:	56                   	push   esi
c00123dd:	e8 5e e2 fe ff       	call   c0000640 <strcpy>
c00123e2:	58                   	pop    eax
c00123e3:	5a                   	pop    edx
c00123e4:	68 a0 20 02 c0       	push   0xc00220a0
c00123e9:	56                   	push   esi
c00123ea:	e8 51 e4 fe ff       	call   c0000840 <strcat>
c00123ef:	59                   	pop    ecx
c00123f0:	5b                   	pop    ebx
c00123f1:	57                   	push   edi
c00123f2:	56                   	push   esi
c00123f3:	e8 48 e4 fe ff       	call   c0000840 <strcat>
c00123f8:	83 c4 10             	add    esp,0x10
c00123fb:	e9 78 ff ff ff       	jmp    c0012378 <SysGetEnv(regs*)+0x29>

c0012400 <SysSetFatAttrib(regs*)>:
c0012400:	57                   	push   edi
c0012401:	56                   	push   esi
c0012402:	53                   	push   ebx
c0012403:	83 ec 1c             	sub    esp,0x1c
c0012406:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001240a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001240d:	68 14 01 00 00       	push   0x114
c0012412:	e8 9f 56 ff ff       	call   c0007ab6 <malloc>
c0012417:	6a 01                	push   0x1
c0012419:	89 c3                	mov    ebx,eax
c001241b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012420:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012423:	50                   	push   eax
c0012424:	57                   	push   edi
c0012425:	53                   	push   ebx
c0012426:	e8 c5 93 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c001242b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001242e:	83 c4 1c             	add    esp,0x1c
c0012431:	0f b6 d4             	movzx  edx,ah
c0012434:	0f b6 c0             	movzx  eax,al
c0012437:	52                   	push   edx
c0012438:	50                   	push   eax
c0012439:	53                   	push   ebx
c001243a:	e8 f7 96 ff ff       	call   c000bb36 <File::chfatattr(unsigned char, unsigned char)>
c001243f:	83 c4 10             	add    esp,0x10
c0012442:	85 db                	test   ebx,ebx
c0012444:	74 14                	je     c001245a <SysSetFatAttrib(regs*)+0x5a>
c0012446:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001244a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001244c:	83 ec 0c             	sub    esp,0xc
c001244f:	53                   	push   ebx
c0012450:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012453:	83 c4 10             	add    esp,0x10
c0012456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001245a:	85 c0                	test   eax,eax
c001245c:	0f 95 c0             	setne  al
c001245f:	31 d2                	xor    edx,edx
c0012461:	0f b6 c0             	movzx  eax,al
c0012464:	f7 d8                	neg    eax
c0012466:	83 d2 00             	adc    edx,0x0
c0012469:	83 c4 10             	add    esp,0x10
c001246c:	f7 da                	neg    edx
c001246e:	5b                   	pop    ebx
c001246f:	5e                   	pop    esi
c0012470:	5f                   	pop    edi
c0012471:	c3                   	ret    

c0012472 <SysPipe(regs*)>:
c0012472:	57                   	push   edi
c0012473:	56                   	push   esi
c0012474:	53                   	push   ebx
c0012475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012479:	83 ec 0c             	sub    esp,0xc
c001247c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001247f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012482:	6a 20                	push   0x20
c0012484:	e8 2d 56 ff ff       	call   c0007ab6 <malloc>
c0012489:	89 c3                	mov    ebx,eax
c001248b:	58                   	pop    eax
c001248c:	5a                   	pop    edx
c001248d:	68 00 50 00 00       	push   0x5000
c0012492:	53                   	push   ebx
c0012493:	e8 90 5f ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012498:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001249b:	e8 16 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00124a0:	89 07                	mov    DWORD PTR [edi],eax
c00124a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124a5:	e8 0c 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00124aa:	83 c4 10             	add    esp,0x10
c00124ad:	89 06                	mov    DWORD PTR [esi],eax
c00124af:	31 d2                	xor    edx,edx
c00124b1:	5b                   	pop    ebx
c00124b2:	31 c0                	xor    eax,eax
c00124b4:	5e                   	pop    esi
c00124b5:	5f                   	pop    edi
c00124b6:	c3                   	ret    

c00124b7 <SysGetUnixTime(regs*)>:
c00124b7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00124bc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00124c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124c6:	e9 af 9d ff ff       	jmp    c000c27a <Clock::timeInSecondsLocal()>

c00124cb <string_ends_with(char const*, char const*)>:
c00124cb:	57                   	push   edi
c00124cc:	56                   	push   esi
c00124cd:	53                   	push   ebx
c00124ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00124d6:	83 ec 0c             	sub    esp,0xc
c00124d9:	53                   	push   ebx
c00124da:	e8 91 e0 fe ff       	call   c0000570 <strlen>
c00124df:	89 3c 24             	mov    DWORD PTR [esp],edi
c00124e2:	89 c6                	mov    esi,eax
c00124e4:	e8 87 e0 fe ff       	call   c0000570 <strlen>
c00124e9:	83 c4 10             	add    esp,0x10
c00124ec:	39 c6                	cmp    esi,eax
c00124ee:	7d 06                	jge    c00124f6 <string_ends_with(char const*, char const*)+0x2b>
c00124f0:	5b                   	pop    ebx
c00124f1:	31 c0                	xor    eax,eax
c00124f3:	5e                   	pop    esi
c00124f4:	5f                   	pop    edi
c00124f5:	c3                   	ret    
c00124f6:	83 ec 08             	sub    esp,0x8
c00124f9:	29 c6                	sub    esi,eax
c00124fb:	57                   	push   edi
c00124fc:	01 f3                	add    ebx,esi
c00124fe:	53                   	push   ebx
c00124ff:	e8 4c e2 fe ff       	call   c0000750 <strcmp>
c0012504:	83 c4 10             	add    esp,0x10
c0012507:	85 c0                	test   eax,eax
c0012509:	5b                   	pop    ebx
c001250a:	0f 94 c0             	sete   al
c001250d:	5e                   	pop    esi
c001250e:	0f b6 c0             	movzx  eax,al
c0012511:	5f                   	pop    edi
c0012512:	c3                   	ret    

c0012513 <SysOpen(regs*)>:
c0012513:	56                   	push   esi
c0012514:	53                   	push   ebx
c0012515:	81 ec 04 01 00 00    	sub    esp,0x104
c001251b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012522:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012525:	85 c0                	test   eax,eax
c0012527:	0f 84 bb 01 00 00    	je     c00126e8 <SysOpen(regs*)+0x1d5>
c001252d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012530:	85 c0                	test   eax,eax
c0012532:	0f 84 b0 01 00 00    	je     c00126e8 <SysOpen(regs*)+0x1d5>
c0012538:	6a 00                	push   0x0
c001253a:	68 a2 20 02 c0       	push   0xc00220a2
c001253f:	50                   	push   eax
c0012540:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012544:	56                   	push   esi
c0012545:	e8 9c 90 ff ff       	call   c000b5e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001254a:	89 34 24             	mov    DWORD PTR [esp],esi
c001254d:	e8 1e e0 fe ff       	call   c0000570 <strlen>
c0012552:	83 c4 10             	add    esp,0x10
c0012555:	83 e8 01             	sub    eax,0x1
c0012558:	74 21                	je     c001257b <SysOpen(regs*)+0x68>
c001255a:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001255e:	eb 12                	jmp    c0012572 <SysOpen(regs*)+0x5f>
c0012560:	83 fa 3a             	cmp    edx,0x3a
c0012563:	74 12                	je     c0012577 <SysOpen(regs*)+0x64>
c0012565:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012569:	83 e8 01             	sub    eax,0x1
c001256c:	74 0d                	je     c001257b <SysOpen(regs*)+0x68>
c001256e:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012572:	83 fa 2e             	cmp    edx,0x2e
c0012575:	75 e9                	jne    c0012560 <SysOpen(regs*)+0x4d>
c0012577:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001257b:	83 ec 08             	sub    esp,0x8
c001257e:	68 a6 20 02 c0       	push   0xc00220a6
c0012583:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012586:	50                   	push   eax
c0012587:	e8 3f ff ff ff       	call   c00124cb <string_ends_with(char const*, char const*)>
c001258c:	83 c4 10             	add    esp,0x10
c001258f:	85 c0                	test   eax,eax
c0012591:	74 1d                	je     c00125b0 <SysOpen(regs*)+0x9d>
c0012593:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012596:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001259c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00125a3:	81 c4 04 01 00 00    	add    esp,0x104
c00125a9:	31 c0                	xor    eax,eax
c00125ab:	31 d2                	xor    edx,edx
c00125ad:	5b                   	pop    ebx
c00125ae:	5e                   	pop    esi
c00125af:	c3                   	ret    
c00125b0:	83 ec 08             	sub    esp,0x8
c00125b3:	68 ab 20 02 c0       	push   0xc00220ab
c00125b8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125bb:	50                   	push   eax
c00125bc:	e8 0a ff ff ff       	call   c00124cb <string_ends_with(char const*, char const*)>
c00125c1:	83 c4 10             	add    esp,0x10
c00125c4:	85 c0                	test   eax,eax
c00125c6:	75 cb                	jne    c0012593 <SysOpen(regs*)+0x80>
c00125c8:	83 ec 08             	sub    esp,0x8
c00125cb:	68 a7 20 02 c0       	push   0xc00220a7
c00125d0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125d3:	50                   	push   eax
c00125d4:	e8 77 e1 fe ff       	call   c0000750 <strcmp>
c00125d9:	83 c4 10             	add    esp,0x10
c00125dc:	85 c0                	test   eax,eax
c00125de:	74 b3                	je     c0012593 <SysOpen(regs*)+0x80>
c00125e0:	83 ec 08             	sub    esp,0x8
c00125e3:	68 a6 20 02 c0       	push   0xc00220a6
c00125e8:	56                   	push   esi
c00125e9:	e8 dd fe ff ff       	call   c00124cb <string_ends_with(char const*, char const*)>
c00125ee:	83 c4 10             	add    esp,0x10
c00125f1:	85 c0                	test   eax,eax
c00125f3:	75 9e                	jne    c0012593 <SysOpen(regs*)+0x80>
c00125f5:	83 ec 08             	sub    esp,0x8
c00125f8:	68 b0 20 02 c0       	push   0xc00220b0
c00125fd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012600:	50                   	push   eax
c0012601:	e8 c5 fe ff ff       	call   c00124cb <string_ends_with(char const*, char const*)>
c0012606:	83 c4 10             	add    esp,0x10
c0012609:	85 c0                	test   eax,eax
c001260b:	0f 85 ea 00 00 00    	jne    c00126fb <SysOpen(regs*)+0x1e8>
c0012611:	83 ec 08             	sub    esp,0x8
c0012614:	68 b5 20 02 c0       	push   0xc00220b5
c0012619:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001261c:	50                   	push   eax
c001261d:	e8 a9 fe ff ff       	call   c00124cb <string_ends_with(char const*, char const*)>
c0012622:	83 c4 10             	add    esp,0x10
c0012625:	85 c0                	test   eax,eax
c0012627:	0f 85 ce 00 00 00    	jne    c00126fb <SysOpen(regs*)+0x1e8>
c001262d:	83 ec 08             	sub    esp,0x8
c0012630:	68 b1 20 02 c0       	push   0xc00220b1
c0012635:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012638:	51                   	push   ecx
c0012639:	e8 12 e1 fe ff       	call   c0000750 <strcmp>
c001263e:	83 c4 10             	add    esp,0x10
c0012641:	85 c0                	test   eax,eax
c0012643:	0f 84 b2 00 00 00    	je     c00126fb <SysOpen(regs*)+0x1e8>
c0012649:	83 ec 08             	sub    esp,0x8
c001264c:	68 b0 20 02 c0       	push   0xc00220b0
c0012651:	56                   	push   esi
c0012652:	e8 74 fe ff ff       	call   c00124cb <string_ends_with(char const*, char const*)>
c0012657:	83 c4 10             	add    esp,0x10
c001265a:	85 c0                	test   eax,eax
c001265c:	0f 85 99 00 00 00    	jne    c00126fb <SysOpen(regs*)+0x1e8>
c0012662:	83 ec 0c             	sub    esp,0xc
c0012665:	68 14 01 00 00       	push   0x114
c001266a:	e8 47 54 ff ff       	call   c0007ab6 <malloc>
c001266f:	6a 01                	push   0x1
c0012671:	89 c6                	mov    esi,eax
c0012673:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012678:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001267b:	50                   	push   eax
c001267c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001267f:	52                   	push   edx
c0012680:	56                   	push   esi
c0012681:	e8 6a 91 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c0012686:	83 c4 20             	add    esp,0x20
c0012689:	85 f6                	test   esi,esi
c001268b:	74 5b                	je     c00126e8 <SysOpen(regs*)+0x1d5>
c001268d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012690:	0f b6 c2             	movzx  eax,dl
c0012693:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012696:	89 d0                	mov    eax,edx
c0012698:	83 e0 01             	and    eax,0x1
c001269b:	f6 c2 02             	test   dl,0x2
c001269e:	74 03                	je     c00126a3 <SysOpen(regs*)+0x190>
c00126a0:	83 c8 02             	or     eax,0x2
c00126a3:	f6 c2 04             	test   dl,0x4
c00126a6:	74 03                	je     c00126ab <SysOpen(regs*)+0x198>
c00126a8:	83 c8 04             	or     eax,0x4
c00126ab:	f6 c2 08             	test   dl,0x8
c00126ae:	74 03                	je     c00126b3 <SysOpen(regs*)+0x1a0>
c00126b0:	83 c8 0a             	or     eax,0xa
c00126b3:	80 e2 10             	and    dl,0x10
c00126b6:	74 03                	je     c00126bb <SysOpen(regs*)+0x1a8>
c00126b8:	83 c8 12             	or     eax,0x12
c00126bb:	83 ec 08             	sub    esp,0x8
c00126be:	50                   	push   eax
c00126bf:	56                   	push   esi
c00126c0:	e8 09 92 ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c00126c5:	83 c4 10             	add    esp,0x10
c00126c8:	85 c0                	test   eax,eax
c00126ca:	75 1c                	jne    c00126e8 <SysOpen(regs*)+0x1d5>
c00126cc:	83 ec 0c             	sub    esp,0xc
c00126cf:	56                   	push   esi
c00126d0:	e8 e1 6a ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00126d5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00126d8:	83 c4 10             	add    esp,0x10
c00126db:	89 02                	mov    DWORD PTR [edx],eax
c00126dd:	c1 f8 1f             	sar    eax,0x1f
c00126e0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00126e3:	e9 bb fe ff ff       	jmp    c00125a3 <SysOpen(regs*)+0x90>
c00126e8:	81 c4 04 01 00 00    	add    esp,0x104
c00126ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00126f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00126f8:	5b                   	pop    ebx
c00126f9:	5e                   	pop    esi
c00126fa:	c3                   	ret    
c00126fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00126fe:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012704:	e9 93 fe ff ff       	jmp    c001259c <SysOpen(regs*)+0x89>

c0012709 <KeSystemCall(regs*, void*)>:
c0012709:	53                   	push   ebx
c001270a:	83 ec 08             	sub    esp,0x8
c001270d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012711:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012714:	83 f8 3e             	cmp    eax,0x3e
c0012717:	77 16                	ja     c001272f <KeSystemCall(regs*, void*)+0x26>
c0012719:	8b 14 85 c0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb40]
c0012720:	85 d2                	test   edx,edx
c0012722:	74 0b                	je     c001272f <KeSystemCall(regs*, void*)+0x26>
c0012724:	83 ec 0c             	sub    esp,0xc
c0012727:	53                   	push   ebx
c0012728:	ff d2                	call   edx
c001272a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001272d:	eb 0d                	jmp    c001273c <KeSystemCall(regs*, void*)+0x33>
c001272f:	52                   	push   edx
c0012730:	52                   	push   edx
c0012731:	50                   	push   eax
c0012732:	68 ba 20 02 c0       	push   0xc00220ba
c0012737:	e8 09 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001273c:	83 c4 10             	add    esp,0x10
c001273f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012744:	31 d2                	xor    edx,edx
c0012746:	83 c4 08             	add    esp,0x8
c0012749:	5b                   	pop    ebx
c001274a:	c3                   	ret    
c001274b:	90                   	nop

c001274c <KeSwitchEndian16(unsigned short)>:
c001274c:	83 ec 04             	sub    esp,0x4
c001274f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012753:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012757:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001275b:	c1 f8 08             	sar    eax,0x8
c001275e:	89 c2                	mov    edx,eax
c0012760:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012764:	c1 e0 08             	shl    eax,0x8
c0012767:	09 d0                	or     eax,edx
c0012769:	83 c4 04             	add    esp,0x4
c001276c:	c3                   	ret    
c001276d:	8d 76 00             	lea    esi,[esi+0x0]

c0012770 <KeSwitchEndian32(unsigned int)>:
c0012770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012774:	c1 e8 18             	shr    eax,0x18
c0012777:	89 c2                	mov    edx,eax
c0012779:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001277d:	c1 e0 08             	shl    eax,0x8
c0012780:	25 00 00 ff 00       	and    eax,0xff0000
c0012785:	09 c2                	or     edx,eax
c0012787:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001278b:	c1 e8 08             	shr    eax,0x8
c001278e:	25 00 ff 00 00       	and    eax,0xff00
c0012793:	09 c2                	or     edx,eax
c0012795:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012799:	c1 e0 18             	shl    eax,0x18
c001279c:	09 d0                	or     eax,edx
c001279e:	c3                   	ret    
c001279f:	90                   	nop

c00127a0 <EthernetCRC32(unsigned char*, int)>:
c00127a0:	83 ec 10             	sub    esp,0x10
c00127a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00127a8:	75 0a                	jne    c00127b4 <EthernetCRC32(unsigned char*, int)+0x14>
c00127aa:	b8 00 00 00 00       	mov    eax,0x0
c00127af:	e9 8c 00 00 00       	jmp    c0012840 <EthernetCRC32(unsigned char*, int)+0xa0>
c00127b4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00127b9:	7f 09                	jg     c00127c4 <EthernetCRC32(unsigned char*, int)+0x24>
c00127bb:	b8 00 00 00 00       	mov    eax,0x0
c00127c0:	eb 7e                	jmp    c0012840 <EthernetCRC32(unsigned char*, int)+0xa0>
c00127c2:	66 90                	xchg   ax,ax
c00127c4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00127cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00127d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00127d8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00127dc:	7d 5a                	jge    c0012838 <EthernetCRC32(unsigned char*, int)+0x98>
c00127de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127e6:	01 d0                	add    eax,edx
c00127e8:	8a 00                	mov    al,BYTE PTR [eax]
c00127ea:	0f b6 c0             	movzx  eax,al
c00127ed:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00127f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00127f9:	8d 76 00             	lea    esi,[esi+0x0]
c00127fc:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012801:	7f 2d                	jg     c0012830 <EthernetCRC32(unsigned char*, int)+0x90>
c0012803:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012807:	83 e0 01             	and    eax,0x1
c001280a:	74 10                	je     c001281c <EthernetCRC32(unsigned char*, int)+0x7c>
c001280c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012810:	d1 e8                	shr    eax,1
c0012812:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012817:	eb 0b                	jmp    c0012824 <EthernetCRC32(unsigned char*, int)+0x84>
c0012819:	8d 76 00             	lea    esi,[esi+0x0]
c001281c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012820:	d1 e8                	shr    eax,1
c0012822:	66 90                	xchg   ax,ax
c0012824:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012828:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001282d:	eb cd                	jmp    c00127fc <EthernetCRC32(unsigned char*, int)+0x5c>
c001282f:	90                   	nop
c0012830:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012835:	eb 9d                	jmp    c00127d4 <EthernetCRC32(unsigned char*, int)+0x34>
c0012837:	90                   	nop
c0012838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001283c:	f7 d0                	not    eax
c001283e:	66 90                	xchg   ax,ax
c0012840:	83 c4 10             	add    esp,0x10
c0012843:	c3                   	ret    

c0012844 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012844:	83 ec 2c             	sub    esp,0x2c
c0012847:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001284b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012850:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012854:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012858:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001285c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001285f:	0f b7 c0             	movzx  eax,ax
c0012862:	3d 06 08 00 00       	cmp    eax,0x806
c0012867:	75 13                	jne    c001287c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012869:	83 ec 0c             	sub    esp,0xc
c001286c:	68 ce 20 02 c0       	push   0xc00220ce
c0012871:	e8 cf 80 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012876:	83 c4 10             	add    esp,0x10
c0012879:	eb 25                	jmp    c00128a0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001287b:	90                   	nop
c001287c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012880:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012883:	0f b7 c0             	movzx  eax,ax
c0012886:	3d 00 08 00 00       	cmp    eax,0x800
c001288b:	75 13                	jne    c00128a0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001288d:	83 ec 0c             	sub    esp,0xc
c0012890:	68 e4 20 02 c0       	push   0xc00220e4
c0012895:	e8 ab 80 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001289a:	83 c4 10             	add    esp,0x10
c001289d:	8d 76 00             	lea    esi,[esi+0x0]
c00128a0:	90                   	nop
c00128a1:	83 c4 2c             	add    esp,0x2c
c00128a4:	c3                   	ret    

c00128a5 <CmOpen(char const*)>:
c00128a5:	57                   	push   edi
c00128a6:	56                   	push   esi
c00128a7:	53                   	push   ebx
c00128a8:	83 ec 1c             	sub    esp,0x1c
c00128ab:	6a 30                	push   0x30
c00128ad:	e8 04 52 ff ff       	call   c0007ab6 <malloc>
c00128b2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00128b9:	89 c3                	mov    ebx,eax
c00128bb:	e8 f6 51 ff ff       	call   c0007ab6 <malloc>
c00128c0:	6a 01                	push   0x1
c00128c2:	89 c6                	mov    esi,eax
c00128c4:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00128ca:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00128ce:	50                   	push   eax
c00128cf:	e8 1c 8f ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c00128d4:	83 c4 1c             	add    esp,0x1c
c00128d7:	89 33                	mov    DWORD PTR [ebx],esi
c00128d9:	8d 44 24 07          	lea    eax,[esp+0x7]
c00128dd:	50                   	push   eax
c00128de:	8d 44 24 10          	lea    eax,[esp+0x10]
c00128e2:	50                   	push   eax
c00128e3:	56                   	push   esi
c00128e4:	e8 e7 92 ff ff       	call   c000bbd0 <File::stat(unsigned long long*, bool*)>
c00128e9:	5a                   	pop    edx
c00128ea:	59                   	pop    ecx
c00128eb:	6a 01                	push   0x1
c00128ed:	ff 33                	push   DWORD PTR [ebx]
c00128ef:	e8 da 8f ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c00128f4:	5e                   	pop    esi
c00128f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128f9:	e8 b8 51 ff ff       	call   c0007ab6 <malloc>
c00128fe:	5a                   	pop    edx
c00128ff:	89 c7                	mov    edi,eax
c0012901:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012905:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012907:	8b 10                	mov    edx,DWORD PTR [eax]
c0012909:	56                   	push   esi
c001290a:	57                   	push   edi
c001290b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001290f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012913:	50                   	push   eax
c0012914:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012917:	83 c4 14             	add    esp,0x14
c001291a:	ff 33                	push   DWORD PTR [ebx]
c001291c:	e8 0b 90 ff ff       	call   c000b92c <File::close()>
c0012921:	59                   	pop    ecx
c0012922:	58                   	pop    eax
c0012923:	6a 13                	push   0x13
c0012925:	ff 33                	push   DWORD PTR [ebx]
c0012927:	e8 a2 8f ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c001292c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001292e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012930:	89 34 24             	mov    DWORD PTR [esp],esi
c0012933:	57                   	push   edi
c0012934:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012938:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001293c:	50                   	push   eax
c001293d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012940:	83 c4 14             	add    esp,0x14
c0012943:	57                   	push   edi
c0012944:	e8 7d 51 ff ff       	call   c0007ac6 <free>
c0012949:	83 c4 10             	add    esp,0x10
c001294c:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001294f:	75 10                	jne    c0012961 <CmOpen(char const*)+0xbc>
c0012951:	83 ec 0c             	sub    esp,0xc
c0012954:	68 f9 20 02 c0       	push   0xc00220f9
c0012959:	e8 f3 e9 ff ff       	call   c0011351 <KePanic(char const*)>
c001295e:	83 c4 10             	add    esp,0x10
c0012961:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012964:	50                   	push   eax
c0012965:	6a 00                	push   0x0
c0012967:	6a 00                	push   0x0
c0012969:	ff 33                	push   DWORD PTR [ebx]
c001296b:	e8 1c 90 ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0012970:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012972:	8b 10                	mov    edx,DWORD PTR [eax]
c0012974:	89 34 24             	mov    DWORD PTR [esp],esi
c0012977:	57                   	push   edi
c0012978:	6a 00                	push   0x0
c001297a:	6a 2b                	push   0x2b
c001297c:	50                   	push   eax
c001297d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012980:	83 c4 1c             	add    esp,0x1c
c0012983:	6a 00                	push   0x0
c0012985:	6a 00                	push   0x0
c0012987:	ff 33                	push   DWORD PTR [ebx]
c0012989:	e8 fe 8f ff ff       	call   c000b98c <File::seek(unsigned long long)>
c001298e:	83 c4 0c             	add    esp,0xc
c0012991:	6a 08                	push   0x8
c0012993:	68 0a 21 02 c0       	push   0xc002210a
c0012998:	57                   	push   edi
c0012999:	e8 e2 d9 fe ff       	call   c0000380 <memcmp>
c001299e:	83 c4 10             	add    esp,0x10
c00129a1:	85 c0                	test   eax,eax
c00129a3:	74 10                	je     c00129b5 <CmOpen(char const*)+0x110>
c00129a5:	83 ec 0c             	sub    esp,0xc
c00129a8:	68 13 21 02 c0       	push   0xc0022113
c00129ad:	e8 9f e9 ff ff       	call   c0011351 <KePanic(char const*)>
c00129b2:	83 c4 10             	add    esp,0x10
c00129b5:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00129b9:	89 d8                	mov    eax,ebx
c00129bb:	83 c4 10             	add    esp,0x10
c00129be:	5b                   	pop    ebx
c00129bf:	5e                   	pop    esi
c00129c0:	5f                   	pop    edi
c00129c1:	c3                   	ret    

c00129c2 <CmClose(Reghive_Tag*)>:
c00129c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129c6:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00129ca:	74 0b                	je     c00129d7 <CmClose(Reghive_Tag*)+0x15>
c00129cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00129ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00129d2:	e9 55 8f ff ff       	jmp    c000b92c <File::close()>
c00129d7:	c3                   	ret    

c00129d8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00129d8:	53                   	push   ebx
c00129d9:	83 ec 18             	sub    esp,0x18
c00129dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00129e0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00129e4:	74 29                	je     c0012a0f <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00129e6:	50                   	push   eax
c00129e7:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00129ec:	99                   	cdq    
c00129ed:	52                   	push   edx
c00129ee:	50                   	push   eax
c00129ef:	ff 33                	push   DWORD PTR [ebx]
c00129f1:	e8 96 8f ff ff       	call   c000b98c <File::seek(unsigned long long)>
c00129f6:	5a                   	pop    edx
c00129f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129f9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00129fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00129ff:	51                   	push   ecx
c0012a00:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012a04:	6a 00                	push   0x0
c0012a06:	6a 2b                	push   0x2b
c0012a08:	50                   	push   eax
c0012a09:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012a0c:	83 c4 20             	add    esp,0x20
c0012a0f:	83 c4 18             	add    esp,0x18
c0012a12:	5b                   	pop    ebx
c0012a13:	c3                   	ret    

c0012a14 <CmGetString(Reghive_Tag*, int, char*)>:
c0012a14:	55                   	push   ebp
c0012a15:	57                   	push   edi
c0012a16:	56                   	push   esi
c0012a17:	53                   	push   ebx
c0012a18:	31 db                	xor    ebx,ebx
c0012a1a:	83 ec 70             	sub    esp,0x70
c0012a1d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012a24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012a28:	50                   	push   eax
c0012a29:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012a30:	55                   	push   ebp
c0012a31:	e8 a2 ff ff ff       	call   c00129d8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a36:	83 c4 10             	add    esp,0x10
c0012a39:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012a3e:	c1 e0 08             	shl    eax,0x8
c0012a41:	89 c2                	mov    edx,eax
c0012a43:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012a48:	09 d0                	or     eax,edx
c0012a4a:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012a4f:	c1 e0 08             	shl    eax,0x8
c0012a52:	09 d0                	or     eax,edx
c0012a54:	74 25                	je     c0012a7b <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012a56:	6b fb 0d             	imul   edi,ebx,0xd
c0012a59:	52                   	push   edx
c0012a5a:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012a5e:	52                   	push   edx
c0012a5f:	50                   	push   eax
c0012a60:	55                   	push   ebp
c0012a61:	e8 72 ff ff ff       	call   c00129d8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a66:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012a6a:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012a71:	b9 27 00 00 00       	mov    ecx,0x27
c0012a76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a78:	83 c4 10             	add    esp,0x10
c0012a7b:	83 c3 03             	add    ebx,0x3
c0012a7e:	83 fb 15             	cmp    ebx,0x15
c0012a81:	75 b6                	jne    c0012a39 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012a83:	83 c4 6c             	add    esp,0x6c
c0012a86:	5b                   	pop    ebx
c0012a87:	5e                   	pop    esi
c0012a88:	5f                   	pop    edi
c0012a89:	5d                   	pop    ebp
c0012a8a:	c3                   	ret    

c0012a8b <CmEnterDirectory(Reghive_Tag*, int)>:
c0012a8b:	83 ec 40             	sub    esp,0x40
c0012a8e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012a92:	50                   	push   eax
c0012a93:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a9b:	e8 38 ff ff ff       	call   c00129d8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012aa0:	83 c4 10             	add    esp,0x10
c0012aa3:	83 c8 ff             	or     eax,0xffffffff
c0012aa6:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012aab:	75 19                	jne    c0012ac6 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012aad:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012ab2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012ab7:	c1 e0 08             	shl    eax,0x8
c0012aba:	09 c2                	or     edx,eax
c0012abc:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012ac1:	c1 e0 10             	shl    eax,0x10
c0012ac4:	09 d0                	or     eax,edx
c0012ac6:	83 c4 3c             	add    esp,0x3c
c0012ac9:	c3                   	ret    

c0012aca <CmGetNext(Reghive_Tag*, int)>:
c0012aca:	83 ec 40             	sub    esp,0x40
c0012acd:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ad1:	50                   	push   eax
c0012ad2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ad6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ada:	e8 f9 fe ff ff       	call   c00129d8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012adf:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012ae4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012ae9:	c1 e0 08             	shl    eax,0x8
c0012aec:	09 c2                	or     edx,eax
c0012aee:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012af3:	83 c4 4c             	add    esp,0x4c
c0012af6:	c1 e0 10             	shl    eax,0x10
c0012af9:	09 d0                	or     eax,edx
c0012afb:	c3                   	ret    

c0012afc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012afc:	53                   	push   ebx
c0012afd:	83 ec 18             	sub    esp,0x18
c0012b00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012b04:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012b08:	74 29                	je     c0012b33 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012b0a:	50                   	push   eax
c0012b0b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012b10:	99                   	cdq    
c0012b11:	52                   	push   edx
c0012b12:	50                   	push   eax
c0012b13:	ff 33                	push   DWORD PTR [ebx]
c0012b15:	e8 72 8e ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0012b1a:	5a                   	pop    edx
c0012b1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b1d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012b21:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b23:	51                   	push   ecx
c0012b24:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012b28:	6a 00                	push   0x0
c0012b2a:	6a 2b                	push   0x2b
c0012b2c:	50                   	push   eax
c0012b2d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012b30:	83 c4 20             	add    esp,0x20
c0012b33:	83 c4 18             	add    esp,0x18
c0012b36:	5b                   	pop    ebx
c0012b37:	c3                   	ret    

c0012b38 <CmFreeExtent(Reghive_Tag*, int)>:
c0012b38:	53                   	push   ebx
c0012b39:	83 ec 3c             	sub    esp,0x3c
c0012b3c:	6a 2b                	push   0x2b
c0012b3e:	6a 00                	push   0x0
c0012b40:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012b44:	53                   	push   ebx
c0012b45:	e8 a6 d9 fe ff       	call   c00004f0 <memset>
c0012b4a:	83 c4 0c             	add    esp,0xc
c0012b4d:	53                   	push   ebx
c0012b4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012b52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012b56:	e8 a1 ff ff ff       	call   c0012afc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b5b:	83 c4 48             	add    esp,0x48
c0012b5e:	5b                   	pop    ebx
c0012b5f:	c3                   	ret    

c0012b60 <CmUpdateHeader(Reghive_Tag*)>:
c0012b60:	83 ec 0c             	sub    esp,0xc
c0012b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b67:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012b6b:	74 10                	je     c0012b7d <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012b6d:	52                   	push   edx
c0012b6e:	8d 50 05             	lea    edx,[eax+0x5]
c0012b71:	52                   	push   edx
c0012b72:	6a 00                	push   0x0
c0012b74:	50                   	push   eax
c0012b75:	e8 82 ff ff ff       	call   c0012afc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b7a:	83 c4 10             	add    esp,0x10
c0012b7d:	83 c4 0c             	add    esp,0xc
c0012b80:	c3                   	ret    

c0012b81 <CmExpand(Reghive_Tag*, int)>:
c0012b81:	57                   	push   edi
c0012b82:	56                   	push   esi
c0012b83:	83 ce ff             	or     esi,0xffffffff
c0012b86:	53                   	push   ebx
c0012b87:	83 ec 30             	sub    esp,0x30
c0012b8a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012b8e:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012b92:	74 5f                	je     c0012bf3 <CmExpand(Reghive_Tag*, int)+0x72>
c0012b94:	31 d2                	xor    edx,edx
c0012b96:	31 f6                	xor    esi,esi
c0012b98:	50                   	push   eax
c0012b99:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012b9d:	52                   	push   edx
c0012b9e:	50                   	push   eax
c0012b9f:	ff 33                	push   DWORD PTR [ebx]
c0012ba1:	e8 e6 8d ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0012ba6:	83 c4 0c             	add    esp,0xc
c0012ba9:	6a 2b                	push   0x2b
c0012bab:	6a 00                	push   0x0
c0012bad:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012bb1:	57                   	push   edi
c0012bb2:	e8 39 d9 fe ff       	call   c00004f0 <memset>
c0012bb7:	83 c4 10             	add    esp,0x10
c0012bba:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012bbe:	7d 1b                	jge    c0012bdb <CmExpand(Reghive_Tag*, int)+0x5a>
c0012bc0:	83 ec 0c             	sub    esp,0xc
c0012bc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bc5:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012bc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bcb:	46                   	inc    esi
c0012bcc:	51                   	push   ecx
c0012bcd:	57                   	push   edi
c0012bce:	6a 00                	push   0x0
c0012bd0:	6a 2b                	push   0x2b
c0012bd2:	50                   	push   eax
c0012bd3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012bd6:	83 c4 20             	add    esp,0x20
c0012bd9:	eb df                	jmp    c0012bba <CmExpand(Reghive_Tag*, int)+0x39>
c0012bdb:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012bdf:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012be2:	83 ec 0c             	sub    esp,0xc
c0012be5:	01 f2                	add    edx,esi
c0012be7:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012bea:	53                   	push   ebx
c0012beb:	e8 70 ff ff ff       	call   c0012b60 <CmUpdateHeader(Reghive_Tag*)>
c0012bf0:	83 c4 10             	add    esp,0x10
c0012bf3:	83 c4 30             	add    esp,0x30
c0012bf6:	89 f0                	mov    eax,esi
c0012bf8:	5b                   	pop    ebx
c0012bf9:	5e                   	pop    esi
c0012bfa:	5f                   	pop    edi
c0012bfb:	c3                   	ret    

c0012bfc <CmFindUnusedExtent(Reghive_Tag*)>:
c0012bfc:	55                   	push   ebp
c0012bfd:	57                   	push   edi
c0012bfe:	56                   	push   esi
c0012bff:	53                   	push   ebx
c0012c00:	83 cb ff             	or     ebx,0xffffffff
c0012c03:	83 ec 1c             	sub    esp,0x1c
c0012c06:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012c0a:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012c0e:	74 68                	je     c0012c78 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012c10:	be 2b 00 00 00       	mov    esi,0x2b
c0012c15:	51                   	push   ecx
c0012c16:	31 ff                	xor    edi,edi
c0012c18:	6a 00                	push   0x0
c0012c1a:	31 db                	xor    ebx,ebx
c0012c1c:	6a 00                	push   0x0
c0012c1e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012c21:	e8 66 8d ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0012c26:	83 c4 10             	add    esp,0x10
c0012c29:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012c2c:	76 3b                	jbe    c0012c69 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012c2e:	83 ec 0c             	sub    esp,0xc
c0012c31:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c34:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012c38:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c3a:	51                   	push   ecx
c0012c3b:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012c3f:	51                   	push   ecx
c0012c40:	6a 00                	push   0x0
c0012c42:	6a 01                	push   0x1
c0012c44:	50                   	push   eax
c0012c45:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c48:	83 c4 20             	add    esp,0x20
c0012c4b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012c50:	74 26                	je     c0012c78 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012c52:	43                   	inc    ebx
c0012c53:	52                   	push   edx
c0012c54:	57                   	push   edi
c0012c55:	56                   	push   esi
c0012c56:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012c59:	e8 2e 8d ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0012c5e:	83 c6 2b             	add    esi,0x2b
c0012c61:	83 d7 00             	adc    edi,0x0
c0012c64:	83 c4 10             	add    esp,0x10
c0012c67:	eb c0                	jmp    c0012c29 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012c69:	50                   	push   eax
c0012c6a:	50                   	push   eax
c0012c6b:	6a 40                	push   0x40
c0012c6d:	55                   	push   ebp
c0012c6e:	e8 0e ff ff ff       	call   c0012b81 <CmExpand(Reghive_Tag*, int)>
c0012c73:	83 c4 10             	add    esp,0x10
c0012c76:	89 c3                	mov    ebx,eax
c0012c78:	83 c4 1c             	add    esp,0x1c
c0012c7b:	89 d8                	mov    eax,ebx
c0012c7d:	5b                   	pop    ebx
c0012c7e:	5e                   	pop    esi
c0012c7f:	5f                   	pop    edi
c0012c80:	5d                   	pop    ebp
c0012c81:	c3                   	ret    

c0012c82 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012c82:	55                   	push   ebp
c0012c83:	57                   	push   edi
c0012c84:	56                   	push   esi
c0012c85:	53                   	push   ebx
c0012c86:	81 ec 88 00 00 00    	sub    esp,0x88
c0012c8c:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012c93:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c9a:	e8 5d ff ff ff       	call   c0012bfc <CmFindUnusedExtent(Reghive_Tag*)>
c0012c9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ca3:	83 c4 0c             	add    esp,0xc
c0012ca6:	6a 2b                	push   0x2b
c0012ca8:	6a 00                	push   0x0
c0012caa:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012cae:	55                   	push   ebp
c0012caf:	e8 3c d8 fe ff       	call   c00004f0 <memset>
c0012cb4:	83 c4 10             	add    esp,0x10
c0012cb7:	85 db                	test   ebx,ebx
c0012cb9:	74 12                	je     c0012ccd <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012cbb:	51                   	push   ecx
c0012cbc:	55                   	push   ebp
c0012cbd:	53                   	push   ebx
c0012cbe:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cc5:	e8 0e fd ff ff       	call   c00129d8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012cca:	83 c4 10             	add    esp,0x10
c0012ccd:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012cd1:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012cd8:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012cdd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012cdf:	85 db                	test   ebx,ebx
c0012ce1:	74 49                	je     c0012d2c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012ce3:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012ce8:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012ced:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012cf1:	c1 e0 08             	shl    eax,0x8
c0012cf4:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012cfa:	09 c8                	or     eax,ecx
c0012cfc:	74 11                	je     c0012d0f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012cfe:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012d02:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012d06:	c1 e8 10             	shr    eax,0x10
c0012d09:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012d0d:	eb 0f                	jmp    c0012d1e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012d0f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012d14:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012d19:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012d1e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012d22:	c1 ea 08             	shr    edx,0x8
c0012d25:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012d2a:	eb 0f                	jmp    c0012d3b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012d2c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012d31:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012d36:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012d3b:	52                   	push   edx
c0012d3c:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012d40:	50                   	push   eax
c0012d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d45:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d4c:	e8 ab fd ff ff       	call   c0012afc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d51:	83 c4 10             	add    esp,0x10
c0012d54:	85 db                	test   ebx,ebx
c0012d56:	74 12                	je     c0012d6a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012d58:	50                   	push   eax
c0012d59:	55                   	push   ebp
c0012d5a:	53                   	push   ebx
c0012d5b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d62:	e8 95 fd ff ff       	call   c0012afc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d67:	83 c4 10             	add    esp,0x10
c0012d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d6e:	83 c4 7c             	add    esp,0x7c
c0012d71:	5b                   	pop    ebx
c0012d72:	5e                   	pop    esi
c0012d73:	5f                   	pop    edi
c0012d74:	5d                   	pop    ebp
c0012d75:	c3                   	ret    

c0012d76 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012d76:	55                   	push   ebp
c0012d77:	57                   	push   edi
c0012d78:	56                   	push   esi
c0012d79:	53                   	push   ebx
c0012d7a:	bb 27 00 00 00       	mov    ebx,0x27
c0012d7f:	81 ec 88 00 00 00    	sub    esp,0x88
c0012d85:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012d8c:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012d93:	e8 d8 d7 fe ff       	call   c0000570 <strlen>
c0012d98:	8d 48 26             	lea    ecx,[eax+0x26]
c0012d9b:	89 c8                	mov    eax,ecx
c0012d9d:	99                   	cdq    
c0012d9e:	f7 fb                	idiv   ebx
c0012da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012da4:	83 c4 10             	add    esp,0x10
c0012da7:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012dad:	7e 10                	jle    c0012dbf <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012daf:	83 ec 0c             	sub    esp,0xc
c0012db2:	68 24 21 02 c0       	push   0xc0022124
c0012db7:	e8 95 e5 ff ff       	call   c0011351 <KePanic(char const*)>
c0012dbc:	83 c4 10             	add    esp,0x10
c0012dbf:	31 ff                	xor    edi,edi
c0012dc1:	50                   	push   eax
c0012dc2:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012dc6:	53                   	push   ebx
c0012dc7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012dce:	56                   	push   esi
c0012dcf:	e8 04 fc ff ff       	call   c00129d8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012dd4:	83 c4 10             	add    esp,0x10
c0012dd7:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012ddb:	89 d0                	mov    eax,edx
c0012ddd:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012de1:	c1 e0 08             	shl    eax,0x8
c0012de4:	09 c2                	or     edx,eax
c0012de6:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012dea:	c1 e2 08             	shl    edx,0x8
c0012ded:	09 c2                	or     edx,eax
c0012def:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012df3:	7e 76                	jle    c0012e6b <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012df5:	85 d2                	test   edx,edx
c0012df7:	75 25                	jne    c0012e1e <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012df9:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012dfe:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012e02:	50                   	push   eax
c0012e03:	6a 00                	push   0x0
c0012e05:	6a 00                	push   0x0
c0012e07:	56                   	push   esi
c0012e08:	e8 75 fe ff ff       	call   c0012c82 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012e0d:	83 c4 10             	add    esp,0x10
c0012e10:	89 c2                	mov    edx,eax
c0012e12:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012e15:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012e18:	c1 f8 10             	sar    eax,0x10
c0012e1b:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012e1e:	55                   	push   ebp
c0012e1f:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012e23:	55                   	push   ebp
c0012e24:	52                   	push   edx
c0012e25:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012e29:	56                   	push   esi
c0012e2a:	e8 a9 fb ff ff       	call   c00129d8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e2f:	83 c4 0c             	add    esp,0xc
c0012e32:	6a 27                	push   0x27
c0012e34:	6a 00                	push   0x0
c0012e36:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012e3a:	51                   	push   ecx
c0012e3b:	e8 b0 d6 fe ff       	call   c00004f0 <memset>
c0012e40:	83 c4 0c             	add    esp,0xc
c0012e43:	6b c7 27             	imul   eax,edi,0x27
c0012e46:	6a 27                	push   0x27
c0012e48:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012e4f:	50                   	push   eax
c0012e50:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012e54:	51                   	push   ecx
c0012e55:	e8 26 d8 fe ff       	call   c0000680 <strncpy>
c0012e5a:	83 c4 0c             	add    esp,0xc
c0012e5d:	55                   	push   ebp
c0012e5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012e62:	52                   	push   edx
c0012e63:	56                   	push   esi
c0012e64:	e8 93 fc ff ff       	call   c0012afc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e69:	eb 19                	jmp    c0012e84 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012e6b:	85 d2                	test   edx,edx
c0012e6d:	74 18                	je     c0012e87 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012e6f:	51                   	push   ecx
c0012e70:	51                   	push   ecx
c0012e71:	52                   	push   edx
c0012e72:	56                   	push   esi
c0012e73:	e8 c0 fc ff ff       	call   c0012b38 <CmFreeExtent(Reghive_Tag*, int)>
c0012e78:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012e7c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012e80:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012e84:	83 c4 10             	add    esp,0x10
c0012e87:	47                   	inc    edi
c0012e88:	83 c3 03             	add    ebx,0x3
c0012e8b:	83 ff 07             	cmp    edi,0x7
c0012e8e:	0f 85 43 ff ff ff    	jne    c0012dd7 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012e94:	50                   	push   eax
c0012e95:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012e99:	50                   	push   eax
c0012e9a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ea1:	56                   	push   esi
c0012ea2:	e8 55 fc ff ff       	call   c0012afc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ea7:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012ead:	5b                   	pop    ebx
c0012eae:	5e                   	pop    esi
c0012eaf:	5f                   	pop    edi
c0012eb0:	5d                   	pop    ebp
c0012eb1:	c3                   	ret    

c0012eb2 <CmGetMatch(char*, char*, bool, bool*)>:
c0012eb2:	56                   	push   esi
c0012eb3:	53                   	push   ebx
c0012eb4:	50                   	push   eax
c0012eb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012eb9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012ebe:	74 25                	je     c0012ee5 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012ec0:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012ec3:	31 db                	xor    ebx,ebx
c0012ec5:	50                   	push   eax
c0012ec6:	50                   	push   eax
c0012ec7:	8d 04 9d c0 35 02 c0 	lea    eax,[ebx*4-0x3ffdca40]
c0012ece:	50                   	push   eax
c0012ecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ed3:	e8 78 d8 fe ff       	call   c0000750 <strcmp>
c0012ed8:	83 c4 10             	add    esp,0x10
c0012edb:	85 c0                	test   eax,eax
c0012edd:	74 2e                	je     c0012f0d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012edf:	43                   	inc    ebx
c0012ee0:	83 fb 3f             	cmp    ebx,0x3f
c0012ee3:	75 e0                	jne    c0012ec5 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012ee5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ee8:	31 db                	xor    ebx,ebx
c0012eea:	8d 04 9d c0 35 02 c0 	lea    eax,[ebx*4-0x3ffdca40]
c0012ef1:	51                   	push   ecx
c0012ef2:	51                   	push   ecx
c0012ef3:	50                   	push   eax
c0012ef4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ef8:	e8 53 d8 fe ff       	call   c0000750 <strcmp>
c0012efd:	83 c4 10             	add    esp,0x10
c0012f00:	85 c0                	test   eax,eax
c0012f02:	74 09                	je     c0012f0d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012f04:	43                   	inc    ebx
c0012f05:	83 fb 3f             	cmp    ebx,0x3f
c0012f08:	75 e0                	jne    c0012eea <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012f0a:	83 cb ff             	or     ebx,0xffffffff
c0012f0d:	89 d8                	mov    eax,ebx
c0012f0f:	5a                   	pop    edx
c0012f10:	5b                   	pop    ebx
c0012f11:	5e                   	pop    esi
c0012f12:	c3                   	ret    

c0012f13 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012f13:	55                   	push   ebp
c0012f14:	31 c0                	xor    eax,eax
c0012f16:	57                   	push   edi
c0012f17:	56                   	push   esi
c0012f18:	53                   	push   ebx
c0012f19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f1d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f21:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012f23:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012f27:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012f2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f2e:	83 fd 1f             	cmp    ebp,0x1f
c0012f31:	7f 0b                	jg     c0012f3e <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012f33:	0f b6 c2             	movzx  eax,dl
c0012f36:	d3 e0                	shl    eax,cl
c0012f38:	09 07                	or     DWORD PTR [edi],eax
c0012f3a:	b0 01                	mov    al,0x1
c0012f3c:	01 33                	add    DWORD PTR [ebx],esi
c0012f3e:	5b                   	pop    ebx
c0012f3f:	5e                   	pop    esi
c0012f40:	5f                   	pop    edi
c0012f41:	5d                   	pop    ebp
c0012f42:	c3                   	ret    

c0012f43 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012f43:	57                   	push   edi
c0012f44:	56                   	push   esi
c0012f45:	53                   	push   ebx
c0012f46:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f4a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012f4e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012f52:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f56:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012f58:	7c 17                	jl     c0012f71 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012f5a:	8b 17                	mov    edx,DWORD PTR [edi]
c0012f5c:	b8 01 00 00 00       	mov    eax,0x1
c0012f61:	d3 e0                	shl    eax,cl
c0012f63:	48                   	dec    eax
c0012f64:	21 d0                	and    eax,edx
c0012f66:	d3 ea                	shr    edx,cl
c0012f68:	89 17                	mov    DWORD PTR [edi],edx
c0012f6a:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012f6c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012f6f:	eb 05                	jmp    c0012f76 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012f71:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f74:	31 c0                	xor    eax,eax
c0012f76:	5b                   	pop    ebx
c0012f77:	5e                   	pop    esi
c0012f78:	5f                   	pop    edi
c0012f79:	c3                   	ret    

c0012f7a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012f7a:	83 ec 40             	sub    esp,0x40
c0012f7d:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f81:	50                   	push   eax
c0012f82:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f86:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f8a:	e8 49 fa ff ff       	call   c00129d8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f8f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012f93:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012f97:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012f9b:	89 10                	mov    DWORD PTR [eax],edx
c0012f9d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012fa0:	83 c4 4c             	add    esp,0x4c
c0012fa3:	c3                   	ret    

c0012fa4 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012fa4:	55                   	push   ebp
c0012fa5:	57                   	push   edi
c0012fa6:	56                   	push   esi
c0012fa7:	53                   	push   ebx
c0012fa8:	83 ec 40             	sub    esp,0x40
c0012fab:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012faf:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012fb3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012fb7:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012fbb:	53                   	push   ebx
c0012fbc:	56                   	push   esi
c0012fbd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012fc1:	e8 12 fa ff ff       	call   c00129d8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012fc6:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012fca:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012fce:	83 c4 0c             	add    esp,0xc
c0012fd1:	53                   	push   ebx
c0012fd2:	56                   	push   esi
c0012fd3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012fd7:	e8 20 fb ff ff       	call   c0012afc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012fdc:	83 c4 4c             	add    esp,0x4c
c0012fdf:	5b                   	pop    ebx
c0012fe0:	5e                   	pop    esi
c0012fe1:	5f                   	pop    edi
c0012fe2:	5d                   	pop    ebp
c0012fe3:	c3                   	ret    

c0012fe4 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012fe4:	55                   	push   ebp
c0012fe5:	57                   	push   edi
c0012fe6:	56                   	push   esi
c0012fe7:	31 f6                	xor    esi,esi
c0012fe9:	53                   	push   ebx
c0012fea:	31 db                	xor    ebx,ebx
c0012fec:	83 ec 40             	sub    esp,0x40
c0012fef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012ff7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012fff:	6a 12                	push   0x12
c0013001:	68 ee 00 00 00       	push   0xee
c0013006:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001300a:	e8 e1 d4 fe ff       	call   c00004f0 <memset>
c001300f:	83 c4 10             	add    esp,0x10
c0013012:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013016:	6a 08                	push   0x8
c0013018:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001301c:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013020:	50                   	push   eax
c0013021:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013025:	55                   	push   ebp
c0013026:	57                   	push   edi
c0013027:	e8 e7 fe ff ff       	call   c0012f13 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013033:	50                   	push   eax
c0013034:	6a 06                	push   0x6
c0013036:	55                   	push   ebp
c0013037:	57                   	push   edi
c0013038:	e8 06 ff ff ff       	call   c0012f43 <CmGetShift(unsigned int*, int*, int, bool*)>
c001303d:	83 c4 10             	add    esp,0x10
c0013040:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013045:	74 07                	je     c001304e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013047:	46                   	inc    esi
c0013048:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001304c:	eb e1                	jmp    c001302f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001304e:	43                   	inc    ebx
c001304f:	83 fb 12             	cmp    ebx,0x12
c0013052:	75 c2                	jne    c0013016 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013054:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013058:	31 db                	xor    ebx,ebx
c001305a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001305d:	50                   	push   eax
c001305e:	50                   	push   eax
c001305f:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0013064:	43                   	inc    ebx
c0013065:	8d 04 85 c0 35 02 c0 	lea    eax,[eax*4-0x3ffdca40]
c001306c:	50                   	push   eax
c001306d:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013071:	e8 ca d7 fe ff       	call   c0000840 <strcat>
c0013076:	83 c4 10             	add    esp,0x10
c0013079:	83 fb 18             	cmp    ebx,0x18
c001307c:	75 df                	jne    c001305d <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001307e:	83 c4 3c             	add    esp,0x3c
c0013081:	31 c0                	xor    eax,eax
c0013083:	5b                   	pop    ebx
c0013084:	5e                   	pop    esi
c0013085:	5f                   	pop    edi
c0013086:	5d                   	pop    ebp
c0013087:	c3                   	ret    

c0013088 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013088:	83 ec 40             	sub    esp,0x40
c001308b:	8d 44 24 09          	lea    eax,[esp+0x9]
c001308f:	50                   	push   eax
c0013090:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013094:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013098:	e8 3b f9 ff ff       	call   c00129d8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001309d:	58                   	pop    eax
c001309e:	5a                   	pop    edx
c001309f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00130a3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00130a7:	50                   	push   eax
c00130a8:	e8 37 ff ff ff       	call   c0012fe4 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00130ad:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00130b2:	83 c4 4c             	add    esp,0x4c
c00130b5:	c3                   	ret    

c00130b6 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00130b6:	55                   	push   ebp
c00130b7:	57                   	push   edi
c00130b8:	56                   	push   esi
c00130b9:	53                   	push   ebx
c00130ba:	31 db                	xor    ebx,ebx
c00130bc:	83 ec 70             	sub    esp,0x70
c00130bf:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00130c6:	6a 30                	push   0x30
c00130c8:	6a 00                	push   0x0
c00130ca:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00130ce:	56                   	push   esi
c00130cf:	e8 1c d4 fe ff       	call   c00004f0 <memset>
c00130d4:	83 c4 10             	add    esp,0x10
c00130d7:	83 ec 0c             	sub    esp,0xc
c00130da:	57                   	push   edi
c00130db:	e8 90 d4 fe ff       	call   c0000570 <strlen>
c00130e0:	83 c4 10             	add    esp,0x10
c00130e3:	39 d8                	cmp    eax,ebx
c00130e5:	76 16                	jbe    c00130fd <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00130e7:	83 ec 0c             	sub    esp,0xc
c00130ea:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00130ee:	50                   	push   eax
c00130ef:	e8 3c d8 fe ff       	call   c0000930 <toupper>
c00130f4:	83 c4 10             	add    esp,0x10
c00130f7:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00130fa:	43                   	inc    ebx
c00130fb:	eb da                	jmp    c00130d7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00130fd:	31 f6                	xor    esi,esi
c00130ff:	52                   	push   edx
c0013100:	31 ff                	xor    edi,edi
c0013102:	6a 18                	push   0x18
c0013104:	6a 3f                	push   0x3f
c0013106:	8d 44 24 24          	lea    eax,[esp+0x24]
c001310a:	50                   	push   eax
c001310b:	e8 e0 d3 fe ff       	call   c00004f0 <memset>
c0013110:	83 c4 10             	add    esp,0x10
c0013113:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0013117:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c001311b:	84 c0                	test   al,al
c001311d:	0f 84 b0 00 00 00    	je     c00131d3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013123:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013127:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c001312c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013130:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0013135:	8d 6e 01             	lea    ebp,[esi+0x1]
c0013138:	83 ec 0c             	sub    esp,0xc
c001313b:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c001313f:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013143:	53                   	push   ebx
c0013144:	e8 27 d4 fe ff       	call   c0000570 <strlen>
c0013149:	83 c4 10             	add    esp,0x10
c001314c:	85 c0                	test   eax,eax
c001314e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013152:	74 0b                	je     c001315f <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013154:	50                   	push   eax
c0013155:	6a 01                	push   0x1
c0013157:	53                   	push   ebx
c0013158:	8d 44 24 20          	lea    eax,[esp+0x20]
c001315c:	50                   	push   eax
c001315d:	eb 0a                	jmp    c0013169 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001315f:	50                   	push   eax
c0013160:	6a 00                	push   0x0
c0013162:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013166:	50                   	push   eax
c0013167:	6a 00                	push   0x0
c0013169:	e8 44 fd ff ff       	call   c0012eb2 <CmGetMatch(char*, char*, bool, bool*)>
c001316e:	83 c4 10             	add    esp,0x10
c0013171:	83 f8 ff             	cmp    eax,0xffffffff
c0013174:	75 1a                	jne    c0013190 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013176:	83 ec 0c             	sub    esp,0xc
c0013179:	68 39 21 02 c0       	push   0xc0022139
c001317e:	e8 ce e1 ff ff       	call   c0011351 <KePanic(char const*)>
c0013183:	83 c4 10             	add    esp,0x10
c0013186:	b8 02 00 00 00       	mov    eax,0x2
c001318b:	e9 bc 00 00 00       	jmp    c001324c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013190:	83 ff 18             	cmp    edi,0x18
c0013193:	75 1a                	jne    c00131af <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013195:	83 ec 0c             	sub    esp,0xc
c0013198:	68 4e 21 02 c0       	push   0xc002214e
c001319d:	e8 af e1 ff ff       	call   c0011351 <KePanic(char const*)>
c00131a2:	83 c4 10             	add    esp,0x10
c00131a5:	b8 01 00 00 00       	mov    eax,0x1
c00131aa:	e9 9d 00 00 00       	jmp    c001324c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00131af:	47                   	inc    edi
c00131b0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00131b5:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00131b9:	74 02                	je     c00131bd <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00131bb:	89 ee                	mov    esi,ebp
c00131bd:	83 ec 0c             	sub    esp,0xc
c00131c0:	53                   	push   ebx
c00131c1:	e8 aa d3 fe ff       	call   c0000570 <strlen>
c00131c6:	83 c4 10             	add    esp,0x10
c00131c9:	85 c0                	test   eax,eax
c00131cb:	74 06                	je     c00131d3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00131cd:	46                   	inc    esi
c00131ce:	e9 40 ff ff ff       	jmp    c0013113 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00131d3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00131db:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00131e3:	31 f6                	xor    esi,esi
c00131e5:	50                   	push   eax
c00131e6:	31 ff                	xor    edi,edi
c00131e8:	6a 12                	push   0x12
c00131ea:	68 ee 00 00 00       	push   0xee
c00131ef:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00131f6:	e8 f5 d2 fe ff       	call   c00004f0 <memset>
c00131fb:	83 c4 10             	add    esp,0x10
c00131fe:	83 fe 17             	cmp    esi,0x17
c0013201:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013205:	7e 26                	jle    c001322d <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013207:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001320b:	50                   	push   eax
c001320c:	6a 08                	push   0x8
c001320e:	55                   	push   ebp
c001320f:	53                   	push   ebx
c0013210:	e8 2e fd ff ff       	call   c0012f43 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013215:	83 c4 10             	add    esp,0x10
c0013218:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001321d:	74 26                	je     c0013245 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c001321f:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013226:	4e                   	dec    esi
c0013227:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001322a:	47                   	inc    edi
c001322b:	eb 1c                	jmp    c0013249 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001322d:	6a 06                	push   0x6
c001322f:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0013234:	50                   	push   eax
c0013235:	55                   	push   ebp
c0013236:	53                   	push   ebx
c0013237:	e8 d7 fc ff ff       	call   c0012f13 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001323c:	83 c4 10             	add    esp,0x10
c001323f:	84 c0                	test   al,al
c0013241:	75 06                	jne    c0013249 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013243:	eb c2                	jmp    c0013207 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0013245:	31 c0                	xor    eax,eax
c0013247:	eb 03                	jmp    c001324c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013249:	46                   	inc    esi
c001324a:	eb b2                	jmp    c00131fe <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c001324c:	83 c4 6c             	add    esp,0x6c
c001324f:	5b                   	pop    ebx
c0013250:	5e                   	pop    esi
c0013251:	5f                   	pop    edi
c0013252:	5d                   	pop    ebp
c0013253:	c3                   	ret    

c0013254 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013254:	53                   	push   ebx
c0013255:	83 ec 3c             	sub    esp,0x3c
c0013258:	6a 2b                	push   0x2b
c001325a:	6a 00                	push   0x0
c001325c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013260:	53                   	push   ebx
c0013261:	e8 8a d2 fe ff       	call   c00004f0 <memset>
c0013266:	58                   	pop    eax
c0013267:	5a                   	pop    edx
c0013268:	8d 44 24 11          	lea    eax,[esp+0x11]
c001326c:	50                   	push   eax
c001326d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013271:	e8 40 fe ff ff       	call   c00130b6 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013276:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001327b:	83 c4 0c             	add    esp,0xc
c001327e:	6a 15                	push   0x15
c0013280:	6a 00                	push   0x0
c0013282:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013286:	50                   	push   eax
c0013287:	e8 64 d2 fe ff       	call   c00004f0 <memset>
c001328c:	53                   	push   ebx
c001328d:	6a 00                	push   0x0
c001328f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013293:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013297:	e8 e6 f9 ff ff       	call   c0012c82 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001329c:	83 c4 58             	add    esp,0x58
c001329f:	5b                   	pop    ebx
c00132a0:	c3                   	ret    

c00132a1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00132a1:	56                   	push   esi
c00132a2:	53                   	push   ebx
c00132a3:	83 ec 48             	sub    esp,0x48
c00132a6:	6a 12                	push   0x12
c00132a8:	68 ff 00 00 00       	push   0xff
c00132ad:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00132b1:	56                   	push   esi
c00132b2:	e8 39 d2 fe ff       	call   c00004f0 <memset>
c00132b7:	5a                   	pop    edx
c00132b8:	59                   	pop    ecx
c00132b9:	56                   	push   esi
c00132ba:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00132be:	e8 f3 fd ff ff       	call   c00130b6 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00132c3:	83 c4 10             	add    esp,0x10
c00132c6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00132ca:	85 db                	test   ebx,ebx
c00132cc:	74 42                	je     c0013310 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00132ce:	50                   	push   eax
c00132cf:	8d 44 24 19          	lea    eax,[esp+0x19]
c00132d3:	50                   	push   eax
c00132d4:	53                   	push   ebx
c00132d5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132d9:	e8 fa f6 ff ff       	call   c00129d8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132de:	83 c4 0c             	add    esp,0xc
c00132e1:	6a 12                	push   0x12
c00132e3:	8d 44 24 21          	lea    eax,[esp+0x21]
c00132e7:	50                   	push   eax
c00132e8:	56                   	push   esi
c00132e9:	e8 92 d0 fe ff       	call   c0000380 <memcmp>
c00132ee:	83 c4 10             	add    esp,0x10
c00132f1:	85 c0                	test   eax,eax
c00132f3:	74 1e                	je     c0013313 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00132f5:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00132fa:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00132ff:	c1 e3 08             	shl    ebx,0x8
c0013302:	09 d8                	or     eax,ebx
c0013304:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013309:	c1 e3 10             	shl    ebx,0x10
c001330c:	09 c3                	or     ebx,eax
c001330e:	eb ba                	jmp    c00132ca <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013310:	83 cb ff             	or     ebx,0xffffffff
c0013313:	89 d8                	mov    eax,ebx
c0013315:	83 c4 44             	add    esp,0x44
c0013318:	5b                   	pop    ebx
c0013319:	5e                   	pop    esi
c001331a:	c3                   	ret    

c001331b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001331b:	57                   	push   edi
c001331c:	56                   	push   esi
c001331d:	53                   	push   ebx
c001331e:	83 ec 34             	sub    esp,0x34
c0013321:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013325:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013329:	6a 2b                	push   0x2b
c001332b:	6a 00                	push   0x0
c001332d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013331:	53                   	push   ebx
c0013332:	e8 b9 d1 fe ff       	call   c00004f0 <memset>
c0013337:	58                   	pop    eax
c0013338:	5a                   	pop    edx
c0013339:	8d 44 24 11          	lea    eax,[esp+0x11]
c001333d:	50                   	push   eax
c001333e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013342:	e8 6f fd ff ff       	call   c00130b6 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013347:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001334b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001334f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013353:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013357:	53                   	push   ebx
c0013358:	6a 00                	push   0x0
c001335a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001335e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013362:	e8 1b f9 ff ff       	call   c0012c82 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013367:	83 c4 50             	add    esp,0x50
c001336a:	5b                   	pop    ebx
c001336b:	5e                   	pop    esi
c001336c:	5f                   	pop    edi
c001336d:	c3                   	ret    

c001336e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001336e:	55                   	push   ebp
c001336f:	57                   	push   edi
c0013370:	56                   	push   esi
c0013371:	53                   	push   ebx
c0013372:	83 ec 40             	sub    esp,0x40
c0013375:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013379:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001337d:	6a 2b                	push   0x2b
c001337f:	6a 00                	push   0x0
c0013381:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013385:	56                   	push   esi
c0013386:	e8 65 d1 fe ff       	call   c00004f0 <memset>
c001338b:	5f                   	pop    edi
c001338c:	89 ef                	mov    edi,ebp
c001338e:	58                   	pop    eax
c001338f:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013393:	50                   	push   eax
c0013394:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013398:	e8 19 fd ff ff       	call   c00130b6 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001339d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00133a2:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00133a7:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00133ac:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00133b1:	83 c4 10             	add    esp,0x10
c00133b4:	85 ed                	test   ebp,ebp
c00133b6:	74 14                	je     c00133cc <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00133b8:	51                   	push   ecx
c00133b9:	51                   	push   ecx
c00133ba:	57                   	push   edi
c00133bb:	53                   	push   ebx
c00133bc:	e8 09 f7 ff ff       	call   c0012aca <CmGetNext(Reghive_Tag*, int)>
c00133c1:	83 c4 10             	add    esp,0x10
c00133c4:	85 c0                	test   eax,eax
c00133c6:	74 04                	je     c00133cc <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00133c8:	89 c7                	mov    edi,eax
c00133ca:	eb e8                	jmp    c00133b4 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00133cc:	56                   	push   esi
c00133cd:	6a 00                	push   0x0
c00133cf:	57                   	push   edi
c00133d0:	53                   	push   ebx
c00133d1:	e8 ac f8 ff ff       	call   c0012c82 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00133d6:	83 c4 0c             	add    esp,0xc
c00133d9:	89 c7                	mov    edi,eax
c00133db:	56                   	push   esi
c00133dc:	50                   	push   eax
c00133dd:	53                   	push   ebx
c00133de:	e8 f5 f5 ff ff       	call   c00129d8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133e3:	58                   	pop    eax
c00133e4:	5a                   	pop    edx
c00133e5:	6a 6c                	push   0x6c
c00133e7:	6a 00                	push   0x0
c00133e9:	6a 00                	push   0x0
c00133eb:	68 5f 21 02 c0       	push   0xc002215f
c00133f0:	57                   	push   edi
c00133f1:	53                   	push   ebx
c00133f2:	e8 24 ff ff ff       	call   c001331b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00133f7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00133fb:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00133ff:	c1 e8 10             	shr    eax,0x10
c0013402:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013406:	83 c4 1c             	add    esp,0x1c
c0013409:	56                   	push   esi
c001340a:	57                   	push   edi
c001340b:	53                   	push   ebx
c001340c:	e8 eb f6 ff ff       	call   c0012afc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013411:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013416:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001341b:	c1 e0 08             	shl    eax,0x8
c001341e:	09 c2                	or     edx,eax
c0013420:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013425:	83 c4 4c             	add    esp,0x4c
c0013428:	c1 e0 10             	shl    eax,0x10
c001342b:	5b                   	pop    ebx
c001342c:	09 d0                	or     eax,edx
c001342e:	5e                   	pop    esi
c001342f:	5f                   	pop    edi
c0013430:	5d                   	pop    ebp
c0013431:	c3                   	ret    

c0013432 <zStrtok(char*, char const*)>:
c0013432:	55                   	push   ebp
c0013433:	57                   	push   edi
c0013434:	56                   	push   esi
c0013435:	53                   	push   ebx
c0013436:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001343a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001343e:	85 db                	test   ebx,ebx
c0013440:	74 2f                	je     c0013471 <zStrtok(char*, char const*)+0x3f>
c0013442:	85 c0                	test   eax,eax
c0013444:	75 09                	jne    c001344f <zStrtok(char*, char const*)+0x1d>
c0013446:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c001344b:	85 c0                	test   eax,eax
c001344d:	74 50                	je     c001349f <zStrtok(char*, char const*)+0x6d>
c001344f:	31 c9                	xor    ecx,ecx
c0013451:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013455:	74 03                	je     c001345a <zStrtok(char*, char const*)+0x28>
c0013457:	41                   	inc    ecx
c0013458:	eb f7                	jmp    c0013451 <zStrtok(char*, char const*)+0x1f>
c001345a:	31 d2                	xor    edx,edx
c001345c:	39 ca                	cmp    edx,ecx
c001345e:	74 15                	je     c0013475 <zStrtok(char*, char const*)+0x43>
c0013460:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013464:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013467:	8d 3c 10             	lea    edi,[eax+edx*1]
c001346a:	39 ee                	cmp    esi,ebp
c001346c:	74 13                	je     c0013481 <zStrtok(char*, char const*)+0x4f>
c001346e:	42                   	inc    edx
c001346f:	eb eb                	jmp    c001345c <zStrtok(char*, char const*)+0x2a>
c0013471:	31 c0                	xor    eax,eax
c0013473:	eb 2a                	jmp    c001349f <zStrtok(char*, char const*)+0x6d>
c0013475:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c001347f:	eb 1e                	jmp    c001349f <zStrtok(char*, char const*)+0x6d>
c0013481:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013484:	39 ce                	cmp    esi,ecx
c0013486:	75 0a                	jne    c0013492 <zStrtok(char*, char const*)+0x60>
c0013488:	40                   	inc    eax
c0013489:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c001348e:	89 d8                	mov    eax,ebx
c0013490:	eb 0d                	jmp    c001349f <zStrtok(char*, char const*)+0x6d>
c0013492:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013496:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013499:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c001349f:	5b                   	pop    ebx
c00134a0:	5e                   	pop    esi
c00134a1:	5f                   	pop    edi
c00134a2:	5d                   	pop    ebp
c00134a3:	c3                   	ret    

c00134a4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00134a4:	57                   	push   edi
c00134a5:	56                   	push   esi
c00134a6:	53                   	push   ebx
c00134a7:	81 ec 08 01 00 00    	sub    esp,0x108
c00134ad:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00134b4:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00134bb:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00134bf:	53                   	push   ebx
c00134c0:	e8 7b d1 fe ff       	call   c0000640 <strcpy>
c00134c5:	59                   	pop    ecx
c00134c6:	5e                   	pop    esi
c00134c7:	68 c3 24 02 c0       	push   0xc00224c3
c00134cc:	53                   	push   ebx
c00134cd:	bb 01 00 00 00       	mov    ebx,0x1
c00134d2:	e8 5b ff ff ff       	call   c0013432 <zStrtok(char*, char const*)>
c00134d7:	83 c4 10             	add    esp,0x10
c00134da:	85 c0                	test   eax,eax
c00134dc:	74 3b                	je     c0013519 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00134de:	52                   	push   edx
c00134df:	50                   	push   eax
c00134e0:	6a 01                	push   0x1
c00134e2:	57                   	push   edi
c00134e3:	e8 b9 fd ff ff       	call   c00132a1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00134e8:	59                   	pop    ecx
c00134e9:	89 c3                	mov    ebx,eax
c00134eb:	5e                   	pop    esi
c00134ec:	68 c3 24 02 c0       	push   0xc00224c3
c00134f1:	6a 00                	push   0x0
c00134f3:	e8 3a ff ff ff       	call   c0013432 <zStrtok(char*, char const*)>
c00134f8:	83 c4 10             	add    esp,0x10
c00134fb:	89 c6                	mov    esi,eax
c00134fd:	85 c0                	test   eax,eax
c00134ff:	74 18                	je     c0013519 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013501:	52                   	push   edx
c0013502:	52                   	push   edx
c0013503:	53                   	push   ebx
c0013504:	57                   	push   edi
c0013505:	e8 81 f5 ff ff       	call   c0012a8b <CmEnterDirectory(Reghive_Tag*, int)>
c001350a:	83 c4 10             	add    esp,0x10
c001350d:	89 c3                	mov    ebx,eax
c001350f:	83 f8 ff             	cmp    eax,0xffffffff
c0013512:	74 05                	je     c0013519 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013514:	50                   	push   eax
c0013515:	56                   	push   esi
c0013516:	53                   	push   ebx
c0013517:	eb c9                	jmp    c00134e2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013519:	81 c4 00 01 00 00    	add    esp,0x100
c001351f:	89 d8                	mov    eax,ebx
c0013521:	5b                   	pop    ebx
c0013522:	5e                   	pop    esi
c0013523:	5f                   	pop    edi
c0013524:	c3                   	ret    

c0013525 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013525:	55                   	push   ebp
c0013526:	57                   	push   edi
c0013527:	56                   	push   esi
c0013528:	53                   	push   ebx
c0013529:	83 ec 5c             	sub    esp,0x5c
c001352c:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013530:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013534:	85 db                	test   ebx,ebx
c0013536:	0f 8e 84 00 00 00    	jle    c00135c0 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001353c:	31 ed                	xor    ebp,ebp
c001353e:	57                   	push   edi
c001353f:	6a 32                	push   0x32
c0013541:	6a 00                	push   0x0
c0013543:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013547:	57                   	push   edi
c0013548:	e8 a3 cf fe ff       	call   c00004f0 <memset>
c001354d:	83 c4 0c             	add    esp,0xc
c0013550:	57                   	push   edi
c0013551:	53                   	push   ebx
c0013552:	56                   	push   esi
c0013553:	e8 30 fb ff ff       	call   c0013088 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013558:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001355c:	83 c4 10             	add    esp,0x10
c001355f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013563:	7d 13                	jge    c0013578 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013565:	83 ec 0c             	sub    esp,0xc
c0013568:	45                   	inc    ebp
c0013569:	68 67 28 02 c0       	push   0xc0022867
c001356e:	e8 d2 73 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013573:	83 c4 10             	add    esp,0x10
c0013576:	eb e7                	jmp    c001355f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013578:	51                   	push   ecx
c0013579:	57                   	push   edi
c001357a:	53                   	push   ebx
c001357b:	68 65 21 02 c0       	push   0xc0022165
c0013580:	e8 c0 73 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013585:	83 c4 10             	add    esp,0x10
c0013588:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001358d:	75 1e                	jne    c00135ad <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001358f:	52                   	push   edx
c0013590:	52                   	push   edx
c0013591:	53                   	push   ebx
c0013592:	56                   	push   esi
c0013593:	e8 f3 f4 ff ff       	call   c0012a8b <CmEnterDirectory(Reghive_Tag*, int)>
c0013598:	83 c4 0c             	add    esp,0xc
c001359b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001359f:	8d 51 04             	lea    edx,[ecx+0x4]
c00135a2:	52                   	push   edx
c00135a3:	50                   	push   eax
c00135a4:	56                   	push   esi
c00135a5:	e8 7b ff ff ff       	call   c0013525 <CmDisplayTree(Reghive_Tag*, int, int)>
c00135aa:	83 c4 10             	add    esp,0x10
c00135ad:	50                   	push   eax
c00135ae:	50                   	push   eax
c00135af:	53                   	push   ebx
c00135b0:	56                   	push   esi
c00135b1:	e8 14 f5 ff ff       	call   c0012aca <CmGetNext(Reghive_Tag*, int)>
c00135b6:	83 c4 10             	add    esp,0x10
c00135b9:	89 c3                	mov    ebx,eax
c00135bb:	e9 74 ff ff ff       	jmp    c0013534 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00135c0:	83 c4 5c             	add    esp,0x5c
c00135c3:	5b                   	pop    ebx
c00135c4:	5e                   	pop    esi
c00135c5:	5f                   	pop    edi
c00135c6:	5d                   	pop    ebp
c00135c7:	c3                   	ret    

c00135c8 <CmSplitFinalSlashInPlace(char*)>:
c00135c8:	53                   	push   ebx
c00135c9:	83 ec 14             	sub    esp,0x14
c00135cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00135d0:	53                   	push   ebx
c00135d1:	e8 9a cf fe ff       	call   c0000570 <strlen>
c00135d6:	83 c4 10             	add    esp,0x10
c00135d9:	48                   	dec    eax
c00135da:	85 c0                	test   eax,eax
c00135dc:	74 15                	je     c00135f3 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00135de:	8d 14 03             	lea    edx,[ebx+eax*1]
c00135e1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00135e5:	75 09                	jne    c00135f0 <CmSplitFinalSlashInPlace(char*)+0x28>
c00135e7:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00135ea:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00135ee:	eb 05                	jmp    c00135f5 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00135f0:	48                   	dec    eax
c00135f1:	eb e7                	jmp    c00135da <CmSplitFinalSlashInPlace(char*)+0x12>
c00135f3:	31 c0                	xor    eax,eax
c00135f5:	83 c4 08             	add    esp,0x8
c00135f8:	5b                   	pop    ebx
c00135f9:	c3                   	ret    

c00135fa <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00135fa:	55                   	push   ebp
c00135fb:	57                   	push   edi
c00135fc:	56                   	push   esi
c00135fd:	53                   	push   ebx
c00135fe:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013604:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c001360b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001360d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013610:	80 fa 40             	cmp    dl,0x40
c0013613:	75 1c                	jne    c0013631 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013615:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013618:	85 c9                	test   ecx,ecx
c001361a:	0f 84 09 01 00 00    	je     c0013729 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013620:	8d 43 01             	lea    eax,[ebx+0x1]
c0013623:	83 f9 3a             	cmp    ecx,0x3a
c0013626:	74 04                	je     c001362c <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013628:	89 c3                	mov    ebx,eax
c001362a:	eb e9                	jmp    c0013615 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001362c:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001362f:	89 c3                	mov    ebx,eax
c0013631:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013635:	50                   	push   eax
c0013636:	6a 40                	push   0x40
c0013638:	6a 00                	push   0x0
c001363a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001363e:	50                   	push   eax
c001363f:	e8 ac ce fe ff       	call   c00004f0 <memset>
c0013644:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001364b:	31 c0                	xor    eax,eax
c001364d:	83 c4 10             	add    esp,0x10
c0013650:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013655:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013658:	89 d1                	mov    ecx,edx
c001365a:	85 d2                	test   edx,edx
c001365c:	0f 84 c7 00 00 00    	je     c0013729 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013662:	3d c7 00 00 00       	cmp    eax,0xc7
c0013667:	0f 8f bc 00 00 00    	jg     c0013729 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001366d:	83 fa 0a             	cmp    edx,0xa
c0013670:	0f 85 a4 00 00 00    	jne    c001371a <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013676:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001367b:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013680:	89 c8                	mov    eax,ecx
c0013682:	a8 df                	test   al,0xdf
c0013684:	0f 94 c2             	sete   dl
c0013687:	83 f9 23             	cmp    ecx,0x23
c001368a:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001368f:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013693:	80 e2 01             	and    dl,0x1
c0013696:	75 4a                	jne    c00136e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013698:	83 e8 09             	sub    eax,0x9
c001369b:	3c 01                	cmp    al,0x1
c001369d:	76 43                	jbe    c00136e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001369f:	83 f9 5b             	cmp    ecx,0x5b
c00136a2:	75 42                	jne    c00136e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c00136a4:	83 fe 40             	cmp    esi,0x40
c00136a7:	75 39                	jne    c00136e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00136a9:	83 ec 0c             	sub    esp,0xc
c00136ac:	8d 54 24 65          	lea    edx,[esp+0x65]
c00136b0:	52                   	push   edx
c00136b1:	e8 ba ce fe ff       	call   c0000570 <strlen>
c00136b6:	83 c4 10             	add    esp,0x10
c00136b9:	83 f8 3f             	cmp    eax,0x3f
c00136bc:	77 6b                	ja     c0013729 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00136be:	50                   	push   eax
c00136bf:	50                   	push   eax
c00136c0:	8d 54 24 61          	lea    edx,[esp+0x61]
c00136c4:	52                   	push   edx
c00136c5:	8d 54 24 24          	lea    edx,[esp+0x24]
c00136c9:	52                   	push   edx
c00136ca:	e8 71 cf fe ff       	call   c0000640 <strcpy>
c00136cf:	58                   	pop    eax
c00136d0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00136d4:	52                   	push   edx
c00136d5:	e8 96 ce fe ff       	call   c0000570 <strlen>
c00136da:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00136df:	83 c4 10             	add    esp,0x10
c00136e2:	31 d2                	xor    edx,edx
c00136e4:	eb 3b                	jmp    c0013721 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c00136e6:	83 fe 40             	cmp    esi,0x40
c00136e9:	74 06                	je     c00136f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c00136eb:	8d 44 24 58          	lea    eax,[esp+0x58]
c00136ef:	eb 20                	jmp    c0013711 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c00136f1:	50                   	push   eax
c00136f2:	50                   	push   eax
c00136f3:	55                   	push   ebp
c00136f4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00136f8:	50                   	push   eax
c00136f9:	e8 52 d0 fe ff       	call   c0000750 <strcmp>
c00136fe:	83 c4 10             	add    esp,0x10
c0013701:	85 c0                	test   eax,eax
c0013703:	75 dd                	jne    c00136e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013705:	eb e4                	jmp    c00136eb <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013707:	8d 50 01             	lea    edx,[eax+0x1]
c001370a:	83 f9 3d             	cmp    ecx,0x3d
c001370d:	74 1e                	je     c001372d <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c001370f:	89 d0                	mov    eax,edx
c0013711:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013714:	85 c9                	test   ecx,ecx
c0013716:	75 ef                	jne    c0013707 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013718:	eb 0f                	jmp    c0013729 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001371a:	8d 50 01             	lea    edx,[eax+0x1]
c001371d:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013721:	47                   	inc    edi
c0013722:	89 d0                	mov    eax,edx
c0013724:	e9 2c ff ff ff       	jmp    c0013655 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013729:	31 c0                	xor    eax,eax
c001372b:	eb 33                	jmp    c0013760 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c001372d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013731:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013734:	50                   	push   eax
c0013735:	50                   	push   eax
c0013736:	8d 44 24 60          	lea    eax,[esp+0x60]
c001373a:	50                   	push   eax
c001373b:	53                   	push   ebx
c001373c:	e8 0f d0 fe ff       	call   c0000750 <strcmp>
c0013741:	83 c4 10             	add    esp,0x10
c0013744:	85 c0                	test   eax,eax
c0013746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001374a:	75 96                	jne    c00136e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001374c:	51                   	push   ecx
c001374d:	51                   	push   ecx
c001374e:	52                   	push   edx
c001374f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013756:	e8 e5 ce fe ff       	call   c0000640 <strcpy>
c001375b:	83 c4 10             	add    esp,0x10
c001375e:	b0 01                	mov    al,0x1
c0013760:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013766:	5b                   	pop    ebx
c0013767:	5e                   	pop    esi
c0013768:	5f                   	pop    edi
c0013769:	5d                   	pop    ebp
c001376a:	c3                   	ret    

c001376b <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001376b:	57                   	push   edi
c001376c:	56                   	push   esi
c001376d:	53                   	push   ebx
c001376e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013774:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001377b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013782:	53                   	push   ebx
c0013783:	e8 e8 cd fe ff       	call   c0000570 <strlen>
c0013788:	89 34 24             	mov    DWORD PTR [esp],esi
c001378b:	89 c7                	mov    edi,eax
c001378d:	e8 de cd fe ff       	call   c0000570 <strlen>
c0013792:	83 c4 10             	add    esp,0x10
c0013795:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013799:	3d ff 00 00 00       	cmp    eax,0xff
c001379e:	0f 87 d2 00 00 00    	ja     c0013876 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10b>
c00137a4:	57                   	push   edi
c00137a5:	57                   	push   edi
c00137a6:	56                   	push   esi
c00137a7:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00137ab:	56                   	push   esi
c00137ac:	e8 8f ce fe ff       	call   c0000640 <strcpy>
c00137b1:	58                   	pop    eax
c00137b2:	5a                   	pop    edx
c00137b3:	68 c3 24 02 c0       	push   0xc00224c3
c00137b8:	56                   	push   esi
c00137b9:	e8 82 d0 fe ff       	call   c0000840 <strcat>
c00137be:	59                   	pop    ecx
c00137bf:	5f                   	pop    edi
c00137c0:	53                   	push   ebx
c00137c1:	56                   	push   esi
c00137c2:	e8 79 d0 fe ff       	call   c0000840 <strcat>
c00137c7:	58                   	pop    eax
c00137c8:	5a                   	pop    edx
c00137c9:	68 6f 21 02 c0       	push   0xc002216f
c00137ce:	56                   	push   esi
c00137cf:	e8 6c d0 fe ff       	call   c0000840 <strcat>
c00137d4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00137db:	e8 d6 42 ff ff       	call   c0007ab6 <malloc>
c00137e0:	6a 01                	push   0x1
c00137e2:	89 c3                	mov    ebx,eax
c00137e4:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00137ea:	56                   	push   esi
c00137eb:	50                   	push   eax
c00137ec:	e8 ff 7f ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c00137f1:	83 c4 20             	add    esp,0x20
c00137f4:	85 db                	test   ebx,ebx
c00137f6:	74 7e                	je     c0013876 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10b>
c00137f8:	51                   	push   ecx
c00137f9:	51                   	push   ecx
c00137fa:	6a 01                	push   0x1
c00137fc:	53                   	push   ebx
c00137fd:	e8 cc 80 ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c0013802:	83 c4 10             	add    esp,0x10
c0013805:	85 c0                	test   eax,eax
c0013807:	74 08                	je     c0013811 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa6>
c0013809:	83 ec 0c             	sub    esp,0xc
c001380c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001380e:	53                   	push   ebx
c001380f:	eb 5f                	jmp    c0013870 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x105>
c0013811:	52                   	push   edx
c0013812:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013816:	50                   	push   eax
c0013817:	8d 44 24 20          	lea    eax,[esp+0x20]
c001381b:	50                   	push   eax
c001381c:	53                   	push   ebx
c001381d:	e8 ae 83 ff ff       	call   c000bbd0 <File::stat(unsigned long long*, bool*)>
c0013822:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013826:	83 c4 10             	add    esp,0x10
c0013829:	89 c1                	mov    ecx,eax
c001382b:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001382f:	74 31                	je     c0013862 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf7>
c0013831:	83 ec 0c             	sub    esp,0xc
c0013834:	50                   	push   eax
c0013835:	e8 7c 42 ff ff       	call   c0007ab6 <malloc>
c001383a:	89 c6                	mov    esi,eax
c001383c:	58                   	pop    eax
c001383d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001383f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013843:	52                   	push   edx
c0013844:	56                   	push   esi
c0013845:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013849:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001384d:	53                   	push   ebx
c001384e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013851:	83 c4 20             	add    esp,0x20
c0013854:	85 c0                	test   eax,eax
c0013856:	75 0a                	jne    c0013862 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf7>
c0013858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001385c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013860:	74 18                	je     c001387a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10f>
c0013862:	83 ec 0c             	sub    esp,0xc
c0013865:	53                   	push   ebx
c0013866:	e8 c1 80 ff ff       	call   c000b92c <File::close()>
c001386b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001386d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013870:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013873:	83 c4 10             	add    esp,0x10
c0013876:	31 c0                	xor    eax,eax
c0013878:	eb 3b                	jmp    c00138b5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14a>
c001387a:	83 ec 0c             	sub    esp,0xc
c001387d:	53                   	push   ebx
c001387e:	e8 a9 80 ff ff       	call   c000b92c <File::close()>
c0013883:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013885:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013888:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001388b:	83 c4 0c             	add    esp,0xc
c001388e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013895:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001389c:	56                   	push   esi
c001389d:	e8 58 fd ff ff       	call   c00135fa <Reg::findLineFromLoadedData(char*, char*, char*)>
c00138a2:	89 34 24             	mov    DWORD PTR [esp],esi
c00138a5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00138a9:	e8 18 42 ff ff       	call   c0007ac6 <free>
c00138ae:	83 c4 10             	add    esp,0x10
c00138b1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00138b5:	81 c4 20 01 00 00    	add    esp,0x120
c00138bb:	5b                   	pop    ebx
c00138bc:	5e                   	pop    esi
c00138bd:	5f                   	pop    edi
c00138be:	c3                   	ret    

c00138bf <Reg::getLine(char*, char*, char*)>:
c00138bf:	57                   	push   edi
c00138c0:	56                   	push   esi
c00138c1:	53                   	push   ebx
c00138c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138ca:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00138ce:	57                   	push   edi
c00138cf:	56                   	push   esi
c00138d0:	53                   	push   ebx
c00138d1:	68 74 21 02 c0       	push   0xc0022174
c00138d6:	e8 90 fe ff ff       	call   c001376b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00138db:	83 c4 10             	add    esp,0x10
c00138de:	84 c0                	test   al,al
c00138e0:	75 10                	jne    c00138f2 <Reg::getLine(char*, char*, char*)+0x33>
c00138e2:	57                   	push   edi
c00138e3:	56                   	push   esi
c00138e4:	53                   	push   ebx
c00138e5:	68 99 21 02 c0       	push   0xc0022199
c00138ea:	e8 7c fe ff ff       	call   c001376b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00138ef:	83 c4 10             	add    esp,0x10
c00138f2:	5b                   	pop    ebx
c00138f3:	5e                   	pop    esi
c00138f4:	5f                   	pop    edi
c00138f5:	c3                   	ret    

c00138f6 <Reg::readInt(char*, char*, int*)>:
c00138f6:	55                   	push   ebp
c00138f7:	57                   	push   edi
c00138f8:	56                   	push   esi
c00138f9:	53                   	push   ebx
c00138fa:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013900:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013904:	55                   	push   ebp
c0013905:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001390c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013913:	e8 a7 ff ff ff       	call   c00138bf <Reg::getLine(char*, char*, char*)>
c0013918:	83 c4 10             	add    esp,0x10
c001391b:	84 c0                	test   al,al
c001391d:	0f 84 b6 00 00 00    	je     c00139d9 <Reg::readInt(char*, char*, int*)+0xe3>
c0013923:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013928:	83 fa 2b             	cmp    edx,0x2b
c001392b:	74 0c                	je     c0013939 <Reg::readInt(char*, char*, int*)+0x43>
c001392d:	83 fa 2d             	cmp    edx,0x2d
c0013930:	75 0e                	jne    c0013940 <Reg::readInt(char*, char*, int*)+0x4a>
c0013932:	ba 01 00 00 00       	mov    edx,0x1
c0013937:	eb 0b                	jmp    c0013944 <Reg::readInt(char*, char*, int*)+0x4e>
c0013939:	ba 01 00 00 00       	mov    edx,0x1
c001393e:	eb 02                	jmp    c0013942 <Reg::readInt(char*, char*, int*)+0x4c>
c0013940:	31 d2                	xor    edx,edx
c0013942:	31 c0                	xor    eax,eax
c0013944:	be 0a 00 00 00       	mov    esi,0xa
c0013949:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001394e:	75 21                	jne    c0013971 <Reg::readInt(char*, char*, int*)+0x7b>
c0013950:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013955:	83 f9 78             	cmp    ecx,0x78
c0013958:	75 0a                	jne    c0013964 <Reg::readInt(char*, char*, int*)+0x6e>
c001395a:	83 c2 02             	add    edx,0x2
c001395d:	be 10 00 00 00       	mov    esi,0x10
c0013962:	eb 0d                	jmp    c0013971 <Reg::readInt(char*, char*, int*)+0x7b>
c0013964:	83 f9 62             	cmp    ecx,0x62
c0013967:	75 08                	jne    c0013971 <Reg::readInt(char*, char*, int*)+0x7b>
c0013969:	83 c2 02             	add    edx,0x2
c001396c:	be 02 00 00 00       	mov    esi,0x2
c0013971:	01 d5                	add    ebp,edx
c0013973:	31 d2                	xor    edx,edx
c0013975:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013979:	83 f9 0d             	cmp    ecx,0xd
c001397c:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013980:	0f 94 c3             	sete   bl
c0013983:	85 c9                	test   ecx,ecx
c0013985:	89 df                	mov    edi,ebx
c0013987:	0f 94 c3             	sete   bl
c001398a:	09 df                	or     edi,ebx
c001398c:	89 fb                	mov    ebx,edi
c001398e:	83 e7 01             	and    edi,0x1
c0013991:	75 35                	jne    c00139c8 <Reg::readInt(char*, char*, int*)+0xd2>
c0013993:	0f af d6             	imul   edx,esi
c0013996:	83 fe 10             	cmp    esi,0x10
c0013999:	75 26                	jne    c00139c1 <Reg::readInt(char*, char*, int*)+0xcb>
c001399b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001399f:	83 ef 41             	sub    edi,0x41
c00139a2:	89 fb                	mov    ebx,edi
c00139a4:	80 fb 05             	cmp    bl,0x5
c00139a7:	77 06                	ja     c00139af <Reg::readInt(char*, char*, int*)+0xb9>
c00139a9:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c00139ad:	eb 16                	jmp    c00139c5 <Reg::readInt(char*, char*, int*)+0xcf>
c00139af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00139b3:	83 eb 61             	sub    ebx,0x61
c00139b6:	80 fb 05             	cmp    bl,0x5
c00139b9:	77 06                	ja     c00139c1 <Reg::readInt(char*, char*, int*)+0xcb>
c00139bb:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00139bf:	eb 04                	jmp    c00139c5 <Reg::readInt(char*, char*, int*)+0xcf>
c00139c1:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00139c5:	45                   	inc    ebp
c00139c6:	eb ad                	jmp    c0013975 <Reg::readInt(char*, char*, int*)+0x7f>
c00139c8:	84 c0                	test   al,al
c00139ca:	74 02                	je     c00139ce <Reg::readInt(char*, char*, int*)+0xd8>
c00139cc:	f7 da                	neg    edx
c00139ce:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00139d5:	89 10                	mov    DWORD PTR [eax],edx
c00139d7:	88 d8                	mov    al,bl
c00139d9:	81 c4 ec 00 00 00    	add    esp,0xec
c00139df:	5b                   	pop    ebx
c00139e0:	5e                   	pop    esi
c00139e1:	5f                   	pop    edi
c00139e2:	5d                   	pop    ebp
c00139e3:	c3                   	ret    

c00139e4 <Reg::readString(char*, char*, char*, int)>:
c00139e4:	57                   	push   edi
c00139e5:	56                   	push   esi
c00139e6:	53                   	push   ebx
c00139e7:	81 ec d4 00 00 00    	sub    esp,0xd4
c00139ed:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00139f4:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00139f8:	57                   	push   edi
c00139f9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013a00:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013a07:	e8 b3 fe ff ff       	call   c00138bf <Reg::getLine(char*, char*, char*)>
c0013a0c:	83 c4 10             	add    esp,0x10
c0013a0f:	89 c6                	mov    esi,eax
c0013a11:	84 c0                	test   al,al
c0013a13:	74 44                	je     c0013a59 <Reg::readString(char*, char*, char*, int)+0x75>
c0013a15:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013a1c:	31 c0                	xor    eax,eax
c0013a1e:	4a                   	dec    edx
c0013a1f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013a22:	84 c9                	test   cl,cl
c0013a24:	74 0f                	je     c0013a35 <Reg::readString(char*, char*, char*, int)+0x51>
c0013a26:	39 c2                	cmp    edx,eax
c0013a28:	7e 0b                	jle    c0013a35 <Reg::readString(char*, char*, char*, int)+0x51>
c0013a2a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013a2d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013a32:	40                   	inc    eax
c0013a33:	eb ea                	jmp    c0013a1f <Reg::readString(char*, char*, char*, int)+0x3b>
c0013a35:	83 ec 0c             	sub    esp,0xc
c0013a38:	53                   	push   ebx
c0013a39:	e8 32 cb fe ff       	call   c0000570 <strlen>
c0013a3e:	83 c4 10             	add    esp,0x10
c0013a41:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013a46:	75 11                	jne    c0013a59 <Reg::readString(char*, char*, char*, int)+0x75>
c0013a48:	83 ec 0c             	sub    esp,0xc
c0013a4b:	53                   	push   ebx
c0013a4c:	e8 1f cb fe ff       	call   c0000570 <strlen>
c0013a51:	83 c4 10             	add    esp,0x10
c0013a54:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013a59:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013a5f:	89 f0                	mov    eax,esi
c0013a61:	5b                   	pop    ebx
c0013a62:	5e                   	pop    esi
c0013a63:	5f                   	pop    edi
c0013a64:	c3                   	ret    

c0013a65 <Reg::readBool(char*, char*, bool*)>:
c0013a65:	83 ec 20             	sub    esp,0x20
c0013a68:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013a6c:	50                   	push   eax
c0013a6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a75:	e8 7c fe ff ff       	call   c00138f6 <Reg::readInt(char*, char*, int*)>
c0013a7a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013a7f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013a83:	0f 95 02             	setne  BYTE PTR [edx]
c0013a86:	83 c4 2c             	add    esp,0x2c
c0013a89:	c3                   	ret    

c0013a8a <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013a8a:	53                   	push   ebx
c0013a8b:	83 ec 1c             	sub    esp,0x1c
c0013a8e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013a92:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013a96:	50                   	push   eax
c0013a97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a9f:	e8 c1 ff ff ff       	call   c0013a65 <Reg::readBool(char*, char*, bool*)>
c0013aa4:	83 c4 10             	add    esp,0x10
c0013aa7:	84 c0                	test   al,al
c0013aa9:	74 04                	je     c0013aaf <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013aab:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013aaf:	88 d8                	mov    al,bl
c0013ab1:	83 c4 18             	add    esp,0x18
c0013ab4:	5b                   	pop    ebx
c0013ab5:	c3                   	ret    

c0013ab6 <Reg::readIntWithDefault(char*, char*, int)>:
c0013ab6:	53                   	push   ebx
c0013ab7:	83 ec 1c             	sub    esp,0x1c
c0013aba:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013abe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ac2:	50                   	push   eax
c0013ac3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ac7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013acb:	e8 26 fe ff ff       	call   c00138f6 <Reg::readInt(char*, char*, int*)>
c0013ad0:	83 c4 10             	add    esp,0x10
c0013ad3:	84 c0                	test   al,al
c0013ad5:	74 04                	je     c0013adb <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013ad7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013adb:	89 d8                	mov    eax,ebx
c0013add:	83 c4 18             	add    esp,0x18
c0013ae0:	5b                   	pop    ebx
c0013ae1:	c3                   	ret    

c0013ae2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013ae2:	57                   	push   edi
c0013ae3:	56                   	push   esi
c0013ae4:	56                   	push   esi
c0013ae5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ae9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013aed:	56                   	push   esi
c0013aee:	57                   	push   edi
c0013aef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af7:	e8 e8 fe ff ff       	call   c00139e4 <Reg::readString(char*, char*, char*, int)>
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	84 c0                	test   al,al
c0013b01:	75 1a                	jne    c0013b1d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013b03:	51                   	push   ecx
c0013b04:	56                   	push   esi
c0013b05:	6a 00                	push   0x0
c0013b07:	57                   	push   edi
c0013b08:	e8 e3 c9 fe ff       	call   c00004f0 <memset>
c0013b0d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013b10:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b16:	83 c4 10             	add    esp,0x10
c0013b19:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013b1d:	89 f8                	mov    eax,edi
c0013b1f:	5a                   	pop    edx
c0013b20:	5e                   	pop    esi
c0013b21:	5f                   	pop    edi
c0013b22:	c3                   	ret    

c0013b23 <SysEject(regs*)>:
c0013b23:	83 ec 0c             	sub    esp,0xc
c0013b26:	83 ca ff             	or     edx,0xffffffff
c0013b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b2d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013b30:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013b35:	83 e9 41             	sub    ecx,0x41
c0013b38:	83 f9 19             	cmp    ecx,0x19
c0013b3b:	77 18                	ja     c0013b55 <SysEject(regs*)+0x32>
c0013b3d:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013b44:	85 c9                	test   ecx,ecx
c0013b46:	74 0d                	je     c0013b55 <SysEject(regs*)+0x32>
c0013b48:	83 ec 0c             	sub    esp,0xc
c0013b4b:	51                   	push   ecx
c0013b4c:	e8 4d 9f ff ff       	call   c000da9e <LogicalDisk::eject()>
c0013b51:	83 c4 10             	add    esp,0x10
c0013b54:	99                   	cdq    
c0013b55:	83 c4 0c             	add    esp,0xc
c0013b58:	c3                   	ret    

c0013b59 <SysExit(regs*)>:
c0013b59:	83 ec 18             	sub    esp,0x18
c0013b5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b60:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b63:	e8 44 2b 00 00       	call   c00166ac <terminateTask(int)>
c0013b68:	83 c8 ff             	or     eax,0xffffffff
c0013b6b:	83 c4 1c             	add    esp,0x1c
c0013b6e:	89 c2                	mov    edx,eax
c0013b70:	c3                   	ret    

c0013b71 <SysGetCwd(regs*)>:
c0013b71:	83 ec 10             	sub    esp,0x10
c0013b74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b78:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013b7b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b83:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b86:	e8 07 7a ff ff       	call   c000b592 <Fs::getcwd(Process*, char*, int)>
c0013b8b:	83 c4 1c             	add    esp,0x1c
c0013b8e:	99                   	cdq    
c0013b8f:	c3                   	ret    

c0013b90 <SysGetPID(regs*)>:
c0013b90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b9a:	99                   	cdq    
c0013b9b:	c3                   	ret    

c0013b9c <SysGetRAMData(regs*)>:
c0013b9c:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013ba2:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013bac:	99                   	cdq    
c0013bad:	f7 f9                	idiv   ecx
c0013baf:	c1 e0 18             	shl    eax,0x18
c0013bb2:	09 c8                	or     eax,ecx
c0013bb4:	99                   	cdq    
c0013bb5:	c3                   	ret    

c0013bb6 <SysGetVGAPtr(regs*)>:
c0013bb6:	55                   	push   ebp
c0013bb7:	57                   	push   edi
c0013bb8:	56                   	push   esi
c0013bb9:	53                   	push   ebx
c0013bba:	83 ec 18             	sub    esp,0x18
c0013bbd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013bc1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013bc4:	e8 af 25 00 00       	call   c0016178 <Thr::processFromPID(int)>
c0013bc9:	83 c4 10             	add    esp,0x10
c0013bcc:	89 c1                	mov    ecx,eax
c0013bce:	b8 01 00 00 00       	mov    eax,0x1
c0013bd3:	85 c9                	test   ecx,ecx
c0013bd5:	74 57                	je     c0013c2e <SysGetVGAPtr(regs*)+0x78>
c0013bd7:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013bdd:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013be1:	74 0c                	je     c0013bef <SysGetVGAPtr(regs*)+0x39>
c0013be3:	83 ec 0c             	sub    esp,0xc
c0013be6:	55                   	push   ebp
c0013be7:	e8 6d 4b ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013bec:	83 c4 10             	add    esp,0x10
c0013bef:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013bf2:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013bf5:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013bfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013bfc:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013bff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c02:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013c08:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c0b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013c0e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013c14:	50                   	push   eax
c0013c15:	50                   	push   eax
c0013c16:	68 b4 21 02 c0       	push   0xc00221b4
c0013c1b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c1e:	05 a8 0f 00 00       	add    eax,0xfa8
c0013c23:	50                   	push   eax
c0013c24:	e8 17 ca fe ff       	call   c0000640 <strcpy>
c0013c29:	83 c4 10             	add    esp,0x10
c0013c2c:	31 c0                	xor    eax,eax
c0013c2e:	83 c4 0c             	add    esp,0xc
c0013c31:	31 d2                	xor    edx,edx
c0013c33:	5b                   	pop    ebx
c0013c34:	5e                   	pop    esi
c0013c35:	5f                   	pop    edi
c0013c36:	5d                   	pop    ebp
c0013c37:	c3                   	ret    

c0013c38 <SysKill(regs*)>:
c0013c38:	53                   	push   ebx
c0013c39:	83 ec 08             	sub    esp,0x8
c0013c3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c40:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013c44:	75 16                	jne    c0013c5c <SysKill(regs*)+0x24>
c0013c46:	83 ec 0c             	sub    esp,0xc
c0013c49:	68 be 21 02 c0       	push   0xc00221be
c0013c4e:	e8 fe d6 ff ff       	call   c0011351 <KePanic(char const*)>
c0013c53:	83 c4 10             	add    esp,0x10
c0013c56:	e9 89 00 00 00       	jmp    c0013ce4 <SysKill(regs*)+0xac>
c0013c5b:	90                   	nop
c0013c5c:	83 ec 0c             	sub    esp,0xc
c0013c5f:	68 e4 96 02 c0       	push   0xc00296e4
c0013c64:	e8 03 bd 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c69:	8d 76 00             	lea    esi,[esi+0x0]
c0013c6c:	83 c4 10             	add    esp,0x10
c0013c6f:	85 c0                	test   eax,eax
c0013c71:	74 19                	je     c0013c8c <SysKill(regs*)+0x54>
c0013c73:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013c76:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013c79:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013c7b:	74 33                	je     c0013cb0 <SysKill(regs*)+0x78>
c0013c7d:	52                   	push   edx
c0013c7e:	52                   	push   edx
c0013c7f:	50                   	push   eax
c0013c80:	68 e4 96 02 c0       	push   0xc00296e4
c0013c85:	e8 02 c0 00 00       	call   c001fc8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c8a:	eb e0                	jmp    c0013c6c <SysKill(regs*)+0x34>
c0013c8c:	83 ec 0c             	sub    esp,0xc
c0013c8f:	68 d8 96 02 c0       	push   0xc00296d8
c0013c94:	e8 d3 bc 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c99:	8d 76 00             	lea    esi,[esi+0x0]
c0013c9c:	83 c4 10             	add    esp,0x10
c0013c9f:	85 c0                	test   eax,eax
c0013ca1:	74 41                	je     c0013ce4 <SysKill(regs*)+0xac>
c0013ca3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013ca6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013ca9:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013cab:	75 27                	jne    c0013cd4 <SysKill(regs*)+0x9c>
c0013cad:	8d 76 00             	lea    esi,[esi+0x0]
c0013cb0:	51                   	push   ecx
c0013cb1:	51                   	push   ecx
c0013cb2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013cbd:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013cc3:	e8 2a db ff ff       	call   c00117f2 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013cc8:	83 c4 10             	add    esp,0x10
c0013ccb:	31 c0                	xor    eax,eax
c0013ccd:	31 d2                	xor    edx,edx
c0013ccf:	eb 1b                	jmp    c0013cec <SysKill(regs*)+0xb4>
c0013cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013cd4:	52                   	push   edx
c0013cd5:	52                   	push   edx
c0013cd6:	50                   	push   eax
c0013cd7:	68 d8 96 02 c0       	push   0xc00296d8
c0013cdc:	e8 ab bf 00 00       	call   c001fc8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ce1:	eb b9                	jmp    c0013c9c <SysKill(regs*)+0x64>
c0013ce3:	90                   	nop
c0013ce4:	83 c8 ff             	or     eax,0xffffffff
c0013ce7:	89 c2                	mov    edx,eax
c0013ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0013cec:	83 c4 08             	add    esp,0x8
c0013cef:	5b                   	pop    ebx
c0013cf0:	c3                   	ret    

c0013cf1 <SysLoadDLL(regs*)>:
c0013cf1:	56                   	push   esi
c0013cf2:	53                   	push   ebx
c0013cf3:	31 d2                	xor    edx,edx
c0013cf5:	51                   	push   ecx
c0013cf6:	b8 01 00 00 00       	mov    eax,0x1
c0013cfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cff:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013d03:	0f 84 8b 00 00 00    	je     c0013d94 <SysLoadDLL(regs*)+0xa3>
c0013d09:	83 ec 0c             	sub    esp,0xc
c0013d0c:	68 14 01 00 00       	push   0x114
c0013d11:	e8 a0 3d ff ff       	call   c0007ab6 <malloc>
c0013d16:	6a 01                	push   0x1
c0013d18:	89 c3                	mov    ebx,eax
c0013d1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d1f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013d22:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013d25:	53                   	push   ebx
c0013d26:	e8 c5 7a ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c0013d2b:	83 c4 20             	add    esp,0x20
c0013d2e:	31 d2                	xor    edx,edx
c0013d30:	b8 02 00 00 00       	mov    eax,0x2
c0013d35:	85 db                	test   ebx,ebx
c0013d37:	74 5b                	je     c0013d94 <SysLoadDLL(regs*)+0xa3>
c0013d39:	83 ec 0c             	sub    esp,0xc
c0013d3c:	53                   	push   ebx
c0013d3d:	e8 50 7e ff ff       	call   c000bb92 <File::exists()>
c0013d42:	83 c4 10             	add    esp,0x10
c0013d45:	84 c0                	test   al,al
c0013d47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d49:	75 11                	jne    c0013d5c <SysLoadDLL(regs*)+0x6b>
c0013d4b:	83 ec 0c             	sub    esp,0xc
c0013d4e:	53                   	push   ebx
c0013d4f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d52:	83 c4 10             	add    esp,0x10
c0013d55:	b8 03 00 00 00       	mov    eax,0x3
c0013d5a:	eb 36                	jmp    c0013d92 <SysLoadDLL(regs*)+0xa1>
c0013d5c:	83 ec 0c             	sub    esp,0xc
c0013d5f:	53                   	push   ebx
c0013d60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d63:	58                   	pop    eax
c0013d64:	5a                   	pop    edx
c0013d65:	6a 00                	push   0x0
c0013d67:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013d6a:	e8 3d 15 00 00       	call   c00152ac <Thr::loadDLL(char const*, bool)>
c0013d6f:	83 c4 10             	add    esp,0x10
c0013d72:	89 c1                	mov    ecx,eax
c0013d74:	31 d2                	xor    edx,edx
c0013d76:	b8 04 00 00 00       	mov    eax,0x4
c0013d7b:	85 c9                	test   ecx,ecx
c0013d7d:	74 15                	je     c0013d94 <SysLoadDLL(regs*)+0xa3>
c0013d7f:	53                   	push   ebx
c0013d80:	53                   	push   ebx
c0013d81:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013d87:	51                   	push   ecx
c0013d88:	e8 4f 17 00 00       	call   c00154dc <Thr::executeDLL(unsigned long, void*)>
c0013d8d:	83 c4 10             	add    esp,0x10
c0013d90:	31 c0                	xor    eax,eax
c0013d92:	31 d2                	xor    edx,edx
c0013d94:	59                   	pop    ecx
c0013d95:	5b                   	pop    ebx
c0013d96:	5e                   	pop    esi
c0013d97:	c3                   	ret    

c0013d98 <SysRead(regs*)>:
c0013d98:	57                   	push   edi
c0013d99:	56                   	push   esi
c0013d9a:	53                   	push   ebx
c0013d9b:	83 ec 10             	sub    esp,0x10
c0013d9e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013da2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013da5:	83 f8 02             	cmp    eax,0x2
c0013da8:	77 10                	ja     c0013dba <SysRead(regs*)+0x22>
c0013daa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013daf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013db2:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013db8:	eb 0e                	jmp    c0013dc8 <SysRead(regs*)+0x30>
c0013dba:	83 ec 0c             	sub    esp,0xc
c0013dbd:	50                   	push   eax
c0013dbe:	e8 f0 56 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013dc3:	83 c4 10             	add    esp,0x10
c0013dc6:	89 c1                	mov    ecx,eax
c0013dc8:	83 c8 ff             	or     eax,0xffffffff
c0013dcb:	85 c9                	test   ecx,ecx
c0013dcd:	89 c2                	mov    edx,eax
c0013dcf:	74 28                	je     c0013df9 <SysRead(regs*)+0x61>
c0013dd1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013dd9:	31 ff                	xor    edi,edi
c0013ddb:	83 ec 0c             	sub    esp,0xc
c0013dde:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013de0:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013de4:	52                   	push   edx
c0013de5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013de8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013deb:	57                   	push   edi
c0013dec:	56                   	push   esi
c0013ded:	51                   	push   ecx
c0013dee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013df1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013df5:	83 c4 20             	add    esp,0x20
c0013df8:	99                   	cdq    
c0013df9:	83 c4 10             	add    esp,0x10
c0013dfc:	5b                   	pop    ebx
c0013dfd:	5e                   	pop    esi
c0013dfe:	5f                   	pop    edi
c0013dff:	c3                   	ret    

c0013e00 <SysRegisterSignal(regs*)>:
c0013e00:	83 ec 18             	sub    esp,0x18
c0013e03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e07:	6a 00                	push   0x0
c0013e09:	6a 00                	push   0x0
c0013e0b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013e0e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e19:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013e1f:	e8 98 d9 ff ff       	call   c00117bc <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013e24:	83 c4 2c             	add    esp,0x2c
c0013e27:	99                   	cdq    
c0013e28:	c3                   	ret    

c0013e29 <SysRegistryGetTypeFromPath(regs*)>:
c0013e29:	57                   	push   edi
c0013e2a:	56                   	push   esi
c0013e2b:	53                   	push   ebx
c0013e2c:	81 ec 38 01 00 00    	sub    esp,0x138
c0013e32:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013e39:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e3c:	68 df 21 02 c0       	push   0xc00221df
c0013e41:	e8 ff 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e46:	5a                   	pop    edx
c0013e47:	59                   	pop    ecx
c0013e48:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e4b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e4e:	e8 51 f6 ff ff       	call   c00134a4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013e53:	5f                   	pop    edi
c0013e54:	89 c6                	mov    esi,eax
c0013e56:	5a                   	pop    edx
c0013e57:	50                   	push   eax
c0013e58:	68 ff 21 02 c0       	push   0xc00221ff
c0013e5d:	e8 e3 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	85 f6                	test   esi,esi
c0013e67:	74 28                	je     c0013e91 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013e69:	50                   	push   eax
c0013e6a:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013e6e:	57                   	push   edi
c0013e6f:	56                   	push   esi
c0013e70:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e73:	e8 10 f2 ff ff       	call   c0013088 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013e78:	83 c4 0c             	add    esp,0xc
c0013e7b:	89 c3                	mov    ebx,eax
c0013e7d:	57                   	push   edi
c0013e7e:	50                   	push   eax
c0013e7f:	68 07 22 02 c0       	push   0xc0022207
c0013e84:	e8 bc 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e89:	89 d8                	mov    eax,ebx
c0013e8b:	83 c4 10             	add    esp,0x10
c0013e8e:	99                   	cdq    
c0013e8f:	eb 05                	jmp    c0013e96 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013e91:	83 c8 ff             	or     eax,0xffffffff
c0013e94:	89 c2                	mov    edx,eax
c0013e96:	81 c4 30 01 00 00    	add    esp,0x130
c0013e9c:	5b                   	pop    ebx
c0013e9d:	5e                   	pop    esi
c0013e9e:	5f                   	pop    edi
c0013e9f:	c3                   	ret    

c0013ea0 <SysRegistryReadExtent(regs*)>:
c0013ea0:	83 ec 1c             	sub    esp,0x1c
c0013ea3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ea7:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013eaa:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013ead:	85 c0                	test   eax,eax
c0013eaf:	79 1f                	jns    c0013ed0 <SysRegistryReadExtent(regs*)+0x30>
c0013eb1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013eb6:	52                   	push   edx
c0013eb7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013ebb:	52                   	push   edx
c0013ebc:	50                   	push   eax
c0013ebd:	51                   	push   ecx
c0013ebe:	e8 b7 f0 ff ff       	call   c0012f7a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013ec3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ec7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ecb:	83 c4 10             	add    esp,0x10
c0013ece:	eb 14                	jmp    c0013ee4 <SysRegistryReadExtent(regs*)+0x44>
c0013ed0:	83 ec 04             	sub    esp,0x4
c0013ed3:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013ed6:	50                   	push   eax
c0013ed7:	51                   	push   ecx
c0013ed8:	e8 37 eb ff ff       	call   c0012a14 <CmGetString(Reghive_Tag*, int, char*)>
c0013edd:	83 c4 10             	add    esp,0x10
c0013ee0:	31 c0                	xor    eax,eax
c0013ee2:	31 d2                	xor    edx,edx
c0013ee4:	83 c4 1c             	add    esp,0x1c
c0013ee7:	c3                   	ret    

c0013ee8 <SysRegistryPathToExtentLookup(regs*)>:
c0013ee8:	53                   	push   ebx
c0013ee9:	83 ec 10             	sub    esp,0x10
c0013eec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ef0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ef3:	68 1d 22 02 c0       	push   0xc002221d
c0013ef8:	e8 48 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013efd:	58                   	pop    eax
c0013efe:	5a                   	pop    edx
c0013eff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013f02:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f05:	e8 9a f5 ff ff       	call   c00134a4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013f0a:	83 c4 18             	add    esp,0x18
c0013f0d:	99                   	cdq    
c0013f0e:	5b                   	pop    ebx
c0013f0f:	c3                   	ret    

c0013f10 <SysRegistryEnterDirectory(regs*)>:
c0013f10:	53                   	push   ebx
c0013f11:	83 ec 10             	sub    esp,0x10
c0013f14:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f18:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f1b:	68 40 22 02 c0       	push   0xc0022240
c0013f20:	e8 20 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f25:	58                   	pop    eax
c0013f26:	5a                   	pop    edx
c0013f27:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f2a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f2d:	e8 59 eb ff ff       	call   c0012a8b <CmEnterDirectory(Reghive_Tag*, int)>
c0013f32:	83 c4 18             	add    esp,0x18
c0013f35:	99                   	cdq    
c0013f36:	5b                   	pop    ebx
c0013f37:	c3                   	ret    

c0013f38 <SysRegistryGetNext(regs*)>:
c0013f38:	53                   	push   ebx
c0013f39:	83 ec 10             	sub    esp,0x10
c0013f3c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f40:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f43:	68 5e 22 02 c0       	push   0xc002225e
c0013f48:	e8 f8 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f4d:	58                   	pop    eax
c0013f4e:	5a                   	pop    edx
c0013f4f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f52:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f55:	e8 70 eb ff ff       	call   c0012aca <CmGetNext(Reghive_Tag*, int)>
c0013f5a:	83 c4 18             	add    esp,0x18
c0013f5d:	99                   	cdq    
c0013f5e:	5b                   	pop    ebx
c0013f5f:	c3                   	ret    

c0013f60 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013f60:	57                   	push   edi
c0013f61:	56                   	push   esi
c0013f62:	53                   	push   ebx
c0013f63:	81 ec 34 01 00 00    	sub    esp,0x134
c0013f69:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013f70:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013f74:	57                   	push   edi
c0013f75:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013f78:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013f7b:	e8 08 f1 ff ff       	call   c0013088 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013f80:	89 c3                	mov    ebx,eax
c0013f82:	58                   	pop    eax
c0013f83:	5a                   	pop    edx
c0013f84:	57                   	push   edi
c0013f85:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013f88:	e8 b3 c6 fe ff       	call   c0000640 <strcpy>
c0013f8d:	89 d8                	mov    eax,ebx
c0013f8f:	81 c4 40 01 00 00    	add    esp,0x140
c0013f95:	99                   	cdq    
c0013f96:	5b                   	pop    ebx
c0013f97:	5e                   	pop    esi
c0013f98:	5f                   	pop    edi
c0013f99:	c3                   	ret    

c0013f9a <SysRegistryOpen(regs*)>:
c0013f9a:	83 ec 18             	sub    esp,0x18
c0013f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fa1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013fa4:	e8 fc e8 ff ff       	call   c00128a5 <CmOpen(char const*)>
c0013fa9:	83 c4 1c             	add    esp,0x1c
c0013fac:	99                   	cdq    
c0013fad:	c3                   	ret    

c0013fae <SysRegistryClose(regs*)>:
c0013fae:	83 ec 18             	sub    esp,0x18
c0013fb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fb5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fb8:	e8 05 ea ff ff       	call   c00129c2 <CmClose(Reghive_Tag*)>
c0013fbd:	31 c0                	xor    eax,eax
c0013fbf:	31 d2                	xor    edx,edx
c0013fc1:	83 c4 1c             	add    esp,0x1c
c0013fc4:	c3                   	ret    

c0013fc5 <SysSbrk(regs*)>:
c0013fc5:	56                   	push   esi
c0013fc6:	53                   	push   ebx
c0013fc7:	50                   	push   eax
c0013fc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fcd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fd1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fd4:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013fd7:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013fdd:	85 db                	test   ebx,ebx
c0013fdf:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013fe2:	74 02                	je     c0013fe6 <SysSbrk(regs*)+0x21>
c0013fe4:	79 06                	jns    c0013fec <SysSbrk(regs*)+0x27>
c0013fe6:	89 f0                	mov    eax,esi
c0013fe8:	31 d2                	xor    edx,edx
c0013fea:	eb 2a                	jmp    c0014016 <SysSbrk(regs*)+0x51>
c0013fec:	83 c8 ff             	or     eax,0xffffffff
c0013fef:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013ff5:	89 c2                	mov    edx,eax
c0013ff7:	77 1d                	ja     c0014016 <SysSbrk(regs*)+0x51>
c0013ff9:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013fff:	50                   	push   eax
c0014000:	c1 ea 0c             	shr    edx,0xc
c0014003:	68 07 0c 00 00       	push   0xc07
c0014008:	52                   	push   edx
c0014009:	51                   	push   ecx
c001400a:	e8 15 5e ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c001400f:	89 f0                	mov    eax,esi
c0014011:	31 d2                	xor    edx,edx
c0014013:	83 c4 10             	add    esp,0x10
c0014016:	59                   	pop    ecx
c0014017:	5b                   	pop    ebx
c0014018:	5e                   	pop    esi
c0014019:	c3                   	ret    

c001401a <SysSetCwd(regs*)>:
c001401a:	83 ec 14             	sub    esp,0x14
c001401d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014021:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014024:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014029:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001402c:	e8 00 7c ff ff       	call   c000bc31 <Fs::setcwd(Process*, char*)>
c0014031:	83 c4 1c             	add    esp,0x1c
c0014034:	99                   	cdq    
c0014035:	c3                   	ret    

c0014036 <SysSetTime(regs*)>:
c0014036:	55                   	push   ebp
c0014037:	31 c9                	xor    ecx,ecx
c0014039:	57                   	push   edi
c001403a:	bd 0c 00 00 00       	mov    ebp,0xc
c001403f:	56                   	push   esi
c0014040:	53                   	push   ebx
c0014041:	31 db                	xor    ebx,ebx
c0014043:	83 ec 10             	sub    esp,0x10
c0014046:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001404a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001404d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014050:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014053:	89 c2                	mov    edx,eax
c0014055:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001405b:	83 e2 1f             	and    edx,0x1f
c001405e:	c1 e7 10             	shl    edi,0x10
c0014061:	42                   	inc    edx
c0014062:	c1 e8 05             	shr    eax,0x5
c0014065:	88 d1                	mov    cl,dl
c0014067:	31 d2                	xor    edx,edx
c0014069:	f7 f5                	div    ebp
c001406b:	89 dd                	mov    ebp,ebx
c001406d:	88 d5                	mov    ch,dl
c001406f:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014075:	0f b7 c1             	movzx  eax,cx
c0014078:	31 d2                	xor    edx,edx
c001407a:	09 f8                	or     eax,edi
c001407c:	bf 3c 00 00 00       	mov    edi,0x3c
c0014081:	89 c1                	mov    ecx,eax
c0014083:	89 f0                	mov    eax,esi
c0014085:	f7 f7                	div    edi
c0014087:	c1 e2 10             	shl    edx,0x10
c001408a:	09 d5                	or     ebp,edx
c001408c:	31 d2                	xor    edx,edx
c001408e:	89 eb                	mov    ebx,ebp
c0014090:	f7 f7                	div    edi
c0014092:	bf 10 0e 00 00       	mov    edi,0xe10
c0014097:	88 d7                	mov    bh,dl
c0014099:	89 f0                	mov    eax,esi
c001409b:	31 d2                	xor    edx,edx
c001409d:	f7 f7                	div    edi
c001409f:	bf 18 00 00 00       	mov    edi,0x18
c00140a4:	31 d2                	xor    edx,edx
c00140a6:	f7 f7                	div    edi
c00140a8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00140ad:	88 d3                	mov    bl,dl
c00140af:	53                   	push   ebx
c00140b0:	51                   	push   ecx
c00140b1:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00140b7:	e8 7e 83 ff ff       	call   c000c43a <Clock::setTimeInDatetimeLocal(datetime_t)>
c00140bc:	83 c4 1c             	add    esp,0x1c
c00140bf:	83 f0 01             	xor    eax,0x1
c00140c2:	5b                   	pop    ebx
c00140c3:	0f b6 c0             	movzx  eax,al
c00140c6:	5e                   	pop    esi
c00140c7:	31 d2                	xor    edx,edx
c00140c9:	5f                   	pop    edi
c00140ca:	5d                   	pop    ebp
c00140cb:	c3                   	ret    

c00140cc <SysSymlink(regs*)>:
c00140cc:	53                   	push   ebx
c00140cd:	83 c8 ff             	or     eax,0xffffffff
c00140d0:	83 ec 08             	sub    esp,0x8
c00140d3:	89 c2                	mov    edx,eax
c00140d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140d9:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140dc:	85 c9                	test   ecx,ecx
c00140de:	74 14                	je     c00140f4 <SysSymlink(regs*)+0x28>
c00140e0:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00140e3:	85 db                	test   ebx,ebx
c00140e5:	74 0d                	je     c00140f4 <SysSymlink(regs*)+0x28>
c00140e7:	50                   	push   eax
c00140e8:	50                   	push   eax
c00140e9:	53                   	push   ebx
c00140ea:	51                   	push   ecx
c00140eb:	e8 6e 70 ff ff       	call   c000b15e <KeCreateSymlink(char const*, char const*)>
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	99                   	cdq    
c00140f4:	83 c4 08             	add    esp,0x8
c00140f7:	5b                   	pop    ebx
c00140f8:	c3                   	ret    

c00140f9 <SysTimezone(regs*)>:
c00140f9:	53                   	push   ebx
c00140fa:	83 ec 08             	sub    esp,0x8
c00140fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014101:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014105:	75 17                	jne    c001411e <SysTimezone(regs*)+0x25>
c0014107:	83 ec 0c             	sub    esp,0xc
c001410a:	68 75 22 02 c0       	push   0xc0022275
c001410f:	e8 31 68 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014114:	83 c8 ff             	or     eax,0xffffffff
c0014117:	83 c4 10             	add    esp,0x10
c001411a:	89 c2                	mov    edx,eax
c001411c:	eb 20                	jmp    c001413e <SysTimezone(regs*)+0x45>
c001411e:	83 ec 0c             	sub    esp,0xc
c0014121:	68 8a 22 02 c0       	push   0xc002228a
c0014126:	e8 1a 68 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001412b:	58                   	pop    eax
c001412c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001412f:	e8 70 80 ff ff       	call   c000c1a4 <User::loadClockSettings(int)>
c0014134:	83 c4 10             	add    esp,0x10
c0014137:	b8 01 00 00 00       	mov    eax,0x1
c001413c:	31 d2                	xor    edx,edx
c001413e:	83 c4 08             	add    esp,0x8
c0014141:	5b                   	pop    ebx
c0014142:	c3                   	ret    

c0014143 <SysTruncate(regs*)>:
c0014143:	55                   	push   ebp
c0014144:	57                   	push   edi
c0014145:	31 ff                	xor    edi,edi
c0014147:	56                   	push   esi
c0014148:	53                   	push   ebx
c0014149:	83 ec 0c             	sub    esp,0xc
c001414c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014150:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014153:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014156:	89 ce                	mov    esi,ecx
c0014158:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001415c:	0f 84 99 00 00 00    	je     c00141fb <SysTruncate(regs*)+0xb8>
c0014162:	83 ec 0c             	sub    esp,0xc
c0014165:	68 14 01 00 00       	push   0x114
c001416a:	e8 47 39 ff ff       	call   c0007ab6 <malloc>
c001416f:	6a 01                	push   0x1
c0014171:	89 c3                	mov    ebx,eax
c0014173:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014178:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001417b:	55                   	push   ebp
c001417c:	53                   	push   ebx
c001417d:	e8 6e 76 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c0014182:	83 c4 20             	add    esp,0x20
c0014185:	31 d2                	xor    edx,edx
c0014187:	b8 03 00 00 00       	mov    eax,0x3
c001418c:	85 db                	test   ebx,ebx
c001418e:	0f 84 a2 00 00 00    	je     c0014236 <SysTruncate(regs*)+0xf3>
c0014194:	51                   	push   ecx
c0014195:	51                   	push   ecx
c0014196:	6a 02                	push   0x2
c0014198:	53                   	push   ebx
c0014199:	e8 30 77 ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c001419e:	83 c4 10             	add    esp,0x10
c00141a1:	85 c0                	test   eax,eax
c00141a3:	74 13                	je     c00141b8 <SysTruncate(regs*)+0x75>
c00141a5:	83 ec 0c             	sub    esp,0xc
c00141a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141aa:	53                   	push   ebx
c00141ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141ae:	83 c4 10             	add    esp,0x10
c00141b1:	b8 04 00 00 00       	mov    eax,0x4
c00141b6:	eb 7c                	jmp    c0014234 <SysTruncate(regs*)+0xf1>
c00141b8:	52                   	push   edx
c00141b9:	57                   	push   edi
c00141ba:	56                   	push   esi
c00141bb:	53                   	push   ebx
c00141bc:	e8 21 78 ff ff       	call   c000b9e2 <File::truncate(unsigned long long)>
c00141c1:	83 c4 10             	add    esp,0x10
c00141c4:	85 c0                	test   eax,eax
c00141c6:	74 1b                	je     c00141e3 <SysTruncate(regs*)+0xa0>
c00141c8:	83 ec 0c             	sub    esp,0xc
c00141cb:	53                   	push   ebx
c00141cc:	e8 5b 77 ff ff       	call   c000b92c <File::close()>
c00141d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141d9:	83 c4 10             	add    esp,0x10
c00141dc:	b8 05 00 00 00       	mov    eax,0x5
c00141e1:	eb 51                	jmp    c0014234 <SysTruncate(regs*)+0xf1>
c00141e3:	83 ec 0c             	sub    esp,0xc
c00141e6:	53                   	push   ebx
c00141e7:	e8 40 77 ff ff       	call   c000b92c <File::close()>
c00141ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141f4:	83 c4 10             	add    esp,0x10
c00141f7:	31 c0                	xor    eax,eax
c00141f9:	eb 39                	jmp    c0014234 <SysTruncate(regs*)+0xf1>
c00141fb:	31 d2                	xor    edx,edx
c00141fd:	b8 01 00 00 00       	mov    eax,0x1
c0014202:	83 fd 02             	cmp    ebp,0x2
c0014205:	7e 2f                	jle    c0014236 <SysTruncate(regs*)+0xf3>
c0014207:	83 ec 0c             	sub    esp,0xc
c001420a:	51                   	push   ecx
c001420b:	e8 a3 52 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014210:	83 c4 10             	add    esp,0x10
c0014213:	89 c1                	mov    ecx,eax
c0014215:	31 d2                	xor    edx,edx
c0014217:	b8 02 00 00 00       	mov    eax,0x2
c001421c:	85 c9                	test   ecx,ecx
c001421e:	74 16                	je     c0014236 <SysTruncate(regs*)+0xf3>
c0014220:	50                   	push   eax
c0014221:	57                   	push   edi
c0014222:	56                   	push   esi
c0014223:	51                   	push   ecx
c0014224:	e8 b9 77 ff ff       	call   c000b9e2 <File::truncate(unsigned long long)>
c0014229:	83 c4 10             	add    esp,0x10
c001422c:	85 c0                	test   eax,eax
c001422e:	0f 95 c0             	setne  al
c0014231:	0f b6 c0             	movzx  eax,al
c0014234:	31 d2                	xor    edx,edx
c0014236:	83 c4 0c             	add    esp,0xc
c0014239:	5b                   	pop    ebx
c001423a:	5e                   	pop    esi
c001423b:	5f                   	pop    edi
c001423c:	5d                   	pop    ebp
c001423d:	c3                   	ret    

c001423e <SysWrite(regs*)>:
c001423e:	57                   	push   edi
c001423f:	56                   	push   esi
c0014240:	53                   	push   ebx
c0014241:	83 ec 10             	sub    esp,0x10
c0014244:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014248:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001424b:	83 f8 02             	cmp    eax,0x2
c001424e:	77 10                	ja     c0014260 <SysWrite(regs*)+0x22>
c0014250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014255:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014258:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001425e:	eb 0e                	jmp    c001426e <SysWrite(regs*)+0x30>
c0014260:	83 ec 0c             	sub    esp,0xc
c0014263:	50                   	push   eax
c0014264:	e8 4a 52 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014269:	83 c4 10             	add    esp,0x10
c001426c:	89 c1                	mov    ecx,eax
c001426e:	83 c8 ff             	or     eax,0xffffffff
c0014271:	85 c9                	test   ecx,ecx
c0014273:	89 c2                	mov    edx,eax
c0014275:	74 28                	je     c001429f <SysWrite(regs*)+0x61>
c0014277:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001427f:	31 ff                	xor    edi,edi
c0014281:	83 ec 0c             	sub    esp,0xc
c0014284:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014286:	8d 54 24 18          	lea    edx,[esp+0x18]
c001428a:	52                   	push   edx
c001428b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001428e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014291:	57                   	push   edi
c0014292:	56                   	push   esi
c0014293:	51                   	push   ecx
c0014294:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014297:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001429b:	83 c4 20             	add    esp,0x20
c001429e:	99                   	cdq    
c001429f:	83 c4 10             	add    esp,0x10
c00142a2:	5b                   	pop    ebx
c00142a3:	5e                   	pop    esi
c00142a4:	5f                   	pop    edi
c00142a5:	c3                   	ret    

c00142a6 <SysWsbe(regs*)>:
c00142a6:	57                   	push   edi
c00142a7:	b9 0b 00 00 00       	mov    ecx,0xb
c00142ac:	56                   	push   esi
c00142ad:	be c9 22 02 c0       	mov    esi,0xc00222c9
c00142b2:	53                   	push   ebx
c00142b3:	83 ec 30             	sub    esp,0x30
c00142b6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00142ba:	fc                   	cld    
c00142bb:	83 ec 0c             	sub    esp,0xc
c00142be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00142c0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00142c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142cc:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00142d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00142d4:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00142d7:	57                   	push   edi
c00142d8:	e8 93 c2 fe ff       	call   c0000570 <strlen>
c00142dd:	5a                   	pop    edx
c00142de:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00142e2:	52                   	push   edx
c00142e3:	31 d2                	xor    edx,edx
c00142e5:	57                   	push   edi
c00142e6:	52                   	push   edx
c00142e7:	50                   	push   eax
c00142e8:	56                   	push   esi
c00142e9:	ff d3                	call   ebx
c00142eb:	83 c4 14             	add    esp,0x14
c00142ee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00142f2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00142f5:	e8 b2 23 00 00       	call   c00166ac <terminateTask(int)>
c00142fa:	83 c4 40             	add    esp,0x40
c00142fd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014302:	5b                   	pop    ebx
c0014303:	31 d2                	xor    edx,edx
c0014305:	5e                   	pop    esi
c0014306:	5f                   	pop    edi
c0014307:	c3                   	ret    

c0014308 <SysYield(regs*)>:
c0014308:	83 ec 0c             	sub    esp,0xc
c001430b:	fa                   	cli    
c001430c:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014312:	e8 f5 19 00 00       	call   c0015d0c <schedule()>
c0014317:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001431c:	48                   	dec    eax
c001431d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014322:	75 01                	jne    c0014325 <SysYield(regs*)+0x1d>
c0014324:	fb                   	sti    
c0014325:	31 c0                	xor    eax,eax
c0014327:	31 d2                	xor    edx,edx
c0014329:	83 c4 0c             	add    esp,0xc
c001432c:	c3                   	ret    

c001432d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001432d:	55                   	push   ebp
c001432e:	57                   	push   edi
c001432f:	56                   	push   esi
c0014330:	53                   	push   ebx
c0014331:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014337:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001433f:	0f 95 c0             	setne  al
c0014342:	31 d2                	xor    edx,edx
c0014344:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001434c:	0f 94 c2             	sete   dl
c001434f:	85 c2                	test   edx,eax
c0014351:	74 34                	je     c0014387 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014353:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001435e:	74 27                	je     c0014387 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014360:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014367:	05 00 10 00 00       	add    eax,0x1000
c001436c:	89 c1                	mov    ecx,eax
c001436e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014373:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0014379:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014380:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0014387:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001438e:	83 ec 0c             	sub    esp,0xc
c0014391:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014397:	6a 01                	push   0x1
c0014399:	e8 6f 52 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001439e:	83 c4 10             	add    esp,0x10
c00143a1:	89 c3                	mov    ebx,eax
c00143a3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00143a9:	0f 86 25 01 00 00    	jbe    c00144d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00143af:	c1 ee 0c             	shr    esi,0xc
c00143b2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00143b9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00143bd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00143c5:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00143cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143d0:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00143d7:	29 ef                	sub    edi,ebp
c00143d9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00143dd:	0f 83 f8 00 00 00    	jae    c00144db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00143e3:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00143e9:	76 05                	jbe    c00143f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00143eb:	bf 00 10 00 00       	mov    edi,0x1000
c00143f0:	83 ec 0c             	sub    esp,0xc
c00143f3:	31 d2                	xor    edx,edx
c00143f5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00143fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00143fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014402:	50                   	push   eax
c0014403:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014407:	56                   	push   esi
c0014408:	52                   	push   edx
c0014409:	57                   	push   edi
c001440a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014411:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014414:	83 c4 20             	add    esp,0x20
c0014417:	85 c0                	test   eax,eax
c0014419:	75 06                	jne    c0014421 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001441b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001441f:	74 13                	je     c0014434 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0014421:	83 ec 0c             	sub    esp,0xc
c0014424:	53                   	push   ebx
c0014425:	e8 01 55 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c001442a:	83 c4 10             	add    esp,0x10
c001442d:	31 c0                	xor    eax,eax
c001442f:	e9 7c 01 00 00       	jmp    c00145b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0014434:	fa                   	cli    
c0014435:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001443b:	e8 7f 39 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014440:	6a 07                	push   0x7
c0014442:	89 c7                	mov    edi,eax
c0014444:	53                   	push   ebx
c0014445:	50                   	push   eax
c0014446:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001444b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001444e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014454:	e8 c7 58 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014459:	83 c4 0c             	add    esp,0xc
c001445c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014463:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014469:	6a 00                	push   0x0
c001446b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014470:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014473:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014479:	e8 08 57 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c001447e:	58                   	pop    eax
c001447f:	5a                   	pop    edx
c0014480:	68 07 0c 00 00       	push   0xc07
c0014485:	55                   	push   ebp
c0014486:	57                   	push   edi
c0014487:	89 df                	mov    edi,ebx
c0014489:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014490:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014496:	6a 00                	push   0x0
c0014498:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001449d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144a0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144a6:	e8 c7 5a ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00144ab:	b9 00 10 00 00       	mov    ecx,0x1000
c00144b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144b2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00144b7:	83 c4 20             	add    esp,0x20
c00144ba:	48                   	dec    eax
c00144bb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00144c0:	85 c0                	test   eax,eax
c00144c2:	75 01                	jne    c00144c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00144c4:	fb                   	sti    
c00144c5:	81 c5 00 10 00 00    	add    ebp,0x1000
c00144cb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00144cf:	e9 f1 fe ff ff       	jmp    c00143c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00144d4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00144db:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00144e2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00144e8:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00144ee:	0f 86 ae 00 00 00    	jbe    c00145a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00144f4:	fa                   	cli    
c00144f5:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00144fb:	c1 ee 0c             	shr    esi,0xc
c00144fe:	51                   	push   ecx
c00144ff:	31 ff                	xor    edi,edi
c0014501:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014508:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001450e:	6a 00                	push   0x0
c0014510:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014515:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014518:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001451e:	e8 63 56 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014523:	83 c4 10             	add    esp,0x10
c0014526:	e8 94 38 ff ff       	call   c0007dbf <Phys::allocatePage()>
c001452b:	47                   	inc    edi
c001452c:	6a 07                	push   0x7
c001452e:	53                   	push   ebx
c001452f:	50                   	push   eax
c0014530:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014534:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001453a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001453d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014543:	e8 d8 57 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014548:	58                   	pop    eax
c0014549:	5a                   	pop    edx
c001454a:	68 07 0c 00 00       	push   0xc07
c001454f:	55                   	push   ebp
c0014550:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014556:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001455a:	50                   	push   eax
c001455b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014562:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014568:	6a 00                	push   0x0
c001456a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001456f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014572:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014578:	e8 f5 59 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001457d:	83 c4 1c             	add    esp,0x1c
c0014580:	68 00 10 00 00       	push   0x1000
c0014585:	6a 00                	push   0x0
c0014587:	53                   	push   ebx
c0014588:	e8 63 bf fe ff       	call   c00004f0 <memset>
c001458d:	83 c4 10             	add    esp,0x10
c0014590:	39 fe                	cmp    esi,edi
c0014592:	77 92                	ja     c0014526 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014594:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014599:	48                   	dec    eax
c001459a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001459f:	75 01                	jne    c00145a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00145a1:	fb                   	sti    
c00145a2:	83 ec 0c             	sub    esp,0xc
c00145a5:	53                   	push   ebx
c00145a6:	e8 80 53 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00145ab:	83 c4 10             	add    esp,0x10
c00145ae:	b0 01                	mov    al,0x1
c00145b0:	81 c4 2c 10 00 00    	add    esp,0x102c
c00145b6:	5b                   	pop    ebx
c00145b7:	5e                   	pop    esi
c00145b8:	5f                   	pop    edi
c00145b9:	5d                   	pop    ebp
c00145ba:	c3                   	ret    

c00145bb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00145bb:	55                   	push   ebp
c00145bc:	57                   	push   edi
c00145bd:	56                   	push   esi
c00145be:	53                   	push   ebx
c00145bf:	83 ec 48             	sub    esp,0x48
c00145c2:	68 14 01 00 00       	push   0x114
c00145c7:	e8 ea 34 ff ff       	call   c0007ab6 <malloc>
c00145cc:	6a 01                	push   0x1
c00145ce:	89 c6                	mov    esi,eax
c00145d0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00145d4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00145d8:	50                   	push   eax
c00145d9:	e8 12 72 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c00145de:	83 c4 18             	add    esp,0x18
c00145e1:	6a 01                	push   0x1
c00145e3:	56                   	push   esi
c00145e4:	e8 e5 72 ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c00145e9:	83 c4 10             	add    esp,0x10
c00145ec:	85 c0                	test   eax,eax
c00145ee:	0f 85 43 01 00 00    	jne    c0014737 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00145f4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00145fc:	83 ec 0c             	sub    esp,0xc
c00145ff:	6a 34                	push   0x34
c0014601:	e8 b0 34 ff ff       	call   c0007ab6 <malloc>
c0014606:	89 c3                	mov    ebx,eax
c0014608:	58                   	pop    eax
c0014609:	8b 06                	mov    eax,DWORD PTR [esi]
c001460b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001460f:	57                   	push   edi
c0014610:	53                   	push   ebx
c0014611:	6a 00                	push   0x0
c0014613:	6a 34                	push   0x34
c0014615:	56                   	push   esi
c0014616:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014619:	83 c4 20             	add    esp,0x20
c001461c:	85 c0                	test   eax,eax
c001461e:	0f 85 13 01 00 00    	jne    c0014737 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014624:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001462a:	0f 85 07 01 00 00    	jne    c0014737 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014630:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014633:	85 c0                	test   eax,eax
c0014635:	0f 84 fc 00 00 00    	je     c0014737 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001463b:	31 d2                	xor    edx,edx
c001463d:	55                   	push   ebp
c001463e:	52                   	push   edx
c001463f:	50                   	push   eax
c0014640:	56                   	push   esi
c0014641:	e8 46 73 ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0014646:	83 c4 10             	add    esp,0x10
c0014649:	85 c0                	test   eax,eax
c001464b:	0f 85 e6 00 00 00    	jne    c0014737 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014651:	83 ec 0c             	sub    esp,0xc
c0014654:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014657:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001465b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001465f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014663:	0f af c2             	imul   eax,edx
c0014666:	50                   	push   eax
c0014667:	e8 4a 34 ff ff       	call   c0007ab6 <malloc>
c001466c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001466e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014672:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014675:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014679:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001467d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014681:	0f af c2             	imul   eax,edx
c0014684:	99                   	cdq    
c0014685:	52                   	push   edx
c0014686:	50                   	push   eax
c0014687:	56                   	push   esi
c0014688:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001468b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001468e:	83 c4 20             	add    esp,0x20
c0014691:	85 c0                	test   eax,eax
c0014693:	0f 84 9e 00 00 00    	je     c0014737 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014699:	31 d2                	xor    edx,edx
c001469b:	51                   	push   ecx
c001469c:	52                   	push   edx
c001469d:	50                   	push   eax
c001469e:	56                   	push   esi
c001469f:	e8 e8 72 ff ff       	call   c000b98c <File::seek(unsigned long long)>
c00146a4:	83 c4 10             	add    esp,0x10
c00146a7:	85 c0                	test   eax,eax
c00146a9:	0f 85 88 00 00 00    	jne    c0014737 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00146af:	83 ec 0c             	sub    esp,0xc
c00146b2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00146b6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00146ba:	31 ed                	xor    ebp,ebp
c00146bc:	0f af c2             	imul   eax,edx
c00146bf:	50                   	push   eax
c00146c0:	e8 f1 33 ff ff       	call   c0007ab6 <malloc>
c00146c5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00146c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00146cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00146ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146d2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00146d6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00146da:	0f af c2             	imul   eax,edx
c00146dd:	99                   	cdq    
c00146de:	52                   	push   edx
c00146df:	50                   	push   eax
c00146e0:	56                   	push   esi
c00146e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00146e4:	83 c4 20             	add    esp,0x20
c00146e7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146ef:	0f b7 fd             	movzx  edi,bp
c00146f2:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00146f6:	73 7d                	jae    c0014775 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c00146f8:	c1 e7 05             	shl    edi,0x5
c00146fb:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00146ff:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014702:	75 6b                	jne    c001476f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014704:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014707:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001470b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001470e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014712:	52                   	push   edx
c0014713:	31 d2                	xor    edx,edx
c0014715:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014718:	52                   	push   edx
c0014719:	50                   	push   eax
c001471a:	56                   	push   esi
c001471b:	e8 6c 72 ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0014720:	83 c4 10             	add    esp,0x10
c0014723:	85 c0                	test   eax,eax
c0014725:	74 17                	je     c001473e <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014727:	83 ec 0c             	sub    esp,0xc
c001472a:	68 f5 22 02 c0       	push   0xc00222f5
c001472f:	e8 11 62 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014734:	83 c4 10             	add    esp,0x10
c0014737:	31 c0                	xor    eax,eax
c0014739:	e9 87 00 00 00       	jmp    c00147c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c001473e:	83 ec 0c             	sub    esp,0xc
c0014741:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014744:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014747:	50                   	push   eax
c0014748:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001474c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014750:	56                   	push   esi
c0014751:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014755:	e8 d3 fb ff ff       	call   c001432d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001475a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001475e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014762:	83 c4 20             	add    esp,0x20
c0014765:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014769:	73 04                	jae    c001476f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c001476b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001476f:	45                   	inc    ebp
c0014770:	e9 7a ff ff ff       	jmp    c00146ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014775:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014779:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001477d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014781:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014787:	83 ec 0c             	sub    esp,0xc
c001478a:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014790:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014795:	05 00 10 00 00       	add    eax,0x1000
c001479a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001479d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147a1:	e8 20 33 ff ff       	call   c0007ac6 <free>
c00147a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147a9:	e8 18 33 ff ff       	call   c0007ac6 <free>
c00147ae:	58                   	pop    eax
c00147af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147b3:	e8 0e 33 ff ff       	call   c0007ac6 <free>
c00147b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00147bb:	e8 6c 71 ff ff       	call   c000b92c <File::close()>
c00147c0:	83 c4 10             	add    esp,0x10
c00147c3:	b0 01                	mov    al,0x1
c00147c5:	83 c4 3c             	add    esp,0x3c
c00147c8:	5b                   	pop    ebx
c00147c9:	5e                   	pop    esi
c00147ca:	5f                   	pop    edi
c00147cb:	5d                   	pop    ebp
c00147cc:	c3                   	ret    

c00147cd <Thr::runtimeReferenceHelper()>:
c00147cd:	83 ec 18             	sub    esp,0x18
c00147d0:	68 fd 22 02 c0       	push   0xc00222fd
c00147d5:	e8 6b 61 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00147da:	fa                   	cli    
c00147db:	83 c4 10             	add    esp,0x10
c00147de:	eb fe                	jmp    c00147de <Thr::runtimeReferenceHelper()+0x11>

c00147e0 <Thr::getAddressOfKernelSymbol(char const*)>:
c00147e0:	57                   	push   edi
c00147e1:	56                   	push   esi
c00147e2:	53                   	push   ebx
c00147e3:	31 db                	xor    ebx,ebx
c00147e5:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c00147eb:	7e 3c                	jle    c0014829 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00147ed:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c00147f4:	31 ff                	xor    edi,edi
c00147f6:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c00147fd:	7e 27                	jle    c0014826 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00147ff:	50                   	push   eax
c0014800:	50                   	push   eax
c0014801:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014805:	8b 06                	mov    eax,DWORD PTR [esi]
c0014807:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c001480e:	50                   	push   eax
c001480f:	e8 3c bf fe ff       	call   c0000750 <strcmp>
c0014814:	83 c4 10             	add    esp,0x10
c0014817:	85 c0                	test   eax,eax
c0014819:	75 05                	jne    c0014820 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001481b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001481e:	eb 0b                	jmp    c001482b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014820:	83 c6 10             	add    esi,0x10
c0014823:	47                   	inc    edi
c0014824:	eb d0                	jmp    c00147f6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014826:	43                   	inc    ebx
c0014827:	eb bc                	jmp    c00147e5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014829:	31 c0                	xor    eax,eax
c001482b:	5b                   	pop    ebx
c001482c:	5e                   	pop    esi
c001482d:	5f                   	pop    edi
c001482e:	c3                   	ret    

c001482f <Thr::loadKernelSymbolTable(char const*)>:
c001482f:	55                   	push   ebp
c0014830:	57                   	push   edi
c0014831:	56                   	push   esi
c0014832:	53                   	push   ebx
c0014833:	83 ec 68             	sub    esp,0x68
c0014836:	68 14 01 00 00       	push   0x114
c001483b:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014841:	e8 70 32 ff ff       	call   c0007ab6 <malloc>
c0014846:	6a 01                	push   0x1
c0014848:	89 c3                	mov    ebx,eax
c001484a:	56                   	push   esi
c001484b:	ff b4 24 88 00 00 00 	push   DWORD PTR [esp+0x88]
c0014852:	50                   	push   eax
c0014853:	e8 98 6f ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c0014858:	83 c4 18             	add    esp,0x18
c001485b:	6a 01                	push   0x1
c001485d:	53                   	push   ebx
c001485e:	e8 6b 70 ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c0014863:	83 c4 10             	add    esp,0x10
c0014866:	85 c0                	test   eax,eax
c0014868:	74 0a                	je     c0014874 <Thr::loadKernelSymbolTable(char const*)+0x45>
c001486a:	83 ec 0c             	sub    esp,0xc
c001486d:	68 1f 23 02 c0       	push   0xc002231f
c0014872:	eb 34                	jmp    c00148a8 <Thr::loadKernelSymbolTable(char const*)+0x79>
c0014874:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001487c:	83 ec 0c             	sub    esp,0xc
c001487f:	6a 34                	push   0x34
c0014881:	e8 30 32 ff ff       	call   c0007ab6 <malloc>
c0014886:	59                   	pop    ecx
c0014887:	89 c7                	mov    edi,eax
c0014889:	8d 74 24 34          	lea    esi,[esp+0x34]
c001488d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001488f:	56                   	push   esi
c0014890:	57                   	push   edi
c0014891:	6a 00                	push   0x0
c0014893:	6a 34                	push   0x34
c0014895:	53                   	push   ebx
c0014896:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014899:	83 c4 20             	add    esp,0x20
c001489c:	85 c0                	test   eax,eax
c001489e:	74 17                	je     c00148b7 <Thr::loadKernelSymbolTable(char const*)+0x88>
c00148a0:	83 ec 0c             	sub    esp,0xc
c00148a3:	68 36 23 02 c0       	push   0xc0022336
c00148a8:	e8 a4 ca ff ff       	call   c0011351 <KePanic(char const*)>
c00148ad:	83 c4 10             	add    esp,0x10
c00148b0:	31 c0                	xor    eax,eax
c00148b2:	e9 31 02 00 00       	jmp    c0014ae8 <Thr::loadKernelSymbolTable(char const*)+0x2b9>
c00148b7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00148bd:	75 e1                	jne    c00148a0 <Thr::loadKernelSymbolTable(char const*)+0x71>
c00148bf:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00148c2:	85 c0                	test   eax,eax
c00148c4:	74 da                	je     c00148a0 <Thr::loadKernelSymbolTable(char const*)+0x71>
c00148c6:	52                   	push   edx
c00148c7:	31 d2                	xor    edx,edx
c00148c9:	52                   	push   edx
c00148ca:	50                   	push   eax
c00148cb:	53                   	push   ebx
c00148cc:	e8 bb 70 ff ff       	call   c000b98c <File::seek(unsigned long long)>
c00148d1:	83 c4 10             	add    esp,0x10
c00148d4:	85 c0                	test   eax,eax
c00148d6:	75 c8                	jne    c00148a0 <Thr::loadKernelSymbolTable(char const*)+0x71>
c00148d8:	83 ec 0c             	sub    esp,0xc
c00148db:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00148df:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00148e3:	31 ed                	xor    ebp,ebp
c00148e5:	0f af c2             	imul   eax,edx
c00148e8:	50                   	push   eax
c00148e9:	e8 c8 31 ff ff       	call   c0007ab6 <malloc>
c00148ee:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00148f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00148f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00148f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00148fb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00148ff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014903:	0f af c2             	imul   eax,edx
c0014906:	99                   	cdq    
c0014907:	52                   	push   edx
c0014908:	50                   	push   eax
c0014909:	53                   	push   ebx
c001490a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001490d:	83 c4 20             	add    esp,0x20
c0014910:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014918:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014920:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014928:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014930:	0f b7 f5             	movzx  esi,bp
c0014933:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014937:	0f 83 a7 00 00 00    	jae    c00149e4 <Thr::loadKernelSymbolTable(char const*)+0x1b5>
c001493d:	6b f6 28             	imul   esi,esi,0x28
c0014940:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014944:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014947:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001494b:	50                   	push   eax
c001494c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014950:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014954:	8b 16                	mov    edx,DWORD PTR [esi]
c0014956:	6b c0 28             	imul   eax,eax,0x28
c0014959:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001495d:	89 d0                	mov    eax,edx
c001495f:	31 d2                	xor    edx,edx
c0014961:	52                   	push   edx
c0014962:	50                   	push   eax
c0014963:	53                   	push   ebx
c0014964:	e8 23 70 ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0014969:	83 c4 0c             	add    esp,0xc
c001496c:	6a 20                	push   0x20
c001496e:	6a 00                	push   0x0
c0014970:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014974:	52                   	push   edx
c0014975:	e8 76 bb fe ff       	call   c00004f0 <memset>
c001497a:	58                   	pop    eax
c001497b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001497d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014981:	51                   	push   ecx
c0014982:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014986:	52                   	push   edx
c0014987:	6a 00                	push   0x0
c0014989:	6a 1f                	push   0x1f
c001498b:	53                   	push   ebx
c001498c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001498f:	83 c4 18             	add    esp,0x18
c0014992:	68 4d 23 02 c0       	push   0xc002234d
c0014997:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001499b:	52                   	push   edx
c001499c:	e8 af bd fe ff       	call   c0000750 <strcmp>
c00149a1:	83 c4 10             	add    esp,0x10
c00149a4:	85 c0                	test   eax,eax
c00149a6:	75 0f                	jne    c00149b7 <Thr::loadKernelSymbolTable(char const*)+0x188>
c00149a8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00149ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00149af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149b7:	50                   	push   eax
c00149b8:	50                   	push   eax
c00149b9:	68 55 23 02 c0       	push   0xc0022355
c00149be:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00149c2:	50                   	push   eax
c00149c3:	e8 88 bd fe ff       	call   c0000750 <strcmp>
c00149c8:	83 c4 10             	add    esp,0x10
c00149cb:	85 c0                	test   eax,eax
c00149cd:	75 0f                	jne    c00149de <Thr::loadKernelSymbolTable(char const*)+0x1af>
c00149cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00149d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00149de:	45                   	inc    ebp
c00149df:	e9 4c ff ff ff       	jmp    c0014930 <Thr::loadKernelSymbolTable(char const*)+0x101>
c00149e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00149e9:	75 10                	jne    c00149fb <Thr::loadKernelSymbolTable(char const*)+0x1cc>
c00149eb:	83 ec 0c             	sub    esp,0xc
c00149ee:	68 5d 23 02 c0       	push   0xc002235d
c00149f3:	e8 59 c9 ff ff       	call   c0011351 <KePanic(char const*)>
c00149f8:	83 c4 10             	add    esp,0x10
c00149fb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014a00:	75 10                	jne    c0014a12 <Thr::loadKernelSymbolTable(char const*)+0x1e3>
c0014a02:	83 ec 0c             	sub    esp,0xc
c0014a05:	68 5d 23 02 c0       	push   0xc002235d
c0014a0a:	e8 42 c9 ff ff       	call   c0011351 <KePanic(char const*)>
c0014a0f:	83 c4 10             	add    esp,0x10
c0014a12:	31 d2                	xor    edx,edx
c0014a14:	50                   	push   eax
c0014a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a19:	52                   	push   edx
c0014a1a:	50                   	push   eax
c0014a1b:	53                   	push   ebx
c0014a1c:	e8 6b 6f ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0014a21:	5a                   	pop    edx
c0014a22:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014a26:	e8 8b 30 ff ff       	call   c0007ab6 <malloc>
c0014a2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014a2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a33:	31 c9                	xor    ecx,ecx
c0014a35:	5e                   	pop    esi
c0014a36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a38:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014a3c:	55                   	push   ebp
c0014a3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a41:	51                   	push   ecx
c0014a42:	52                   	push   edx
c0014a43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014a47:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014a4b:	53                   	push   ebx
c0014a4c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a4f:	83 c4 14             	add    esp,0x14
c0014a52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a56:	e8 5b 30 ff ff       	call   c0007ab6 <malloc>
c0014a5b:	89 c6                	mov    esi,eax
c0014a5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a5f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014a62:	56                   	push   esi
c0014a63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014a67:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014a6b:	51                   	push   ecx
c0014a6c:	52                   	push   edx
c0014a6d:	53                   	push   ebx
c0014a6e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014a75:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c0014a7b:	83 c4 1c             	add    esp,0x1c
c0014a7e:	c1 e8 04             	shr    eax,0x4
c0014a81:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c0014a88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a8c:	31 d2                	xor    edx,edx
c0014a8e:	52                   	push   edx
c0014a8f:	50                   	push   eax
c0014a90:	53                   	push   ebx
c0014a91:	e8 f6 6e ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0014a96:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014a98:	31 d2                	xor    edx,edx
c0014a9a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014a9d:	56                   	push   esi
c0014a9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014aa2:	52                   	push   edx
c0014aa3:	50                   	push   eax
c0014aa4:	53                   	push   ebx
c0014aa5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014aa8:	83 c4 14             	add    esp,0x14
c0014aab:	53                   	push   ebx
c0014aac:	e8 7b 6e ff ff       	call   c000b92c <File::close()>
c0014ab1:	5d                   	pop    ebp
c0014ab2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ab6:	e8 0b 30 ff ff       	call   c0007ac6 <free>
c0014abb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014abe:	e8 03 30 ff ff       	call   c0007ac6 <free>
c0014ac3:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014ac8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014acc:	8d 50 01             	lea    edx,[eax+0x1]
c0014acf:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014ad6:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014add:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014ae3:	83 c4 10             	add    esp,0x10
c0014ae6:	b0 01                	mov    al,0x1
c0014ae8:	83 c4 5c             	add    esp,0x5c
c0014aeb:	5b                   	pop    ebx
c0014aec:	5e                   	pop    esi
c0014aed:	5f                   	pop    edi
c0014aee:	5d                   	pop    ebp
c0014aef:	c3                   	ret    

c0014af0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014af0:	55                   	push   ebp
c0014af1:	57                   	push   edi
c0014af2:	56                   	push   esi
c0014af3:	53                   	push   ebx
c0014af4:	81 ec 68 03 00 00    	sub    esp,0x368
c0014afa:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014b01:	8b 1d f0 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296f0
c0014b07:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014b0b:	68 14 01 00 00       	push   0x114
c0014b10:	e8 a1 2f ff ff       	call   c0007ab6 <malloc>
c0014b15:	6a 01                	push   0x1
c0014b17:	89 c5                	mov    ebp,eax
c0014b19:	53                   	push   ebx
c0014b1a:	ff b4 24 88 03 00 00 	push   DWORD PTR [esp+0x388]
c0014b21:	50                   	push   eax
c0014b22:	e8 c9 6c ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c0014b27:	83 c4 18             	add    esp,0x18
c0014b2a:	6a 01                	push   0x1
c0014b2c:	55                   	push   ebp
c0014b2d:	e8 9c 6d ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c0014b32:	83 c4 10             	add    esp,0x10
c0014b35:	85 c0                	test   eax,eax
c0014b37:	0f 85 aa 06 00 00    	jne    c00151e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b3d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014b45:	83 ec 0c             	sub    esp,0xc
c0014b48:	6a 34                	push   0x34
c0014b4a:	e8 67 2f ff ff       	call   c0007ab6 <malloc>
c0014b4f:	5b                   	pop    ebx
c0014b50:	89 c7                	mov    edi,eax
c0014b52:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014b56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b59:	53                   	push   ebx
c0014b5a:	57                   	push   edi
c0014b5b:	6a 00                	push   0x0
c0014b5d:	6a 34                	push   0x34
c0014b5f:	55                   	push   ebp
c0014b60:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b63:	83 c4 20             	add    esp,0x20
c0014b66:	85 c0                	test   eax,eax
c0014b68:	0f 85 79 06 00 00    	jne    c00151e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b6e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014b74:	0f 85 6d 06 00 00    	jne    c00151e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b7a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014b7d:	85 c0                	test   eax,eax
c0014b7f:	0f 84 62 06 00 00    	je     c00151e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b85:	31 d2                	xor    edx,edx
c0014b87:	51                   	push   ecx
c0014b88:	52                   	push   edx
c0014b89:	50                   	push   eax
c0014b8a:	55                   	push   ebp
c0014b8b:	e8 fc 6d ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0014b90:	83 c4 10             	add    esp,0x10
c0014b93:	85 c0                	test   eax,eax
c0014b95:	0f 85 4c 06 00 00    	jne    c00151e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b9b:	83 ec 0c             	sub    esp,0xc
c0014b9e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014ba1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014ba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014ba9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014bad:	0f af c2             	imul   eax,edx
c0014bb0:	50                   	push   eax
c0014bb1:	e8 00 2f ff ff       	call   c0007ab6 <malloc>
c0014bb6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014bb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bc4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014bc8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014bcc:	0f af c2             	imul   eax,edx
c0014bcf:	99                   	cdq    
c0014bd0:	52                   	push   edx
c0014bd1:	50                   	push   eax
c0014bd2:	55                   	push   ebp
c0014bd3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bd6:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014bd9:	83 c4 20             	add    esp,0x20
c0014bdc:	85 c0                	test   eax,eax
c0014bde:	0f 84 03 06 00 00    	je     c00151e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014be4:	52                   	push   edx
c0014be5:	31 d2                	xor    edx,edx
c0014be7:	52                   	push   edx
c0014be8:	50                   	push   eax
c0014be9:	55                   	push   ebp
c0014bea:	e8 9d 6d ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0014bef:	83 c4 10             	add    esp,0x10
c0014bf2:	85 c0                	test   eax,eax
c0014bf4:	0f 85 ed 05 00 00    	jne    c00151e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014bfa:	83 ec 0c             	sub    esp,0xc
c0014bfd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014c01:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014c05:	31 f6                	xor    esi,esi
c0014c07:	0f af c2             	imul   eax,edx
c0014c0a:	50                   	push   eax
c0014c0b:	e8 a6 2e ff ff       	call   c0007ab6 <malloc>
c0014c10:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014c13:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014c17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c1e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014c22:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014c26:	0f af c2             	imul   eax,edx
c0014c29:	99                   	cdq    
c0014c2a:	52                   	push   edx
c0014c2b:	50                   	push   eax
c0014c2c:	55                   	push   ebp
c0014c2d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c30:	83 c4 20             	add    esp,0x20
c0014c33:	0f b7 de             	movzx  ebx,si
c0014c36:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014c3a:	0f 83 87 00 00 00    	jae    c0014cc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014c40:	c1 e3 05             	shl    ebx,0x5
c0014c43:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014c47:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014c4a:	75 75                	jne    c0014cc1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014c4c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014c4f:	31 d2                	xor    edx,edx
c0014c51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c55:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c5c:	50                   	push   eax
c0014c5d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014c60:	52                   	push   edx
c0014c61:	50                   	push   eax
c0014c62:	55                   	push   ebp
c0014c63:	e8 24 6d ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0014c68:	83 c4 10             	add    esp,0x10
c0014c6b:	85 c0                	test   eax,eax
c0014c6d:	0f 85 74 05 00 00    	jne    c00151e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014c73:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014c7a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014c7d:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014c81:	31 d2                	xor    edx,edx
c0014c83:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014c87:	83 ec 0c             	sub    esp,0xc
c0014c8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c8e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c95:	50                   	push   eax
c0014c96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c9e:	52                   	push   edx
c0014c9f:	50                   	push   eax
c0014ca0:	55                   	push   ebp
c0014ca1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ca4:	83 c4 1c             	add    esp,0x1c
c0014ca7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014caa:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014cad:	50                   	push   eax
c0014cae:	6a 00                	push   0x0
c0014cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cb4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014cb8:	50                   	push   eax
c0014cb9:	e8 32 b8 fe ff       	call   c00004f0 <memset>
c0014cbe:	83 c4 10             	add    esp,0x10
c0014cc1:	46                   	inc    esi
c0014cc2:	e9 6c ff ff ff       	jmp    c0014c33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014cc7:	53                   	push   ebx
c0014cc8:	31 db                	xor    ebx,ebx
c0014cca:	68 00 01 00 00       	push   0x100
c0014ccf:	6a 00                	push   0x0
c0014cd1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014cd5:	50                   	push   eax
c0014cd6:	e8 15 b8 fe ff       	call   c00004f0 <memset>
c0014cdb:	83 c4 0c             	add    esp,0xc
c0014cde:	68 00 01 00 00       	push   0x100
c0014ce3:	6a 00                	push   0x0
c0014ce5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014cec:	50                   	push   eax
c0014ced:	e8 fe b7 fe ff       	call   c00004f0 <memset>
c0014cf2:	83 c4 10             	add    esp,0x10
c0014cf5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014cfd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014d05:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014d0d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d15:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014d1d:	0f b7 f3             	movzx  esi,bx
c0014d20:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014d24:	0f 83 2d 01 00 00    	jae    c0014e57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014d2a:	6b f6 28             	imul   esi,esi,0x28
c0014d2d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014d31:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014d34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d38:	52                   	push   edx
c0014d39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d3d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014d41:	8b 06                	mov    eax,DWORD PTR [esi]
c0014d43:	6b d2 28             	imul   edx,edx,0x28
c0014d46:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014d4a:	31 d2                	xor    edx,edx
c0014d4c:	52                   	push   edx
c0014d4d:	50                   	push   eax
c0014d4e:	55                   	push   ebp
c0014d4f:	e8 38 6c ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0014d54:	83 c4 0c             	add    esp,0xc
c0014d57:	6a 20                	push   0x20
c0014d59:	6a 00                	push   0x0
c0014d5b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d62:	51                   	push   ecx
c0014d63:	e8 88 b7 fe ff       	call   c00004f0 <memset>
c0014d68:	59                   	pop    ecx
c0014d69:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014d6c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014d70:	52                   	push   edx
c0014d71:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014d78:	51                   	push   ecx
c0014d79:	6a 00                	push   0x0
c0014d7b:	6a 1f                	push   0x1f
c0014d7d:	55                   	push   ebp
c0014d7e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d81:	83 c4 1c             	add    esp,0x1c
c0014d84:	6a 09                	push   0x9
c0014d86:	68 77 23 02 c0       	push   0xc0022377
c0014d8b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d92:	51                   	push   ecx
c0014d93:	e8 e8 b5 fe ff       	call   c0000380 <memcmp>
c0014d98:	83 c4 10             	add    esp,0x10
c0014d9b:	85 c0                	test   eax,eax
c0014d9d:	75 21                	jne    c0014dc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014da3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014da7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014dab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014daf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014db2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014db9:	89 d0                	mov    eax,edx
c0014dbb:	40                   	inc    eax
c0014dbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014dc0:	50                   	push   eax
c0014dc1:	6a 09                	push   0x9
c0014dc3:	68 81 23 02 c0       	push   0xc0022381
c0014dc8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014dcf:	50                   	push   eax
c0014dd0:	e8 ab b5 fe ff       	call   c0000380 <memcmp>
c0014dd5:	83 c4 10             	add    esp,0x10
c0014dd8:	85 c0                	test   eax,eax
c0014dda:	75 21                	jne    c0014dfd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014de0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014de4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014de8:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014dec:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014def:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014df6:	89 d0                	mov    eax,edx
c0014df8:	40                   	inc    eax
c0014df9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014dfd:	50                   	push   eax
c0014dfe:	50                   	push   eax
c0014dff:	68 4d 23 02 c0       	push   0xc002234d
c0014e04:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e0b:	50                   	push   eax
c0014e0c:	e8 3f b9 fe ff       	call   c0000750 <strcmp>
c0014e11:	83 c4 10             	add    esp,0x10
c0014e14:	85 c0                	test   eax,eax
c0014e16:	75 0f                	jne    c0014e27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014e18:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014e23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e27:	50                   	push   eax
c0014e28:	50                   	push   eax
c0014e29:	68 55 23 02 c0       	push   0xc0022355
c0014e2e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e35:	50                   	push   eax
c0014e36:	e8 15 b9 fe ff       	call   c0000750 <strcmp>
c0014e3b:	83 c4 10             	add    esp,0x10
c0014e3e:	85 c0                	test   eax,eax
c0014e40:	75 0f                	jne    c0014e51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014e42:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014e4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014e51:	43                   	inc    ebx
c0014e52:	e9 c6 fe ff ff       	jmp    c0014d1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014e57:	31 d2                	xor    edx,edx
c0014e59:	50                   	push   eax
c0014e5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e5e:	52                   	push   edx
c0014e5f:	50                   	push   eax
c0014e60:	55                   	push   ebp
c0014e61:	e8 26 6b ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0014e66:	58                   	pop    eax
c0014e67:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e6b:	e8 46 2c ff ff       	call   c0007ab6 <malloc>
c0014e70:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014e73:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014e77:	31 d2                	xor    edx,edx
c0014e79:	58                   	pop    eax
c0014e7a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014e7e:	53                   	push   ebx
c0014e7f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014e83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e87:	52                   	push   edx
c0014e88:	50                   	push   eax
c0014e89:	55                   	push   ebp
c0014e8a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e8d:	83 c4 14             	add    esp,0x14
c0014e90:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014e94:	e8 1d 2c ff ff       	call   c0007ab6 <malloc>
c0014e99:	31 d2                	xor    edx,edx
c0014e9b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e9f:	83 c4 0c             	add    esp,0xc
c0014ea2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014ea6:	52                   	push   edx
c0014ea7:	50                   	push   eax
c0014ea8:	55                   	push   ebp
c0014ea9:	e8 de 6a ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0014eae:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014eb1:	31 d2                	xor    edx,edx
c0014eb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014eba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014ebe:	52                   	push   edx
c0014ebf:	50                   	push   eax
c0014ec0:	55                   	push   ebp
c0014ec1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ec4:	83 c4 20             	add    esp,0x20
c0014ec7:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014ecc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014ed4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014ed8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014edc:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014ee0:	0f 84 05 03 00 00    	je     c00151eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014ee6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014eed:	31 d2                	xor    edx,edx
c0014eef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ef3:	c1 e8 03             	shr    eax,0x3
c0014ef6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014efa:	51                   	push   ecx
c0014efb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014eff:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014f03:	52                   	push   edx
c0014f04:	50                   	push   eax
c0014f05:	55                   	push   ebp
c0014f06:	e8 81 6a ff ff       	call   c000b98c <File::seek(unsigned long long)>
c0014f0b:	5b                   	pop    ebx
c0014f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f10:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014f17:	e8 9a 2b ff ff       	call   c0007ab6 <malloc>
c0014f1c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f23:	31 d2                	xor    edx,edx
c0014f25:	5e                   	pop    esi
c0014f26:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014f2a:	50                   	push   eax
c0014f2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f33:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014f3a:	52                   	push   edx
c0014f3b:	50                   	push   eax
c0014f3c:	55                   	push   ebp
c0014f3d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f40:	83 c4 20             	add    esp,0x20
c0014f43:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014f4b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014f4f:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014f53:	0f 8d 76 02 00 00    	jge    c00151cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014f59:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014f5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f61:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014f66:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014f69:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014f6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f71:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014f75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f79:	c1 e8 08             	shr    eax,0x8
c0014f7c:	89 c6                	mov    esi,eax
c0014f7e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014f82:	c1 e6 04             	shl    esi,0x4
c0014f85:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014f89:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014f8c:	85 db                	test   ebx,ebx
c0014f8e:	0f 85 b3 00 00 00    	jne    c0015047 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014f94:	83 ec 0c             	sub    esp,0xc
c0014f97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f9b:	03 06                	add    eax,DWORD PTR [esi]
c0014f9d:	50                   	push   eax
c0014f9e:	e8 3d f8 ff ff       	call   c00147e0 <Thr::getAddressOfKernelSymbol(char const*)>
c0014fa3:	83 c4 10             	add    esp,0x10
c0014fa6:	89 c3                	mov    ebx,eax
c0014fa8:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014fad:	85 c0                	test   eax,eax
c0014faf:	0f 85 92 00 00 00    	jne    c0015047 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014fb5:	83 ec 0c             	sub    esp,0xc
c0014fb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014fbc:	03 06                	add    eax,DWORD PTR [esi]
c0014fbe:	50                   	push   eax
c0014fbf:	e8 78 c5 ff ff       	call   c001153c <KeResolveCompatibilitySymbol(char*)>
c0014fc4:	83 c4 10             	add    esp,0x10
c0014fc7:	89 c3                	mov    ebx,eax
c0014fc9:	85 c0                	test   eax,eax
c0014fcb:	75 7a                	jne    c0015047 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014fcd:	51                   	push   ecx
c0014fce:	51                   	push   ecx
c0014fcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014fd3:	03 06                	add    eax,DWORD PTR [esi]
c0014fd5:	50                   	push   eax
c0014fd6:	68 8b 23 02 c0       	push   0xc002238b
c0014fdb:	e8 65 59 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014fe0:	58                   	pop    eax
c0014fe1:	5a                   	pop    edx
c0014fe2:	68 a5 23 02 c0       	push   0xc00223a5
c0014fe7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014fee:	50                   	push   eax
c0014fef:	e8 4c b6 fe ff       	call   c0000640 <strcpy>
c0014ff4:	59                   	pop    ecx
c0014ff5:	58                   	pop    eax
c0014ff6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014ffa:	03 06                	add    eax,DWORD PTR [esi]
c0014ffc:	50                   	push   eax
c0014ffd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015004:	50                   	push   eax
c0015005:	e8 36 b8 fe ff       	call   c0000840 <strcat>
c001500a:	58                   	pop    eax
c001500b:	5a                   	pop    edx
c001500c:	68 3b 24 02 c0       	push   0xc002243b
c0015011:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015018:	50                   	push   eax
c0015019:	e8 22 b8 fe ff       	call   c0000840 <strcat>
c001501e:	83 c4 10             	add    esp,0x10
c0015021:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015026:	0f 84 5d 01 00 00    	je     c0015189 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001502c:	83 ec 0c             	sub    esp,0xc
c001502f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015036:	50                   	push   eax
c0015037:	e8 15 c3 ff ff       	call   c0011351 <KePanic(char const*)>
c001503c:	83 c4 10             	add    esp,0x10
c001503f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015043:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0015047:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001504c:	83 f8 01             	cmp    eax,0x1
c001504f:	0f 85 8f 00 00 00    	jne    c00150e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0015055:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001505c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0015060:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015064:	01 ce                	add    esi,ecx
c0015066:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001506e:	0f 94 c0             	sete   al
c0015071:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015079:	0f 94 c2             	sete   dl
c001507c:	09 c2                	or     edx,eax
c001507e:	8b 06                	mov    eax,DWORD PTR [esi]
c0015080:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015085:	0f b6 d2             	movzx  edx,dl
c0015088:	74 41                	je     c00150cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c001508a:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c001508d:	85 d2                	test   edx,edx
c001508f:	75 15                	jne    c00150a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0015091:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015095:	66 83 f8 0c          	cmp    ax,0xc
c0015099:	76 05                	jbe    c00150a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c001509b:	b8 0c 00 00 00       	mov    eax,0xc
c00150a0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00150a4:	76 37                	jbe    c00150dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00150a6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00150aa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00150af:	0f 84 d4 00 00 00    	je     c0015189 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00150b5:	83 ec 0c             	sub    esp,0xc
c00150b8:	68 bc 23 02 c0       	push   0xc00223bc
c00150bd:	e8 8f c2 ff ff       	call   c0011351 <KePanic(char const*)>
c00150c2:	83 c4 10             	add    esp,0x10
c00150c5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00150c9:	eb 12                	jmp    c00150dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00150cb:	01 c1                	add    ecx,eax
c00150cd:	85 d2                	test   edx,edx
c00150cf:	75 0c                	jne    c00150dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00150d1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00150d5:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00150d9:	77 02                	ja     c00150dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00150db:	01 d9                	add    ecx,ebx
c00150dd:	89 0e                	mov    DWORD PTR [esi],ecx
c00150df:	e9 e2 00 00 00       	jmp    c00151c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00150e4:	83 f8 02             	cmp    eax,0x2
c00150e7:	75 77                	jne    c0015160 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00150e9:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00150f0:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00150f4:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00150f8:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015100:	74 21                	je     c0015123 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015102:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001510a:	74 17                	je     c0015123 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001510c:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0015110:	b8 0a 00 00 00       	mov    eax,0xa
c0015115:	83 fa 0e             	cmp    edx,0xe
c0015118:	77 03                	ja     c001511d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c001511a:	8d 42 fc             	lea    eax,[edx-0x4]
c001511d:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015121:	76 17                	jbe    c001513a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0015123:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015128:	74 5f                	je     c0015189 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001512a:	83 ec 0c             	sub    esp,0xc
c001512d:	68 d8 23 02 c0       	push   0xc00223d8
c0015132:	e8 1a c2 ff ff       	call   c0011351 <KePanic(char const*)>
c0015137:	83 c4 10             	add    esp,0x10
c001513a:	8b 06                	mov    eax,DWORD PTR [esi]
c001513c:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015141:	74 13                	je     c0015156 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0015143:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015147:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001514e:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0015152:	01 d0                	add    eax,edx
c0015154:	eb 04                	jmp    c001515a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015156:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001515a:	01 c3                	add    ebx,eax
c001515c:	89 1e                	mov    DWORD PTR [esi],ebx
c001515e:	eb 66                	jmp    c00151c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015160:	52                   	push   edx
c0015161:	52                   	push   edx
c0015162:	50                   	push   eax
c0015163:	68 f4 23 02 c0       	push   0xc00223f4
c0015168:	e8 d8 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001516d:	83 c4 10             	add    esp,0x10
c0015170:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015175:	74 12                	je     c0015189 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015177:	83 ec 0c             	sub    esp,0xc
c001517a:	68 ff 23 02 c0       	push   0xc00223ff
c001517f:	e8 cd c1 ff ff       	call   c0011351 <KePanic(char const*)>
c0015184:	83 c4 10             	add    esp,0x10
c0015187:	eb 3d                	jmp    c00151c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015189:	83 ec 0c             	sub    esp,0xc
c001518c:	55                   	push   ebp
c001518d:	e8 9a 67 ff ff       	call   c000b92c <File::close()>
c0015192:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015195:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015198:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001519b:	59                   	pop    ecx
c001519c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151a0:	e8 21 29 ff ff       	call   c0007ac6 <free>
c00151a5:	5b                   	pop    ebx
c00151a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00151aa:	e8 17 29 ff ff       	call   c0007ac6 <free>
c00151af:	89 3c 24             	mov    DWORD PTR [esp],edi
c00151b2:	e8 0f 29 ff ff       	call   c0007ac6 <free>
c00151b7:	5e                   	pop    esi
c00151b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151bc:	e8 05 29 ff ff       	call   c0007ac6 <free>
c00151c1:	83 c4 10             	add    esp,0x10
c00151c4:	eb 21                	jmp    c00151e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00151c6:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00151ca:	e9 7c fd ff ff       	jmp    c0014f4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00151cf:	83 ec 0c             	sub    esp,0xc
c00151d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151d6:	e8 eb 28 ff ff       	call   c0007ac6 <free>
c00151db:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00151df:	83 c4 10             	add    esp,0x10
c00151e2:	e9 f1 fc ff ff       	jmp    c0014ed8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00151e7:	31 c0                	xor    eax,eax
c00151e9:	eb 33                	jmp    c001521e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00151eb:	83 ec 0c             	sub    esp,0xc
c00151ee:	55                   	push   ebp
c00151ef:	e8 38 67 ff ff       	call   c000b92c <File::close()>
c00151f4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00151f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00151fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151fd:	58                   	pop    eax
c00151fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015202:	e8 bf 28 ff ff       	call   c0007ac6 <free>
c0015207:	89 3c 24             	mov    DWORD PTR [esp],edi
c001520a:	e8 b7 28 ff ff       	call   c0007ac6 <free>
c001520f:	5a                   	pop    edx
c0015210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015214:	e8 ad 28 ff ff       	call   c0007ac6 <free>
c0015219:	83 c4 10             	add    esp,0x10
c001521c:	b0 01                	mov    al,0x1
c001521e:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015224:	5b                   	pop    ebx
c0015225:	5e                   	pop    esi
c0015226:	5f                   	pop    edi
c0015227:	5d                   	pop    ebp
c0015228:	c3                   	ret    

c0015229 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015229:	56                   	push   esi
c001522a:	31 d2                	xor    edx,edx
c001522c:	53                   	push   ebx
c001522d:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015233:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015237:	39 d3                	cmp    ebx,edx
c0015239:	7e 1b                	jle    c0015256 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001523b:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c0015242:	39 c8                	cmp    eax,ecx
c0015244:	77 0d                	ja     c0015253 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015246:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c001524d:	01 c6                	add    esi,eax
c001524f:	39 ce                	cmp    esi,ecx
c0015251:	77 05                	ja     c0015258 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015253:	42                   	inc    edx
c0015254:	eb e1                	jmp    c0015237 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015256:	31 c0                	xor    eax,eax
c0015258:	5b                   	pop    ebx
c0015259:	5e                   	pop    esi
c001525a:	c3                   	ret    

c001525b <Thr::getDriverNameFromAddress(unsigned long)>:
c001525b:	53                   	push   ebx
c001525c:	31 c0                	xor    eax,eax
c001525e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015262:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015268:	39 c3                	cmp    ebx,eax
c001526a:	7e 22                	jle    c001528e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001526c:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c0015273:	39 ca                	cmp    edx,ecx
c0015275:	77 14                	ja     c001528b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015277:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c001527e:	39 ca                	cmp    edx,ecx
c0015280:	76 09                	jbe    c001528b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015282:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c0015289:	eb 05                	jmp    c0015290 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001528b:	40                   	inc    eax
c001528c:	eb da                	jmp    c0015268 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001528e:	31 c0                	xor    eax,eax
c0015290:	5b                   	pop    ebx
c0015291:	c3                   	ret    

c0015292 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015292:	53                   	push   ebx
c0015293:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015297:	53                   	push   ebx
c0015298:	e8 8c ff ff ff       	call   c0015229 <Thr::getDriverBaseFromAddress(unsigned long)>
c001529d:	5a                   	pop    edx
c001529e:	31 d2                	xor    edx,edx
c00152a0:	85 c0                	test   eax,eax
c00152a2:	74 04                	je     c00152a8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00152a4:	89 da                	mov    edx,ebx
c00152a6:	29 c2                	sub    edx,eax
c00152a8:	89 d0                	mov    eax,edx
c00152aa:	5b                   	pop    ebx
c00152ab:	c3                   	ret    

c00152ac <Thr::loadDLL(char const*, bool)>:
c00152ac:	55                   	push   ebp
c00152ad:	57                   	push   edi
c00152ae:	56                   	push   esi
c00152af:	53                   	push   ebx
c00152b0:	81 ec 34 01 00 00    	sub    esp,0x134
c00152b6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00152bd:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00152c4:	56                   	push   esi
c00152c5:	68 17 24 02 c0       	push   0xc0022417
c00152ca:	e8 76 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00152cf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00152d6:	e8 db 27 ff ff       	call   c0007ab6 <malloc>
c00152db:	6a 01                	push   0x1
c00152dd:	89 c3                	mov    ebx,eax
c00152df:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00152e5:	56                   	push   esi
c00152e6:	50                   	push   eax
c00152e7:	e8 04 65 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c00152ec:	83 c4 20             	add    esp,0x20
c00152ef:	85 db                	test   ebx,ebx
c00152f1:	75 3c                	jne    c001532f <Thr::loadDLL(char const*, bool)+0x83>
c00152f3:	89 f8                	mov    eax,edi
c00152f5:	84 c0                	test   al,al
c00152f7:	0f 84 d2 01 00 00    	je     c00154cf <Thr::loadDLL(char const*, bool)+0x223>
c00152fd:	55                   	push   ebp
c00152fe:	55                   	push   ebp
c00152ff:	68 28 24 02 c0       	push   0xc0022428
c0015304:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0015308:	55                   	push   ebp
c0015309:	e8 32 b3 fe ff       	call   c0000640 <strcpy>
c001530e:	58                   	pop    eax
c001530f:	5a                   	pop    edx
c0015310:	56                   	push   esi
c0015311:	55                   	push   ebp
c0015312:	e8 29 b5 fe ff       	call   c0000840 <strcat>
c0015317:	59                   	pop    ecx
c0015318:	58                   	pop    eax
c0015319:	68 3b 24 02 c0       	push   0xc002243b
c001531e:	55                   	push   ebp
c001531f:	e8 1c b5 fe ff       	call   c0000840 <strcat>
c0015324:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015327:	e8 25 c0 ff ff       	call   c0011351 <KePanic(char const*)>
c001532c:	83 c4 10             	add    esp,0x10
c001532f:	51                   	push   ecx
c0015330:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015334:	50                   	push   eax
c0015335:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015339:	50                   	push   eax
c001533a:	53                   	push   ebx
c001533b:	e8 90 68 ff ff       	call   c000bbd0 <File::stat(unsigned long long*, bool*)>
c0015340:	83 c4 10             	add    esp,0x10
c0015343:	85 db                	test   ebx,ebx
c0015345:	74 0c                	je     c0015353 <Thr::loadDLL(char const*, bool)+0xa7>
c0015347:	83 ec 0c             	sub    esp,0xc
c001534a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001534c:	53                   	push   ebx
c001534d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015350:	83 c4 10             	add    esp,0x10
c0015353:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015358:	75 0a                	jne    c0015364 <Thr::loadDLL(char const*, bool)+0xb8>
c001535a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001535e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015362:	75 3c                	jne    c00153a0 <Thr::loadDLL(char const*, bool)+0xf4>
c0015364:	89 f8                	mov    eax,edi
c0015366:	84 c0                	test   al,al
c0015368:	0f 84 49 01 00 00    	je     c00154b7 <Thr::loadDLL(char const*, bool)+0x20b>
c001536e:	51                   	push   ecx
c001536f:	51                   	push   ecx
c0015370:	68 28 24 02 c0       	push   0xc0022428
c0015375:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015379:	53                   	push   ebx
c001537a:	e8 c1 b2 fe ff       	call   c0000640 <strcpy>
c001537f:	5d                   	pop    ebp
c0015380:	58                   	pop    eax
c0015381:	56                   	push   esi
c0015382:	53                   	push   ebx
c0015383:	e8 b8 b4 fe ff       	call   c0000840 <strcat>
c0015388:	58                   	pop    eax
c0015389:	5a                   	pop    edx
c001538a:	68 3b 24 02 c0       	push   0xc002243b
c001538f:	53                   	push   ebx
c0015390:	e8 ab b4 fe ff       	call   c0000840 <strcat>
c0015395:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015398:	e8 b4 bf ff ff       	call   c0011351 <KePanic(char const*)>
c001539d:	83 c4 10             	add    esp,0x10
c00153a0:	52                   	push   edx
c00153a1:	6a 03                	push   0x3
c00153a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153a7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00153ab:	05 ff 0f 00 00       	add    eax,0xfff
c00153b0:	83 d2 00             	adc    edx,0x0
c00153b3:	0f ac d0 0c          	shrd   eax,edx,0xc
c00153b7:	50                   	push   eax
c00153b8:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00153be:	e8 61 4a ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00153c3:	59                   	pop    ecx
c00153c4:	89 c3                	mov    ebx,eax
c00153c6:	5d                   	pop    ebp
c00153c7:	50                   	push   eax
c00153c8:	68 12 0a 02 c0       	push   0xc0020a12
c00153cd:	e8 73 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00153d2:	89 34 24             	mov    DWORD PTR [esp],esi
c00153d5:	e8 96 b1 fe ff       	call   c0000570 <strlen>
c00153da:	8b 2d 00 8f 02 c0    	mov    ebp,DWORD PTR ds:0xc0028f00
c00153e0:	40                   	inc    eax
c00153e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00153e4:	e8 cd 26 ff ff       	call   c0007ab6 <malloc>
c00153e9:	89 04 ad 20 93 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6ce0],eax
c00153f0:	58                   	pop    eax
c00153f1:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00153f6:	5a                   	pop    edx
c00153f7:	56                   	push   esi
c00153f8:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c00153ff:	e8 3c b2 fe ff       	call   c0000640 <strcpy>
c0015404:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015409:	8d 50 01             	lea    edx,[eax+0x1]
c001540c:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c0015413:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c0015419:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001541d:	83 c4 0c             	add    esp,0xc
c0015420:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c0015427:	6a 01                	push   0x1
c0015429:	53                   	push   ebx
c001542a:	56                   	push   esi
c001542b:	e8 c0 f6 ff ff       	call   c0014af0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015430:	83 c4 10             	add    esp,0x10
c0015433:	0f b6 c0             	movzx  eax,al
c0015436:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001543a:	85 c0                	test   eax,eax
c001543c:	0f 85 89 00 00 00    	jne    c00154cb <Thr::loadDLL(char const*, bool)+0x21f>
c0015442:	89 f8                	mov    eax,edi
c0015444:	84 c0                	test   al,al
c0015446:	74 73                	je     c00154bb <Thr::loadDLL(char const*, bool)+0x20f>
c0015448:	83 ec 0c             	sub    esp,0xc
c001544b:	68 3d 24 02 c0       	push   0xc002243d
c0015450:	e8 fc be ff ff       	call   c0011351 <KePanic(char const*)>
c0015455:	83 c4 10             	add    esp,0x10
c0015458:	eb 61                	jmp    c00154bb <Thr::loadDLL(char const*, bool)+0x20f>
c001545a:	50                   	push   eax
c001545b:	50                   	push   eax
c001545c:	89 e8                	mov    eax,ebp
c001545e:	c1 e0 0c             	shl    eax,0xc
c0015461:	01 d8                	add    eax,ebx
c0015463:	50                   	push   eax
c0015464:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001546a:	e8 9d 44 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c001546f:	83 c4 10             	add    esp,0x10
c0015472:	8b 00                	mov    eax,DWORD PTR [eax]
c0015474:	a8 60                	test   al,0x60
c0015476:	75 11                	jne    c0015489 <Thr::loadDLL(char const*, bool)+0x1dd>
c0015478:	83 ec 0c             	sub    esp,0xc
c001547b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015480:	50                   	push   eax
c0015481:	e8 d0 28 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0015486:	83 c4 10             	add    esp,0x10
c0015489:	45                   	inc    ebp
c001548a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001548e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015492:	05 ff 0f 00 00       	add    eax,0xfff
c0015497:	bf 00 00 00 00       	mov    edi,0x0
c001549c:	83 d2 00             	adc    edx,0x0
c001549f:	0f ac d0 0c          	shrd   eax,edx,0xc
c00154a3:	c1 ea 0c             	shr    edx,0xc
c00154a6:	39 c5                	cmp    ebp,eax
c00154a8:	89 d1                	mov    ecx,edx
c00154aa:	89 f8                	mov    eax,edi
c00154ac:	19 c8                	sbb    eax,ecx
c00154ae:	72 aa                	jb     c001545a <Thr::loadDLL(char const*, bool)+0x1ae>
c00154b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00154b5:	75 18                	jne    c00154cf <Thr::loadDLL(char const*, bool)+0x223>
c00154b7:	31 db                	xor    ebx,ebx
c00154b9:	eb 14                	jmp    c00154cf <Thr::loadDLL(char const*, bool)+0x223>
c00154bb:	83 ec 0c             	sub    esp,0xc
c00154be:	68 5c 24 02 c0       	push   0xc002245c
c00154c3:	e8 89 be ff ff       	call   c0011351 <KePanic(char const*)>
c00154c8:	83 c4 10             	add    esp,0x10
c00154cb:	31 ed                	xor    ebp,ebp
c00154cd:	eb bb                	jmp    c001548a <Thr::loadDLL(char const*, bool)+0x1de>
c00154cf:	81 c4 2c 01 00 00    	add    esp,0x12c
c00154d5:	89 d8                	mov    eax,ebx
c00154d7:	5b                   	pop    ebx
c00154d8:	5e                   	pop    esi
c00154d9:	5f                   	pop    edi
c00154da:	5d                   	pop    ebp
c00154db:	c3                   	ret    

c00154dc <Thr::executeDLL(unsigned long, void*)>:
c00154dc:	56                   	push   esi
c00154dd:	53                   	push   ebx
c00154de:	52                   	push   edx
c00154df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00154e7:	85 db                	test   ebx,ebx
c00154e9:	75 10                	jne    c00154fb <Thr::executeDLL(unsigned long, void*)+0x1f>
c00154eb:	83 ec 0c             	sub    esp,0xc
c00154ee:	68 78 24 02 c0       	push   0xc0022478
c00154f3:	e8 59 be ff ff       	call   c0011351 <KePanic(char const*)>
c00154f8:	83 c4 10             	add    esp,0x10
c00154fb:	50                   	push   eax
c00154fc:	50                   	push   eax
c00154fd:	53                   	push   ebx
c00154fe:	68 a2 24 02 c0       	push   0xc00224a2
c0015503:	e8 3d 54 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015508:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001550c:	89 d8                	mov    eax,ebx
c001550e:	83 c4 14             	add    esp,0x14
c0015511:	5b                   	pop    ebx
c0015512:	5e                   	pop    esi
c0015513:	ff e0                	jmp    eax
c0015515:	66 90                	xchg   ax,ax
c0015517:	90                   	nop

c0015518 <userModeEntryPoint(void*)>:
c0015518:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001551d:	83 e8 01             	sub    eax,0x1
c0015520:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015525:	75 01                	jne    c0015528 <userModeEntryPoint(void*)+0x10>
c0015527:	fb                   	sti    
c0015528:	fb                   	sti    
c0015529:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001552e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015531:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015537:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001553b:	e9 ff ac fe ff       	jmp    c000023f <goToUsermode>

c0015540 <changeTSS>:
c0015540:	83 ec 14             	sub    esp,0x14
c0015543:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015548:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001554b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015550:	c1 e2 15             	shl    edx,0x15
c0015553:	29 d0                	sub    eax,edx
c0015555:	50                   	push   eax
c0015556:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001555b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015561:	05 7c 11 00 00       	add    eax,0x117c
c0015566:	50                   	push   eax
c0015567:	e8 e8 39 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c001556c:	83 c4 1c             	add    esp,0x1c
c001556f:	c3                   	ret    

c0015570 <switchToThread(ThreadControlBlock*)>:
c0015570:	57                   	push   edi
c0015571:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015577:	56                   	push   esi
c0015578:	85 c9                	test   ecx,ecx
c001557a:	53                   	push   ebx
c001557b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001557f:	0f 85 8b 00 00 00    	jne    c0015610 <switchToThread(ThreadControlBlock*)+0xa0>
c0015585:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015589:	81 fa ff 00 00 00    	cmp    edx,0xff
c001558f:	74 7b                	je     c001560c <switchToThread(ThreadControlBlock*)+0x9c>
c0015591:	b8 00 04 00 00       	mov    eax,0x400
c0015596:	29 d0                	sub    eax,edx
c0015598:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001559b:	d1 f8                	sar    eax,1
c001559d:	01 d0                	add    eax,edx
c001559f:	90                   	nop
c00155a0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00155a3:	e8 1d 28 00 00       	call   c0017dc5 <HalQueryPerformanceCounter()>
c00155a8:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c00155ad:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c00155b3:	89 c6                	mov    esi,eax
c00155b5:	89 d7                	mov    edi,edx
c00155b7:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c00155bd:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c00155c2:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c00155c8:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c00155ce:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c00155d4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00155da:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c00155e0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00155e3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00155e6:	01 c6                	add    esi,eax
c00155e8:	11 d7                	adc    edi,edx
c00155ea:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00155ed:	83 ec 0c             	sub    esp,0xc
c00155f0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00155f3:	53                   	push   ebx
c00155f4:	e8 7e ac fe ff       	call   c0000277 <switchToThreadASM>
c00155f9:	0f 20 c0             	mov    eax,cr0
c00155fc:	83 c8 08             	or     eax,0x8
c00155ff:	0f 22 c0             	mov    cr0,eax
c0015602:	83 c4 10             	add    esp,0x10
c0015605:	5b                   	pop    ebx
c0015606:	5e                   	pop    esi
c0015607:	5f                   	pop    edi
c0015608:	c3                   	ret    
c0015609:	8d 76 00             	lea    esi,[esi+0x0]
c001560c:	31 c0                	xor    eax,eax
c001560e:	eb 90                	jmp    c00155a0 <switchToThread(ThreadControlBlock*)+0x30>
c0015610:	5b                   	pop    ebx
c0015611:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c001561b:	5e                   	pop    esi
c001561c:	5f                   	pop    edi
c001561d:	c3                   	ret    
c001561e:	66 90                	xchg   ax,ax

c0015620 <Process::addArgs(char**)>:
c0015620:	57                   	push   edi
c0015621:	56                   	push   esi
c0015622:	53                   	push   ebx
c0015623:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015627:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001562b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015635:	85 ff                	test   edi,edi
c0015637:	74 4f                	je     c0015688 <Process::addArgs(char**)+0x68>
c0015639:	8b 07                	mov    eax,DWORD PTR [edi]
c001563b:	85 c0                	test   eax,eax
c001563d:	74 49                	je     c0015688 <Process::addArgs(char**)+0x68>
c001563f:	31 db                	xor    ebx,ebx
c0015641:	8d 76 00             	lea    esi,[esi+0x0]
c0015644:	83 ec 0c             	sub    esp,0xc
c0015647:	50                   	push   eax
c0015648:	e8 23 af fe ff       	call   c0000570 <strlen>
c001564d:	83 c0 01             	add    eax,0x1
c0015650:	89 04 24             	mov    DWORD PTR [esp],eax
c0015653:	e8 5e 24 ff ff       	call   c0007ab6 <malloc>
c0015658:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001565f:	5a                   	pop    edx
c0015660:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015663:	59                   	pop    ecx
c0015664:	83 c3 01             	add    ebx,0x1
c0015667:	52                   	push   edx
c0015668:	50                   	push   eax
c0015669:	e8 d2 af fe ff       	call   c0000640 <strcpy>
c001566e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015674:	83 c4 10             	add    esp,0x10
c0015677:	83 c1 01             	add    ecx,0x1
c001567a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015680:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015683:	85 c0                	test   eax,eax
c0015685:	75 bd                	jne    c0015644 <Process::addArgs(char**)+0x24>
c0015687:	90                   	nop
c0015688:	5b                   	pop    ebx
c0015689:	5e                   	pop    esi
c001568a:	5f                   	pop    edi
c001568b:	c3                   	ret    

c001568c <Process::Process(char const*, Process*, char**)>:
c001568c:	56                   	push   esi
c001568d:	53                   	push   ebx
c001568e:	83 ec 14             	sub    esp,0x14
c0015691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015695:	05 0c 02 00 00       	add    eax,0x20c
c001569a:	bb 07 00 00 00       	mov    ebx,0x7
c001569f:	89 c6                	mov    esi,eax
c00156a1:	8d 76 00             	lea    esi,[esi+0x0]
c00156a4:	85 db                	test   ebx,ebx
c00156a6:	78 14                	js     c00156bc <Process::Process(char const*, Process*, char**)+0x30>
c00156a8:	83 ec 0c             	sub    esp,0xc
c00156ab:	56                   	push   esi
c00156ac:	e8 e7 a5 00 00       	call   c001fc98 <ThreadControlBlock::ThreadControlBlock()>
c00156b1:	83 c4 10             	add    esp,0x10
c00156b4:	83 c6 5f             	add    esi,0x5f
c00156b7:	83 eb 01             	sub    ebx,0x1
c00156ba:	eb e8                	jmp    c00156a4 <Process::Process(char const*, Process*, char**)+0x18>
c00156bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156c0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00156c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156cb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00156d2:	83 ec 0c             	sub    esp,0xc
c00156d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156d9:	e8 68 ba ff ff       	call   c0011146 <KeNewProcessEnv(Process*)>
c00156de:	83 c4 10             	add    esp,0x10
c00156e1:	89 c2                	mov    edx,eax
c00156e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156e7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00156ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156f1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00156fa:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c00156ff:	8d 50 01             	lea    edx,[eax+0x1]
c0015702:	89 15 c0 36 02 c0    	mov    DWORD PTR ds:0xc00236c0,edx
c0015708:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001570c:	89 02                	mov    DWORD PTR [edx],eax
c001570e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015716:	83 ec 0c             	sub    esp,0xc
c0015719:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001571d:	e8 94 23 ff ff       	call   c0007ab6 <malloc>
c0015722:	83 c4 10             	add    esp,0x10
c0015725:	89 c3                	mov    ebx,eax
c0015727:	83 ec 08             	sub    esp,0x8
c001572a:	6a 00                	push   0x0
c001572c:	53                   	push   ebx
c001572d:	e8 36 49 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015732:	83 c4 10             	add    esp,0x10
c0015735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015739:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001573f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015743:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001574d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015751:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015755:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001575b:	e8 0a c0 ff ff       	call   c001176a <KeInitSignals()>
c0015760:	89 c2                	mov    edx,eax
c0015762:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015766:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001576c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015770:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015776:	85 c0                	test   eax,eax
c0015778:	74 42                	je     c00157bc <Process::Process(char const*, Process*, char**)+0x130>
c001577a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001577e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015784:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001578a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001578e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015798:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001579e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00157a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157a8:	05 0c 01 00 00       	add    eax,0x10c
c00157ad:	83 ec 08             	sub    esp,0x8
c00157b0:	52                   	push   edx
c00157b1:	50                   	push   eax
c00157b2:	e8 89 ae fe ff       	call   c0000640 <strcpy>
c00157b7:	83 c4 10             	add    esp,0x10
c00157ba:	eb 64                	jmp    c0015820 <Process::Process(char const*, Process*, char**)+0x194>
c00157bc:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00157c4:	83 ec 0c             	sub    esp,0xc
c00157c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00157cb:	e8 e6 22 ff ff       	call   c0007ab6 <malloc>
c00157d0:	83 c4 10             	add    esp,0x10
c00157d3:	89 c3                	mov    ebx,eax
c00157d5:	83 ec 08             	sub    esp,0x8
c00157d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157dc:	53                   	push   ebx
c00157dd:	e8 84 34 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c00157e2:	83 c4 10             	add    esp,0x10
c00157e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157e9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00157ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00157f9:	83 ec 0c             	sub    esp,0xc
c00157fc:	50                   	push   eax
c00157fd:	e8 02 2d ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015802:	83 c4 10             	add    esp,0x10
c0015805:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015809:	05 0c 01 00 00       	add    eax,0x10c
c001580e:	83 ec 08             	sub    esp,0x8
c0015811:	68 c1 24 02 c0       	push   0xc00224c1
c0015816:	50                   	push   eax
c0015817:	e8 24 ae fe ff       	call   c0000640 <strcpy>
c001581c:	83 c4 10             	add    esp,0x10
c001581f:	90                   	nop
c0015820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015824:	83 c0 0c             	add    eax,0xc
c0015827:	83 ec 08             	sub    esp,0x8
c001582a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001582e:	50                   	push   eax
c001582f:	e8 0c ae fe ff       	call   c0000640 <strcpy>
c0015834:	83 c4 10             	add    esp,0x10
c0015837:	83 ec 08             	sub    esp,0x8
c001583a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001583e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015842:	e8 d9 fd ff ff       	call   c0015620 <Process::addArgs(char**)>
c0015847:	83 c4 10             	add    esp,0x10
c001584a:	83 ec 08             	sub    esp,0x8
c001584d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015851:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015855:	e8 61 ed ff ff       	call   c00145bb <Thr::loadProgramIntoMemory(Process*, char const*)>
c001585a:	83 c4 10             	add    esp,0x10
c001585d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015861:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015865:	83 f0 01             	xor    eax,0x1
c0015868:	88 c2                	mov    dl,al
c001586a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001586e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015874:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015879:	83 ec 04             	sub    esp,0x4
c001587c:	50                   	push   eax
c001587d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015881:	68 18 25 02 c0       	push   0xc0022518
c0015886:	e8 ba 50 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001588b:	83 c4 10             	add    esp,0x10
c001588e:	90                   	nop
c001588f:	83 c4 14             	add    esp,0x14
c0015892:	5b                   	pop    ebx
c0015893:	5e                   	pop    esi
c0015894:	c3                   	ret    
c0015895:	90                   	nop
c0015896:	66 90                	xchg   ax,ax

c0015898 <Process::Process(bool, char const*, Process*, char**)>:
c0015898:	56                   	push   esi
c0015899:	53                   	push   ebx
c001589a:	83 ec 24             	sub    esp,0x24
c001589d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00158a1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00158a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158a9:	05 0c 02 00 00       	add    eax,0x20c
c00158ae:	bb 07 00 00 00       	mov    ebx,0x7
c00158b3:	89 c6                	mov    esi,eax
c00158b5:	8d 76 00             	lea    esi,[esi+0x0]
c00158b8:	85 db                	test   ebx,ebx
c00158ba:	78 14                	js     c00158d0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00158bc:	83 ec 0c             	sub    esp,0xc
c00158bf:	56                   	push   esi
c00158c0:	e8 d3 a3 00 00       	call   c001fc98 <ThreadControlBlock::ThreadControlBlock()>
c00158c5:	83 c4 10             	add    esp,0x10
c00158c8:	83 c6 5f             	add    esi,0x5f
c00158cb:	83 eb 01             	sub    ebx,0x1
c00158ce:	eb e8                	jmp    c00158b8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00158d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158d4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00158db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158df:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00158e6:	83 ec 0c             	sub    esp,0xc
c00158e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00158ed:	e8 54 b8 ff ff       	call   c0011146 <KeNewProcessEnv(Process*)>
c00158f2:	83 c4 10             	add    esp,0x10
c00158f5:	89 c2                	mov    edx,eax
c00158f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158fb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015901:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015905:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001590e:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c0015913:	8d 50 01             	lea    edx,[eax+0x1]
c0015916:	89 15 c0 36 02 c0    	mov    DWORD PTR ds:0xc00236c0,edx
c001591c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015920:	89 02                	mov    DWORD PTR [edx],eax
c0015922:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001592a:	83 ec 0c             	sub    esp,0xc
c001592d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015931:	e8 80 21 ff ff       	call   c0007ab6 <malloc>
c0015936:	83 c4 10             	add    esp,0x10
c0015939:	89 c3                	mov    ebx,eax
c001593b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015940:	83 ec 08             	sub    esp,0x8
c0015943:	50                   	push   eax
c0015944:	53                   	push   ebx
c0015945:	e8 1e 47 ff ff       	call   c000a068 <VAS::VAS(bool)>
c001594a:	83 c4 10             	add    esp,0x10
c001594d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015951:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015957:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001595b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015969:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001596d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015973:	e8 f2 bd ff ff       	call   c001176a <KeInitSignals()>
c0015978:	89 c2                	mov    edx,eax
c001597a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001597e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015984:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015988:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001598e:	85 c0                	test   eax,eax
c0015990:	74 42                	je     c00159d4 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015992:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015996:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001599c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00159a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159a6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00159ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159b0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00159b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00159bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159c0:	05 0c 01 00 00       	add    eax,0x10c
c00159c5:	83 ec 08             	sub    esp,0x8
c00159c8:	52                   	push   edx
c00159c9:	50                   	push   eax
c00159ca:	e8 71 ac fe ff       	call   c0000640 <strcpy>
c00159cf:	83 c4 10             	add    esp,0x10
c00159d2:	eb 64                	jmp    c0015a38 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00159d4:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00159dc:	83 ec 0c             	sub    esp,0xc
c00159df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00159e3:	e8 ce 20 ff ff       	call   c0007ab6 <malloc>
c00159e8:	83 c4 10             	add    esp,0x10
c00159eb:	89 c3                	mov    ebx,eax
c00159ed:	83 ec 08             	sub    esp,0x8
c00159f0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00159f4:	53                   	push   ebx
c00159f5:	e8 6c 32 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c00159fa:	83 c4 10             	add    esp,0x10
c00159fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a01:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015a07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015a11:	83 ec 0c             	sub    esp,0xc
c0015a14:	50                   	push   eax
c0015a15:	e8 ea 2a ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015a1a:	83 c4 10             	add    esp,0x10
c0015a1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a21:	05 0c 01 00 00       	add    eax,0x10c
c0015a26:	83 ec 08             	sub    esp,0x8
c0015a29:	68 c1 24 02 c0       	push   0xc00224c1
c0015a2e:	50                   	push   eax
c0015a2f:	e8 0c ac fe ff       	call   c0000640 <strcpy>
c0015a34:	83 c4 10             	add    esp,0x10
c0015a37:	90                   	nop
c0015a38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a3c:	83 c0 0c             	add    eax,0xc
c0015a3f:	83 ec 08             	sub    esp,0x8
c0015a42:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015a46:	50                   	push   eax
c0015a47:	e8 f4 ab fe ff       	call   c0000640 <strcpy>
c0015a4c:	83 c4 10             	add    esp,0x10
c0015a4f:	83 ec 08             	sub    esp,0x8
c0015a52:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015a56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015a5a:	e8 c1 fb ff ff       	call   c0015620 <Process::addArgs(char**)>
c0015a5f:	83 c4 10             	add    esp,0x10
c0015a62:	90                   	nop
c0015a63:	83 c4 24             	add    esp,0x24
c0015a66:	5b                   	pop    ebx
c0015a67:	5e                   	pop    esi
c0015a68:	c3                   	ret    
c0015a69:	8d 76 00             	lea    esi,[esi+0x0]

c0015a6c <taskStartupFunction>:
c0015a6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a71:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015a74:	c3                   	ret    
c0015a75:	90                   	nop
c0015a76:	66 90                	xchg   ax,ax

c0015a78 <Semaphore::Semaphore(int)>:
c0015a78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015a80:	89 10                	mov    DWORD PTR [eax],edx
c0015a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a86:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015a8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a9c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015aa3:	90                   	nop
c0015aa4:	c3                   	ret    
c0015aa5:	90                   	nop
c0015aa6:	66 90                	xchg   ax,ax

c0015aa8 <Mutex::Mutex()>:
c0015aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015aac:	6a 01                	push   0x1
c0015aae:	50                   	push   eax
c0015aaf:	e8 c4 ff ff ff       	call   c0015a78 <Semaphore::Semaphore(int)>
c0015ab4:	83 c4 08             	add    esp,0x8
c0015ab7:	90                   	nop
c0015ab8:	c3                   	ret    
c0015ab9:	90                   	nop
c0015aba:	66 90                	xchg   ax,ax

c0015abc <Process::createThread(void (*)(void*), void*, int)>:
c0015abc:	57                   	push   edi
c0015abd:	31 c9                	xor    ecx,ecx
c0015abf:	56                   	push   esi
c0015ac0:	53                   	push   ebx
c0015ac1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ac5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015acc:	89 f2                	mov    edx,esi
c0015ace:	66 90                	xchg   ax,ax
c0015ad0:	0f b7 c2             	movzx  eax,dx
c0015ad3:	80 e2 01             	and    dl,0x1
c0015ad6:	74 14                	je     c0015aec <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015ad8:	d1 f8                	sar    eax,1
c0015ada:	83 c1 01             	add    ecx,0x1
c0015add:	89 c2                	mov    edx,eax
c0015adf:	83 f9 10             	cmp    ecx,0x10
c0015ae2:	75 ec                	jne    c0015ad0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015ae4:	31 db                	xor    ebx,ebx
c0015ae6:	89 d8                	mov    eax,ebx
c0015ae8:	5b                   	pop    ebx
c0015ae9:	5e                   	pop    esi
c0015aea:	5f                   	pop    edi
c0015aeb:	c3                   	ret    
c0015aec:	b8 01 00 00 00       	mov    eax,0x1
c0015af1:	d3 e0                	shl    eax,cl
c0015af3:	09 c6                	or     esi,eax
c0015af5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015af8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015aff:	01 c0                	add    eax,eax
c0015b01:	01 c8                	add    eax,ecx
c0015b03:	8d 04 80             	lea    eax,[eax+eax*4]
c0015b06:	01 d8                	add    eax,ebx
c0015b08:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015b0f:	75 0b                	jne    c0015b1c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015b11:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015b1b:	90                   	nop
c0015b1c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015b22:	83 ec 0c             	sub    esp,0xc
c0015b25:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015b28:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015b2b:	01 c0                	add    eax,eax
c0015b2d:	01 c8                	add    eax,ecx
c0015b2f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015b32:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015b35:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015b3b:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015b41:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b45:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015b4b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015b51:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015b57:	89 ca                	mov    edx,ecx
c0015b59:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015b60:	f7 da                	neg    edx
c0015b62:	c1 e2 15             	shl    edx,0x15
c0015b65:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015b6b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015b71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b75:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015b7f:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015b85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b89:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015b8f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015b99:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015ba3:	68 00 01 00 00       	push   0x100
c0015ba8:	e8 09 1f ff ff       	call   c0007ab6 <malloc>
c0015bad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015bb0:	58                   	pop    eax
c0015bb1:	5a                   	pop    edx
c0015bb2:	53                   	push   ebx
c0015bb3:	68 e4 96 02 c0       	push   0xc00296e4
c0015bb8:	e8 73 9e 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015bbd:	83 c4 10             	add    esp,0x10
c0015bc0:	89 d8                	mov    eax,ebx
c0015bc2:	5b                   	pop    ebx
c0015bc3:	5e                   	pop    esi
c0015bc4:	5f                   	pop    edi
c0015bc5:	c3                   	ret    
c0015bc6:	66 90                	xchg   ax,ax

c0015bc8 <Process::createUserThread()>:
c0015bc8:	83 ec 0c             	sub    esp,0xc
c0015bcb:	68 80 00 00 00       	push   0x80
c0015bd0:	6a 00                	push   0x0
c0015bd2:	68 18 55 01 c0       	push   0xc0015518
c0015bd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015bdb:	50                   	push   eax
c0015bdc:	e8 db fe ff ff       	call   c0015abc <Process::createThread(void (*)(void*), void*, int)>
c0015be1:	83 c4 1c             	add    esp,0x1c
c0015be4:	c3                   	ret    
c0015be5:	8d 76 00             	lea    esi,[esi+0x0]

c0015be8 <setupMultitasking(void (*)())>:
c0015be8:	56                   	push   esi
c0015be9:	53                   	push   ebx
c0015bea:	83 ec 04             	sub    esp,0x4
c0015bed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015bf1:	eb 11                	jmp    c0015c04 <setupMultitasking(void (*)())+0x1c>
c0015bf3:	90                   	nop
c0015bf4:	83 ec 0c             	sub    esp,0xc
c0015bf7:	68 e4 96 02 c0       	push   0xc00296e4
c0015bfc:	e8 73 9d 00 00       	call   c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c01:	83 c4 10             	add    esp,0x10
c0015c04:	83 ec 0c             	sub    esp,0xc
c0015c07:	68 e4 96 02 c0       	push   0xc00296e4
c0015c0c:	e8 3f 9d 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c11:	83 c4 10             	add    esp,0x10
c0015c14:	84 c0                	test   al,al
c0015c16:	74 dc                	je     c0015bf4 <setupMultitasking(void (*)())+0xc>
c0015c18:	83 ec 0c             	sub    esp,0xc
c0015c1b:	68 24 07 00 00       	push   0x724
c0015c20:	e8 91 1e ff ff       	call   c0007ab6 <malloc>
c0015c25:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015c2c:	89 c3                	mov    ebx,eax
c0015c2e:	6a 00                	push   0x0
c0015c30:	68 c5 24 02 c0       	push   0xc00224c5
c0015c35:	6a 01                	push   0x1
c0015c37:	50                   	push   eax
c0015c38:	e8 5b fc ff ff       	call   c0015898 <Process::Process(bool, char const*, Process*, char**)>
c0015c3d:	83 c4 14             	add    esp,0x14
c0015c40:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015c46:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015c4c:	50                   	push   eax
c0015c4d:	e8 07 2b ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015c52:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015c59:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015c63:	83 c8 01             	or     eax,0x1
c0015c66:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015c6d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015c73:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015c76:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015c80:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015c86:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015c8c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015c96:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015ca0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015caa:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015cb0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015cba:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015cc0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015cca:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015cd1:	e8 e0 1d ff ff       	call   c0007ab6 <malloc>
c0015cd6:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015cdc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015ce2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015ce8:	5a                   	pop    edx
c0015ce9:	59                   	pop    ecx
c0015cea:	68 c1 24 02 c0       	push   0xc00224c1
c0015cef:	50                   	push   eax
c0015cf0:	e8 4b a9 fe ff       	call   c0000640 <strcpy>
c0015cf5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015cfc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015d00:	83 c4 14             	add    esp,0x14
c0015d03:	5b                   	pop    ebx
c0015d04:	5e                   	pop    esi
c0015d05:	e9 5f a5 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015d0a:	66 90                	xchg   ax,ax

c0015d0c <schedule()>:
c0015d0c:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015d12:	85 d2                	test   edx,edx
c0015d14:	74 0e                	je     c0015d24 <schedule()+0x18>
c0015d16:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015d20:	c3                   	ret    
c0015d21:	8d 76 00             	lea    esi,[esi+0x0]
c0015d24:	53                   	push   ebx
c0015d25:	83 ec 14             	sub    esp,0x14
c0015d28:	68 e4 96 02 c0       	push   0xc00296e4
c0015d2d:	e8 1e 9c 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015d32:	83 c4 10             	add    esp,0x10
c0015d35:	84 c0                	test   al,al
c0015d37:	75 3f                	jne    c0015d78 <schedule()+0x6c>
c0015d39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d3e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015d41:	83 fa 01             	cmp    edx,0x1
c0015d44:	74 3a                	je     c0015d80 <schedule()+0x74>
c0015d46:	66 90                	xchg   ax,ax
c0015d48:	83 ec 0c             	sub    esp,0xc
c0015d4b:	68 e4 96 02 c0       	push   0xc00296e4
c0015d50:	e8 17 9c 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d55:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015d5c:	89 c3                	mov    ebx,eax
c0015d5e:	e8 11 9c 00 00       	call   c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015d63:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015d6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d6d:	e8 fe f7 ff ff       	call   c0015570 <switchToThread(ThreadControlBlock*)>
c0015d72:	83 c4 10             	add    esp,0x10
c0015d75:	8d 76 00             	lea    esi,[esi+0x0]
c0015d78:	83 c4 08             	add    esp,0x8
c0015d7b:	5b                   	pop    ebx
c0015d7c:	c3                   	ret    
c0015d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d80:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015d87:	83 ec 08             	sub    esp,0x8
c0015d8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d8f:	50                   	push   eax
c0015d90:	68 e4 96 02 c0       	push   0xc00296e4
c0015d95:	e8 96 9c 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d9a:	83 c4 10             	add    esp,0x10
c0015d9d:	eb a9                	jmp    c0015d48 <schedule()+0x3c>
c0015d9f:	90                   	nop

c0015da0 <Semaphore::tryAcquire()>:
c0015da0:	53                   	push   ebx
c0015da1:	83 ec 08             	sub    esp,0x8
c0015da4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015da8:	fa                   	cli    
c0015da9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015dae:	8d 50 01             	lea    edx,[eax+0x1]
c0015db1:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015db7:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015dbd:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015dc0:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015dc6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015dc9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015dcb:	7c 33                	jl     c0015e00 <Semaphore::tryAcquire()+0x60>
c0015dcd:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015dd3:	85 d2                	test   edx,edx
c0015dd5:	75 0d                	jne    c0015de4 <Semaphore::tryAcquire()+0x44>
c0015dd7:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c0015ddd:	85 d2                	test   edx,edx
c0015ddf:	75 6f                	jne    c0015e50 <Semaphore::tryAcquire()+0xb0>
c0015de1:	8d 76 00             	lea    esi,[esi+0x0]
c0015de4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015de9:	85 c0                	test   eax,eax
c0015deb:	74 0b                	je     c0015df8 <Semaphore::tryAcquire()+0x58>
c0015ded:	8d 76 00             	lea    esi,[esi+0x0]
c0015df0:	31 c0                	xor    eax,eax
c0015df2:	83 c4 08             	add    esp,0x8
c0015df5:	5b                   	pop    ebx
c0015df6:	c3                   	ret    
c0015df7:	90                   	nop
c0015df8:	fb                   	sti    
c0015df9:	83 c4 08             	add    esp,0x8
c0015dfc:	5b                   	pop    ebx
c0015dfd:	c3                   	ret    
c0015dfe:	66 90                	xchg   ax,ax
c0015e00:	83 c3 01             	add    ebx,0x1
c0015e03:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015e09:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015e0c:	85 d2                	test   edx,edx
c0015e0e:	75 24                	jne    c0015e34 <Semaphore::tryAcquire()+0x94>
c0015e10:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015e16:	85 c9                	test   ecx,ecx
c0015e18:	74 1a                	je     c0015e34 <Semaphore::tryAcquire()+0x94>
c0015e1a:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e24:	e8 e3 fe ff ff       	call   c0015d0c <schedule()>
c0015e29:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e2e:	83 e8 01             	sub    eax,0x1
c0015e31:	8d 76 00             	lea    esi,[esi+0x0]
c0015e34:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e39:	85 c0                	test   eax,eax
c0015e3b:	75 0b                	jne    c0015e48 <Semaphore::tryAcquire()+0xa8>
c0015e3d:	fb                   	sti    
c0015e3e:	b0 01                	mov    al,0x1
c0015e40:	83 c4 08             	add    esp,0x8
c0015e43:	5b                   	pop    ebx
c0015e44:	c3                   	ret    
c0015e45:	8d 76 00             	lea    esi,[esi+0x0]
c0015e48:	b0 01                	mov    al,0x1
c0015e4a:	83 c4 08             	add    esp,0x8
c0015e4d:	5b                   	pop    ebx
c0015e4e:	c3                   	ret    
c0015e4f:	90                   	nop
c0015e50:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e5a:	e8 ad fe ff ff       	call   c0015d0c <schedule()>
c0015e5f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e64:	83 e8 01             	sub    eax,0x1
c0015e67:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e6c:	85 c0                	test   eax,eax
c0015e6e:	75 80                	jne    c0015df0 <Semaphore::tryAcquire()+0x50>
c0015e70:	eb 86                	jmp    c0015df8 <Semaphore::tryAcquire()+0x58>
c0015e72:	66 90                	xchg   ax,ax

c0015e74 <Semaphore::assertLocked(char const*)>:
c0015e74:	83 ec 0c             	sub    esp,0xc
c0015e77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e7b:	fa                   	cli    
c0015e7c:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015e82:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e87:	83 c1 01             	add    ecx,0x1
c0015e8a:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015e90:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e93:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015e99:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015e9b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015e9e:	7c 28                	jl     c0015ec8 <Semaphore::assertLocked(char const*)+0x54>
c0015ea0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ea5:	85 c0                	test   eax,eax
c0015ea7:	75 0b                	jne    c0015eb4 <Semaphore::assertLocked(char const*)+0x40>
c0015ea9:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015eae:	85 c0                	test   eax,eax
c0015eb0:	75 32                	jne    c0015ee4 <Semaphore::assertLocked(char const*)+0x70>
c0015eb2:	66 90                	xchg   ax,ax
c0015eb4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015eb9:	83 e8 01             	sub    eax,0x1
c0015ebc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ec1:	75 01                	jne    c0015ec4 <Semaphore::assertLocked(char const*)+0x50>
c0015ec3:	fb                   	sti    
c0015ec4:	83 c4 0c             	add    esp,0xc
c0015ec7:	c3                   	ret    
c0015ec8:	83 ec 0c             	sub    esp,0xc
c0015ecb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ecf:	52                   	push   edx
c0015ed0:	e8 7c b4 ff ff       	call   c0011351 <KePanic(char const*)>
c0015ed5:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015eda:	83 c4 10             	add    esp,0x10
c0015edd:	83 e8 01             	sub    eax,0x1
c0015ee0:	eb be                	jmp    c0015ea0 <Semaphore::assertLocked(char const*)+0x2c>
c0015ee2:	66 90                	xchg   ax,ax
c0015ee4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015eee:	e8 19 fe ff ff       	call   c0015d0c <schedule()>
c0015ef3:	eb bf                	jmp    c0015eb4 <Semaphore::assertLocked(char const*)+0x40>
c0015ef5:	8d 76 00             	lea    esi,[esi+0x0]

c0015ef8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015ef8:	83 ec 0c             	sub    esp,0xc
c0015efb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f04:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015f07:	e8 00 fe ff ff       	call   c0015d0c <schedule()>
c0015f0c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f11:	83 e8 01             	sub    eax,0x1
c0015f14:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f19:	75 01                	jne    c0015f1c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015f1b:	fb                   	sti    
c0015f1c:	83 c4 0c             	add    esp,0xc
c0015f1f:	c3                   	ret    

c0015f20 <blockTask(TaskState)>:
c0015f20:	83 ec 0c             	sub    esp,0xc
c0015f23:	fa                   	cli    
c0015f24:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f2d:	83 c0 01             	add    eax,0x1
c0015f30:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f3a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015f3d:	e8 ca fd ff ff       	call   c0015d0c <schedule()>
c0015f42:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f47:	83 e8 01             	sub    eax,0x1
c0015f4a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f4f:	75 03                	jne    c0015f54 <blockTask(TaskState)+0x34>
c0015f51:	fb                   	sti    
c0015f52:	66 90                	xchg   ax,ax
c0015f54:	83 c4 0c             	add    esp,0xc
c0015f57:	c3                   	ret    

c0015f58 <waitTask(int, int*, int)>:
c0015f58:	83 ec 18             	sub    esp,0x18
c0015f5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015f64:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015f67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f70:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015f73:	6a 07                	push   0x7
c0015f75:	e8 a6 ff ff ff       	call   c0015f20 <blockTask(TaskState)>
c0015f7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f7f:	83 c4 10             	add    esp,0x10
c0015f82:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015f85:	85 d2                	test   edx,edx
c0015f87:	74 0b                	je     c0015f94 <waitTask(int, int*, int)+0x3c>
c0015f89:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015f8c:	89 02                	mov    DWORD PTR [edx],eax
c0015f8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f93:	90                   	nop
c0015f94:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015f97:	83 c4 0c             	add    esp,0xc
c0015f9a:	c3                   	ret    
c0015f9b:	90                   	nop

c0015f9c <milliTenthSleepUntil(unsigned int)>:
c0015f9c:	83 ec 0c             	sub    esp,0xc
c0015f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa3:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015fa9:	76 05                	jbe    c0015fb0 <milliTenthSleepUntil(unsigned int)+0x14>
c0015fab:	90                   	nop
c0015fac:	83 c4 0c             	add    esp,0xc
c0015faf:	c3                   	ret    
c0015fb0:	fa                   	cli    
c0015fb1:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015fb7:	83 ec 08             	sub    esp,0x8
c0015fba:	83 c2 01             	add    edx,0x1
c0015fbd:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015fc3:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015fc9:	83 c1 01             	add    ecx,0x1
c0015fcc:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015fd2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015fd8:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015fdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fe0:	50                   	push   eax
c0015fe1:	68 d8 96 02 c0       	push   0xc00296d8
c0015fe6:	e8 45 9a 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015feb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015ff2:	e8 29 ff ff ff       	call   c0015f20 <blockTask(TaskState)>
c0015ff7:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015ffc:	83 c4 10             	add    esp,0x10
c0015fff:	83 e8 01             	sub    eax,0x1
c0016002:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016007:	85 c0                	test   eax,eax
c0016009:	75 09                	jne    c0016014 <milliTenthSleepUntil(unsigned int)+0x78>
c001600b:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016010:	85 c0                	test   eax,eax
c0016012:	75 14                	jne    c0016028 <milliTenthSleepUntil(unsigned int)+0x8c>
c0016014:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016019:	83 e8 01             	sub    eax,0x1
c001601c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016021:	75 89                	jne    c0015fac <milliTenthSleepUntil(unsigned int)+0x10>
c0016023:	fb                   	sti    
c0016024:	83 c4 0c             	add    esp,0xc
c0016027:	c3                   	ret    
c0016028:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016032:	e8 d5 fc ff ff       	call   c0015d0c <schedule()>
c0016037:	eb db                	jmp    c0016014 <milliTenthSleepUntil(unsigned int)+0x78>
c0016039:	8d 76 00             	lea    esi,[esi+0x0]

c001603c <milliTenthSleep(unsigned int)>:
c001603c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016040:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0016045:	01 c2                	add    edx,eax
c0016047:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001604b:	e9 4c ff ff ff       	jmp    c0015f9c <milliTenthSleepUntil(unsigned int)>

c0016050 <sleep(unsigned int)>:
c0016050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016054:	8d 04 80             	lea    eax,[eax+eax*4]
c0016057:	8d 04 80             	lea    eax,[eax+eax*4]
c001605a:	8d 04 80             	lea    eax,[eax+eax*4]
c001605d:	8d 04 80             	lea    eax,[eax+eax*4]
c0016060:	c1 e0 04             	shl    eax,0x4
c0016063:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016067:	eb d3                	jmp    c001603c <milliTenthSleep(unsigned int)>
c0016069:	90                   	nop
c001606a:	66 90                	xchg   ax,ax

c001606c <Semaphore::acquire()>:
c001606c:	83 ec 0c             	sub    esp,0xc
c001606f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016073:	fa                   	cli    
c0016074:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016079:	83 c0 01             	add    eax,0x1
c001607c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016081:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016086:	8d 48 01             	lea    ecx,[eax+0x1]
c0016089:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001608f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016092:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016094:	7d 2e                	jge    c00160c4 <Semaphore::acquire()+0x58>
c0016096:	83 c1 01             	add    ecx,0x1
c0016099:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001609c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00160a1:	85 c0                	test   eax,eax
c00160a3:	75 0b                	jne    c00160b0 <Semaphore::acquire()+0x44>
c00160a5:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00160aa:	85 c0                	test   eax,eax
c00160ac:	75 66                	jne    c0016114 <Semaphore::acquire()+0xa8>
c00160ae:	66 90                	xchg   ax,ax
c00160b0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160b5:	83 e8 01             	sub    eax,0x1
c00160b8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160bd:	75 01                	jne    c00160c0 <Semaphore::acquire()+0x54>
c00160bf:	fb                   	sti    
c00160c0:	83 c4 0c             	add    esp,0xc
c00160c3:	c3                   	ret    
c00160c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00160d0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00160d3:	85 c9                	test   ecx,ecx
c00160d5:	74 51                	je     c0016128 <Semaphore::acquire()+0xbc>
c00160d7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00160da:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00160e0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00160e3:	90                   	nop
c00160e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160e9:	83 ec 0c             	sub    esp,0xc
c00160ec:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00160ef:	68 44 25 02 c0       	push   0xc0022544
c00160f4:	e8 4c 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00160f9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016100:	e8 1b fe ff ff       	call   c0015f20 <blockTask(TaskState)>
c0016105:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001610a:	83 c4 10             	add    esp,0x10
c001610d:	83 e8 01             	sub    eax,0x1
c0016110:	eb 8a                	jmp    c001609c <Semaphore::acquire()+0x30>
c0016112:	66 90                	xchg   ax,ax
c0016114:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001611e:	e8 e9 fb ff ff       	call   c0015d0c <schedule()>
c0016123:	eb 8b                	jmp    c00160b0 <Semaphore::acquire()+0x44>
c0016125:	8d 76 00             	lea    esi,[esi+0x0]
c0016128:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001612d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016130:	eb b2                	jmp    c00160e4 <Semaphore::acquire()+0x78>
c0016132:	66 90                	xchg   ax,ax

c0016134 <taskReturned>:
c0016134:	83 ec 18             	sub    esp,0x18
c0016137:	68 64 25 02 c0       	push   0xc0022564
c001613c:	e8 10 b2 ff ff       	call   c0011351 <KePanic(char const*)>
c0016141:	83 c4 10             	add    esp,0x10
c0016144:	83 ec 0c             	sub    esp,0xc
c0016147:	6a 02                	push   0x2
c0016149:	e8 d2 fd ff ff       	call   c0015f20 <blockTask(TaskState)>
c001614e:	fa                   	cli    
c001614f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016154:	83 c0 01             	add    eax,0x1
c0016157:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001615c:	e8 ab fb ff ff       	call   c0015d0c <schedule()>
c0016161:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016166:	83 c4 10             	add    esp,0x10
c0016169:	83 e8 01             	sub    eax,0x1
c001616c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016171:	85 c0                	test   eax,eax
c0016173:	75 cf                	jne    c0016144 <taskReturned+0x10>
c0016175:	fb                   	sti    
c0016176:	eb cc                	jmp    c0016144 <taskReturned+0x10>

c0016178 <Thr::processFromPID(int)>:
c0016178:	57                   	push   edi
c0016179:	56                   	push   esi
c001617a:	53                   	push   ebx
c001617b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001617f:	fa                   	cli    
c0016180:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0016186:	83 ec 0c             	sub    esp,0xc
c0016189:	83 c1 01             	add    ecx,0x1
c001618c:	68 e4 96 02 c0       	push   0xc00296e4
c0016191:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0016197:	e8 d0 97 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001619c:	83 c4 10             	add    esp,0x10
c001619f:	89 c7                	mov    edi,eax
c00161a1:	eb 15                	jmp    c00161b8 <Thr::processFromPID(int)+0x40>
c00161a3:	90                   	nop
c00161a4:	83 ec 0c             	sub    esp,0xc
c00161a7:	68 e4 96 02 c0       	push   0xc00296e4
c00161ac:	e8 bb 97 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161b1:	83 c4 10             	add    esp,0x10
c00161b4:	39 f8                	cmp    eax,edi
c00161b6:	74 50                	je     c0016208 <Thr::processFromPID(int)+0x90>
c00161b8:	83 ec 0c             	sub    esp,0xc
c00161bb:	68 e4 96 02 c0       	push   0xc00296e4
c00161c0:	e8 a7 97 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161c5:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00161cc:	89 c3                	mov    ebx,eax
c00161ce:	e8 a1 97 00 00       	call   c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00161d3:	58                   	pop    eax
c00161d4:	5a                   	pop    edx
c00161d5:	53                   	push   ebx
c00161d6:	68 e4 96 02 c0       	push   0xc00296e4
c00161db:	e8 50 98 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00161e0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161e3:	83 c4 10             	add    esp,0x10
c00161e6:	39 30                	cmp    DWORD PTR [eax],esi
c00161e8:	75 ba                	jne    c00161a4 <Thr::processFromPID(int)+0x2c>
c00161ea:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00161ef:	83 e8 01             	sub    eax,0x1
c00161f2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00161f7:	74 0b                	je     c0016204 <Thr::processFromPID(int)+0x8c>
c00161f9:	8d 76 00             	lea    esi,[esi+0x0]
c00161fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161ff:	5b                   	pop    ebx
c0016200:	5e                   	pop    esi
c0016201:	5f                   	pop    edi
c0016202:	c3                   	ret    
c0016203:	90                   	nop
c0016204:	fb                   	sti    
c0016205:	eb f5                	jmp    c00161fc <Thr::processFromPID(int)+0x84>
c0016207:	90                   	nop
c0016208:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001620d:	83 e8 01             	sub    eax,0x1
c0016210:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016215:	75 05                	jne    c001621c <Thr::processFromPID(int)+0xa4>
c0016217:	fb                   	sti    
c0016218:	5b                   	pop    ebx
c0016219:	5e                   	pop    esi
c001621a:	5f                   	pop    edi
c001621b:	c3                   	ret    
c001621c:	5b                   	pop    ebx
c001621d:	31 c0                	xor    eax,eax
c001621f:	5e                   	pop    esi
c0016220:	5f                   	pop    edi
c0016221:	c3                   	ret    
c0016222:	66 90                	xchg   ax,ax

c0016224 <unblockTask(ThreadControlBlock*)>:
c0016224:	53                   	push   ebx
c0016225:	83 ec 08             	sub    esp,0x8
c0016228:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001622c:	fa                   	cli    
c001622d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016232:	83 c0 01             	add    eax,0x1
c0016235:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001623a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001623d:	85 c0                	test   eax,eax
c001623f:	74 67                	je     c00162a8 <unblockTask(ThreadControlBlock*)+0x84>
c0016241:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016244:	83 f8 01             	cmp    eax,0x1
c0016247:	74 37                	je     c0016280 <unblockTask(ThreadControlBlock*)+0x5c>
c0016249:	83 ec 0c             	sub    esp,0xc
c001624c:	68 e4 96 02 c0       	push   0xc00296e4
c0016251:	e8 16 97 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016256:	83 c4 10             	add    esp,0x10
c0016259:	85 c0                	test   eax,eax
c001625b:	75 1b                	jne    c0016278 <unblockTask(ThreadControlBlock*)+0x54>
c001625d:	eb 5d                	jmp    c00162bc <unblockTask(ThreadControlBlock*)+0x98>
c001625f:	90                   	nop
c0016260:	83 ec 08             	sub    esp,0x8
c0016263:	50                   	push   eax
c0016264:	68 e4 96 02 c0       	push   0xc00296e4
c0016269:	e8 1e 9a 00 00       	call   c001fc8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001626e:	83 c4 10             	add    esp,0x10
c0016271:	85 c0                	test   eax,eax
c0016273:	74 47                	je     c00162bc <unblockTask(ThreadControlBlock*)+0x98>
c0016275:	8d 76 00             	lea    esi,[esi+0x0]
c0016278:	39 c3                	cmp    ebx,eax
c001627a:	75 e4                	jne    c0016260 <unblockTask(ThreadControlBlock*)+0x3c>
c001627c:	eb 12                	jmp    c0016290 <unblockTask(ThreadControlBlock*)+0x6c>
c001627e:	66 90                	xchg   ax,ax
c0016280:	83 ec 0c             	sub    esp,0xc
c0016283:	68 e3 24 02 c0       	push   0xc00224e3
c0016288:	e8 b8 46 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001628d:	83 c4 10             	add    esp,0x10
c0016290:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016295:	83 e8 01             	sub    eax,0x1
c0016298:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001629d:	75 01                	jne    c00162a0 <unblockTask(ThreadControlBlock*)+0x7c>
c001629f:	fb                   	sti    
c00162a0:	83 c4 08             	add    esp,0x8
c00162a3:	5b                   	pop    ebx
c00162a4:	c3                   	ret    
c00162a5:	8d 76 00             	lea    esi,[esi+0x0]
c00162a8:	83 ec 0c             	sub    esp,0xc
c00162ab:	68 cc 24 02 c0       	push   0xc00224cc
c00162b0:	e8 90 46 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00162b5:	83 c4 10             	add    esp,0x10
c00162b8:	eb d6                	jmp    c0016290 <unblockTask(ThreadControlBlock*)+0x6c>
c00162ba:	66 90                	xchg   ax,ax
c00162bc:	83 ec 08             	sub    esp,0x8
c00162bf:	53                   	push   ebx
c00162c0:	68 e4 96 02 c0       	push   0xc00296e4
c00162c5:	e8 66 97 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00162ca:	83 c4 10             	add    esp,0x10
c00162cd:	eb c1                	jmp    c0016290 <unblockTask(ThreadControlBlock*)+0x6c>
c00162cf:	90                   	nop

c00162d0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00162d0:	55                   	push   ebp
c00162d1:	57                   	push   edi
c00162d2:	56                   	push   esi
c00162d3:	53                   	push   ebx
c00162d4:	83 ec 1c             	sub    esp,0x1c
c00162d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00162db:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162de:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00162e4:	85 ed                	test   ebp,ebp
c00162e6:	7e 28                	jle    c0016310 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00162e8:	31 f6                	xor    esi,esi
c00162ea:	66 90                	xchg   ax,ax
c00162ec:	83 ec 0c             	sub    esp,0xc
c00162ef:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00162f6:	83 c6 01             	add    esi,0x1
c00162f9:	57                   	push   edi
c00162fa:	e8 c7 17 ff ff       	call   c0007ac6 <free>
c00162ff:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016302:	83 c4 10             	add    esp,0x10
c0016305:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001630b:	7f df                	jg     c00162ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001630d:	8d 76 00             	lea    esi,[esi+0x0]
c0016310:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001631a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001631f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016322:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016325:	d3 c0                	rol    eax,cl
c0016327:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001632e:	21 c8                	and    eax,ecx
c0016330:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016337:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001633a:	89 f7                	mov    edi,esi
c001633c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016344:	0f 85 72 01 00 00    	jne    c00164bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001634a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016350:	85 ed                	test   ebp,ebp
c0016352:	74 1c                	je     c0016370 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016354:	83 ec 0c             	sub    esp,0xc
c0016357:	55                   	push   ebp
c0016358:	e8 05 ad ff ff       	call   c0011062 <EnvVarContainer::~EnvVarContainer()>
c001635d:	59                   	pop    ecx
c001635e:	5e                   	pop    esi
c001635f:	6a 0c                	push   0xc
c0016361:	55                   	push   ebp
c0016362:	e8 b1 44 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016367:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001636a:	83 c4 10             	add    esp,0x10
c001636d:	89 f7                	mov    edi,esi
c001636f:	90                   	nop
c0016370:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016376:	85 c0                	test   eax,eax
c0016378:	0f 84 b2 00 00 00    	je     c0016430 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001637e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016381:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016385:	31 c9                	xor    ecx,ecx
c0016387:	eb 17                	jmp    c00163a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016389:	8d 76 00             	lea    esi,[esi+0x0]
c001638c:	83 c1 01             	add    ecx,0x1
c001638f:	83 f9 10             	cmp    ecx,0x10
c0016392:	0f 84 98 00 00 00    	je     c0016430 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016398:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001639e:	66 90                	xchg   ax,ax
c00163a0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00163a7:	d3 fa                	sar    edx,cl
c00163a9:	80 e2 01             	and    dl,0x1
c00163ac:	74 de                	je     c001638c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00163ae:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00163b1:	01 d2                	add    edx,edx
c00163b3:	01 ca                	add    edx,ecx
c00163b5:	8d 14 92             	lea    edx,[edx+edx*4]
c00163b8:	01 d0                	add    eax,edx
c00163ba:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00163c0:	83 fd 07             	cmp    ebp,0x7
c00163c3:	75 c7                	jne    c001638c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00163c5:	05 40 02 00 00       	add    eax,0x240
c00163ca:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00163cd:	83 fd ff             	cmp    ebp,0xffffffff
c00163d0:	0f 8c ee 00 00 00    	jl     c00164c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00163d6:	0f 84 ac 01 00 00    	je     c0016588 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00163dc:	85 ed                	test   ebp,ebp
c00163de:	0f 84 90 01 00 00    	je     c0016574 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00163e4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00163e6:	75 a4                	jne    c001638c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00163e8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00163ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00163f2:	01 d0                	add    eax,edx
c00163f4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00163f8:	83 ec 0c             	sub    esp,0xc
c00163fb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016401:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016404:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001640a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016411:	50                   	push   eax
c0016412:	e8 0d fe ff ff       	call   c0016224 <unblockTask(ThreadControlBlock*)>
c0016417:	83 c4 10             	add    esp,0x10
c001641a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001641d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016421:	89 f7                	mov    edi,esi
c0016423:	83 c1 01             	add    ecx,0x1
c0016426:	83 f9 10             	cmp    ecx,0x10
c0016429:	0f 85 69 ff ff ff    	jne    c0016398 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001642f:	90                   	nop
c0016430:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016436:	85 c0                	test   eax,eax
c0016438:	74 62                	je     c001649c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001643a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016440:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016446:	74 54                	je     c001649c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	68 e4 96 02 c0       	push   0xc00296e4
c0016450:	e8 17 95 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016455:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001645c:	89 c7                	mov    edi,eax
c001645e:	e8 ed 94 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016463:	83 c4 10             	add    esp,0x10
c0016466:	84 c0                	test   al,al
c0016468:	0f 84 ce 00 00 00    	je     c001653c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001646e:	66 90                	xchg   ax,ax
c0016470:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016473:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016479:	85 d2                	test   edx,edx
c001647b:	74 0f                	je     c001648c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001647d:	83 ec 0c             	sub    esp,0xc
c0016480:	8b 02                	mov    eax,DWORD PTR [edx]
c0016482:	52                   	push   edx
c0016483:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016486:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016489:	83 c4 10             	add    esp,0x10
c001648c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016496:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016499:	8d 76 00             	lea    esi,[esi+0x0]
c001649c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00164a2:	85 db                	test   ebx,ebx
c00164a4:	74 16                	je     c00164bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00164a6:	83 ec 0c             	sub    esp,0xc
c00164a9:	53                   	push   ebx
c00164aa:	e8 03 37 ff ff       	call   c0009bb2 <VAS::~VAS()>
c00164af:	58                   	pop    eax
c00164b0:	5a                   	pop    edx
c00164b1:	6a 14                	push   0x14
c00164b3:	53                   	push   ebx
c00164b4:	e8 5f 43 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00164b9:	83 c4 10             	add    esp,0x10
c00164bc:	83 c4 1c             	add    esp,0x1c
c00164bf:	5b                   	pop    ebx
c00164c0:	5e                   	pop    esi
c00164c1:	5f                   	pop    edi
c00164c2:	5d                   	pop    ebp
c00164c3:	c3                   	ret    
c00164c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00164c8:	83 ec 0c             	sub    esp,0xc
c00164cb:	68 98 25 02 c0       	push   0xc0022598
c00164d0:	e8 7c ae ff ff       	call   c0011351 <KePanic(char const*)>
c00164d5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00164d8:	83 c4 10             	add    esp,0x10
c00164db:	89 f7                	mov    edi,esi
c00164dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164e1:	e9 a6 fe ff ff       	jmp    c001638c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00164e6:	66 90                	xchg   ax,ax
c00164e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164ee:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00164f4:	75 1e                	jne    c0016514 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00164f6:	83 ec 0c             	sub    esp,0xc
c00164f9:	68 00 26 02 c0       	push   0xc0022600
c00164fe:	e8 42 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016503:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001650a:	e8 11 fa ff ff       	call   c0015f20 <blockTask(TaskState)>
c001650f:	83 c4 10             	add    esp,0x10
c0016512:	66 90                	xchg   ax,ax
c0016514:	83 ec 08             	sub    esp,0x8
c0016517:	56                   	push   esi
c0016518:	68 e4 96 02 c0       	push   0xc00296e4
c001651d:	e8 0e 95 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016522:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016529:	e8 3e 94 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001652e:	83 c4 10             	add    esp,0x10
c0016531:	39 f8                	cmp    eax,edi
c0016533:	0f 84 37 ff ff ff    	je     c0016470 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016539:	8d 76 00             	lea    esi,[esi+0x0]
c001653c:	83 ec 0c             	sub    esp,0xc
c001653f:	68 e4 96 02 c0       	push   0xc00296e4
c0016544:	e8 23 94 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016549:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016550:	89 c6                	mov    esi,eax
c0016552:	e8 1d 94 00 00       	call   c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016557:	83 c4 10             	add    esp,0x10
c001655a:	39 f3                	cmp    ebx,esi
c001655c:	74 b6                	je     c0016514 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001655e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016561:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016564:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001656a:	75 a8                	jne    c0016514 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001656c:	e9 77 ff ff ff       	jmp    c00164e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016571:	8d 76 00             	lea    esi,[esi+0x0]
c0016574:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016578:	83 ec 0c             	sub    esp,0xc
c001657b:	68 cc 25 02 c0       	push   0xc00225cc
c0016580:	e9 4b ff ff ff       	jmp    c00164d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016585:	8d 76 00             	lea    esi,[esi+0x0]
c0016588:	8b 36                	mov    esi,DWORD PTR [esi]
c001658a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001658e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016591:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016594:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001659a:	01 d7                	add    edi,edx
c001659c:	89 f8                	mov    eax,edi
c001659e:	e9 51 fe ff ff       	jmp    c00163f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00165a3:	90                   	nop

c00165a4 <cleanerTaskFunction(void*)>:
c00165a4:	53                   	push   ebx
c00165a5:	83 ec 08             	sub    esp,0x8
c00165a8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165ad:	83 e8 01             	sub    eax,0x1
c00165b0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165b5:	75 01                	jne    c00165b8 <cleanerTaskFunction(void*)+0x14>
c00165b7:	fb                   	sti    
c00165b8:	fa                   	cli    
c00165b9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165be:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c00165c5:	8d 50 01             	lea    edx,[eax+0x1]
c00165c8:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00165ce:	0f 84 c4 00 00 00    	je     c0016698 <cleanerTaskFunction(void*)+0xf4>
c00165d4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165d9:	85 c0                	test   eax,eax
c00165db:	75 03                	jne    c00165e0 <cleanerTaskFunction(void*)+0x3c>
c00165dd:	fb                   	sti    
c00165de:	66 90                	xchg   ax,ax
c00165e0:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c00165e7:	fa                   	cli    
c00165e8:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00165ee:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00165f4:	83 c2 01             	add    edx,0x1
c00165f7:	83 c1 01             	add    ecx,0x1
c00165fa:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016600:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016606:	fa                   	cli    
c0016607:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c001660d:	83 c3 01             	add    ebx,0x1
c0016610:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c0016616:	eb 28                	jmp    c0016640 <cleanerTaskFunction(void*)+0x9c>
c0016618:	83 ec 0c             	sub    esp,0xc
c001661b:	68 cc 96 02 c0       	push   0xc00296cc
c0016620:	e8 47 93 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016625:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c001662c:	89 c3                	mov    ebx,eax
c001662e:	e8 41 93 00 00       	call   c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016633:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016636:	e8 95 fc ff ff       	call   c00162d0 <cleanupTerminatedTask(ThreadControlBlock*)>
c001663b:	83 c4 10             	add    esp,0x10
c001663e:	66 90                	xchg   ax,ax
c0016640:	83 ec 0c             	sub    esp,0xc
c0016643:	68 cc 96 02 c0       	push   0xc00296cc
c0016648:	e8 03 93 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001664d:	83 c4 10             	add    esp,0x10
c0016650:	84 c0                	test   al,al
c0016652:	74 c4                	je     c0016618 <cleanerTaskFunction(void*)+0x74>
c0016654:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016659:	83 e8 01             	sub    eax,0x1
c001665c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016661:	75 01                	jne    c0016664 <cleanerTaskFunction(void*)+0xc0>
c0016663:	fb                   	sti    
c0016664:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016669:	83 e8 01             	sub    eax,0x1
c001666c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016671:	0f 85 31 ff ff ff    	jne    c00165a8 <cleanerTaskFunction(void*)+0x4>
c0016677:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001667c:	85 c0                	test   eax,eax
c001667e:	0f 84 24 ff ff ff    	je     c00165a8 <cleanerTaskFunction(void*)+0x4>
c0016684:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001668e:	e8 79 f6 ff ff       	call   c0015d0c <schedule()>
c0016693:	e9 10 ff ff ff       	jmp    c00165a8 <cleanerTaskFunction(void*)+0x4>
c0016698:	83 ec 0c             	sub    esp,0xc
c001669b:	6a 02                	push   0x2
c001669d:	e8 56 f8 ff ff       	call   c0015ef8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00166a2:	83 c4 10             	add    esp,0x10
c00166a5:	e9 36 ff ff ff       	jmp    c00165e0 <cleanerTaskFunction(void*)+0x3c>
c00166aa:	66 90                	xchg   ax,ax

c00166ac <terminateTask(int)>:
c00166ac:	83 ec 14             	sub    esp,0x14
c00166af:	fa                   	cli    
c00166b0:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00166b6:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00166bc:	83 c2 01             	add    edx,0x1
c00166bf:	83 c1 01             	add    ecx,0x1
c00166c2:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00166c8:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00166ce:	fa                   	cli    
c00166cf:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00166d8:	83 c0 01             	add    eax,0x1
c00166db:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166e5:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00166e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166ed:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00166f0:	50                   	push   eax
c00166f1:	68 cc 96 02 c0       	push   0xc00296cc
c00166f6:	e8 35 93 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016700:	83 c4 10             	add    esp,0x10
c0016703:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001670a:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c001670f:	85 c0                	test   eax,eax
c0016711:	74 65                	je     c0016778 <terminateTask(int)+0xcc>
c0016713:	83 ec 0c             	sub    esp,0xc
c0016716:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c001671d:	50                   	push   eax
c001671e:	e8 01 fb ff ff       	call   c0016224 <unblockTask(ThreadControlBlock*)>
c0016723:	83 c4 10             	add    esp,0x10
c0016726:	66 90                	xchg   ax,ax
c0016728:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001672d:	83 e8 01             	sub    eax,0x1
c0016730:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016735:	75 01                	jne    c0016738 <terminateTask(int)+0x8c>
c0016737:	fb                   	sti    
c0016738:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001673d:	83 e8 01             	sub    eax,0x1
c0016740:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016745:	75 09                	jne    c0016750 <terminateTask(int)+0xa4>
c0016747:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001674e:	75 3c                	jne    c001678c <terminateTask(int)+0xe0>
c0016750:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016755:	83 e8 01             	sub    eax,0x1
c0016758:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001675d:	75 01                	jne    c0016760 <terminateTask(int)+0xb4>
c001675f:	fb                   	sti    
c0016760:	fa                   	cli    
c0016761:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016766:	83 c0 01             	add    eax,0x1
c0016769:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001676e:	66 90                	xchg   ax,ax
c0016770:	e8 97 f5 ff ff       	call   c0015d0c <schedule()>
c0016775:	eb d9                	jmp    c0016750 <terminateTask(int)+0xa4>
c0016777:	90                   	nop
c0016778:	83 ec 0c             	sub    esp,0xc
c001677b:	68 fa 24 02 c0       	push   0xc00224fa
c0016780:	e8 c0 41 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016785:	83 c4 10             	add    esp,0x10
c0016788:	eb 9e                	jmp    c0016728 <terminateTask(int)+0x7c>
c001678a:	66 90                	xchg   ax,ax
c001678c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016796:	eb d8                	jmp    c0016770 <terminateTask(int)+0xc4>

c0016798 <Thr::terminateFromIRQ(int)>:
c0016798:	83 ec 18             	sub    esp,0x18
c001679b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001679f:	50                   	push   eax
c00167a0:	e8 07 ff ff ff       	call   c00166ac <terminateTask(int)>
c00167a5:	90                   	nop
c00167a6:	66 90                	xchg   ax,ax

c00167a8 <Semaphore::release()>:
c00167a8:	83 ec 0c             	sub    esp,0xc
c00167ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00167af:	fa                   	cli    
c00167b0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167b5:	83 c0 01             	add    eax,0x1
c00167b8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00167bd:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00167c2:	8d 48 01             	lea    ecx,[eax+0x1]
c00167c5:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00167cb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00167ce:	85 c9                	test   ecx,ecx
c00167d0:	74 42                	je     c0016814 <Semaphore::release()+0x6c>
c00167d2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00167d5:	83 ec 0c             	sub    esp,0xc
c00167d8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00167db:	51                   	push   ecx
c00167dc:	e8 43 fa ff ff       	call   c0016224 <unblockTask(ThreadControlBlock*)>
c00167e1:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00167e6:	83 c4 10             	add    esp,0x10
c00167e9:	83 e8 01             	sub    eax,0x1
c00167ec:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00167f1:	85 c0                	test   eax,eax
c00167f3:	75 0b                	jne    c0016800 <Semaphore::release()+0x58>
c00167f5:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00167fa:	85 c0                	test   eax,eax
c00167fc:	75 22                	jne    c0016820 <Semaphore::release()+0x78>
c00167fe:	66 90                	xchg   ax,ax
c0016800:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016805:	83 e8 01             	sub    eax,0x1
c0016808:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001680d:	75 01                	jne    c0016810 <Semaphore::release()+0x68>
c001680f:	fb                   	sti    
c0016810:	83 c4 0c             	add    esp,0xc
c0016813:	c3                   	ret    
c0016814:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016817:	83 e9 01             	sub    ecx,0x1
c001681a:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001681d:	eb cd                	jmp    c00167ec <Semaphore::release()+0x44>
c001681f:	90                   	nop
c0016820:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001682a:	e8 dd f4 ff ff       	call   c0015d0c <schedule()>
c001682f:	eb cf                	jmp    c0016800 <Semaphore::release()+0x58>
c0016831:	8d 76 00             	lea    esi,[esi+0x0]

c0016834 <__static_initialization_and_destruction_0(int, int)>:
c0016834:	83 ec 0c             	sub    esp,0xc
c0016837:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001683c:	0f 85 8e 00 00 00    	jne    c00168d0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016842:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001684a:	0f 85 80 00 00 00    	jne    c00168d0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016850:	83 ec 0c             	sub    esp,0xc
c0016853:	68 e4 96 02 c0       	push   0xc00296e4
c0016858:	e8 87 94 00 00       	call   c001fce4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001685d:	83 c4 10             	add    esp,0x10
c0016860:	83 ec 04             	sub    esp,0x4
c0016863:	68 d0 31 02 c0       	push   0xc00231d0
c0016868:	68 e4 96 02 c0       	push   0xc00296e4
c001686d:	68 94 fc 01 c0       	push   0xc001fc94
c0016872:	e8 51 3f ff ff       	call   c000a7c8 <__cxa_atexit>
c0016877:	83 c4 10             	add    esp,0x10
c001687a:	83 ec 0c             	sub    esp,0xc
c001687d:	68 d8 96 02 c0       	push   0xc00296d8
c0016882:	e8 5d 94 00 00       	call   c001fce4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016887:	83 c4 10             	add    esp,0x10
c001688a:	83 ec 04             	sub    esp,0x4
c001688d:	68 d0 31 02 c0       	push   0xc00231d0
c0016892:	68 d8 96 02 c0       	push   0xc00296d8
c0016897:	68 94 fc 01 c0       	push   0xc001fc94
c001689c:	e8 27 3f ff ff       	call   c000a7c8 <__cxa_atexit>
c00168a1:	83 c4 10             	add    esp,0x10
c00168a4:	83 ec 0c             	sub    esp,0xc
c00168a7:	68 cc 96 02 c0       	push   0xc00296cc
c00168ac:	e8 33 94 00 00       	call   c001fce4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00168b1:	83 c4 10             	add    esp,0x10
c00168b4:	83 ec 04             	sub    esp,0x4
c00168b7:	68 d0 31 02 c0       	push   0xc00231d0
c00168bc:	68 cc 96 02 c0       	push   0xc00296cc
c00168c1:	68 94 fc 01 c0       	push   0xc001fc94
c00168c6:	e8 fd 3e ff ff       	call   c000a7c8 <__cxa_atexit>
c00168cb:	83 c4 10             	add    esp,0x10
c00168ce:	66 90                	xchg   ax,ax
c00168d0:	90                   	nop
c00168d1:	83 c4 0c             	add    esp,0xc
c00168d4:	c3                   	ret    
c00168d5:	8d 76 00             	lea    esi,[esi+0x0]

c00168d8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00168d8:	83 ec 0c             	sub    esp,0xc
c00168db:	83 ec 08             	sub    esp,0x8
c00168de:	68 ff ff 00 00       	push   0xffff
c00168e3:	6a 01                	push   0x1
c00168e5:	e8 4a ff ff ff       	call   c0016834 <__static_initialization_and_destruction_0(int, int)>
c00168ea:	83 c4 10             	add    esp,0x10
c00168ed:	83 c4 0c             	add    esp,0xc
c00168f0:	c3                   	ret    

c00168f1 <Vm::inbv(unsigned short)>:
c00168f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00168f5:	66 81 fa fe fe       	cmp    dx,0xfefe
c00168fa:	75 06                	jne    c0016902 <Vm::inbv(unsigned short)+0x11>
c00168fc:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c0016901:	c3                   	ret    
c0016902:	ec                   	in     al,dx
c0016903:	c3                   	ret    

c0016904 <Vm::outbv(unsigned short, unsigned char)>:
c0016904:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016908:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001690c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016911:	75 25                	jne    c0016938 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016913:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016919:	8d 51 01             	lea    edx,[ecx+0x1]
c001691c:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c0016922:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c0016928:	83 fa 20             	cmp    edx,0x20
c001692b:	75 0c                	jne    c0016939 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001692d:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c0016937:	c3                   	ret    
c0016938:	ee                   	out    dx,al
c0016939:	c3                   	ret    

c001693a <Vm::realToLinear(unsigned short, unsigned short)>:
c001693a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001693f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016944:	c1 e0 04             	shl    eax,0x4
c0016947:	01 d0                	add    eax,edx
c0016949:	c3                   	ret    

c001694a <Vm::getSegment(unsigned int)>:
c001694a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001694e:	c1 e8 10             	shr    eax,0x10
c0016951:	c3                   	ret    

c0016952 <Vm::getOffset(unsigned int)>:
c0016952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016956:	c3                   	ret    

c0016957 <Vm::mainloop2()>:
c0016957:	83 ec 18             	sub    esp,0x18
c001695a:	fa                   	cli    
c001695b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016961:	6a 02                	push   0x2
c0016963:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c001696a:	e8 89 f5 ff ff       	call   c0015ef8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001696f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016974:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016978:	52                   	push   edx
c0016979:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001697d:	52                   	push   edx
c001697e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016982:	52                   	push   edx
c0016983:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016987:	50                   	push   eax
c0016988:	e8 82 98 fe ff       	call   c000020f <goToVM86>
c001698d:	83 c4 2c             	add    esp,0x2c
c0016990:	c3                   	ret    

c0016991 <Vm::mainVm8086Loop(void*)>:
c0016991:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016996:	48                   	dec    eax
c0016997:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001699c:	75 01                	jne    c001699f <Vm::mainVm8086Loop(void*)+0xe>
c001699e:	fb                   	sti    
c001699f:	eb b6                	jmp    c0016957 <Vm::mainloop2()>

c00169a1 <Vm::mainloop3(unsigned long)>:
c00169a1:	83 ec 18             	sub    esp,0x18
c00169a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00169a8:	fa                   	cli    
c00169a9:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00169af:	6a 02                	push   0x2
c00169b1:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c00169b8:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c00169bd:	e8 36 f5 ff ff       	call   c0015ef8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00169c2:	83 c4 1c             	add    esp,0x1c
c00169c5:	eb 90                	jmp    c0016957 <Vm::mainloop2()>

c00169c7 <Vm::initialise8086()>:
c00169c7:	83 ec 0c             	sub    esp,0xc
c00169ca:	68 80 00 00 00       	push   0x80
c00169cf:	6a 00                	push   0x0
c00169d1:	68 91 69 01 c0       	push   0xc0016991
c00169d6:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00169dc:	e8 db f0 ff ff       	call   c0015abc <Process::createThread(void (*)(void*), void*, int)>
c00169e1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00169e8:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c00169ed:	68 00 01 00 00       	push   0x100
c00169f2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00169f7:	6a 00                	push   0x0
c00169f9:	6a 00                	push   0x0
c00169fb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016a01:	e8 14 35 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016a06:	83 c4 2c             	add    esp,0x2c
c0016a09:	c3                   	ret    

c0016a0a <Vm::finish8086()>:
c0016a0a:	53                   	push   ebx
c0016a0b:	83 ec 08             	sub    esp,0x8
c0016a0e:	fa                   	cli    
c0016a0f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a15:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016a1c:	75 15                	jne    c0016a33 <Vm::finish8086()+0x29>
c0016a1e:	e8 e9 f2 ff ff       	call   c0015d0c <schedule()>
c0016a23:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a28:	48                   	dec    eax
c0016a29:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a2e:	75 de                	jne    c0016a0e <Vm::finish8086()+0x4>
c0016a30:	fb                   	sti    
c0016a31:	eb db                	jmp    c0016a0e <Vm::finish8086()+0x4>
c0016a33:	83 ec 0c             	sub    esp,0xc
c0016a36:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c0016a3c:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016a42:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c0016a49:	e8 d6 f7 ff ff       	call   c0016224 <unblockTask(ThreadControlBlock*)>
c0016a4e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a53:	83 c4 10             	add    esp,0x10
c0016a56:	8d 50 ff             	lea    edx,[eax-0x1]
c0016a59:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016a5f:	85 d2                	test   edx,edx
c0016a61:	75 01                	jne    c0016a64 <Vm::finish8086()+0x5a>
c0016a63:	fb                   	sti    
c0016a64:	89 d8                	mov    eax,ebx
c0016a66:	83 c4 08             	add    esp,0x8
c0016a69:	5b                   	pop    ebx
c0016a6a:	c3                   	ret    

c0016a6b <Vm::getOutput8086(unsigned char*)>:
c0016a6b:	57                   	push   edi
c0016a6c:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016a72:	56                   	push   esi
c0016a73:	be 40 97 02 c0       	mov    esi,0xc0029740
c0016a78:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016a7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a7e:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c0016a83:	5e                   	pop    esi
c0016a84:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016a8e:	5f                   	pop    edi
c0016a8f:	c3                   	ret    

c0016a90 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016a90:	55                   	push   ebp
c0016a91:	57                   	push   edi
c0016a92:	56                   	push   esi
c0016a93:	53                   	push   ebx
c0016a94:	83 ec 0c             	sub    esp,0xc
c0016a97:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016a9b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016a9f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016aa3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016aa7:	fa                   	cli    
c0016aa8:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016aae:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016ab5:	75 15                	jne    c0016acc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016ab7:	e8 50 f2 ff ff       	call   c0015d0c <schedule()>
c0016abc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016ac1:	48                   	dec    eax
c0016ac2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016ac7:	75 de                	jne    c0016aa7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016ac9:	fb                   	sti    
c0016aca:	eb db                	jmp    c0016aa7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016acc:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016ad1:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016adb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016adf:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016ae3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016ae7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016aeb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016aef:	0f b7 ff             	movzx  edi,di
c0016af2:	0f b7 f6             	movzx  esi,si
c0016af5:	50                   	push   eax
c0016af6:	6a 20                	push   0x20
c0016af8:	6a 00                	push   0x0
c0016afa:	68 40 97 02 c0       	push   0xc0029740
c0016aff:	e8 ec 99 fe ff       	call   c00004f0 <memset>
c0016b04:	5a                   	pop    edx
c0016b05:	59                   	pop    ecx
c0016b06:	57                   	push   edi
c0016b07:	56                   	push   esi
c0016b08:	e8 2d fe ff ff       	call   c001693a <Vm::realToLinear(unsigned short, unsigned short)>
c0016b0d:	83 c4 10             	add    esp,0x10
c0016b10:	89 c7                	mov    edi,eax
c0016b12:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016b16:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016b1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b1c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b21:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016b28:	48                   	dec    eax
c0016b29:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b2e:	75 01                	jne    c0016b31 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016b30:	fb                   	sti    
c0016b31:	83 ec 0c             	sub    esp,0xc
c0016b34:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016b3a:	e8 e5 f6 ff ff       	call   c0016224 <unblockTask(ThreadControlBlock*)>
c0016b3f:	83 c4 1c             	add    esp,0x1c
c0016b42:	b0 01                	mov    al,0x1
c0016b44:	5b                   	pop    ebx
c0016b45:	5e                   	pop    esi
c0016b46:	5f                   	pop    edi
c0016b47:	5d                   	pop    ebp
c0016b48:	c3                   	ret    

c0016b49 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016b49:	55                   	push   ebp
c0016b4a:	57                   	push   edi
c0016b4b:	56                   	push   esi
c0016b4c:	53                   	push   ebx
c0016b4d:	83 ec 34             	sub    esp,0x34
c0016b50:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016b54:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016b58:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016b5c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016b60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b68:	68 28 26 02 c0       	push   0xc0022628
c0016b6d:	e8 d3 3d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	fa                   	cli    
c0016b76:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016b7c:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016b82:	84 db                	test   bl,bl
c0016b84:	75 15                	jne    c0016b9b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016b86:	e8 81 f1 ff ff       	call   c0015d0c <schedule()>
c0016b8b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b90:	48                   	dec    eax
c0016b91:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b96:	75 dd                	jne    c0016b75 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016b98:	fb                   	sti    
c0016b99:	eb da                	jmp    c0016b75 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016b9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b9f:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016ba4:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016bae:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016bb2:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016bb6:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016bba:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016bbe:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016bc2:	50                   	push   eax
c0016bc3:	6a 20                	push   0x20
c0016bc5:	6a 00                	push   0x0
c0016bc7:	68 40 97 02 c0       	push   0xc0029740
c0016bcc:	e8 1f 99 fe ff       	call   c00004f0 <memset>
c0016bd1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016bd8:	e8 d9 0e ff ff       	call   c0007ab6 <malloc>
c0016bdd:	6a 01                	push   0x1
c0016bdf:	89 c5                	mov    ebp,eax
c0016be1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016be7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0016beb:	50                   	push   eax
c0016bec:	e8 ff 4b ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c0016bf1:	83 c4 20             	add    esp,0x20
c0016bf4:	85 ed                	test   ebp,ebp
c0016bf6:	75 0a                	jne    c0016c02 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xb9>
c0016bf8:	83 ec 0c             	sub    esp,0xc
c0016bfb:	68 4a 26 02 c0       	push   0xc002264a
c0016c00:	eb 2b                	jmp    c0016c2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe4>
c0016c02:	50                   	push   eax
c0016c03:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016c07:	50                   	push   eax
c0016c08:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016c0c:	50                   	push   eax
c0016c0d:	55                   	push   ebp
c0016c0e:	e8 bd 4f ff ff       	call   c000bbd0 <File::stat(unsigned long long*, bool*)>
c0016c13:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016c17:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016c1b:	83 c4 10             	add    esp,0x10
c0016c1e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016c23:	74 27                	je     c0016c4c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x103>
c0016c25:	83 ec 0c             	sub    esp,0xc
c0016c28:	68 5e 26 02 c0       	push   0xc002265e
c0016c2d:	e8 1f a7 ff ff       	call   c0011351 <KePanic(char const*)>
c0016c32:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016c37:	83 c4 10             	add    esp,0x10
c0016c3a:	48                   	dec    eax
c0016c3b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016c40:	85 c0                	test   eax,eax
c0016c42:	75 01                	jne    c0016c45 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfc>
c0016c44:	fb                   	sti    
c0016c45:	31 db                	xor    ebx,ebx
c0016c47:	e9 90 00 00 00       	jmp    c0016cdc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x193>
c0016c4c:	51                   	push   ecx
c0016c4d:	51                   	push   ecx
c0016c4e:	6a 01                	push   0x1
c0016c50:	55                   	push   ebp
c0016c51:	e8 78 4c ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c0016c56:	83 c4 10             	add    esp,0x10
c0016c59:	85 c0                	test   eax,eax
c0016c5b:	74 26                	je     c0016c83 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13a>
c0016c5d:	83 ec 0c             	sub    esp,0xc
c0016c60:	68 77 26 02 c0       	push   0xc0022677
c0016c65:	e8 e7 a6 ff ff       	call   c0011351 <KePanic(char const*)>
c0016c6a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016c6f:	83 c4 10             	add    esp,0x10
c0016c72:	48                   	dec    eax
c0016c73:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016c78:	85 c0                	test   eax,eax
c0016c7a:	75 c9                	jne    c0016c45 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfc>
c0016c7c:	fb                   	sti    
c0016c7d:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016c81:	eb 59                	jmp    c0016cdc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x193>
c0016c83:	0f b7 ff             	movzx  edi,di
c0016c86:	50                   	push   eax
c0016c87:	0f b7 f6             	movzx  esi,si
c0016c8a:	50                   	push   eax
c0016c8b:	57                   	push   edi
c0016c8c:	56                   	push   esi
c0016c8d:	e8 a8 fc ff ff       	call   c001693a <Vm::realToLinear(unsigned short, unsigned short)>
c0016c92:	5a                   	pop    edx
c0016c93:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016c96:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016c9a:	51                   	push   ecx
c0016c9b:	50                   	push   eax
c0016c9c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ca0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ca4:	55                   	push   ebp
c0016ca5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016ca8:	83 c4 14             	add    esp,0x14
c0016cab:	55                   	push   ebp
c0016cac:	e8 7b 4c ff ff       	call   c000b92c <File::close()>
c0016cb1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016cb6:	83 c4 10             	add    esp,0x10
c0016cb9:	48                   	dec    eax
c0016cba:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016cc1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016cc6:	85 c0                	test   eax,eax
c0016cc8:	75 01                	jne    c0016ccb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x182>
c0016cca:	fb                   	sti    
c0016ccb:	83 ec 0c             	sub    esp,0xc
c0016cce:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016cd4:	e8 4b f5 ff ff       	call   c0016224 <unblockTask(ThreadControlBlock*)>
c0016cd9:	83 c4 10             	add    esp,0x10
c0016cdc:	83 c4 2c             	add    esp,0x2c
c0016cdf:	88 d8                	mov    al,bl
c0016ce1:	5b                   	pop    ebx
c0016ce2:	5e                   	pop    esi
c0016ce3:	5f                   	pop    edi
c0016ce4:	5d                   	pop    ebp
c0016ce5:	c3                   	ret    

c0016ce6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016ce6:	57                   	push   edi
c0016ce7:	56                   	push   esi
c0016ce8:	53                   	push   ebx
c0016ce9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cf1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016cf5:	83 e8 06             	sub    eax,0x6
c0016cf8:	0f b7 c0             	movzx  eax,ax
c0016cfb:	50                   	push   eax
c0016cfc:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016d01:	50                   	push   eax
c0016d02:	e8 33 fc ff ff       	call   c001693a <Vm::realToLinear(unsigned short, unsigned short)>
c0016d07:	5a                   	pop    edx
c0016d08:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016d0b:	59                   	pop    ecx
c0016d0c:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016d0f:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016d12:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016d18:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016d1b:	8d 56 02             	lea    edx,[esi+0x2]
c0016d1e:	66 89 10             	mov    WORD PTR [eax],dx
c0016d21:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016d25:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016d29:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016d2c:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016d30:	0f b6 f1             	movzx  esi,cl
c0016d33:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016d37:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d3d:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016d41:	0f b6 d5             	movzx  edx,ch
c0016d44:	74 0a                	je     c0016d50 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016d46:	c1 e2 08             	shl    edx,0x8
c0016d49:	09 f2                	or     edx,esi
c0016d4b:	80 ce 02             	or     dh,0x2
c0016d4e:	eb 08                	jmp    c0016d58 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016d50:	c1 e2 08             	shl    edx,0x8
c0016d53:	09 f2                	or     edx,esi
c0016d55:	80 e6 fd             	and    dh,0xfd
c0016d58:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016d5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d61:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016d65:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016d6d:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016d70:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016d78:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016d7b:	5b                   	pop    ebx
c0016d7c:	5e                   	pop    esi
c0016d7d:	5f                   	pop    edi
c0016d7e:	c3                   	ret    

c0016d7f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016d7f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d84:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d89:	c1 e0 04             	shl    eax,0x4
c0016d8c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016d8f:	c3                   	ret    

c0016d90 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016d90:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d95:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d9a:	c1 e0 04             	shl    eax,0x4
c0016d9d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016da1:	c3                   	ret    

c0016da2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016da2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016da7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016dac:	c1 e0 04             	shl    eax,0x4
c0016daf:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016db2:	c3                   	ret    

c0016db3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016db3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016db8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016dbd:	c1 e0 04             	shl    eax,0x4
c0016dc0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016dc4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016dc7:	c3                   	ret    

c0016dc8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016dc8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016dcd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016dd2:	c1 e0 04             	shl    eax,0x4
c0016dd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016dd9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016ddd:	c3                   	ret    

c0016dde <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016dde:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016de3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016de8:	c1 e0 04             	shl    eax,0x4
c0016deb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016def:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016df2:	c3                   	ret    

c0016df3 <Vm::faultHandler(regs*)>:
c0016df3:	55                   	push   ebp
c0016df4:	57                   	push   edi
c0016df5:	56                   	push   esi
c0016df6:	53                   	push   ebx
c0016df7:	83 ec 2c             	sub    esp,0x2c
c0016dfa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016dfe:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016e01:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016e05:	0f b7 f8             	movzx  edi,ax
c0016e08:	52                   	push   edx
c0016e09:	0f b7 c0             	movzx  eax,ax
c0016e0c:	50                   	push   eax
c0016e0d:	e8 28 fb ff ff       	call   c001693a <Vm::realToLinear(unsigned short, unsigned short)>
c0016e12:	5a                   	pop    edx
c0016e13:	59                   	pop    ecx
c0016e14:	89 c1                	mov    ecx,eax
c0016e16:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e1d:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016e22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e26:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016e29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e2d:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016e32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e3a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e3e:	e8 f7 fa ff ff       	call   c001693a <Vm::realToLinear(unsigned short, unsigned short)>
c0016e43:	5e                   	pop    esi
c0016e44:	be 06 00 00 00       	mov    esi,0x6
c0016e49:	5d                   	pop    ebp
c0016e4a:	31 ed                	xor    ebp,ebp
c0016e4c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016e51:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016e54:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016e5a:	0f 84 74 02 00 00    	je     c00170d4 <Vm::faultHandler(regs*)+0x2e1>
c0016e60:	0f 87 94 00 00 00    	ja     c0016efa <Vm::faultHandler(regs*)+0x107>
c0016e66:	83 fa 66             	cmp    edx,0x66
c0016e69:	0f 84 e2 01 00 00    	je     c0017051 <Vm::faultHandler(regs*)+0x25e>
c0016e6f:	77 47                	ja     c0016eb8 <Vm::faultHandler(regs*)+0xc5>
c0016e71:	83 fa 36             	cmp    edx,0x36
c0016e74:	0f 84 ca 01 00 00    	je     c0017044 <Vm::faultHandler(regs*)+0x251>
c0016e7a:	77 1a                	ja     c0016e96 <Vm::faultHandler(regs*)+0xa3>
c0016e7c:	83 fa 26             	cmp    edx,0x26
c0016e7f:	0f 84 98 01 00 00    	je     c001701d <Vm::faultHandler(regs*)+0x22a>
c0016e85:	83 fa 2e             	cmp    edx,0x2e
c0016e88:	0f 85 21 06 00 00    	jne    c00174af <Vm::faultHandler(regs*)+0x6bc>
c0016e8e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e91:	31 f6                	xor    esi,esi
c0016e93:	41                   	inc    ecx
c0016e94:	eb bb                	jmp    c0016e51 <Vm::faultHandler(regs*)+0x5e>
c0016e96:	83 fa 64             	cmp    edx,0x64
c0016e99:	0f 84 8b 01 00 00    	je     c001702a <Vm::faultHandler(regs*)+0x237>
c0016e9f:	0f 87 92 01 00 00    	ja     c0017037 <Vm::faultHandler(regs*)+0x244>
c0016ea5:	83 fa 3e             	cmp    edx,0x3e
c0016ea8:	0f 85 01 06 00 00    	jne    c00174af <Vm::faultHandler(regs*)+0x6bc>
c0016eae:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016eb1:	be 01 00 00 00       	mov    esi,0x1
c0016eb6:	eb db                	jmp    c0016e93 <Vm::faultHandler(regs*)+0xa0>
c0016eb8:	83 fa 6d             	cmp    edx,0x6d
c0016ebb:	0f 84 34 03 00 00    	je     c00171f5 <Vm::faultHandler(regs*)+0x402>
c0016ec1:	77 17                	ja     c0016eda <Vm::faultHandler(regs*)+0xe7>
c0016ec3:	83 fa 67             	cmp    edx,0x67
c0016ec6:	0f 84 92 01 00 00    	je     c001705e <Vm::faultHandler(regs*)+0x26b>
c0016ecc:	83 fa 6c             	cmp    edx,0x6c
c0016ecf:	0f 84 b1 02 00 00    	je     c0017186 <Vm::faultHandler(regs*)+0x393>
c0016ed5:	e9 d5 05 00 00       	jmp    c00174af <Vm::faultHandler(regs*)+0x6bc>
c0016eda:	83 fa 6f             	cmp    edx,0x6f
c0016edd:	0f 84 3d 04 00 00    	je     c0017320 <Vm::faultHandler(regs*)+0x52d>
c0016ee3:	0f 82 9f 03 00 00    	jb     c0017288 <Vm::faultHandler(regs*)+0x495>
c0016ee9:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016eef:	0f 84 76 01 00 00    	je     c001706b <Vm::faultHandler(regs*)+0x278>
c0016ef5:	e9 b5 05 00 00       	jmp    c00174af <Vm::faultHandler(regs*)+0x6bc>
c0016efa:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016f00:	0f 84 51 05 00 00    	je     c0017457 <Vm::faultHandler(regs*)+0x664>
c0016f06:	0f 87 a9 00 00 00    	ja     c0016fb5 <Vm::faultHandler(regs*)+0x1c2>
c0016f0c:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016f12:	0f 84 d0 04 00 00    	je     c00173e8 <Vm::faultHandler(regs*)+0x5f5>
c0016f18:	77 78                	ja     c0016f92 <Vm::faultHandler(regs*)+0x19f>
c0016f1a:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016f20:	0f 84 0e 02 00 00    	je     c0017134 <Vm::faultHandler(regs*)+0x341>
c0016f26:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016f2c:	0f 85 7d 05 00 00    	jne    c00174af <Vm::faultHandler(regs*)+0x6bc>
c0016f32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016f36:	89 d1                	mov    ecx,edx
c0016f38:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016f3b:	c1 e1 08             	shl    ecx,0x8
c0016f3e:	09 ca                	or     edx,ecx
c0016f40:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016f43:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016f47:	89 d1                	mov    ecx,edx
c0016f49:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016f4d:	c1 e1 08             	shl    ecx,0x8
c0016f50:	09 ca                	or     edx,ecx
c0016f52:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016f55:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016f59:	89 d1                	mov    ecx,edx
c0016f5b:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016f5f:	c1 e1 08             	shl    ecx,0x8
c0016f62:	09 ca                	or     edx,ecx
c0016f64:	81 ca 00 02 02 00    	or     edx,0x20200
c0016f6a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016f6d:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016f71:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f77:	d1 e8                	shr    eax,1
c0016f79:	83 e0 01             	and    eax,0x1
c0016f7c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016f7f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016f82:	83 c0 06             	add    eax,0x6
c0016f85:	25 ff ff 00 00       	and    eax,0xffff
c0016f8a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016f8d:	e9 19 05 00 00       	jmp    c00174ab <Vm::faultHandler(regs*)+0x6b8>
c0016f92:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016f98:	0f 84 8f 04 00 00    	je     c001742d <Vm::faultHandler(regs*)+0x63a>
c0016f9e:	0f 82 60 04 00 00    	jb     c0017404 <Vm::faultHandler(regs*)+0x611>
c0016fa4:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016faa:	0f 84 94 04 00 00    	je     c0017444 <Vm::faultHandler(regs*)+0x651>
c0016fb0:	e9 fa 04 00 00       	jmp    c00174af <Vm::faultHandler(regs*)+0x6bc>
c0016fb5:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016fbb:	0f 84 d7 04 00 00    	je     c0017498 <Vm::faultHandler(regs*)+0x6a5>
c0016fc1:	77 2e                	ja     c0016ff1 <Vm::faultHandler(regs*)+0x1fe>
c0016fc3:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016fc9:	0f 84 a4 04 00 00    	je     c0017473 <Vm::faultHandler(regs*)+0x680>
c0016fcf:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016fd5:	0f 85 d4 04 00 00    	jne    c00174af <Vm::faultHandler(regs*)+0x6bc>
c0016fdb:	50                   	push   eax
c0016fdc:	50                   	push   eax
c0016fdd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016fe1:	50                   	push   eax
c0016fe2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016fe6:	50                   	push   eax
c0016fe7:	e8 18 f9 ff ff       	call   c0016904 <Vm::outbv(unsigned short, unsigned char)>
c0016fec:	e9 9f 04 00 00       	jmp    c0017490 <Vm::faultHandler(regs*)+0x69d>
c0016ff1:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016ff7:	0f 84 6d 01 00 00    	je     c001716a <Vm::faultHandler(regs*)+0x377>
c0016ffd:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017003:	0f 84 6f 01 00 00    	je     c0017178 <Vm::faultHandler(regs*)+0x385>
c0017009:	81 fa f3 00 00 00    	cmp    edx,0xf3
c001700f:	0f 85 9a 04 00 00    	jne    c00174af <Vm::faultHandler(regs*)+0x6bc>
c0017015:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017018:	e9 76 fe ff ff       	jmp    c0016e93 <Vm::faultHandler(regs*)+0xa0>
c001701d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017020:	be 02 00 00 00       	mov    esi,0x2
c0017025:	e9 69 fe ff ff       	jmp    c0016e93 <Vm::faultHandler(regs*)+0xa0>
c001702a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001702d:	be 03 00 00 00       	mov    esi,0x3
c0017032:	e9 5c fe ff ff       	jmp    c0016e93 <Vm::faultHandler(regs*)+0xa0>
c0017037:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001703a:	be 04 00 00 00       	mov    esi,0x4
c001703f:	e9 4f fe ff ff       	jmp    c0016e93 <Vm::faultHandler(regs*)+0xa0>
c0017044:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017047:	be 05 00 00 00       	mov    esi,0x5
c001704c:	e9 42 fe ff ff       	jmp    c0016e93 <Vm::faultHandler(regs*)+0xa0>
c0017051:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017054:	bd 01 00 00 00       	mov    ebp,0x1
c0017059:	e9 35 fe ff ff       	jmp    c0016e93 <Vm::faultHandler(regs*)+0xa0>
c001705e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017061:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017066:	e9 28 fe ff ff       	jmp    c0016e93 <Vm::faultHandler(regs*)+0xa0>
c001706b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001706e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017072:	83 e5 01             	and    ebp,0x1
c0017075:	74 30                	je     c00170a7 <Vm::faultHandler(regs*)+0x2b4>
c0017077:	83 e9 04             	sub    ecx,0x4
c001707a:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017080:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017086:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017089:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001708c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017092:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017096:	0f 84 0c 04 00 00    	je     c00174a8 <Vm::faultHandler(regs*)+0x6b5>
c001709c:	80 ce 02             	or     dh,0x2
c001709f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00170a2:	e9 01 04 00 00       	jmp    c00174a8 <Vm::faultHandler(regs*)+0x6b5>
c00170a7:	83 e9 02             	sub    ecx,0x2
c00170aa:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00170b0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00170b3:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00170b7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00170bd:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00170c1:	74 05                	je     c00170c8 <Vm::faultHandler(regs*)+0x2d5>
c00170c3:	80 ce 02             	or     dh,0x2
c00170c6:	eb 03                	jmp    c00170cb <Vm::faultHandler(regs*)+0x2d8>
c00170c8:	80 e6 fd             	and    dh,0xfd
c00170cb:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00170cf:	e9 d4 03 00 00       	jmp    c00174a8 <Vm::faultHandler(regs*)+0x6b5>
c00170d4:	83 e5 01             	and    ebp,0x1
c00170d7:	74 2a                	je     c0017103 <Vm::faultHandler(regs*)+0x310>
c00170d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00170db:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00170e1:	81 ca 00 02 02 00    	or     edx,0x20200
c00170e7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00170ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00170ec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00170f2:	c1 e8 09             	shr    eax,0x9
c00170f5:	83 e0 01             	and    eax,0x1
c00170f8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00170fb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00170fe:	83 c0 04             	add    eax,0x4
c0017101:	eb 24                	jmp    c0017127 <Vm::faultHandler(regs*)+0x334>
c0017103:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017106:	81 ca 00 02 02 00    	or     edx,0x20200
c001710c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001710f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017112:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017118:	c1 e8 09             	shr    eax,0x9
c001711b:	83 e0 01             	and    eax,0x1
c001711e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017121:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017124:	83 c0 02             	add    eax,0x2
c0017127:	25 ff ff 00 00       	and    eax,0xffff
c001712c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001712f:	e9 74 03 00 00       	jmp    c00174a8 <Vm::faultHandler(regs*)+0x6b5>
c0017134:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017138:	3d ee 00 00 00       	cmp    eax,0xee
c001713d:	75 10                	jne    c001714f <Vm::faultHandler(regs*)+0x35c>
c001713f:	83 ec 0c             	sub    esp,0xc
c0017142:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017145:	e8 57 f8 ff ff       	call   c00169a1 <Vm::mainloop3(unsigned long)>
c001714a:	e9 44 03 00 00       	jmp    c0017493 <Vm::faultHandler(regs*)+0x6a0>
c001714f:	83 ec 0c             	sub    esp,0xc
c0017152:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017156:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001715a:	51                   	push   ecx
c001715b:	50                   	push   eax
c001715c:	53                   	push   ebx
c001715d:	e8 84 fb ff ff       	call   c0016ce6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017162:	83 c4 20             	add    esp,0x20
c0017165:	e9 41 03 00 00       	jmp    c00174ab <Vm::faultHandler(regs*)+0x6b8>
c001716a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001716f:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017173:	e9 30 03 00 00       	jmp    c00174a8 <Vm::faultHandler(regs*)+0x6b5>
c0017178:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001717d:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017181:	e9 22 03 00 00       	jmp    c00174a8 <Vm::faultHandler(regs*)+0x6b5>
c0017186:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017189:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001718e:	74 2b                	je     c00171bb <Vm::faultHandler(regs*)+0x3c8>
c0017190:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017197:	76 22                	jbe    c00171bb <Vm::faultHandler(regs*)+0x3c8>
c0017199:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001719d:	50                   	push   eax
c001719e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00171a2:	50                   	push   eax
c00171a3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00171a7:	50                   	push   eax
c00171a8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00171ac:	50                   	push   eax
c00171ad:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171b1:	50                   	push   eax
c00171b2:	6a 6c                	push   0x6c
c00171b4:	6a 6c                	push   0x6c
c00171b6:	e9 bd 01 00 00       	jmp    c0017378 <Vm::faultHandler(regs*)+0x585>
c00171bb:	83 ec 0c             	sub    esp,0xc
c00171be:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00171c2:	0f b7 f6             	movzx  esi,si
c00171c5:	50                   	push   eax
c00171c6:	e8 26 f7 ff ff       	call   c00168f1 <Vm::inbv(unsigned short)>
c00171cb:	83 c4 0c             	add    esp,0xc
c00171ce:	0f b6 c0             	movzx  eax,al
c00171d1:	50                   	push   eax
c00171d2:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00171d6:	50                   	push   eax
c00171d7:	56                   	push   esi
c00171d8:	e8 d6 fb ff ff       	call   c0016db3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00171dd:	83 c4 10             	add    esp,0x10
c00171e0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00171e3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00171e7:	74 03                	je     c00171ec <Vm::faultHandler(regs*)+0x3f9>
c00171e9:	48                   	dec    eax
c00171ea:	eb 01                	jmp    c00171ed <Vm::faultHandler(regs*)+0x3fa>
c00171ec:	40                   	inc    eax
c00171ed:	0f b7 c0             	movzx  eax,ax
c00171f0:	e9 8b 00 00 00       	jmp    c0017280 <Vm::faultHandler(regs*)+0x48d>
c00171f5:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00171f8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00171fb:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017200:	74 29                	je     c001722b <Vm::faultHandler(regs*)+0x438>
c0017202:	3d ff ff 00 00       	cmp    eax,0xffff
c0017207:	76 22                	jbe    c001722b <Vm::faultHandler(regs*)+0x438>
c0017209:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001720d:	50                   	push   eax
c001720e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017212:	50                   	push   eax
c0017213:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017217:	50                   	push   eax
c0017218:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001721c:	50                   	push   eax
c001721d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017221:	50                   	push   eax
c0017222:	6a 6d                	push   0x6d
c0017224:	6a 6d                	push   0x6d
c0017226:	e9 4d 01 00 00       	jmp    c0017378 <Vm::faultHandler(regs*)+0x585>
c001722b:	0f b7 c8             	movzx  ecx,ax
c001722e:	0f b7 f6             	movzx  esi,si
c0017231:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017234:	83 e5 01             	and    ebp,0x1
c0017237:	74 20                	je     c0017259 <Vm::faultHandler(regs*)+0x466>
c0017239:	ed                   	in     eax,dx
c001723a:	55                   	push   ebp
c001723b:	50                   	push   eax
c001723c:	51                   	push   ecx
c001723d:	56                   	push   esi
c001723e:	e8 9b fb ff ff       	call   c0016dde <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017243:	83 c4 10             	add    esp,0x10
c0017246:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017249:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001724d:	74 05                	je     c0017254 <Vm::faultHandler(regs*)+0x461>
c001724f:	83 e8 04             	sub    eax,0x4
c0017252:	eb 27                	jmp    c001727b <Vm::faultHandler(regs*)+0x488>
c0017254:	83 c0 04             	add    eax,0x4
c0017257:	eb 22                	jmp    c001727b <Vm::faultHandler(regs*)+0x488>
c0017259:	66 ed                	in     ax,dx
c001725b:	0f b7 c0             	movzx  eax,ax
c001725e:	57                   	push   edi
c001725f:	50                   	push   eax
c0017260:	51                   	push   ecx
c0017261:	56                   	push   esi
c0017262:	e8 61 fb ff ff       	call   c0016dc8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017267:	83 c4 10             	add    esp,0x10
c001726a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001726d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017271:	74 05                	je     c0017278 <Vm::faultHandler(regs*)+0x485>
c0017273:	83 e8 02             	sub    eax,0x2
c0017276:	eb 03                	jmp    c001727b <Vm::faultHandler(regs*)+0x488>
c0017278:	83 c0 02             	add    eax,0x2
c001727b:	25 ff ff 00 00       	and    eax,0xffff
c0017280:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017283:	e9 20 02 00 00       	jmp    c00174a8 <Vm::faultHandler(regs*)+0x6b5>
c0017288:	8d 46 ff             	lea    eax,[esi-0x1]
c001728b:	0f b6 f0             	movzx  esi,al
c001728e:	83 fe 05             	cmp    esi,0x5
c0017291:	77 23                	ja     c00172b6 <Vm::faultHandler(regs*)+0x4c3>
c0017293:	ff 24 b5 ec 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd914]
c001729a:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001729f:	eb 15                	jmp    c00172b6 <Vm::faultHandler(regs*)+0x4c3>
c00172a1:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00172a5:	eb 0f                	jmp    c00172b6 <Vm::faultHandler(regs*)+0x4c3>
c00172a7:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00172ab:	eb 09                	jmp    c00172b6 <Vm::faultHandler(regs*)+0x4c3>
c00172ad:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00172b1:	eb 03                	jmp    c00172b6 <Vm::faultHandler(regs*)+0x4c3>
c00172b3:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00172b6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00172b9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00172be:	74 29                	je     c00172e9 <Vm::faultHandler(regs*)+0x4f6>
c00172c0:	3d ff ff 00 00       	cmp    eax,0xffff
c00172c5:	76 22                	jbe    c00172e9 <Vm::faultHandler(regs*)+0x4f6>
c00172c7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00172cb:	50                   	push   eax
c00172cc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00172d0:	50                   	push   eax
c00172d1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00172d5:	50                   	push   eax
c00172d6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00172da:	50                   	push   eax
c00172db:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172df:	50                   	push   eax
c00172e0:	6a 6e                	push   0x6e
c00172e2:	6a 6e                	push   0x6e
c00172e4:	e9 8f 00 00 00       	jmp    c0017378 <Vm::faultHandler(regs*)+0x585>
c00172e9:	0f b7 c0             	movzx  eax,ax
c00172ec:	52                   	push   edx
c00172ed:	52                   	push   edx
c00172ee:	50                   	push   eax
c00172ef:	57                   	push   edi
c00172f0:	e8 8a fa ff ff       	call   c0016d7f <Vm::readByteFromReal(unsigned short, unsigned short)>
c00172f5:	59                   	pop    ecx
c00172f6:	0f b6 c0             	movzx  eax,al
c00172f9:	5e                   	pop    esi
c00172fa:	50                   	push   eax
c00172fb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00172ff:	50                   	push   eax
c0017300:	e8 ff f5 ff ff       	call   c0016904 <Vm::outbv(unsigned short, unsigned char)>
c0017305:	83 c4 10             	add    esp,0x10
c0017308:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001730b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001730f:	74 03                	je     c0017314 <Vm::faultHandler(regs*)+0x521>
c0017311:	48                   	dec    eax
c0017312:	eb 01                	jmp    c0017315 <Vm::faultHandler(regs*)+0x522>
c0017314:	40                   	inc    eax
c0017315:	0f b7 c0             	movzx  eax,ax
c0017318:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001731b:	e9 88 01 00 00       	jmp    c00174a8 <Vm::faultHandler(regs*)+0x6b5>
c0017320:	8d 46 ff             	lea    eax,[esi-0x1]
c0017323:	0f b6 f0             	movzx  esi,al
c0017326:	83 fe 05             	cmp    esi,0x5
c0017329:	77 1e                	ja     c0017349 <Vm::faultHandler(regs*)+0x556>
c001732b:	ff 24 b5 04 27 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd8fc]
c0017332:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017336:	eb 11                	jmp    c0017349 <Vm::faultHandler(regs*)+0x556>
c0017338:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001733b:	eb 0c                	jmp    c0017349 <Vm::faultHandler(regs*)+0x556>
c001733d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017340:	eb 07                	jmp    c0017349 <Vm::faultHandler(regs*)+0x556>
c0017342:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017345:	eb 02                	jmp    c0017349 <Vm::faultHandler(regs*)+0x556>
c0017347:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017349:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001734c:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017351:	74 37                	je     c001738a <Vm::faultHandler(regs*)+0x597>
c0017353:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017359:	76 2f                	jbe    c001738a <Vm::faultHandler(regs*)+0x597>
c001735b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001735f:	50                   	push   eax
c0017360:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017364:	50                   	push   eax
c0017365:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017369:	50                   	push   eax
c001736a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001736e:	50                   	push   eax
c001736f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017373:	50                   	push   eax
c0017374:	6a 6f                	push   0x6f
c0017376:	6a 6f                	push   0x6f
c0017378:	68 90 26 02 c0       	push   0xc0022690
c001737d:	e8 c3 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017382:	83 c4 20             	add    esp,0x20
c0017385:	e9 83 01 00 00       	jmp    c001750d <Vm::faultHandler(regs*)+0x71a>
c001738a:	0f b7 d7             	movzx  edx,di
c001738d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017390:	0f b7 c6             	movzx  eax,si
c0017393:	81 e1 00 04 00 00    	and    ecx,0x400
c0017399:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001739c:	83 e5 01             	and    ebp,0x1
c001739f:	74 1d                	je     c00173be <Vm::faultHandler(regs*)+0x5cb>
c00173a1:	55                   	push   ebp
c00173a2:	55                   	push   ebp
c00173a3:	50                   	push   eax
c00173a4:	52                   	push   edx
c00173a5:	e8 f8 f9 ff ff       	call   c0016da2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00173aa:	83 c4 10             	add    esp,0x10
c00173ad:	89 fa                	mov    edx,edi
c00173af:	ef                   	out    dx,eax
c00173b0:	85 c9                	test   ecx,ecx
c00173b2:	74 05                	je     c00173b9 <Vm::faultHandler(regs*)+0x5c6>
c00173b4:	83 ee 04             	sub    esi,0x4
c00173b7:	eb 21                	jmp    c00173da <Vm::faultHandler(regs*)+0x5e7>
c00173b9:	83 c6 04             	add    esi,0x4
c00173bc:	eb 1c                	jmp    c00173da <Vm::faultHandler(regs*)+0x5e7>
c00173be:	55                   	push   ebp
c00173bf:	55                   	push   ebp
c00173c0:	50                   	push   eax
c00173c1:	52                   	push   edx
c00173c2:	e8 c9 f9 ff ff       	call   c0016d90 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00173c7:	83 c4 10             	add    esp,0x10
c00173ca:	89 fa                	mov    edx,edi
c00173cc:	66 ef                	out    dx,ax
c00173ce:	85 c9                	test   ecx,ecx
c00173d0:	74 05                	je     c00173d7 <Vm::faultHandler(regs*)+0x5e4>
c00173d2:	83 ee 02             	sub    esi,0x2
c00173d5:	eb 03                	jmp    c00173da <Vm::faultHandler(regs*)+0x5e7>
c00173d7:	83 c6 02             	add    esi,0x2
c00173da:	81 e6 ff ff 00 00    	and    esi,0xffff
c00173e0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00173e3:	e9 c0 00 00 00       	jmp    c00174a8 <Vm::faultHandler(regs*)+0x6b5>
c00173e8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00173ef:	83 ec 0c             	sub    esp,0xc
c00173f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173f6:	50                   	push   eax
c00173f7:	e8 f5 f4 ff ff       	call   c00168f1 <Vm::inbv(unsigned short)>
c00173fc:	0f b6 c0             	movzx  eax,al
c00173ff:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017402:	eb 3a                	jmp    c001743e <Vm::faultHandler(regs*)+0x64b>
c0017404:	83 e5 01             	and    ebp,0x1
c0017407:	74 07                	je     c0017410 <Vm::faultHandler(regs*)+0x61d>
c0017409:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001740d:	ed                   	in     eax,dx
c001740e:	eb 14                	jmp    c0017424 <Vm::faultHandler(regs*)+0x631>
c0017410:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017413:	66 31 f6             	xor    si,si
c0017416:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017419:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001741d:	66 ed                	in     ax,dx
c001741f:	0f b7 c0             	movzx  eax,ax
c0017422:	09 f0                	or     eax,esi
c0017424:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017427:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001742b:	eb 7e                	jmp    c00174ab <Vm::faultHandler(regs*)+0x6b8>
c001742d:	52                   	push   edx
c001742e:	52                   	push   edx
c001742f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017433:	50                   	push   eax
c0017434:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017438:	50                   	push   eax
c0017439:	e8 c6 f4 ff ff       	call   c0016904 <Vm::outbv(unsigned short, unsigned char)>
c001743e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017442:	eb 4f                	jmp    c0017493 <Vm::faultHandler(regs*)+0x6a0>
c0017444:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017447:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001744b:	83 e5 01             	and    ebp,0x1
c001744e:	74 03                	je     c0017453 <Vm::faultHandler(regs*)+0x660>
c0017450:	ef                   	out    dx,eax
c0017451:	eb d4                	jmp    c0017427 <Vm::faultHandler(regs*)+0x634>
c0017453:	66 ef                	out    dx,ax
c0017455:	eb d0                	jmp    c0017427 <Vm::faultHandler(regs*)+0x634>
c0017457:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001745e:	83 ec 0c             	sub    esp,0xc
c0017461:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017465:	50                   	push   eax
c0017466:	e8 86 f4 ff ff       	call   c00168f1 <Vm::inbv(unsigned short)>
c001746b:	0f b6 c0             	movzx  eax,al
c001746e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017471:	eb 1d                	jmp    c0017490 <Vm::faultHandler(regs*)+0x69d>
c0017473:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017476:	83 e5 01             	and    ebp,0x1
c0017479:	74 03                	je     c001747e <Vm::faultHandler(regs*)+0x68b>
c001747b:	ed                   	in     eax,dx
c001747c:	eb 0d                	jmp    c001748b <Vm::faultHandler(regs*)+0x698>
c001747e:	66 ed                	in     ax,dx
c0017480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017483:	0f b7 c0             	movzx  eax,ax
c0017486:	66 31 d2             	xor    dx,dx
c0017489:	09 d0                	or     eax,edx
c001748b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001748e:	eb 18                	jmp    c00174a8 <Vm::faultHandler(regs*)+0x6b5>
c0017490:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017493:	83 c4 10             	add    esp,0x10
c0017496:	eb 13                	jmp    c00174ab <Vm::faultHandler(regs*)+0x6b8>
c0017498:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001749b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001749e:	83 e5 01             	and    ebp,0x1
c00174a1:	74 03                	je     c00174a6 <Vm::faultHandler(regs*)+0x6b3>
c00174a3:	ef                   	out    dx,eax
c00174a4:	eb 02                	jmp    c00174a8 <Vm::faultHandler(regs*)+0x6b5>
c00174a6:	66 ef                	out    dx,ax
c00174a8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174ab:	b0 01                	mov    al,0x1
c00174ad:	eb 60                	jmp    c001750f <Vm::faultHandler(regs*)+0x71c>
c00174af:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00174b3:	50                   	push   eax
c00174b4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00174b8:	50                   	push   eax
c00174b9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00174bd:	50                   	push   eax
c00174be:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00174c2:	50                   	push   eax
c00174c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174c7:	50                   	push   eax
c00174c8:	52                   	push   edx
c00174c9:	52                   	push   edx
c00174ca:	68 bd 26 02 c0       	push   0xc00226bd
c00174cf:	e8 71 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174d4:	83 c4 20             	add    esp,0x20
c00174d7:	83 ec 0c             	sub    esp,0xc
c00174da:	6a 60                	push   0x60
c00174dc:	e8 10 f4 ff ff       	call   c00168f1 <Vm::inbv(unsigned short)>
c00174e1:	83 c4 10             	add    esp,0x10
c00174e4:	0f b6 d0             	movzx  edx,al
c00174e7:	83 fa 1c             	cmp    edx,0x1c
c00174ea:	74 05                	je     c00174f1 <Vm::faultHandler(regs*)+0x6fe>
c00174ec:	83 fa 5a             	cmp    edx,0x5a
c00174ef:	75 e6                	jne    c00174d7 <Vm::faultHandler(regs*)+0x6e4>
c00174f1:	0f b6 c0             	movzx  eax,al
c00174f4:	83 f8 1c             	cmp    eax,0x1c
c00174f7:	74 05                	je     c00174fe <Vm::faultHandler(regs*)+0x70b>
c00174f9:	83 f8 5a             	cmp    eax,0x5a
c00174fc:	75 0f                	jne    c001750d <Vm::faultHandler(regs*)+0x71a>
c00174fe:	83 ec 0c             	sub    esp,0xc
c0017501:	6a 60                	push   0x60
c0017503:	e8 e9 f3 ff ff       	call   c00168f1 <Vm::inbv(unsigned short)>
c0017508:	83 c4 10             	add    esp,0x10
c001750b:	eb e4                	jmp    c00174f1 <Vm::faultHandler(regs*)+0x6fe>
c001750d:	31 c0                	xor    eax,eax
c001750f:	83 c4 2c             	add    esp,0x2c
c0017512:	5b                   	pop    ebx
c0017513:	5e                   	pop    esi
c0017514:	5f                   	pop    edi
c0017515:	5d                   	pop    ebp
c0017516:	c3                   	ret    

c0017517 <noCopro(unsigned long)>:
c0017517:	c3                   	ret    

c0017518 <nmiHandler(regs*, void*)>:
c0017518:	83 ec 0c             	sub    esp,0xc
c001751b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017520:	83 ec 0c             	sub    esp,0xc
c0017523:	50                   	push   eax
c0017524:	e8 8d fd fe ff       	call   c00072b6 <Computer::handleNMI()>
c0017529:	83 c4 10             	add    esp,0x10
c001752c:	90                   	nop
c001752d:	83 c4 0c             	add    esp,0xc
c0017530:	c3                   	ret    

c0017531 <doubleFault(regs*, void*)>:
c0017531:	55                   	push   ebp
c0017532:	89 e5                	mov    ebp,esp
c0017534:	83 ec 08             	sub    esp,0x8
c0017537:	83 ec 0c             	sub    esp,0xc
c001753a:	68 1c 27 02 c0       	push   0xc002271c
c001753f:	e8 0d 9e ff ff       	call   c0011351 <KePanic(char const*)>
c0017544:	83 c4 10             	add    esp,0x10
c0017547:	90                   	nop
c0017548:	c9                   	leave  
c0017549:	c3                   	ret    

c001754a <displayDebugInfo(regs*)>:
c001754a:	83 ec 1c             	sub    esp,0x1c
c001754d:	0f 20 c0             	mov    eax,cr0
c0017550:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017554:	0f 20 d0             	mov    eax,cr2
c0017557:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001755b:	0f 20 d8             	mov    eax,cr3
c001755e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017562:	0f 20 e0             	mov    eax,cr4
c0017565:	89 04 24             	mov    DWORD PTR [esp],eax
c0017568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001756c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001756f:	83 ec 08             	sub    esp,0x8
c0017572:	50                   	push   eax
c0017573:	68 38 27 02 c0       	push   0xc0022738
c0017578:	e8 c8 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001757d:	83 c4 10             	add    esp,0x10
c0017580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017584:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017587:	83 ec 08             	sub    esp,0x8
c001758a:	50                   	push   eax
c001758b:	68 29 27 02 c0       	push   0xc0022729
c0017590:	e8 b0 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017595:	83 c4 10             	add    esp,0x10
c0017598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001759c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001759f:	83 ec 08             	sub    esp,0x8
c00175a2:	50                   	push   eax
c00175a3:	68 34 27 02 c0       	push   0xc0022734
c00175a8:	e8 98 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00175ad:	83 c4 10             	add    esp,0x10
c00175b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00175b7:	83 ec 08             	sub    esp,0x8
c00175ba:	50                   	push   eax
c00175bb:	68 43 27 02 c0       	push   0xc0022743
c00175c0:	e8 80 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00175c5:	83 c4 10             	add    esp,0x10
c00175c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175cc:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00175cf:	83 ec 08             	sub    esp,0x8
c00175d2:	50                   	push   eax
c00175d3:	68 4e 27 02 c0       	push   0xc002274e
c00175d8:	e8 68 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00175dd:	83 c4 10             	add    esp,0x10
c00175e0:	83 ec 08             	sub    esp,0x8
c00175e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00175e7:	68 59 27 02 c0       	push   0xc0022759
c00175ec:	e8 54 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00175f1:	83 c4 10             	add    esp,0x10
c00175f4:	83 ec 08             	sub    esp,0x8
c00175f7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00175fb:	68 64 27 02 c0       	push   0xc0022764
c0017600:	e8 40 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017605:	83 c4 10             	add    esp,0x10
c0017608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001760c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001760f:	c1 e0 05             	shl    eax,0x5
c0017612:	8d 90 e0 36 02 c0    	lea    edx,[eax-0x3ffdc920]
c0017618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001761c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001761f:	83 ec 04             	sub    esp,0x4
c0017622:	52                   	push   edx
c0017623:	50                   	push   eax
c0017624:	68 6f 27 02 c0       	push   0xc002276f
c0017629:	e8 17 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001762e:	83 c4 10             	add    esp,0x10
c0017631:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017636:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001763c:	83 ec 0c             	sub    esp,0xc
c001763f:	50                   	push   eax
c0017640:	e8 14 11 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0017645:	83 c4 10             	add    esp,0x10
c0017648:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001764d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017653:	83 ec 08             	sub    esp,0x8
c0017656:	68 7e 27 02 c0       	push   0xc002277e
c001765b:	50                   	push   eax
c001765c:	e8 45 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017661:	83 c4 10             	add    esp,0x10
c0017664:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017669:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001766f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017673:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017676:	83 ec 08             	sub    esp,0x8
c0017679:	52                   	push   edx
c001767a:	50                   	push   eax
c001767b:	e8 e0 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017680:	83 c4 10             	add    esp,0x10
c0017683:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017688:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001768e:	83 ec 08             	sub    esp,0x8
c0017691:	68 8c 27 02 c0       	push   0xc002278c
c0017696:	50                   	push   eax
c0017697:	e8 0a 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001769c:	83 c4 10             	add    esp,0x10
c001769f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176aa:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00176af:	8b 12                	mov    edx,DWORD PTR [edx]
c00176b1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00176b4:	83 c2 0c             	add    edx,0xc
c00176b7:	83 ec 08             	sub    esp,0x8
c00176ba:	52                   	push   edx
c00176bb:	50                   	push   eax
c00176bc:	e8 e5 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176c1:	83 c4 10             	add    esp,0x10
c00176c4:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176c9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176cf:	83 ec 08             	sub    esp,0x8
c00176d2:	68 95 27 02 c0       	push   0xc0022795
c00176d7:	50                   	push   eax
c00176d8:	e8 c9 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176dd:	83 c4 10             	add    esp,0x10
c00176e0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176ef:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00176f2:	83 ec 08             	sub    esp,0x8
c00176f5:	52                   	push   edx
c00176f6:	50                   	push   eax
c00176f7:	e8 64 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176fc:	83 c4 10             	add    esp,0x10
c00176ff:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017704:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001770a:	83 ec 08             	sub    esp,0x8
c001770d:	68 9d 27 02 c0       	push   0xc002279d
c0017712:	50                   	push   eax
c0017713:	e8 8e 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017718:	83 c4 10             	add    esp,0x10
c001771b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017720:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017726:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001772a:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001772d:	83 ec 08             	sub    esp,0x8
c0017730:	52                   	push   edx
c0017731:	50                   	push   eax
c0017732:	e8 29 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017737:	83 c4 10             	add    esp,0x10
c001773a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001773f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017745:	83 ec 08             	sub    esp,0x8
c0017748:	68 a5 27 02 c0       	push   0xc00227a5
c001774d:	50                   	push   eax
c001774e:	e8 53 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017753:	83 c4 10             	add    esp,0x10
c0017756:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001775b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017761:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017765:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017768:	83 ec 08             	sub    esp,0x8
c001776b:	52                   	push   edx
c001776c:	50                   	push   eax
c001776d:	e8 ee 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017772:	83 c4 10             	add    esp,0x10
c0017775:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001777a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017780:	83 ec 08             	sub    esp,0x8
c0017783:	68 ad 27 02 c0       	push   0xc00227ad
c0017788:	50                   	push   eax
c0017789:	e8 18 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001778e:	83 c4 10             	add    esp,0x10
c0017791:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017796:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001779c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177a0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00177a3:	83 ec 08             	sub    esp,0x8
c00177a6:	52                   	push   edx
c00177a7:	50                   	push   eax
c00177a8:	e8 b3 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00177ad:	83 c4 10             	add    esp,0x10
c00177b0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177bb:	83 ec 08             	sub    esp,0x8
c00177be:	68 b5 27 02 c0       	push   0xc00227b5
c00177c3:	50                   	push   eax
c00177c4:	e8 dd 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00177c9:	83 c4 10             	add    esp,0x10
c00177cc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177db:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00177de:	83 ec 08             	sub    esp,0x8
c00177e1:	52                   	push   edx
c00177e2:	50                   	push   eax
c00177e3:	e8 78 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00177e8:	83 c4 10             	add    esp,0x10
c00177eb:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177f6:	83 ec 08             	sub    esp,0x8
c00177f9:	68 bd 27 02 c0       	push   0xc00227bd
c00177fe:	50                   	push   eax
c00177ff:	e8 a2 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017804:	83 c4 10             	add    esp,0x10
c0017807:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001780c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017812:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017816:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017819:	83 ec 08             	sub    esp,0x8
c001781c:	52                   	push   edx
c001781d:	50                   	push   eax
c001781e:	e8 3d 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017823:	83 c4 10             	add    esp,0x10
c0017826:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001782b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017831:	83 ec 08             	sub    esp,0x8
c0017834:	68 c5 27 02 c0       	push   0xc00227c5
c0017839:	50                   	push   eax
c001783a:	e8 67 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001783f:	83 c4 10             	add    esp,0x10
c0017842:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017847:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001784d:	83 ec 08             	sub    esp,0x8
c0017850:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017854:	50                   	push   eax
c0017855:	e8 06 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001785a:	83 c4 10             	add    esp,0x10
c001785d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017862:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017868:	83 ec 08             	sub    esp,0x8
c001786b:	68 ce 27 02 c0       	push   0xc00227ce
c0017870:	50                   	push   eax
c0017871:	e8 30 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017876:	83 c4 10             	add    esp,0x10
c0017879:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001787e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017884:	83 ec 08             	sub    esp,0x8
c0017887:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001788b:	50                   	push   eax
c001788c:	e8 cf 11 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017891:	83 c4 10             	add    esp,0x10
c0017894:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017899:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001789f:	83 ec 08             	sub    esp,0x8
c00178a2:	68 d6 27 02 c0       	push   0xc00227d6
c00178a7:	50                   	push   eax
c00178a8:	e8 f9 11 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00178ad:	83 c4 10             	add    esp,0x10
c00178b0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00178b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178bb:	83 ec 08             	sub    esp,0x8
c00178be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00178c2:	50                   	push   eax
c00178c3:	e8 98 11 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00178c8:	83 c4 10             	add    esp,0x10
c00178cb:	fa                   	cli    
c00178cc:	f4                   	hlt    
c00178cd:	eb fe                	jmp    c00178cd <displayDebugInfo(regs*)+0x383>

c00178cf <HalSystemIdle()>:
c00178cf:	56                   	push   esi
c00178d0:	53                   	push   ebx
c00178d1:	83 ec 14             	sub    esp,0x14
c00178d4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00178d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00178df:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00178e5:	83 e0 04             	and    eax,0x4
c00178e8:	0f b6 c0             	movzx  eax,al
c00178eb:	85 c0                	test   eax,eax
c00178ed:	0f 95 c0             	setne  al
c00178f0:	0f b6 c0             	movzx  eax,al
c00178f3:	85 c0                	test   eax,eax
c00178f5:	74 4c                	je     c0017943 <HalSystemIdle()+0x74>
c00178f7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00178fc:	83 ec 08             	sub    esp,0x8
c00178ff:	68 e1 00 00 00       	push   0xe1
c0017904:	50                   	push   eax
c0017905:	e8 b6 f7 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001790a:	83 c4 10             	add    esp,0x10
c001790d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017911:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017915:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001791a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001791e:	83 e2 02             	and    edx,0x2
c0017921:	89 d3                	mov    ebx,edx
c0017923:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017927:	83 e2 00             	and    edx,0x0
c001792a:	89 d6                	mov    esi,edx
c001792c:	56                   	push   esi
c001792d:	53                   	push   ebx
c001792e:	68 e1 00 00 00       	push   0xe1
c0017933:	50                   	push   eax
c0017934:	e8 b3 f7 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017939:	83 c4 10             	add    esp,0x10
c001793c:	e8 53 88 fe ff       	call   c0000194 <doTPAUSE>
c0017941:	eb 01                	jmp    c0017944 <HalSystemIdle()+0x75>
c0017943:	f4                   	hlt    
c0017944:	90                   	nop
c0017945:	83 c4 14             	add    esp,0x14
c0017948:	5b                   	pop    ebx
c0017949:	5e                   	pop    esi
c001794a:	c3                   	ret    

c001794b <displayProgramFault(char const*)>:
c001794b:	83 ec 0c             	sub    esp,0xc
c001794e:	83 ec 0c             	sub    esp,0xc
c0017951:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017955:	e8 eb 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001795a:	83 c4 10             	add    esp,0x10
c001795d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017962:	8b 00                	mov    eax,DWORD PTR [eax]
c0017964:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017967:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001796d:	85 c0                	test   eax,eax
c001796f:	74 21                	je     c0017992 <displayProgramFault(char const*)+0x47>
c0017971:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017976:	8b 00                	mov    eax,DWORD PTR [eax]
c0017978:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001797b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017981:	6a 04                	push   0x4
c0017983:	6a 0f                	push   0xf
c0017985:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017989:	50                   	push   eax
c001798a:	e8 89 11 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001798f:	83 c4 10             	add    esp,0x10
c0017992:	90                   	nop
c0017993:	83 c4 0c             	add    esp,0xc
c0017996:	c3                   	ret    

c0017997 <gpFault(regs*, void*)>:
c0017997:	83 ec 1c             	sub    esp,0x1c
c001799a:	c7 05 74 97 02 c0 f3 6d 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016df3
c00179a4:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00179a9:	85 c0                	test   eax,eax
c00179ab:	74 1e                	je     c00179cb <gpFault(regs*, void*)+0x34>
c00179ad:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00179b2:	83 ec 0c             	sub    esp,0xc
c00179b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179b9:	ff d0                	call   eax
c00179bb:	83 c4 10             	add    esp,0x10
c00179be:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179c2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00179c7:	85 c0                	test   eax,eax
c00179c9:	75 2e                	jne    c00179f9 <gpFault(regs*, void*)+0x62>
c00179cb:	83 ec 0c             	sub    esp,0xc
c00179ce:	68 de 27 02 c0       	push   0xc00227de
c00179d3:	e8 73 ff ff ff       	call   c001794b <displayProgramFault(char const*)>
c00179d8:	83 c4 10             	add    esp,0x10
c00179db:	83 ec 0c             	sub    esp,0xc
c00179de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179e2:	e8 63 fb ff ff       	call   c001754a <displayDebugInfo(regs*)>
c00179e7:	83 c4 10             	add    esp,0x10
c00179ea:	83 ec 0c             	sub    esp,0xc
c00179ed:	6a 00                	push   0x0
c00179ef:	e8 a4 ed ff ff       	call   c0016798 <Thr::terminateFromIRQ(int)>
c00179f4:	83 c4 10             	add    esp,0x10
c00179f7:	eb 01                	jmp    c00179fa <gpFault(regs*, void*)+0x63>
c00179f9:	90                   	nop
c00179fa:	83 c4 1c             	add    esp,0x1c
c00179fd:	c3                   	ret    

c00179fe <pgFault(regs*, void*)>:
c00179fe:	83 ec 1c             	sub    esp,0x1c
c0017a01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a05:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017a08:	0f 20 d0             	mov    eax,cr2
c0017a0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a13:	83 ec 04             	sub    esp,0x4
c0017a16:	52                   	push   edx
c0017a17:	50                   	push   eax
c0017a18:	68 bc 28 02 c0       	push   0xc00228bc
c0017a1d:	e8 23 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a22:	83 c4 10             	add    esp,0x10
c0017a25:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a2c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a2f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017a35:	0f 20 d2             	mov    edx,cr2
c0017a38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017a3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a40:	83 ec 08             	sub    esp,0x8
c0017a43:	52                   	push   edx
c0017a44:	50                   	push   eax
c0017a45:	e8 46 29 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017a4a:	83 c4 10             	add    esp,0x10
c0017a4d:	0f b6 c0             	movzx  eax,al
c0017a50:	85 c0                	test   eax,eax
c0017a52:	75 2e                	jne    c0017a82 <pgFault(regs*, void*)+0x84>
c0017a54:	83 ec 0c             	sub    esp,0xc
c0017a57:	68 f7 27 02 c0       	push   0xc00227f7
c0017a5c:	e8 ea fe ff ff       	call   c001794b <displayProgramFault(char const*)>
c0017a61:	83 c4 10             	add    esp,0x10
c0017a64:	83 ec 0c             	sub    esp,0xc
c0017a67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a6b:	e8 da fa ff ff       	call   c001754a <displayDebugInfo(regs*)>
c0017a70:	83 c4 10             	add    esp,0x10
c0017a73:	83 ec 0c             	sub    esp,0xc
c0017a76:	6a 00                	push   0x0
c0017a78:	e8 1b ed ff ff       	call   c0016798 <Thr::terminateFromIRQ(int)>
c0017a7d:	83 c4 10             	add    esp,0x10
c0017a80:	eb 01                	jmp    c0017a83 <pgFault(regs*, void*)+0x85>
c0017a82:	90                   	nop
c0017a83:	83 c4 1c             	add    esp,0x1c
c0017a86:	c3                   	ret    

c0017a87 <otherISRHandler(regs*, void*)>:
c0017a87:	83 ec 0c             	sub    esp,0xc
c0017a8a:	83 ec 0c             	sub    esp,0xc
c0017a8d:	68 e4 28 02 c0       	push   0xc00228e4
c0017a92:	e8 b4 fe ff ff       	call   c001794b <displayProgramFault(char const*)>
c0017a97:	83 c4 10             	add    esp,0x10
c0017a9a:	83 ec 0c             	sub    esp,0xc
c0017a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017aa1:	e8 a4 fa ff ff       	call   c001754a <displayDebugInfo(regs*)>
c0017aa6:	83 c4 10             	add    esp,0x10
c0017aa9:	83 ec 0c             	sub    esp,0xc
c0017aac:	6a 00                	push   0x0
c0017aae:	e8 e5 ec ff ff       	call   c0016798 <Thr::terminateFromIRQ(int)>
c0017ab3:	83 c4 10             	add    esp,0x10
c0017ab6:	90                   	nop
c0017ab7:	83 c4 0c             	add    esp,0xc
c0017aba:	c3                   	ret    

c0017abb <opcodeFault(regs*, void*)>:
c0017abb:	55                   	push   ebp
c0017abc:	89 e5                	mov    ebp,esp
c0017abe:	83 ec 08             	sub    esp,0x8
c0017ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ac4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ac7:	83 ec 08             	sub    esp,0x8
c0017aca:	50                   	push   eax
c0017acb:	68 02 28 02 c0       	push   0xc0022802
c0017ad0:	e8 70 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017ad5:	83 c4 10             	add    esp,0x10
c0017ad8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017add:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017ae3:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017ae9:	0f b6 c0             	movzx  eax,al
c0017aec:	85 c0                	test   eax,eax
c0017aee:	74 21                	je     c0017b11 <opcodeFault(regs*, void*)+0x56>
c0017af0:	83 ec 0c             	sub    esp,0xc
c0017af3:	68 0c 29 02 c0       	push   0xc002290c
c0017af8:	e8 48 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017afd:	83 c4 10             	add    esp,0x10
c0017b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b03:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017b06:	8d 50 19             	lea    edx,[eax+0x19]
c0017b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b0c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b0f:	eb 2b                	jmp    c0017b3c <opcodeFault(regs*, void*)+0x81>
c0017b11:	83 ec 0c             	sub    esp,0xc
c0017b14:	68 10 28 02 c0       	push   0xc0022810
c0017b19:	e8 2d fe ff ff       	call   c001794b <displayProgramFault(char const*)>
c0017b1e:	83 c4 10             	add    esp,0x10
c0017b21:	83 ec 0c             	sub    esp,0xc
c0017b24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017b27:	e8 1e fa ff ff       	call   c001754a <displayDebugInfo(regs*)>
c0017b2c:	83 c4 10             	add    esp,0x10
c0017b2f:	83 ec 0c             	sub    esp,0xc
c0017b32:	6a 00                	push   0x0
c0017b34:	e8 5f ec ff ff       	call   c0016798 <Thr::terminateFromIRQ(int)>
c0017b39:	83 c4 10             	add    esp,0x10
c0017b3c:	c9                   	leave  
c0017b3d:	c3                   	ret    

c0017b3e <i386SaveCoprocessor(void*)>:
c0017b3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b42:	83 c0 3f             	add    eax,0x3f
c0017b45:	83 e0 c0             	and    eax,0xffffffc0
c0017b48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b4c:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017b52 <i386LoadCoprocessor(void*)>:
c0017b52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b56:	83 c0 3f             	add    eax,0x3f
c0017b59:	83 e0 c0             	and    eax,0xffffffc0
c0017b5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b60:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017b66 <x87EmulHandler(regs*, void*)>:
c0017b66:	53                   	push   ebx
c0017b67:	83 ec 08             	sub    esp,0x8
c0017b6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b6f:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017b73:	74 10                	je     c0017b85 <x87EmulHandler(regs*, void*)+0x1f>
c0017b75:	83 ec 0c             	sub    esp,0xc
c0017b78:	68 1d 28 02 c0       	push   0xc002281d
c0017b7d:	e8 cf 97 ff ff       	call   c0011351 <KePanic(char const*)>
c0017b82:	83 c4 10             	add    esp,0x10
c0017b85:	0f 20 c0             	mov    eax,cr0
c0017b88:	a8 08                	test   al,0x8
c0017b8a:	74 59                	je     c0017be5 <x87EmulHandler(regs*, void*)+0x7f>
c0017b8c:	0f 06                	clts   
c0017b8e:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017b93:	85 c0                	test   eax,eax
c0017b95:	74 0e                	je     c0017ba5 <x87EmulHandler(regs*, void*)+0x3f>
c0017b97:	83 ec 0c             	sub    esp,0xc
c0017b9a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017b9d:	e8 9c ff ff ff       	call   c0017b3e <i386SaveCoprocessor(void*)>
c0017ba2:	83 c4 10             	add    esp,0x10
c0017ba5:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017bab:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017baf:	75 12                	jne    c0017bc3 <x87EmulHandler(regs*, void*)+0x5d>
c0017bb1:	83 ec 0c             	sub    esp,0xc
c0017bb4:	68 40 02 00 00       	push   0x240
c0017bb9:	e8 f8 fe fe ff       	call   c0007ab6 <malloc>
c0017bbe:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017bc1:	eb 10                	jmp    c0017bd3 <x87EmulHandler(regs*, void*)+0x6d>
c0017bc3:	83 ec 0c             	sub    esp,0xc
c0017bc6:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017bcb:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017bce:	e8 7f ff ff ff       	call   c0017b52 <i386LoadCoprocessor(void*)>
c0017bd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017bd8:	83 c4 10             	add    esp,0x10
c0017bdb:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017be0:	83 c4 08             	add    esp,0x8
c0017be3:	5b                   	pop    ebx
c0017be4:	c3                   	ret    
c0017be5:	83 ec 0c             	sub    esp,0xc
c0017be8:	68 31 28 02 c0       	push   0xc0022831
c0017bed:	e8 53 2d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017bf2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017bfa:	83 c4 18             	add    esp,0x18
c0017bfd:	5b                   	pop    ebx
c0017bfe:	e9 95 eb ff ff       	jmp    c0016798 <Thr::terminateFromIRQ(int)>

c0017c03 <HalInitialiseCoprocessor()>:
c0017c03:	83 ec 10             	sub    esp,0x10
c0017c06:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017c10:	6a 00                	push   0x0
c0017c12:	68 66 7b 01 c0       	push   0xc0017b66
c0017c17:	6a 07                	push   0x7
c0017c19:	e8 3c 50 ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c1e:	e8 4d 70 00 00       	call   c001ec70 <avxDetect>
c0017c23:	83 c4 10             	add    esp,0x10
c0017c26:	85 c0                	test   eax,eax
c0017c28:	74 1c                	je     c0017c46 <HalInitialiseCoprocessor()+0x43>
c0017c2a:	c7 05 70 97 02 c0 9a ec 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ec9a
c0017c34:	c7 05 6c 97 02 c0 ab ec 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ecab
c0017c3e:	83 c4 0c             	add    esp,0xc
c0017c41:	e9 76 70 00 00       	jmp    c001ecbc <avxInit>
c0017c46:	e8 b5 73 00 00       	call   c001f000 <absolutelyNoChanceInHell>
c0017c4b:	85 c0                	test   eax,eax
c0017c4d:	74 1c                	je     c0017c6b <HalInitialiseCoprocessor()+0x68>
c0017c4f:	c7 05 70 97 02 c0 18 f0 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001f018
c0017c59:	c7 05 6c 97 02 c0 20 f0 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001f020
c0017c63:	83 c4 0c             	add    esp,0xc
c0017c66:	e9 bd 73 00 00       	jmp    c001f028 <sseInit>
c0017c6b:	e8 d6 73 00 00       	call   c001f046 <x87Detect>
c0017c70:	85 c0                	test   eax,eax
c0017c72:	74 1c                	je     c0017c90 <HalInitialiseCoprocessor()+0x8d>
c0017c74:	c7 05 70 97 02 c0 61 f0 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001f061
c0017c7e:	c7 05 6c 97 02 c0 68 f0 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001f068
c0017c88:	83 c4 0c             	add    esp,0xc
c0017c8b:	e9 df 73 00 00       	jmp    c001f06f <x87Init>
c0017c90:	c7 05 70 97 02 c0 17 75 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc0017517
c0017c9a:	c7 05 6c 97 02 c0 17 75 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc0017517
c0017ca4:	0f 20 c0             	mov    eax,cr0
c0017ca7:	83 c8 04             	or     eax,0x4
c0017caa:	0f 22 c0             	mov    cr0,eax
c0017cad:	83 c4 0c             	add    esp,0xc
c0017cb0:	c3                   	ret    

c0017cb1 <HalPanic(char const*)>:
c0017cb1:	53                   	push   ebx
c0017cb2:	83 ec 10             	sub    esp,0x10
c0017cb5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017cb9:	fa                   	cli    
c0017cba:	53                   	push   ebx
c0017cbb:	68 47 28 02 c0       	push   0xc0022847
c0017cc0:	e8 80 2c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017cc5:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017cca:	83 c4 10             	add    esp,0x10
c0017ccd:	85 c0                	test   eax,eax
c0017ccf:	74 09                	je     c0017cda <HalPanic(char const*)+0x29>
c0017cd1:	83 ec 0c             	sub    esp,0xc
c0017cd4:	53                   	push   ebx
c0017cd5:	ff d0                	call   eax
c0017cd7:	83 c4 10             	add    esp,0x10
c0017cda:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017cdf:	85 c0                	test   eax,eax
c0017ce1:	0f 84 dc 00 00 00    	je     c0017dc3 <HalPanic(char const*)+0x112>
c0017ce7:	52                   	push   edx
c0017ce8:	6a 01                	push   0x1
c0017cea:	6a 0f                	push   0xf
c0017cec:	50                   	push   eax
c0017ced:	e8 c2 08 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017cf2:	59                   	pop    ecx
c0017cf3:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cf9:	e8 a6 0a ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017cfe:	58                   	pop    eax
c0017cff:	5a                   	pop    edx
c0017d00:	68 c4 0a 02 c0       	push   0xc0020ac4
c0017d05:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d0b:	e8 dc 08 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017d10:	83 c4 0c             	add    esp,0xc
c0017d13:	6a 01                	push   0x1
c0017d15:	6a 0f                	push   0xf
c0017d17:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d1d:	e8 92 08 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017d22:	59                   	pop    ecx
c0017d23:	58                   	pop    eax
c0017d24:	68 60 28 02 c0       	push   0xc0022860
c0017d29:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d2f:	e8 72 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d34:	83 c4 0c             	add    esp,0xc
c0017d37:	6a 0f                	push   0xf
c0017d39:	6a 01                	push   0x1
c0017d3b:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d41:	e8 6e 08 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017d46:	58                   	pop    eax
c0017d47:	5a                   	pop    edx
c0017d48:	68 69 28 02 c0       	push   0xc0022869
c0017d4d:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d53:	e8 4e 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d58:	83 c4 0c             	add    esp,0xc
c0017d5b:	6a 01                	push   0x1
c0017d5d:	6a 0f                	push   0xf
c0017d5f:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d65:	e8 4a 08 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017d6a:	59                   	pop    ecx
c0017d6b:	58                   	pop    eax
c0017d6c:	68 ad 28 02 c0       	push   0xc00228ad
c0017d71:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d77:	e8 2a 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d7c:	58                   	pop    eax
c0017d7d:	5a                   	pop    edx
c0017d7e:	68 76 28 02 c0       	push   0xc0022876
c0017d83:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d89:	e8 18 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d8e:	59                   	pop    ecx
c0017d8f:	58                   	pop    eax
c0017d90:	68 b0 28 02 c0       	push   0xc00228b0
c0017d95:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d9b:	e8 06 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017da0:	58                   	pop    eax
c0017da1:	5a                   	pop    edx
c0017da2:	53                   	push   ebx
c0017da3:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017da9:	e8 f8 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017dae:	59                   	pop    ecx
c0017daf:	5b                   	pop    ebx
c0017db0:	68 ad 28 02 c0       	push   0xc00228ad
c0017db5:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017dbb:	e8 e6 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017dc0:	83 c4 10             	add    esp,0x10
c0017dc3:	eb fe                	jmp    c0017dc3 <HalPanic(char const*)+0x112>

c0017dc5 <HalQueryPerformanceCounter()>:
c0017dc5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017dca:	31 d2                	xor    edx,edx
c0017dcc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017dd2:	31 c0                	xor    eax,eax
c0017dd4:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017ddb:	74 02                	je     c0017ddf <HalQueryPerformanceCounter()+0x1a>
c0017ddd:	0f 31                	rdtsc  
c0017ddf:	c3                   	ret    

c0017de0 <HalInitialise()>:
c0017de0:	53                   	push   ebx
c0017de1:	83 ec 08             	sub    esp,0x8
c0017de4:	e8 a1 50 ff ff       	call   c000ce8a <setupINTS()>
c0017de9:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017df0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017df5:	75 0f                	jne    c0017e06 <HalInitialise()+0x26>
c0017df7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017dfd:	83 e2 fe             	and    edx,0xfffffffe
c0017e00:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017e06:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017e0c:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017e13:	83 e2 fe             	and    edx,0xfffffffe
c0017e16:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017e1c:	e8 9f 02 00 00       	call   c00180c0 <picOpen()>
c0017e21:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017e28:	74 0a                	je     c0017e34 <HalInitialise()+0x54>
c0017e2a:	e8 e1 01 00 00       	call   c0018010 <picDisable()>
c0017e2f:	e8 aa 67 00 00       	call   c001e5de <apicOpen()>
c0017e34:	bb 0f 00 00 00       	mov    ebx,0xf
c0017e39:	50                   	push   eax
c0017e3a:	6a 00                	push   0x0
c0017e3c:	68 87 7a 01 c0       	push   0xc0017a87
c0017e41:	6a 00                	push   0x0
c0017e43:	e8 12 4e ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e48:	83 c4 0c             	add    esp,0xc
c0017e4b:	6a 00                	push   0x0
c0017e4d:	68 87 7a 01 c0       	push   0xc0017a87
c0017e52:	6a 01                	push   0x1
c0017e54:	e8 01 4e ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e59:	83 c4 0c             	add    esp,0xc
c0017e5c:	6a 00                	push   0x0
c0017e5e:	68 18 75 01 c0       	push   0xc0017518
c0017e63:	6a 02                	push   0x2
c0017e65:	e8 f0 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e6a:	83 c4 0c             	add    esp,0xc
c0017e6d:	6a 00                	push   0x0
c0017e6f:	68 87 7a 01 c0       	push   0xc0017a87
c0017e74:	6a 03                	push   0x3
c0017e76:	e8 df 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e7b:	83 c4 0c             	add    esp,0xc
c0017e7e:	6a 00                	push   0x0
c0017e80:	68 87 7a 01 c0       	push   0xc0017a87
c0017e85:	6a 04                	push   0x4
c0017e87:	e8 ce 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e8c:	83 c4 0c             	add    esp,0xc
c0017e8f:	6a 00                	push   0x0
c0017e91:	68 87 7a 01 c0       	push   0xc0017a87
c0017e96:	6a 05                	push   0x5
c0017e98:	e8 bd 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e9d:	83 c4 0c             	add    esp,0xc
c0017ea0:	6a 00                	push   0x0
c0017ea2:	68 bb 7a 01 c0       	push   0xc0017abb
c0017ea7:	6a 06                	push   0x6
c0017ea9:	e8 ac 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017eae:	83 c4 0c             	add    esp,0xc
c0017eb1:	6a 00                	push   0x0
c0017eb3:	68 31 75 01 c0       	push   0xc0017531
c0017eb8:	6a 08                	push   0x8
c0017eba:	e8 9b 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ebf:	83 c4 0c             	add    esp,0xc
c0017ec2:	6a 00                	push   0x0
c0017ec4:	68 87 7a 01 c0       	push   0xc0017a87
c0017ec9:	6a 09                	push   0x9
c0017ecb:	e8 8a 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ed0:	83 c4 0c             	add    esp,0xc
c0017ed3:	6a 00                	push   0x0
c0017ed5:	68 87 7a 01 c0       	push   0xc0017a87
c0017eda:	6a 0a                	push   0xa
c0017edc:	e8 79 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ee1:	83 c4 0c             	add    esp,0xc
c0017ee4:	6a 00                	push   0x0
c0017ee6:	68 87 7a 01 c0       	push   0xc0017a87
c0017eeb:	6a 0b                	push   0xb
c0017eed:	e8 68 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ef2:	83 c4 0c             	add    esp,0xc
c0017ef5:	6a 00                	push   0x0
c0017ef7:	68 97 79 01 c0       	push   0xc0017997
c0017efc:	6a 0d                	push   0xd
c0017efe:	e8 57 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f03:	83 c4 0c             	add    esp,0xc
c0017f06:	6a 00                	push   0x0
c0017f08:	68 fe 79 01 c0       	push   0xc00179fe
c0017f0d:	6a 0e                	push   0xe
c0017f0f:	e8 46 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f14:	83 c4 10             	add    esp,0x10
c0017f17:	50                   	push   eax
c0017f18:	6a 00                	push   0x0
c0017f1a:	68 87 7a 01 c0       	push   0xc0017a87
c0017f1f:	53                   	push   ebx
c0017f20:	43                   	inc    ebx
c0017f21:	e8 34 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f26:	83 c4 10             	add    esp,0x10
c0017f29:	83 fb 1e             	cmp    ebx,0x1e
c0017f2c:	75 e9                	jne    c0017f17 <HalInitialise()+0x137>
c0017f2e:	50                   	push   eax
c0017f2f:	6a 00                	push   0x0
c0017f31:	68 09 27 01 c0       	push   0xc0012709
c0017f36:	6a 60                	push   0x60
c0017f38:	e8 1d 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017f42:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017f4c:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017f53:	e8 5e fb fe ff       	call   c0007ab6 <malloc>
c0017f58:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f5b:	89 c3                	mov    ebx,eax
c0017f5d:	e8 3c 09 00 00       	call   c001889e <RTC::RTC()>
c0017f62:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017f6c:	5a                   	pop    edx
c0017f6d:	59                   	pop    ecx
c0017f6e:	53                   	push   ebx
c0017f6f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f75:	e8 ac 47 ff ff       	call   c000c726 <Device::addChild(Device*)>
c0017f7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017f7c:	6a 00                	push   0x0
c0017f7e:	6a 00                	push   0x0
c0017f80:	6a 00                	push   0x0
c0017f82:	53                   	push   ebx
c0017f83:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017f86:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017f8b:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017f91:	83 c4 28             	add    esp,0x28
c0017f94:	5b                   	pop    ebx
c0017f95:	c3                   	ret    

c0017f96 <HalMakeBeep(int)>:
c0017f96:	53                   	push   ebx
c0017f97:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017f9b:	85 db                	test   ebx,ebx
c0017f9d:	75 07                	jne    c0017fa6 <HalMakeBeep(int)+0x10>
c0017f9f:	e4 61                	in     al,0x61
c0017fa1:	83 e0 fc             	and    eax,0xfffffffc
c0017fa4:	eb 26                	jmp    c0017fcc <HalMakeBeep(int)+0x36>
c0017fa6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017fab:	99                   	cdq    
c0017fac:	f7 fb                	idiv   ebx
c0017fae:	89 c1                	mov    ecx,eax
c0017fb0:	b0 b6                	mov    al,0xb6
c0017fb2:	e6 43                	out    0x43,al
c0017fb4:	88 c8                	mov    al,cl
c0017fb6:	e6 42                	out    0x42,al
c0017fb8:	89 c8                	mov    eax,ecx
c0017fba:	c1 e8 08             	shr    eax,0x8
c0017fbd:	e6 42                	out    0x42,al
c0017fbf:	e4 61                	in     al,0x61
c0017fc1:	89 c2                	mov    edx,eax
c0017fc3:	83 ca 03             	or     edx,0x3
c0017fc6:	38 d0                	cmp    al,dl
c0017fc8:	74 04                	je     c0017fce <HalMakeBeep(int)+0x38>
c0017fca:	88 d0                	mov    al,dl
c0017fcc:	e6 61                	out    0x61,al
c0017fce:	5b                   	pop    ebx
c0017fcf:	c3                   	ret    

c0017fd0 <HalGetRand()>:
c0017fd0:	31 c0                	xor    eax,eax
c0017fd2:	c3                   	ret    

c0017fd3 <HalEndOfInterrupt(int)>:
c0017fd3:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017fda:	74 23                	je     c0017fff <HalEndOfInterrupt(int)+0x2c>
c0017fdc:	83 ec 14             	sub    esp,0x14
c0017fdf:	6a 1b                	push   0x1b
c0017fe1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017fe7:	e8 d4 f0 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017fec:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017ff1:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017ffb:	83 c4 1c             	add    esp,0x1c
c0017ffe:	c3                   	ret    
c0017fff:	e9 40 02 00 00       	jmp    c0018244 <picEOI(int)>

c0018004 <HalRestart()>:
c0018004:	c3                   	ret    

c0018005 <HalShutdown()>:
c0018005:	c3                   	ret    

c0018006 <HalSleep()>:
c0018006:	c3                   	ret    
c0018007:	90                   	nop

c0018008 <picIoWait()>:
c0018008:	eb 00                	jmp    c001800a <picIoWait()+0x2>
c001800a:	eb 00                	jmp    c001800c <picIoWait()+0x4>
c001800c:	90                   	nop
c001800d:	c3                   	ret    
c001800e:	66 90                	xchg   ax,ax

c0018010 <picDisable()>:
c0018010:	83 ec 10             	sub    esp,0x10
c0018013:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001801a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001801f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018023:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018028:	ee                   	out    dx,al
c0018029:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018030:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018035:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018039:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001803e:	ee                   	out    dx,al
c001803f:	90                   	nop
c0018040:	83 c4 10             	add    esp,0x10
c0018043:	c3                   	ret    

c0018044 <picGetIRQReg(int)>:
c0018044:	83 ec 10             	sub    esp,0x10
c0018047:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001804b:	0f b6 c0             	movzx  eax,al
c001804e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018055:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018059:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001805d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018062:	ee                   	out    dx,al
c0018063:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018067:	0f b6 c0             	movzx  eax,al
c001806a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018071:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018075:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018079:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001807e:	ee                   	out    dx,al
c001807f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018086:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001808b:	89 c2                	mov    edx,eax
c001808d:	ec                   	in     al,dx
c001808e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018092:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018096:	0f b6 c0             	movzx  eax,al
c0018099:	c1 e0 08             	shl    eax,0x8
c001809c:	89 c1                	mov    ecx,eax
c001809e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00180a5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00180aa:	89 c2                	mov    edx,eax
c00180ac:	ec                   	in     al,dx
c00180ad:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00180b1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00180b5:	0f b6 c0             	movzx  eax,al
c00180b8:	09 c8                	or     eax,ecx
c00180ba:	83 c4 10             	add    esp,0x10
c00180bd:	c3                   	ret    
c00180be:	66 90                	xchg   ax,ax

c00180c0 <picOpen()>:
c00180c0:	83 ec 50             	sub    esp,0x50
c00180c3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00180ca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00180cf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00180d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180d7:	ee                   	out    dx,al
c00180d8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00180df:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00180e4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00180e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00180ec:	ee                   	out    dx,al
c00180ed:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00180f5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00180fd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018104:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018108:	89 c2                	mov    edx,eax
c001810a:	ec                   	in     al,dx
c001810b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001810f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018113:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018117:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001811e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018122:	89 c2                	mov    edx,eax
c0018124:	ec                   	in     al,dx
c0018125:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018129:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001812d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018131:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018138:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001813d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018141:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018145:	ee                   	out    dx,al
c0018146:	e8 bd fe ff ff       	call   c0018008 <picIoWait()>
c001814b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018152:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018157:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001815b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001815f:	ee                   	out    dx,al
c0018160:	e8 a3 fe ff ff       	call   c0018008 <picIoWait()>
c0018165:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018169:	0f b6 c0             	movzx  eax,al
c001816c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018173:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018177:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001817b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001817f:	ee                   	out    dx,al
c0018180:	e8 83 fe ff ff       	call   c0018008 <picIoWait()>
c0018185:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018189:	0f b6 c0             	movzx  eax,al
c001818c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018193:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018197:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001819b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001819f:	ee                   	out    dx,al
c00181a0:	e8 63 fe ff ff       	call   c0018008 <picIoWait()>
c00181a5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00181ac:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00181b1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00181b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00181b9:	ee                   	out    dx,al
c00181ba:	e8 49 fe ff ff       	call   c0018008 <picIoWait()>
c00181bf:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00181c6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00181cb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00181cf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00181d3:	ee                   	out    dx,al
c00181d4:	e8 2f fe ff ff       	call   c0018008 <picIoWait()>
c00181d9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00181e0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00181e5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00181e9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00181ed:	ee                   	out    dx,al
c00181ee:	e8 15 fe ff ff       	call   c0018008 <picIoWait()>
c00181f3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00181fa:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00181ff:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018203:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018207:	ee                   	out    dx,al
c0018208:	e8 fb fd ff ff       	call   c0018008 <picIoWait()>
c001820d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018212:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018219:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001821d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018221:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018225:	ee                   	out    dx,al
c0018226:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001822b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018232:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018236:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001823a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001823e:	ee                   	out    dx,al
c001823f:	90                   	nop
c0018240:	83 c4 50             	add    esp,0x50
c0018243:	c3                   	ret    

c0018244 <picEOI(int)>:
c0018244:	83 ec 10             	sub    esp,0x10
c0018247:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001824c:	75 1e                	jne    c001826c <picEOI(int)+0x28>
c001824e:	6a 0b                	push   0xb
c0018250:	e8 ef fd ff ff       	call   c0018044 <picGetIRQReg(int)>
c0018255:	83 c4 04             	add    esp,0x4
c0018258:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001825d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018262:	25 80 00 00 00       	and    eax,0x80
c0018267:	74 73                	je     c00182dc <picEOI(int)+0x98>
c0018269:	8d 76 00             	lea    esi,[esi+0x0]
c001826c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018271:	75 31                	jne    c00182a4 <picEOI(int)+0x60>
c0018273:	6a 0b                	push   0xb
c0018275:	e8 ca fd ff ff       	call   c0018044 <picGetIRQReg(int)>
c001827a:	83 c4 04             	add    esp,0x4
c001827d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018282:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018286:	98                   	cwde   
c0018287:	85 c0                	test   eax,eax
c0018289:	78 19                	js     c00182a4 <picEOI(int)+0x60>
c001828b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018292:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018297:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001829b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00182a0:	ee                   	out    dx,al
c00182a1:	eb 3d                	jmp    c00182e0 <picEOI(int)+0x9c>
c00182a3:	90                   	nop
c00182a4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00182a9:	7e 19                	jle    c00182c4 <picEOI(int)+0x80>
c00182ab:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00182b2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00182b7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00182bb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00182c0:	ee                   	out    dx,al
c00182c1:	8d 76 00             	lea    esi,[esi+0x0]
c00182c4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00182cb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00182d0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00182d4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00182d9:	ee                   	out    dx,al
c00182da:	eb 04                	jmp    c00182e0 <picEOI(int)+0x9c>
c00182dc:	90                   	nop
c00182dd:	8d 76 00             	lea    esi,[esi+0x0]
c00182e0:	83 c4 10             	add    esp,0x10
c00182e3:	c3                   	ret    

c00182e4 <RTC::open(int, int, void*)>:
c00182e4:	31 c0                	xor    eax,eax
c00182e6:	c3                   	ret    
c00182e7:	90                   	nop

c00182e8 <RTC::close(int, int, void*)>:
c00182e8:	31 c0                	xor    eax,eax
c00182ea:	c3                   	ret    
c00182eb:	90                   	nop

c00182ec <RTC::timeInSecondsUTC()>:
c00182ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182f0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00182f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00182fc:	c3                   	ret    
c00182fd:	90                   	nop

c00182fe <RTC::timeInDatetimeUTC()>:
c00182fe:	53                   	push   ebx
c00182ff:	83 ec 14             	sub    esp,0x14
c0018302:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001830a:	8b 10                	mov    edx,DWORD PTR [eax]
c001830c:	50                   	push   eax
c001830d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018310:	83 c4 0c             	add    esp,0xc
c0018313:	52                   	push   edx
c0018314:	50                   	push   eax
c0018315:	53                   	push   ebx
c0018316:	e8 7f 41 ff ff       	call   c000c49a <secondsToDatetime(unsigned long long)>
c001831b:	89 d8                	mov    eax,ebx
c001831d:	83 c4 14             	add    esp,0x14
c0018320:	5b                   	pop    ebx
c0018321:	c2 04 00             	ret    0x4

c0018324 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018324:	56                   	push   esi
c0018325:	53                   	push   ebx
c0018326:	83 ec 14             	sub    esp,0x14
c0018329:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001832d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001832f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018332:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018336:	52                   	push   edx
c0018337:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001833b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001833f:	50                   	push   eax
c0018340:	e8 55 41 ff ff       	call   c000c49a <secondsToDatetime(unsigned long long)>
c0018345:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018349:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001834d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018351:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018355:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018359:	89 f0                	mov    eax,esi
c001835b:	83 c4 20             	add    esp,0x20
c001835e:	5b                   	pop    ebx
c001835f:	5e                   	pop    esi
c0018360:	ff e0                	jmp    eax

c0018362 <RTC::~RTC()>:
c0018362:	83 ec 0c             	sub    esp,0xc
c0018365:	ba 4c 29 02 c0       	mov    edx,0xc002294c
c001836a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001836e:	89 10                	mov    DWORD PTR [eax],edx
c0018370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018374:	83 ec 0c             	sub    esp,0xc
c0018377:	50                   	push   eax
c0018378:	e8 af 3e ff ff       	call   c000c22c <Clock::~Clock()>
c001837d:	83 c4 10             	add    esp,0x10
c0018380:	90                   	nop
c0018381:	83 c4 0c             	add    esp,0xc
c0018384:	c3                   	ret    
c0018385:	90                   	nop

c0018386 <RTC::~RTC()>:
c0018386:	83 ec 0c             	sub    esp,0xc
c0018389:	83 ec 0c             	sub    esp,0xc
c001838c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018390:	e8 cd ff ff ff       	call   c0018362 <RTC::~RTC()>
c0018395:	83 c4 10             	add    esp,0x10
c0018398:	83 ec 08             	sub    esp,0x8
c001839b:	68 60 01 00 00       	push   0x160
c00183a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183a4:	e8 6f 24 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00183a9:	83 c4 10             	add    esp,0x10
c00183ac:	83 c4 0c             	add    esp,0xc
c00183af:	c3                   	ret    

c00183b0 <RTC::get_update_in_progress_flag()>:
c00183b0:	83 ec 14             	sub    esp,0x14
c00183b3:	6a 0a                	push   0xa
c00183b5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183bb:	e8 b8 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183c0:	83 c4 1c             	add    esp,0x1c
c00183c3:	0f b6 c0             	movzx  eax,al
c00183c6:	c1 e8 07             	shr    eax,0x7
c00183c9:	c3                   	ret    

c00183ca <RTC::completeRTCRefresh()>:
c00183ca:	55                   	push   ebp
c00183cb:	57                   	push   edi
c00183cc:	56                   	push   esi
c00183cd:	53                   	push   ebx
c00183ce:	83 ec 3c             	sub    esp,0x3c
c00183d1:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00183d7:	83 ec 0c             	sub    esp,0xc
c00183da:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00183de:	e8 cd ff ff ff       	call   c00183b0 <RTC::get_update_in_progress_flag()>
c00183e3:	83 c4 10             	add    esp,0x10
c00183e6:	84 c0                	test   al,al
c00183e8:	74 0e                	je     c00183f8 <RTC::completeRTCRefresh()+0x2e>
c00183ea:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00183f0:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00183f6:	73 df                	jae    c00183d7 <RTC::completeRTCRefresh()+0xd>
c00183f8:	51                   	push   ecx
c00183f9:	51                   	push   ecx
c00183fa:	6a 00                	push   0x0
c00183fc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018402:	e8 71 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018407:	5b                   	pop    ebx
c0018408:	89 c7                	mov    edi,eax
c001840a:	5e                   	pop    esi
c001840b:	6a 02                	push   0x2
c001840d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018413:	e8 60 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018418:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001841c:	5d                   	pop    ebp
c001841d:	58                   	pop    eax
c001841e:	6a 04                	push   0x4
c0018420:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018426:	e8 4d ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001842b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001842f:	58                   	pop    eax
c0018430:	5a                   	pop    edx
c0018431:	6a 07                	push   0x7
c0018433:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018439:	e8 3a ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001843e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018442:	59                   	pop    ecx
c0018443:	5b                   	pop    ebx
c0018444:	6a 08                	push   0x8
c0018446:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001844c:	e8 27 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018451:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018455:	5e                   	pop    esi
c0018456:	5d                   	pop    ebp
c0018457:	6a 09                	push   0x9
c0018459:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001845f:	e8 14 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018464:	0f b6 c0             	movzx  eax,al
c0018467:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001846b:	83 c4 10             	add    esp,0x10
c001846e:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018474:	83 ec 0c             	sub    esp,0xc
c0018477:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001847b:	e8 30 ff ff ff       	call   c00183b0 <RTC::get_update_in_progress_flag()>
c0018480:	83 c4 10             	add    esp,0x10
c0018483:	84 c0                	test   al,al
c0018485:	74 0e                	je     c0018495 <RTC::completeRTCRefresh()+0xcb>
c0018487:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001848d:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018493:	73 df                	jae    c0018474 <RTC::completeRTCRefresh()+0xaa>
c0018495:	51                   	push   ecx
c0018496:	51                   	push   ecx
c0018497:	6a 00                	push   0x0
c0018499:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001849f:	e8 d4 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184a4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00184a8:	5b                   	pop    ebx
c00184a9:	5e                   	pop    esi
c00184aa:	6a 02                	push   0x2
c00184ac:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184b2:	e8 c1 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184b7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00184bb:	5d                   	pop    ebp
c00184bc:	58                   	pop    eax
c00184bd:	6a 04                	push   0x4
c00184bf:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184c5:	e8 ae ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184ca:	88 c3                	mov    bl,al
c00184cc:	58                   	pop    eax
c00184cd:	5a                   	pop    edx
c00184ce:	6a 07                	push   0x7
c00184d0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184d6:	e8 9d ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184db:	59                   	pop    ecx
c00184dc:	89 c6                	mov    esi,eax
c00184de:	5d                   	pop    ebp
c00184df:	6a 08                	push   0x8
c00184e1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184e7:	e8 8c ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184ec:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00184f0:	58                   	pop    eax
c00184f1:	5a                   	pop    edx
c00184f2:	6a 09                	push   0x9
c00184f4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184fa:	e8 79 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184ff:	89 f9                	mov    ecx,edi
c0018501:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018505:	0f b6 e8             	movzx  ebp,al
c0018508:	83 c4 10             	add    esp,0x10
c001850b:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001850f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018514:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0018519:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001851d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018521:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018525:	0f 94 c0             	sete   al
c0018528:	0f b6 fb             	movzx  edi,bl
c001852b:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001852f:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018534:	0f 94 c2             	sete   dl
c0018537:	21 d0                	and    eax,edx
c0018539:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001853d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018541:	0f 94 c2             	sete   dl
c0018544:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0018548:	21 c2                	and    edx,eax
c001854a:	89 f0                	mov    eax,esi
c001854c:	0f b6 c0             	movzx  eax,al
c001854f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018553:	89 f0                	mov    eax,esi
c0018555:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018559:	0f 94 c0             	sete   al
c001855c:	21 d0                	and    eax,edx
c001855e:	31 d2                	xor    edx,edx
c0018560:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018564:	0f 94 c2             	sete   dl
c0018567:	85 c2                	test   edx,eax
c0018569:	75 27                	jne    c0018592 <RTC::completeRTCRefresh()+0x1c8>
c001856b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001856f:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018573:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018577:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001857b:	89 f0                	mov    eax,esi
c001857d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018581:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018585:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018589:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001858d:	e9 dc fe ff ff       	jmp    c001846e <RTC::completeRTCRefresh()+0xa4>
c0018592:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018596:	75 d3                	jne    c001856b <RTC::completeRTCRefresh()+0x1a1>
c0018598:	52                   	push   edx
c0018599:	52                   	push   edx
c001859a:	6a 0b                	push   0xb
c001859c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185a2:	e8 d1 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00185a7:	83 c4 10             	add    esp,0x10
c00185aa:	a8 04                	test   al,0x4
c00185ac:	75 7a                	jne    c0018628 <RTC::completeRTCRefresh()+0x25e>
c00185ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00185b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00185b6:	83 e1 0f             	and    ecx,0xf
c00185b9:	c1 ea 04             	shr    edx,0x4
c00185bc:	c1 ef 04             	shr    edi,0x4
c00185bf:	6b d2 0a             	imul   edx,edx,0xa
c00185c2:	83 e6 0f             	and    esi,0xf
c00185c5:	01 d1                	add    ecx,edx
c00185c7:	c1 ed 04             	shr    ebp,0x4
c00185ca:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00185ce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00185d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185d6:	c1 ea 04             	shr    edx,0x4
c00185d9:	83 e1 0f             	and    ecx,0xf
c00185dc:	6b d2 0a             	imul   edx,edx,0xa
c00185df:	6b ed 0a             	imul   ebp,ebp,0xa
c00185e2:	01 d1                	add    ecx,edx
c00185e4:	89 fa                	mov    edx,edi
c00185e6:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00185ea:	83 e2 07             	and    edx,0x7
c00185ed:	89 d9                	mov    ecx,ebx
c00185ef:	6b d2 0a             	imul   edx,edx,0xa
c00185f2:	83 e1 0f             	and    ecx,0xf
c00185f5:	83 e3 80             	and    ebx,0xffffff80
c00185f8:	01 d1                	add    ecx,edx
c00185fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00185fe:	09 cb                	or     ebx,ecx
c0018600:	c1 ea 04             	shr    edx,0x4
c0018603:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018607:	6b d2 0a             	imul   edx,edx,0xa
c001860a:	83 e1 0f             	and    ecx,0xf
c001860d:	01 d6                	add    esi,edx
c001860f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018613:	c1 ea 04             	shr    edx,0x4
c0018616:	6b d2 0a             	imul   edx,edx,0xa
c0018619:	01 d1                	add    ecx,edx
c001861b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001861f:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018623:	83 e2 0f             	and    edx,0xf
c0018626:	01 d5                	add    ebp,edx
c0018628:	a8 02                	test   al,0x2
c001862a:	75 15                	jne    c0018641 <RTC::completeRTCRefresh()+0x277>
c001862c:	f6 c3 80             	test   bl,0x80
c001862f:	74 10                	je     c0018641 <RTC::completeRTCRefresh()+0x277>
c0018631:	83 e3 7f             	and    ebx,0x7f
c0018634:	b9 18 00 00 00       	mov    ecx,0x18
c0018639:	8d 43 0c             	lea    eax,[ebx+0xc]
c001863c:	99                   	cdq    
c001863d:	f7 f9                	idiv   ecx
c001863f:	88 d3                	mov    bl,dl
c0018641:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018647:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c001864d:	77 06                	ja     c0018655 <RTC::completeRTCRefresh()+0x28b>
c001864f:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018655:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001865a:	31 c9                	xor    ecx,ecx
c001865c:	c1 e0 10             	shl    eax,0x10
c001865f:	89 cd                	mov    ebp,ecx
c0018661:	c1 e7 10             	shl    edi,0x10
c0018664:	31 d2                	xor    edx,edx
c0018666:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001866c:	09 c5                	or     ebp,eax
c001866e:	89 f0                	mov    eax,esi
c0018670:	89 e9                	mov    ecx,ebp
c0018672:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018676:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001867a:	88 c2                	mov    dl,al
c001867c:	88 d9                	mov    cl,bl
c001867e:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018682:	0f b7 c2             	movzx  eax,dx
c0018685:	09 f8                	or     eax,edi
c0018687:	89 c2                	mov    edx,eax
c0018689:	50                   	push   eax
c001868a:	50                   	push   eax
c001868b:	51                   	push   ecx
c001868c:	52                   	push   edx
c001868d:	e8 89 3c ff ff       	call   c000c31b <datetimeToSeconds(datetime_t)>
c0018692:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018696:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001869c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00186a2:	83 c4 4c             	add    esp,0x4c
c00186a5:	5b                   	pop    ebx
c00186a6:	5e                   	pop    esi
c00186a7:	5f                   	pop    edi
c00186a8:	5d                   	pop    ebp
c00186a9:	c3                   	ret    

c00186aa <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00186aa:	55                   	push   ebp
c00186ab:	57                   	push   edi
c00186ac:	56                   	push   esi
c00186ad:	53                   	push   ebx
c00186ae:	83 ec 30             	sub    esp,0x30
c00186b1:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00186b5:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00186b9:	6a 00                	push   0x0
c00186bb:	6a 00                	push   0x0
c00186bd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186c3:	e8 ca eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186c8:	83 c4 0c             	add    esp,0xc
c00186cb:	6a 00                	push   0x0
c00186cd:	6a 02                	push   0x2
c00186cf:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186d5:	e8 b8 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186da:	31 d2                	xor    edx,edx
c00186dc:	89 f9                	mov    ecx,edi
c00186de:	89 f8                	mov    eax,edi
c00186e0:	c1 e9 10             	shr    ecx,0x10
c00186e3:	0f b6 c4             	movzx  eax,ah
c00186e6:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00186ea:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00186ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00186f2:	b9 64 00 00 00       	mov    ecx,0x64
c00186f7:	89 f0                	mov    eax,esi
c00186f9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00186fd:	89 f0                	mov    eax,esi
c00186ff:	0f b6 c4             	movzx  eax,ah
c0018702:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018706:	89 f0                	mov    eax,esi
c0018708:	c1 e8 10             	shr    eax,0x10
c001870b:	f7 f1                	div    ecx
c001870d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018711:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018715:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018719:	59                   	pop    ecx
c001871a:	5b                   	pop    ebx
c001871b:	89 fb                	mov    ebx,edi
c001871d:	6a 0b                	push   0xb
c001871f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018725:	e8 4e ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001872a:	83 c4 10             	add    esp,0x10
c001872d:	89 c5                	mov    ebp,eax
c001872f:	a8 04                	test   al,0x4
c0018731:	75 6e                	jne    c00187a1 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018733:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018737:	31 d2                	xor    edx,edx
c0018739:	0f b6 c1             	movzx  eax,cl
c001873c:	b9 0a 00 00 00       	mov    ecx,0xa
c0018741:	f7 f1                	div    ecx
c0018743:	c1 e0 04             	shl    eax,0x4
c0018746:	09 d0                	or     eax,edx
c0018748:	31 d2                	xor    edx,edx
c001874a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001874e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018753:	f7 f1                	div    ecx
c0018755:	c1 e0 04             	shl    eax,0x4
c0018758:	09 d0                	or     eax,edx
c001875a:	31 d2                	xor    edx,edx
c001875c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018760:	0f b6 c3             	movzx  eax,bl
c0018763:	f7 f1                	div    ecx
c0018765:	c1 e0 04             	shl    eax,0x4
c0018768:	09 d0                	or     eax,edx
c001876a:	31 d2                	xor    edx,edx
c001876c:	89 c3                	mov    ebx,eax
c001876e:	89 f0                	mov    eax,esi
c0018770:	0f b6 c0             	movzx  eax,al
c0018773:	f7 f1                	div    ecx
c0018775:	c1 e0 04             	shl    eax,0x4
c0018778:	09 d0                	or     eax,edx
c001877a:	31 d2                	xor    edx,edx
c001877c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018780:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018785:	f7 f1                	div    ecx
c0018787:	c1 e0 04             	shl    eax,0x4
c001878a:	09 d0                	or     eax,edx
c001878c:	31 d2                	xor    edx,edx
c001878e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018792:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018796:	f7 f1                	div    ecx
c0018798:	c1 e0 04             	shl    eax,0x4
c001879b:	09 d0                	or     eax,edx
c001879d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00187a1:	83 e5 02             	and    ebp,0x2
c00187a4:	75 1e                	jne    c00187c4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00187a6:	0f b6 c3             	movzx  eax,bl
c00187a9:	83 f8 0b             	cmp    eax,0xb
c00187ac:	76 10                	jbe    c00187be <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00187ae:	8d 53 f4             	lea    edx,[ebx-0xc]
c00187b1:	88 d3                	mov    bl,dl
c00187b3:	84 d2                	test   dl,dl
c00187b5:	75 02                	jne    c00187b9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00187b7:	b3 0c                	mov    bl,0xc
c00187b9:	83 cb 80             	or     ebx,0xffffff80
c00187bc:	eb 06                	jmp    c00187c4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00187be:	85 c0                	test   eax,eax
c00187c0:	75 02                	jne    c00187c4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00187c2:	b3 0c                	mov    bl,0xc
c00187c4:	0f b6 db             	movzx  ebx,bl
c00187c7:	50                   	push   eax
c00187c8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00187cd:	52                   	push   edx
c00187ce:	6a 00                	push   0x0
c00187d0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187d6:	e8 b7 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00187db:	83 c4 0c             	add    esp,0xc
c00187de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00187e3:	50                   	push   eax
c00187e4:	6a 02                	push   0x2
c00187e6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187ec:	e8 a1 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00187f1:	83 c4 0c             	add    esp,0xc
c00187f4:	53                   	push   ebx
c00187f5:	6a 04                	push   0x4
c00187f7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187fd:	e8 90 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018802:	83 c4 0c             	add    esp,0xc
c0018805:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001880a:	52                   	push   edx
c001880b:	6a 07                	push   0x7
c001880d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018813:	e8 7a ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018818:	83 c4 0c             	add    esp,0xc
c001881b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018820:	50                   	push   eax
c0018821:	6a 08                	push   0x8
c0018823:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018829:	e8 64 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001882e:	83 c4 0c             	add    esp,0xc
c0018831:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018836:	55                   	push   ebp
c0018837:	6a 09                	push   0x9
c0018839:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001883f:	e8 4e ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018844:	5a                   	pop    edx
c0018845:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018849:	e8 7c fb ff ff       	call   c00183ca <RTC::completeRTCRefresh()>
c001884e:	83 c4 3c             	add    esp,0x3c
c0018851:	b0 01                	mov    al,0x1
c0018853:	5b                   	pop    ebx
c0018854:	5e                   	pop    esi
c0018855:	5f                   	pop    edi
c0018856:	5d                   	pop    ebp
c0018857:	c3                   	ret    

c0018858 <rtcIRQHandler(regs*, void*)>:
c0018858:	53                   	push   ebx
c0018859:	83 ec 10             	sub    esp,0x10
c001885c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018860:	6a 0c                	push   0xc
c0018862:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018868:	e8 0b e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001886d:	83 c4 10             	add    esp,0x10
c0018870:	a8 80                	test   al,0x80
c0018872:	74 24                	je     c0018898 <rtcIRQHandler(regs*, void*)+0x40>
c0018874:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001887b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018882:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c0018889:	75 0d                	jne    c0018898 <rtcIRQHandler(regs*, void*)+0x40>
c001888b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001888f:	83 c4 08             	add    esp,0x8
c0018892:	5b                   	pop    ebx
c0018893:	e9 32 fb ff ff       	jmp    c00183ca <RTC::completeRTCRefresh()>
c0018898:	83 c4 08             	add    esp,0x8
c001889b:	5b                   	pop    ebx
c001889c:	c3                   	ret    
c001889d:	90                   	nop

c001889e <RTC::RTC()>:
c001889e:	83 ec 1c             	sub    esp,0x1c
c00188a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188a5:	83 ec 08             	sub    esp,0x8
c00188a8:	68 2f 29 02 c0       	push   0xc002292f
c00188ad:	50                   	push   eax
c00188ae:	e8 43 39 ff ff       	call   c000c1f6 <Clock::Clock(char const*)>
c00188b3:	83 c4 10             	add    esp,0x10
c00188b6:	ba 4c 29 02 c0       	mov    edx,0xc002294c
c00188bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188bf:	89 10                	mov    DWORD PTR [eax],edx
c00188c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188c5:	83 ec 0c             	sub    esp,0xc
c00188c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188cc:	6a 01                	push   0x1
c00188ce:	68 58 88 01 c0       	push   0xc0018858
c00188d3:	6a 08                	push   0x8
c00188d5:	50                   	push   eax
c00188d6:	e8 f7 3d ff ff       	call   c000c6d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00188db:	83 c4 20             	add    esp,0x20
c00188de:	89 c2                	mov    edx,eax
c00188e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188e4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00188ea:	fa                   	cli    
c00188eb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00188f0:	83 c0 01             	add    eax,0x1
c00188f3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00188f8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00188fd:	83 ec 08             	sub    esp,0x8
c0018900:	6a 0b                	push   0xb
c0018902:	50                   	push   eax
c0018903:	e8 70 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018908:	83 c4 10             	add    esp,0x10
c001890b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001890f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018914:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018918:	83 ca 10             	or     edx,0x10
c001891b:	0f b6 d2             	movzx  edx,dl
c001891e:	83 ec 04             	sub    esp,0x4
c0018921:	52                   	push   edx
c0018922:	6a 0b                	push   0xb
c0018924:	50                   	push   eax
c0018925:	e8 68 e9 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001892a:	83 c4 10             	add    esp,0x10
c001892d:	83 ec 0c             	sub    esp,0xc
c0018930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018934:	e8 91 fa ff ff       	call   c00183ca <RTC::completeRTCRefresh()>
c0018939:	83 c4 10             	add    esp,0x10
c001893c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018941:	83 e8 01             	sub    eax,0x1
c0018944:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018949:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001894e:	85 c0                	test   eax,eax
c0018950:	75 01                	jne    c0018953 <RTC::RTC()+0xb5>
c0018952:	fb                   	sti    
c0018953:	90                   	nop
c0018954:	83 c4 1c             	add    esp,0x1c
c0018957:	c3                   	ret    

c0018958 <HalConsoleScroll(int, int)>:
c0018958:	83 ec 10             	sub    esp,0x10
c001895b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018963:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001896b:	90                   	nop
c001896c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018971:	0f 8f e1 00 00 00    	jg     c0018a58 <HalConsoleScroll(int, int)+0x100>
c0018977:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001897f:	90                   	nop
c0018980:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018988:	0f 8f be 00 00 00    	jg     c0018a4c <HalConsoleScroll(int, int)+0xf4>
c001898e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018992:	89 d0                	mov    eax,edx
c0018994:	c1 e0 02             	shl    eax,0x2
c0018997:	01 d0                	add    eax,edx
c0018999:	c1 e0 05             	shl    eax,0x5
c001899c:	89 c2                	mov    edx,eax
c001899e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189a2:	01 d0                	add    eax,edx
c00189a4:	89 c2                	mov    edx,eax
c00189a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189aa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00189ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00189b1:	89 d0                	mov    eax,edx
c00189b3:	c1 e0 02             	shl    eax,0x2
c00189b6:	01 d0                	add    eax,edx
c00189b8:	c1 e0 05             	shl    eax,0x5
c00189bb:	89 c2                	mov    edx,eax
c00189bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189c1:	01 d0                	add    eax,edx
c00189c3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00189c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189cd:	01 c2                	add    edx,eax
c00189cf:	8a 01                	mov    al,BYTE PTR [ecx]
c00189d1:	88 02                	mov    BYTE PTR [edx],al
c00189d3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00189d8:	75 66                	jne    c0018a40 <HalConsoleScroll(int, int)+0xe8>
c00189da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189de:	83 e0 01             	and    eax,0x1
c00189e1:	74 39                	je     c0018a1c <HalConsoleScroll(int, int)+0xc4>
c00189e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189e7:	83 e0 0f             	and    eax,0xf
c00189ea:	88 c2                	mov    dl,al
c00189ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00189f0:	c1 e0 04             	shl    eax,0x4
c00189f3:	09 d0                	or     eax,edx
c00189f5:	88 c1                	mov    cl,al
c00189f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00189fb:	89 d0                	mov    eax,edx
c00189fd:	c1 e0 02             	shl    eax,0x2
c0018a00:	01 d0                	add    eax,edx
c0018a02:	c1 e0 05             	shl    eax,0x5
c0018a05:	89 c2                	mov    edx,eax
c0018a07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a0b:	01 d0                	add    eax,edx
c0018a0d:	89 c2                	mov    edx,eax
c0018a0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a13:	01 d0                	add    eax,edx
c0018a15:	88 ca                	mov    dl,cl
c0018a17:	88 10                	mov    BYTE PTR [eax],dl
c0018a19:	eb 25                	jmp    c0018a40 <HalConsoleScroll(int, int)+0xe8>
c0018a1b:	90                   	nop
c0018a1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a20:	89 d0                	mov    eax,edx
c0018a22:	c1 e0 02             	shl    eax,0x2
c0018a25:	01 d0                	add    eax,edx
c0018a27:	c1 e0 05             	shl    eax,0x5
c0018a2a:	89 c2                	mov    edx,eax
c0018a2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a30:	01 d0                	add    eax,edx
c0018a32:	89 c2                	mov    edx,eax
c0018a34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a38:	01 d0                	add    eax,edx
c0018a3a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a40:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018a45:	e9 36 ff ff ff       	jmp    c0018980 <HalConsoleScroll(int, int)+0x28>
c0018a4a:	66 90                	xchg   ax,ax
c0018a4c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018a51:	e9 16 ff ff ff       	jmp    c001896c <HalConsoleScroll(int, int)+0x14>
c0018a56:	66 90                	xchg   ax,ax
c0018a58:	90                   	nop
c0018a59:	83 c4 10             	add    esp,0x10
c0018a5c:	c3                   	ret    
c0018a5d:	8d 76 00             	lea    esi,[esi+0x0]

c0018a60 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018a60:	83 ec 14             	sub    esp,0x14
c0018a63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a67:	88 04 24             	mov    BYTE PTR [esp],al
c0018a6a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018a6d:	0f b6 c0             	movzx  eax,al
c0018a70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a74:	89 d1                	mov    ecx,edx
c0018a76:	83 e1 0f             	and    ecx,0xf
c0018a79:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018a7d:	c1 e2 04             	shl    edx,0x4
c0018a80:	0f b6 d2             	movzx  edx,dl
c0018a83:	09 ca                	or     edx,ecx
c0018a85:	c1 e2 08             	shl    edx,0x8
c0018a88:	09 d0                	or     eax,edx
c0018a8a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018a8f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018a97:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a9b:	89 d0                	mov    eax,edx
c0018a9d:	c1 e0 02             	shl    eax,0x2
c0018aa0:	01 d0                	add    eax,edx
c0018aa2:	c1 e0 04             	shl    eax,0x4
c0018aa5:	89 c2                	mov    edx,eax
c0018aa7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018aab:	01 d0                	add    eax,edx
c0018aad:	01 c0                	add    eax,eax
c0018aaf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018ab3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ab7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018abc:	66 89 02             	mov    WORD PTR [edx],ax
c0018abf:	90                   	nop
c0018ac0:	83 c4 14             	add    esp,0x14
c0018ac3:	c3                   	ret    

c0018ac4 <HalConsoleCursorUpdate(int, int)>:
c0018ac4:	83 ec 20             	sub    esp,0x20
c0018ac7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018acb:	89 c2                	mov    edx,eax
c0018acd:	c1 e2 02             	shl    edx,0x2
c0018ad0:	01 d0                	add    eax,edx
c0018ad2:	c1 e0 04             	shl    eax,0x4
c0018ad5:	89 c2                	mov    edx,eax
c0018ad7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018adb:	01 d0                	add    eax,edx
c0018add:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018ae2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018ae9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018aee:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018af2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018af6:	ee                   	out    dx,al
c0018af7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018afc:	0f b6 c0             	movzx  eax,al
c0018aff:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018b06:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018b0a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018b0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018b12:	ee                   	out    dx,al
c0018b13:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018b1a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018b1f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018b23:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018b27:	ee                   	out    dx,al
c0018b28:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018b2d:	c1 e8 08             	shr    eax,0x8
c0018b30:	0f b6 c0             	movzx  eax,al
c0018b33:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018b3a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018b3e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018b42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018b46:	ee                   	out    dx,al
c0018b47:	90                   	nop
c0018b48:	83 c4 20             	add    esp,0x20
c0018b4b:	c3                   	ret    

c0018b4c <FAT::getName()>:
c0018b4c:	b8 80 29 02 c0       	mov    eax,0xc0022980
c0018b51:	c3                   	ret    
c0018b52:	66 90                	xchg   ax,ax

c0018b54 <FAT::tell(void*, unsigned long long*)>:
c0018b54:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018b59:	75 09                	jne    c0018b64 <FAT::tell(void*, unsigned long long*)+0x10>
c0018b5b:	b8 04 00 00 00       	mov    eax,0x4
c0018b60:	c3                   	ret    
c0018b61:	8d 76 00             	lea    esi,[esi+0x0]
c0018b64:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b69:	75 09                	jne    c0018b74 <FAT::tell(void*, unsigned long long*)+0x20>
c0018b6b:	b8 04 00 00 00       	mov    eax,0x4
c0018b70:	c3                   	ret    
c0018b71:	8d 76 00             	lea    esi,[esi+0x0]
c0018b74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b78:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018b7b:	ba 00 00 00 00       	mov    edx,0x0
c0018b80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b84:	89 01                	mov    DWORD PTR [ecx],eax
c0018b86:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018b89:	b8 00 00 00 00       	mov    eax,0x0
c0018b8e:	c3                   	ret    
c0018b8f:	90                   	nop

c0018b90 <FAT::stat(void*, unsigned long long*)>:
c0018b90:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018b95:	75 09                	jne    c0018ba0 <FAT::stat(void*, unsigned long long*)+0x10>
c0018b97:	b8 04 00 00 00       	mov    eax,0x4
c0018b9c:	c3                   	ret    
c0018b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018ba0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ba5:	75 09                	jne    c0018bb0 <FAT::stat(void*, unsigned long long*)+0x20>
c0018ba7:	b8 04 00 00 00       	mov    eax,0x4
c0018bac:	c3                   	ret    
c0018bad:	8d 76 00             	lea    esi,[esi+0x0]
c0018bb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bb4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018bb7:	ba 00 00 00 00       	mov    edx,0x0
c0018bbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018bc0:	89 01                	mov    DWORD PTR [ecx],eax
c0018bc2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018bc5:	b8 00 00 00 00       	mov    eax,0x0
c0018bca:	c3                   	ret    
c0018bcb:	90                   	nop

c0018bcc <FAT::~FAT()>:
c0018bcc:	83 ec 0c             	sub    esp,0xc
c0018bcf:	ba cc 29 02 c0       	mov    edx,0xc00229cc
c0018bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bd8:	89 10                	mov    DWORD PTR [eax],edx
c0018bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bde:	83 ec 0c             	sub    esp,0xc
c0018be1:	50                   	push   eax
c0018be2:	e8 79 29 ff ff       	call   c000b560 <Filesystem::~Filesystem()>
c0018be7:	83 c4 10             	add    esp,0x10
c0018bea:	90                   	nop
c0018beb:	83 c4 0c             	add    esp,0xc
c0018bee:	c3                   	ret    
c0018bef:	90                   	nop

c0018bf0 <FAT::~FAT()>:
c0018bf0:	83 ec 0c             	sub    esp,0xc
c0018bf3:	83 ec 0c             	sub    esp,0xc
c0018bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018bfa:	e8 cd ff ff ff       	call   c0018bcc <FAT::~FAT()>
c0018bff:	83 c4 10             	add    esp,0x10
c0018c02:	83 ec 08             	sub    esp,0x8
c0018c05:	6a 08                	push   0x8
c0018c07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c0b:	e8 08 1c ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018c10:	83 c4 10             	add    esp,0x10
c0018c13:	83 c4 0c             	add    esp,0xc
c0018c16:	c3                   	ret    
c0018c17:	90                   	nop

c0018c18 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018c18:	83 ec 1c             	sub    esp,0x1c
c0018c1b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018c22:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018c27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c2b:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c32:	83 f8 ff             	cmp    eax,0xffffffff
c0018c35:	75 35                	jne    c0018c6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018c37:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018c3b:	88 c2                	mov    dl,al
c0018c3d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c42:	01 d0                	add    eax,edx
c0018c44:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018c48:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018c4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c52:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018c59:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c5e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018c62:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018c69:	eb 19                	jmp    c0018c84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018c6b:	90                   	nop
c0018c6c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018c70:	88 c2                	mov    dl,al
c0018c72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c76:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c7d:	01 d0                	add    eax,edx
c0018c7f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018c83:	90                   	nop
c0018c84:	83 ec 04             	sub    esp,0x4
c0018c87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018c8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018c8f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018c93:	50                   	push   eax
c0018c94:	e8 36 c3 fe ff       	call   c0004fcf <f_getlabel>
c0018c99:	83 c4 10             	add    esp,0x10
c0018c9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ca0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ca5:	75 09                	jne    c0018cb0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018ca7:	b8 00 00 00 00       	mov    eax,0x0
c0018cac:	eb 0a                	jmp    c0018cb8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018cae:	66 90                	xchg   ax,ax
c0018cb0:	b8 01 00 00 00       	mov    eax,0x1
c0018cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cb8:	83 c4 1c             	add    esp,0x1c
c0018cbb:	c3                   	ret    

c0018cbc <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018cbc:	57                   	push   edi
c0018cbd:	83 ec 58             	sub    esp,0x58
c0018cc0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018cc8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018ccc:	b8 00 00 00 00       	mov    eax,0x0
c0018cd1:	b9 0f 00 00 00       	mov    ecx,0xf
c0018cd6:	fc                   	cld    
c0018cd7:	89 d7                	mov    edi,edx
c0018cd9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018cdb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018cdf:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ce6:	83 f8 ff             	cmp    eax,0xffffffff
c0018ce9:	75 35                	jne    c0018d20 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018ceb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018cef:	88 c2                	mov    dl,al
c0018cf1:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018cf6:	01 d0                	add    eax,edx
c0018cf8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018cfc:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018d02:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018d06:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018d0d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d12:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018d16:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018d1d:	eb 19                	jmp    c0018d38 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018d1f:	90                   	nop
c0018d20:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018d24:	88 c2                	mov    dl,al
c0018d26:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018d2a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d31:	01 d0                	add    eax,edx
c0018d33:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018d37:	90                   	nop
c0018d38:	83 ec 08             	sub    esp,0x8
c0018d3b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018d3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d43:	50                   	push   eax
c0018d44:	e8 f7 7a fe ff       	call   c0000840 <strcat>
c0018d49:	83 c4 10             	add    esp,0x10
c0018d4c:	83 ec 0c             	sub    esp,0xc
c0018d4f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d53:	50                   	push   eax
c0018d54:	e8 c7 c3 fe ff       	call   c0005120 <f_setlabel>
c0018d59:	83 c4 10             	add    esp,0x10
c0018d5c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018d60:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018d65:	75 09                	jne    c0018d70 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018d67:	b8 00 00 00 00       	mov    eax,0x0
c0018d6c:	eb 0a                	jmp    c0018d78 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018d6e:	66 90                	xchg   ax,ax
c0018d70:	b8 01 00 00 00       	mov    eax,0x1
c0018d75:	8d 76 00             	lea    esi,[esi+0x0]
c0018d78:	83 c4 58             	add    esp,0x58
c0018d7b:	5f                   	pop    edi
c0018d7c:	c3                   	ret    
c0018d7d:	90                   	nop
c0018d7e:	66 90                	xchg   ax,ax

c0018d80 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018d80:	83 ec 2c             	sub    esp,0x2c
c0018d83:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018d8b:	83 ec 08             	sub    esp,0x8
c0018d8e:	68 a4 29 02 c0       	push   0xc00229a4
c0018d93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d97:	e8 b4 79 fe ff       	call   c0000750 <strcmp>
c0018d9c:	83 c4 10             	add    esp,0x10
c0018d9f:	85 c0                	test   eax,eax
c0018da1:	0f 94 c0             	sete   al
c0018da4:	0f b6 c0             	movzx  eax,al
c0018da7:	85 c0                	test   eax,eax
c0018da9:	74 0d                	je     c0018db8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018dab:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018db3:	e9 c0 00 00 00       	jmp    c0018e78 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018db8:	83 ec 08             	sub    esp,0x8
c0018dbb:	68 96 29 02 c0       	push   0xc0022996
c0018dc0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018dc4:	e8 87 79 fe ff       	call   c0000750 <strcmp>
c0018dc9:	83 c4 10             	add    esp,0x10
c0018dcc:	85 c0                	test   eax,eax
c0018dce:	0f 94 c0             	sete   al
c0018dd1:	0f b6 c0             	movzx  eax,al
c0018dd4:	85 c0                	test   eax,eax
c0018dd6:	74 10                	je     c0018de8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018dd8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018de0:	e9 93 00 00 00       	jmp    c0018e78 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018de5:	8d 76 00             	lea    esi,[esi+0x0]
c0018de8:	83 ec 08             	sub    esp,0x8
c0018deb:	68 9c 29 02 c0       	push   0xc002299c
c0018df0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018df4:	e8 57 79 fe ff       	call   c0000750 <strcmp>
c0018df9:	83 c4 10             	add    esp,0x10
c0018dfc:	85 c0                	test   eax,eax
c0018dfe:	0f 94 c0             	sete   al
c0018e01:	0f b6 c0             	movzx  eax,al
c0018e04:	85 c0                	test   eax,eax
c0018e06:	74 0c                	je     c0018e14 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018e08:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018e10:	eb 66                	jmp    c0018e78 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018e12:	66 90                	xchg   ax,ax
c0018e14:	83 ec 08             	sub    esp,0x8
c0018e17:	68 7c 01 02 c0       	push   0xc002017c
c0018e1c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e20:	e8 2b 79 fe ff       	call   c0000750 <strcmp>
c0018e25:	83 c4 10             	add    esp,0x10
c0018e28:	85 c0                	test   eax,eax
c0018e2a:	0f 94 c0             	sete   al
c0018e2d:	0f b6 c0             	movzx  eax,al
c0018e30:	85 c0                	test   eax,eax
c0018e32:	74 0c                	je     c0018e40 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018e34:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018e3c:	eb 3a                	jmp    c0018e78 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018e3e:	66 90                	xchg   ax,ax
c0018e40:	83 ec 08             	sub    esp,0x8
c0018e43:	68 a2 29 02 c0       	push   0xc00229a2
c0018e48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e4c:	e8 ff 78 fe ff       	call   c0000750 <strcmp>
c0018e51:	83 c4 10             	add    esp,0x10
c0018e54:	85 c0                	test   eax,eax
c0018e56:	0f 94 c0             	sete   al
c0018e59:	0f b6 c0             	movzx  eax,al
c0018e5c:	85 c0                	test   eax,eax
c0018e5e:	74 0c                	je     c0018e6c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018e60:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018e68:	eb 0e                	jmp    c0018e78 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018e6a:	66 90                	xchg   ax,ax
c0018e6c:	b8 08 00 00 00       	mov    eax,0x8
c0018e71:	e9 ea 00 00 00       	jmp    c0018f60 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018e76:	66 90                	xchg   ax,ax
c0018e78:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018e7f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018e84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e88:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e8f:	83 f8 ff             	cmp    eax,0xffffffff
c0018e92:	75 34                	jne    c0018ec8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018e94:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018e98:	88 c2                	mov    dl,al
c0018e9a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e9f:	01 d0                	add    eax,edx
c0018ea1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018ea5:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018eab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018eaf:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018eb6:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ebb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018ebf:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018ec6:	eb 18                	jmp    c0018ee0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018ec8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018ecc:	88 c2                	mov    dl,al
c0018ece:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ed2:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ed9:	01 d0                	add    eax,edx
c0018edb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018edf:	90                   	nop
c0018ee0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ee4:	88 04 24             	mov    BYTE PTR [esp],al
c0018ee7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018eeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018eef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018ef7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018efc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018f04:	83 ec 0c             	sub    esp,0xc
c0018f07:	68 00 20 00 00       	push   0x2000
c0018f0c:	e8 a5 eb fe ff       	call   c0007ab6 <malloc>
c0018f11:	83 c4 10             	add    esp,0x10
c0018f14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018f18:	68 00 20 00 00       	push   0x2000
c0018f1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f21:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f25:	50                   	push   eax
c0018f26:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018f2a:	50                   	push   eax
c0018f2b:	e8 ed c4 fe ff       	call   c000541d <f_mkfs>
c0018f30:	83 c4 10             	add    esp,0x10
c0018f33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018f37:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018f3c:	75 0a                	jne    c0018f48 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018f3e:	b8 00 00 00 00       	mov    eax,0x0
c0018f43:	eb 1b                	jmp    c0018f60 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018f45:	8d 76 00             	lea    esi,[esi+0x0]
c0018f48:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018f4d:	75 09                	jne    c0018f58 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018f4f:	b8 09 00 00 00       	mov    eax,0x9
c0018f54:	eb 0a                	jmp    c0018f60 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018f56:	66 90                	xchg   ax,ax
c0018f58:	b8 01 00 00 00       	mov    eax,0x1
c0018f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f60:	83 c4 2c             	add    esp,0x2c
c0018f63:	c3                   	ret    

c0018f64 <FAT::tryMount(LogicalDisk*, int)>:
c0018f64:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018f6a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f6f:	83 f8 14             	cmp    eax,0x14
c0018f72:	75 18                	jne    c0018f8c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018f74:	83 ec 0c             	sub    esp,0xc
c0018f77:	68 a8 29 02 c0       	push   0xc00229a8
c0018f7c:	e8 d0 83 ff ff       	call   c0011351 <KePanic(char const*)>
c0018f81:	83 c4 10             	add    esp,0x10
c0018f84:	b0 00                	mov    al,0x0
c0018f86:	e9 ed 01 00 00       	jmp    c0019178 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f8b:	90                   	nop
c0018f8c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018f93:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018f99:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018f9f:	3d 00 02 00 00       	cmp    eax,0x200
c0018fa4:	74 0a                	je     c0018fb0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018fa6:	b0 00                	mov    al,0x0
c0018fa8:	e9 cb 01 00 00       	jmp    c0019178 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018fad:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018fb8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018fbf:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018fc6:	83 f8 ff             	cmp    eax,0xffffffff
c0018fc9:	74 09                	je     c0018fd4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018fcb:	b0 01                	mov    al,0x1
c0018fcd:	e9 a6 01 00 00       	jmp    c0019178 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018fd2:	66 90                	xchg   ax,ax
c0018fd4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018fde:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018fe6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018fed:	88 c2                	mov    dl,al
c0018fef:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ff4:	01 d0                	add    eax,edx
c0018ff6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018ffd:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0019003:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001900a:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0019011:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0019016:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001901d:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0019024:	83 ec 0c             	sub    esp,0xc
c0019027:	68 34 02 00 00       	push   0x234
c001902c:	e8 85 ea fe ff       	call   c0007ab6 <malloc>
c0019031:	83 c4 10             	add    esp,0x10
c0019034:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001903b:	83 ec 04             	sub    esp,0x4
c001903e:	6a 00                	push   0x0
c0019040:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019047:	50                   	push   eax
c0019048:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001904f:	e8 a4 ab fe ff       	call   c0003bf8 <f_mount>
c0019054:	83 c4 10             	add    esp,0x10
c0019057:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001905e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019066:	74 1c                	je     c0019084 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019068:	83 ec 0c             	sub    esp,0xc
c001906b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019072:	e8 5f ea fe ff       	call   c0007ad6 <rfree>
c0019077:	83 c4 10             	add    esp,0x10
c001907a:	b0 00                	mov    al,0x0
c001907c:	e9 f7 00 00 00       	jmp    c0019178 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019081:	8d 76 00             	lea    esi,[esi+0x0]
c0019084:	83 ec 04             	sub    esp,0x4
c0019087:	68 00 01 00 00       	push   0x100
c001908c:	6a 00                	push   0x0
c001908e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019095:	50                   	push   eax
c0019096:	e8 55 74 fe ff       	call   c00004f0 <memset>
c001909b:	83 c4 10             	add    esp,0x10
c001909e:	83 ec 08             	sub    esp,0x8
c00190a1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00190a8:	50                   	push   eax
c00190a9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00190b0:	50                   	push   eax
c00190b1:	e8 8a 77 fe ff       	call   c0000840 <strcat>
c00190b6:	83 c4 10             	add    esp,0x10
c00190b9:	83 ec 08             	sub    esp,0x8
c00190bc:	68 b6 29 02 c0       	push   0xc00229b6
c00190c1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00190c8:	50                   	push   eax
c00190c9:	e8 72 77 fe ff       	call   c0000840 <strcat>
c00190ce:	83 c4 10             	add    esp,0x10
c00190d1:	83 ec 04             	sub    esp,0x4
c00190d4:	6a 01                	push   0x1
c00190d6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00190dd:	50                   	push   eax
c00190de:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190e2:	50                   	push   eax
c00190e3:	e8 72 ab fe ff       	call   c0003c5a <f_open>
c00190e8:	83 c4 10             	add    esp,0x10
c00190eb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00190f2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00190f9:	85 c0                	test   eax,eax
c00190fb:	74 0b                	je     c0019108 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00190fd:	78 31                	js     c0019130 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00190ff:	83 e8 04             	sub    eax,0x4
c0019102:	83 f8 01             	cmp    eax,0x1
c0019105:	77 29                	ja     c0019130 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019107:	90                   	nop
c0019108:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019110:	83 ec 0c             	sub    esp,0xc
c0019113:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019117:	50                   	push   eax
c0019118:	e8 0c b3 fe ff       	call   c0004429 <f_close>
c001911d:	83 c4 10             	add    esp,0x10
c0019120:	90                   	nop
c0019121:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019129:	85 c0                	test   eax,eax
c001912b:	74 43                	je     c0019170 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001912d:	eb 31                	jmp    c0019160 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001912f:	90                   	nop
c0019130:	83 ec 0c             	sub    esp,0xc
c0019133:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001913a:	e8 97 e9 fe ff       	call   c0007ad6 <rfree>
c001913f:	83 c4 10             	add    esp,0x10
c0019142:	83 ec 04             	sub    esp,0x4
c0019145:	6a 00                	push   0x0
c0019147:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001914e:	50                   	push   eax
c001914f:	6a 00                	push   0x0
c0019151:	e8 a2 aa fe ff       	call   c0003bf8 <f_mount>
c0019156:	83 c4 10             	add    esp,0x10
c0019159:	b0 00                	mov    al,0x0
c001915b:	eb 1b                	jmp    c0019178 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001915d:	8d 76 00             	lea    esi,[esi+0x0]
c0019160:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0019165:	83 c0 01             	add    eax,0x1
c0019168:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c001916d:	8d 76 00             	lea    esi,[esi+0x0]
c0019170:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019177:	90                   	nop
c0019178:	81 c4 4c 03 00 00    	add    esp,0x34c
c001917e:	c3                   	ret    
c001917f:	90                   	nop

c0019180 <FAT::allocateSwapfile(char const*, int)>:
c0019180:	55                   	push   ebp
c0019181:	57                   	push   edi
c0019182:	56                   	push   esi
c0019183:	53                   	push   ebx
c0019184:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001918a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019195:	83 ec 0c             	sub    esp,0xc
c0019198:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001919f:	e8 12 e9 fe ff       	call   c0007ab6 <malloc>
c00191a4:	83 c4 10             	add    esp,0x10
c00191a7:	89 c7                	mov    edi,eax
c00191a9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00191ae:	6a 01                	push   0x1
c00191b0:	50                   	push   eax
c00191b1:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00191b8:	57                   	push   edi
c00191b9:	e8 32 26 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c00191be:	83 c4 10             	add    esp,0x10
c00191c1:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00191c8:	83 ec 04             	sub    esp,0x4
c00191cb:	8d 44 24 13          	lea    eax,[esp+0x13]
c00191cf:	50                   	push   eax
c00191d0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191d4:	50                   	push   eax
c00191d5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191dc:	e8 ef 29 ff ff       	call   c000bbd0 <File::stat(unsigned long long*, bool*)>
c00191e1:	83 c4 10             	add    esp,0x10
c00191e4:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00191eb:	c1 e0 14             	shl    eax,0x14
c00191ee:	89 c7                	mov    edi,eax
c00191f0:	89 c5                	mov    ebp,eax
c00191f2:	c1 fd 1f             	sar    ebp,0x1f
c00191f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00191fd:	89 f9                	mov    ecx,edi
c00191ff:	31 c1                	xor    ecx,eax
c0019201:	89 cb                	mov    ebx,ecx
c0019203:	89 e9                	mov    ecx,ebp
c0019205:	31 d1                	xor    ecx,edx
c0019207:	89 ce                	mov    esi,ecx
c0019209:	89 f0                	mov    eax,esi
c001920b:	09 d8                	or     eax,ebx
c001920d:	0f 84 99 00 00 00    	je     c00192ac <FAT::allocateSwapfile(char const*, int)+0x12c>
c0019213:	83 ec 0c             	sub    esp,0xc
c0019216:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001921d:	e8 7a 28 ff ff       	call   c000ba9c <File::unlink()>
c0019222:	83 c4 10             	add    esp,0x10
c0019225:	83 ec 08             	sub    esp,0x8
c0019228:	6a 12                	push   0x12
c001922a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019231:	e8 98 26 ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c0019236:	83 c4 10             	add    esp,0x10
c0019239:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019240:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019246:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001924d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019254:	c1 e0 14             	shl    eax,0x14
c0019257:	83 ec 04             	sub    esp,0x4
c001925a:	6a 01                	push   0x1
c001925c:	50                   	push   eax
c001925d:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019264:	e8 47 c0 fe ff       	call   c00052b0 <f_expand>
c0019269:	83 c4 10             	add    esp,0x10
c001926c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019273:	8b 00                	mov    eax,DWORD PTR [eax]
c0019275:	83 c0 10             	add    eax,0x10
c0019278:	8b 00                	mov    eax,DWORD PTR [eax]
c001927a:	83 ec 0c             	sub    esp,0xc
c001927d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019281:	52                   	push   edx
c0019282:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019286:	52                   	push   edx
c0019287:	6a 00                	push   0x0
c0019289:	68 00 04 00 00       	push   0x400
c001928e:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019295:	ff d0                	call   eax
c0019297:	83 c4 20             	add    esp,0x20
c001929a:	83 ec 0c             	sub    esp,0xc
c001929d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00192a4:	e8 83 26 ff ff       	call   c000b92c <File::close()>
c00192a9:	83 c4 10             	add    esp,0x10
c00192ac:	83 ec 08             	sub    esp,0x8
c00192af:	6a 01                	push   0x1
c00192b1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00192b8:	e8 11 26 ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c00192bd:	83 c4 10             	add    esp,0x10
c00192c0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00192c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00192c9:	83 c0 0c             	add    eax,0xc
c00192cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00192ce:	83 ec 0c             	sub    esp,0xc
c00192d1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00192d5:	52                   	push   edx
c00192d6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00192da:	52                   	push   edx
c00192db:	6a 00                	push   0x0
c00192dd:	6a 04                	push   0x4
c00192df:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00192e6:	ff d0                	call   eax
c00192e8:	83 c4 20             	add    esp,0x20
c00192eb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00192f2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00192f8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00192ff:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019306:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019309:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019310:	83 ec 0c             	sub    esp,0xc
c0019313:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001931a:	e8 0d 26 ff ff       	call   c000b92c <File::close()>
c001931f:	83 c4 10             	add    esp,0x10
c0019322:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019329:	ba 00 00 00 00       	mov    edx,0x0
c001932e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019334:	5b                   	pop    ebx
c0019335:	5e                   	pop    esi
c0019336:	5f                   	pop    edi
c0019337:	5d                   	pop    ebp
c0019338:	c3                   	ret    
c0019339:	90                   	nop
c001933a:	66 90                	xchg   ax,ax

c001933c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001933c:	57                   	push   edi
c001933d:	56                   	push   esi
c001933e:	53                   	push   ebx
c001933f:	81 ec 50 02 00 00    	sub    esp,0x250
c0019345:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001934d:	74 0d                	je     c001935c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001934f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019357:	75 0f                	jne    c0019368 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019359:	8d 76 00             	lea    esi,[esi+0x0]
c001935c:	b8 04 00 00 00       	mov    eax,0x4
c0019361:	e9 3a 01 00 00       	jmp    c00194a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019366:	66 90                	xchg   ax,ax
c0019368:	83 ec 08             	sub    esp,0x8
c001936b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019372:	50                   	push   eax
c0019373:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001937a:	e8 77 b3 fe ff       	call   c00046f6 <f_readdir>
c001937f:	83 c4 10             	add    esp,0x10
c0019382:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019389:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019390:	83 ec 0c             	sub    esp,0xc
c0019393:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001939a:	83 c0 16             	add    eax,0x16
c001939d:	50                   	push   eax
c001939e:	e8 cd 71 fe ff       	call   c0000570 <strlen>
c00193a3:	83 c4 10             	add    esp,0x10
c00193a6:	ba 00 00 00 00       	mov    edx,0x0
c00193ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193af:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00193b3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00193ba:	0f b6 c0             	movzx  eax,al
c00193bd:	83 e0 10             	and    eax,0x10
c00193c0:	74 0a                	je     c00193cc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00193c2:	b8 02 00 00 00       	mov    eax,0x2
c00193c7:	eb 0b                	jmp    c00193d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00193c9:	8d 76 00             	lea    esi,[esi+0x0]
c00193cc:	b8 01 00 00 00       	mov    eax,0x1
c00193d1:	8d 76 00             	lea    esi,[esi+0x0]
c00193d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00193d8:	83 ec 08             	sub    esp,0x8
c00193db:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00193e2:	83 c0 16             	add    eax,0x16
c00193e5:	50                   	push   eax
c00193e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00193ea:	83 c0 10             	add    eax,0x10
c00193ed:	50                   	push   eax
c00193ee:	e8 4d 72 fe ff       	call   c0000640 <strcpy>
c00193f3:	83 c4 10             	add    esp,0x10
c00193f6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00193fd:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019404:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019408:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001940f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019416:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001941d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019424:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001942b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019432:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019439:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019440:	89 c6                	mov    esi,eax
c0019442:	89 d7                	mov    edi,edx
c0019444:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019446:	89 c8                	mov    eax,ecx
c0019448:	89 fa                	mov    edx,edi
c001944a:	89 f3                	mov    ebx,esi
c001944c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019453:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001945a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019461:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019468:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001946e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019475:	0f be c0             	movsx  eax,al
c0019478:	85 c0                	test   eax,eax
c001947a:	75 08                	jne    c0019484 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001947c:	b8 07 00 00 00       	mov    eax,0x7
c0019481:	eb 1d                	jmp    c00194a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019483:	90                   	nop
c0019484:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001948b:	85 c0                	test   eax,eax
c001948d:	75 09                	jne    c0019498 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001948f:	b8 00 00 00 00       	mov    eax,0x0
c0019494:	eb 0a                	jmp    c00194a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019496:	66 90                	xchg   ax,ax
c0019498:	b8 01 00 00 00       	mov    eax,0x1
c001949d:	8d 76 00             	lea    esi,[esi+0x0]
c00194a0:	81 c4 50 02 00 00    	add    esp,0x250
c00194a6:	5b                   	pop    ebx
c00194a7:	5e                   	pop    esi
c00194a8:	5f                   	pop    edi
c00194a9:	c3                   	ret    
c00194aa:	66 90                	xchg   ax,ax

c00194ac <FAT::read(void*, unsigned long, void*, int*)>:
c00194ac:	83 ec 1c             	sub    esp,0x1c
c00194af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194b4:	74 0a                	je     c00194c0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00194b6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00194bb:	75 0b                	jne    c00194c8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00194bd:	8d 76 00             	lea    esi,[esi+0x0]
c00194c0:	b8 04 00 00 00       	mov    eax,0x4
c00194c5:	eb 41                	jmp    c0019508 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00194c7:	90                   	nop
c00194c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194cc:	50                   	push   eax
c00194cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00194d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194d9:	e8 3f aa fe ff       	call   c0003f1d <f_read>
c00194de:	83 c4 10             	add    esp,0x10
c00194e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194e9:	89 c2                	mov    edx,eax
c00194eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00194ef:	89 10                	mov    DWORD PTR [eax],edx
c00194f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194f5:	85 c0                	test   eax,eax
c00194f7:	75 07                	jne    c0019500 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00194f9:	b8 00 00 00 00       	mov    eax,0x0
c00194fe:	eb 08                	jmp    c0019508 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019500:	b8 01 00 00 00       	mov    eax,0x1
c0019505:	8d 76 00             	lea    esi,[esi+0x0]
c0019508:	83 c4 1c             	add    esp,0x1c
c001950b:	c3                   	ret    

c001950c <FAT::write(void*, unsigned long, void*, int*)>:
c001950c:	83 ec 1c             	sub    esp,0x1c
c001950f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019514:	74 0a                	je     c0019520 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019516:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001951b:	75 0b                	jne    c0019528 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001951d:	8d 76 00             	lea    esi,[esi+0x0]
c0019520:	b8 04 00 00 00       	mov    eax,0x4
c0019525:	eb 41                	jmp    c0019568 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019527:	90                   	nop
c0019528:	8d 44 24 08          	lea    eax,[esp+0x8]
c001952c:	50                   	push   eax
c001952d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019531:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019535:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019539:	e8 de ab fe ff       	call   c000411c <f_write>
c001953e:	83 c4 10             	add    esp,0x10
c0019541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019545:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019549:	89 c2                	mov    edx,eax
c001954b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001954f:	89 10                	mov    DWORD PTR [eax],edx
c0019551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019555:	85 c0                	test   eax,eax
c0019557:	75 07                	jne    c0019560 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019559:	b8 00 00 00 00       	mov    eax,0x0
c001955e:	eb 08                	jmp    c0019568 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019560:	b8 01 00 00 00       	mov    eax,0x1
c0019565:	8d 76 00             	lea    esi,[esi+0x0]
c0019568:	83 c4 1c             	add    esp,0x1c
c001956b:	c3                   	ret    

c001956c <FAT::close(void*)>:
c001956c:	83 ec 1c             	sub    esp,0x1c
c001956f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019574:	75 0a                	jne    c0019580 <FAT::close(void*)+0x14>
c0019576:	b8 04 00 00 00       	mov    eax,0x4
c001957b:	eb 3f                	jmp    c00195bc <FAT::close(void*)+0x50>
c001957d:	8d 76 00             	lea    esi,[esi+0x0]
c0019580:	83 ec 0c             	sub    esp,0xc
c0019583:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019587:	e8 9d ae fe ff       	call   c0004429 <f_close>
c001958c:	83 c4 10             	add    esp,0x10
c001958f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019593:	83 ec 0c             	sub    esp,0xc
c0019596:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001959a:	e8 27 e5 fe ff       	call   c0007ac6 <free>
c001959f:	83 c4 10             	add    esp,0x10
c00195a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195a6:	85 c0                	test   eax,eax
c00195a8:	75 0a                	jne    c00195b4 <FAT::close(void*)+0x48>
c00195aa:	b8 00 00 00 00       	mov    eax,0x0
c00195af:	eb 0b                	jmp    c00195bc <FAT::close(void*)+0x50>
c00195b1:	8d 76 00             	lea    esi,[esi+0x0]
c00195b4:	b8 01 00 00 00       	mov    eax,0x1
c00195b9:	8d 76 00             	lea    esi,[esi+0x0]
c00195bc:	83 c4 1c             	add    esp,0x1c
c00195bf:	c3                   	ret    

c00195c0 <FAT::closeDir(void*)>:
c00195c0:	83 ec 1c             	sub    esp,0x1c
c00195c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00195c8:	75 0a                	jne    c00195d4 <FAT::closeDir(void*)+0x14>
c00195ca:	b8 04 00 00 00       	mov    eax,0x4
c00195cf:	eb 3f                	jmp    c0019610 <FAT::closeDir(void*)+0x50>
c00195d1:	8d 76 00             	lea    esi,[esi+0x0]
c00195d4:	83 ec 0c             	sub    esp,0xc
c00195d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195db:	e8 f4 b0 fe ff       	call   c00046d4 <f_closedir>
c00195e0:	83 c4 10             	add    esp,0x10
c00195e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195e7:	83 ec 0c             	sub    esp,0xc
c00195ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195ee:	e8 d3 e4 fe ff       	call   c0007ac6 <free>
c00195f3:	83 c4 10             	add    esp,0x10
c00195f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195fa:	85 c0                	test   eax,eax
c00195fc:	75 0a                	jne    c0019608 <FAT::closeDir(void*)+0x48>
c00195fe:	b8 00 00 00 00       	mov    eax,0x0
c0019603:	eb 0b                	jmp    c0019610 <FAT::closeDir(void*)+0x50>
c0019605:	8d 76 00             	lea    esi,[esi+0x0]
c0019608:	b8 01 00 00 00       	mov    eax,0x1
c001960d:	8d 76 00             	lea    esi,[esi+0x0]
c0019610:	83 c4 1c             	add    esp,0x1c
c0019613:	c3                   	ret    

c0019614 <FAT::truncate(void*, unsigned long long)>:
c0019614:	83 ec 2c             	sub    esp,0x2c
c0019617:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001961b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001961f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019623:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019627:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001962c:	75 0a                	jne    c0019638 <FAT::truncate(void*, unsigned long long)+0x24>
c001962e:	b8 04 00 00 00       	mov    eax,0x4
c0019633:	eb 47                	jmp    c001967c <FAT::truncate(void*, unsigned long long)+0x68>
c0019635:	8d 76 00             	lea    esi,[esi+0x0]
c0019638:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001963c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001963f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019643:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001964b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001964f:	83 ec 08             	sub    esp,0x8
c0019652:	50                   	push   eax
c0019653:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019657:	e8 fc ad fe ff       	call   c0004458 <f_lseek>
c001965c:	83 c4 10             	add    esp,0x10
c001965f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019663:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019667:	85 c0                	test   eax,eax
c0019669:	75 09                	jne    c0019674 <FAT::truncate(void*, unsigned long long)+0x60>
c001966b:	b8 00 00 00 00       	mov    eax,0x0
c0019670:	eb 0a                	jmp    c001967c <FAT::truncate(void*, unsigned long long)+0x68>
c0019672:	66 90                	xchg   ax,ax
c0019674:	b8 01 00 00 00       	mov    eax,0x1
c0019679:	8d 76 00             	lea    esi,[esi+0x0]
c001967c:	83 c4 2c             	add    esp,0x2c
c001967f:	c3                   	ret    

c0019680 <FAT::seek(void*, unsigned long long)>:
c0019680:	83 ec 2c             	sub    esp,0x2c
c0019683:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019687:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001968b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001968f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019693:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019698:	75 0a                	jne    c00196a4 <FAT::seek(void*, unsigned long long)+0x24>
c001969a:	b8 04 00 00 00       	mov    eax,0x4
c001969f:	eb 33                	jmp    c00196d4 <FAT::seek(void*, unsigned long long)+0x54>
c00196a1:	8d 76 00             	lea    esi,[esi+0x0]
c00196a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196a8:	83 ec 08             	sub    esp,0x8
c00196ab:	50                   	push   eax
c00196ac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00196b0:	e8 a3 ad fe ff       	call   c0004458 <f_lseek>
c00196b5:	83 c4 10             	add    esp,0x10
c00196b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00196c0:	85 c0                	test   eax,eax
c00196c2:	75 08                	jne    c00196cc <FAT::seek(void*, unsigned long long)+0x4c>
c00196c4:	b8 00 00 00 00       	mov    eax,0x0
c00196c9:	eb 09                	jmp    c00196d4 <FAT::seek(void*, unsigned long long)+0x54>
c00196cb:	90                   	nop
c00196cc:	b8 01 00 00 00       	mov    eax,0x1
c00196d1:	8d 76 00             	lea    esi,[esi+0x0]
c00196d4:	83 c4 2c             	add    esp,0x2c
c00196d7:	c3                   	ret    

c00196d8 <fatWrapperReadDisk>:
c00196d8:	53                   	push   ebx
c00196d9:	83 ec 18             	sub    esp,0x18
c00196dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00196e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196e9:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00196f0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00196f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196f8:	ba 00 00 00 00       	mov    edx,0x0
c00196fd:	83 ec 0c             	sub    esp,0xc
c0019700:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019704:	53                   	push   ebx
c0019705:	52                   	push   edx
c0019706:	50                   	push   eax
c0019707:	51                   	push   ecx
c0019708:	e8 fb 43 ff ff       	call   c000db08 <LogicalDisk::read(unsigned long long, int, void*)>
c001970d:	83 c4 20             	add    esp,0x20
c0019710:	83 c4 18             	add    esp,0x18
c0019713:	5b                   	pop    ebx
c0019714:	c3                   	ret    
c0019715:	8d 76 00             	lea    esi,[esi+0x0]

c0019718 <fatWrapperWriteDisk>:
c0019718:	53                   	push   ebx
c0019719:	83 ec 18             	sub    esp,0x18
c001971c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019720:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019724:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019729:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019730:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019734:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019738:	ba 00 00 00 00       	mov    edx,0x0
c001973d:	83 ec 0c             	sub    esp,0xc
c0019740:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019744:	53                   	push   ebx
c0019745:	52                   	push   edx
c0019746:	50                   	push   eax
c0019747:	51                   	push   ecx
c0019748:	e8 27 44 ff ff       	call   c000db74 <LogicalDisk::write(unsigned long long, int, void*)>
c001974d:	83 c4 20             	add    esp,0x20
c0019750:	83 c4 18             	add    esp,0x18
c0019753:	5b                   	pop    ebx
c0019754:	c3                   	ret    
c0019755:	8d 76 00             	lea    esi,[esi+0x0]

c0019758 <fatWrapperIoctl>:
c0019758:	53                   	push   ebx
c0019759:	83 ec 28             	sub    esp,0x28
c001975c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019760:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019764:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019768:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001976c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019771:	83 f8 02             	cmp    eax,0x2
c0019774:	75 32                	jne    c00197a8 <fatWrapperIoctl+0x50>
c0019776:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001977a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001977e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019783:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c001978a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019790:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019796:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001979a:	66 89 02             	mov    WORD PTR [edx],ax
c001979d:	b8 00 00 00 00       	mov    eax,0x0
c00197a2:	e9 c5 00 00 00       	jmp    c001986c <fatWrapperIoctl+0x114>
c00197a7:	90                   	nop
c00197a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197ad:	83 f8 01             	cmp    eax,0x1
c00197b0:	75 6a                	jne    c001981c <fatWrapperIoctl+0xc4>
c00197b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00197ba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00197bf:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00197c6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00197cc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00197d2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00197d8:	89 c8                	mov    eax,ecx
c00197da:	89 da                	mov    edx,ebx
c00197dc:	0f a4 c2 0a          	shld   edx,eax,0xa
c00197e0:	c1 e0 0a             	shl    eax,0xa
c00197e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00197e8:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c00197ef:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00197f5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00197fb:	89 cb                	mov    ebx,ecx
c00197fd:	c1 fb 1f             	sar    ebx,0x1f
c0019800:	53                   	push   ebx
c0019801:	51                   	push   ecx
c0019802:	52                   	push   edx
c0019803:	50                   	push   eax
c0019804:	e8 77 5b 00 00       	call   c001f380 <__udivdi3>
c0019809:	83 c4 10             	add    esp,0x10
c001980c:	89 c2                	mov    edx,eax
c001980e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019812:	89 10                	mov    DWORD PTR [eax],edx
c0019814:	b8 00 00 00 00       	mov    eax,0x0
c0019819:	eb 51                	jmp    c001986c <fatWrapperIoctl+0x114>
c001981b:	90                   	nop
c001981c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019821:	85 c0                	test   eax,eax
c0019823:	75 07                	jne    c001982c <fatWrapperIoctl+0xd4>
c0019825:	b8 00 00 00 00       	mov    eax,0x0
c001982a:	eb 40                	jmp    c001986c <fatWrapperIoctl+0x114>
c001982c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019831:	83 f8 03             	cmp    eax,0x3
c0019834:	75 1a                	jne    c0019850 <fatWrapperIoctl+0xf8>
c0019836:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001983a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001983e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019842:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019848:	b8 00 00 00 00       	mov    eax,0x0
c001984d:	eb 1d                	jmp    c001986c <fatWrapperIoctl+0x114>
c001984f:	90                   	nop
c0019850:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019855:	83 f8 04             	cmp    eax,0x4
c0019858:	75 0a                	jne    c0019864 <fatWrapperIoctl+0x10c>
c001985a:	b8 00 00 00 00       	mov    eax,0x0
c001985f:	eb 0b                	jmp    c001986c <fatWrapperIoctl+0x114>
c0019861:	8d 76 00             	lea    esi,[esi+0x0]
c0019864:	b8 04 00 00 00       	mov    eax,0x4
c0019869:	8d 76 00             	lea    esi,[esi+0x0]
c001986c:	83 c4 28             	add    esp,0x28
c001986f:	5b                   	pop    ebx
c0019870:	c3                   	ret    
c0019871:	90                   	nop
c0019872:	66 90                	xchg   ax,ax

c0019874 <FAT::FAT()>:
c0019874:	83 ec 1c             	sub    esp,0x1c
c0019877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001987b:	83 ec 0c             	sub    esp,0xc
c001987e:	50                   	push   eax
c001987f:	e8 b8 1c ff ff       	call   c000b53c <Filesystem::Filesystem()>
c0019884:	83 c4 10             	add    esp,0x10
c0019887:	ba cc 29 02 c0       	mov    edx,0xc00229cc
c001988c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019890:	89 10                	mov    DWORD PTR [eax],edx
c0019892:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c001989c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00198a4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00198a9:	7f 19                	jg     c00198c4 <FAT::FAT()+0x50>
c00198ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198af:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c00198ba:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00198bf:	eb e3                	jmp    c00198a4 <FAT::FAT()+0x30>
c00198c1:	8d 76 00             	lea    esi,[esi+0x0]
c00198c4:	90                   	nop
c00198c5:	83 c4 1c             	add    esp,0x1c
c00198c8:	c3                   	ret    
c00198c9:	90                   	nop
c00198ca:	66 90                	xchg   ax,ax

c00198cc <FAT::fixFilepath(char*)>:
c00198cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198d0:	8a 00                	mov    al,BYTE PTR [eax]
c00198d2:	0f be c0             	movsx  eax,al
c00198d5:	83 f8 40             	cmp    eax,0x40
c00198d8:	7e 2e                	jle    c0019908 <FAT::fixFilepath(char*)+0x3c>
c00198da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198de:	8a 00                	mov    al,BYTE PTR [eax]
c00198e0:	83 e8 41             	sub    eax,0x41
c00198e3:	88 c2                	mov    dl,al
c00198e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198e9:	88 10                	mov    BYTE PTR [eax],dl
c00198eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198ef:	8a 00                	mov    al,BYTE PTR [eax]
c00198f1:	0f be c0             	movsx  eax,al
c00198f4:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c00198fb:	83 c0 30             	add    eax,0x30
c00198fe:	88 c2                	mov    dl,al
c0019900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019904:	88 10                	mov    BYTE PTR [eax],dl
c0019906:	66 90                	xchg   ax,ax
c0019908:	90                   	nop
c0019909:	c3                   	ret    
c001990a:	66 90                	xchg   ax,ax

c001990c <FAT::open(char const*, void**, FileOpenMode)>:
c001990c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019912:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001991a:	74 0c                	je     c0019928 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001991c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019924:	75 0e                	jne    c0019934 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019926:	66 90                	xchg   ax,ax
c0019928:	b8 04 00 00 00       	mov    eax,0x4
c001992d:	e9 46 01 00 00       	jmp    c0019a78 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019932:	66 90                	xchg   ax,ax
c0019934:	83 ec 08             	sub    esp,0x8
c0019937:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001993e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019942:	50                   	push   eax
c0019943:	e8 f8 6c fe ff       	call   c0000640 <strcpy>
c0019948:	83 c4 10             	add    esp,0x10
c001994b:	83 ec 08             	sub    esp,0x8
c001994e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019952:	50                   	push   eax
c0019953:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001995a:	e8 6d ff ff ff       	call   c00198cc <FAT::fixFilepath(char*)>
c001995f:	83 c4 10             	add    esp,0x10
c0019962:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001996a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019971:	83 e0 01             	and    eax,0x1
c0019974:	74 12                	je     c0019988 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019976:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001997d:	83 c8 01             	or     eax,0x1
c0019980:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019987:	90                   	nop
c0019988:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001998f:	83 e0 04             	and    eax,0x4
c0019992:	74 24                	je     c00199b8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019994:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001999b:	83 c8 30             	or     eax,0x30
c001999e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00199a5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00199ac:	83 c8 02             	or     eax,0x2
c00199af:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00199b6:	66 90                	xchg   ax,ax
c00199b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199bf:	83 e0 02             	and    eax,0x2
c00199c2:	74 14                	je     c00199d8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00199c4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00199cb:	83 c8 02             	or     eax,0x2
c00199ce:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00199d5:	8d 76 00             	lea    esi,[esi+0x0]
c00199d8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199df:	83 e0 08             	and    eax,0x8
c00199e2:	74 14                	je     c00199f8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c00199e4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00199eb:	83 c8 04             	or     eax,0x4
c00199ee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00199f5:	8d 76 00             	lea    esi,[esi+0x0]
c00199f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199ff:	83 e0 10             	and    eax,0x10
c0019a02:	74 14                	je     c0019a18 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019a04:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019a0b:	83 c8 08             	or     eax,0x8
c0019a0e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019a15:	8d 76 00             	lea    esi,[esi+0x0]
c0019a18:	83 ec 0c             	sub    esp,0xc
c0019a1b:	68 28 02 00 00       	push   0x228
c0019a20:	e8 91 e0 fe ff       	call   c0007ab6 <malloc>
c0019a25:	83 c4 10             	add    esp,0x10
c0019a28:	89 c2                	mov    edx,eax
c0019a2a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a31:	89 10                	mov    DWORD PTR [eax],edx
c0019a33:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019a3b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a44:	83 ec 04             	sub    esp,0x4
c0019a47:	52                   	push   edx
c0019a48:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019a4c:	52                   	push   edx
c0019a4d:	50                   	push   eax
c0019a4e:	e8 07 a2 fe ff       	call   c0003c5a <f_open>
c0019a53:	83 c4 10             	add    esp,0x10
c0019a56:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019a5d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019a65:	74 09                	je     c0019a70 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019a67:	b8 01 00 00 00       	mov    eax,0x1
c0019a6c:	eb 0a                	jmp    c0019a78 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019a6e:	66 90                	xchg   ax,ax
c0019a70:	b8 00 00 00 00       	mov    eax,0x0
c0019a75:	8d 76 00             	lea    esi,[esi+0x0]
c0019a78:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a7e:	c3                   	ret    
c0019a7f:	90                   	nop

c0019a80 <FAT::openDir(char const*, void**)>:
c0019a80:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a86:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019a8e:	74 0c                	je     c0019a9c <FAT::openDir(char const*, void**)+0x1c>
c0019a90:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019a98:	75 0e                	jne    c0019aa8 <FAT::openDir(char const*, void**)+0x28>
c0019a9a:	66 90                	xchg   ax,ax
c0019a9c:	b8 04 00 00 00       	mov    eax,0x4
c0019aa1:	e9 82 00 00 00       	jmp    c0019b28 <FAT::openDir(char const*, void**)+0xa8>
c0019aa6:	66 90                	xchg   ax,ax
c0019aa8:	83 ec 08             	sub    esp,0x8
c0019aab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ab2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ab6:	50                   	push   eax
c0019ab7:	e8 84 6b fe ff       	call   c0000640 <strcpy>
c0019abc:	83 c4 10             	add    esp,0x10
c0019abf:	83 ec 08             	sub    esp,0x8
c0019ac2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ac6:	50                   	push   eax
c0019ac7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ace:	e8 f9 fd ff ff       	call   c00198cc <FAT::fixFilepath(char*)>
c0019ad3:	83 c4 10             	add    esp,0x10
c0019ad6:	83 ec 0c             	sub    esp,0xc
c0019ad9:	6a 30                	push   0x30
c0019adb:	e8 d6 df fe ff       	call   c0007ab6 <malloc>
c0019ae0:	83 c4 10             	add    esp,0x10
c0019ae3:	89 c2                	mov    edx,eax
c0019ae5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019aec:	89 10                	mov    DWORD PTR [eax],edx
c0019aee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019af5:	8b 00                	mov    eax,DWORD PTR [eax]
c0019af7:	83 ec 08             	sub    esp,0x8
c0019afa:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019afe:	52                   	push   edx
c0019aff:	50                   	push   eax
c0019b00:	e8 04 ab fe ff       	call   c0004609 <f_opendir>
c0019b05:	83 c4 10             	add    esp,0x10
c0019b08:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b0f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019b17:	74 07                	je     c0019b20 <FAT::openDir(char const*, void**)+0xa0>
c0019b19:	b8 01 00 00 00       	mov    eax,0x1
c0019b1e:	eb 08                	jmp    c0019b28 <FAT::openDir(char const*, void**)+0xa8>
c0019b20:	b8 00 00 00 00       	mov    eax,0x0
c0019b25:	8d 76 00             	lea    esi,[esi+0x0]
c0019b28:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b2e:	c3                   	ret    
c0019b2f:	90                   	nop

c0019b30 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019b30:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019b36:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019b3e:	75 0c                	jne    c0019b4c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019b40:	b8 04 00 00 00       	mov    eax,0x4
c0019b45:	e9 d6 00 00 00       	jmp    c0019c20 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b4a:	66 90                	xchg   ax,ax
c0019b4c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019b54:	75 0a                	jne    c0019b60 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019b56:	b8 04 00 00 00       	mov    eax,0x4
c0019b5b:	e9 c0 00 00 00       	jmp    c0019c20 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b60:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019b68:	75 0a                	jne    c0019b74 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019b6a:	b8 04 00 00 00       	mov    eax,0x4
c0019b6f:	e9 ac 00 00 00       	jmp    c0019c20 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b74:	83 ec 08             	sub    esp,0x8
c0019b77:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019b7e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019b85:	50                   	push   eax
c0019b86:	e8 b5 6a fe ff       	call   c0000640 <strcpy>
c0019b8b:	83 c4 10             	add    esp,0x10
c0019b8e:	83 ec 08             	sub    esp,0x8
c0019b91:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019b98:	50                   	push   eax
c0019b99:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ba0:	e8 27 fd ff ff       	call   c00198cc <FAT::fixFilepath(char*)>
c0019ba5:	83 c4 10             	add    esp,0x10
c0019ba8:	83 ec 08             	sub    esp,0x8
c0019bab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019baf:	50                   	push   eax
c0019bb0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019bb7:	50                   	push   eax
c0019bb8:	e8 cb ab fe ff       	call   c0004788 <f_stat>
c0019bbd:	83 c4 10             	add    esp,0x10
c0019bc0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019bc7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019bce:	85 c0                	test   eax,eax
c0019bd0:	74 0a                	je     c0019bdc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019bd2:	83 f8 04             	cmp    eax,0x4
c0019bd5:	74 39                	je     c0019c10 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019bd7:	eb 3f                	jmp    c0019c18 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bdc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019be0:	0f b6 c0             	movzx  eax,al
c0019be3:	83 e0 10             	and    eax,0x10
c0019be6:	0f 95 c2             	setne  dl
c0019be9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019bf0:	88 10                	mov    BYTE PTR [eax],dl
c0019bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bf6:	ba 00 00 00 00       	mov    edx,0x0
c0019bfb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019c02:	89 01                	mov    DWORD PTR [ecx],eax
c0019c04:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019c07:	b8 00 00 00 00       	mov    eax,0x0
c0019c0c:	eb 12                	jmp    c0019c20 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019c0e:	66 90                	xchg   ax,ax
c0019c10:	b8 02 00 00 00       	mov    eax,0x2
c0019c15:	eb 09                	jmp    c0019c20 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019c17:	90                   	nop
c0019c18:	b8 01 00 00 00       	mov    eax,0x1
c0019c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c20:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019c26:	c3                   	ret    
c0019c27:	90                   	nop

c0019c28 <FAT::unlink(char const*)>:
c0019c28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c2e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c36:	75 08                	jne    c0019c40 <FAT::unlink(char const*)+0x18>
c0019c38:	b8 04 00 00 00       	mov    eax,0x4
c0019c3d:	eb 61                	jmp    c0019ca0 <FAT::unlink(char const*)+0x78>
c0019c3f:	90                   	nop
c0019c40:	83 ec 08             	sub    esp,0x8
c0019c43:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c4a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c4e:	50                   	push   eax
c0019c4f:	e8 ec 69 fe ff       	call   c0000640 <strcpy>
c0019c54:	83 c4 10             	add    esp,0x10
c0019c57:	83 ec 08             	sub    esp,0x8
c0019c5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c5e:	50                   	push   eax
c0019c5f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c66:	e8 61 fc ff ff       	call   c00198cc <FAT::fixFilepath(char*)>
c0019c6b:	83 c4 10             	add    esp,0x10
c0019c6e:	83 ec 0c             	sub    esp,0xc
c0019c71:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c75:	50                   	push   eax
c0019c76:	e8 7f ad fe ff       	call   c00049fa <f_unlink>
c0019c7b:	83 c4 10             	add    esp,0x10
c0019c7e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019c85:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019c8c:	85 c0                	test   eax,eax
c0019c8e:	75 08                	jne    c0019c98 <FAT::unlink(char const*)+0x70>
c0019c90:	b8 00 00 00 00       	mov    eax,0x0
c0019c95:	eb 09                	jmp    c0019ca0 <FAT::unlink(char const*)+0x78>
c0019c97:	90                   	nop
c0019c98:	b8 01 00 00 00       	mov    eax,0x1
c0019c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ca0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ca6:	c3                   	ret    
c0019ca7:	90                   	nop

c0019ca8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ca8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019cae:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019cb5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019cbc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019cc0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019cc4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019ccc:	75 0a                	jne    c0019cd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019cce:	b8 04 00 00 00       	mov    eax,0x4
c0019cd3:	e9 7c 01 00 00       	jmp    c0019e54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019cd8:	83 ec 08             	sub    esp,0x8
c0019cdb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019ce2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ce6:	50                   	push   eax
c0019ce7:	e8 54 69 fe ff       	call   c0000640 <strcpy>
c0019cec:	83 c4 10             	add    esp,0x10
c0019cef:	83 ec 08             	sub    esp,0x8
c0019cf2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019cf6:	50                   	push   eax
c0019cf7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019cfe:	e8 c9 fb ff ff       	call   c00198cc <FAT::fixFilepath(char*)>
c0019d03:	83 c4 10             	add    esp,0x10
c0019d06:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019d0e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019d16:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d1b:	83 e0 01             	and    eax,0x1
c0019d1e:	74 14                	je     c0019d34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019d20:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d27:	83 c8 01             	or     eax,0x1
c0019d2a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019d31:	8d 76 00             	lea    esi,[esi+0x0]
c0019d34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d39:	83 e0 02             	and    eax,0x2
c0019d3c:	74 12                	je     c0019d50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019d3e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d45:	83 c8 20             	or     eax,0x20
c0019d48:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019d4f:	90                   	nop
c0019d50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d55:	83 e0 04             	and    eax,0x4
c0019d58:	74 12                	je     c0019d6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019d5a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d61:	83 c8 04             	or     eax,0x4
c0019d64:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019d6b:	90                   	nop
c0019d6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d71:	83 e0 08             	and    eax,0x8
c0019d74:	74 12                	je     c0019d88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019d76:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d7d:	83 c8 02             	or     eax,0x2
c0019d80:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019d87:	90                   	nop
c0019d88:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d8d:	83 e0 01             	and    eax,0x1
c0019d90:	74 12                	je     c0019da4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019d92:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d99:	83 c8 01             	or     eax,0x1
c0019d9c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019da3:	90                   	nop
c0019da4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019da9:	83 e0 02             	and    eax,0x2
c0019dac:	74 12                	je     c0019dc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019dae:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019db5:	83 c8 20             	or     eax,0x20
c0019db8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019dbf:	90                   	nop
c0019dc0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019dc5:	83 e0 04             	and    eax,0x4
c0019dc8:	74 12                	je     c0019ddc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019dca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019dd1:	83 c8 04             	or     eax,0x4
c0019dd4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019ddb:	90                   	nop
c0019ddc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019de1:	83 e0 08             	and    eax,0x8
c0019de4:	74 12                	je     c0019df8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019de6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019ded:	83 c8 02             	or     eax,0x2
c0019df0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019df7:	90                   	nop
c0019df8:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019dff:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019e06:	09 d0                	or     eax,edx
c0019e08:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019e0f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019e17:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019e1f:	83 ec 04             	sub    esp,0x4
c0019e22:	52                   	push   edx
c0019e23:	50                   	push   eax
c0019e24:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019e28:	50                   	push   eax
c0019e29:	e8 41 b0 fe ff       	call   c0004e6f <f_chmod>
c0019e2e:	83 c4 10             	add    esp,0x10
c0019e31:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019e38:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019e3f:	85 c0                	test   eax,eax
c0019e41:	75 09                	jne    c0019e4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019e43:	b8 00 00 00 00       	mov    eax,0x0
c0019e48:	eb 0a                	jmp    c0019e54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019e4a:	66 90                	xchg   ax,ax
c0019e4c:	b8 01 00 00 00       	mov    eax,0x1
c0019e51:	8d 76 00             	lea    esi,[esi+0x0]
c0019e54:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019e5a:	c3                   	ret    
c0019e5b:	90                   	nop

c0019e5c <FAT::rename(char const*, char const*)>:
c0019e5c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019e62:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019e6a:	74 0c                	je     c0019e78 <FAT::rename(char const*, char const*)+0x1c>
c0019e6c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019e74:	75 0e                	jne    c0019e84 <FAT::rename(char const*, char const*)+0x28>
c0019e76:	66 90                	xchg   ax,ax
c0019e78:	b8 04 00 00 00       	mov    eax,0x4
c0019e7d:	e9 9e 00 00 00       	jmp    c0019f20 <FAT::rename(char const*, char const*)+0xc4>
c0019e82:	66 90                	xchg   ax,ax
c0019e84:	83 ec 08             	sub    esp,0x8
c0019e87:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e8e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019e95:	50                   	push   eax
c0019e96:	e8 a5 67 fe ff       	call   c0000640 <strcpy>
c0019e9b:	83 c4 10             	add    esp,0x10
c0019e9e:	83 ec 08             	sub    esp,0x8
c0019ea1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019ea8:	50                   	push   eax
c0019ea9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019eb0:	e8 17 fa ff ff       	call   c00198cc <FAT::fixFilepath(char*)>
c0019eb5:	83 c4 10             	add    esp,0x10
c0019eb8:	83 ec 08             	sub    esp,0x8
c0019ebb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019ec2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ec6:	50                   	push   eax
c0019ec7:	e8 74 67 fe ff       	call   c0000640 <strcpy>
c0019ecc:	83 c4 10             	add    esp,0x10
c0019ecf:	83 ec 08             	sub    esp,0x8
c0019ed2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ed6:	50                   	push   eax
c0019ed7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019ede:	e8 e9 f9 ff ff       	call   c00198cc <FAT::fixFilepath(char*)>
c0019ee3:	83 c4 10             	add    esp,0x10
c0019ee6:	83 ec 08             	sub    esp,0x8
c0019ee9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019eed:	50                   	push   eax
c0019eee:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019ef5:	50                   	push   eax
c0019ef6:	e8 bc ad fe ff       	call   c0004cb7 <f_rename>
c0019efb:	83 c4 10             	add    esp,0x10
c0019efe:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019f05:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019f0c:	85 c0                	test   eax,eax
c0019f0e:	75 08                	jne    c0019f18 <FAT::rename(char const*, char const*)+0xbc>
c0019f10:	b8 00 00 00 00       	mov    eax,0x0
c0019f15:	eb 09                	jmp    c0019f20 <FAT::rename(char const*, char const*)+0xc4>
c0019f17:	90                   	nop
c0019f18:	b8 01 00 00 00       	mov    eax,0x1
c0019f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f20:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019f26:	c3                   	ret    
c0019f27:	90                   	nop

c0019f28 <FAT::mkdir(char const*)>:
c0019f28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f2e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f36:	75 08                	jne    c0019f40 <FAT::mkdir(char const*)+0x18>
c0019f38:	b8 04 00 00 00       	mov    eax,0x4
c0019f3d:	eb 61                	jmp    c0019fa0 <FAT::mkdir(char const*)+0x78>
c0019f3f:	90                   	nop
c0019f40:	83 ec 08             	sub    esp,0x8
c0019f43:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f4a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f4e:	50                   	push   eax
c0019f4f:	e8 ec 66 fe ff       	call   c0000640 <strcpy>
c0019f54:	83 c4 10             	add    esp,0x10
c0019f57:	83 ec 08             	sub    esp,0x8
c0019f5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f5e:	50                   	push   eax
c0019f5f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f66:	e8 61 f9 ff ff       	call   c00198cc <FAT::fixFilepath(char*)>
c0019f6b:	83 c4 10             	add    esp,0x10
c0019f6e:	83 ec 0c             	sub    esp,0xc
c0019f71:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f75:	50                   	push   eax
c0019f76:	e8 a1 ab fe ff       	call   c0004b1c <f_mkdir>
c0019f7b:	83 c4 10             	add    esp,0x10
c0019f7e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f85:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019f8c:	85 c0                	test   eax,eax
c0019f8e:	75 08                	jne    c0019f98 <FAT::mkdir(char const*)+0x70>
c0019f90:	b8 00 00 00 00       	mov    eax,0x0
c0019f95:	eb 09                	jmp    c0019fa0 <FAT::mkdir(char const*)+0x78>
c0019f97:	90                   	nop
c0019f98:	b8 01 00 00 00       	mov    eax,0x1
c0019f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019fa0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019fa6:	c3                   	ret    
c0019fa7:	90                   	nop

c0019fa8 <FAT::exists(char const*)>:
c0019fa8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019fae:	83 ec 08             	sub    esp,0x8
c0019fb1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fb8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019fbc:	50                   	push   eax
c0019fbd:	e8 7e 66 fe ff       	call   c0000640 <strcpy>
c0019fc2:	83 c4 10             	add    esp,0x10
c0019fc5:	83 ec 08             	sub    esp,0x8
c0019fc8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019fcc:	50                   	push   eax
c0019fcd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fd4:	e8 f3 f8 ff ff       	call   c00198cc <FAT::fixFilepath(char*)>
c0019fd9:	83 c4 10             	add    esp,0x10
c0019fdc:	83 ec 08             	sub    esp,0x8
c0019fdf:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019fe6:	50                   	push   eax
c0019fe7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019feb:	50                   	push   eax
c0019fec:	e8 97 a7 fe ff       	call   c0004788 <f_stat>
c0019ff1:	83 c4 10             	add    esp,0x10
c0019ff4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019ffb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a002:	85 c0                	test   eax,eax
c001a004:	75 06                	jne    c001a00c <FAT::exists(char const*)+0x64>
c001a006:	b0 01                	mov    al,0x1
c001a008:	eb 06                	jmp    c001a010 <FAT::exists(char const*)+0x68>
c001a00a:	66 90                	xchg   ax,ax
c001a00c:	b0 00                	mov    al,0x0
c001a00e:	66 90                	xchg   ax,ax
c001a010:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a016:	c3                   	ret    
c001a017:	90                   	nop

c001a018 <isoReadDiscSectorHelper>:
c001a018:	83 ec 2c             	sub    esp,0x2c
c001a01b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a01f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a023:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a028:	83 e8 41             	sub    eax,0x41
c001a02b:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c001a032:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a036:	ba 00 00 00 00       	mov    edx,0x0
c001a03b:	83 ec 0c             	sub    esp,0xc
c001a03e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a042:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a046:	52                   	push   edx
c001a047:	50                   	push   eax
c001a048:	51                   	push   ecx
c001a049:	e8 ba 3a ff ff       	call   c000db08 <LogicalDisk::read(unsigned long long, int, void*)>
c001a04e:	83 c4 20             	add    esp,0x20
c001a051:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a055:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a05a:	74 0c                	je     c001a068 <isoReadDiscSectorHelper+0x50>
c001a05c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a060:	c1 e0 0b             	shl    eax,0xb
c001a063:	eb 0b                	jmp    c001a070 <isoReadDiscSectorHelper+0x58>
c001a065:	8d 76 00             	lea    esi,[esi+0x0]
c001a068:	b8 00 00 00 00       	mov    eax,0x0
c001a06d:	8d 76 00             	lea    esi,[esi+0x0]
c001a070:	83 c4 2c             	add    esp,0x2c
c001a073:	c3                   	ret    

c001a074 <iso_kprintf>:
c001a074:	83 ec 0c             	sub    esp,0xc
c001a077:	83 ec 08             	sub    esp,0x8
c001a07a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a07e:	68 7a 27 02 c0       	push   0xc002277a
c001a083:	e8 bd 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a088:	83 c4 10             	add    esp,0x10
c001a08b:	90                   	nop
c001a08c:	83 c4 0c             	add    esp,0xc
c001a08f:	c3                   	ret    

c001a090 <iso_kprintfd>:
c001a090:	83 ec 0c             	sub    esp,0xc
c001a093:	83 ec 08             	sub    esp,0x8
c001a096:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a09a:	68 5a 0f 02 c0       	push   0xc0020f5a
c001a09f:	e8 a1 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a0a4:	83 c4 10             	add    esp,0x10
c001a0a7:	90                   	nop
c001a0a8:	83 c4 0c             	add    esp,0xc
c001a0ab:	c3                   	ret    

c001a0ac <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a0ac:	b8 08 00 00 00       	mov    eax,0x8
c001a0b1:	c3                   	ret    

c001a0b2 <ISO9660::truncate(void*, unsigned long long)>:
c001a0b2:	b8 01 00 00 00       	mov    eax,0x1
c001a0b7:	c3                   	ret    

c001a0b8 <ISO9660::getName()>:
c001a0b8:	b8 30 2a 02 c0       	mov    eax,0xc0022a30
c001a0bd:	c3                   	ret    

c001a0be <ISO9660::closeDir(void*)>:
c001a0be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0c2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0c4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a0c7:	90                   	nop

c001a0c8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a0c8:	b8 01 00 00 00       	mov    eax,0x1
c001a0cd:	c3                   	ret    

c001a0ce <ISO9660::unlink(char const*)>:
c001a0ce:	b8 01 00 00 00       	mov    eax,0x1
c001a0d3:	c3                   	ret    

c001a0d4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a0d4:	b8 03 00 00 00       	mov    eax,0x3
c001a0d9:	c3                   	ret    

c001a0da <ISO9660::rename(char const*, char const*)>:
c001a0da:	b8 01 00 00 00       	mov    eax,0x1
c001a0df:	c3                   	ret    

c001a0e0 <ISO9660::mkdir(char const*)>:
c001a0e0:	b8 01 00 00 00       	mov    eax,0x1
c001a0e5:	c3                   	ret    

c001a0e6 <ISO9660::~ISO9660()>:
c001a0e6:	83 ec 0c             	sub    esp,0xc
c001a0e9:	ba 70 2b 02 c0       	mov    edx,0xc0022b70
c001a0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0f2:	89 10                	mov    DWORD PTR [eax],edx
c001a0f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0f8:	83 ec 0c             	sub    esp,0xc
c001a0fb:	50                   	push   eax
c001a0fc:	e8 5f 14 ff ff       	call   c000b560 <Filesystem::~Filesystem()>
c001a101:	83 c4 10             	add    esp,0x10
c001a104:	90                   	nop
c001a105:	83 c4 0c             	add    esp,0xc
c001a108:	c3                   	ret    
c001a109:	90                   	nop

c001a10a <ISO9660::~ISO9660()>:
c001a10a:	83 ec 0c             	sub    esp,0xc
c001a10d:	83 ec 0c             	sub    esp,0xc
c001a110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a114:	e8 cd ff ff ff       	call   c001a0e6 <ISO9660::~ISO9660()>
c001a119:	83 c4 10             	add    esp,0x10
c001a11c:	83 ec 08             	sub    esp,0x8
c001a11f:	6a 08                	push   0x8
c001a121:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a125:	e8 ee 06 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a12a:	83 c4 10             	add    esp,0x10
c001a12d:	83 c4 0c             	add    esp,0xc
c001a130:	c3                   	ret    
c001a131:	90                   	nop

c001a132 <ISO9660::exists(char const*)>:
c001a132:	83 ec 18             	sub    esp,0x18
c001a135:	68 4b 2a 02 c0       	push   0xc0022a4b
c001a13a:	e8 12 72 ff ff       	call   c0011351 <KePanic(char const*)>
c001a13f:	31 c0                	xor    eax,eax
c001a141:	83 c4 1c             	add    esp,0x1c
c001a144:	c3                   	ret    
c001a145:	90                   	nop

c001a146 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a146:	56                   	push   esi
c001a147:	53                   	push   ebx
c001a148:	53                   	push   ebx
c001a149:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a14d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a151:	85 db                	test   ebx,ebx
c001a153:	0f 84 ca 00 00 00    	je     c001a223 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a159:	85 f6                	test   esi,esi
c001a15b:	0f 84 c2 00 00 00    	je     c001a223 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a161:	b8 03 00 00 00       	mov    eax,0x3
c001a166:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a16b:	0f 85 b7 00 00 00    	jne    c001a228 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a171:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a173:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a17a:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a180:	74 1b                	je     c001a19d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a182:	85 c0                	test   eax,eax
c001a184:	74 10                	je     c001a196 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a186:	83 ec 0c             	sub    esp,0xc
c001a189:	68 69 2a 02 c0       	push   0xc0022a69
c001a18e:	e8 be 71 ff ff       	call   c0011351 <KePanic(char const*)>
c001a193:	83 c4 10             	add    esp,0x10
c001a196:	8a 03                	mov    al,BYTE PTR [ebx]
c001a198:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a19d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1a0:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a1a7:	85 c0                	test   eax,eax
c001a1a9:	74 09                	je     c001a1b4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a1ab:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a1b2:	74 48                	je     c001a1fc <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a1b4:	83 ec 0c             	sub    esp,0xc
c001a1b7:	68 79 2a 02 c0       	push   0xc0022a79
c001a1bc:	e8 84 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a1c1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1c4:	83 c4 10             	add    esp,0x10
c001a1c7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a1ce:	85 c0                	test   eax,eax
c001a1d0:	74 17                	je     c001a1e9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a1d2:	83 ec 0c             	sub    esp,0xc
c001a1d5:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a1dc:	68 99 2a 02 c0       	push   0xc0022a99
c001a1e1:	e8 5f 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a1e6:	83 c4 10             	add    esp,0x10
c001a1e9:	83 ec 0c             	sub    esp,0xc
c001a1ec:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a1f3:	50                   	push   eax
c001a1f4:	e8 4d c8 fe ff       	call   c0006a46 <init_percd>
c001a1f9:	83 c4 10             	add    esp,0x10
c001a1fc:	83 c3 03             	add    ebx,0x3
c001a1ff:	51                   	push   ecx
c001a200:	51                   	push   ecx
c001a201:	6a 00                	push   0x0
c001a203:	53                   	push   ebx
c001a204:	e8 04 c3 fe ff       	call   c000650d <iso_open>
c001a209:	83 c4 10             	add    esp,0x10
c001a20c:	89 c2                	mov    edx,eax
c001a20e:	b8 01 00 00 00       	mov    eax,0x1
c001a213:	83 fa ff             	cmp    edx,0xffffffff
c001a216:	74 10                	je     c001a228 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a218:	83 c2 32             	add    edx,0x32
c001a21b:	31 c0                	xor    eax,eax
c001a21d:	01 d2                	add    edx,edx
c001a21f:	89 16                	mov    DWORD PTR [esi],edx
c001a221:	eb 05                	jmp    c001a228 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a223:	b8 04 00 00 00       	mov    eax,0x4
c001a228:	5a                   	pop    edx
c001a229:	5b                   	pop    ebx
c001a22a:	5e                   	pop    esi
c001a22b:	c3                   	ret    

c001a22c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a22c:	53                   	push   ebx
c001a22d:	83 ec 08             	sub    esp,0x8
c001a230:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a234:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a238:	85 c0                	test   eax,eax
c001a23a:	74 2d                	je     c001a269 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a23c:	85 db                	test   ebx,ebx
c001a23e:	74 29                	je     c001a269 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a240:	b9 02 00 00 00       	mov    ecx,0x2
c001a245:	52                   	push   edx
c001a246:	99                   	cdq    
c001a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a24b:	f7 f9                	idiv   ecx
c001a24d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a251:	83 e8 32             	sub    eax,0x32
c001a254:	50                   	push   eax
c001a255:	e8 5b c3 fe ff       	call   c00065b5 <iso_read>
c001a25a:	83 c4 10             	add    esp,0x10
c001a25d:	89 03                	mov    DWORD PTR [ebx],eax
c001a25f:	09 d0                	or     eax,edx
c001a261:	0f 94 c0             	sete   al
c001a264:	0f b6 c0             	movzx  eax,al
c001a267:	eb 05                	jmp    c001a26e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a269:	b8 04 00 00 00       	mov    eax,0x4
c001a26e:	83 c4 08             	add    esp,0x8
c001a271:	5b                   	pop    ebx
c001a272:	c3                   	ret    
c001a273:	90                   	nop

c001a274 <ISO9660::seek(void*, unsigned long long)>:
c001a274:	57                   	push   edi
c001a275:	56                   	push   esi
c001a276:	b8 04 00 00 00       	mov    eax,0x4
c001a27b:	51                   	push   ecx
c001a27c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a280:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a284:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a288:	85 d2                	test   edx,edx
c001a28a:	74 26                	je     c001a2b2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a28c:	6a 00                	push   0x0
c001a28e:	b9 02 00 00 00       	mov    ecx,0x2
c001a293:	57                   	push   edi
c001a294:	89 d0                	mov    eax,edx
c001a296:	56                   	push   esi
c001a297:	99                   	cdq    
c001a298:	f7 f9                	idiv   ecx
c001a29a:	83 e8 32             	sub    eax,0x32
c001a29d:	50                   	push   eax
c001a29e:	e8 28 c4 fe ff       	call   c00066cb <iso_seek>
c001a2a3:	83 c4 10             	add    esp,0x10
c001a2a6:	31 f0                	xor    eax,esi
c001a2a8:	31 fa                	xor    edx,edi
c001a2aa:	09 d0                	or     eax,edx
c001a2ac:	0f 95 c0             	setne  al
c001a2af:	0f b6 c0             	movzx  eax,al
c001a2b2:	5a                   	pop    edx
c001a2b3:	5e                   	pop    esi
c001a2b4:	5f                   	pop    edi
c001a2b5:	c3                   	ret    

c001a2b6 <ISO9660::tell(void*, unsigned long long*)>:
c001a2b6:	53                   	push   ebx
c001a2b7:	83 ec 08             	sub    esp,0x8
c001a2ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a2c2:	85 c0                	test   eax,eax
c001a2c4:	74 24                	je     c001a2ea <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a2c6:	85 db                	test   ebx,ebx
c001a2c8:	74 20                	je     c001a2ea <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a2ca:	83 ec 0c             	sub    esp,0xc
c001a2cd:	b9 02 00 00 00       	mov    ecx,0x2
c001a2d2:	99                   	cdq    
c001a2d3:	f7 f9                	idiv   ecx
c001a2d5:	83 e8 32             	sub    eax,0x32
c001a2d8:	50                   	push   eax
c001a2d9:	e8 71 c4 fe ff       	call   c000674f <iso_tell>
c001a2de:	83 c4 10             	add    esp,0x10
c001a2e1:	89 03                	mov    DWORD PTR [ebx],eax
c001a2e3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a2e6:	31 c0                	xor    eax,eax
c001a2e8:	eb 05                	jmp    c001a2ef <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a2ea:	b8 04 00 00 00       	mov    eax,0x4
c001a2ef:	83 c4 08             	add    esp,0x8
c001a2f2:	5b                   	pop    ebx
c001a2f3:	c3                   	ret    

c001a2f4 <ISO9660::stat(void*, unsigned long long*)>:
c001a2f4:	53                   	push   ebx
c001a2f5:	83 ec 14             	sub    esp,0x14
c001a2f8:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a2fc:	68 bd 2a 02 c0       	push   0xc0022abd
c001a301:	e8 3f 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a306:	83 c4 10             	add    esp,0x10
c001a309:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a30e:	74 2c                	je     c001a33c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a310:	85 db                	test   ebx,ebx
c001a312:	74 28                	je     c001a33c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a314:	83 ec 0c             	sub    esp,0xc
c001a317:	b9 02 00 00 00       	mov    ecx,0x2
c001a31c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a320:	99                   	cdq    
c001a321:	f7 f9                	idiv   ecx
c001a323:	83 e8 32             	sub    eax,0x32
c001a326:	50                   	push   eax
c001a327:	e8 54 c4 fe ff       	call   c0006780 <iso_total>
c001a32c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a333:	89 03                	mov    DWORD PTR [ebx],eax
c001a335:	83 c4 10             	add    esp,0x10
c001a338:	31 c0                	xor    eax,eax
c001a33a:	eb 05                	jmp    c001a341 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a33c:	b8 04 00 00 00       	mov    eax,0x4
c001a341:	83 c4 08             	add    esp,0x8
c001a344:	5b                   	pop    ebx
c001a345:	c3                   	ret    

c001a346 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a346:	55                   	push   ebp
c001a347:	57                   	push   edi
c001a348:	56                   	push   esi
c001a349:	53                   	push   ebx
c001a34a:	83 ec 18             	sub    esp,0x18
c001a34d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a351:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a355:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a359:	68 c5 2a 02 c0       	push   0xc0022ac5
c001a35e:	e8 e2 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a363:	83 c4 10             	add    esp,0x10
c001a366:	85 ff                	test   edi,edi
c001a368:	0f 94 c0             	sete   al
c001a36b:	85 f6                	test   esi,esi
c001a36d:	0f 94 c2             	sete   dl
c001a370:	09 d0                	or     eax,edx
c001a372:	a8 01                	test   al,0x1
c001a374:	0f 85 dd 00 00 00    	jne    c001a457 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a37a:	85 db                	test   ebx,ebx
c001a37c:	0f 84 d5 00 00 00    	je     c001a457 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a382:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a385:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a38b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a392:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a399:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a39b:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a3a1:	74 1b                	je     c001a3be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a3a3:	85 c0                	test   eax,eax
c001a3a5:	74 10                	je     c001a3b7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a3a7:	83 ec 0c             	sub    esp,0xc
c001a3aa:	68 69 2a 02 c0       	push   0xc0022a69
c001a3af:	e8 9d 6f ff ff       	call   c0011351 <KePanic(char const*)>
c001a3b4:	83 c4 10             	add    esp,0x10
c001a3b7:	8a 03                	mov    al,BYTE PTR [ebx]
c001a3b9:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a3be:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a3c1:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a3c8:	85 c0                	test   eax,eax
c001a3ca:	74 09                	je     c001a3d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a3cc:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a3d3:	74 51                	je     c001a426 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a3d5:	83 ec 0c             	sub    esp,0xc
c001a3d8:	68 cd 2a 02 c0       	push   0xc0022acd
c001a3dd:	e8 63 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a3e2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a3e5:	83 c4 10             	add    esp,0x10
c001a3e8:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a3f0:	74 21                	je     c001a413 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a3f2:	83 ec 0c             	sub    esp,0xc
c001a3f5:	68 ed 2a 02 c0       	push   0xc0022aed
c001a3fa:	e8 46 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a3ff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a402:	83 c4 10             	add    esp,0x10
c001a405:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a40c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a413:	83 ec 0c             	sub    esp,0xc
c001a416:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a41d:	50                   	push   eax
c001a41e:	e8 23 c6 fe ff       	call   c0006a46 <init_percd>
c001a423:	83 c4 10             	add    esp,0x10
c001a426:	83 c3 03             	add    ebx,0x3
c001a429:	52                   	push   edx
c001a42a:	52                   	push   edx
c001a42b:	6a 00                	push   0x0
c001a42d:	53                   	push   ebx
c001a42e:	e8 da c0 fe ff       	call   c000650d <iso_open>
c001a433:	83 c4 10             	add    esp,0x10
c001a436:	89 c5                	mov    ebp,eax
c001a438:	83 f8 ff             	cmp    eax,0xffffffff
c001a43b:	75 21                	jne    c001a45e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a43d:	50                   	push   eax
c001a43e:	50                   	push   eax
c001a43f:	6a 01                	push   0x1
c001a441:	53                   	push   ebx
c001a442:	e8 c6 c0 fe ff       	call   c000650d <iso_open>
c001a447:	83 c4 10             	add    esp,0x10
c001a44a:	ba 02 00 00 00       	mov    edx,0x2
c001a44f:	40                   	inc    eax
c001a450:	74 2b                	je     c001a47d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a452:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a455:	eb 24                	jmp    c001a47b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a457:	ba 04 00 00 00       	mov    edx,0x4
c001a45c:	eb 1f                	jmp    c001a47d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a45e:	83 ec 0c             	sub    esp,0xc
c001a461:	50                   	push   eax
c001a462:	e8 19 c3 fe ff       	call   c0006780 <iso_total>
c001a467:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a46e:	89 07                	mov    DWORD PTR [edi],eax
c001a470:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a473:	e8 1f c1 fe ff       	call   c0006597 <iso_close>
c001a478:	83 c4 10             	add    esp,0x10
c001a47b:	31 d2                	xor    edx,edx
c001a47d:	83 c4 0c             	add    esp,0xc
c001a480:	89 d0                	mov    eax,edx
c001a482:	5b                   	pop    ebx
c001a483:	5e                   	pop    esi
c001a484:	5f                   	pop    edi
c001a485:	5d                   	pop    ebp
c001a486:	c3                   	ret    
c001a487:	90                   	nop

c001a488 <ISO9660::close(void*)>:
c001a488:	83 ec 0c             	sub    esp,0xc
c001a48b:	b8 04 00 00 00       	mov    eax,0x4
c001a490:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a494:	85 d2                	test   edx,edx
c001a496:	74 1b                	je     c001a4b3 <ISO9660::close(void*)+0x2b>
c001a498:	83 ec 0c             	sub    esp,0xc
c001a49b:	b9 02 00 00 00       	mov    ecx,0x2
c001a4a0:	89 d0                	mov    eax,edx
c001a4a2:	99                   	cdq    
c001a4a3:	f7 f9                	idiv   ecx
c001a4a5:	83 e8 32             	sub    eax,0x32
c001a4a8:	50                   	push   eax
c001a4a9:	e8 e9 c0 fe ff       	call   c0006597 <iso_close>
c001a4ae:	83 c4 10             	add    esp,0x10
c001a4b1:	31 c0                	xor    eax,eax
c001a4b3:	83 c4 0c             	add    esp,0xc
c001a4b6:	c3                   	ret    
c001a4b7:	90                   	nop

c001a4b8 <ISO9660::openDir(char const*, void**)>:
c001a4b8:	56                   	push   esi
c001a4b9:	53                   	push   ebx
c001a4ba:	50                   	push   eax
c001a4bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a4bf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a4c3:	85 db                	test   ebx,ebx
c001a4c5:	0f 84 bd 00 00 00    	je     c001a588 <ISO9660::openDir(char const*, void**)+0xd0>
c001a4cb:	85 f6                	test   esi,esi
c001a4cd:	0f 84 b5 00 00 00    	je     c001a588 <ISO9660::openDir(char const*, void**)+0xd0>
c001a4d3:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a4d5:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a4dc:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a4e2:	74 1b                	je     c001a4ff <ISO9660::openDir(char const*, void**)+0x47>
c001a4e4:	85 c0                	test   eax,eax
c001a4e6:	74 10                	je     c001a4f8 <ISO9660::openDir(char const*, void**)+0x40>
c001a4e8:	83 ec 0c             	sub    esp,0xc
c001a4eb:	68 69 2a 02 c0       	push   0xc0022a69
c001a4f0:	e8 5c 6e ff ff       	call   c0011351 <KePanic(char const*)>
c001a4f5:	83 c4 10             	add    esp,0x10
c001a4f8:	8a 03                	mov    al,BYTE PTR [ebx]
c001a4fa:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a4ff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a502:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a509:	85 c0                	test   eax,eax
c001a50b:	74 10                	je     c001a51d <ISO9660::openDir(char const*, void**)+0x65>
c001a50d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a514:	74 1a                	je     c001a530 <ISO9660::openDir(char const*, void**)+0x78>
c001a516:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a51d:	83 ec 0c             	sub    esp,0xc
c001a520:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a527:	50                   	push   eax
c001a528:	e8 19 c5 fe ff       	call   c0006a46 <init_percd>
c001a52d:	83 c4 10             	add    esp,0x10
c001a530:	83 c3 03             	add    ebx,0x3
c001a533:	50                   	push   eax
c001a534:	50                   	push   eax
c001a535:	6a 01                	push   0x1
c001a537:	53                   	push   ebx
c001a538:	e8 d0 bf fe ff       	call   c000650d <iso_open>
c001a53d:	83 c4 10             	add    esp,0x10
c001a540:	89 c3                	mov    ebx,eax
c001a542:	83 f8 ff             	cmp    eax,0xffffffff
c001a545:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a54a:	75 1c                	jne    c001a568 <ISO9660::openDir(char const*, void**)+0xb0>
c001a54c:	53                   	push   ebx
c001a54d:	53                   	push   ebx
c001a54e:	68 11 2b 02 c0       	push   0xc0022b11
c001a553:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a559:	e8 48 e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a55e:	83 c4 10             	add    esp,0x10
c001a561:	b8 01 00 00 00       	mov    eax,0x1
c001a566:	eb 25                	jmp    c001a58d <ISO9660::openDir(char const*, void**)+0xd5>
c001a568:	01 db                	add    ebx,ebx
c001a56a:	51                   	push   ecx
c001a56b:	83 c3 65             	add    ebx,0x65
c001a56e:	51                   	push   ecx
c001a56f:	68 24 2b 02 c0       	push   0xc0022b24
c001a574:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a57a:	e8 27 e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a57f:	89 1e                	mov    DWORD PTR [esi],ebx
c001a581:	83 c4 10             	add    esp,0x10
c001a584:	31 c0                	xor    eax,eax
c001a586:	eb 05                	jmp    c001a58d <ISO9660::openDir(char const*, void**)+0xd5>
c001a588:	b8 04 00 00 00       	mov    eax,0x4
c001a58d:	5a                   	pop    edx
c001a58e:	5b                   	pop    ebx
c001a58f:	5e                   	pop    esi
c001a590:	c3                   	ret    
c001a591:	90                   	nop

c001a592 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a592:	55                   	push   ebp
c001a593:	57                   	push   edi
c001a594:	56                   	push   esi
c001a595:	53                   	push   ebx
c001a596:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a59c:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a5a3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a5aa:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a5b2:	0f 84 e7 00 00 00    	je     c001a69f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a5b8:	85 db                	test   ebx,ebx
c001a5ba:	0f 84 df 00 00 00    	je     c001a69f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a5c0:	83 ec 0c             	sub    esp,0xc
c001a5c3:	68 37 2b 02 c0       	push   0xc0022b37
c001a5c8:	e8 78 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a5cd:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a5d4:	b9 02 00 00 00       	mov    ecx,0x2
c001a5d9:	99                   	cdq    
c001a5da:	f7 f9                	idiv   ecx
c001a5dc:	83 e8 32             	sub    eax,0x32
c001a5df:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5e2:	e8 eb c1 fe ff       	call   c00067d2 <iso_readdir>
c001a5e7:	83 c4 10             	add    esp,0x10
c001a5ea:	89 c6                	mov    esi,eax
c001a5ec:	85 c0                	test   eax,eax
c001a5ee:	75 37                	jne    c001a627 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a5f0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a5f5:	56                   	push   esi
c001a5f6:	56                   	push   esi
c001a5f7:	68 42 2b 02 c0       	push   0xc0022b42
c001a5fc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a602:	e8 9f e4 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a607:	83 c4 0c             	add    esp,0xc
c001a60a:	68 10 01 00 00       	push   0x110
c001a60f:	6a 00                	push   0x0
c001a611:	57                   	push   edi
c001a612:	e8 d9 5e fe ff       	call   c00004f0 <memset>
c001a617:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a61d:	83 c4 10             	add    esp,0x10
c001a620:	b8 01 00 00 00       	mov    eax,0x1
c001a625:	eb 7d                	jmp    c001a6a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a627:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a62d:	8d 68 08             	lea    ebp,[eax+0x8]
c001a630:	83 ec 0c             	sub    esp,0xc
c001a633:	55                   	push   ebp
c001a634:	e8 37 5f fe ff       	call   c0000570 <strlen>
c001a639:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a641:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a645:	83 c4 10             	add    esp,0x10
c001a648:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a64c:	75 0a                	jne    c001a658 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a64e:	b8 02 00 00 00       	mov    eax,0x2
c001a653:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a656:	74 05                	je     c001a65d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a658:	b8 01 00 00 00       	mov    eax,0x1
c001a65d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a661:	50                   	push   eax
c001a662:	50                   	push   eax
c001a663:	55                   	push   ebp
c001a664:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a668:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a66c:	50                   	push   eax
c001a66d:	e8 ce 5f fe ff       	call   c0000640 <strcpy>
c001a672:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a679:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a67b:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a681:	5a                   	pop    edx
c001a682:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a687:	59                   	pop    ecx
c001a688:	68 55 2b 02 c0       	push   0xc0022b55
c001a68d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a693:	e8 0e e4 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a698:	83 c4 10             	add    esp,0x10
c001a69b:	31 c0                	xor    eax,eax
c001a69d:	eb 05                	jmp    c001a6a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a69f:	b8 04 00 00 00       	mov    eax,0x4
c001a6a4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a6aa:	5b                   	pop    ebx
c001a6ab:	5e                   	pop    esi
c001a6ac:	5f                   	pop    edi
c001a6ad:	5d                   	pop    ebp
c001a6ae:	c3                   	ret    

c001a6af <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a6af:	57                   	push   edi
c001a6b0:	56                   	push   esi
c001a6b1:	53                   	push   ebx
c001a6b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a6b6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a6ba:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a6be:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a6c4:	0f be cb             	movsx  ecx,bl
c001a6c7:	75 0b                	jne    c001a6d4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a6c9:	0f be 05 80 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023980
c001a6d0:	39 c8                	cmp    eax,ecx
c001a6d2:	74 47                	je     c001a71b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a6d4:	83 ec 0c             	sub    esp,0xc
c001a6d7:	31 d2                	xor    edx,edx
c001a6d9:	68 a0 98 02 c0       	push   0xc00298a0
c001a6de:	6a 01                	push   0x1
c001a6e0:	52                   	push   edx
c001a6e1:	56                   	push   esi
c001a6e2:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a6e9:	e8 1a 34 ff ff       	call   c000db08 <LogicalDisk::read(unsigned long long, int, void*)>
c001a6ee:	83 c4 20             	add    esp,0x20
c001a6f1:	85 c0                	test   eax,eax
c001a6f3:	75 0e                	jne    c001a703 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a6f5:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a6fb:	88 1d 80 39 02 c0    	mov    BYTE PTR ds:0xc0023980,bl
c001a701:	eb 18                	jmp    c001a71b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a703:	50                   	push   eax
c001a704:	68 00 08 00 00       	push   0x800
c001a709:	6a 00                	push   0x0
c001a70b:	57                   	push   edi
c001a70c:	e8 df 5d fe ff       	call   c00004f0 <memset>
c001a711:	83 c4 10             	add    esp,0x10
c001a714:	b8 01 00 00 00       	mov    eax,0x1
c001a719:	eb 0e                	jmp    c001a729 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a71b:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a720:	b9 00 08 00 00       	mov    ecx,0x800
c001a725:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a727:	31 c0                	xor    eax,eax
c001a729:	5b                   	pop    ebx
c001a72a:	5e                   	pop    esi
c001a72b:	5f                   	pop    edi
c001a72c:	c3                   	ret    
c001a72d:	90                   	nop

c001a72e <ISO9660::tryMount(LogicalDisk*, int)>:
c001a72e:	53                   	push   ebx
c001a72f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a735:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a73f:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a746:	8d 58 41             	lea    ebx,[eax+0x41]
c001a749:	0f be db             	movsx  ebx,bl
c001a74c:	53                   	push   ebx
c001a74d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a751:	50                   	push   eax
c001a752:	6a 10                	push   0x10
c001a754:	e8 56 ff ff ff       	call   c001a6af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a759:	83 c4 10             	add    esp,0x10
c001a75c:	31 d2                	xor    edx,edx
c001a75e:	85 c0                	test   eax,eax
c001a760:	75 33                	jne    c001a795 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a762:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a767:	75 2c                	jne    c001a795 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a769:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a76e:	75 25                	jne    c001a795 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a770:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a775:	75 1e                	jne    c001a795 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a777:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a77c:	75 17                	jne    c001a795 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a77e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a783:	75 10                	jne    c001a795 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a785:	83 ec 0c             	sub    esp,0xc
c001a788:	53                   	push   ebx
c001a789:	e8 b8 c2 fe ff       	call   c0006a46 <init_percd>
c001a78e:	83 c4 10             	add    esp,0x10
c001a791:	40                   	inc    eax
c001a792:	0f 95 c2             	setne  dl
c001a795:	88 d0                	mov    al,dl
c001a797:	81 c4 08 08 00 00    	add    esp,0x808
c001a79d:	5b                   	pop    ebx
c001a79e:	c3                   	ret    
c001a79f:	90                   	nop

c001a7a0 <ISO9660::ISO9660()>:
c001a7a0:	83 ec 0c             	sub    esp,0xc
c001a7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7a7:	83 ec 0c             	sub    esp,0xc
c001a7aa:	50                   	push   eax
c001a7ab:	e8 8c 0d ff ff       	call   c000b53c <Filesystem::Filesystem()>
c001a7b0:	83 c4 10             	add    esp,0x10
c001a7b3:	ba 70 2b 02 c0       	mov    edx,0xc0022b70
c001a7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7bc:	89 10                	mov    DWORD PTR [eax],edx
c001a7be:	e8 95 c3 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a7c3:	90                   	nop
c001a7c4:	83 c4 0c             	add    esp,0xc
c001a7c7:	c3                   	ret    

c001a7c8 <SoundCard::beginPlayback()>:
c001a7c8:	c7 44 24 04 d4 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022bd4
c001a7d0:	e9 7c 6b ff ff       	jmp    c0011351 <KePanic(char const*)>
c001a7d5:	90                   	nop

c001a7d6 <SoundCard::stopPlayback()>:
c001a7d6:	c7 44 24 04 d4 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022bd4
c001a7de:	e9 6e 6b ff ff       	jmp    c0011351 <KePanic(char const*)>
c001a7e3:	90                   	nop

c001a7e4 <SoundCard::SoundCard(char const*)>:
c001a7e4:	83 ec 1c             	sub    esp,0x1c
c001a7e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7eb:	83 ec 08             	sub    esp,0x8
c001a7ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7f2:	50                   	push   eax
c001a7f3:	e8 c6 20 ff ff       	call   c000c8be <Device::Device(char const*)>
c001a7f8:	83 c4 10             	add    esp,0x10
c001a7fb:	ba 20 2c 02 c0       	mov    edx,0xc0022c20
c001a800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a804:	89 10                	mov    DWORD PTR [eax],edx
c001a806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a80a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a811:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a815:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a81f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a823:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a82d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a831:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a83b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a83f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a849:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a851:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a856:	7f 1a                	jg     c001a872 <SoundCard::SoundCard(char const*)+0x8e>
c001a858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a85c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a860:	83 c2 54             	add    edx,0x54
c001a863:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a86b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a870:	eb df                	jmp    c001a851 <SoundCard::SoundCard(char const*)+0x6d>
c001a872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a876:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a87d:	90                   	nop
c001a87e:	83 c4 1c             	add    esp,0x1c
c001a881:	c3                   	ret    

c001a882 <SoundCard::~SoundCard()>:
c001a882:	83 ec 0c             	sub    esp,0xc
c001a885:	ba 20 2c 02 c0       	mov    edx,0xc0022c20
c001a88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a88e:	89 10                	mov    DWORD PTR [eax],edx
c001a890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a894:	83 ec 0c             	sub    esp,0xc
c001a897:	50                   	push   eax
c001a898:	e8 8b 1d ff ff       	call   c000c628 <Device::~Device()>
c001a89d:	83 c4 10             	add    esp,0x10
c001a8a0:	90                   	nop
c001a8a1:	83 c4 0c             	add    esp,0xc
c001a8a4:	c3                   	ret    
c001a8a5:	90                   	nop

c001a8a6 <SoundCard::~SoundCard()>:
c001a8a6:	83 ec 0c             	sub    esp,0xc
c001a8a9:	83 ec 0c             	sub    esp,0xc
c001a8ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8b0:	e8 cd ff ff ff       	call   c001a882 <SoundCard::~SoundCard()>
c001a8b5:	83 c4 10             	add    esp,0x10
c001a8b8:	83 ec 08             	sub    esp,0x8
c001a8bb:	68 e8 01 00 00       	push   0x1e8
c001a8c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8c4:	e8 4f ff fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a8c9:	83 c4 10             	add    esp,0x10
c001a8cc:	83 c4 0c             	add    esp,0xc
c001a8cf:	c3                   	ret    

c001a8d0 <SoundCard::configureRates(int, int, int)>:
c001a8d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a8d4:	31 c0                	xor    eax,eax
c001a8d6:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a8dd:	75 20                	jne    c001a8ff <SoundCard::configureRates(int, int, int)+0x2f>
c001a8df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8e3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a8e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8ed:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a8f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8f7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a8fd:	b0 01                	mov    al,0x1
c001a8ff:	c3                   	ret    

c001a900 <SoundCard::getSamples16(int, short*)>:
c001a900:	55                   	push   ebp
c001a901:	57                   	push   edi
c001a902:	31 ff                	xor    edi,edi
c001a904:	56                   	push   esi
c001a905:	53                   	push   ebx
c001a906:	31 db                	xor    ebx,ebx
c001a908:	83 ec 10             	sub    esp,0x10
c001a90b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a90f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a913:	8d 04 36             	lea    eax,[esi+esi*1]
c001a916:	50                   	push   eax
c001a917:	6a 00                	push   0x0
c001a919:	55                   	push   ebp
c001a91a:	e8 d1 5b fe ff       	call   c00004f0 <memset>
c001a91f:	83 c4 10             	add    esp,0x10
c001a922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a926:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a92d:	85 c0                	test   eax,eax
c001a92f:	74 1b                	je     c001a94c <SoundCard::getSamples16(int, short*)+0x4c>
c001a931:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a935:	75 15                	jne    c001a94c <SoundCard::getSamples16(int, short*)+0x4c>
c001a937:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a93b:	55                   	push   ebp
c001a93c:	56                   	push   esi
c001a93d:	50                   	push   eax
c001a93e:	e8 f1 02 00 00       	call   c001ac34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a943:	83 c4 10             	add    esp,0x10
c001a946:	39 c7                	cmp    edi,eax
c001a948:	7d 02                	jge    c001a94c <SoundCard::getSamples16(int, short*)+0x4c>
c001a94a:	89 c7                	mov    edi,eax
c001a94c:	43                   	inc    ebx
c001a94d:	83 fb 20             	cmp    ebx,0x20
c001a950:	75 d0                	jne    c001a922 <SoundCard::getSamples16(int, short*)+0x22>
c001a952:	83 c4 0c             	add    esp,0xc
c001a955:	89 f8                	mov    eax,edi
c001a957:	5b                   	pop    ebx
c001a958:	5e                   	pop    esi
c001a959:	5f                   	pop    edi
c001a95a:	5d                   	pop    ebp
c001a95b:	c3                   	ret    

c001a95c <SoundCard::getSamples32(int, int*)>:
c001a95c:	55                   	push   ebp
c001a95d:	57                   	push   edi
c001a95e:	31 ff                	xor    edi,edi
c001a960:	56                   	push   esi
c001a961:	31 f6                	xor    esi,esi
c001a963:	53                   	push   ebx
c001a964:	83 ec 10             	sub    esp,0x10
c001a967:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a96b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a96f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a973:	c1 e0 02             	shl    eax,0x2
c001a976:	50                   	push   eax
c001a977:	6a 00                	push   0x0
c001a979:	55                   	push   ebp
c001a97a:	e8 71 5b fe ff       	call   c00004f0 <memset>
c001a97f:	83 c4 10             	add    esp,0x10
c001a982:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a989:	85 c0                	test   eax,eax
c001a98b:	74 1b                	je     c001a9a8 <SoundCard::getSamples32(int, int*)+0x4c>
c001a98d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a991:	75 15                	jne    c001a9a8 <SoundCard::getSamples32(int, int*)+0x4c>
c001a993:	53                   	push   ebx
c001a994:	55                   	push   ebp
c001a995:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a999:	50                   	push   eax
c001a99a:	e8 61 03 00 00       	call   c001ad00 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a99f:	83 c4 10             	add    esp,0x10
c001a9a2:	39 c6                	cmp    esi,eax
c001a9a4:	7d 02                	jge    c001a9a8 <SoundCard::getSamples32(int, int*)+0x4c>
c001a9a6:	89 c6                	mov    esi,eax
c001a9a8:	47                   	inc    edi
c001a9a9:	83 ff 20             	cmp    edi,0x20
c001a9ac:	75 d4                	jne    c001a982 <SoundCard::getSamples32(int, int*)+0x26>
c001a9ae:	85 f6                	test   esi,esi
c001a9b0:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a9b7:	75 0f                	jne    c001a9c8 <SoundCard::getSamples32(int, int*)+0x6c>
c001a9b9:	85 c0                	test   eax,eax
c001a9bb:	74 1b                	je     c001a9d8 <SoundCard::getSamples32(int, int*)+0x7c>
c001a9bd:	83 ec 0c             	sub    esp,0xc
c001a9c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9c2:	53                   	push   ebx
c001a9c3:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a9c6:	eb 0d                	jmp    c001a9d5 <SoundCard::getSamples32(int, int*)+0x79>
c001a9c8:	85 c0                	test   eax,eax
c001a9ca:	75 0c                	jne    c001a9d8 <SoundCard::getSamples32(int, int*)+0x7c>
c001a9cc:	83 ec 0c             	sub    esp,0xc
c001a9cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9d1:	53                   	push   ebx
c001a9d2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a9d5:	83 c4 10             	add    esp,0x10
c001a9d8:	83 c4 0c             	add    esp,0xc
c001a9db:	89 f0                	mov    eax,esi
c001a9dd:	5b                   	pop    ebx
c001a9de:	5e                   	pop    esi
c001a9df:	5f                   	pop    edi
c001a9e0:	5d                   	pop    ebp
c001a9e1:	c3                   	ret    

c001a9e2 <SoundCard::addChannel(SoundPort*)>:
c001a9e2:	83 ec 0c             	sub    esp,0xc
c001a9e5:	31 c0                	xor    eax,eax
c001a9e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9eb:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a9f3:	74 1b                	je     c001aa10 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a9f5:	40                   	inc    eax
c001a9f6:	83 f8 20             	cmp    eax,0x20
c001a9f9:	75 f0                	jne    c001a9eb <SoundCard::addChannel(SoundPort*)+0x9>
c001a9fb:	83 ec 0c             	sub    esp,0xc
c001a9fe:	68 f9 2b 02 c0       	push   0xc0022bf9
c001aa03:	e8 49 69 ff ff       	call   c0011351 <KePanic(char const*)>
c001aa08:	83 c4 10             	add    esp,0x10
c001aa0b:	83 c8 ff             	or     eax,0xffffffff
c001aa0e:	eb 0b                	jmp    c001aa1b <SoundCard::addChannel(SoundPort*)+0x39>
c001aa10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aa14:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001aa1b:	83 c4 0c             	add    esp,0xc
c001aa1e:	c3                   	ret    
c001aa1f:	90                   	nop

c001aa20 <SoundCard::removeChannel(int)>:
c001aa20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa28:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001aa33:	c3                   	ret    

c001aa34 <SoundPort::SoundPort(int, int, int, int)>:
c001aa34:	83 ec 0c             	sub    esp,0xc
c001aa37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa3b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aa42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa46:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aa4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aa52:	89 10                	mov    DWORD PTR [eax],edx
c001aa54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aa5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aa67:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aa6a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001aa6f:	75 13                	jne    c001aa84 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001aa71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa75:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa77:	05 a0 0f 00 00       	add    eax,0xfa0
c001aa7c:	01 c0                	add    eax,eax
c001aa7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa82:	66 90                	xchg   ax,ax
c001aa84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aa8c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aa8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa93:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001aa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa9e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aaa1:	c1 e0 02             	shl    eax,0x2
c001aaa4:	83 ec 0c             	sub    esp,0xc
c001aaa7:	50                   	push   eax
c001aaa8:	e8 09 d0 fe ff       	call   c0007ab6 <malloc>
c001aaad:	83 c4 10             	add    esp,0x10
c001aab0:	89 c2                	mov    edx,eax
c001aab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aab6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aab9:	90                   	nop
c001aaba:	83 c4 0c             	add    esp,0xc
c001aabd:	c3                   	ret    
c001aabe:	66 90                	xchg   ax,ax

c001aac0 <SoundPort::~SoundPort()>:
c001aac0:	83 ec 0c             	sub    esp,0xc
c001aac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aac7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aaca:	85 c0                	test   eax,eax
c001aacc:	74 1e                	je     c001aaec <SoundPort::~SoundPort()+0x2c>
c001aace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aad2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aad5:	83 ec 0c             	sub    esp,0xc
c001aad8:	50                   	push   eax
c001aad9:	e8 e8 cf fe ff       	call   c0007ac6 <free>
c001aade:	83 c4 10             	add    esp,0x10
c001aae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aae5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aaec:	90                   	nop
c001aaed:	83 c4 0c             	add    esp,0xc
c001aaf0:	c3                   	ret    
c001aaf1:	90                   	nop
c001aaf2:	66 90                	xchg   ax,ax

c001aaf4 <SoundPort::unpause()>:
c001aaf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001aafc:	c3                   	ret    
c001aafd:	90                   	nop
c001aafe:	66 90                	xchg   ax,ax

c001ab00 <SoundPort::pause()>:
c001ab00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab04:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ab08:	c3                   	ret    
c001ab09:	90                   	nop
c001ab0a:	66 90                	xchg   ax,ax

c001ab0c <SoundPort::getBufferUsed()>:
c001ab0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab10:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab13:	c3                   	ret    

c001ab14 <SoundPort::getBufferSize()>:
c001ab14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab18:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ab1b:	c3                   	ret    

c001ab1c <SoundPort::buffer16(short*, int)>:
c001ab1c:	55                   	push   ebp
c001ab1d:	57                   	push   edi
c001ab1e:	56                   	push   esi
c001ab1f:	53                   	push   ebx
c001ab20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab24:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ab28:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ab2b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ab2e:	74 68                	je     c001ab98 <SoundPort::buffer16(short*, int)+0x7c>
c001ab30:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ab34:	85 c9                	test   ecx,ecx
c001ab36:	7e 60                	jle    c001ab98 <SoundPort::buffer16(short*, int)+0x7c>
c001ab38:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ab3c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ab3f:	c1 e1 0f             	shl    ecx,0xf
c001ab42:	8d 70 01             	lea    esi,[eax+0x1]
c001ab45:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ab48:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ab4b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab4e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab51:	74 4d                	je     c001aba0 <SoundPort::buffer16(short*, int)+0x84>
c001ab53:	31 f6                	xor    esi,esi
c001ab55:	eb 21                	jmp    c001ab78 <SoundPort::buffer16(short*, int)+0x5c>
c001ab57:	90                   	nop
c001ab58:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001ab5d:	8d 79 01             	lea    edi,[ecx+0x1]
c001ab60:	c1 e3 0f             	shl    ebx,0xf
c001ab63:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001ab66:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001ab69:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001ab6c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab6f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab72:	74 1c                	je     c001ab90 <SoundPort::buffer16(short*, int)+0x74>
c001ab74:	89 c6                	mov    esi,eax
c001ab76:	66 90                	xchg   ax,ax
c001ab78:	8d 46 01             	lea    eax,[esi+0x1]
c001ab7b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ab7f:	75 d7                	jne    c001ab58 <SoundPort::buffer16(short*, int)+0x3c>
c001ab81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab85:	8d 76 00             	lea    esi,[esi+0x0]
c001ab88:	5b                   	pop    ebx
c001ab89:	5e                   	pop    esi
c001ab8a:	5f                   	pop    edi
c001ab8b:	5d                   	pop    ebp
c001ab8c:	c3                   	ret    
c001ab8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab90:	5b                   	pop    ebx
c001ab91:	8d 46 02             	lea    eax,[esi+0x2]
c001ab94:	5e                   	pop    esi
c001ab95:	5f                   	pop    edi
c001ab96:	5d                   	pop    ebp
c001ab97:	c3                   	ret    
c001ab98:	5b                   	pop    ebx
c001ab99:	31 c0                	xor    eax,eax
c001ab9b:	5e                   	pop    esi
c001ab9c:	5f                   	pop    edi
c001ab9d:	5d                   	pop    ebp
c001ab9e:	c3                   	ret    
c001ab9f:	90                   	nop
c001aba0:	b8 01 00 00 00       	mov    eax,0x1
c001aba5:	eb e1                	jmp    c001ab88 <SoundPort::buffer16(short*, int)+0x6c>
c001aba7:	90                   	nop

c001aba8 <SoundPort::buffer32(int*, int)>:
c001aba8:	55                   	push   ebp
c001aba9:	57                   	push   edi
c001abaa:	56                   	push   esi
c001abab:	53                   	push   ebx
c001abac:	83 ec 04             	sub    esp,0x4
c001abaf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001abb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abb7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001abba:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001abbe:	89 04 24             	mov    DWORD PTR [esp],eax
c001abc1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001abc4:	74 5a                	je     c001ac20 <SoundPort::buffer32(int*, int)+0x78>
c001abc6:	85 c0                	test   eax,eax
c001abc8:	7e 56                	jle    c001ac20 <SoundPort::buffer32(int*, int)+0x78>
c001abca:	8d 71 01             	lea    esi,[ecx+0x1]
c001abcd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001abd0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001abd3:	8b 37                	mov    esi,DWORD PTR [edi]
c001abd5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001abd8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001abdb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001abde:	74 4c                	je     c001ac2c <SoundPort::buffer32(int*, int)+0x84>
c001abe0:	31 f6                	xor    esi,esi
c001abe2:	eb 1c                	jmp    c001ac00 <SoundPort::buffer32(int*, int)+0x58>
c001abe4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001abe7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001abea:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001abed:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001abf0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001abf4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001abf7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001abfa:	74 18                	je     c001ac14 <SoundPort::buffer32(int*, int)+0x6c>
c001abfc:	89 de                	mov    esi,ebx
c001abfe:	66 90                	xchg   ax,ax
c001ac00:	8d 5e 01             	lea    ebx,[esi+0x1]
c001ac03:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001ac06:	75 dc                	jne    c001abe4 <SoundPort::buffer32(int*, int)+0x3c>
c001ac08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ac0b:	90                   	nop
c001ac0c:	83 c4 04             	add    esp,0x4
c001ac0f:	5b                   	pop    ebx
c001ac10:	5e                   	pop    esi
c001ac11:	5f                   	pop    edi
c001ac12:	5d                   	pop    ebp
c001ac13:	c3                   	ret    
c001ac14:	83 c4 04             	add    esp,0x4
c001ac17:	8d 46 02             	lea    eax,[esi+0x2]
c001ac1a:	5b                   	pop    ebx
c001ac1b:	5e                   	pop    esi
c001ac1c:	5f                   	pop    edi
c001ac1d:	5d                   	pop    ebp
c001ac1e:	c3                   	ret    
c001ac1f:	90                   	nop
c001ac20:	83 c4 04             	add    esp,0x4
c001ac23:	31 c0                	xor    eax,eax
c001ac25:	5b                   	pop    ebx
c001ac26:	5e                   	pop    esi
c001ac27:	5f                   	pop    edi
c001ac28:	5d                   	pop    ebp
c001ac29:	c3                   	ret    
c001ac2a:	66 90                	xchg   ax,ax
c001ac2c:	b8 01 00 00 00       	mov    eax,0x1
c001ac31:	eb d9                	jmp    c001ac0c <SoundPort::buffer32(int*, int)+0x64>
c001ac33:	90                   	nop

c001ac34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001ac34:	57                   	push   edi
c001ac35:	56                   	push   esi
c001ac36:	53                   	push   ebx
c001ac37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac3b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac3f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001ac45:	39 03                	cmp    DWORD PTR [ebx],eax
c001ac47:	74 13                	je     c001ac5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001ac49:	83 ec 0c             	sub    esp,0xc
c001ac4c:	68 4c 2c 02 c0       	push   0xc0022c4c
c001ac51:	e8 fb 66 ff ff       	call   c0011351 <KePanic(char const*)>
c001ac56:	83 c4 10             	add    esp,0x10
c001ac59:	8d 76 00             	lea    esi,[esi+0x0]
c001ac5c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001ac62:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ac65:	74 11                	je     c001ac78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001ac67:	83 ec 0c             	sub    esp,0xc
c001ac6a:	68 8b 2c 02 c0       	push   0xc0022c8b
c001ac6f:	e8 dd 66 ff ff       	call   c0011351 <KePanic(char const*)>
c001ac74:	83 c4 10             	add    esp,0x10
c001ac77:	90                   	nop
c001ac78:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001ac7e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ac81:	74 11                	je     c001ac94 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001ac83:	83 ec 0c             	sub    esp,0xc
c001ac86:	68 8b 2c 02 c0       	push   0xc0022c8b
c001ac8b:	e8 c1 66 ff ff       	call   c0011351 <KePanic(char const*)>
c001ac90:	83 c4 10             	add    esp,0x10
c001ac93:	90                   	nop
c001ac94:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ac97:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001ac9b:	7e 07                	jle    c001aca4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001ac9d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aca1:	8d 76 00             	lea    esi,[esi+0x0]
c001aca4:	85 f6                	test   esi,esi
c001aca6:	7e 2c                	jle    c001acd4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001aca8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001acac:	8d 3c 36             	lea    edi,[esi+esi*1]
c001acaf:	31 c9                	xor    ecx,ecx
c001acb1:	01 d7                	add    edi,edx
c001acb3:	90                   	nop
c001acb4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001acb7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001acba:	85 c0                	test   eax,eax
c001acbc:	79 06                	jns    c001acc4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001acbe:	05 ff 7f 00 00       	add    eax,0x7fff
c001acc3:	90                   	nop
c001acc4:	c1 f8 0f             	sar    eax,0xf
c001acc7:	83 c1 04             	add    ecx,0x4
c001acca:	66 01 02             	add    WORD PTR [edx],ax
c001accd:	83 c2 02             	add    edx,0x2
c001acd0:	39 d7                	cmp    edi,edx
c001acd2:	75 e0                	jne    c001acb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001acd4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001acd7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001acda:	83 ec 04             	sub    esp,0x4
c001acdd:	29 f0                	sub    eax,esi
c001acdf:	c1 e0 02             	shl    eax,0x2
c001ace2:	50                   	push   eax
c001ace3:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ace6:	50                   	push   eax
c001ace7:	52                   	push   edx
c001ace8:	e8 e3 56 fe ff       	call   c00003d0 <memmove>
c001aced:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001acf0:	83 c4 10             	add    esp,0x10
c001acf3:	29 f0                	sub    eax,esi
c001acf5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001acf8:	89 f0                	mov    eax,esi
c001acfa:	5b                   	pop    ebx
c001acfb:	5e                   	pop    esi
c001acfc:	5f                   	pop    edi
c001acfd:	c3                   	ret    
c001acfe:	66 90                	xchg   ax,ax

c001ad00 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ad00:	57                   	push   edi
c001ad01:	56                   	push   esi
c001ad02:	53                   	push   ebx
c001ad03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad07:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ad0b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ad0f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ad15:	39 06                	cmp    DWORD PTR [esi],eax
c001ad17:	74 13                	je     c001ad2c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ad19:	83 ec 0c             	sub    esp,0xc
c001ad1c:	68 6c 2c 02 c0       	push   0xc0022c6c
c001ad21:	e8 2b 66 ff ff       	call   c0011351 <KePanic(char const*)>
c001ad26:	83 c4 10             	add    esp,0x10
c001ad29:	8d 76 00             	lea    esi,[esi+0x0]
c001ad2c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ad32:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ad35:	74 11                	je     c001ad48 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ad37:	83 ec 0c             	sub    esp,0xc
c001ad3a:	68 a7 2c 02 c0       	push   0xc0022ca7
c001ad3f:	e8 0d 66 ff ff       	call   c0011351 <KePanic(char const*)>
c001ad44:	83 c4 10             	add    esp,0x10
c001ad47:	90                   	nop
c001ad48:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ad4e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ad51:	74 11                	je     c001ad64 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ad53:	83 ec 0c             	sub    esp,0xc
c001ad56:	68 a7 2c 02 c0       	push   0xc0022ca7
c001ad5b:	e8 f1 65 ff ff       	call   c0011351 <KePanic(char const*)>
c001ad60:	83 c4 10             	add    esp,0x10
c001ad63:	90                   	nop
c001ad64:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ad67:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ad6b:	7e 07                	jle    c001ad74 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ad6d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ad71:	8d 76 00             	lea    esi,[esi+0x0]
c001ad74:	85 ff                	test   edi,edi
c001ad76:	7e 1c                	jle    c001ad94 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001ad78:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ad7f:	31 c0                	xor    eax,eax
c001ad81:	8d 76 00             	lea    esi,[esi+0x0]
c001ad84:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ad87:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ad8a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ad8d:	83 c0 04             	add    eax,0x4
c001ad90:	39 c1                	cmp    ecx,eax
c001ad92:	75 f0                	jne    c001ad84 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ad94:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ad97:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ad9a:	83 ec 04             	sub    esp,0x4
c001ad9d:	29 f8                	sub    eax,edi
c001ad9f:	c1 e0 02             	shl    eax,0x2
c001ada2:	50                   	push   eax
c001ada3:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ada6:	50                   	push   eax
c001ada7:	52                   	push   edx
c001ada8:	e8 23 56 fe ff       	call   c00003d0 <memmove>
c001adad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001adb0:	83 c4 10             	add    esp,0x10
c001adb3:	29 f8                	sub    eax,edi
c001adb5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001adb8:	89 f8                	mov    eax,edi
c001adba:	5b                   	pop    ebx
c001adbb:	5e                   	pop    esi
c001adbc:	5f                   	pop    edi
c001adbd:	c3                   	ret    

c001adbe <PCI::open(int, int, void*)>:
c001adbe:	83 ec 18             	sub    esp,0x18
c001adc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adc5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001adc9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001adcf:	8b 10                	mov    edx,DWORD PTR [eax]
c001add1:	50                   	push   eax
c001add2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001add5:	31 c0                	xor    eax,eax
c001add7:	83 c4 1c             	add    esp,0x1c
c001adda:	c3                   	ret    
c001addb:	90                   	nop

c001addc <PCI::close(int, int, void*)>:
c001addc:	31 c0                	xor    eax,eax
c001adde:	c3                   	ret    
c001addf:	90                   	nop

c001ade0 <PCI::PCI()>:
c001ade0:	83 ec 0c             	sub    esp,0xc
c001ade3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade7:	83 ec 08             	sub    esp,0x8
c001adea:	68 c3 2c 02 c0       	push   0xc0022cc3
c001adef:	50                   	push   eax
c001adf0:	e8 93 12 ff ff       	call   c000c088 <Bus::Bus(char const*)>
c001adf5:	83 c4 10             	add    esp,0x10
c001adf8:	ba 6c 2d 02 c0       	mov    edx,0xc0022d6c
c001adfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae01:	89 10                	mov    DWORD PTR [eax],edx
c001ae03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae07:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ae11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae15:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ae1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae24:	0f b6 d0             	movzx  edx,al
c001ae27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae2b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ae32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae36:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae3c:	0f b6 d0             	movzx  edx,al
c001ae3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae43:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ae48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae52:	8d 50 01             	lea    edx,[eax+0x1]
c001ae55:	88 d1                	mov    cl,dl
c001ae57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae5b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ae61:	0f b6 d0             	movzx  edx,al
c001ae64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae68:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ae6c:	83 c9 c0             	or     ecx,0xffffffc0
c001ae6f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ae73:	90                   	nop
c001ae74:	83 c4 0c             	add    esp,0xc
c001ae77:	c3                   	ret    

c001ae78 <PCI::readBAR8(unsigned int, int)>:
c001ae78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae80:	f6 c2 01             	test   dl,0x1
c001ae83:	74 07                	je     c001ae8c <PCI::readBAR8(unsigned int, int)+0x14>
c001ae85:	83 e2 fc             	and    edx,0xfffffffc
c001ae88:	01 c2                	add    edx,eax
c001ae8a:	ec                   	in     al,dx
c001ae8b:	c3                   	ret    
c001ae8c:	83 e2 f0             	and    edx,0xfffffff0
c001ae8f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ae92:	c3                   	ret    
c001ae93:	90                   	nop

c001ae94 <PCI::readBAR16(unsigned int, int)>:
c001ae94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae9c:	f6 c2 01             	test   dl,0x1
c001ae9f:	74 08                	je     c001aea9 <PCI::readBAR16(unsigned int, int)+0x15>
c001aea1:	83 e2 fc             	and    edx,0xfffffffc
c001aea4:	01 c2                	add    edx,eax
c001aea6:	66 ed                	in     ax,dx
c001aea8:	c3                   	ret    
c001aea9:	83 e2 f0             	and    edx,0xfffffff0
c001aeac:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001aeb0:	c3                   	ret    
c001aeb1:	90                   	nop

c001aeb2 <PCI::readBAR32(unsigned int, int)>:
c001aeb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aeb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aeba:	f6 c2 01             	test   dl,0x1
c001aebd:	74 07                	je     c001aec6 <PCI::readBAR32(unsigned int, int)+0x14>
c001aebf:	83 e2 fc             	and    edx,0xfffffffc
c001aec2:	01 c2                	add    edx,eax
c001aec4:	ed                   	in     eax,dx
c001aec5:	c3                   	ret    
c001aec6:	83 e2 f0             	and    edx,0xfffffff0
c001aec9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001aecc:	c3                   	ret    
c001aecd:	90                   	nop

c001aece <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001aece:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aed6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aeda:	f6 c2 01             	test   dl,0x1
c001aedd:	74 07                	je     c001aee6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001aedf:	83 e2 fc             	and    edx,0xfffffffc
c001aee2:	01 ca                	add    edx,ecx
c001aee4:	ee                   	out    dx,al
c001aee5:	c3                   	ret    
c001aee6:	83 e2 f0             	and    edx,0xfffffff0
c001aee9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001aeec:	c3                   	ret    
c001aeed:	90                   	nop

c001aeee <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001aeee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aef2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aef6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aefa:	f6 c2 01             	test   dl,0x1
c001aefd:	74 08                	je     c001af07 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001aeff:	83 e2 fc             	and    edx,0xfffffffc
c001af02:	01 ca                	add    edx,ecx
c001af04:	66 ef                	out    dx,ax
c001af06:	c3                   	ret    
c001af07:	83 e2 f0             	and    edx,0xfffffff0
c001af0a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001af0e:	c3                   	ret    
c001af0f:	90                   	nop

c001af10 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001af10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af1c:	f6 c2 01             	test   dl,0x1
c001af1f:	74 07                	je     c001af28 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001af21:	83 e2 fc             	and    edx,0xfffffffc
c001af24:	01 ca                	add    edx,ecx
c001af26:	ef                   	out    dx,eax
c001af27:	c3                   	ret    
c001af28:	83 e2 f0             	and    edx,0xfffffff0
c001af2b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001af2e:	c3                   	ret    
c001af2f:	90                   	nop

c001af30 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af30:	55                   	push   ebp
c001af31:	57                   	push   edi
c001af32:	56                   	push   esi
c001af33:	53                   	push   ebx
c001af34:	83 ec 0c             	sub    esp,0xc
c001af37:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001af3c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001af40:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001af44:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001af48:	83 fe 07             	cmp    esi,0x7
c001af4b:	76 10                	jbe    c001af5d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001af4d:	83 ec 0c             	sub    esp,0xc
c001af50:	68 cb 2c 02 c0       	push   0xc0022ccb
c001af55:	e8 f7 63 ff ff       	call   c0011351 <KePanic(char const*)>
c001af5a:	83 c4 10             	add    esp,0x10
c001af5d:	0f b6 db             	movzx  ebx,bl
c001af60:	83 fb 0f             	cmp    ebx,0xf
c001af63:	76 10                	jbe    c001af75 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001af65:	83 ec 0c             	sub    esp,0xc
c001af68:	68 fb 2c 02 c0       	push   0xc0022cfb
c001af6d:	e8 df 63 ff ff       	call   c0011351 <KePanic(char const*)>
c001af72:	83 c4 10             	add    esp,0x10
c001af75:	8d 04 36             	lea    eax,[esi+esi*1]
c001af78:	ba f8 0c 00 00       	mov    edx,0xcf8
c001af7d:	83 c8 f0             	or     eax,0xfffffff0
c001af80:	ee                   	out    dx,al
c001af81:	ba fa 0c 00 00       	mov    edx,0xcfa
c001af86:	89 e8                	mov    eax,ebp
c001af88:	ee                   	out    dx,al
c001af89:	83 c4 0c             	add    esp,0xc
c001af8c:	89 d8                	mov    eax,ebx
c001af8e:	89 f9                	mov    ecx,edi
c001af90:	c1 e0 08             	shl    eax,0x8
c001af93:	0f b6 d9             	movzx  ebx,cl
c001af96:	83 e3 fc             	and    ebx,0xfffffffc
c001af99:	09 d8                	or     eax,ebx
c001af9b:	5b                   	pop    ebx
c001af9c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001afa1:	5e                   	pop    esi
c001afa2:	5f                   	pop    edi
c001afa3:	5d                   	pop    ebp
c001afa4:	c3                   	ret    
c001afa5:	90                   	nop

c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001afa6:	57                   	push   edi
c001afa7:	56                   	push   esi
c001afa8:	53                   	push   ebx
c001afa9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001afad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afb1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001afb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001afbb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001afbf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afc3:	83 ff 01             	cmp    edi,0x1
c001afc6:	75 3f                	jne    c001b007 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001afc8:	89 de                	mov    esi,ebx
c001afca:	0f b6 c0             	movzx  eax,al
c001afcd:	81 e6 fc 00 00 00    	and    esi,0xfc
c001afd3:	c1 e0 10             	shl    eax,0x10
c001afd6:	0f b6 c9             	movzx  ecx,cl
c001afd9:	09 f0                	or     eax,esi
c001afdb:	c1 e1 08             	shl    ecx,0x8
c001afde:	0f b6 d2             	movzx  edx,dl
c001afe1:	09 c8                	or     eax,ecx
c001afe3:	c1 e2 0b             	shl    edx,0xb
c001afe6:	09 d0                	or     eax,edx
c001afe8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001afed:	0d 00 00 00 80       	or     eax,0x80000000
c001aff2:	ef                   	out    dx,eax
c001aff3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aff8:	ed                   	in     eax,dx
c001aff9:	83 e3 02             	and    ebx,0x2
c001affc:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b003:	d3 e8                	shr    eax,cl
c001b005:	eb 44                	jmp    c001b04b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b007:	83 ff 02             	cmp    edi,0x2
c001b00a:	75 2d                	jne    c001b039 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b00c:	83 ec 0c             	sub    esp,0xc
c001b00f:	0f b6 c9             	movzx  ecx,cl
c001b012:	0f b6 d2             	movzx  edx,dl
c001b015:	0f b6 fb             	movzx  edi,bl
c001b018:	0f b6 c0             	movzx  eax,al
c001b01b:	57                   	push   edi
c001b01c:	51                   	push   ecx
c001b01d:	52                   	push   edx
c001b01e:	50                   	push   eax
c001b01f:	56                   	push   esi
c001b020:	e8 0b ff ff ff       	call   c001af30 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b025:	89 c2                	mov    edx,eax
c001b027:	ed                   	in     eax,dx
c001b028:	83 e3 02             	and    ebx,0x2
c001b02b:	83 c4 20             	add    esp,0x20
c001b02e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b035:	d3 e8                	shr    eax,cl
c001b037:	eb 12                	jmp    c001b04b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b039:	83 ec 0c             	sub    esp,0xc
c001b03c:	68 2b 2d 02 c0       	push   0xc0022d2b
c001b041:	e8 0b 63 ff ff       	call   c0011351 <KePanic(char const*)>
c001b046:	83 c4 10             	add    esp,0x10
c001b049:	31 c0                	xor    eax,eax
c001b04b:	5b                   	pop    ebx
c001b04c:	5e                   	pop    esi
c001b04d:	5f                   	pop    edi
c001b04e:	c3                   	ret    
c001b04f:	90                   	nop

c001b050 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b050:	83 ec 18             	sub    esp,0x18
c001b053:	6a 00                	push   0x0
c001b055:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b05a:	50                   	push   eax
c001b05b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b060:	50                   	push   eax
c001b061:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b066:	50                   	push   eax
c001b067:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b06b:	e8 36 ff ff ff       	call   c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b070:	83 c4 2c             	add    esp,0x2c
c001b073:	c3                   	ret    

c001b074 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b074:	83 ec 18             	sub    esp,0x18
c001b077:	6a 0e                	push   0xe
c001b079:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b07e:	50                   	push   eax
c001b07f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b084:	50                   	push   eax
c001b085:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b08a:	50                   	push   eax
c001b08b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b08f:	e8 12 ff ff ff       	call   c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b094:	83 c4 2c             	add    esp,0x2c
c001b097:	0f b6 c0             	movzx  eax,al
c001b09a:	c3                   	ret    
c001b09b:	90                   	nop

c001b09c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b09c:	55                   	push   ebp
c001b09d:	57                   	push   edi
c001b09e:	56                   	push   esi
c001b09f:	53                   	push   ebx
c001b0a0:	83 ec 18             	sub    esp,0x18
c001b0a3:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b0a8:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b0ad:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b0b2:	6a 0a                	push   0xa
c001b0b4:	56                   	push   esi
c001b0b5:	55                   	push   ebp
c001b0b6:	57                   	push   edi
c001b0b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b0bb:	e8 e6 fe ff ff       	call   c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0c0:	83 c4 14             	add    esp,0x14
c001b0c3:	89 c3                	mov    ebx,eax
c001b0c5:	6a 0a                	push   0xa
c001b0c7:	0f b6 db             	movzx  ebx,bl
c001b0ca:	56                   	push   esi
c001b0cb:	55                   	push   ebp
c001b0cc:	57                   	push   edi
c001b0cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b0d1:	e8 d0 fe ff ff       	call   c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0d6:	83 c4 2c             	add    esp,0x2c
c001b0d9:	25 00 ff 00 00       	and    eax,0xff00
c001b0de:	09 d8                	or     eax,ebx
c001b0e0:	5b                   	pop    ebx
c001b0e1:	5e                   	pop    esi
c001b0e2:	5f                   	pop    edi
c001b0e3:	5d                   	pop    ebp
c001b0e4:	c3                   	ret    
c001b0e5:	90                   	nop

c001b0e6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b0e6:	83 ec 18             	sub    esp,0x18
c001b0e9:	6a 08                	push   0x8
c001b0eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0f0:	50                   	push   eax
c001b0f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0f6:	50                   	push   eax
c001b0f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0fc:	50                   	push   eax
c001b0fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b101:	e8 a0 fe ff ff       	call   c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b106:	83 c4 2c             	add    esp,0x2c
c001b109:	0f b6 c4             	movzx  eax,ah
c001b10c:	c3                   	ret    
c001b10d:	90                   	nop

c001b10e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b10e:	83 ec 18             	sub    esp,0x18
c001b111:	6a 08                	push   0x8
c001b113:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b118:	50                   	push   eax
c001b119:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b11e:	50                   	push   eax
c001b11f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b124:	50                   	push   eax
c001b125:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b129:	e8 78 fe ff ff       	call   c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b12e:	83 c4 2c             	add    esp,0x2c
c001b131:	c3                   	ret    

c001b132 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b132:	83 ec 18             	sub    esp,0x18
c001b135:	6a 3c                	push   0x3c
c001b137:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b13c:	50                   	push   eax
c001b13d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b142:	50                   	push   eax
c001b143:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b148:	50                   	push   eax
c001b149:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b14d:	e8 54 fe ff ff       	call   c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b152:	83 c4 2c             	add    esp,0x2c
c001b155:	c3                   	ret    

c001b156 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b156:	83 ec 18             	sub    esp,0x18
c001b159:	6a 18                	push   0x18
c001b15b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b160:	50                   	push   eax
c001b161:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b166:	50                   	push   eax
c001b167:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b16c:	50                   	push   eax
c001b16d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b171:	e8 30 fe ff ff       	call   c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b176:	83 c4 2c             	add    esp,0x2c
c001b179:	0f b6 c4             	movzx  eax,ah
c001b17c:	c3                   	ret    
c001b17d:	90                   	nop

c001b17e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b17e:	55                   	push   ebp
c001b17f:	57                   	push   edi
c001b180:	56                   	push   esi
c001b181:	53                   	push   ebx
c001b182:	83 ec 28             	sub    esp,0x28
c001b185:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b189:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b18e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b193:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b198:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b19f:	8d 43 12             	lea    eax,[ebx+0x12]
c001b1a2:	83 c3 10             	add    ebx,0x10
c001b1a5:	0f b6 c0             	movzx  eax,al
c001b1a8:	0f b6 db             	movzx  ebx,bl
c001b1ab:	50                   	push   eax
c001b1ac:	51                   	push   ecx
c001b1ad:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b1b1:	57                   	push   edi
c001b1b2:	55                   	push   ebp
c001b1b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b1b7:	e8 ea fd ff ff       	call   c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1bc:	83 c4 14             	add    esp,0x14
c001b1bf:	89 c6                	mov    esi,eax
c001b1c1:	53                   	push   ebx
c001b1c2:	c1 e6 10             	shl    esi,0x10
c001b1c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b1c9:	51                   	push   ecx
c001b1ca:	57                   	push   edi
c001b1cb:	55                   	push   ebp
c001b1cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b1d0:	e8 d1 fd ff ff       	call   c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1d5:	83 c4 3c             	add    esp,0x3c
c001b1d8:	0f b7 c0             	movzx  eax,ax
c001b1db:	5b                   	pop    ebx
c001b1dc:	09 f0                	or     eax,esi
c001b1de:	5e                   	pop    esi
c001b1df:	5f                   	pop    edi
c001b1e0:	5d                   	pop    ebp
c001b1e1:	c3                   	ret    

c001b1e2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b1e2:	55                   	push   ebp
c001b1e3:	57                   	push   edi
c001b1e4:	56                   	push   esi
c001b1e5:	53                   	push   ebx
c001b1e6:	83 ec 0c             	sub    esp,0xc
c001b1e9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b1ed:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1f1:	89 f5                	mov    ebp,esi
c001b1f3:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b1f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b1fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b201:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b205:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b209:	83 f9 01             	cmp    ecx,0x1
c001b20c:	75 5d                	jne    c001b26b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b20e:	0f b6 c8             	movzx  ecx,al
c001b211:	0f b6 d2             	movzx  edx,dl
c001b214:	c1 e1 10             	shl    ecx,0x10
c001b217:	c1 e2 0b             	shl    edx,0xb
c001b21a:	89 f0                	mov    eax,esi
c001b21c:	25 fc 00 00 00       	and    eax,0xfc
c001b221:	09 c1                	or     ecx,eax
c001b223:	89 e8                	mov    eax,ebp
c001b225:	0f b6 c0             	movzx  eax,al
c001b228:	c1 e0 08             	shl    eax,0x8
c001b22b:	09 c1                	or     ecx,eax
c001b22d:	09 d1                	or     ecx,edx
c001b22f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b234:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b23a:	89 c8                	mov    eax,ecx
c001b23c:	ef                   	out    dx,eax
c001b23d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b242:	ed                   	in     eax,dx
c001b243:	0f b7 db             	movzx  ebx,bx
c001b246:	83 e6 02             	and    esi,0x2
c001b249:	74 0a                	je     c001b255 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b24b:	0f b7 d0             	movzx  edx,ax
c001b24e:	c1 e3 10             	shl    ebx,0x10
c001b251:	09 d3                	or     ebx,edx
c001b253:	eb 05                	jmp    c001b25a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b255:	66 31 c0             	xor    ax,ax
c001b258:	09 c3                	or     ebx,eax
c001b25a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b25f:	89 c8                	mov    eax,ecx
c001b261:	ef                   	out    dx,eax
c001b262:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b267:	89 d8                	mov    eax,ebx
c001b269:	eb 41                	jmp    c001b2ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b26b:	83 f9 02             	cmp    ecx,0x2
c001b26e:	75 45                	jne    c001b2b5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b270:	83 ec 0c             	sub    esp,0xc
c001b273:	0f b6 d2             	movzx  edx,dl
c001b276:	89 f1                	mov    ecx,esi
c001b278:	0f b6 c0             	movzx  eax,al
c001b27b:	0f b6 f1             	movzx  esi,cl
c001b27e:	89 e9                	mov    ecx,ebp
c001b280:	56                   	push   esi
c001b281:	0f b6 c9             	movzx  ecx,cl
c001b284:	51                   	push   ecx
c001b285:	52                   	push   edx
c001b286:	50                   	push   eax
c001b287:	57                   	push   edi
c001b288:	e8 a3 fc ff ff       	call   c001af30 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b28d:	89 c2                	mov    edx,eax
c001b28f:	ed                   	in     eax,dx
c001b290:	83 c4 20             	add    esp,0x20
c001b293:	0f b7 db             	movzx  ebx,bx
c001b296:	f6 c2 02             	test   dl,0x2
c001b299:	74 0c                	je     c001b2a7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b29b:	0f b7 c8             	movzx  ecx,ax
c001b29e:	89 d8                	mov    eax,ebx
c001b2a0:	c1 e0 10             	shl    eax,0x10
c001b2a3:	09 c8                	or     eax,ecx
c001b2a5:	eb 05                	jmp    c001b2ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b2a7:	66 31 c0             	xor    ax,ax
c001b2aa:	09 d8                	or     eax,ebx
c001b2ac:	ef                   	out    dx,eax
c001b2ad:	83 c4 0c             	add    esp,0xc
c001b2b0:	5b                   	pop    ebx
c001b2b1:	5e                   	pop    esi
c001b2b2:	5f                   	pop    edi
c001b2b3:	5d                   	pop    ebp
c001b2b4:	c3                   	ret    
c001b2b5:	c7 44 24 20 2b 2d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022d2b
c001b2bd:	83 c4 0c             	add    esp,0xc
c001b2c0:	5b                   	pop    ebx
c001b2c1:	5e                   	pop    esi
c001b2c2:	5f                   	pop    edi
c001b2c3:	5d                   	pop    ebp
c001b2c4:	e9 88 60 ff ff       	jmp    c0011351 <KePanic(char const*)>
c001b2c9:	90                   	nop

c001b2ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b2ca:	55                   	push   ebp
c001b2cb:	57                   	push   edi
c001b2cc:	56                   	push   esi
c001b2cd:	53                   	push   ebx
c001b2ce:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b2d4:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b2db:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b2e2:	0f 85 bc 00 00 00    	jne    c001b3a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xda>
c001b2e8:	83 ec 0c             	sub    esp,0xc
c001b2eb:	68 14 01 00 00       	push   0x114
c001b2f0:	e8 c1 c7 fe ff       	call   c0007ab6 <malloc>
c001b2f5:	6a 01                	push   0x1
c001b2f7:	89 c3                	mov    ebx,eax
c001b2f9:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b2ff:	68 31 2d 02 c0       	push   0xc0022d31
c001b304:	50                   	push   eax
c001b305:	e8 e6 04 ff ff       	call   c000b7f0 <File::File(char const*, Process*, bool)>
c001b30a:	83 c4 20             	add    esp,0x20
c001b30d:	85 db                	test   ebx,ebx
c001b30f:	0f 84 67 02 00 00    	je     c001b57c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b2>
c001b315:	56                   	push   esi
c001b316:	56                   	push   esi
c001b317:	6a 01                	push   0x1
c001b319:	53                   	push   ebx
c001b31a:	e8 af 05 ff ff       	call   c000b8ce <File::open(FileOpenMode)>
c001b31f:	83 c4 10             	add    esp,0x10
c001b322:	85 c0                	test   eax,eax
c001b324:	0f 85 52 02 00 00    	jne    c001b57c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b2>
c001b32a:	52                   	push   edx
c001b32b:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b32f:	50                   	push   eax
c001b330:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b334:	50                   	push   eax
c001b335:	53                   	push   ebx
c001b336:	e8 95 08 ff ff       	call   c000bbd0 <File::stat(unsigned long long*, bool*)>
c001b33b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b33f:	40                   	inc    eax
c001b340:	89 04 24             	mov    DWORD PTR [esp],eax
c001b343:	e8 6e c7 fe ff       	call   c0007ab6 <malloc>
c001b348:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b34c:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b351:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b355:	59                   	pop    ecx
c001b356:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b358:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b35c:	51                   	push   ecx
c001b35d:	50                   	push   eax
c001b35e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b362:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b366:	53                   	push   ebx
c001b367:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b36a:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b36e:	83 c4 20             	add    esp,0x20
c001b371:	89 c8                	mov    eax,ecx
c001b373:	99                   	cdq    
c001b374:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b378:	0f 85 fe 01 00 00    	jne    c001b57c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b2>
c001b37e:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b382:	0f 85 f4 01 00 00    	jne    c001b57c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b2>
c001b388:	83 ec 0c             	sub    esp,0xc
c001b38b:	53                   	push   ebx
c001b38c:	e8 9b 05 ff ff       	call   c000b92c <File::close()>
c001b391:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b395:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b39c:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b3a1:	83 c4 10             	add    esp,0x10
c001b3a4:	a1 a4 a0 02 c0       	mov    eax,ds:0xc002a0a4
c001b3a9:	8b 1d a8 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0a8
c001b3af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b3b3:	31 f6                	xor    esi,esi
c001b3b5:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b3bd:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b3c4:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b3c9:	31 c9                	xor    ecx,ecx
c001b3cb:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b3d3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b3d8:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b3e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b3e4:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b3ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b3f0:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b3f4:	0f 8e 82 01 00 00    	jle    c001b57c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b2>
c001b3fa:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b3fd:	d4 40                	aam    0x40
c001b3ff:	d5 39                	aad    0x39
c001b401:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b405:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b409:	d4 40                	aam    0x40
c001b40b:	d5 39                	aad    0x39
c001b40d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b411:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b415:	d4 40                	aam    0x40
c001b417:	d5 39                	aad    0x39
c001b419:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b41d:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b421:	d4 40                	aam    0x40
c001b423:	d5 39                	aad    0x39
c001b425:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b429:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b42d:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b431:	3c 56                	cmp    al,0x56
c001b433:	74 43                	je     c001b478 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ae>
c001b435:	d4 40                	aam    0x40
c001b437:	d5 39                	aad    0x39
c001b439:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b43c:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b440:	0f b6 c9             	movzx  ecx,cl
c001b443:	c1 e1 04             	shl    ecx,0x4
c001b446:	d4 40                	aam    0x40
c001b448:	d5 39                	aad    0x39
c001b44a:	83 e8 30             	sub    eax,0x30
c001b44d:	0f b6 c0             	movzx  eax,al
c001b450:	09 c1                	or     ecx,eax
c001b452:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b456:	c1 e1 04             	shl    ecx,0x4
c001b459:	d4 40                	aam    0x40
c001b45b:	d5 39                	aad    0x39
c001b45d:	83 e8 30             	sub    eax,0x30
c001b460:	0f b6 c0             	movzx  eax,al
c001b463:	09 c1                	or     ecx,eax
c001b465:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b469:	c1 e1 04             	shl    ecx,0x4
c001b46c:	d4 40                	aam    0x40
c001b46e:	d5 39                	aad    0x39
c001b470:	83 e8 30             	sub    eax,0x30
c001b473:	0f b6 c0             	movzx  eax,al
c001b476:	09 c1                	or     ecx,eax
c001b478:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b47c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b480:	3c 58                	cmp    al,0x58
c001b482:	74 47                	je     c001b4cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x201>
c001b484:	d4 40                	aam    0x40
c001b486:	d5 39                	aad    0x39
c001b488:	8d 50 d0             	lea    edx,[eax-0x30]
c001b48b:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b48f:	0f b6 d2             	movzx  edx,dl
c001b492:	c1 e2 04             	shl    edx,0x4
c001b495:	d4 40                	aam    0x40
c001b497:	d5 39                	aad    0x39
c001b499:	83 e8 30             	sub    eax,0x30
c001b49c:	0f b6 c0             	movzx  eax,al
c001b49f:	09 c2                	or     edx,eax
c001b4a1:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b4a5:	c1 e2 04             	shl    edx,0x4
c001b4a8:	d4 40                	aam    0x40
c001b4aa:	d5 39                	aad    0x39
c001b4ac:	83 e8 30             	sub    eax,0x30
c001b4af:	0f b6 c0             	movzx  eax,al
c001b4b2:	09 c2                	or     edx,eax
c001b4b4:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b4b8:	c1 e2 04             	shl    edx,0x4
c001b4bb:	d4 40                	aam    0x40
c001b4bd:	d5 39                	aad    0x39
c001b4bf:	83 e8 30             	sub    eax,0x30
c001b4c2:	0f b6 c0             	movzx  eax,al
c001b4c5:	09 c2                	or     edx,eax
c001b4c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b4cb:	83 c6 10             	add    esi,0x10
c001b4ce:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b4d2:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b4d6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4da:	83 fa 0a             	cmp    edx,0xa
c001b4dd:	74 0b                	je     c001b4ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b4df:	47                   	inc    edi
c001b4e0:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b4e4:	75 19                	jne    c001b4ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x235>
c001b4e6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b4ea:	31 c0                	xor    eax,eax
c001b4ec:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b4f1:	0f 94 c0             	sete   al
c001b4f4:	01 c6                	add    esi,eax
c001b4f6:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b4fb:	75 0b                	jne    c001b508 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23e>
c001b4fd:	eb 14                	jmp    c001b513 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x249>
c001b4ff:	46                   	inc    esi
c001b500:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b503:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b506:	eb ca                	jmp    c001b4d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c001b508:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b50d:	0f 85 dd fe ff ff    	jne    c001b3f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x126>
c001b513:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b518:	74 10                	je     c001b52a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x260>
c001b51a:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b51f:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b524:	0f 85 c6 fe ff ff    	jne    c001b3f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x126>
c001b52a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b52e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b532:	83 e8 30             	sub    eax,0x30
c001b535:	83 ef 30             	sub    edi,0x30
c001b538:	c1 e0 04             	shl    eax,0x4
c001b53b:	09 f8                	or     eax,edi
c001b53d:	0f b6 c0             	movzx  eax,al
c001b540:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b544:	0f 85 a6 fe ff ff    	jne    c001b3f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x126>
c001b54a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b54e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b552:	83 e8 30             	sub    eax,0x30
c001b555:	83 ef 30             	sub    edi,0x30
c001b558:	c1 e0 04             	shl    eax,0x4
c001b55b:	09 f8                	or     eax,edi
c001b55d:	0f b6 c0             	movzx  eax,al
c001b560:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b564:	0f 85 86 fe ff ff    	jne    c001b3f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x126>
c001b56a:	50                   	push   eax
c001b56b:	50                   	push   eax
c001b56c:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b570:	50                   	push   eax
c001b571:	55                   	push   ebp
c001b572:	e8 c9 50 fe ff       	call   c0000640 <strcpy>
c001b577:	83 c4 10             	add    esp,0x10
c001b57a:	eb 06                	jmp    c001b582 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b8>
c001b57c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b580:	31 ed                	xor    ebp,ebp
c001b582:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b588:	89 e8                	mov    eax,ebp
c001b58a:	5b                   	pop    ebx
c001b58b:	5e                   	pop    esi
c001b58c:	5f                   	pop    edi
c001b58d:	5d                   	pop    ebp
c001b58e:	c3                   	ret    
c001b58f:	90                   	nop

c001b590 <PCI::checkBus(unsigned char)>:
c001b590:	56                   	push   esi
c001b591:	53                   	push   ebx
c001b592:	31 db                	xor    ebx,ebx
c001b594:	51                   	push   ecx
c001b595:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b59a:	52                   	push   edx
c001b59b:	53                   	push   ebx
c001b59c:	43                   	inc    ebx
c001b59d:	56                   	push   esi
c001b59e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5a2:	e8 03 03 00 00       	call   c001b8aa <PCI::checkDevice(unsigned char, unsigned char)>
c001b5a7:	83 c4 10             	add    esp,0x10
c001b5aa:	83 fb 20             	cmp    ebx,0x20
c001b5ad:	75 eb                	jne    c001b59a <PCI::checkBus(unsigned char)+0xa>
c001b5af:	58                   	pop    eax
c001b5b0:	5b                   	pop    ebx
c001b5b1:	5e                   	pop    esi
c001b5b2:	c3                   	ret    
c001b5b3:	90                   	nop

c001b5b4 <PCI::foundDevice(PCIDeviceInfo)>:
c001b5b4:	55                   	push   ebp
c001b5b5:	57                   	push   edi
c001b5b6:	56                   	push   esi
c001b5b7:	53                   	push   ebx
c001b5b8:	83 ec 1c             	sub    esp,0x1c
c001b5bb:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b5c0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b5c4:	3d ff ff 00 00       	cmp    eax,0xffff
c001b5c9:	0f 84 57 01 00 00    	je     c001b726 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b5cf:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b5d4:	66 3d 06 04          	cmp    ax,0x406
c001b5d8:	75 2c                	jne    c001b606 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b5da:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b5df:	50                   	push   eax
c001b5e0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b5e5:	50                   	push   eax
c001b5e6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b5eb:	50                   	push   eax
c001b5ec:	53                   	push   ebx
c001b5ed:	e8 64 fb ff ff       	call   c001b156 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b5f2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b5f6:	0f b6 c0             	movzx  eax,al
c001b5f9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b5fd:	83 c4 2c             	add    esp,0x2c
c001b600:	5b                   	pop    ebx
c001b601:	5e                   	pop    esi
c001b602:	5f                   	pop    edi
c001b603:	5d                   	pop    ebp
c001b604:	eb 8a                	jmp    c001b590 <PCI::checkBus(unsigned char)>
c001b606:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b60a:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b610:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b614:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b618:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b61d:	85 d2                	test   edx,edx
c001b61f:	74 36                	je     c001b657 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b621:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b624:	85 c9                	test   ecx,ecx
c001b626:	74 2b                	je     c001b653 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b628:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b62e:	31 ee                	xor    esi,ebp
c001b630:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b636:	75 1b                	jne    c001b653 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b638:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b63c:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b642:	75 0f                	jne    c001b653 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b644:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b64b:	39 f9                	cmp    ecx,edi
c001b64d:	0f 84 d3 00 00 00    	je     c001b726 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b653:	8b 12                	mov    edx,DWORD PTR [edx]
c001b655:	eb c6                	jmp    c001b61d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b657:	3d 01 06 00 00       	cmp    eax,0x601
c001b65c:	75 19                	jne    c001b677 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b65e:	83 ec 0c             	sub    esp,0xc
c001b661:	68 64 01 00 00       	push   0x164
c001b666:	e8 4b c4 fe ff       	call   c0007ab6 <malloc>
c001b66b:	89 c5                	mov    ebp,eax
c001b66d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b670:	e8 a1 0e 00 00       	call   c001c516 <SATABus::SATABus()>
c001b675:	eb 1e                	jmp    c001b695 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b677:	3d 01 01 00 00       	cmp    eax,0x101
c001b67c:	75 62                	jne    c001b6e0 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b67e:	83 ec 0c             	sub    esp,0xc
c001b681:	68 70 02 00 00       	push   0x270
c001b686:	e8 2b c4 fe ff       	call   c0007ab6 <malloc>
c001b68b:	89 c5                	mov    ebp,eax
c001b68d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b690:	e8 e5 02 00 00       	call   c001b97a <IDE::IDE()>
c001b695:	5f                   	pop    edi
c001b696:	58                   	pop    eax
c001b697:	55                   	push   ebp
c001b698:	53                   	push   ebx
c001b699:	e8 88 10 ff ff       	call   c000c726 <Device::addChild(Device*)>
c001b69e:	83 ec 1c             	sub    esp,0x1c
c001b6a1:	b9 09 00 00 00       	mov    ecx,0x9
c001b6a6:	fc                   	cld    
c001b6a7:	89 e7                	mov    edi,esp
c001b6a9:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b6ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6af:	55                   	push   ebp
c001b6b0:	e8 b7 0f ff ff       	call   c000c66c <Device::preOpenPCI(PCIDeviceInfo)>
c001b6b5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b6b8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b6bc:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b6c4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b6cc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b6d4:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b6d7:	83 c4 4c             	add    esp,0x4c
c001b6da:	5b                   	pop    ebx
c001b6db:	5e                   	pop    esi
c001b6dc:	5f                   	pop    edi
c001b6dd:	5d                   	pop    ebp
c001b6de:	ff e0                	jmp    eax
c001b6e0:	83 ec 0c             	sub    esp,0xc
c001b6e3:	68 58 01 00 00       	push   0x158
c001b6e8:	e8 c9 c3 fe ff       	call   c0007ab6 <malloc>
c001b6ed:	89 c5                	mov    ebp,eax
c001b6ef:	58                   	pop    eax
c001b6f0:	5a                   	pop    edx
c001b6f1:	68 4a 2d 02 c0       	push   0xc0022d4a
c001b6f6:	55                   	push   ebp
c001b6f7:	e8 c8 12 ff ff       	call   c000c9c4 <DriverlessDevice::DriverlessDevice(char const*)>
c001b6fc:	59                   	pop    ecx
c001b6fd:	5e                   	pop    esi
c001b6fe:	55                   	push   ebp
c001b6ff:	53                   	push   ebx
c001b700:	e8 21 10 ff ff       	call   c000c726 <Device::addChild(Device*)>
c001b705:	83 c4 10             	add    esp,0x10
c001b708:	b9 09 00 00 00       	mov    ecx,0x9
c001b70d:	fc                   	cld    
c001b70e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b712:	89 fe                	mov    esi,edi
c001b714:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b716:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b71a:	83 c4 1c             	add    esp,0x1c
c001b71d:	5b                   	pop    ebx
c001b71e:	5e                   	pop    esi
c001b71f:	5f                   	pop    edi
c001b720:	5d                   	pop    ebp
c001b721:	e9 46 0f ff ff       	jmp    c000c66c <Device::preOpenPCI(PCIDeviceInfo)>
c001b726:	83 c4 1c             	add    esp,0x1c
c001b729:	5b                   	pop    ebx
c001b72a:	5e                   	pop    esi
c001b72b:	5f                   	pop    edi
c001b72c:	5d                   	pop    ebp
c001b72d:	c3                   	ret    

c001b72e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b72e:	55                   	push   ebp
c001b72f:	57                   	push   edi
c001b730:	56                   	push   esi
c001b731:	53                   	push   ebx
c001b732:	83 ec 68             	sub    esp,0x68
c001b735:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b739:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b740:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b744:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b74b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b750:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b754:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b75b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b764:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b769:	6a 0c                	push   0xc
c001b76b:	57                   	push   edi
c001b76c:	53                   	push   ebx
c001b76d:	56                   	push   esi
c001b76e:	55                   	push   ebp
c001b76f:	e8 32 f8 ff ff       	call   c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b774:	83 c4 20             	add    esp,0x20
c001b777:	57                   	push   edi
c001b778:	53                   	push   ebx
c001b779:	56                   	push   esi
c001b77a:	55                   	push   ebp
c001b77b:	e8 1c f9 ff ff       	call   c001b09c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b780:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b785:	57                   	push   edi
c001b786:	53                   	push   ebx
c001b787:	56                   	push   esi
c001b788:	55                   	push   ebp
c001b789:	e8 a4 f9 ff ff       	call   c001b132 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b78e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b792:	83 c4 14             	add    esp,0x14
c001b795:	6a 3c                	push   0x3c
c001b797:	57                   	push   edi
c001b798:	53                   	push   ebx
c001b799:	56                   	push   esi
c001b79a:	55                   	push   ebp
c001b79b:	e8 06 f8 ff ff       	call   c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b7a0:	0f b6 c4             	movzx  eax,ah
c001b7a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b7a7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b7ab:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b7af:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b7b4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b7ba:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b7c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b7c4:	83 c4 20             	add    esp,0x20
c001b7c7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b7cc:	74 30                	je     c001b7fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b7ce:	31 c0                	xor    eax,eax
c001b7d0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b7d4:	7e 28                	jle    c001b7fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b7d6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b7de:	39 cb                	cmp    ebx,ecx
c001b7e0:	75 19                	jne    c001b7fb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b7e2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b7ea:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b7ee:	75 0b                	jne    c001b7fb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b7f0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b7f7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b7fb:	40                   	inc    eax
c001b7fc:	eb d2                	jmp    c001b7d0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b7fe:	31 d2                	xor    edx,edx
c001b800:	83 ec 0c             	sub    esp,0xc
c001b803:	57                   	push   edi
c001b804:	53                   	push   ebx
c001b805:	56                   	push   esi
c001b806:	52                   	push   edx
c001b807:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b80b:	55                   	push   ebp
c001b80c:	e8 6d f9 ff ff       	call   c001b17e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b811:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b815:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b819:	42                   	inc    edx
c001b81a:	83 c4 20             	add    esp,0x20
c001b81d:	83 fa 06             	cmp    edx,0x6
c001b820:	75 de                	jne    c001b800 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b822:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b826:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b82a:	c1 e2 08             	shl    edx,0x8
c001b82d:	83 ec 0c             	sub    esp,0xc
c001b830:	0f b6 c4             	movzx  eax,ah
c001b833:	09 d0                	or     eax,edx
c001b835:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b83a:	6a 02                	push   0x2
c001b83c:	57                   	push   edi
c001b83d:	53                   	push   ebx
c001b83e:	56                   	push   esi
c001b83f:	55                   	push   ebp
c001b840:	e8 61 f7 ff ff       	call   c001afa6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b845:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b84a:	83 c4 20             	add    esp,0x20
c001b84d:	57                   	push   edi
c001b84e:	53                   	push   ebx
c001b84f:	56                   	push   esi
c001b850:	55                   	push   ebp
c001b851:	e8 90 f8 ff ff       	call   c001b0e6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b856:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b85a:	57                   	push   edi
c001b85b:	53                   	push   ebx
c001b85c:	56                   	push   esi
c001b85d:	55                   	push   ebp
c001b85e:	e8 ed f7 ff ff       	call   c001b050 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b863:	b9 09 00 00 00       	mov    ecx,0x9
c001b868:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b86d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b871:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b875:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b879:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b87d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b881:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b885:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b889:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b88d:	83 ec 0c             	sub    esp,0xc
c001b890:	fc                   	cld    
c001b891:	89 e7                	mov    edi,esp
c001b893:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b897:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b899:	55                   	push   ebp
c001b89a:	e8 15 fd ff ff       	call   c001b5b4 <PCI::foundDevice(PCIDeviceInfo)>
c001b89f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b8a5:	5b                   	pop    ebx
c001b8a6:	5e                   	pop    esi
c001b8a7:	5f                   	pop    edi
c001b8a8:	5d                   	pop    ebp
c001b8a9:	c3                   	ret    

c001b8aa <PCI::checkDevice(unsigned char, unsigned char)>:
c001b8aa:	55                   	push   ebp
c001b8ab:	57                   	push   edi
c001b8ac:	56                   	push   esi
c001b8ad:	53                   	push   ebx
c001b8ae:	83 ec 0c             	sub    esp,0xc
c001b8b1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b8b5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b8ba:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b8bf:	6a 00                	push   0x0
c001b8c1:	56                   	push   esi
c001b8c2:	57                   	push   edi
c001b8c3:	55                   	push   ebp
c001b8c4:	e8 87 f7 ff ff       	call   c001b050 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b8c9:	6a 00                	push   0x0
c001b8cb:	56                   	push   esi
c001b8cc:	57                   	push   edi
c001b8cd:	55                   	push   ebp
c001b8ce:	e8 5b fe ff ff       	call   c001b72e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b8d3:	83 c4 20             	add    esp,0x20
c001b8d6:	6a 00                	push   0x0
c001b8d8:	56                   	push   esi
c001b8d9:	57                   	push   edi
c001b8da:	55                   	push   ebp
c001b8db:	e8 94 f7 ff ff       	call   c001b074 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b8e0:	83 c4 10             	add    esp,0x10
c001b8e3:	a8 80                	test   al,0x80
c001b8e5:	74 2d                	je     c001b914 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b8e7:	bb 01 00 00 00       	mov    ebx,0x1
c001b8ec:	53                   	push   ebx
c001b8ed:	56                   	push   esi
c001b8ee:	57                   	push   edi
c001b8ef:	55                   	push   ebp
c001b8f0:	e8 5b f7 ff ff       	call   c001b050 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b8f5:	83 c4 10             	add    esp,0x10
c001b8f8:	0f b7 c0             	movzx  eax,ax
c001b8fb:	3d ff ff 00 00       	cmp    eax,0xffff
c001b900:	74 0c                	je     c001b90e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b902:	53                   	push   ebx
c001b903:	56                   	push   esi
c001b904:	57                   	push   edi
c001b905:	55                   	push   ebp
c001b906:	e8 23 fe ff ff       	call   c001b72e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b90b:	83 c4 10             	add    esp,0x10
c001b90e:	43                   	inc    ebx
c001b90f:	83 fb 08             	cmp    ebx,0x8
c001b912:	75 d8                	jne    c001b8ec <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b914:	83 c4 0c             	add    esp,0xc
c001b917:	5b                   	pop    ebx
c001b918:	5e                   	pop    esi
c001b919:	5f                   	pop    edi
c001b91a:	5d                   	pop    ebp
c001b91b:	c3                   	ret    

c001b91c <PCI::detect()>:
c001b91c:	56                   	push   esi
c001b91d:	53                   	push   ebx
c001b91e:	53                   	push   ebx
c001b91f:	31 db                	xor    ebx,ebx
c001b921:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b925:	6a 00                	push   0x0
c001b927:	6a 00                	push   0x0
c001b929:	6a 00                	push   0x0
c001b92b:	56                   	push   esi
c001b92c:	e8 43 f7 ff ff       	call   c001b074 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b931:	83 c4 10             	add    esp,0x10
c001b934:	a8 80                	test   al,0x80
c001b936:	75 21                	jne    c001b959 <PCI::detect()+0x3d>
c001b938:	51                   	push   ecx
c001b939:	51                   	push   ecx
c001b93a:	6a 00                	push   0x0
c001b93c:	56                   	push   esi
c001b93d:	e8 4e fc ff ff       	call   c001b590 <PCI::checkBus(unsigned char)>
c001b942:	83 c4 10             	add    esp,0x10
c001b945:	eb 2a                	jmp    c001b971 <PCI::detect()+0x55>
c001b947:	52                   	push   edx
c001b948:	52                   	push   edx
c001b949:	53                   	push   ebx
c001b94a:	43                   	inc    ebx
c001b94b:	56                   	push   esi
c001b94c:	e8 3f fc ff ff       	call   c001b590 <PCI::checkBus(unsigned char)>
c001b951:	83 c4 10             	add    esp,0x10
c001b954:	83 fb 08             	cmp    ebx,0x8
c001b957:	74 18                	je     c001b971 <PCI::detect()+0x55>
c001b959:	53                   	push   ebx
c001b95a:	6a 00                	push   0x0
c001b95c:	6a 00                	push   0x0
c001b95e:	56                   	push   esi
c001b95f:	e8 ec f6 ff ff       	call   c001b050 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b964:	83 c4 10             	add    esp,0x10
c001b967:	0f b7 c0             	movzx  eax,ax
c001b96a:	3d ff ff 00 00       	cmp    eax,0xffff
c001b96f:	74 d6                	je     c001b947 <PCI::detect()+0x2b>
c001b971:	58                   	pop    eax
c001b972:	5b                   	pop    ebx
c001b973:	5e                   	pop    esi
c001b974:	c3                   	ret    
c001b975:	90                   	nop

c001b976 <IDE::close(int, int, void*)>:
c001b976:	83 c8 ff             	or     eax,0xffffffff
c001b979:	c3                   	ret    

c001b97a <IDE::IDE()>:
c001b97a:	83 ec 0c             	sub    esp,0xc
c001b97d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b981:	83 ec 08             	sub    esp,0x8
c001b984:	68 90 2d 02 c0       	push   0xc0022d90
c001b989:	50                   	push   eax
c001b98a:	e8 d9 10 ff ff       	call   c000ca68 <HardDiskController::HardDiskController(char const*)>
c001b98f:	83 c4 10             	add    esp,0x10
c001b992:	ba 20 2e 02 c0       	mov    edx,0xc0022e20
c001b997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b99b:	89 10                	mov    DWORD PTR [eax],edx
c001b99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b9a8:	90                   	nop
c001b9a9:	83 c4 0c             	add    esp,0xc
c001b9ac:	c3                   	ret    
c001b9ad:	90                   	nop

c001b9ae <IDE::prepareInterrupt(unsigned char)>:
c001b9ae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b9b3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b9b7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b9bf:	c3                   	ret    

c001b9c0 <selectDrive(unsigned char, unsigned char)>:
c001b9c0:	c3                   	ret    
c001b9c1:	90                   	nop

c001b9c2 <IDE::getBase(unsigned char)>:
c001b9c2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b9c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9cb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b9d3:	c3                   	ret    

c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b9d4:	55                   	push   ebp
c001b9d5:	57                   	push   edi
c001b9d6:	56                   	push   esi
c001b9d7:	53                   	push   ebx
c001b9d8:	83 ec 1c             	sub    esp,0x1c
c001b9db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b9df:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b9e3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b9e6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b9ea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b9ee:	80 f9 03             	cmp    cl,0x3
c001b9f1:	77 4f                	ja     c001ba42 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b9f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9f7:	0f b6 fa             	movzx  edi,dl
c001b9fa:	0f b6 db             	movzx  ebx,bl
c001b9fd:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ba00:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ba05:	80 ca 80             	or     dl,0x80
c001ba08:	52                   	push   edx
c001ba09:	6a 0c                	push   0xc
c001ba0b:	57                   	push   edi
c001ba0c:	56                   	push   esi
c001ba0d:	e8 c2 ff ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba12:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ba17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba1b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ba1f:	ee                   	out    dx,al
c001ba20:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ba25:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001ba29:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ba2d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ba31:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ba39:	83 c4 2c             	add    esp,0x2c
c001ba3c:	5b                   	pop    ebx
c001ba3d:	5e                   	pop    esi
c001ba3e:	5f                   	pop    edi
c001ba3f:	5d                   	pop    ebp
c001ba40:	eb 92                	jmp    c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba42:	0f b6 cb             	movzx  ecx,bl
c001ba45:	83 f9 07             	cmp    ecx,0x7
c001ba48:	77 12                	ja     c001ba5c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ba4a:	0f b6 d2             	movzx  edx,dl
c001ba4d:	0f b6 db             	movzx  ebx,bl
c001ba50:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ba58:	01 da                	add    edx,ebx
c001ba5a:	eb 2f                	jmp    c001ba8b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ba5c:	83 f9 0d             	cmp    ecx,0xd
c001ba5f:	77 13                	ja     c001ba74 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ba61:	0f b6 d2             	movzx  edx,dl
c001ba64:	0f b6 db             	movzx  ebx,bl
c001ba67:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ba6e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ba72:	eb 17                	jmp    c001ba8b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ba74:	83 f9 15             	cmp    ecx,0x15
c001ba77:	77 13                	ja     c001ba8c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ba79:	0f b6 d2             	movzx  edx,dl
c001ba7c:	0f b6 db             	movzx  ebx,bl
c001ba7f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001ba87:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ba8b:	ee                   	out    dx,al
c001ba8c:	83 c4 1c             	add    esp,0x1c
c001ba8f:	5b                   	pop    ebx
c001ba90:	5e                   	pop    esi
c001ba91:	5f                   	pop    edi
c001ba92:	5d                   	pop    ebp
c001ba93:	c3                   	ret    

c001ba94 <IDE::read(unsigned char, unsigned char)>:
c001ba94:	55                   	push   ebp
c001ba95:	57                   	push   edi
c001ba96:	56                   	push   esi
c001ba97:	53                   	push   ebx
c001ba98:	83 ec 1c             	sub    esp,0x1c
c001ba9b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ba9f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001baa3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001baa6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001baaa:	3c 03                	cmp    al,0x3
c001baac:	77 40                	ja     c001baee <IDE::read(unsigned char, unsigned char)+0x5a>
c001baae:	0f b6 f9             	movzx  edi,cl
c001bab1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bab4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bab9:	0c 80                	or     al,0x80
c001babb:	50                   	push   eax
c001babc:	6a 0c                	push   0xc
c001babe:	57                   	push   edi
c001babf:	56                   	push   esi
c001bac0:	e8 0f ff ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bac5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001baca:	0f b6 d3             	movzx  edx,bl
c001bacd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bad1:	ec                   	in     al,dx
c001bad2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bad6:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001badb:	52                   	push   edx
c001badc:	6a 0c                	push   0xc
c001bade:	57                   	push   edi
c001badf:	56                   	push   esi
c001bae0:	e8 ef fe ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bae5:	83 c4 20             	add    esp,0x20
c001bae8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001baec:	eb 4c                	jmp    c001bb3a <IDE::read(unsigned char, unsigned char)+0xa6>
c001baee:	0f b6 d3             	movzx  edx,bl
c001baf1:	83 fa 07             	cmp    edx,0x7
c001baf4:	77 12                	ja     c001bb08 <IDE::read(unsigned char, unsigned char)+0x74>
c001baf6:	0f b6 c9             	movzx  ecx,cl
c001baf9:	0f b6 d3             	movzx  edx,bl
c001bafc:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001bb04:	01 c2                	add    edx,eax
c001bb06:	eb 31                	jmp    c001bb39 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bb08:	83 fa 0d             	cmp    edx,0xd
c001bb0b:	77 13                	ja     c001bb20 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bb0d:	0f b6 c9             	movzx  ecx,cl
c001bb10:	0f b6 d3             	movzx  edx,bl
c001bb13:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bb1a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bb1e:	eb 19                	jmp    c001bb39 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bb20:	31 c0                	xor    eax,eax
c001bb22:	83 fa 15             	cmp    edx,0x15
c001bb25:	77 13                	ja     c001bb3a <IDE::read(unsigned char, unsigned char)+0xa6>
c001bb27:	0f b6 c9             	movzx  ecx,cl
c001bb2a:	0f b6 d3             	movzx  edx,bl
c001bb2d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bb35:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bb39:	ec                   	in     al,dx
c001bb3a:	83 c4 1c             	add    esp,0x1c
c001bb3d:	5b                   	pop    ebx
c001bb3e:	5e                   	pop    esi
c001bb3f:	5f                   	pop    edi
c001bb40:	5d                   	pop    ebp
c001bb41:	c3                   	ret    

c001bb42 <IDE::waitInterrupt(unsigned char)>:
c001bb42:	55                   	push   ebp
c001bb43:	57                   	push   edi
c001bb44:	56                   	push   esi
c001bb45:	53                   	push   ebx
c001bb46:	31 db                	xor    ebx,ebx
c001bb48:	83 ec 0c             	sub    esp,0xc
c001bb4b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bb4f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bb54:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bb5c:	89 e8                	mov    eax,ebp
c001bb5e:	84 c0                	test   al,al
c001bb60:	75 30                	jne    c001bb92 <IDE::waitInterrupt(unsigned char)+0x50>
c001bb62:	50                   	push   eax
c001bb63:	6a 0c                	push   0xc
c001bb65:	56                   	push   esi
c001bb66:	57                   	push   edi
c001bb67:	e8 28 ff ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001bb6c:	83 c4 10             	add    esp,0x10
c001bb6f:	a8 01                	test   al,0x1
c001bb71:	75 27                	jne    c001bb9a <IDE::waitInterrupt(unsigned char)+0x58>
c001bb73:	f6 c3 04             	test   bl,0x4
c001bb76:	75 12                	jne    c001bb8a <IDE::waitInterrupt(unsigned char)+0x48>
c001bb78:	83 fb 32             	cmp    ebx,0x32
c001bb7b:	7e 0d                	jle    c001bb8a <IDE::waitInterrupt(unsigned char)+0x48>
c001bb7d:	83 ec 0c             	sub    esp,0xc
c001bb80:	6a 64                	push   0x64
c001bb82:	e8 b5 a4 ff ff       	call   c001603c <milliTenthSleep(unsigned int)>
c001bb87:	83 c4 10             	add    esp,0x10
c001bb8a:	83 fb 3c             	cmp    ebx,0x3c
c001bb8d:	74 0b                	je     c001bb9a <IDE::waitInterrupt(unsigned char)+0x58>
c001bb8f:	43                   	inc    ebx
c001bb90:	eb c2                	jmp    c001bb54 <IDE::waitInterrupt(unsigned char)+0x12>
c001bb92:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bb9a:	83 c4 0c             	add    esp,0xc
c001bb9d:	89 e8                	mov    eax,ebp
c001bb9f:	5b                   	pop    ebx
c001bba0:	5e                   	pop    esi
c001bba1:	5f                   	pop    edi
c001bba2:	5d                   	pop    ebp
c001bba3:	c3                   	ret    

c001bba4 <ideChannel0IRQHandler(regs*, void*)>:
c001bba4:	83 ec 10             	sub    esp,0x10
c001bba7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbab:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bbb2:	6a 07                	push   0x7
c001bbb4:	6a 00                	push   0x0
c001bbb6:	50                   	push   eax
c001bbb7:	e8 d8 fe ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001bbbc:	83 c4 1c             	add    esp,0x1c
c001bbbf:	c3                   	ret    

c001bbc0 <ideChannel1IRQHandler(regs*, void*)>:
c001bbc0:	83 ec 10             	sub    esp,0x10
c001bbc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbc7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bbce:	6a 07                	push   0x7
c001bbd0:	6a 01                	push   0x1
c001bbd2:	50                   	push   eax
c001bbd3:	e8 bc fe ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001bbd8:	83 c4 1c             	add    esp,0x1c
c001bbdb:	c3                   	ret    

c001bbdc <IDE::enableIRQs(unsigned char, bool)>:
c001bbdc:	57                   	push   edi
c001bbdd:	b8 02 00 00 00       	mov    eax,0x2
c001bbe2:	56                   	push   esi
c001bbe3:	53                   	push   ebx
c001bbe4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bbe8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bbec:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bbf1:	74 02                	je     c001bbf5 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bbf3:	31 c0                	xor    eax,eax
c001bbf5:	0f b6 db             	movzx  ebx,bl
c001bbf8:	bf 04 00 00 00       	mov    edi,0x4
c001bbfd:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bc04:	50                   	push   eax
c001bc05:	6a 0c                	push   0xc
c001bc07:	53                   	push   ebx
c001bc08:	56                   	push   esi
c001bc09:	e8 c6 fd ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc0e:	83 c4 10             	add    esp,0x10
c001bc11:	50                   	push   eax
c001bc12:	6a 0c                	push   0xc
c001bc14:	53                   	push   ebx
c001bc15:	56                   	push   esi
c001bc16:	e8 79 fe ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001bc1b:	83 c4 10             	add    esp,0x10
c001bc1e:	4f                   	dec    edi
c001bc1f:	75 f0                	jne    c001bc11 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bc21:	5b                   	pop    ebx
c001bc22:	5e                   	pop    esi
c001bc23:	5f                   	pop    edi
c001bc24:	c3                   	ret    
c001bc25:	90                   	nop

c001bc26 <IDE::open(int, int, void*)>:
c001bc26:	55                   	push   ebp
c001bc27:	57                   	push   edi
c001bc28:	56                   	push   esi
c001bc29:	53                   	push   ebx
c001bc2a:	83 ec 1c             	sub    esp,0x1c
c001bc2d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bc31:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bc3a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bc43:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bc4a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bc51:	0f 85 de 02 00 00    	jne    c001bf35 <IDE::open(int, int, void*)+0x30f>
c001bc57:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bc5d:	88 04 24             	mov    BYTE PTR [esp],al
c001bc60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bc63:	83 e0 7f             	and    eax,0x7f
c001bc66:	83 f8 05             	cmp    eax,0x5
c001bc69:	74 05                	je     c001bc70 <IDE::open(int, int, void*)+0x4a>
c001bc6b:	83 f8 0f             	cmp    eax,0xf
c001bc6e:	75 32                	jne    c001bca2 <IDE::open(int, int, void*)+0x7c>
c001bc70:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bc76:	83 e0 fc             	and    eax,0xfffffffc
c001bc79:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bc80:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bc86:	83 e0 fc             	and    eax,0xfffffffc
c001bc89:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bc90:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bc96:	83 e0 fc             	and    eax,0xfffffffc
c001bc99:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bca0:	eb 14                	jmp    c001bcb6 <IDE::open(int, int, void*)+0x90>
c001bca2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bcac:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bcb6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bcbd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bcc4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bcc8:	89 c6                	mov    esi,eax
c001bcca:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bccf:	c1 e6 10             	shl    esi,0x10
c001bcd2:	89 e8                	mov    eax,ebp
c001bcd4:	89 fa                	mov    edx,edi
c001bcd6:	c1 e0 0b             	shl    eax,0xb
c001bcd9:	09 f0                	or     eax,esi
c001bcdb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bce2:	c1 e6 08             	shl    esi,0x8
c001bce5:	09 c6                	or     esi,eax
c001bce7:	89 f0                	mov    eax,esi
c001bce9:	0d 08 00 00 80       	or     eax,0x80000008
c001bcee:	ef                   	out    dx,eax
c001bcef:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bcf4:	89 ca                	mov    edx,ecx
c001bcf6:	ed                   	in     eax,dx
c001bcf7:	c1 e8 10             	shr    eax,0x10
c001bcfa:	3d ff ff 00 00       	cmp    eax,0xffff
c001bcff:	0f 84 f9 00 00 00    	je     c001bdfe <IDE::open(int, int, void*)+0x1d8>
c001bd05:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bd0b:	89 fa                	mov    edx,edi
c001bd0d:	89 f0                	mov    eax,esi
c001bd0f:	ef                   	out    dx,eax
c001bd10:	b0 fe                	mov    al,0xfe
c001bd12:	89 ca                	mov    edx,ecx
c001bd14:	ee                   	out    dx,al
c001bd15:	89 f0                	mov    eax,esi
c001bd17:	89 fa                	mov    edx,edi
c001bd19:	ef                   	out    dx,eax
c001bd1a:	89 ca                	mov    edx,ecx
c001bd1c:	ed                   	in     eax,dx
c001bd1d:	3c fe                	cmp    al,0xfe
c001bd1f:	0f 85 a9 00 00 00    	jne    c001bdce <IDE::open(int, int, void*)+0x1a8>
c001bd25:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bd2b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bd32:	74 33                	je     c001bd67 <IDE::open(int, int, void*)+0x141>
c001bd34:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bd3a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bd3e:	40                   	inc    eax
c001bd3f:	83 ec 0c             	sub    esp,0xc
c001bd42:	0f b6 c0             	movzx  eax,al
c001bd45:	50                   	push   eax
c001bd46:	55                   	push   ebp
c001bd47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bd4b:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bd51:	51                   	push   ecx
c001bd52:	e8 41 39 ff ff       	call   c000f698 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bd57:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bd5c:	83 c4 1c             	add    esp,0x1c
c001bd5f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bd65:	eb 0a                	jmp    c001bd71 <IDE::open(int, int, void*)+0x14b>
c001bd67:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bd71:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bd78:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bd7f:	c1 e1 10             	shl    ecx,0x10
c001bd82:	c1 e0 08             	shl    eax,0x8
c001bd85:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bd8a:	09 c1                	or     ecx,eax
c001bd8c:	89 fa                	mov    edx,edi
c001bd8e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bd95:	c1 e0 0b             	shl    eax,0xb
c001bd98:	09 c1                	or     ecx,eax
c001bd9a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bda0:	89 c8                	mov    eax,ecx
c001bda2:	ef                   	out    dx,eax
c001bda3:	be fc 0c 00 00       	mov    esi,0xcfc
c001bda8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bdae:	89 f2                	mov    edx,esi
c001bdb0:	ee                   	out    dx,al
c001bdb1:	89 c8                	mov    eax,ecx
c001bdb3:	89 fa                	mov    edx,edi
c001bdb5:	ef                   	out    dx,eax
c001bdb6:	89 f2                	mov    edx,esi
c001bdb8:	ed                   	in     eax,dx
c001bdb9:	0f b6 c0             	movzx  eax,al
c001bdbc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bdc2:	74 4a                	je     c001be0e <IDE::open(int, int, void*)+0x1e8>
c001bdc4:	83 ec 0c             	sub    esp,0xc
c001bdc7:	68 a8 2d 02 c0       	push   0xc0022da8
c001bdcc:	eb 38                	jmp    c001be06 <IDE::open(int, int, void*)+0x1e0>
c001bdce:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bdd7:	75 1b                	jne    c001bdf4 <IDE::open(int, int, void*)+0x1ce>
c001bdd9:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001bddd:	3d 80 00 00 00       	cmp    eax,0x80
c001bde2:	74 07                	je     c001bdeb <IDE::open(int, int, void*)+0x1c5>
c001bde4:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bde9:	75 09                	jne    c001bdf4 <IDE::open(int, int, void*)+0x1ce>
c001bdeb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bdf2:	eb 1a                	jmp    c001be0e <IDE::open(int, int, void*)+0x1e8>
c001bdf4:	83 ec 0c             	sub    esp,0xc
c001bdf7:	68 b0 2d 02 c0       	push   0xc0022db0
c001bdfc:	eb 08                	jmp    c001be06 <IDE::open(int, int, void*)+0x1e0>
c001bdfe:	83 ec 0c             	sub    esp,0xc
c001be01:	68 e1 2d 02 c0       	push   0xc0022de1
c001be06:	e8 46 55 ff ff       	call   c0011351 <KePanic(char const*)>
c001be0b:	83 c4 10             	add    esp,0x10
c001be0e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001be15:	74 1a                	je     c001be31 <IDE::open(int, int, void*)+0x20b>
c001be17:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001be1d:	83 e0 fc             	and    eax,0xfffffffc
c001be20:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001be27:	83 c0 08             	add    eax,0x8
c001be2a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001be31:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001be37:	89 c2                	mov    edx,eax
c001be39:	83 e2 0f             	and    edx,0xf
c001be3c:	83 fa 08             	cmp    edx,0x8
c001be3f:	75 0a                	jne    c001be4b <IDE::open(int, int, void*)+0x225>
c001be41:	83 e8 02             	sub    eax,0x2
c001be44:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be4b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001be51:	89 c2                	mov    edx,eax
c001be53:	83 e2 0f             	and    edx,0xf
c001be56:	83 fa 08             	cmp    edx,0x8
c001be59:	75 0a                	jne    c001be65 <IDE::open(int, int, void*)+0x23f>
c001be5b:	83 e8 02             	sub    eax,0x2
c001be5e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001be65:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001be6c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001be73:	89 d0                	mov    eax,edx
c001be75:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be78:	8d 7a 01             	lea    edi,[edx+0x1]
c001be7b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be7f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001be83:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001be87:	83 e1 3f             	and    ecx,0x3f
c001be8a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001be8e:	89 f9                	mov    ecx,edi
c001be90:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001be97:	0f b6 c9             	movzx  ecx,cl
c001be9a:	8d 78 02             	lea    edi,[eax+0x2]
c001be9d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bea0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bea4:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bea8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001beac:	83 e2 3f             	and    edx,0x3f
c001beaf:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001beb3:	89 f9                	mov    ecx,edi
c001beb5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bebb:	0f b6 d1             	movzx  edx,cl
c001bebe:	8d 78 03             	lea    edi,[eax+0x3]
c001bec1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bec4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bec8:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001becc:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bed0:	83 e1 3f             	and    ecx,0x3f
c001bed3:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bed7:	89 f9                	mov    ecx,edi
c001bed9:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bedf:	0f b6 c9             	movzx  ecx,cl
c001bee2:	8d 78 04             	lea    edi,[eax+0x4]
c001bee5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bee8:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001beec:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bef0:	89 fa                	mov    edx,edi
c001bef2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bef8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001befc:	83 e2 3f             	and    edx,0x3f
c001beff:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bf03:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bf0a:	66 85 f6             	test   si,si
c001bf0d:	74 65                	je     c001bf74 <IDE::open(int, int, void*)+0x34e>
c001bf0f:	89 f9                	mov    ecx,edi
c001bf11:	83 c0 05             	add    eax,0x5
c001bf14:	0f b6 d1             	movzx  edx,cl
c001bf17:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bf1a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bf1e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bf22:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bf28:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bf2c:	83 e0 3f             	and    eax,0x3f
c001bf2f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bf33:	eb 3f                	jmp    c001bf74 <IDE::open(int, int, void*)+0x34e>
c001bf35:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bf3b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bf42:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bf49:	05 06 02 00 00       	add    eax,0x206
c001bf4e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bf55:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bf5c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bf63:	05 06 02 00 00       	add    eax,0x206
c001bf68:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bf6f:	e9 bd fe ff ff       	jmp    c001be31 <IDE::open(int, int, void*)+0x20b>
c001bf74:	50                   	push   eax
c001bf75:	50                   	push   eax
c001bf76:	6a 00                	push   0x0
c001bf78:	53                   	push   ebx
c001bf79:	e8 30 fa ff ff       	call   c001b9ae <IDE::prepareInterrupt(unsigned char)>
c001bf7e:	5a                   	pop    edx
c001bf7f:	59                   	pop    ecx
c001bf80:	6a 01                	push   0x1
c001bf82:	53                   	push   ebx
c001bf83:	e8 26 fa ff ff       	call   c001b9ae <IDE::prepareInterrupt(unsigned char)>
c001bf88:	83 c4 0c             	add    esp,0xc
c001bf8b:	6a 00                	push   0x0
c001bf8d:	6a 00                	push   0x0
c001bf8f:	53                   	push   ebx
c001bf90:	e8 47 fc ff ff       	call   c001bbdc <IDE::enableIRQs(unsigned char, bool)>
c001bf95:	83 c4 0c             	add    esp,0xc
c001bf98:	6a 00                	push   0x0
c001bf9a:	6a 01                	push   0x1
c001bf9c:	53                   	push   ebx
c001bf9d:	e8 3a fc ff ff       	call   c001bbdc <IDE::enableIRQs(unsigned char, bool)>
c001bfa2:	83 c4 10             	add    esp,0x10
c001bfa5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bfac:	74 34                	je     c001bfe2 <IDE::open(int, int, void*)+0x3bc>
c001bfae:	83 ec 0c             	sub    esp,0xc
c001bfb1:	53                   	push   ebx
c001bfb2:	6a 01                	push   0x1
c001bfb4:	68 a4 bb 01 c0       	push   0xc001bba4
c001bfb9:	6a 0e                	push   0xe
c001bfbb:	53                   	push   ebx
c001bfbc:	e8 11 07 ff ff       	call   c000c6d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bfc1:	83 c4 14             	add    esp,0x14
c001bfc4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bfca:	53                   	push   ebx
c001bfcb:	6a 01                	push   0x1
c001bfcd:	68 c0 bb 01 c0       	push   0xc001bbc0
c001bfd2:	6a 0f                	push   0xf
c001bfd4:	53                   	push   ebx
c001bfd5:	e8 f8 06 ff ff       	call   c000c6d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bfda:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bfe0:	eb 38                	jmp    c001c01a <IDE::open(int, int, void*)+0x3f4>
c001bfe2:	83 ec 0c             	sub    esp,0xc
c001bfe5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bfef:	53                   	push   ebx
c001bff0:	6a 00                	push   0x0
c001bff2:	68 a4 bb 01 c0       	push   0xc001bba4
c001bff7:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bffd:	53                   	push   ebx
c001bffe:	e8 cf 06 ff ff       	call   c000c6d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c003:	83 c4 14             	add    esp,0x14
c001c006:	53                   	push   ebx
c001c007:	6a 00                	push   0x0
c001c009:	68 c0 bb 01 c0       	push   0xc001bbc0
c001c00e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c014:	53                   	push   ebx
c001c015:	e8 b8 06 ff ff       	call   c000c6d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c01a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c01c:	83 c4 20             	add    esp,0x20
c001c01f:	83 ec 0c             	sub    esp,0xc
c001c022:	53                   	push   ebx
c001c023:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c026:	83 c4 0c             	add    esp,0xc
c001c029:	6a 07                	push   0x7
c001c02b:	6a 00                	push   0x0
c001c02d:	53                   	push   ebx
c001c02e:	e8 61 fa ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c033:	83 c4 0c             	add    esp,0xc
c001c036:	6a 07                	push   0x7
c001c038:	6a 01                	push   0x1
c001c03a:	53                   	push   ebx
c001c03b:	e8 54 fa ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c040:	83 c4 0c             	add    esp,0xc
c001c043:	6a 01                	push   0x1
c001c045:	6a 00                	push   0x0
c001c047:	53                   	push   ebx
c001c048:	e8 8f fb ff ff       	call   c001bbdc <IDE::enableIRQs(unsigned char, bool)>
c001c04d:	83 c4 0c             	add    esp,0xc
c001c050:	6a 01                	push   0x1
c001c052:	6a 01                	push   0x1
c001c054:	53                   	push   ebx
c001c055:	e8 82 fb ff ff       	call   c001bbdc <IDE::enableIRQs(unsigned char, bool)>
c001c05a:	83 c4 2c             	add    esp,0x2c
c001c05d:	31 c0                	xor    eax,eax
c001c05f:	5b                   	pop    ebx
c001c060:	5e                   	pop    esi
c001c061:	5f                   	pop    edi
c001c062:	5d                   	pop    ebp
c001c063:	c3                   	ret    

c001c064 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c064:	55                   	push   ebp
c001c065:	57                   	push   edi
c001c066:	56                   	push   esi
c001c067:	53                   	push   ebx
c001c068:	83 ec 1c             	sub    esp,0x1c
c001c06b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c06f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c073:	8d 42 f8             	lea    eax,[edx-0x8]
c001c076:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c07a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c07e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c082:	3c 03                	cmp    al,0x3
c001c084:	77 5a                	ja     c001c0e0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c086:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c08a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c08e:	0f b6 db             	movzx  ebx,bl
c001c091:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c094:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c099:	0c 80                	or     al,0x80
c001c09b:	50                   	push   eax
c001c09c:	6a 0c                	push   0xc
c001c09e:	53                   	push   ebx
c001c09f:	56                   	push   esi
c001c0a0:	e8 2f f9 ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0a5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c0aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c0ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c0b2:	0f b6 d2             	movzx  edx,dl
c001c0b5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c0b9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c0bb:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c0c0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c0c4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c0c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c0cc:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c0d4:	83 c4 2c             	add    esp,0x2c
c001c0d7:	5b                   	pop    ebx
c001c0d8:	5e                   	pop    esi
c001c0d9:	5f                   	pop    edi
c001c0da:	5d                   	pop    ebp
c001c0db:	e9 f4 f8 ff ff       	jmp    c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0e0:	0f b6 c2             	movzx  eax,dl
c001c0e3:	83 f8 07             	cmp    eax,0x7
c001c0e6:	77 12                	ja     c001c0fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c0e8:	0f b6 c2             	movzx  eax,dl
c001c0eb:	0f b6 db             	movzx  ebx,bl
c001c0ee:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c0f6:	01 c2                	add    edx,eax
c001c0f8:	eb 2f                	jmp    c001c129 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c0fa:	83 f8 0d             	cmp    eax,0xd
c001c0fd:	77 13                	ja     c001c112 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c0ff:	0f b6 db             	movzx  ebx,bl
c001c102:	0f b6 d2             	movzx  edx,dl
c001c105:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c10c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c110:	eb 17                	jmp    c001c129 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c112:	83 f8 15             	cmp    eax,0x15
c001c115:	77 14                	ja     c001c12b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c117:	0f b6 db             	movzx  ebx,bl
c001c11a:	0f b6 d2             	movzx  edx,dl
c001c11d:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c125:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c129:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c12b:	83 c4 1c             	add    esp,0x1c
c001c12e:	5b                   	pop    ebx
c001c12f:	5e                   	pop    esi
c001c130:	5f                   	pop    edi
c001c131:	5d                   	pop    ebp
c001c132:	c3                   	ret    
c001c133:	90                   	nop

c001c134 <IDE::detect()>:
c001c134:	55                   	push   ebp
c001c135:	57                   	push   edi
c001c136:	56                   	push   esi
c001c137:	53                   	push   ebx
c001c138:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c13e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c145:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c14c:	0f 85 a4 02 00 00    	jne    c001c3f6 <IDE::detect()+0x2c2>
c001c152:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c159:	31 f6                	xor    esi,esi
c001c15b:	31 ed                	xor    ebp,ebp
c001c15d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c165:	89 e8                	mov    eax,ebp
c001c167:	c1 e0 06             	shl    eax,0x6
c001c16a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c172:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c176:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c17a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c17e:	c1 e0 04             	shl    eax,0x4
c001c181:	83 c8 a0             	or     eax,0xffffffa0
c001c184:	0f b6 c0             	movzx  eax,al
c001c187:	50                   	push   eax
c001c188:	6a 06                	push   0x6
c001c18a:	56                   	push   esi
c001c18b:	53                   	push   ebx
c001c18c:	e8 43 f8 ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c191:	83 c4 0c             	add    esp,0xc
c001c194:	6a 0c                	push   0xc
c001c196:	56                   	push   esi
c001c197:	53                   	push   ebx
c001c198:	e8 f7 f8 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c19d:	83 c4 0c             	add    esp,0xc
c001c1a0:	6a 0c                	push   0xc
c001c1a2:	56                   	push   esi
c001c1a3:	53                   	push   ebx
c001c1a4:	e8 eb f8 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c1a9:	83 c4 0c             	add    esp,0xc
c001c1ac:	6a 0c                	push   0xc
c001c1ae:	56                   	push   esi
c001c1af:	53                   	push   ebx
c001c1b0:	e8 df f8 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c1b5:	83 c4 0c             	add    esp,0xc
c001c1b8:	6a 0c                	push   0xc
c001c1ba:	56                   	push   esi
c001c1bb:	53                   	push   ebx
c001c1bc:	e8 d3 f8 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c1c1:	68 ec 00 00 00       	push   0xec
c001c1c6:	6a 07                	push   0x7
c001c1c8:	56                   	push   esi
c001c1c9:	53                   	push   ebx
c001c1ca:	e8 05 f8 ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1cf:	83 c4 1c             	add    esp,0x1c
c001c1d2:	6a 0c                	push   0xc
c001c1d4:	56                   	push   esi
c001c1d5:	53                   	push   ebx
c001c1d6:	e8 b9 f8 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c1db:	83 c4 0c             	add    esp,0xc
c001c1de:	6a 0c                	push   0xc
c001c1e0:	56                   	push   esi
c001c1e1:	53                   	push   ebx
c001c1e2:	e8 ad f8 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c1e7:	83 c4 0c             	add    esp,0xc
c001c1ea:	6a 0c                	push   0xc
c001c1ec:	56                   	push   esi
c001c1ed:	53                   	push   ebx
c001c1ee:	e8 a1 f8 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c1f3:	83 c4 0c             	add    esp,0xc
c001c1f6:	6a 0c                	push   0xc
c001c1f8:	56                   	push   esi
c001c1f9:	53                   	push   ebx
c001c1fa:	e8 95 f8 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c1ff:	83 c4 0c             	add    esp,0xc
c001c202:	6a 0c                	push   0xc
c001c204:	56                   	push   esi
c001c205:	53                   	push   ebx
c001c206:	e8 89 f8 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c20b:	83 c4 10             	add    esp,0x10
c001c20e:	84 c0                	test   al,al
c001c210:	0f 84 60 01 00 00    	je     c001c376 <IDE::detect()+0x242>
c001c216:	31 ff                	xor    edi,edi
c001c218:	50                   	push   eax
c001c219:	6a 0c                	push   0xc
c001c21b:	56                   	push   esi
c001c21c:	53                   	push   ebx
c001c21d:	e8 72 f8 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c222:	83 c4 10             	add    esp,0x10
c001c225:	a8 01                	test   al,0x1
c001c227:	0f 85 6a 01 00 00    	jne    c001c397 <IDE::detect()+0x263>
c001c22d:	a8 80                	test   al,0x80
c001c22f:	75 04                	jne    c001c235 <IDE::detect()+0x101>
c001c231:	a8 08                	test   al,0x8
c001c233:	75 23                	jne    c001c258 <IDE::detect()+0x124>
c001c235:	47                   	inc    edi
c001c236:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c23c:	7e da                	jle    c001c218 <IDE::detect()+0xe4>
c001c23e:	83 ec 0c             	sub    esp,0xc
c001c241:	6a 32                	push   0x32
c001c243:	e8 f4 9d ff ff       	call   c001603c <milliTenthSleep(unsigned int)>
c001c248:	83 c4 10             	add    esp,0x10
c001c24b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c251:	75 c5                	jne    c001c218 <IDE::detect()+0xe4>
c001c253:	e9 3f 01 00 00       	jmp    c001c397 <IDE::detect()+0x263>
c001c258:	31 c9                	xor    ecx,ecx
c001c25a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c25e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c262:	83 ec 0c             	sub    esp,0xc
c001c265:	68 80 00 00 00       	push   0x80
c001c26a:	57                   	push   edi
c001c26b:	6a 00                	push   0x0
c001c26d:	56                   	push   esi
c001c26e:	53                   	push   ebx
c001c26f:	e8 f0 fd ff ff       	call   c001c064 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c274:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c279:	89 e8                	mov    eax,ebp
c001c27b:	89 d1                	mov    ecx,edx
c001c27d:	c1 e0 06             	shl    eax,0x6
c001c280:	01 d8                	add    eax,ebx
c001c282:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c289:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c290:	89 f2                	mov    edx,esi
c001c292:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c298:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c29c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c2a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c2a6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c2ad:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c2b5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c2bc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c2c4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c2ca:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c2d1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c2d7:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c2db:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c2df:	83 c4 20             	add    esp,0x20
c001c2e2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c2e5:	83 c0 02             	add    eax,0x2
c001c2e8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c2ee:	83 c7 02             	add    edi,0x2
c001c2f1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c2f4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c2fa:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c2fe:	75 e2                	jne    c001c2e2 <IDE::detect()+0x1ae>
c001c300:	89 e8                	mov    eax,ebp
c001c302:	c1 e0 06             	shl    eax,0x6
c001c305:	01 d8                	add    eax,ebx
c001c307:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c30e:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c315:	c1 ea 09             	shr    edx,0x9
c001c318:	83 e2 01             	and    edx,0x1
c001c31b:	80 e1 01             	and    cl,0x1
c001c31e:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c324:	75 22                	jne    c001c348 <IDE::detect()+0x214>
c001c326:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c32d:	74 46                	je     c001c375 <IDE::detect()+0x241>
c001c32f:	83 ec 0c             	sub    esp,0xc
c001c332:	68 7c 01 00 00       	push   0x17c
c001c337:	e8 7a b7 fe ff       	call   c0007ab6 <malloc>
c001c33c:	89 c7                	mov    edi,eax
c001c33e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c341:	e8 1a 05 00 00       	call   c001c860 <ATA::ATA()>
c001c346:	eb 17                	jmp    c001c35f <IDE::detect()+0x22b>
c001c348:	83 ec 0c             	sub    esp,0xc
c001c34b:	68 84 01 00 00       	push   0x184
c001c350:	e8 61 b7 fe ff       	call   c0007ab6 <malloc>
c001c355:	89 c7                	mov    edi,eax
c001c357:	89 04 24             	mov    DWORD PTR [esp],eax
c001c35a:	e8 45 0e 00 00       	call   c001d1a4 <ATAPI::ATAPI()>
c001c35f:	5a                   	pop    edx
c001c360:	59                   	pop    ecx
c001c361:	57                   	push   edi
c001c362:	53                   	push   ebx
c001c363:	e8 be 03 ff ff       	call   c000c726 <Device::addChild(Device*)>
c001c368:	8b 07                	mov    eax,DWORD PTR [edi]
c001c36a:	53                   	push   ebx
c001c36b:	55                   	push   ebp
c001c36c:	6a 00                	push   0x0
c001c36e:	57                   	push   edi
c001c36f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c372:	83 c4 20             	add    esp,0x20
c001c375:	45                   	inc    ebp
c001c376:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c37b:	74 0d                	je     c001c38a <IDE::detect()+0x256>
c001c37d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c385:	e9 db fd ff ff       	jmp    c001c165 <IDE::detect()+0x31>
c001c38a:	4e                   	dec    esi
c001c38b:	74 69                	je     c001c3f6 <IDE::detect()+0x2c2>
c001c38d:	be 01 00 00 00       	mov    esi,0x1
c001c392:	e9 c6 fd ff ff       	jmp    c001c15d <IDE::detect()+0x29>
c001c397:	50                   	push   eax
c001c398:	6a 04                	push   0x4
c001c39a:	56                   	push   esi
c001c39b:	53                   	push   ebx
c001c39c:	e8 f3 f6 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c3a1:	83 c4 0c             	add    esp,0xc
c001c3a4:	89 c7                	mov    edi,eax
c001c3a6:	6a 05                	push   0x5
c001c3a8:	56                   	push   esi
c001c3a9:	53                   	push   ebx
c001c3aa:	e8 e5 f6 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c3af:	83 c4 10             	add    esp,0x10
c001c3b2:	89 f9                	mov    ecx,edi
c001c3b4:	0f b6 c0             	movzx  eax,al
c001c3b7:	0f b6 f9             	movzx  edi,cl
c001c3ba:	83 ff 14             	cmp    edi,0x14
c001c3bd:	75 07                	jne    c001c3c6 <IDE::detect()+0x292>
c001c3bf:	3d eb 00 00 00       	cmp    eax,0xeb
c001c3c4:	eb 0a                	jmp    c001c3d0 <IDE::detect()+0x29c>
c001c3c6:	3d 96 00 00 00       	cmp    eax,0x96
c001c3cb:	75 a9                	jne    c001c376 <IDE::detect()+0x242>
c001c3cd:	83 ff 69             	cmp    edi,0x69
c001c3d0:	75 a4                	jne    c001c376 <IDE::detect()+0x242>
c001c3d2:	68 a1 00 00 00       	push   0xa1
c001c3d7:	6a 07                	push   0x7
c001c3d9:	56                   	push   esi
c001c3da:	53                   	push   ebx
c001c3db:	e8 f4 f5 ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3e0:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c3e7:	e8 50 9c ff ff       	call   c001603c <milliTenthSleep(unsigned int)>
c001c3ec:	83 c4 10             	add    esp,0x10
c001c3ef:	b1 01                	mov    cl,0x1
c001c3f1:	e9 64 fe ff ff       	jmp    c001c25a <IDE::detect()+0x126>
c001c3f6:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c3fc:	5b                   	pop    ebx
c001c3fd:	5e                   	pop    esi
c001c3fe:	5f                   	pop    edi
c001c3ff:	5d                   	pop    ebp
c001c400:	c3                   	ret    
c001c401:	90                   	nop

c001c402 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c402:	55                   	push   ebp
c001c403:	57                   	push   edi
c001c404:	56                   	push   esi
c001c405:	53                   	push   ebx
c001c406:	83 ec 1c             	sub    esp,0x1c
c001c409:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c40d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c411:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c415:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c419:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c41d:	88 c3                	mov    bl,al
c001c41f:	25 ff 00 00 00       	and    eax,0xff
c001c424:	0f 84 88 00 00 00    	je     c001c4b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c42a:	83 ec 0c             	sub    esp,0xc
c001c42d:	89 c7                	mov    edi,eax
c001c42f:	68 0b 2e 02 c0       	push   0xc0022e0b
c001c434:	e8 0c e5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c439:	83 c4 10             	add    esp,0x10
c001c43c:	83 ff 01             	cmp    edi,0x1
c001c43f:	74 6b                	je     c001c4ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c441:	83 ff 02             	cmp    edi,0x2
c001c444:	75 58                	jne    c001c49e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c446:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c44b:	01 ff                	add    edi,edi
c001c44d:	50                   	push   eax
c001c44e:	09 fe                	or     esi,edi
c001c450:	6a 01                	push   0x1
c001c452:	89 f0                	mov    eax,esi
c001c454:	0f b6 f0             	movzx  esi,al
c001c457:	c1 e6 06             	shl    esi,0x6
c001c45a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c462:	50                   	push   eax
c001c463:	55                   	push   ebp
c001c464:	e8 2b f6 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c469:	83 c4 10             	add    esp,0x10
c001c46c:	a8 01                	test   al,0x1
c001c46e:	74 02                	je     c001c472 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c470:	b3 07                	mov    bl,0x7
c001c472:	a8 02                	test   al,0x2
c001c474:	74 02                	je     c001c478 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c476:	b3 03                	mov    bl,0x3
c001c478:	a8 04                	test   al,0x4
c001c47a:	74 02                	je     c001c47e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c47c:	b3 14                	mov    bl,0x14
c001c47e:	a8 08                	test   al,0x8
c001c480:	74 02                	je     c001c484 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c482:	b3 03                	mov    bl,0x3
c001c484:	a8 10                	test   al,0x10
c001c486:	74 02                	je     c001c48a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c488:	b3 15                	mov    bl,0x15
c001c48a:	a8 20                	test   al,0x20
c001c48c:	74 02                	je     c001c490 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c48e:	b3 03                	mov    bl,0x3
c001c490:	a8 40                	test   al,0x40
c001c492:	74 02                	je     c001c496 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c494:	b3 16                	mov    bl,0x16
c001c496:	a8 80                	test   al,0x80
c001c498:	74 18                	je     c001c4b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c49a:	b3 0d                	mov    bl,0xd
c001c49c:	eb 14                	jmp    c001c4b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c49e:	83 ff 03             	cmp    edi,0x3
c001c4a1:	74 0d                	je     c001c4b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c4a3:	83 ff 04             	cmp    edi,0x4
c001c4a6:	75 0a                	jne    c001c4b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c4a8:	b3 08                	mov    bl,0x8
c001c4aa:	eb 06                	jmp    c001c4b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c4ac:	b3 13                	mov    bl,0x13
c001c4ae:	eb 02                	jmp    c001c4b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c4b0:	b3 17                	mov    bl,0x17
c001c4b2:	83 c4 1c             	add    esp,0x1c
c001c4b5:	88 d8                	mov    al,bl
c001c4b7:	5b                   	pop    ebx
c001c4b8:	5e                   	pop    esi
c001c4b9:	5f                   	pop    edi
c001c4ba:	5d                   	pop    ebp
c001c4bb:	c3                   	ret    

c001c4bc <IDE::polling(unsigned char, unsigned int)>:
c001c4bc:	57                   	push   edi
c001c4bd:	56                   	push   esi
c001c4be:	53                   	push   ebx
c001c4bf:	bb 04 00 00 00       	mov    ebx,0x4
c001c4c4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c4c8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c4cd:	52                   	push   edx
c001c4ce:	6a 0c                	push   0xc
c001c4d0:	56                   	push   esi
c001c4d1:	57                   	push   edi
c001c4d2:	e8 bd f5 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c4d7:	83 c4 10             	add    esp,0x10
c001c4da:	4b                   	dec    ebx
c001c4db:	75 f0                	jne    c001c4cd <IDE::polling(unsigned char, unsigned int)+0x11>
c001c4dd:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c4e2:	50                   	push   eax
c001c4e3:	6a 0c                	push   0xc
c001c4e5:	56                   	push   esi
c001c4e6:	57                   	push   edi
c001c4e7:	e8 a8 f5 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c4ec:	83 c4 10             	add    esp,0x10
c001c4ef:	a8 01                	test   al,0x1
c001c4f1:	75 17                	jne    c001c50a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c4f3:	a8 20                	test   al,0x20
c001c4f5:	75 0f                	jne    c001c506 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c4f7:	4b                   	dec    ebx
c001c4f8:	74 10                	je     c001c50a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c4fa:	a8 80                	test   al,0x80
c001c4fc:	75 e4                	jne    c001c4e2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c4fe:	a8 08                	test   al,0x8
c001c500:	74 e0                	je     c001c4e2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c502:	31 c0                	xor    eax,eax
c001c504:	eb 06                	jmp    c001c50c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c506:	b0 01                	mov    al,0x1
c001c508:	eb 02                	jmp    c001c50c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c50a:	b0 02                	mov    al,0x2
c001c50c:	5b                   	pop    ebx
c001c50d:	5e                   	pop    esi
c001c50e:	5f                   	pop    edi
c001c50f:	c3                   	ret    

c001c510 <SATABus::close(int, int, void*)>:
c001c510:	31 c0                	xor    eax,eax
c001c512:	c3                   	ret    
c001c513:	90                   	nop

c001c514 <SATABus::detect()>:
c001c514:	c3                   	ret    
c001c515:	90                   	nop

c001c516 <SATABus::SATABus()>:
c001c516:	83 ec 0c             	sub    esp,0xc
c001c519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51d:	83 ec 08             	sub    esp,0x8
c001c520:	68 44 2e 02 c0       	push   0xc0022e44
c001c525:	50                   	push   eax
c001c526:	e8 3d 05 ff ff       	call   c000ca68 <HardDiskController::HardDiskController(char const*)>
c001c52b:	83 c4 10             	add    esp,0x10
c001c52e:	ba 70 2e 02 c0       	mov    edx,0xc0022e70
c001c533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c537:	89 10                	mov    DWORD PTR [eax],edx
c001c539:	83 ec 0c             	sub    esp,0xc
c001c53c:	6a 50                	push   0x50
c001c53e:	e8 4b b9 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c543:	83 c4 10             	add    esp,0x10
c001c546:	89 c2                	mov    edx,eax
c001c548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c552:	83 ec 0c             	sub    esp,0xc
c001c555:	6a 50                	push   0x50
c001c557:	e8 b1 d0 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c55c:	83 c4 10             	add    esp,0x10
c001c55f:	89 c2                	mov    edx,eax
c001c561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c565:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c56b:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c570:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c574:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c57a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c57e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c584:	83 ec 0c             	sub    esp,0xc
c001c587:	6a 03                	push   0x3
c001c589:	6a 50                	push   0x50
c001c58b:	51                   	push   ecx
c001c58c:	52                   	push   edx
c001c58d:	50                   	push   eax
c001c58e:	e8 87 d9 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c593:	83 c4 20             	add    esp,0x20
c001c596:	90                   	nop
c001c597:	83 c4 0c             	add    esp,0xc
c001c59a:	c3                   	ret    
c001c59b:	90                   	nop

c001c59c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c59c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5a0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c5a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c5a6:	09 c2                	or     edx,eax
c001c5a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c5b2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c5b4:	31 c0                	xor    eax,eax
c001c5b6:	c1 e9 08             	shr    ecx,0x8
c001c5b9:	83 e1 0f             	and    ecx,0xf
c001c5bc:	39 c8                	cmp    eax,ecx
c001c5be:	74 0a                	je     c001c5ca <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c5c0:	f6 c2 01             	test   dl,0x1
c001c5c3:	74 08                	je     c001c5cd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c5c5:	d1 ea                	shr    edx,1
c001c5c7:	40                   	inc    eax
c001c5c8:	eb f2                	jmp    c001c5bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c5ca:	83 c8 ff             	or     eax,0xffffffff
c001c5cd:	c3                   	ret    

c001c5ce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c5ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c5d2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c5d5:	89 c2                	mov    edx,eax
c001c5d7:	c1 ea 08             	shr    edx,0x8
c001c5da:	83 e2 0f             	and    edx,0xf
c001c5dd:	4a                   	dec    edx
c001c5de:	75 32                	jne    c001c612 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c5e0:	83 e0 0f             	and    eax,0xf
c001c5e3:	83 f8 03             	cmp    eax,0x3
c001c5e6:	75 2a                	jne    c001c612 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c5e8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c5eb:	b8 02 00 00 00       	mov    eax,0x2
c001c5f0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c5f6:	74 1c                	je     c001c614 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c5f8:	b8 04 00 00 00       	mov    eax,0x4
c001c5fd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c603:	74 0f                	je     c001c614 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c605:	31 c0                	xor    eax,eax
c001c607:	83 fa 03             	cmp    edx,0x3
c001c60a:	0f 94 c0             	sete   al
c001c60d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c611:	c3                   	ret    
c001c612:	31 c0                	xor    eax,eax
c001c614:	c3                   	ret    
c001c615:	90                   	nop

c001c616 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c61a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c61d:	0f ba e2 0f          	bt     edx,0xf
c001c621:	72 f7                	jb     c001c61a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c623:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c626:	83 ca 10             	or     edx,0x10
c001c629:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c62c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c62f:	83 ca 01             	or     edx,0x1
c001c632:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c635:	c3                   	ret    

c001c636 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c63a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c63d:	83 e2 fe             	and    edx,0xfffffffe
c001c640:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c643:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c646:	83 e2 ef             	and    edx,0xffffffef
c001c649:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c64c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c64f:	0f ba e2 0e          	bt     edx,0xe
c001c653:	72 f7                	jb     c001c64c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c655:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c658:	0f ba e2 0f          	bt     edx,0xf
c001c65c:	72 ee                	jb     c001c64c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c65e:	c3                   	ret    
c001c65f:	90                   	nop

c001c660 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c660:	55                   	push   ebp
c001c661:	57                   	push   edi
c001c662:	56                   	push   esi
c001c663:	53                   	push   ebx
c001c664:	83 ec 1c             	sub    esp,0x1c
c001c667:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c66b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c66f:	53                   	push   ebx
c001c670:	56                   	push   esi
c001c671:	e8 c0 ff ff ff       	call   c001c636 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c676:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c67a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c680:	83 ec 0c             	sub    esp,0xc
c001c683:	c1 e5 0a             	shl    ebp,0xa
c001c686:	01 e8                	add    eax,ebp
c001c688:	89 03                	mov    DWORD PTR [ebx],eax
c001c68a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c68c:	68 00 04 00 00       	push   0x400
c001c691:	6a 00                	push   0x0
c001c693:	50                   	push   eax
c001c694:	e8 57 3e fe ff       	call   c00004f0 <memset>
c001c699:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c69f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c6a3:	01 e8                	add    eax,ebp
c001c6a5:	83 c4 1c             	add    esp,0x1c
c001c6a8:	89 03                	mov    DWORD PTR [ebx],eax
c001c6aa:	c1 e2 08             	shl    edx,0x8
c001c6ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c6b4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c6ba:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c6c0:	01 f8                	add    eax,edi
c001c6c2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c6c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c6c8:	68 00 01 00 00       	push   0x100
c001c6cd:	6a 00                	push   0x0
c001c6cf:	50                   	push   eax
c001c6d0:	e8 1b 3e fe ff       	call   c00004f0 <memset>
c001c6d5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c6db:	01 fa                	add    edx,edi
c001c6dd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c6e1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c6e4:	c1 e7 0d             	shl    edi,0xd
c001c6e7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c6ee:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c6f4:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c6fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c6fe:	31 ff                	xor    edi,edi
c001c700:	83 c4 10             	add    esp,0x10
c001c703:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c709:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c70d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c713:	83 c5 20             	add    ebp,0x20
c001c716:	01 f8                	add    eax,edi
c001c718:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c71b:	52                   	push   edx
c001c71c:	68 00 01 00 00       	push   0x100
c001c721:	6a 00                	push   0x0
c001c723:	50                   	push   eax
c001c724:	e8 c7 3d fe ff       	call   c00004f0 <memset>
c001c729:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c72d:	83 c4 10             	add    esp,0x10
c001c730:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c736:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c73d:	01 f8                	add    eax,edi
c001c73f:	81 c7 00 01 00 00    	add    edi,0x100
c001c745:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c748:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c74e:	75 b3                	jne    c001c703 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c750:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c757:	50                   	push   eax
c001c758:	50                   	push   eax
c001c759:	53                   	push   ebx
c001c75a:	56                   	push   esi
c001c75b:	e8 b6 fe ff ff       	call   c001c616 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c760:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c767:	83 c4 2c             	add    esp,0x2c
c001c76a:	5b                   	pop    ebx
c001c76b:	5e                   	pop    esi
c001c76c:	5f                   	pop    edi
c001c76d:	5d                   	pop    ebp
c001c76e:	c3                   	ret    
c001c76f:	90                   	nop

c001c770 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c770:	55                   	push   ebp
c001c771:	57                   	push   edi
c001c772:	56                   	push   esi
c001c773:	53                   	push   ebx
c001c774:	31 db                	xor    ebx,ebx
c001c776:	83 ec 0c             	sub    esp,0xc
c001c779:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c77d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c781:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c784:	f7 c7 01 00 00 00    	test   edi,0x1
c001c78a:	74 7a                	je     c001c806 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c78c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c790:	89 d8                	mov    eax,ebx
c001c792:	c1 e0 07             	shl    eax,0x7
c001c795:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c79c:	55                   	push   ebp
c001c79d:	56                   	push   esi
c001c79e:	e8 2b fe ff ff       	call   c001c5ce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c7a3:	5a                   	pop    edx
c001c7a4:	83 f8 01             	cmp    eax,0x1
c001c7a7:	59                   	pop    ecx
c001c7a8:	75 21                	jne    c001c7cb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c7aa:	50                   	push   eax
c001c7ab:	53                   	push   ebx
c001c7ac:	55                   	push   ebp
c001c7ad:	56                   	push   esi
c001c7ae:	e8 ad fe ff ff       	call   c001c660 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c7b3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c7ba:	e8 f7 b2 fe ff       	call   c0007ab6 <malloc>
c001c7bf:	89 c5                	mov    ebp,eax
c001c7c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7c4:	e8 99 10 00 00       	call   c001d862 <SATA::SATA()>
c001c7c9:	eb 24                	jmp    c001c7ef <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c7cb:	83 f8 04             	cmp    eax,0x4
c001c7ce:	75 36                	jne    c001c806 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c7d0:	51                   	push   ecx
c001c7d1:	53                   	push   ebx
c001c7d2:	55                   	push   ebp
c001c7d3:	56                   	push   esi
c001c7d4:	e8 87 fe ff ff       	call   c001c660 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c7d9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c7e0:	e8 d1 b2 fe ff       	call   c0007ab6 <malloc>
c001c7e5:	89 c5                	mov    ebp,eax
c001c7e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7ea:	e8 d5 17 00 00       	call   c001dfc4 <SATAPI::SATAPI()>
c001c7ef:	58                   	pop    eax
c001c7f0:	5a                   	pop    edx
c001c7f1:	55                   	push   ebp
c001c7f2:	56                   	push   esi
c001c7f3:	e8 2e ff fe ff       	call   c000c726 <Device::addChild(Device*)>
c001c7f8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c7fb:	56                   	push   esi
c001c7fc:	6a 00                	push   0x0
c001c7fe:	53                   	push   ebx
c001c7ff:	55                   	push   ebp
c001c800:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c803:	83 c4 20             	add    esp,0x20
c001c806:	d1 ef                	shr    edi,1
c001c808:	43                   	inc    ebx
c001c809:	83 fb 20             	cmp    ebx,0x20
c001c80c:	0f 85 72 ff ff ff    	jne    c001c784 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c812:	83 c4 0c             	add    esp,0xc
c001c815:	5b                   	pop    ebx
c001c816:	5e                   	pop    esi
c001c817:	5f                   	pop    edi
c001c818:	5d                   	pop    ebp
c001c819:	c3                   	ret    

c001c81a <SATABus::open(int, int, void*)>:
c001c81a:	83 ec 14             	sub    esp,0x14
c001c81d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c821:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c827:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c82d:	52                   	push   edx
c001c82e:	50                   	push   eax
c001c82f:	e8 3c ff ff ff       	call   c001c770 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c834:	31 c0                	xor    eax,eax
c001c836:	83 c4 1c             	add    esp,0x1c
c001c839:	c3                   	ret    

c001c83a <ATA::close(int, int, void*)>:
c001c83a:	83 ec 0c             	sub    esp,0xc
c001c83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c841:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c847:	85 c0                	test   eax,eax
c001c849:	74 0c                	je     c001c857 <ATA::close(int, int, void*)+0x1d>
c001c84b:	83 ec 0c             	sub    esp,0xc
c001c84e:	8b 10                	mov    edx,DWORD PTR [eax]
c001c850:	50                   	push   eax
c001c851:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c854:	83 c4 10             	add    esp,0x10
c001c857:	31 c0                	xor    eax,eax
c001c859:	83 c4 0c             	add    esp,0xc
c001c85c:	c3                   	ret    
c001c85d:	90                   	nop

c001c85e <ATA::powerSaving(PowerSavingLevel)>:
c001c85e:	c3                   	ret    
c001c85f:	90                   	nop

c001c860 <ATA::ATA()>:
c001c860:	83 ec 0c             	sub    esp,0xc
c001c863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c867:	83 ec 04             	sub    esp,0x4
c001c86a:	68 00 02 00 00       	push   0x200
c001c86f:	68 3d 2f 02 c0       	push   0xc0022f3d
c001c874:	50                   	push   eax
c001c875:	e8 78 02 ff ff       	call   c000caf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c87a:	83 c4 10             	add    esp,0x10
c001c87d:	ba b0 2e 02 c0       	mov    edx,0xc0022eb0
c001c882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c886:	89 10                	mov    DWORD PTR [eax],edx
c001c888:	90                   	nop
c001c889:	83 c4 0c             	add    esp,0xc
c001c88c:	c3                   	ret    
c001c88d:	90                   	nop

c001c88e <ATA::flush(bool)>:
c001c88e:	53                   	push   ebx
c001c88f:	83 ec 08             	sub    esp,0x8
c001c892:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c896:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c89b:	83 f8 01             	cmp    eax,0x1
c001c89e:	19 c0                	sbb    eax,eax
c001c8a0:	83 e0 fd             	and    eax,0xfffffffd
c001c8a3:	05 ea 00 00 00       	add    eax,0xea
c001c8a8:	50                   	push   eax
c001c8a9:	6a 07                	push   0x7
c001c8ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8b2:	50                   	push   eax
c001c8b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8b9:	e8 16 f1 ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8be:	83 c4 0c             	add    esp,0xc
c001c8c1:	6a 00                	push   0x0
c001c8c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8ca:	50                   	push   eax
c001c8cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8d1:	e8 e6 fb ff ff       	call   c001c4bc <IDE::polling(unsigned char, unsigned int)>
c001c8d6:	83 c4 18             	add    esp,0x18
c001c8d9:	5b                   	pop    ebx
c001c8da:	c3                   	ret    
c001c8db:	90                   	nop

c001c8dc <ATA::readyForCommand()>:
c001c8dc:	56                   	push   esi
c001c8dd:	53                   	push   ebx
c001c8de:	53                   	push   ebx
c001c8df:	31 db                	xor    ebx,ebx
c001c8e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c8e5:	51                   	push   ecx
c001c8e6:	6a 0c                	push   0xc
c001c8e8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c8ef:	50                   	push   eax
c001c8f0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c8f6:	e8 99 f1 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001c8fb:	83 c4 10             	add    esp,0x10
c001c8fe:	a8 88                	test   al,0x88
c001c900:	74 1f                	je     c001c921 <ATA::readyForCommand()+0x45>
c001c902:	43                   	inc    ebx
c001c903:	83 fb 63             	cmp    ebx,0x63
c001c906:	7e dd                	jle    c001c8e5 <ATA::readyForCommand()+0x9>
c001c908:	83 ec 0c             	sub    esp,0xc
c001c90b:	6a 0a                	push   0xa
c001c90d:	e8 2a 97 ff ff       	call   c001603c <milliTenthSleep(unsigned int)>
c001c912:	83 c4 10             	add    esp,0x10
c001c915:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c91b:	75 c8                	jne    c001c8e5 <ATA::readyForCommand()+0x9>
c001c91d:	31 c0                	xor    eax,eax
c001c91f:	eb 02                	jmp    c001c923 <ATA::readyForCommand()+0x47>
c001c921:	b0 01                	mov    al,0x1
c001c923:	5a                   	pop    edx
c001c924:	5b                   	pop    ebx
c001c925:	5e                   	pop    esi
c001c926:	c3                   	ret    
c001c927:	90                   	nop

c001c928 <ATA::access(unsigned long long, int, void*, bool)>:
c001c928:	55                   	push   ebp
c001c929:	57                   	push   edi
c001c92a:	56                   	push   esi
c001c92b:	53                   	push   ebx
c001c92c:	83 ec 2c             	sub    esp,0x2c
c001c92f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c933:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c937:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c93b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c93f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c943:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c947:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c94b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c951:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c955:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c95b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c95f:	c1 e0 06             	shl    eax,0x6
c001c962:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c96a:	74 5d                	je     c001c9c9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c96c:	89 fa                	mov    edx,edi
c001c96e:	89 f0                	mov    eax,esi
c001c970:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c974:	c1 ea 1c             	shr    edx,0x1c
c001c977:	89 d1                	mov    ecx,edx
c001c979:	09 c1                	or     ecx,eax
c001c97b:	74 25                	je     c001c9a2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c97d:	31 ed                	xor    ebp,ebp
c001c97f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c986:	89 fa                	mov    edx,edi
c001c988:	89 f0                	mov    eax,esi
c001c98a:	0f ad d0             	shrd   eax,edx,cl
c001c98d:	d3 ea                	shr    edx,cl
c001c98f:	f6 c1 20             	test   cl,0x20
c001c992:	74 02                	je     c001c996 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c994:	89 d0                	mov    eax,edx
c001c996:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c99a:	45                   	inc    ebp
c001c99b:	83 fd 06             	cmp    ebp,0x6
c001c99e:	75 df                	jne    c001c97f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c9a0:	eb 76                	jmp    c001ca18 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c9a2:	89 f0                	mov    eax,esi
c001c9a4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c9a9:	89 fa                	mov    edx,edi
c001c9ab:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c9b2:	0f ac d0 10          	shrd   eax,edx,0x10
c001c9b6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c9bb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c9bf:	c1 ee 18             	shr    esi,0x18
c001c9c2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c9c7:	eb 56                	jmp    c001ca1f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c9c9:	6a 00                	push   0x0
c001c9cb:	6a 3f                	push   0x3f
c001c9cd:	57                   	push   edi
c001c9ce:	56                   	push   esi
c001c9cf:	e8 ac 2a 00 00       	call   c001f480 <__umoddi3>
c001c9d4:	83 c4 10             	add    esp,0x10
c001c9d7:	40                   	inc    eax
c001c9d8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c9dc:	6a 00                	push   0x0
c001c9de:	68 f0 03 00 00       	push   0x3f0
c001c9e3:	57                   	push   edi
c001c9e4:	56                   	push   esi
c001c9e5:	e8 96 29 00 00       	call   c001f380 <__udivdi3>
c001c9ea:	83 c4 10             	add    esp,0x10
c001c9ed:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c9f2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c9f9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c9fe:	6a 00                	push   0x0
c001ca00:	6a 3f                	push   0x3f
c001ca02:	57                   	push   edi
c001ca03:	56                   	push   esi
c001ca04:	e8 77 29 00 00       	call   c001f380 <__udivdi3>
c001ca09:	83 c4 10             	add    esp,0x10
c001ca0c:	83 e0 0f             	and    eax,0xf
c001ca0f:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ca14:	89 c6                	mov    esi,eax
c001ca16:	eb 07                	jmp    c001ca1f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ca18:	31 f6                	xor    esi,esi
c001ca1a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ca1f:	bf 01 00 00 00       	mov    edi,0x1
c001ca24:	50                   	push   eax
c001ca25:	6a 00                	push   0x0
c001ca27:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca2e:	50                   	push   eax
c001ca2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca33:	e8 a4 f1 ff ff       	call   c001bbdc <IDE::enableIRQs(unsigned char, bool)>
c001ca38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca3b:	e8 9c fe ff ff       	call   c001c8dc <ATA::readyForCommand()>
c001ca40:	83 c4 10             	add    esp,0x10
c001ca43:	84 c0                	test   al,al
c001ca45:	0f 84 69 02 00 00    	je     c001ccb4 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001ca4b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ca51:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ca57:	c1 e0 04             	shl    eax,0x4
c001ca5a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ca61:	09 c6                	or     esi,eax
c001ca63:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001ca68:	75 05                	jne    c001ca6f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ca6a:	83 ce a0             	or     esi,0xffffffa0
c001ca6d:	eb 03                	jmp    c001ca72 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001ca6f:	83 ce e0             	or     esi,0xffffffe0
c001ca72:	89 f0                	mov    eax,esi
c001ca74:	0f b6 f0             	movzx  esi,al
c001ca77:	56                   	push   esi
c001ca78:	6a 06                	push   0x6
c001ca7a:	51                   	push   ecx
c001ca7b:	52                   	push   edx
c001ca7c:	e8 53 ef ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca81:	83 c4 10             	add    esp,0x10
c001ca84:	6a 00                	push   0x0
c001ca86:	6a 01                	push   0x1
c001ca88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca8f:	50                   	push   eax
c001ca90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca96:	e8 39 ef ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001caa3:	83 f8 02             	cmp    eax,0x2
c001caa6:	75 6e                	jne    c001cb16 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001caa8:	6a 00                	push   0x0
c001caaa:	6a 08                	push   0x8
c001caac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cab3:	50                   	push   eax
c001cab4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caba:	e8 15 ef ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cabf:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cac4:	50                   	push   eax
c001cac5:	6a 09                	push   0x9
c001cac7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cace:	50                   	push   eax
c001cacf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cad5:	e8 fa ee ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cada:	83 c4 20             	add    esp,0x20
c001cadd:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cae2:	50                   	push   eax
c001cae3:	6a 0a                	push   0xa
c001cae5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caec:	50                   	push   eax
c001caed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caf3:	e8 dc ee ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caf8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cafd:	50                   	push   eax
c001cafe:	6a 0b                	push   0xb
c001cb00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb07:	50                   	push   eax
c001cb08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb0e:	e8 c1 ee ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb13:	83 c4 20             	add    esp,0x20
c001cb16:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cb1b:	50                   	push   eax
c001cb1c:	6a 02                	push   0x2
c001cb1e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb25:	50                   	push   eax
c001cb26:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb2c:	e8 a3 ee ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb31:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cb36:	50                   	push   eax
c001cb37:	6a 03                	push   0x3
c001cb39:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb40:	50                   	push   eax
c001cb41:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb47:	e8 88 ee ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb4c:	83 c4 20             	add    esp,0x20
c001cb4f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cb54:	50                   	push   eax
c001cb55:	6a 04                	push   0x4
c001cb57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb5e:	50                   	push   eax
c001cb5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb65:	e8 6a ee ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb6a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb6f:	50                   	push   eax
c001cb70:	6a 05                	push   0x5
c001cb72:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb79:	50                   	push   eax
c001cb7a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb80:	e8 4f ee ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb85:	83 c4 20             	add    esp,0x20
c001cb88:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb8d:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cb92:	74 11                	je     c001cba5 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cb94:	b8 30 00 00 00       	mov    eax,0x30
c001cb99:	83 fa 02             	cmp    edx,0x2
c001cb9c:	75 16                	jne    c001cbb4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cb9e:	b8 34 00 00 00       	mov    eax,0x34
c001cba3:	eb 0f                	jmp    c001cbb4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cba5:	b8 20 00 00 00       	mov    eax,0x20
c001cbaa:	83 fa 02             	cmp    edx,0x2
c001cbad:	75 05                	jne    c001cbb4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cbaf:	b8 24 00 00 00       	mov    eax,0x24
c001cbb4:	50                   	push   eax
c001cbb5:	6a 07                	push   0x7
c001cbb7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbbe:	50                   	push   eax
c001cbbf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbc5:	e8 0a ee ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbca:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cbce:	83 c4 10             	add    esp,0x10
c001cbd1:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cbd6:	85 f6                	test   esi,esi
c001cbd8:	0f 84 b3 00 00 00    	je     c001cc91 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cbde:	50                   	push   eax
c001cbdf:	6a 01                	push   0x1
c001cbe1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbe8:	50                   	push   eax
c001cbe9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbef:	e8 c8 f8 ff ff       	call   c001c4bc <IDE::polling(unsigned char, unsigned int)>
c001cbf4:	83 c4 10             	add    esp,0x10
c001cbf7:	0f b6 f8             	movzx  edi,al
c001cbfa:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cc00:	85 ff                	test   edi,edi
c001cc02:	74 1d                	je     c001cc21 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001cc04:	57                   	push   edi
c001cc05:	0f b6 d2             	movzx  edx,dl
c001cc08:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cc0f:	50                   	push   eax
c001cc10:	52                   	push   edx
c001cc11:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc17:	e8 e6 f7 ff ff       	call   c001c402 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cc1c:	e9 90 00 00 00       	jmp    c001ccb1 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cc21:	85 ed                	test   ebp,ebp
c001cc23:	74 3b                	je     c001cc60 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cc25:	31 c9                	xor    ecx,ecx
c001cc27:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cc2b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cc2f:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cc33:	50                   	push   eax
c001cc34:	50                   	push   eax
c001cc35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc3c:	50                   	push   eax
c001cc3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc43:	e8 7a ed ff ff       	call   c001b9c2 <IDE::getBase(unsigned char)>
c001cc48:	89 c2                	mov    edx,eax
c001cc4a:	89 f8                	mov    eax,edi
c001cc4c:	66 ef                	out    dx,ax
c001cc4e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cc52:	83 c4 10             	add    esp,0x10
c001cc55:	41                   	inc    ecx
c001cc56:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cc5c:	75 c9                	jne    c001cc27 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001cc5e:	eb 23                	jmp    c001cc83 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001cc60:	0f b6 d2             	movzx  edx,dl
c001cc63:	51                   	push   ecx
c001cc64:	51                   	push   ecx
c001cc65:	52                   	push   edx
c001cc66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc6c:	e8 51 ed ff ff       	call   c001b9c2 <IDE::getBase(unsigned char)>
c001cc71:	b9 00 01 00 00       	mov    ecx,0x100
c001cc76:	89 c2                	mov    edx,eax
c001cc78:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cc7c:	fc                   	cld    
c001cc7d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cc80:	83 c4 10             	add    esp,0x10
c001cc83:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cc8b:	4e                   	dec    esi
c001cc8c:	e9 45 ff ff ff       	jmp    c001cbd6 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001cc91:	31 ff                	xor    edi,edi
c001cc93:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cc98:	74 1a                	je     c001ccb4 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cc9a:	50                   	push   eax
c001cc9b:	50                   	push   eax
c001cc9c:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001cca1:	83 f8 02             	cmp    eax,0x2
c001cca4:	0f 94 c0             	sete   al
c001cca7:	0f b6 c0             	movzx  eax,al
c001ccaa:	50                   	push   eax
c001ccab:	53                   	push   ebx
c001ccac:	e8 dd fb ff ff       	call   c001c88e <ATA::flush(bool)>
c001ccb1:	83 c4 10             	add    esp,0x10
c001ccb4:	83 c4 2c             	add    esp,0x2c
c001ccb7:	89 f8                	mov    eax,edi
c001ccb9:	5b                   	pop    ebx
c001ccba:	5e                   	pop    esi
c001ccbb:	5f                   	pop    edi
c001ccbc:	5d                   	pop    ebp
c001ccbd:	c3                   	ret    

c001ccbe <ATA::detectCHS()>:
c001ccbe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ccc2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ccc8:	c1 e0 06             	shl    eax,0x6
c001cccb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ccd1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ccdb:	c7 44 24 04 94 2e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022e94
c001cce3:	e9 69 46 ff ff       	jmp    c0011351 <KePanic(char const*)>

c001cce8 <ATA::open(int, int, void*)>:
c001cce8:	53                   	push   ebx
c001cce9:	83 ec 08             	sub    esp,0x8
c001ccec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccf0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccf8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ccfe:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cd04:	c1 e0 06             	shl    eax,0x6
c001cd07:	01 d0                	add    eax,edx
c001cd09:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cd10:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cd16:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cd1d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cd27:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cd2d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cd34:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cd3b:	75 0c                	jne    c001cd49 <ATA::open(int, int, void*)+0x61>
c001cd3d:	83 ec 0c             	sub    esp,0xc
c001cd40:	53                   	push   ebx
c001cd41:	e8 78 ff ff ff       	call   c001ccbe <ATA::detectCHS()>
c001cd46:	83 c4 10             	add    esp,0x10
c001cd49:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd4f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd55:	c1 e0 06             	shl    eax,0x6
c001cd58:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cd5f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cd69:	d1 e8                	shr    eax,1
c001cd6b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cd71:	6a 04                	push   0x4
c001cd73:	6a 0c                	push   0xc
c001cd75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd7c:	50                   	push   eax
c001cd7d:	52                   	push   edx
c001cd7e:	e8 51 ec ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd83:	90                   	nop
c001cd84:	90                   	nop
c001cd85:	6a 00                	push   0x0
c001cd87:	6a 0c                	push   0xc
c001cd89:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd90:	50                   	push   eax
c001cd91:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd97:	e8 38 ec ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd9c:	83 c4 14             	add    esp,0x14
c001cd9f:	53                   	push   ebx
c001cda0:	e8 b5 fd fe ff       	call   c000cb5a <PhysicalDisk::startCache()>
c001cda5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cda8:	e8 f1 0f ff ff       	call   c000dd9e <createPartitionsForDisk(PhysicalDisk*)>
c001cdad:	31 c0                	xor    eax,eax
c001cdaf:	83 c4 18             	add    esp,0x18
c001cdb2:	5b                   	pop    ebx
c001cdb3:	c3                   	ret    

c001cdb4 <combineCharAndColour(char, unsigned char)>:
c001cdb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cdb9:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cdbf:	c1 e0 08             	shl    eax,0x8
c001cdc2:	09 d0                	or     eax,edx
c001cdc4:	c3                   	ret    

c001cdc5 <combineColours(unsigned char, unsigned char)>:
c001cdc5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cdca:	c1 e0 04             	shl    eax,0x4
c001cdcd:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cdd1:	c3                   	ret    

c001cdd2 <ATA::read(unsigned long long, int, void*)>:
c001cdd2:	55                   	push   ebp
c001cdd3:	57                   	push   edi
c001cdd4:	56                   	push   esi
c001cdd5:	be 04 00 00 00       	mov    esi,0x4
c001cdda:	53                   	push   ebx
c001cddb:	83 ec 0c             	sub    esp,0xc
c001cdde:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cde2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cde6:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cde9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cded:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdf1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cdf7:	0f 87 a1 01 00 00    	ja     c001cf9e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cdfd:	be 06 00 00 00       	mov    esi,0x6
c001ce02:	85 c9                	test   ecx,ecx
c001ce04:	0f 84 94 01 00 00    	je     c001cf9e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ce0a:	55                   	push   ebp
c001ce0b:	55                   	push   ebp
c001ce0c:	6a 00                	push   0x0
c001ce0e:	51                   	push   ecx
c001ce0f:	53                   	push   ebx
c001ce10:	52                   	push   edx
c001ce11:	50                   	push   eax
c001ce12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce16:	e8 0d fb ff ff       	call   c001c928 <ATA::access(unsigned long long, int, void*, bool)>
c001ce1b:	83 c4 20             	add    esp,0x20
c001ce1e:	89 c6                	mov    esi,eax
c001ce20:	85 c0                	test   eax,eax
c001ce22:	0f 85 71 01 00 00    	jne    c001cf99 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001ce28:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001ce2e:	89 da                	mov    edx,ebx
c001ce30:	50                   	push   eax
c001ce31:	bd 10 27 00 00       	mov    ebp,0x2710
c001ce36:	50                   	push   eax
c001ce37:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001ce3d:	6a 0f                	push   0xf
c001ce3f:	6a 00                	push   0x0
c001ce41:	e8 7f ff ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001ce46:	59                   	pop    ecx
c001ce47:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce4c:	5b                   	pop    ebx
c001ce4d:	0f b6 d8             	movzx  ebx,al
c001ce50:	89 d0                	mov    eax,edx
c001ce52:	53                   	push   ebx
c001ce53:	99                   	cdq    
c001ce54:	f7 fd                	idiv   ebp
c001ce56:	99                   	cdq    
c001ce57:	f7 f9                	idiv   ecx
c001ce59:	83 c2 30             	add    edx,0x30
c001ce5c:	0f b6 d2             	movzx  edx,dl
c001ce5f:	52                   	push   edx
c001ce60:	e8 4f ff ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001ce65:	5f                   	pop    edi
c001ce66:	bf e8 03 00 00       	mov    edi,0x3e8
c001ce6b:	5a                   	pop    edx
c001ce6c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce72:	53                   	push   ebx
c001ce73:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce78:	99                   	cdq    
c001ce79:	f7 ff                	idiv   edi
c001ce7b:	99                   	cdq    
c001ce7c:	f7 f9                	idiv   ecx
c001ce7e:	8d 42 30             	lea    eax,[edx+0x30]
c001ce81:	0f b6 c0             	movzx  eax,al
c001ce84:	50                   	push   eax
c001ce85:	e8 2a ff ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001ce8a:	5f                   	pop    edi
c001ce8b:	bf 64 00 00 00       	mov    edi,0x64
c001ce90:	5a                   	pop    edx
c001ce91:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce97:	53                   	push   ebx
c001ce98:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce9d:	99                   	cdq    
c001ce9e:	f7 ff                	idiv   edi
c001cea0:	99                   	cdq    
c001cea1:	f7 f9                	idiv   ecx
c001cea3:	8d 42 30             	lea    eax,[edx+0x30]
c001cea6:	0f b6 c0             	movzx  eax,al
c001cea9:	50                   	push   eax
c001ceaa:	e8 05 ff ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001ceaf:	5a                   	pop    edx
c001ceb0:	5a                   	pop    edx
c001ceb1:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ceb7:	53                   	push   ebx
c001ceb8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cebd:	99                   	cdq    
c001cebe:	f7 f9                	idiv   ecx
c001cec0:	99                   	cdq    
c001cec1:	f7 f9                	idiv   ecx
c001cec3:	8d 42 30             	lea    eax,[edx+0x30]
c001cec6:	0f b6 c0             	movzx  eax,al
c001cec9:	50                   	push   eax
c001ceca:	e8 e5 fe ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001cecf:	5a                   	pop    edx
c001ced0:	5a                   	pop    edx
c001ced1:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ced7:	53                   	push   ebx
c001ced8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cedd:	99                   	cdq    
c001cede:	f7 f9                	idiv   ecx
c001cee0:	83 c2 30             	add    edx,0x30
c001cee3:	0f b6 d2             	movzx  edx,dl
c001cee6:	52                   	push   edx
c001cee7:	e8 c8 fe ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001ceec:	5a                   	pop    edx
c001ceed:	5a                   	pop    edx
c001ceee:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cef4:	53                   	push   ebx
c001cef5:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cefa:	99                   	cdq    
c001cefb:	f7 fd                	idiv   ebp
c001cefd:	99                   	cdq    
c001cefe:	f7 f9                	idiv   ecx
c001cf00:	8d 42 30             	lea    eax,[edx+0x30]
c001cf03:	0f b6 c0             	movzx  eax,al
c001cf06:	50                   	push   eax
c001cf07:	e8 a8 fe ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001cf0c:	5d                   	pop    ebp
c001cf0d:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cf12:	5a                   	pop    edx
c001cf13:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf19:	53                   	push   ebx
c001cf1a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf1f:	99                   	cdq    
c001cf20:	f7 fd                	idiv   ebp
c001cf22:	99                   	cdq    
c001cf23:	f7 f9                	idiv   ecx
c001cf25:	8d 42 30             	lea    eax,[edx+0x30]
c001cf28:	0f b6 c0             	movzx  eax,al
c001cf2b:	50                   	push   eax
c001cf2c:	e8 83 fe ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001cf31:	5d                   	pop    ebp
c001cf32:	5a                   	pop    edx
c001cf33:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf39:	53                   	push   ebx
c001cf3a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf3f:	99                   	cdq    
c001cf40:	f7 ff                	idiv   edi
c001cf42:	99                   	cdq    
c001cf43:	f7 f9                	idiv   ecx
c001cf45:	8d 42 30             	lea    eax,[edx+0x30]
c001cf48:	0f b6 c0             	movzx  eax,al
c001cf4b:	50                   	push   eax
c001cf4c:	e8 63 fe ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001cf51:	5f                   	pop    edi
c001cf52:	5d                   	pop    ebp
c001cf53:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf59:	53                   	push   ebx
c001cf5a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf5f:	99                   	cdq    
c001cf60:	f7 f9                	idiv   ecx
c001cf62:	99                   	cdq    
c001cf63:	f7 f9                	idiv   ecx
c001cf65:	8d 42 30             	lea    eax,[edx+0x30]
c001cf68:	0f b6 c0             	movzx  eax,al
c001cf6b:	50                   	push   eax
c001cf6c:	e8 43 fe ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001cf71:	5a                   	pop    edx
c001cf72:	5f                   	pop    edi
c001cf73:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf79:	53                   	push   ebx
c001cf7a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf7f:	99                   	cdq    
c001cf80:	f7 f9                	idiv   ecx
c001cf82:	83 c2 30             	add    edx,0x30
c001cf85:	0f b6 d2             	movzx  edx,dl
c001cf88:	52                   	push   edx
c001cf89:	e8 26 fe ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001cf8e:	83 c4 10             	add    esp,0x10
c001cf91:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf97:	eb 05                	jmp    c001cf9e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cf99:	be 01 00 00 00       	mov    esi,0x1
c001cf9e:	83 c4 0c             	add    esp,0xc
c001cfa1:	89 f0                	mov    eax,esi
c001cfa3:	5b                   	pop    ebx
c001cfa4:	5e                   	pop    esi
c001cfa5:	5f                   	pop    edi
c001cfa6:	5d                   	pop    ebp
c001cfa7:	c3                   	ret    

c001cfa8 <ATA::write(unsigned long long, int, void*)>:
c001cfa8:	55                   	push   ebp
c001cfa9:	57                   	push   edi
c001cfaa:	56                   	push   esi
c001cfab:	be 04 00 00 00       	mov    esi,0x4
c001cfb0:	53                   	push   ebx
c001cfb1:	83 ec 0c             	sub    esp,0xc
c001cfb4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cfb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfbc:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cfbf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cfc3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cfc7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cfcd:	0f 87 9c 01 00 00    	ja     c001d16f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cfd3:	be 06 00 00 00       	mov    esi,0x6
c001cfd8:	85 c9                	test   ecx,ecx
c001cfda:	0f 84 8f 01 00 00    	je     c001d16f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cfe0:	55                   	push   ebp
c001cfe1:	55                   	push   ebp
c001cfe2:	6a 01                	push   0x1
c001cfe4:	51                   	push   ecx
c001cfe5:	53                   	push   ebx
c001cfe6:	52                   	push   edx
c001cfe7:	50                   	push   eax
c001cfe8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cfec:	e8 37 f9 ff ff       	call   c001c928 <ATA::access(unsigned long long, int, void*, bool)>
c001cff1:	83 c4 20             	add    esp,0x20
c001cff4:	89 c6                	mov    esi,eax
c001cff6:	85 c0                	test   eax,eax
c001cff8:	0f 85 6c 01 00 00    	jne    c001d16a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cffe:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001d004:	bd 10 27 00 00       	mov    ebp,0x2710
c001d009:	50                   	push   eax
c001d00a:	50                   	push   eax
c001d00b:	6a 0f                	push   0xf
c001d00d:	6a 00                	push   0x0
c001d00f:	e8 b1 fd ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001d014:	5a                   	pop    edx
c001d015:	0f b6 d8             	movzx  ebx,al
c001d018:	59                   	pop    ecx
c001d019:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d01e:	53                   	push   ebx
c001d01f:	b9 0a 00 00 00       	mov    ecx,0xa
c001d024:	99                   	cdq    
c001d025:	f7 fd                	idiv   ebp
c001d027:	99                   	cdq    
c001d028:	f7 f9                	idiv   ecx
c001d02a:	8d 42 30             	lea    eax,[edx+0x30]
c001d02d:	0f b6 c0             	movzx  eax,al
c001d030:	50                   	push   eax
c001d031:	e8 7e fd ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001d036:	5f                   	pop    edi
c001d037:	bf e8 03 00 00       	mov    edi,0x3e8
c001d03c:	5a                   	pop    edx
c001d03d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d043:	53                   	push   ebx
c001d044:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d049:	99                   	cdq    
c001d04a:	f7 ff                	idiv   edi
c001d04c:	99                   	cdq    
c001d04d:	f7 f9                	idiv   ecx
c001d04f:	8d 42 30             	lea    eax,[edx+0x30]
c001d052:	0f b6 c0             	movzx  eax,al
c001d055:	50                   	push   eax
c001d056:	e8 59 fd ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001d05b:	5f                   	pop    edi
c001d05c:	bf 64 00 00 00       	mov    edi,0x64
c001d061:	5a                   	pop    edx
c001d062:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d068:	53                   	push   ebx
c001d069:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d06e:	99                   	cdq    
c001d06f:	f7 ff                	idiv   edi
c001d071:	99                   	cdq    
c001d072:	f7 f9                	idiv   ecx
c001d074:	8d 42 30             	lea    eax,[edx+0x30]
c001d077:	0f b6 c0             	movzx  eax,al
c001d07a:	50                   	push   eax
c001d07b:	e8 34 fd ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001d080:	5a                   	pop    edx
c001d081:	5a                   	pop    edx
c001d082:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d088:	53                   	push   ebx
c001d089:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d08e:	99                   	cdq    
c001d08f:	f7 f9                	idiv   ecx
c001d091:	99                   	cdq    
c001d092:	f7 f9                	idiv   ecx
c001d094:	8d 42 30             	lea    eax,[edx+0x30]
c001d097:	0f b6 c0             	movzx  eax,al
c001d09a:	50                   	push   eax
c001d09b:	e8 14 fd ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001d0a0:	5a                   	pop    edx
c001d0a1:	5a                   	pop    edx
c001d0a2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d0a8:	53                   	push   ebx
c001d0a9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d0ae:	99                   	cdq    
c001d0af:	f7 f9                	idiv   ecx
c001d0b1:	8d 42 30             	lea    eax,[edx+0x30]
c001d0b4:	0f b6 c0             	movzx  eax,al
c001d0b7:	50                   	push   eax
c001d0b8:	e8 f7 fc ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001d0bd:	5a                   	pop    edx
c001d0be:	5a                   	pop    edx
c001d0bf:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d0c5:	53                   	push   ebx
c001d0c6:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d0cb:	99                   	cdq    
c001d0cc:	f7 fd                	idiv   ebp
c001d0ce:	99                   	cdq    
c001d0cf:	f7 f9                	idiv   ecx
c001d0d1:	8d 42 30             	lea    eax,[edx+0x30]
c001d0d4:	0f b6 c0             	movzx  eax,al
c001d0d7:	50                   	push   eax
c001d0d8:	e8 d7 fc ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001d0dd:	5d                   	pop    ebp
c001d0de:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d0e3:	5a                   	pop    edx
c001d0e4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d0ea:	53                   	push   ebx
c001d0eb:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d0f0:	99                   	cdq    
c001d0f1:	f7 fd                	idiv   ebp
c001d0f3:	99                   	cdq    
c001d0f4:	f7 f9                	idiv   ecx
c001d0f6:	8d 42 30             	lea    eax,[edx+0x30]
c001d0f9:	0f b6 c0             	movzx  eax,al
c001d0fc:	50                   	push   eax
c001d0fd:	e8 b2 fc ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001d102:	5d                   	pop    ebp
c001d103:	5a                   	pop    edx
c001d104:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d10a:	53                   	push   ebx
c001d10b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d110:	99                   	cdq    
c001d111:	f7 ff                	idiv   edi
c001d113:	99                   	cdq    
c001d114:	f7 f9                	idiv   ecx
c001d116:	8d 42 30             	lea    eax,[edx+0x30]
c001d119:	0f b6 c0             	movzx  eax,al
c001d11c:	50                   	push   eax
c001d11d:	e8 92 fc ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001d122:	5f                   	pop    edi
c001d123:	5d                   	pop    ebp
c001d124:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d12a:	53                   	push   ebx
c001d12b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d130:	99                   	cdq    
c001d131:	f7 f9                	idiv   ecx
c001d133:	99                   	cdq    
c001d134:	f7 f9                	idiv   ecx
c001d136:	8d 42 30             	lea    eax,[edx+0x30]
c001d139:	0f b6 c0             	movzx  eax,al
c001d13c:	50                   	push   eax
c001d13d:	e8 72 fc ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001d142:	5a                   	pop    edx
c001d143:	5f                   	pop    edi
c001d144:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d14a:	53                   	push   ebx
c001d14b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d150:	99                   	cdq    
c001d151:	f7 f9                	idiv   ecx
c001d153:	83 c2 30             	add    edx,0x30
c001d156:	0f b6 d2             	movzx  edx,dl
c001d159:	52                   	push   edx
c001d15a:	e8 55 fc ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001d15f:	83 c4 10             	add    esp,0x10
c001d162:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d168:	eb 05                	jmp    c001d16f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d16a:	be 01 00 00 00       	mov    esi,0x1
c001d16f:	83 c4 0c             	add    esp,0xc
c001d172:	89 f0                	mov    eax,esi
c001d174:	5b                   	pop    ebx
c001d175:	5e                   	pop    esi
c001d176:	5f                   	pop    edi
c001d177:	5d                   	pop    ebp
c001d178:	c3                   	ret    
c001d179:	90                   	nop

c001d17a <ATAPI::write(unsigned long long, int, void*)>:
c001d17a:	b8 03 00 00 00       	mov    eax,0x3
c001d17f:	c3                   	ret    

c001d180 <ATAPI::close(int, int, void*)>:
c001d180:	83 ec 0c             	sub    esp,0xc
c001d183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d187:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d18d:	85 c0                	test   eax,eax
c001d18f:	74 0c                	je     c001d19d <ATAPI::close(int, int, void*)+0x1d>
c001d191:	83 ec 0c             	sub    esp,0xc
c001d194:	8b 10                	mov    edx,DWORD PTR [eax]
c001d196:	50                   	push   eax
c001d197:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d19a:	83 c4 10             	add    esp,0x10
c001d19d:	31 c0                	xor    eax,eax
c001d19f:	83 c4 0c             	add    esp,0xc
c001d1a2:	c3                   	ret    
c001d1a3:	90                   	nop

c001d1a4 <ATAPI::ATAPI()>:
c001d1a4:	83 ec 0c             	sub    esp,0xc
c001d1a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1ab:	83 ec 04             	sub    esp,0x4
c001d1ae:	68 00 08 00 00       	push   0x800
c001d1b3:	68 dd 2f 02 c0       	push   0xc0022fdd
c001d1b8:	50                   	push   eax
c001d1b9:	e8 34 f9 fe ff       	call   c000caf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d1be:	83 c4 10             	add    esp,0x10
c001d1c1:	ba f8 2e 02 c0       	mov    edx,0xc0022ef8
c001d1c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1ca:	89 10                	mov    DWORD PTR [eax],edx
c001d1cc:	90                   	nop
c001d1cd:	83 c4 0c             	add    esp,0xc
c001d1d0:	c3                   	ret    
c001d1d1:	90                   	nop

c001d1d2 <ATAPI::readyForCommand()>:
c001d1d2:	56                   	push   esi
c001d1d3:	53                   	push   ebx
c001d1d4:	53                   	push   ebx
c001d1d5:	31 db                	xor    ebx,ebx
c001d1d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d1db:	51                   	push   ecx
c001d1dc:	6a 0c                	push   0xc
c001d1de:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d1e5:	50                   	push   eax
c001d1e6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d1ec:	e8 a3 e8 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001d1f1:	83 c4 10             	add    esp,0x10
c001d1f4:	a8 88                	test   al,0x88
c001d1f6:	74 25                	je     c001d21d <ATAPI::readyForCommand()+0x4b>
c001d1f8:	43                   	inc    ebx
c001d1f9:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d1ff:	7e da                	jle    c001d1db <ATAPI::readyForCommand()+0x9>
c001d201:	83 ec 0c             	sub    esp,0xc
c001d204:	68 5e 01 00 00       	push   0x15e
c001d209:	e8 2e 8e ff ff       	call   c001603c <milliTenthSleep(unsigned int)>
c001d20e:	83 c4 10             	add    esp,0x10
c001d211:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d217:	75 c2                	jne    c001d1db <ATAPI::readyForCommand()+0x9>
c001d219:	31 c0                	xor    eax,eax
c001d21b:	eb 02                	jmp    c001d21f <ATAPI::readyForCommand()+0x4d>
c001d21d:	b0 01                	mov    al,0x1
c001d21f:	5a                   	pop    edx
c001d220:	5b                   	pop    ebx
c001d221:	5e                   	pop    esi
c001d222:	c3                   	ret    
c001d223:	90                   	nop

c001d224 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d224:	55                   	push   ebp
c001d225:	57                   	push   edi
c001d226:	56                   	push   esi
c001d227:	53                   	push   ebx
c001d228:	83 ec 20             	sub    esp,0x20
c001d22b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d22f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d233:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d237:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d23b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d23f:	6a 01                	push   0x1
c001d241:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d248:	50                   	push   eax
c001d249:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d24f:	e8 88 e9 ff ff       	call   c001bbdc <IDE::enableIRQs(unsigned char, bool)>
c001d254:	5e                   	pop    esi
c001d255:	58                   	pop    eax
c001d256:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d25d:	50                   	push   eax
c001d25e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d264:	e8 45 e7 ff ff       	call   c001b9ae <IDE::prepareInterrupt(unsigned char)>
c001d269:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d26c:	e8 61 ff ff ff       	call   c001d1d2 <ATAPI::readyForCommand()>
c001d271:	83 c4 10             	add    esp,0x10
c001d274:	84 c0                	test   al,al
c001d276:	75 0a                	jne    c001d282 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d278:	bb 01 00 00 00       	mov    ebx,0x1
c001d27d:	e9 60 02 00 00       	jmp    c001d4e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d282:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d288:	c1 e0 04             	shl    eax,0x4
c001d28b:	0f b6 c0             	movzx  eax,al
c001d28e:	50                   	push   eax
c001d28f:	6a 06                	push   0x6
c001d291:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d298:	50                   	push   eax
c001d299:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d29f:	e8 30 e7 ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2a4:	6a 00                	push   0x0
c001d2a6:	6a 01                	push   0x1
c001d2a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2af:	50                   	push   eax
c001d2b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2b6:	e8 19 e7 ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2bb:	83 c4 20             	add    esp,0x20
c001d2be:	0f b6 c3             	movzx  eax,bl
c001d2c1:	0f b6 df             	movzx  ebx,bh
c001d2c4:	50                   	push   eax
c001d2c5:	6a 04                	push   0x4
c001d2c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2ce:	50                   	push   eax
c001d2cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2d5:	e8 fa e6 ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2da:	53                   	push   ebx
c001d2db:	6a 05                	push   0x5
c001d2dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2e4:	50                   	push   eax
c001d2e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2eb:	e8 e4 e6 ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2f0:	83 c4 20             	add    esp,0x20
c001d2f3:	68 a0 00 00 00       	push   0xa0
c001d2f8:	6a 07                	push   0x7
c001d2fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d301:	50                   	push   eax
c001d302:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d308:	e8 c7 e6 ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d30d:	83 c4 0c             	add    esp,0xc
c001d310:	6a 01                	push   0x1
c001d312:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d319:	50                   	push   eax
c001d31a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d320:	e8 97 f1 ff ff       	call   c001c4bc <IDE::polling(unsigned char, unsigned int)>
c001d325:	83 c4 10             	add    esp,0x10
c001d328:	0f b6 d8             	movzx  ebx,al
c001d32b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d331:	85 db                	test   ebx,ebx
c001d333:	74 20                	je     c001d355 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d335:	53                   	push   ebx
c001d336:	0f b6 c0             	movzx  eax,al
c001d339:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d340:	52                   	push   edx
c001d341:	50                   	push   eax
c001d342:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d348:	e8 b5 f0 ff ff       	call   c001c402 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d34d:	83 c4 10             	add    esp,0x10
c001d350:	e9 8d 01 00 00       	jmp    c001d4e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d355:	0f b6 c0             	movzx  eax,al
c001d358:	53                   	push   ebx
c001d359:	53                   	push   ebx
c001d35a:	50                   	push   eax
c001d35b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d361:	e8 5c e6 ff ff       	call   c001b9c2 <IDE::getBase(unsigned char)>
c001d366:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d36a:	b9 06 00 00 00       	mov    ecx,0x6
c001d36f:	89 c2                	mov    edx,eax
c001d371:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d374:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d378:	83 c4 10             	add    esp,0x10
c001d37b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d380:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d384:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d38a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d391:	85 db                	test   ebx,ebx
c001d393:	0f 84 ec 00 00 00    	je     c001d485 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d399:	51                   	push   ecx
c001d39a:	51                   	push   ecx
c001d39b:	52                   	push   edx
c001d39c:	50                   	push   eax
c001d39d:	e8 a0 e7 ff ff       	call   c001bb42 <IDE::waitInterrupt(unsigned char)>
c001d3a2:	83 c4 10             	add    esp,0x10
c001d3a5:	84 c0                	test   al,al
c001d3a7:	0f 84 cb fe ff ff    	je     c001d278 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d3ad:	56                   	push   esi
c001d3ae:	56                   	push   esi
c001d3af:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3b6:	50                   	push   eax
c001d3b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3bd:	e8 ec e5 ff ff       	call   c001b9ae <IDE::prepareInterrupt(unsigned char)>
c001d3c2:	83 c4 0c             	add    esp,0xc
c001d3c5:	6a 04                	push   0x4
c001d3c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3ce:	50                   	push   eax
c001d3cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3d5:	e8 ba e6 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001d3da:	83 c4 0c             	add    esp,0xc
c001d3dd:	89 c6                	mov    esi,eax
c001d3df:	6a 05                	push   0x5
c001d3e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3e8:	50                   	push   eax
c001d3e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3ef:	e8 a0 e6 ff ff       	call   c001ba94 <IDE::read(unsigned char, unsigned char)>
c001d3f4:	89 f1                	mov    ecx,esi
c001d3f6:	0f b6 c0             	movzx  eax,al
c001d3f9:	0f b6 f1             	movzx  esi,cl
c001d3fc:	c1 e0 08             	shl    eax,0x8
c001d3ff:	09 c6                	or     esi,eax
c001d401:	d1 fe                	sar    esi,1
c001d403:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d407:	83 c4 10             	add    esp,0x10
c001d40a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d40f:	74 41                	je     c001d452 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d411:	31 c9                	xor    ecx,ecx
c001d413:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d419:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d420:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d424:	75 0a                	jne    c001d430 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d426:	01 c9                	add    ecx,ecx
c001d428:	01 cd                	add    ebp,ecx
c001d42a:	4b                   	dec    ebx
c001d42b:	e9 54 ff ff ff       	jmp    c001d384 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d430:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d435:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d439:	51                   	push   ecx
c001d43a:	51                   	push   ecx
c001d43b:	52                   	push   edx
c001d43c:	50                   	push   eax
c001d43d:	e8 80 e5 ff ff       	call   c001b9c2 <IDE::getBase(unsigned char)>
c001d442:	89 c2                	mov    edx,eax
c001d444:	89 f0                	mov    eax,esi
c001d446:	66 ef                	out    dx,ax
c001d448:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d44c:	83 c4 10             	add    esp,0x10
c001d44f:	41                   	inc    ecx
c001d450:	eb c1                	jmp    c001d413 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d452:	31 f6                	xor    esi,esi
c001d454:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d45a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d461:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d465:	75 06                	jne    c001d46d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d467:	01 f6                	add    esi,esi
c001d469:	01 f5                	add    ebp,esi
c001d46b:	eb bd                	jmp    c001d42a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d46d:	51                   	push   ecx
c001d46e:	51                   	push   ecx
c001d46f:	52                   	push   edx
c001d470:	50                   	push   eax
c001d471:	e8 4c e5 ff ff       	call   c001b9c2 <IDE::getBase(unsigned char)>
c001d476:	89 c2                	mov    edx,eax
c001d478:	66 ed                	in     ax,dx
c001d47a:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d47f:	83 c4 10             	add    esp,0x10
c001d482:	46                   	inc    esi
c001d483:	eb cf                	jmp    c001d454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d485:	51                   	push   ecx
c001d486:	51                   	push   ecx
c001d487:	52                   	push   edx
c001d488:	50                   	push   eax
c001d489:	e8 b4 e6 ff ff       	call   c001bb42 <IDE::waitInterrupt(unsigned char)>
c001d48e:	83 c4 10             	add    esp,0x10
c001d491:	84 c0                	test   al,al
c001d493:	0f 84 df fd ff ff    	je     c001d278 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d499:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d49e:	52                   	push   edx
c001d49f:	52                   	push   edx
c001d4a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4a7:	50                   	push   eax
c001d4a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4ae:	e8 fb e4 ff ff       	call   c001b9ae <IDE::prepareInterrupt(unsigned char)>
c001d4b3:	83 c4 10             	add    esp,0x10
c001d4b6:	50                   	push   eax
c001d4b7:	50                   	push   eax
c001d4b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4bf:	50                   	push   eax
c001d4c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4c6:	e8 f7 e4 ff ff       	call   c001b9c2 <IDE::getBase(unsigned char)>
c001d4cb:	8d 50 07             	lea    edx,[eax+0x7]
c001d4ce:	ec                   	in     al,dx
c001d4cf:	83 c4 10             	add    esp,0x10
c001d4d2:	a8 88                	test   al,0x88
c001d4d4:	74 0a                	je     c001d4e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d4d6:	4b                   	dec    ebx
c001d4d7:	75 dd                	jne    c001d4b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d4d9:	bb 02 00 00 00       	mov    ebx,0x2
c001d4de:	eb 02                	jmp    c001d4e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d4e0:	31 db                	xor    ebx,ebx
c001d4e2:	83 c4 1c             	add    esp,0x1c
c001d4e5:	89 d8                	mov    eax,ebx
c001d4e7:	5b                   	pop    ebx
c001d4e8:	5e                   	pop    esi
c001d4e9:	5f                   	pop    edi
c001d4ea:	5d                   	pop    ebp
c001d4eb:	c3                   	ret    

c001d4ec <ATAPI::diskRemoved()>:
c001d4ec:	53                   	push   ebx
c001d4ed:	83 ec 14             	sub    esp,0x14
c001d4f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d4f4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d4fb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d501:	e8 88 05 ff ff       	call   c000da8e <LogicalDisk::unmount()>
c001d506:	58                   	pop    eax
c001d507:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d50d:	e8 5e 0f ff ff       	call   c000e470 <VCache::writeWriteBuffer()>
c001d512:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d518:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d51c:	83 c4 18             	add    esp,0x18
c001d51f:	5b                   	pop    ebx
c001d520:	e9 3b 0f ff ff       	jmp    c000e460 <VCache::invalidateReadBuffer()>
c001d525:	90                   	nop

c001d526 <ATAPI::eject()>:
c001d526:	57                   	push   edi
c001d527:	b9 03 00 00 00       	mov    ecx,0x3
c001d52c:	53                   	push   ebx
c001d52d:	83 ec 14             	sub    esp,0x14
c001d530:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d534:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d538:	fc                   	cld    
c001d539:	31 c0                	xor    eax,eax
c001d53b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d53d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d542:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d547:	50                   	push   eax
c001d548:	50                   	push   eax
c001d549:	6a 00                	push   0x0
c001d54b:	6a 00                	push   0x0
c001d54d:	6a 00                	push   0x0
c001d54f:	6a 02                	push   0x2
c001d551:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d555:	50                   	push   eax
c001d556:	53                   	push   ebx
c001d557:	e8 c8 fc ff ff       	call   c001d224 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d55c:	83 c4 14             	add    esp,0x14
c001d55f:	53                   	push   ebx
c001d560:	e8 87 ff ff ff       	call   c001d4ec <ATAPI::diskRemoved()>
c001d565:	83 c4 24             	add    esp,0x24
c001d568:	31 c0                	xor    eax,eax
c001d56a:	5b                   	pop    ebx
c001d56b:	5f                   	pop    edi
c001d56c:	c3                   	ret    
c001d56d:	90                   	nop

c001d56e <ATAPI::diskInserted()>:
c001d56e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d572:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d579:	c3                   	ret    

c001d57a <ATAPI::detectMedia()>:
c001d57a:	56                   	push   esi
c001d57b:	53                   	push   ebx
c001d57c:	83 ec 28             	sub    esp,0x28
c001d57f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d583:	6a 0c                	push   0xc
c001d585:	6a 00                	push   0x0
c001d587:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d58b:	56                   	push   esi
c001d58c:	e8 5f 2f fe ff       	call   c00004f0 <memset>
c001d591:	58                   	pop    eax
c001d592:	5a                   	pop    edx
c001d593:	6a 00                	push   0x0
c001d595:	6a 00                	push   0x0
c001d597:	6a 00                	push   0x0
c001d599:	6a 00                	push   0x0
c001d59b:	56                   	push   esi
c001d59c:	53                   	push   ebx
c001d59d:	e8 82 fc ff ff       	call   c001d224 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d5a2:	83 c4 1c             	add    esp,0x1c
c001d5a5:	6a 0c                	push   0xc
c001d5a7:	6a 00                	push   0x0
c001d5a9:	56                   	push   esi
c001d5aa:	e8 41 2f fe ff       	call   c00004f0 <memset>
c001d5af:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d5b4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d5b9:	59                   	pop    ecx
c001d5ba:	58                   	pop    eax
c001d5bb:	6a 01                	push   0x1
c001d5bd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d5c1:	50                   	push   eax
c001d5c2:	6a 00                	push   0x0
c001d5c4:	6a 12                	push   0x12
c001d5c6:	56                   	push   esi
c001d5c7:	53                   	push   ebx
c001d5c8:	e8 57 fc ff ff       	call   c001d224 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d5cd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d5d1:	83 c4 20             	add    esp,0x20
c001d5d4:	83 e0 7f             	and    eax,0x7f
c001d5d7:	83 f8 70             	cmp    eax,0x70
c001d5da:	74 15                	je     c001d5f1 <ATAPI::detectMedia()+0x77>
c001d5dc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d5e3:	75 0c                	jne    c001d5f1 <ATAPI::detectMedia()+0x77>
c001d5e5:	83 ec 0c             	sub    esp,0xc
c001d5e8:	53                   	push   ebx
c001d5e9:	e8 80 ff ff ff       	call   c001d56e <ATAPI::diskInserted()>
c001d5ee:	83 c4 10             	add    esp,0x10
c001d5f1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d5f5:	83 e0 0f             	and    eax,0xf
c001d5f8:	83 f8 02             	cmp    eax,0x2
c001d5fb:	75 1b                	jne    c001d618 <ATAPI::detectMedia()+0x9e>
c001d5fd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d602:	75 2d                	jne    c001d631 <ATAPI::detectMedia()+0xb7>
c001d604:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d60b:	74 24                	je     c001d631 <ATAPI::detectMedia()+0xb7>
c001d60d:	83 ec 0c             	sub    esp,0xc
c001d610:	53                   	push   ebx
c001d611:	e8 d6 fe ff ff       	call   c001d4ec <ATAPI::diskRemoved()>
c001d616:	eb 16                	jmp    c001d62e <ATAPI::detectMedia()+0xb4>
c001d618:	85 c0                	test   eax,eax
c001d61a:	75 15                	jne    c001d631 <ATAPI::detectMedia()+0xb7>
c001d61c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d623:	75 0c                	jne    c001d631 <ATAPI::detectMedia()+0xb7>
c001d625:	83 ec 0c             	sub    esp,0xc
c001d628:	53                   	push   ebx
c001d629:	e8 40 ff ff ff       	call   c001d56e <ATAPI::diskInserted()>
c001d62e:	83 c4 10             	add    esp,0x10
c001d631:	83 c4 24             	add    esp,0x24
c001d634:	5b                   	pop    ebx
c001d635:	5e                   	pop    esi
c001d636:	c3                   	ret    
c001d637:	90                   	nop

c001d638 <ATAPI::open(int, int, void*)>:
c001d638:	56                   	push   esi
c001d639:	53                   	push   ebx
c001d63a:	50                   	push   eax
c001d63b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d63f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d643:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d647:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d64d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d653:	c1 e0 06             	shl    eax,0x6
c001d656:	01 d0                	add    eax,edx
c001d658:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d65f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d665:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d66c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d676:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d67c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d683:	6a 04                	push   0x4
c001d685:	6a 0c                	push   0xc
c001d687:	51                   	push   ecx
c001d688:	52                   	push   edx
c001d689:	e8 46 e3 ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d68e:	90                   	nop
c001d68f:	90                   	nop
c001d690:	6a 00                	push   0x0
c001d692:	6a 0c                	push   0xc
c001d694:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d69b:	50                   	push   eax
c001d69c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6a2:	e8 2d e3 ff ff       	call   c001b9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6a7:	83 c4 14             	add    esp,0x14
c001d6aa:	68 78 01 00 00       	push   0x178
c001d6af:	e8 02 a4 fe ff       	call   c0007ab6 <malloc>
c001d6b4:	83 c4 0c             	add    esp,0xc
c001d6b7:	89 c6                	mov    esi,eax
c001d6b9:	6a 00                	push   0x0
c001d6bb:	68 ff ff ff 7f       	push   0x7fffffff
c001d6c0:	6a 00                	push   0x0
c001d6c2:	6a 00                	push   0x0
c001d6c4:	53                   	push   ebx
c001d6c5:	68 8f 30 02 c0       	push   0xc002308f
c001d6ca:	50                   	push   eax
c001d6cb:	e8 fc 01 ff ff       	call   c000d8cc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d6d0:	83 c4 14             	add    esp,0x14
c001d6d3:	56                   	push   esi
c001d6d4:	e8 b3 02 ff ff       	call   c000d98c <LogicalDisk::assignDriveLetter()>
c001d6d9:	5a                   	pop    edx
c001d6da:	0f be c0             	movsx  eax,al
c001d6dd:	59                   	pop    ecx
c001d6de:	50                   	push   eax
c001d6df:	68 e0 2e 02 c0       	push   0xc0022ee0
c001d6e4:	e8 5c d2 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d6e9:	58                   	pop    eax
c001d6ea:	5a                   	pop    edx
c001d6eb:	56                   	push   esi
c001d6ec:	53                   	push   ebx
c001d6ed:	e8 34 f0 fe ff       	call   c000c726 <Device::addChild(Device*)>
c001d6f2:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d6f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6fb:	e8 5a f4 fe ff       	call   c000cb5a <PhysicalDisk::startCache()>
c001d700:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d707:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d70a:	e8 6b fe ff ff       	call   c001d57a <ATAPI::detectMedia()>
c001d70f:	83 c4 14             	add    esp,0x14
c001d712:	31 c0                	xor    eax,eax
c001d714:	5b                   	pop    ebx
c001d715:	5e                   	pop    esi
c001d716:	c3                   	ret    
c001d717:	90                   	nop

c001d718 <ATAPI::read(unsigned long long, int, void*)>:
c001d718:	55                   	push   ebp
c001d719:	57                   	push   edi
c001d71a:	56                   	push   esi
c001d71b:	53                   	push   ebx
c001d71c:	83 ec 1c             	sub    esp,0x1c
c001d71f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d723:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d727:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d72b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d732:	74 3c                	je     c001d770 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d734:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d738:	b9 03 00 00 00       	mov    ecx,0x3
c001d73d:	fc                   	cld    
c001d73e:	31 c0                	xor    eax,eax
c001d740:	0f ce                	bswap  esi
c001d742:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d744:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d749:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d74d:	89 e8                	mov    eax,ebp
c001d74f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d753:	50                   	push   eax
c001d754:	50                   	push   eax
c001d755:	55                   	push   ebp
c001d756:	c1 e5 0b             	shl    ebp,0xb
c001d759:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d75d:	6a 00                	push   0x0
c001d75f:	55                   	push   ebp
c001d760:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d764:	50                   	push   eax
c001d765:	53                   	push   ebx
c001d766:	e8 b9 fa ff ff       	call   c001d224 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d76b:	83 c4 20             	add    esp,0x20
c001d76e:	eb 1a                	jmp    c001d78a <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d770:	83 ec 0c             	sub    esp,0xc
c001d773:	53                   	push   ebx
c001d774:	e8 01 fe ff ff       	call   c001d57a <ATAPI::detectMedia()>
c001d779:	83 c4 10             	add    esp,0x10
c001d77c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d783:	75 af                	jne    c001d734 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d785:	b8 02 00 00 00       	mov    eax,0x2
c001d78a:	83 c4 1c             	add    esp,0x1c
c001d78d:	5b                   	pop    ebx
c001d78e:	5e                   	pop    esi
c001d78f:	5f                   	pop    edi
c001d790:	5d                   	pop    ebp
c001d791:	c3                   	ret    

c001d792 <SATA::close(int, int, void*)>:
c001d792:	83 ec 0c             	sub    esp,0xc
c001d795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d799:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d79f:	85 c0                	test   eax,eax
c001d7a1:	74 0c                	je     c001d7af <SATA::close(int, int, void*)+0x1d>
c001d7a3:	83 ec 0c             	sub    esp,0xc
c001d7a6:	8b 10                	mov    edx,DWORD PTR [eax]
c001d7a8:	50                   	push   eax
c001d7a9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d7ac:	83 c4 10             	add    esp,0x10
c001d7af:	31 c0                	xor    eax,eax
c001d7b1:	83 c4 0c             	add    esp,0xc
c001d7b4:	c3                   	ret    
c001d7b5:	90                   	nop

c001d7b6 <SATA::powerSaving(PowerSavingLevel)>:
c001d7b6:	c3                   	ret    
c001d7b7:	90                   	nop

c001d7b8 <SATA::open(int, int, void*)>:
c001d7b8:	56                   	push   esi
c001d7b9:	53                   	push   ebx
c001d7ba:	50                   	push   eax
c001d7bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7c3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d7cd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d7d3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d7dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7e1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d7eb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d7f1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d7f8:	e8 c2 a5 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d7fd:	89 c6                	mov    esi,eax
c001d7ff:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d805:	81 c6 00 10 00 00    	add    esi,0x1000
c001d80b:	e8 af a5 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d810:	39 c6                	cmp    esi,eax
c001d812:	74 10                	je     c001d824 <SATA::open(int, int, void*)+0x6c>
c001d814:	83 ec 0c             	sub    esp,0xc
c001d817:	68 28 2f 02 c0       	push   0xc0022f28
c001d81c:	e8 30 3b ff ff       	call   c0011351 <KePanic(char const*)>
c001d821:	83 c4 10             	add    esp,0x10
c001d824:	83 ec 0c             	sub    esp,0xc
c001d827:	6a 02                	push   0x2
c001d829:	e8 df bd fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d82e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d834:	6a 03                	push   0x3
c001d836:	50                   	push   eax
c001d837:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d83d:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d843:	e8 d8 c4 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d848:	83 c4 14             	add    esp,0x14
c001d84b:	53                   	push   ebx
c001d84c:	e8 09 f3 fe ff       	call   c000cb5a <PhysicalDisk::startCache()>
c001d851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d854:	e8 45 05 ff ff       	call   c000dd9e <createPartitionsForDisk(PhysicalDisk*)>
c001d859:	83 c4 14             	add    esp,0x14
c001d85c:	31 c0                	xor    eax,eax
c001d85e:	5b                   	pop    ebx
c001d85f:	5e                   	pop    esi
c001d860:	c3                   	ret    
c001d861:	90                   	nop

c001d862 <SATA::SATA()>:
c001d862:	83 ec 0c             	sub    esp,0xc
c001d865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d869:	83 ec 04             	sub    esp,0x4
c001d86c:	68 00 02 00 00       	push   0x200
c001d871:	68 3c 2f 02 c0       	push   0xc0022f3c
c001d876:	50                   	push   eax
c001d877:	e8 76 f2 fe ff       	call   c000caf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d87c:	83 c4 10             	add    esp,0x10
c001d87f:	ba ac 2f 02 c0       	mov    edx,0xc0022fac
c001d884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d888:	89 10                	mov    DWORD PTR [eax],edx
c001d88a:	90                   	nop
c001d88b:	83 c4 0c             	add    esp,0xc
c001d88e:	c3                   	ret    
c001d88f:	90                   	nop

c001d890 <SATA::access(unsigned long long, int, void*, bool)>:
c001d890:	55                   	push   ebp
c001d891:	57                   	push   edi
c001d892:	56                   	push   esi
c001d893:	53                   	push   ebx
c001d894:	83 ec 2c             	sub    esp,0x2c
c001d897:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d89b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d89f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d8a3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d8a7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d8ab:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d8b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d8b4:	7e 10                	jle    c001d8c6 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d8b6:	83 ec 0c             	sub    esp,0xc
c001d8b9:	68 4c 2f 02 c0       	push   0xc0022f4c
c001d8be:	e8 8e 3a ff ff       	call   c0011351 <KePanic(char const*)>
c001d8c3:	83 c4 10             	add    esp,0x10
c001d8c6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d8cc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d8d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d8d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d8dc:	89 d0                	mov    eax,edx
c001d8de:	c1 e0 07             	shl    eax,0x7
c001d8e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d8e5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d8ef:	51                   	push   ecx
c001d8f0:	8d 42 02             	lea    eax,[edx+0x2]
c001d8f3:	51                   	push   ecx
c001d8f4:	c1 e0 07             	shl    eax,0x7
c001d8f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d8fb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d8ff:	50                   	push   eax
c001d900:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d906:	e8 91 ec ff ff       	call   c001c59c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d90b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d90f:	83 c4 10             	add    esp,0x10
c001d912:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d917:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d91b:	0f 84 57 01 00 00    	je     c001da78 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d921:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d925:	c1 e0 09             	shl    eax,0x9
c001d928:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d92d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d931:	74 0e                	je     c001d941 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d933:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d939:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d93d:	89 c1                	mov    ecx,eax
c001d93f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d941:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d947:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d94b:	8d 42 02             	lea    eax,[edx+0x2]
c001d94e:	c1 e0 07             	shl    eax,0x7
c001d951:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d955:	8b 00                	mov    eax,DWORD PTR [eax]
c001d957:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d95d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d963:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d967:	c1 e1 05             	shl    ecx,0x5
c001d96a:	01 c8                	add    eax,ecx
c001d96c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d970:	83 e1 01             	and    ecx,0x1
c001d973:	89 ce                	mov    esi,ecx
c001d975:	8a 08                	mov    cl,BYTE PTR [eax]
c001d977:	c1 e6 06             	shl    esi,0x6
c001d97a:	83 e1 bf             	and    ecx,0xffffffbf
c001d97d:	09 f1                	or     ecx,esi
c001d97f:	88 08                	mov    BYTE PTR [eax],cl
c001d981:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d983:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d989:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d98f:	89 08                	mov    DWORD PTR [eax],ecx
c001d991:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d997:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d99d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d9a3:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d9a6:	50                   	push   eax
c001d9a7:	68 90 00 00 00       	push   0x90
c001d9ac:	6a 00                	push   0x0
c001d9ae:	56                   	push   esi
c001d9af:	e8 3c 2b fe ff       	call   c00004f0 <memset>
c001d9b4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d9ba:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d9c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9c4:	83 c4 10             	add    esp,0x10
c001d9c7:	48                   	dec    eax
c001d9c8:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d9cd:	89 c1                	mov    ecx,eax
c001d9cf:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d9d5:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d9da:	09 c8                	or     eax,ecx
c001d9dc:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d9e2:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d9e8:	83 c8 80             	or     eax,0xffffff80
c001d9eb:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d9f1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d9f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9f8:	25 00 7f 00 00       	and    eax,0x7f00
c001d9fd:	0d 27 80 ff ff       	or     eax,0xffff8027
c001da02:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001da07:	66 89 06             	mov    WORD PTR [esi],ax
c001da0a:	b0 35                	mov    al,0x35
c001da0c:	75 02                	jne    c001da10 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001da0e:	b0 25                	mov    al,0x25
c001da10:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001da13:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001da17:	89 e8                	mov    eax,ebp
c001da19:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001da1d:	c1 e8 10             	shr    eax,0x10
c001da20:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001da23:	89 e8                	mov    eax,ebp
c001da25:	c1 e8 18             	shr    eax,0x18
c001da28:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001da2b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001da2f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001da32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da36:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001da39:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001da3d:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001da41:	89 d6                	mov    esi,edx
c001da43:	31 c0                	xor    eax,eax
c001da45:	c1 e6 07             	shl    esi,0x7
c001da48:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001da4c:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001da52:	80 e1 88             	and    cl,0x88
c001da55:	74 0a                	je     c001da61 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001da57:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001da5c:	74 0a                	je     c001da68 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001da5e:	40                   	inc    eax
c001da5f:	eb eb                	jmp    c001da4c <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001da61:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001da66:	75 17                	jne    c001da7f <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001da68:	83 ec 0c             	sub    esp,0xc
c001da6b:	68 85 2f 02 c0       	push   0xc0022f85
c001da70:	e8 d0 ce fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001da75:	83 c4 10             	add    esp,0x10
c001da78:	b8 01 00 00 00       	mov    eax,0x1
c001da7d:	eb 5d                	jmp    c001dadc <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001da7f:	b8 01 00 00 00       	mov    eax,0x1
c001da84:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001da88:	c1 e2 07             	shl    edx,0x7
c001da8b:	d3 e0                	shl    eax,cl
c001da8d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001da91:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001da97:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001da9d:	85 c8                	test   eax,ecx
c001da9f:	74 16                	je     c001dab7 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001daa1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001daa7:	0f ba e1 1e          	bt     ecx,0x1e
c001daab:	73 ea                	jae    c001da97 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001daad:	83 ec 0c             	sub    esp,0xc
c001dab0:	68 93 2f 02 c0       	push   0xc0022f93
c001dab5:	eb b9                	jmp    c001da70 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001dab7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001dabd:	0f ba e0 1e          	bt     eax,0x1e
c001dac1:	72 b5                	jb     c001da78 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dac3:	31 c0                	xor    eax,eax
c001dac5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001daca:	75 10                	jne    c001dadc <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001dacc:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001dad2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001dad6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dada:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dadc:	83 c4 2c             	add    esp,0x2c
c001dadf:	5b                   	pop    ebx
c001dae0:	5e                   	pop    esi
c001dae1:	5f                   	pop    edi
c001dae2:	5d                   	pop    ebp
c001dae3:	c3                   	ret    

c001dae4 <SATA::read(unsigned long long, int, void*)>:
c001dae4:	55                   	push   ebp
c001dae5:	57                   	push   edi
c001dae6:	56                   	push   esi
c001dae7:	be 04 00 00 00       	mov    esi,0x4
c001daec:	53                   	push   ebx
c001daed:	83 ec 0c             	sub    esp,0xc
c001daf0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001daf4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001daf8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001dafb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001daff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001db03:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001db09:	0f 87 1a 02 00 00    	ja     c001dd29 <SATA::read(unsigned long long, int, void*)+0x245>
c001db0f:	be 06 00 00 00       	mov    esi,0x6
c001db14:	85 c9                	test   ecx,ecx
c001db16:	0f 84 0d 02 00 00    	je     c001dd29 <SATA::read(unsigned long long, int, void*)+0x245>
c001db1c:	56                   	push   esi
c001db1d:	56                   	push   esi
c001db1e:	6a 00                	push   0x0
c001db20:	51                   	push   ecx
c001db21:	53                   	push   ebx
c001db22:	52                   	push   edx
c001db23:	50                   	push   eax
c001db24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db28:	e8 63 fd ff ff       	call   c001d890 <SATA::access(unsigned long long, int, void*, bool)>
c001db2d:	83 c4 20             	add    esp,0x20
c001db30:	89 c6                	mov    esi,eax
c001db32:	85 c0                	test   eax,eax
c001db34:	0f 85 ea 01 00 00    	jne    c001dd24 <SATA::read(unsigned long long, int, void*)+0x240>
c001db3a:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001db40:	bb 0a 00 00 00       	mov    ebx,0xa
c001db45:	50                   	push   eax
c001db46:	50                   	push   eax
c001db47:	6a 0f                	push   0xf
c001db49:	6a 00                	push   0x0
c001db4b:	e8 75 f2 ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001db50:	5a                   	pop    edx
c001db51:	0f b6 c0             	movzx  eax,al
c001db54:	59                   	pop    ecx
c001db55:	b9 10 27 00 00       	mov    ecx,0x2710
c001db5a:	50                   	push   eax
c001db5b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db60:	99                   	cdq    
c001db61:	f7 f9                	idiv   ecx
c001db63:	99                   	cdq    
c001db64:	f7 fb                	idiv   ebx
c001db66:	8d 42 30             	lea    eax,[edx+0x30]
c001db69:	0f b6 c0             	movzx  eax,al
c001db6c:	50                   	push   eax
c001db6d:	e8 42 f2 ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001db72:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001db78:	5f                   	pop    edi
c001db79:	5d                   	pop    ebp
c001db7a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001db7f:	6a 0f                	push   0xf
c001db81:	6a 00                	push   0x0
c001db83:	e8 3d f2 ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001db88:	5a                   	pop    edx
c001db89:	0f b6 c0             	movzx  eax,al
c001db8c:	59                   	pop    ecx
c001db8d:	50                   	push   eax
c001db8e:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db93:	99                   	cdq    
c001db94:	f7 fd                	idiv   ebp
c001db96:	99                   	cdq    
c001db97:	f7 fb                	idiv   ebx
c001db99:	8d 42 30             	lea    eax,[edx+0x30]
c001db9c:	0f b6 c0             	movzx  eax,al
c001db9f:	50                   	push   eax
c001dba0:	e8 0f f2 ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001dba5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dbab:	5f                   	pop    edi
c001dbac:	bf 64 00 00 00       	mov    edi,0x64
c001dbb1:	58                   	pop    eax
c001dbb2:	6a 0f                	push   0xf
c001dbb4:	6a 00                	push   0x0
c001dbb6:	e8 0a f2 ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001dbbb:	5a                   	pop    edx
c001dbbc:	0f b6 c0             	movzx  eax,al
c001dbbf:	59                   	pop    ecx
c001dbc0:	50                   	push   eax
c001dbc1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbc6:	99                   	cdq    
c001dbc7:	f7 ff                	idiv   edi
c001dbc9:	99                   	cdq    
c001dbca:	f7 fb                	idiv   ebx
c001dbcc:	8d 42 30             	lea    eax,[edx+0x30]
c001dbcf:	0f b6 c0             	movzx  eax,al
c001dbd2:	50                   	push   eax
c001dbd3:	e8 dc f1 ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001dbd8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dbde:	58                   	pop    eax
c001dbdf:	5a                   	pop    edx
c001dbe0:	6a 0f                	push   0xf
c001dbe2:	6a 00                	push   0x0
c001dbe4:	e8 dc f1 ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001dbe9:	59                   	pop    ecx
c001dbea:	0f b6 c0             	movzx  eax,al
c001dbed:	5a                   	pop    edx
c001dbee:	50                   	push   eax
c001dbef:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbf4:	99                   	cdq    
c001dbf5:	f7 fb                	idiv   ebx
c001dbf7:	99                   	cdq    
c001dbf8:	f7 fb                	idiv   ebx
c001dbfa:	8d 42 30             	lea    eax,[edx+0x30]
c001dbfd:	0f b6 c0             	movzx  eax,al
c001dc00:	50                   	push   eax
c001dc01:	e8 ae f1 ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001dc06:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc0c:	59                   	pop    ecx
c001dc0d:	58                   	pop    eax
c001dc0e:	6a 0f                	push   0xf
c001dc10:	6a 00                	push   0x0
c001dc12:	e8 ae f1 ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001dc17:	5a                   	pop    edx
c001dc18:	0f b6 c0             	movzx  eax,al
c001dc1b:	59                   	pop    ecx
c001dc1c:	50                   	push   eax
c001dc1d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc22:	99                   	cdq    
c001dc23:	f7 fb                	idiv   ebx
c001dc25:	8d 42 30             	lea    eax,[edx+0x30]
c001dc28:	0f b6 c0             	movzx  eax,al
c001dc2b:	50                   	push   eax
c001dc2c:	e8 83 f1 ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001dc31:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dc37:	58                   	pop    eax
c001dc38:	5a                   	pop    edx
c001dc39:	6a 0f                	push   0xf
c001dc3b:	6a 00                	push   0x0
c001dc3d:	e8 83 f1 ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001dc42:	59                   	pop    ecx
c001dc43:	0f b6 c0             	movzx  eax,al
c001dc46:	5a                   	pop    edx
c001dc47:	b9 10 27 00 00       	mov    ecx,0x2710
c001dc4c:	50                   	push   eax
c001dc4d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc52:	99                   	cdq    
c001dc53:	f7 f9                	idiv   ecx
c001dc55:	99                   	cdq    
c001dc56:	f7 fb                	idiv   ebx
c001dc58:	8d 42 30             	lea    eax,[edx+0x30]
c001dc5b:	0f b6 c0             	movzx  eax,al
c001dc5e:	50                   	push   eax
c001dc5f:	e8 50 f1 ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001dc64:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dc6a:	59                   	pop    ecx
c001dc6b:	58                   	pop    eax
c001dc6c:	6a 0f                	push   0xf
c001dc6e:	6a 00                	push   0x0
c001dc70:	e8 50 f1 ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001dc75:	5a                   	pop    edx
c001dc76:	0f b6 c0             	movzx  eax,al
c001dc79:	59                   	pop    ecx
c001dc7a:	50                   	push   eax
c001dc7b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc80:	99                   	cdq    
c001dc81:	f7 fd                	idiv   ebp
c001dc83:	99                   	cdq    
c001dc84:	f7 fb                	idiv   ebx
c001dc86:	8d 42 30             	lea    eax,[edx+0x30]
c001dc89:	0f b6 c0             	movzx  eax,al
c001dc8c:	50                   	push   eax
c001dc8d:	e8 22 f1 ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001dc92:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dc98:	5d                   	pop    ebp
c001dc99:	58                   	pop    eax
c001dc9a:	6a 0f                	push   0xf
c001dc9c:	6a 00                	push   0x0
c001dc9e:	e8 22 f1 ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001dca3:	5a                   	pop    edx
c001dca4:	0f b6 c0             	movzx  eax,al
c001dca7:	59                   	pop    ecx
c001dca8:	50                   	push   eax
c001dca9:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcae:	99                   	cdq    
c001dcaf:	f7 ff                	idiv   edi
c001dcb1:	99                   	cdq    
c001dcb2:	f7 fb                	idiv   ebx
c001dcb4:	8d 42 30             	lea    eax,[edx+0x30]
c001dcb7:	0f b6 c0             	movzx  eax,al
c001dcba:	50                   	push   eax
c001dcbb:	e8 f4 f0 ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001dcc0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dcc6:	5f                   	pop    edi
c001dcc7:	5d                   	pop    ebp
c001dcc8:	6a 0f                	push   0xf
c001dcca:	6a 00                	push   0x0
c001dccc:	e8 f4 f0 ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001dcd1:	5a                   	pop    edx
c001dcd2:	0f b6 c0             	movzx  eax,al
c001dcd5:	59                   	pop    ecx
c001dcd6:	50                   	push   eax
c001dcd7:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcdc:	99                   	cdq    
c001dcdd:	f7 fb                	idiv   ebx
c001dcdf:	99                   	cdq    
c001dce0:	f7 fb                	idiv   ebx
c001dce2:	8d 42 30             	lea    eax,[edx+0x30]
c001dce5:	0f b6 c0             	movzx  eax,al
c001dce8:	50                   	push   eax
c001dce9:	e8 c6 f0 ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001dcee:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dcf4:	5f                   	pop    edi
c001dcf5:	5d                   	pop    ebp
c001dcf6:	6a 0f                	push   0xf
c001dcf8:	6a 00                	push   0x0
c001dcfa:	e8 c6 f0 ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001dcff:	5a                   	pop    edx
c001dd00:	0f b6 c0             	movzx  eax,al
c001dd03:	59                   	pop    ecx
c001dd04:	50                   	push   eax
c001dd05:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd0a:	99                   	cdq    
c001dd0b:	f7 fb                	idiv   ebx
c001dd0d:	83 c2 30             	add    edx,0x30
c001dd10:	0f b6 d2             	movzx  edx,dl
c001dd13:	52                   	push   edx
c001dd14:	e8 9b f0 ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001dd19:	83 c4 10             	add    esp,0x10
c001dd1c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dd22:	eb 05                	jmp    c001dd29 <SATA::read(unsigned long long, int, void*)+0x245>
c001dd24:	be 01 00 00 00       	mov    esi,0x1
c001dd29:	83 c4 0c             	add    esp,0xc
c001dd2c:	89 f0                	mov    eax,esi
c001dd2e:	5b                   	pop    ebx
c001dd2f:	5e                   	pop    esi
c001dd30:	5f                   	pop    edi
c001dd31:	5d                   	pop    ebp
c001dd32:	c3                   	ret    
c001dd33:	90                   	nop

c001dd34 <SATA::write(unsigned long long, int, void*)>:
c001dd34:	55                   	push   ebp
c001dd35:	b8 04 00 00 00       	mov    eax,0x4
c001dd3a:	57                   	push   edi
c001dd3b:	56                   	push   esi
c001dd3c:	53                   	push   ebx
c001dd3d:	83 ec 1c             	sub    esp,0x1c
c001dd40:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dd44:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dd48:	8d 75 ff             	lea    esi,[ebp-0x1]
c001dd4b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dd4f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001dd53:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dd59:	0f 87 32 02 00 00    	ja     c001df91 <SATA::write(unsigned long long, int, void*)+0x25d>
c001dd5f:	b8 06 00 00 00       	mov    eax,0x6
c001dd64:	85 ff                	test   edi,edi
c001dd66:	0f 84 25 02 00 00    	je     c001df91 <SATA::write(unsigned long long, int, void*)+0x25d>
c001dd6c:	89 ee                	mov    esi,ebp
c001dd6e:	c1 e6 09             	shl    esi,0x9
c001dd71:	01 fe                	add    esi,edi
c001dd73:	89 c8                	mov    eax,ecx
c001dd75:	89 da                	mov    edx,ebx
c001dd77:	83 c0 01             	add    eax,0x1
c001dd7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd7e:	83 d2 00             	adc    edx,0x0
c001dd81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dd85:	50                   	push   eax
c001dd86:	50                   	push   eax
c001dd87:	6a 01                	push   0x1
c001dd89:	57                   	push   edi
c001dd8a:	81 c7 00 02 00 00    	add    edi,0x200
c001dd90:	6a 01                	push   0x1
c001dd92:	53                   	push   ebx
c001dd93:	51                   	push   ecx
c001dd94:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dd98:	e8 f3 fa ff ff       	call   c001d890 <SATA::access(unsigned long long, int, void*, bool)>
c001dd9d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dda1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dda5:	83 c4 20             	add    esp,0x20
c001dda8:	39 f7                	cmp    edi,esi
c001ddaa:	75 c7                	jne    c001dd73 <SATA::write(unsigned long long, int, void*)+0x3f>
c001ddac:	bb 0a 00 00 00       	mov    ebx,0xa
c001ddb1:	01 2d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebp
c001ddb7:	bd 10 27 00 00       	mov    ebp,0x2710
c001ddbc:	50                   	push   eax
c001ddbd:	50                   	push   eax
c001ddbe:	6a 0f                	push   0xf
c001ddc0:	6a 00                	push   0x0
c001ddc2:	e8 fe ef ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001ddc7:	5a                   	pop    edx
c001ddc8:	0f b6 c0             	movzx  eax,al
c001ddcb:	59                   	pop    ecx
c001ddcc:	50                   	push   eax
c001ddcd:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ddd2:	99                   	cdq    
c001ddd3:	f7 fd                	idiv   ebp
c001ddd5:	99                   	cdq    
c001ddd6:	f7 fb                	idiv   ebx
c001ddd8:	8d 42 30             	lea    eax,[edx+0x30]
c001dddb:	0f b6 c0             	movzx  eax,al
c001ddde:	50                   	push   eax
c001dddf:	e8 d0 ef ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001dde4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ddea:	5e                   	pop    esi
c001ddeb:	5f                   	pop    edi
c001ddec:	bf e8 03 00 00       	mov    edi,0x3e8
c001ddf1:	6a 0f                	push   0xf
c001ddf3:	6a 00                	push   0x0
c001ddf5:	e8 cb ef ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001ddfa:	5a                   	pop    edx
c001ddfb:	0f b6 c0             	movzx  eax,al
c001ddfe:	59                   	pop    ecx
c001ddff:	50                   	push   eax
c001de00:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de05:	99                   	cdq    
c001de06:	f7 ff                	idiv   edi
c001de08:	99                   	cdq    
c001de09:	f7 fb                	idiv   ebx
c001de0b:	8d 42 30             	lea    eax,[edx+0x30]
c001de0e:	0f b6 c0             	movzx  eax,al
c001de11:	50                   	push   eax
c001de12:	e8 9d ef ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001de17:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001de1d:	5e                   	pop    esi
c001de1e:	be 64 00 00 00       	mov    esi,0x64
c001de23:	58                   	pop    eax
c001de24:	6a 0f                	push   0xf
c001de26:	6a 00                	push   0x0
c001de28:	e8 98 ef ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001de2d:	5a                   	pop    edx
c001de2e:	0f b6 c0             	movzx  eax,al
c001de31:	59                   	pop    ecx
c001de32:	50                   	push   eax
c001de33:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de38:	99                   	cdq    
c001de39:	f7 fe                	idiv   esi
c001de3b:	99                   	cdq    
c001de3c:	f7 fb                	idiv   ebx
c001de3e:	8d 42 30             	lea    eax,[edx+0x30]
c001de41:	0f b6 c0             	movzx  eax,al
c001de44:	50                   	push   eax
c001de45:	e8 6a ef ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001de4a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001de50:	58                   	pop    eax
c001de51:	5a                   	pop    edx
c001de52:	6a 0f                	push   0xf
c001de54:	6a 00                	push   0x0
c001de56:	e8 6a ef ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001de5b:	59                   	pop    ecx
c001de5c:	0f b6 c0             	movzx  eax,al
c001de5f:	5a                   	pop    edx
c001de60:	50                   	push   eax
c001de61:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de66:	99                   	cdq    
c001de67:	f7 fb                	idiv   ebx
c001de69:	99                   	cdq    
c001de6a:	f7 fb                	idiv   ebx
c001de6c:	8d 42 30             	lea    eax,[edx+0x30]
c001de6f:	0f b6 c0             	movzx  eax,al
c001de72:	50                   	push   eax
c001de73:	e8 3c ef ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001de78:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001de7e:	59                   	pop    ecx
c001de7f:	58                   	pop    eax
c001de80:	6a 0f                	push   0xf
c001de82:	6a 00                	push   0x0
c001de84:	e8 3c ef ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001de89:	5a                   	pop    edx
c001de8a:	0f b6 c0             	movzx  eax,al
c001de8d:	59                   	pop    ecx
c001de8e:	50                   	push   eax
c001de8f:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de94:	99                   	cdq    
c001de95:	f7 fb                	idiv   ebx
c001de97:	83 c2 30             	add    edx,0x30
c001de9a:	0f b6 d2             	movzx  edx,dl
c001de9d:	52                   	push   edx
c001de9e:	e8 11 ef ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001dea3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dea9:	58                   	pop    eax
c001deaa:	5a                   	pop    edx
c001deab:	6a 0f                	push   0xf
c001dead:	6a 00                	push   0x0
c001deaf:	e8 11 ef ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001deb4:	59                   	pop    ecx
c001deb5:	0f b6 c0             	movzx  eax,al
c001deb8:	5a                   	pop    edx
c001deb9:	50                   	push   eax
c001deba:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001debf:	99                   	cdq    
c001dec0:	f7 fd                	idiv   ebp
c001dec2:	99                   	cdq    
c001dec3:	f7 fb                	idiv   ebx
c001dec5:	8d 42 30             	lea    eax,[edx+0x30]
c001dec8:	0f b6 c0             	movzx  eax,al
c001decb:	50                   	push   eax
c001decc:	e8 e3 ee ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001ded1:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ded7:	59                   	pop    ecx
c001ded8:	5d                   	pop    ebp
c001ded9:	6a 0f                	push   0xf
c001dedb:	6a 00                	push   0x0
c001dedd:	e8 e3 ee ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001dee2:	5a                   	pop    edx
c001dee3:	0f b6 c0             	movzx  eax,al
c001dee6:	59                   	pop    ecx
c001dee7:	50                   	push   eax
c001dee8:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001deed:	99                   	cdq    
c001deee:	f7 ff                	idiv   edi
c001def0:	99                   	cdq    
c001def1:	f7 fb                	idiv   ebx
c001def3:	8d 42 30             	lea    eax,[edx+0x30]
c001def6:	0f b6 c0             	movzx  eax,al
c001def9:	50                   	push   eax
c001defa:	e8 b5 ee ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001deff:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001df05:	5f                   	pop    edi
c001df06:	5d                   	pop    ebp
c001df07:	6a 0f                	push   0xf
c001df09:	6a 00                	push   0x0
c001df0b:	e8 b5 ee ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001df10:	5a                   	pop    edx
c001df11:	0f b6 c0             	movzx  eax,al
c001df14:	59                   	pop    ecx
c001df15:	50                   	push   eax
c001df16:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df1b:	99                   	cdq    
c001df1c:	f7 fe                	idiv   esi
c001df1e:	99                   	cdq    
c001df1f:	f7 fb                	idiv   ebx
c001df21:	8d 42 30             	lea    eax,[edx+0x30]
c001df24:	0f b6 c0             	movzx  eax,al
c001df27:	50                   	push   eax
c001df28:	e8 87 ee ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001df2d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001df33:	5e                   	pop    esi
c001df34:	5f                   	pop    edi
c001df35:	6a 0f                	push   0xf
c001df37:	6a 00                	push   0x0
c001df39:	e8 87 ee ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001df3e:	5d                   	pop    ebp
c001df3f:	0f b6 c0             	movzx  eax,al
c001df42:	5a                   	pop    edx
c001df43:	50                   	push   eax
c001df44:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df49:	99                   	cdq    
c001df4a:	f7 fb                	idiv   ebx
c001df4c:	99                   	cdq    
c001df4d:	f7 fb                	idiv   ebx
c001df4f:	8d 42 30             	lea    eax,[edx+0x30]
c001df52:	0f b6 c0             	movzx  eax,al
c001df55:	50                   	push   eax
c001df56:	e8 59 ee ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001df5b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001df61:	59                   	pop    ecx
c001df62:	5e                   	pop    esi
c001df63:	6a 0f                	push   0xf
c001df65:	6a 00                	push   0x0
c001df67:	e8 59 ee ff ff       	call   c001cdc5 <combineColours(unsigned char, unsigned char)>
c001df6c:	5f                   	pop    edi
c001df6d:	0f b6 c0             	movzx  eax,al
c001df70:	5d                   	pop    ebp
c001df71:	50                   	push   eax
c001df72:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df77:	99                   	cdq    
c001df78:	f7 fb                	idiv   ebx
c001df7a:	83 c2 30             	add    edx,0x30
c001df7d:	0f b6 d2             	movzx  edx,dl
c001df80:	52                   	push   edx
c001df81:	e8 2e ee ff ff       	call   c001cdb4 <combineCharAndColour(char, unsigned char)>
c001df86:	83 c4 10             	add    esp,0x10
c001df89:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001df8f:	31 c0                	xor    eax,eax
c001df91:	83 c4 1c             	add    esp,0x1c
c001df94:	5b                   	pop    ebx
c001df95:	5e                   	pop    esi
c001df96:	5f                   	pop    edi
c001df97:	5d                   	pop    ebp
c001df98:	c3                   	ret    
c001df99:	90                   	nop

c001df9a <SATAPI::write(unsigned long long, int, void*)>:
c001df9a:	b8 03 00 00 00       	mov    eax,0x3
c001df9f:	c3                   	ret    

c001dfa0 <SATAPI::close(int, int, void*)>:
c001dfa0:	83 ec 0c             	sub    esp,0xc
c001dfa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfa7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dfad:	85 c0                	test   eax,eax
c001dfaf:	74 0c                	je     c001dfbd <SATAPI::close(int, int, void*)+0x1d>
c001dfb1:	83 ec 0c             	sub    esp,0xc
c001dfb4:	8b 10                	mov    edx,DWORD PTR [eax]
c001dfb6:	50                   	push   eax
c001dfb7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dfba:	83 c4 10             	add    esp,0x10
c001dfbd:	31 c0                	xor    eax,eax
c001dfbf:	83 c4 0c             	add    esp,0xc
c001dfc2:	c3                   	ret    
c001dfc3:	90                   	nop

c001dfc4 <SATAPI::SATAPI()>:
c001dfc4:	83 ec 0c             	sub    esp,0xc
c001dfc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfcb:	83 ec 04             	sub    esp,0x4
c001dfce:	68 00 08 00 00       	push   0x800
c001dfd3:	68 dc 2f 02 c0       	push   0xc0022fdc
c001dfd8:	50                   	push   eax
c001dfd9:	e8 14 eb fe ff       	call   c000caf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dfde:	83 c4 10             	add    esp,0x10
c001dfe1:	ba d0 30 02 c0       	mov    edx,0xc00230d0
c001dfe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfea:	89 10                	mov    DWORD PTR [eax],edx
c001dfec:	90                   	nop
c001dfed:	83 c4 0c             	add    esp,0xc
c001dff0:	c3                   	ret    
c001dff1:	90                   	nop

c001dff2 <SATAPI::diskRemoved()>:
c001dff2:	c3                   	ret    
c001dff3:	90                   	nop

c001dff4 <SATAPI::diskInserted()>:
c001dff4:	83 ec 18             	sub    esp,0x18
c001dff7:	68 e8 2f 02 c0       	push   0xc0022fe8
c001dffc:	e8 44 c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e005:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e00c:	83 c4 1c             	add    esp,0x1c
c001e00f:	c3                   	ret    

c001e010 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e010:	55                   	push   ebp
c001e011:	57                   	push   edi
c001e012:	56                   	push   esi
c001e013:	53                   	push   ebx
c001e014:	83 ec 34             	sub    esp,0x34
c001e017:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e01b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e01f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e023:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e027:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e02b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e031:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e037:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e03b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e041:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e045:	83 c0 02             	add    eax,0x2
c001e048:	c1 e0 07             	shl    eax,0x7
c001e04b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e04f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e053:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e057:	c1 e0 07             	shl    eax,0x7
c001e05a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e05e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e062:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e070:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e076:	e8 21 e5 ff ff       	call   c001c59c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e07b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e07f:	83 c4 10             	add    esp,0x10
c001e082:	b8 01 00 00 00       	mov    eax,0x1
c001e087:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e08c:	0f 84 53 02 00 00    	je     c001e2e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e092:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e09c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e09e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e0a4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e0aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0ae:	c1 e1 05             	shl    ecx,0x5
c001e0b1:	01 c8                	add    eax,ecx
c001e0b3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e0b5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e0bb:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e0c1:	89 08                	mov    DWORD PTR [eax],ecx
c001e0c3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e0c9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e0cf:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e0d5:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e0d8:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e0db:	50                   	push   eax
c001e0dc:	68 90 00 00 00       	push   0x90
c001e0e1:	6a 00                	push   0x0
c001e0e3:	53                   	push   ebx
c001e0e4:	e8 07 24 fe ff       	call   c00004f0 <memset>
c001e0e9:	b9 0c 00 00 00       	mov    ecx,0xc
c001e0ee:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e0f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e0f4:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e0fa:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e0fe:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e104:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e108:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e10c:	48                   	dec    eax
c001e10d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e112:	89 c1                	mov    ecx,eax
c001e114:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e11a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e11f:	09 c8                	or     eax,ecx
c001e121:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e127:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e12d:	83 c8 80             	or     eax,0xffffff80
c001e130:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e136:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e139:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e13d:	25 00 7f 00 00       	and    eax,0x7f00
c001e142:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e146:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e14b:	66 89 03             	mov    WORD PTR [ebx],ax
c001e14e:	89 d0                	mov    eax,edx
c001e150:	c1 ea 18             	shr    edx,0x18
c001e153:	c1 e8 10             	shr    eax,0x10
c001e156:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e159:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e15c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e160:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e163:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e167:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e16a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e16e:	83 c4 10             	add    esp,0x10
c001e171:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e175:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e179:	31 c0                	xor    eax,eax
c001e17b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e181:	80 e1 88             	and    cl,0x88
c001e184:	74 0a                	je     c001e190 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e186:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e18b:	74 0a                	je     c001e197 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e18d:	40                   	inc    eax
c001e18e:	eb eb                	jmp    c001e17b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e190:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e195:	75 43                	jne    c001e1da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e197:	83 ec 0c             	sub    esp,0xc
c001e19a:	68 00 30 02 c0       	push   0xc0023000
c001e19f:	e8 a1 c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e1a4:	58                   	pop    eax
c001e1a5:	5a                   	pop    edx
c001e1a6:	68 15 30 02 c0       	push   0xc0023015
c001e1ab:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e1b1:	e8 f0 a8 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e1b6:	59                   	pop    ecx
c001e1b7:	5b                   	pop    ebx
c001e1b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e1bc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e1c2:	e8 6f e4 ff ff       	call   c001c636 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e1c7:	5e                   	pop    esi
c001e1c8:	5f                   	pop    edi
c001e1c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e1cd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e1d3:	e8 3e e4 ff ff       	call   c001c616 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e1d8:	eb 48                	jmp    c001e222 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e1da:	be 01 00 00 00       	mov    esi,0x1
c001e1df:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e1e3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e1e7:	d3 e6                	shl    esi,cl
c001e1e9:	c1 e7 07             	shl    edi,0x7
c001e1ec:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e1f2:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e1f7:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e1fb:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e201:	85 c6                	test   esi,eax
c001e203:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e209:	0f 84 a3 00 00 00    	je     c001e2b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e20f:	0f ba e0 1e          	bt     eax,0x1e
c001e213:	73 1a                	jae    c001e22f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e215:	83 ec 0c             	sub    esp,0xc
c001e218:	68 27 30 02 c0       	push   0xc0023027
c001e21d:	e8 23 c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e222:	83 c4 10             	add    esp,0x10
c001e225:	b8 01 00 00 00       	mov    eax,0x1
c001e22a:	e9 b6 00 00 00       	jmp    c001e2e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e22f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e235:	83 f8 0d             	cmp    eax,0xd
c001e238:	77 0a                	ja     c001e244 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e23a:	83 ec 0c             	sub    esp,0xc
c001e23d:	68 c8 00 00 00       	push   0xc8
c001e242:	eb 28                	jmp    c001e26c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e244:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e24a:	83 f8 0d             	cmp    eax,0xd
c001e24d:	77 0a                	ja     c001e259 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e24f:	83 ec 0c             	sub    esp,0xc
c001e252:	68 58 02 00 00       	push   0x258
c001e257:	eb 13                	jmp    c001e26c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e259:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e25f:	83 f8 06             	cmp    eax,0x6
c001e262:	77 10                	ja     c001e274 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e264:	83 ec 0c             	sub    esp,0xc
c001e267:	68 dc 05 00 00       	push   0x5dc
c001e26c:	e8 cb 7d ff ff       	call   c001603c <milliTenthSleep(unsigned int)>
c001e271:	83 c4 10             	add    esp,0x10
c001e274:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e278:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e27b:	75 06                	jne    c001e283 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e27d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e281:	74 15                	je     c001e298 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e283:	83 fb 06             	cmp    ebx,0x6
c001e286:	77 10                	ja     c001e298 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e288:	83 ec 0c             	sub    esp,0xc
c001e28b:	68 c4 09 00 00       	push   0x9c4
c001e290:	e8 a7 7d ff ff       	call   c001603c <milliTenthSleep(unsigned int)>
c001e295:	83 c4 10             	add    esp,0x10
c001e298:	43                   	inc    ebx
c001e299:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e29f:	0f 85 56 ff ff ff    	jne    c001e1fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e2a5:	83 ec 0c             	sub    esp,0xc
c001e2a8:	68 3a 30 02 c0       	push   0xc002303a
c001e2ad:	e9 6b ff ff ff       	jmp    c001e21d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e2b2:	0f ba e0 1e          	bt     eax,0x1e
c001e2b6:	73 0d                	jae    c001e2c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e2b8:	83 ec 0c             	sub    esp,0xc
c001e2bb:	68 4e 30 02 c0       	push   0xc002304e
c001e2c0:	e9 58 ff ff ff       	jmp    c001e21d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e2c5:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e2ca:	74 17                	je     c001e2e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e2cc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e2d1:	74 10                	je     c001e2e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e2d3:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e2d9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e2dd:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e2e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e2e3:	31 c0                	xor    eax,eax
c001e2e5:	83 c4 2c             	add    esp,0x2c
c001e2e8:	5b                   	pop    ebx
c001e2e9:	5e                   	pop    esi
c001e2ea:	5f                   	pop    edi
c001e2eb:	5d                   	pop    ebp
c001e2ec:	c3                   	ret    
c001e2ed:	90                   	nop

c001e2ee <SATAPI::eject()>:
c001e2ee:	57                   	push   edi
c001e2ef:	b9 03 00 00 00       	mov    ecx,0x3
c001e2f4:	83 ec 18             	sub    esp,0x18
c001e2f7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e2fb:	fc                   	cld    
c001e2fc:	31 c0                	xor    eax,eax
c001e2fe:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e300:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e305:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e30a:	50                   	push   eax
c001e30b:	6a 00                	push   0x0
c001e30d:	6a 00                	push   0x0
c001e30f:	6a 00                	push   0x0
c001e311:	6a 00                	push   0x0
c001e313:	6a 02                	push   0x2
c001e315:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e319:	50                   	push   eax
c001e31a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e31e:	e8 ed fc ff ff       	call   c001e010 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e323:	31 c0                	xor    eax,eax
c001e325:	83 c4 38             	add    esp,0x38
c001e328:	5f                   	pop    edi
c001e329:	c3                   	ret    

c001e32a <SATAPI::detectMedia()>:
c001e32a:	53                   	push   ebx
c001e32b:	83 ec 14             	sub    esp,0x14
c001e32e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e332:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e338:	e8 33 01 ff ff       	call   c000e470 <VCache::writeWriteBuffer()>
c001e33d:	59                   	pop    ecx
c001e33e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e344:	e8 17 01 ff ff       	call   c000e460 <VCache::invalidateReadBuffer()>
c001e349:	c7 04 24 63 30 02 c0 	mov    DWORD PTR [esp],0xc0023063
c001e350:	e8 f0 c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e355:	83 c4 10             	add    esp,0x10
c001e358:	31 c0                	xor    eax,eax
c001e35a:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e361:	85 d2                	test   edx,edx
c001e363:	74 0f                	je     c001e374 <SATAPI::detectMedia()+0x4a>
c001e365:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e36b:	75 07                	jne    c001e374 <SATAPI::detectMedia()+0x4a>
c001e36d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e374:	40                   	inc    eax
c001e375:	83 f8 1a             	cmp    eax,0x1a
c001e378:	75 e0                	jne    c001e35a <SATAPI::detectMedia()+0x30>
c001e37a:	83 c4 08             	add    esp,0x8
c001e37d:	5b                   	pop    ebx
c001e37e:	c3                   	ret    
c001e37f:	90                   	nop

c001e380 <SATAPI::open(int, int, void*)>:
c001e380:	56                   	push   esi
c001e381:	53                   	push   ebx
c001e382:	51                   	push   ecx
c001e383:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e387:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e38b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e395:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e39b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e3a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3a9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e3b3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e3b9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e3c0:	e8 fa 99 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e3c5:	89 c6                	mov    esi,eax
c001e3c7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e3cd:	81 c6 00 10 00 00    	add    esi,0x1000
c001e3d3:	e8 e7 99 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e3d8:	39 c6                	cmp    esi,eax
c001e3da:	74 10                	je     c001e3ec <SATAPI::open(int, int, void*)+0x6c>
c001e3dc:	83 ec 0c             	sub    esp,0xc
c001e3df:	68 78 30 02 c0       	push   0xc0023078
c001e3e4:	e8 68 2f ff ff       	call   c0011351 <KePanic(char const*)>
c001e3e9:	83 c4 10             	add    esp,0x10
c001e3ec:	83 ec 0c             	sub    esp,0xc
c001e3ef:	6a 02                	push   0x2
c001e3f1:	e8 17 b2 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e3f6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e3fc:	6a 03                	push   0x3
c001e3fe:	50                   	push   eax
c001e3ff:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e405:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e40b:	e8 10 b9 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e410:	83 c4 14             	add    esp,0x14
c001e413:	68 78 01 00 00       	push   0x178
c001e418:	e8 99 96 fe ff       	call   c0007ab6 <malloc>
c001e41d:	83 c4 0c             	add    esp,0xc
c001e420:	89 c6                	mov    esi,eax
c001e422:	6a 00                	push   0x0
c001e424:	68 ff ff ff 7f       	push   0x7fffffff
c001e429:	6a 00                	push   0x0
c001e42b:	6a 00                	push   0x0
c001e42d:	53                   	push   ebx
c001e42e:	68 8e 30 02 c0       	push   0xc002308e
c001e433:	50                   	push   eax
c001e434:	e8 93 f4 fe ff       	call   c000d8cc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e439:	83 c4 14             	add    esp,0x14
c001e43c:	56                   	push   esi
c001e43d:	e8 4a f5 fe ff       	call   c000d98c <LogicalDisk::assignDriveLetter()>
c001e442:	5a                   	pop    edx
c001e443:	0f be c0             	movsx  eax,al
c001e446:	59                   	pop    ecx
c001e447:	50                   	push   eax
c001e448:	68 e0 2e 02 c0       	push   0xc0022ee0
c001e44d:	e8 f3 c4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e452:	58                   	pop    eax
c001e453:	5a                   	pop    edx
c001e454:	56                   	push   esi
c001e455:	53                   	push   ebx
c001e456:	e8 cb e2 fe ff       	call   c000c726 <Device::addChild(Device*)>
c001e45b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e461:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e464:	e8 f1 e6 fe ff       	call   c000cb5a <PhysicalDisk::startCache()>
c001e469:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e470:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e473:	e8 b2 fe ff ff       	call   c001e32a <SATAPI::detectMedia()>
c001e478:	83 c4 14             	add    esp,0x14
c001e47b:	31 c0                	xor    eax,eax
c001e47d:	5b                   	pop    ebx
c001e47e:	5e                   	pop    esi
c001e47f:	c3                   	ret    

c001e480 <SATAPI::read(unsigned long long, int, void*)>:
c001e480:	57                   	push   edi
c001e481:	56                   	push   esi
c001e482:	53                   	push   ebx
c001e483:	83 ec 30             	sub    esp,0x30
c001e486:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e48a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e48e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e492:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e496:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e49a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e49e:	83 fe 04             	cmp    esi,0x4
c001e4a1:	7e 10                	jle    c001e4b3 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e4a3:	83 ec 0c             	sub    esp,0xc
c001e4a6:	68 9c 30 02 c0       	push   0xc002309c
c001e4ab:	e8 a1 2e ff ff       	call   c0011351 <KePanic(char const*)>
c001e4b0:	83 c4 10             	add    esp,0x10
c001e4b3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e4b9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e4bf:	51                   	push   ecx
c001e4c0:	50                   	push   eax
c001e4c1:	83 c0 02             	add    eax,0x2
c001e4c4:	c1 e0 07             	shl    eax,0x7
c001e4c7:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e4cd:	50                   	push   eax
c001e4ce:	52                   	push   edx
c001e4cf:	e8 8c e1 ff ff       	call   c001c660 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e4d4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e4d8:	b9 03 00 00 00       	mov    ecx,0x3
c001e4dd:	fc                   	cld    
c001e4de:	31 c0                	xor    eax,eax
c001e4e0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e4e2:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e4e7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e4ec:	83 c4 0c             	add    esp,0xc
c001e4ef:	6a 00                	push   0x0
c001e4f1:	6a 00                	push   0x0
c001e4f3:	6a 00                	push   0x0
c001e4f5:	6a 00                	push   0x0
c001e4f7:	6a 02                	push   0x2
c001e4f9:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e4fd:	50                   	push   eax
c001e4fe:	53                   	push   ebx
c001e4ff:	e8 0c fb ff ff       	call   c001e010 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e504:	83 c4 20             	add    esp,0x20
c001e507:	85 c0                	test   eax,eax
c001e509:	75 44                	jne    c001e54f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e50b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e50f:	b9 03 00 00 00       	mov    ecx,0x3
c001e514:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e516:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e51a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e51f:	0f c8                	bswap  eax
c001e521:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e525:	89 f0                	mov    eax,esi
c001e527:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e52b:	50                   	push   eax
c001e52c:	56                   	push   esi
c001e52d:	c1 e6 0b             	shl    esi,0xb
c001e530:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e534:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e538:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e53c:	56                   	push   esi
c001e53d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e541:	50                   	push   eax
c001e542:	53                   	push   ebx
c001e543:	e8 c8 fa ff ff       	call   c001e010 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e548:	83 c4 20             	add    esp,0x20
c001e54b:	85 c0                	test   eax,eax
c001e54d:	74 14                	je     c001e563 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e54f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e553:	83 ec 0c             	sub    esp,0xc
c001e556:	53                   	push   ebx
c001e557:	e8 ce fd ff ff       	call   c001e32a <SATAPI::detectMedia()>
c001e55c:	83 c4 10             	add    esp,0x10
c001e55f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e563:	83 c4 30             	add    esp,0x30
c001e566:	5b                   	pop    ebx
c001e567:	5e                   	pop    esi
c001e568:	5f                   	pop    edi
c001e569:	c3                   	ret    

c001e56a <IOAPIC::close(int, int, void*)>:
c001e56a:	b8 00 00 00 00       	mov    eax,0x0
c001e56f:	c3                   	ret    

c001e570 <apicGetBase()>:
c001e570:	55                   	push   ebp
c001e571:	89 e5                	mov    ebp,esp
c001e573:	83 ec 18             	sub    esp,0x18
c001e576:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e57b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e581:	83 e0 08             	and    eax,0x8
c001e584:	0f b6 c0             	movzx  eax,al
c001e587:	85 c0                	test   eax,eax
c001e589:	75 07                	jne    c001e592 <apicGetBase()+0x22>
c001e58b:	b8 00 00 00 00       	mov    eax,0x0
c001e590:	eb 21                	jmp    c001e5b3 <apicGetBase()+0x43>
c001e592:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e597:	83 ec 08             	sub    esp,0x8
c001e59a:	6a 1b                	push   0x1b
c001e59c:	50                   	push   eax
c001e59d:	e8 1e 8b fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e5a2:	83 c4 10             	add    esp,0x10
c001e5a5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e5a8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e5ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e5ae:	25 00 00 ff ff       	and    eax,0xffff0000
c001e5b3:	c9                   	leave  
c001e5b4:	c3                   	ret    
c001e5b5:	90                   	nop

c001e5b6 <IOAPIC::IOAPIC()>:
c001e5b6:	83 ec 0c             	sub    esp,0xc
c001e5b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5bd:	83 ec 08             	sub    esp,0x8
c001e5c0:	68 00 31 02 c0       	push   0xc0023100
c001e5c5:	50                   	push   eax
c001e5c6:	e8 f3 e2 fe ff       	call   c000c8be <Device::Device(char const*)>
c001e5cb:	83 c4 10             	add    esp,0x10
c001e5ce:	ba 10 31 02 c0       	mov    edx,0xc0023110
c001e5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5d7:	89 10                	mov    DWORD PTR [eax],edx
c001e5d9:	90                   	nop
c001e5da:	83 c4 0c             	add    esp,0xc
c001e5dd:	c3                   	ret    

c001e5de <apicOpen()>:
c001e5de:	55                   	push   ebp
c001e5df:	89 e5                	mov    ebp,esp
c001e5e1:	53                   	push   ebx
c001e5e2:	83 ec 34             	sub    esp,0x34
c001e5e5:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e5ea:	83 f0 01             	xor    eax,0x1
c001e5ed:	0f b6 c0             	movzx  eax,al
c001e5f0:	85 c0                	test   eax,eax
c001e5f2:	0f 84 a3 00 00 00    	je     c001e69b <apicOpen()+0xbd>
c001e5f8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e5fc:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e601:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e605:	0f b6 c0             	movzx  eax,al
c001e608:	39 c2                	cmp    edx,eax
c001e60a:	0f 83 84 00 00 00    	jae    c001e694 <apicOpen()+0xb6>
c001e610:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e617:	83 ec 0c             	sub    esp,0xc
c001e61a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e61d:	e8 94 94 fe ff       	call   c0007ab6 <malloc>
c001e622:	83 c4 10             	add    esp,0x10
c001e625:	89 c3                	mov    ebx,eax
c001e627:	83 ec 0c             	sub    esp,0xc
c001e62a:	53                   	push   ebx
c001e62b:	e8 86 ff ff ff       	call   c001e5b6 <IOAPIC::IOAPIC()>
c001e630:	83 c4 10             	add    esp,0x10
c001e633:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e636:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e63a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e63d:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e644:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e649:	83 c0 01             	add    eax,0x1
c001e64c:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e651:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e656:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e65c:	83 ec 08             	sub    esp,0x8
c001e65f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e662:	50                   	push   eax
c001e663:	e8 be e0 fe ff       	call   c000c726 <Device::addChild(Device*)>
c001e668:	83 c4 10             	add    esp,0x10
c001e66b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e66e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e670:	83 c0 08             	add    eax,0x8
c001e673:	8b 00                	mov    eax,DWORD PTR [eax]
c001e675:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e679:	6a 00                	push   0x0
c001e67b:	6a 00                	push   0x0
c001e67d:	52                   	push   edx
c001e67e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e681:	ff d0                	call   eax
c001e683:	83 c4 10             	add    esp,0x10
c001e686:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e689:	83 c0 01             	add    eax,0x1
c001e68c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e68f:	e9 68 ff ff ff       	jmp    c001e5fc <apicOpen()+0x1e>
c001e694:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e69b:	e8 d0 fe ff ff       	call   c001e570 <apicGetBase()>
c001e6a0:	05 f0 00 00 00       	add    eax,0xf0
c001e6a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e6a8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e6ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6ad:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e6b0:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e6b7:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e6be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e6c1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e6c4:	89 10                	mov    DWORD PTR [eax],edx
c001e6c6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e6cd:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e6d2:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e6d5:	7d 7c                	jge    c001e753 <apicOpen()+0x175>
c001e6d7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6da:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e6e1:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e6e4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6e7:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e6ee:	c1 e8 08             	shr    eax,0x8
c001e6f1:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e6f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6f8:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e6ff:	c1 e8 18             	shr    eax,0x18
c001e702:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e705:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e709:	3d ff 00 00 00       	cmp    eax,0xff
c001e70e:	75 3a                	jne    c001e74a <apicOpen()+0x16c>
c001e710:	e8 5b fe ff ff       	call   c001e570 <apicGetBase()>
c001e715:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e719:	83 fa 01             	cmp    edx,0x1
c001e71c:	75 07                	jne    c001e725 <apicOpen()+0x147>
c001e71e:	ba 60 03 00 00       	mov    edx,0x360
c001e723:	eb 05                	jmp    c001e72a <apicOpen()+0x14c>
c001e725:	ba 50 03 00 00       	mov    edx,0x350
c001e72a:	01 d0                	add    eax,edx
c001e72c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e72f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e732:	8b 00                	mov    eax,DWORD PTR [eax]
c001e734:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e737:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e73e:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e742:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e745:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e748:	89 10                	mov    DWORD PTR [eax],edx
c001e74a:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e74e:	e9 7a ff ff ff       	jmp    c001e6cd <apicOpen()+0xef>
c001e753:	90                   	nop
c001e754:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e757:	c9                   	leave  
c001e758:	c3                   	ret    
c001e759:	90                   	nop

c001e75a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e75a:	55                   	push   ebp
c001e75b:	89 e5                	mov    ebp,esp
c001e75d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e760:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e766:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e769:	72 1d                	jb     c001e788 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e76b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e76e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e777:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e77d:	01 d0                	add    eax,edx
c001e77f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e782:	73 04                	jae    c001e788 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e784:	b0 01                	mov    al,0x1
c001e786:	eb 02                	jmp    c001e78a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e788:	b0 00                	mov    al,0x0
c001e78a:	5d                   	pop    ebp
c001e78b:	c3                   	ret    

c001e78c <IOAPIC::read(int)>:
c001e78c:	55                   	push   ebp
c001e78d:	89 e5                	mov    ebp,esp
c001e78f:	83 ec 10             	sub    esp,0x10
c001e792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e795:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e79b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e79e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7a1:	0f b6 d0             	movzx  edx,al
c001e7a4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7a7:	89 10                	mov    DWORD PTR [eax],edx
c001e7a9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7ac:	83 c0 10             	add    eax,0x10
c001e7af:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7b1:	c9                   	leave  
c001e7b2:	c3                   	ret    
c001e7b3:	90                   	nop

c001e7b4 <IOAPIC::open(int, int, void*)>:
c001e7b4:	55                   	push   ebp
c001e7b5:	89 e5                	mov    ebp,esp
c001e7b7:	57                   	push   edi
c001e7b8:	56                   	push   esi
c001e7b9:	53                   	push   ebx
c001e7ba:	83 ec 04             	sub    esp,0x4
c001e7bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e7c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e7c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7cc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e7d2:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e7d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7dc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e7e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7e5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e7eb:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e7f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7f5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e7fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7fe:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e807:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e80d:	0f b6 f0             	movzx  esi,al
c001e810:	89 d0                	mov    eax,edx
c001e812:	ba 00 00 00 00       	mov    edx,0x0
c001e817:	89 c7                	mov    edi,eax
c001e819:	83 e7 ff             	and    edi,0xffffffff
c001e81c:	89 f9                	mov    ecx,edi
c001e81e:	0f b6 da             	movzx  ebx,dl
c001e821:	89 c8                	mov    eax,ecx
c001e823:	89 da                	mov    edx,ebx
c001e825:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e828:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e82b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e82f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e833:	83 e0 00             	and    eax,0x0
c001e836:	09 d0                	or     eax,edx
c001e838:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e83c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e83f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e845:	8d 50 01             	lea    edx,[eax+0x1]
c001e848:	88 d1                	mov    cl,dl
c001e84a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e84d:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e853:	0f b6 d0             	movzx  edx,al
c001e856:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e859:	83 c2 08             	add    edx,0x8
c001e85c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e860:	0f b6 c9             	movzx  ecx,cl
c001e863:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e869:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e86d:	6a 01                	push   0x1
c001e86f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e872:	e8 15 ff ff ff       	call   c001e78c <IOAPIC::read(int)>
c001e877:	83 c4 08             	add    esp,0x8
c001e87a:	c1 f8 10             	sar    eax,0x10
c001e87d:	0f b6 c0             	movzx  eax,al
c001e880:	8d 50 01             	lea    edx,[eax+0x1]
c001e883:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e886:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e88c:	b8 00 00 00 00       	mov    eax,0x0
c001e891:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e894:	5b                   	pop    ebx
c001e895:	5e                   	pop    esi
c001e896:	5f                   	pop    edi
c001e897:	5d                   	pop    ebp
c001e898:	c3                   	ret    
c001e899:	90                   	nop

c001e89a <IOAPIC::write(int, int)>:
c001e89a:	55                   	push   ebp
c001e89b:	89 e5                	mov    ebp,esp
c001e89d:	83 ec 10             	sub    esp,0x10
c001e8a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e8a9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e8ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e8af:	0f b6 d0             	movzx  edx,al
c001e8b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e8b5:	89 10                	mov    DWORD PTR [eax],edx
c001e8b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e8ba:	8d 50 10             	lea    edx,[eax+0x10]
c001e8bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e8c0:	89 02                	mov    DWORD PTR [edx],eax
c001e8c2:	90                   	nop
c001e8c3:	c9                   	leave  
c001e8c4:	c3                   	ret    
c001e8c5:	90                   	nop

c001e8c6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e8c6:	55                   	push   ebp
c001e8c7:	89 e5                	mov    ebp,esp
c001e8c9:	53                   	push   ebx
c001e8ca:	83 ec 2c             	sub    esp,0x2c
c001e8cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e8d0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e8d3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e8d6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e8d9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e8dc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e8df:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e8e2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e8e5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e8e8:	88 d8                	mov    al,bl
c001e8ea:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e8ed:	88 c8                	mov    al,cl
c001e8ef:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e8f2:	88 d0                	mov    al,dl
c001e8f4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e8f7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e8fb:	83 c0 08             	add    eax,0x8
c001e8fe:	01 c0                	add    eax,eax
c001e900:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e903:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e907:	83 c0 08             	add    eax,0x8
c001e90a:	01 c0                	add    eax,eax
c001e90c:	83 c0 01             	add    eax,0x1
c001e90f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e912:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e915:	50                   	push   eax
c001e916:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e919:	e8 6e fe ff ff       	call   c001e78c <IOAPIC::read(int)>
c001e91e:	83 c4 08             	add    esp,0x8
c001e921:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e924:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e92b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e92e:	c1 e0 18             	shl    eax,0x18
c001e931:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e934:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e937:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e93a:	52                   	push   edx
c001e93b:	50                   	push   eax
c001e93c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e93f:	e8 56 ff ff ff       	call   c001e89a <IOAPIC::write(int, int)>
c001e944:	83 c4 0c             	add    esp,0xc
c001e947:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e94a:	50                   	push   eax
c001e94b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e94e:	e8 39 fe ff ff       	call   c001e78c <IOAPIC::read(int)>
c001e953:	83 c4 08             	add    esp,0x8
c001e956:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e959:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e960:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e967:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e96e:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e972:	85 c0                	test   eax,eax
c001e974:	74 09                	je     c001e97f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e976:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e97d:	eb 07                	jmp    c001e986 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e97f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e986:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e98a:	85 c0                	test   eax,eax
c001e98c:	74 09                	je     c001e997 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e98e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e995:	eb 07                	jmp    c001e99e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e997:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e99e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e9a5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e9a9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e9ac:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e9af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e9b2:	52                   	push   edx
c001e9b3:	50                   	push   eax
c001e9b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9b7:	e8 de fe ff ff       	call   c001e89a <IOAPIC::write(int, int)>
c001e9bc:	83 c4 0c             	add    esp,0xc
c001e9bf:	90                   	nop
c001e9c0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e9c3:	c9                   	leave  
c001e9c4:	c3                   	ret    
c001e9c5:	66 90                	xchg   ax,ax
c001e9c7:	90                   	nop

c001e9c8 <APICTimer::close(int, int, void*)>:
c001e9c8:	b8 00 00 00 00       	mov    eax,0x0
c001e9cd:	c3                   	ret    
c001e9ce:	66 90                	xchg   ax,ax

c001e9d0 <apicTimerHandler(regs*, void*)>:
c001e9d0:	83 ec 0c             	sub    esp,0xc
c001e9d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e9d9:	b8 10 27 00 00       	mov    eax,0x2710
c001e9de:	ba 00 00 00 00       	mov    edx,0x0
c001e9e3:	f7 f1                	div    ecx
c001e9e5:	83 ec 0c             	sub    esp,0xc
c001e9e8:	50                   	push   eax
c001e9e9:	e8 9a f7 fe ff       	call   c000e188 <timerHandler(unsigned int)>
c001e9ee:	83 c4 10             	add    esp,0x10
c001e9f1:	90                   	nop
c001e9f2:	83 c4 0c             	add    esp,0xc
c001e9f5:	c3                   	ret    
c001e9f6:	66 90                	xchg   ax,ax

c001e9f8 <APICTimer::open(int, int, void*)>:
c001e9f8:	83 ec 0c             	sub    esp,0xc
c001e9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea01:	83 c0 24             	add    eax,0x24
c001ea04:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea06:	83 ec 08             	sub    esp,0x8
c001ea09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea11:	ff d0                	call   eax
c001ea13:	83 c4 10             	add    esp,0x10
c001ea16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ea1e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ea24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea2c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ea32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea36:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ea3c:	83 ec 0c             	sub    esp,0xc
c001ea3f:	51                   	push   ecx
c001ea40:	6a 01                	push   0x1
c001ea42:	68 d0 e9 01 c0       	push   0xc001e9d0
c001ea47:	52                   	push   edx
c001ea48:	50                   	push   eax
c001ea49:	e8 84 dc fe ff       	call   c000c6d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea4e:	83 c4 20             	add    esp,0x20
c001ea51:	89 c2                	mov    edx,eax
c001ea53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea57:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ea5d:	b8 00 00 00 00       	mov    eax,0x0
c001ea62:	83 c4 0c             	add    esp,0xc
c001ea65:	c3                   	ret    
c001ea66:	66 90                	xchg   ax,ax

c001ea68 <APICTimer::write(int)>:
c001ea68:	83 ec 0c             	sub    esp,0xc
c001ea6b:	83 ec 0c             	sub    esp,0xc
c001ea6e:	68 34 31 02 c0       	push   0xc0023134
c001ea73:	e8 d9 28 ff ff       	call   c0011351 <KePanic(char const*)>
c001ea78:	83 c4 10             	add    esp,0x10
c001ea7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea83:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ea89:	90                   	nop
c001ea8a:	83 c4 0c             	add    esp,0xc
c001ea8d:	c3                   	ret    
c001ea8e:	66 90                	xchg   ax,ax

c001ea90 <APICTimer::APICTimer()>:
c001ea90:	83 ec 0c             	sub    esp,0xc
c001ea93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea97:	83 ec 08             	sub    esp,0x8
c001ea9a:	68 44 31 02 c0       	push   0xc0023144
c001ea9f:	50                   	push   eax
c001eaa0:	e8 17 f6 fe ff       	call   c000e0bc <Timer::Timer(char const*)>
c001eaa5:	83 c4 10             	add    esp,0x10
c001eaa8:	ba 58 31 02 c0       	mov    edx,0xc0023158
c001eaad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab1:	89 10                	mov    DWORD PTR [eax],edx
c001eab3:	90                   	nop
c001eab4:	83 c4 0c             	add    esp,0xc
c001eab7:	c3                   	ret    

c001eab8 <PIT::write(int)>:
c001eab8:	83 ec 10             	sub    esp,0x10
c001eabb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eabf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eac3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eac9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eacd:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001ead2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ead7:	89 c2                	mov    edx,eax
c001ead9:	c1 fa 1f             	sar    edx,0x1f
c001eadc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eae0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eae4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eaeb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eaf0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eaf4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eaf9:	ee                   	out    dx,al
c001eafa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eafe:	0f b6 c0             	movzx  eax,al
c001eb01:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eb08:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001eb0c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001eb10:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eb15:	ee                   	out    dx,al
c001eb16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb1a:	c1 f8 08             	sar    eax,0x8
c001eb1d:	0f b6 c0             	movzx  eax,al
c001eb20:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eb27:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eb2b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eb2f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eb34:	ee                   	out    dx,al
c001eb35:	90                   	nop
c001eb36:	83 c4 10             	add    esp,0x10
c001eb39:	c3                   	ret    
c001eb3a:	66 90                	xchg   ax,ax

c001eb3c <pitHandler(regs*, void*)>:
c001eb3c:	83 ec 0c             	sub    esp,0xc
c001eb3f:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001eb45:	b8 10 27 00 00       	mov    eax,0x2710
c001eb4a:	89 c2                	mov    edx,eax
c001eb4c:	c1 fa 1f             	sar    edx,0x1f
c001eb4f:	f7 f9                	idiv   ecx
c001eb51:	83 ec 0c             	sub    esp,0xc
c001eb54:	50                   	push   eax
c001eb55:	e8 2e f6 fe ff       	call   c000e188 <timerHandler(unsigned int)>
c001eb5a:	83 c4 10             	add    esp,0x10
c001eb5d:	90                   	nop
c001eb5e:	83 c4 0c             	add    esp,0xc
c001eb61:	c3                   	ret    
c001eb62:	66 90                	xchg   ax,ax

c001eb64 <PIT::open(int, int, void*)>:
c001eb64:	83 ec 0c             	sub    esp,0xc
c001eb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb6d:	83 c0 24             	add    eax,0x24
c001eb70:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb72:	83 ec 08             	sub    esp,0x8
c001eb75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb7d:	ff d0                	call   eax
c001eb7f:	83 c4 10             	add    esp,0x10
c001eb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb86:	83 ec 0c             	sub    esp,0xc
c001eb89:	6a 00                	push   0x0
c001eb8b:	6a 01                	push   0x1
c001eb8d:	68 3c eb 01 c0       	push   0xc001eb3c
c001eb92:	6a 00                	push   0x0
c001eb94:	50                   	push   eax
c001eb95:	e8 38 db fe ff       	call   c000c6d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb9a:	83 c4 20             	add    esp,0x20
c001eb9d:	89 c2                	mov    edx,eax
c001eb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eba9:	b8 00 00 00 00       	mov    eax,0x0
c001ebae:	83 c4 0c             	add    esp,0xc
c001ebb1:	c3                   	ret    
c001ebb2:	66 90                	xchg   ax,ax

c001ebb4 <PIT::close(int, int, void*)>:
c001ebb4:	83 ec 0c             	sub    esp,0xc
c001ebb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ebc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc9:	6a 01                	push   0x1
c001ebcb:	68 3c eb 01 c0       	push   0xc001eb3c
c001ebd0:	6a 00                	push   0x0
c001ebd2:	50                   	push   eax
c001ebd3:	e8 30 db fe ff       	call   c000c708 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ebd8:	83 c4 10             	add    esp,0x10
c001ebdb:	b8 00 00 00 00       	mov    eax,0x0
c001ebe0:	83 c4 0c             	add    esp,0xc
c001ebe3:	c3                   	ret    

c001ebe4 <PIT::PIT()>:
c001ebe4:	83 ec 0c             	sub    esp,0xc
c001ebe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebeb:	83 ec 08             	sub    esp,0x8
c001ebee:	68 80 31 02 c0       	push   0xc0023180
c001ebf3:	50                   	push   eax
c001ebf4:	e8 c3 f4 fe ff       	call   c000e0bc <Timer::Timer(char const*)>
c001ebf9:	83 c4 10             	add    esp,0x10
c001ebfc:	ba a8 31 02 c0       	mov    edx,0xc00231a8
c001ec01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec05:	89 10                	mov    DWORD PTR [eax],edx
c001ec07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec11:	0f b6 d0             	movzx  edx,al
c001ec14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec18:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ec1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec23:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec29:	0f b6 d0             	movzx  edx,al
c001ec2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec30:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ec35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec39:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec3f:	8d 50 01             	lea    edx,[eax+0x1]
c001ec42:	88 d1                	mov    cl,dl
c001ec44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec48:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ec4e:	0f b6 d0             	movzx  edx,al
c001ec51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec55:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ec59:	83 e1 3f             	and    ecx,0x3f
c001ec5c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ec60:	90                   	nop
c001ec61:	83 c4 0c             	add    esp,0xc
c001ec64:	c3                   	ret    
c001ec65:	66 90                	xchg   ax,ax
c001ec67:	66 90                	xchg   ax,ax
c001ec69:	66 90                	xchg   ax,ax
c001ec6b:	66 90                	xchg   ax,ax
c001ec6d:	66 90                	xchg   ax,ax
c001ec6f:	90                   	nop

c001ec70 <avxDetect>:
c001ec70:	b8 01 00 00 00       	mov    eax,0x1
c001ec75:	0f a2                	cpuid  
c001ec77:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ec7d:	74 15                	je     c001ec94 <avxDetect.noAVX>
c001ec7f:	b8 01 00 00 00       	mov    eax,0x1
c001ec84:	0f a2                	cpuid  
c001ec86:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ec8c:	74 06                	je     c001ec94 <avxDetect.noAVX>
c001ec8e:	b8 01 00 00 00       	mov    eax,0x1
c001ec93:	c3                   	ret    

c001ec94 <avxDetect.noAVX>:
c001ec94:	b8 00 00 00 00       	mov    eax,0x0
c001ec99:	c3                   	ret    

c001ec9a <avxSave>:
c001ec9a:	53                   	push   ebx
c001ec9b:	52                   	push   edx
c001ec9c:	31 c0                	xor    eax,eax
c001ec9e:	48                   	dec    eax
c001ec9f:	89 c2                	mov    edx,eax
c001eca1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eca5:	0f ae 23             	xsave  [ebx]
c001eca8:	5a                   	pop    edx
c001eca9:	5b                   	pop    ebx
c001ecaa:	c3                   	ret    

c001ecab <avxLoad>:
c001ecab:	53                   	push   ebx
c001ecac:	52                   	push   edx
c001ecad:	31 c0                	xor    eax,eax
c001ecaf:	48                   	dec    eax
c001ecb0:	89 c2                	mov    edx,eax
c001ecb2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ecb6:	0f ae 2b             	xrstor [ebx]
c001ecb9:	5a                   	pop    edx
c001ecba:	5b                   	pop    ebx
c001ecbb:	c3                   	ret    

c001ecbc <avxInit>:
c001ecbc:	e8 67 03 00 00       	call   c001f028 <sseInit>
c001ecc1:	50                   	push   eax
c001ecc2:	51                   	push   ecx
c001ecc3:	0f 20 e0             	mov    eax,cr4
c001ecc6:	0d 00 00 04 00       	or     eax,0x40000
c001eccb:	0f 22 e0             	mov    cr4,eax
c001ecce:	31 c9                	xor    ecx,ecx
c001ecd0:	0f 01 d0             	xgetbv 
c001ecd3:	0d 07 00 00 00       	or     eax,0x7
c001ecd8:	0f 01 d1             	xsetbv 
c001ecdb:	59                   	pop    ecx
c001ecdc:	58                   	pop    eax
c001ecdd:	c3                   	ret    

c001ecde <avxClose>:
c001ecde:	c3                   	ret    

c001ecdf <wouldSheSayYes>:
c001ecdf:	c3                   	ret    
c001ece0:	49                   	dec    ecx
c001ece1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ece5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ece9:	75 20                	jne    c001ed0b <isr0+0xb>
c001eceb:	4e                   	dec    esi
c001ecec:	79 61                	jns    c001ed4f <isr7+0x3>
c001ecee:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ecf3:	66 90                	xchg   ax,ax
c001ecf5:	66 90                	xchg   ax,ax
c001ecf7:	66 90                	xchg   ax,ax
c001ecf9:	66 90                	xchg   ax,ax
c001ecfb:	66 90                	xchg   ax,ax
c001ecfd:	66 90                	xchg   ax,ax
c001ecff:	90                   	nop

c001ed00 <isr0>:
c001ed00:	fa                   	cli    
c001ed01:	68 00 00 00 00       	push   0x0
c001ed06:	68 00 00 00 00       	push   0x0
c001ed0b:	e9 56 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed10 <isr1>:
c001ed10:	fa                   	cli    
c001ed11:	6a 00                	push   0x0
c001ed13:	6a 01                	push   0x1
c001ed15:	e9 4c 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed1a <isr2>:
c001ed1a:	fa                   	cli    
c001ed1b:	6a 00                	push   0x0
c001ed1d:	6a 02                	push   0x2
c001ed1f:	e9 42 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed24 <isr3>:
c001ed24:	fa                   	cli    
c001ed25:	6a 00                	push   0x0
c001ed27:	6a 03                	push   0x3
c001ed29:	e9 38 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed2e <isr4>:
c001ed2e:	fa                   	cli    
c001ed2f:	6a 00                	push   0x0
c001ed31:	6a 04                	push   0x4
c001ed33:	e9 2e 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed38 <isr5>:
c001ed38:	fa                   	cli    
c001ed39:	6a 00                	push   0x0
c001ed3b:	6a 05                	push   0x5
c001ed3d:	e9 24 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed42 <isr6>:
c001ed42:	fa                   	cli    
c001ed43:	6a 00                	push   0x0
c001ed45:	6a 06                	push   0x6
c001ed47:	e9 1a 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed4c <isr7>:
c001ed4c:	fa                   	cli    
c001ed4d:	6a 00                	push   0x0
c001ed4f:	6a 07                	push   0x7
c001ed51:	e9 10 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed56 <isr8>:
c001ed56:	fa                   	cli    
c001ed57:	6a 08                	push   0x8
c001ed59:	e9 08 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed5e <isr9>:
c001ed5e:	fa                   	cli    
c001ed5f:	6a 00                	push   0x0
c001ed61:	6a 09                	push   0x9
c001ed63:	e9 fe 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ed68 <isr10>:
c001ed68:	fa                   	cli    
c001ed69:	6a 0a                	push   0xa
c001ed6b:	e9 f6 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ed70 <isr11>:
c001ed70:	fa                   	cli    
c001ed71:	6a 0b                	push   0xb
c001ed73:	e9 ee 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ed78 <isr12>:
c001ed78:	fa                   	cli    
c001ed79:	6a 0c                	push   0xc
c001ed7b:	e9 e6 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ed80 <isr13>:
c001ed80:	fa                   	cli    
c001ed81:	6a 0d                	push   0xd
c001ed83:	53                   	push   ebx
c001ed84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ed88:	81 fb 56 ef 01 c0    	cmp    ebx,0xc001ef56
c001ed8e:	5b                   	pop    ebx
c001ed8f:	0f 84 c3 01 00 00    	je     c001ef58 <finishSignal2>
c001ed95:	e9 cc 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ed9a <isr14>:
c001ed9a:	fa                   	cli    
c001ed9b:	6a 0e                	push   0xe
c001ed9d:	e9 c4 00 00 00       	jmp    c001ee66 <int_common_stub>

c001eda2 <isr15>:
c001eda2:	fa                   	cli    
c001eda3:	6a 00                	push   0x0
c001eda5:	6a 0f                	push   0xf
c001eda7:	e9 ba 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edac <isr16>:
c001edac:	fa                   	cli    
c001edad:	6a 00                	push   0x0
c001edaf:	6a 10                	push   0x10
c001edb1:	e9 b0 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edb6 <isr17>:
c001edb6:	fa                   	cli    
c001edb7:	6a 00                	push   0x0
c001edb9:	6a 11                	push   0x11
c001edbb:	e9 a6 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edc0 <isr18>:
c001edc0:	fa                   	cli    
c001edc1:	6a 00                	push   0x0
c001edc3:	6a 12                	push   0x12
c001edc5:	e9 9c 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edca <irq3>:
c001edca:	fa                   	cli    
c001edcb:	6a 00                	push   0x0
c001edcd:	6a 23                	push   0x23
c001edcf:	e9 92 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edd4 <irq4>:
c001edd4:	fa                   	cli    
c001edd5:	6a 00                	push   0x0
c001edd7:	6a 24                	push   0x24
c001edd9:	e9 88 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edde <irq5>:
c001edde:	fa                   	cli    
c001eddf:	6a 00                	push   0x0
c001ede1:	6a 25                	push   0x25
c001ede3:	e9 7e 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ede8 <irq6>:
c001ede8:	fa                   	cli    
c001ede9:	6a 00                	push   0x0
c001edeb:	6a 26                	push   0x26
c001eded:	e9 74 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edf2 <irq7>:
c001edf2:	fa                   	cli    
c001edf3:	6a 00                	push   0x0
c001edf5:	6a 27                	push   0x27
c001edf7:	e9 6a 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edfc <irq8>:
c001edfc:	fa                   	cli    
c001edfd:	6a 00                	push   0x0
c001edff:	6a 28                	push   0x28
c001ee01:	e9 60 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee06 <irq9>:
c001ee06:	fa                   	cli    
c001ee07:	6a 00                	push   0x0
c001ee09:	6a 29                	push   0x29
c001ee0b:	e9 56 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee10 <irq10>:
c001ee10:	fa                   	cli    
c001ee11:	6a 00                	push   0x0
c001ee13:	6a 2a                	push   0x2a
c001ee15:	e9 4c 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee1a <irq11>:
c001ee1a:	fa                   	cli    
c001ee1b:	6a 00                	push   0x0
c001ee1d:	6a 2b                	push   0x2b
c001ee1f:	e9 42 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee24 <irq12>:
c001ee24:	fa                   	cli    
c001ee25:	6a 00                	push   0x0
c001ee27:	6a 2c                	push   0x2c
c001ee29:	e9 38 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee2e <irq13>:
c001ee2e:	fa                   	cli    
c001ee2f:	6a 00                	push   0x0
c001ee31:	6a 2d                	push   0x2d
c001ee33:	e9 2e 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee38 <irq14>:
c001ee38:	fa                   	cli    
c001ee39:	6a 00                	push   0x0
c001ee3b:	6a 2e                	push   0x2e
c001ee3d:	e9 24 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee42 <irq15>:
c001ee42:	fa                   	cli    
c001ee43:	6a 00                	push   0x0
c001ee45:	6a 2f                	push   0x2f
c001ee47:	e9 1a 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee4c <irq1>:
c001ee4c:	fa                   	cli    
c001ee4d:	6a 00                	push   0x0
c001ee4f:	6a 21                	push   0x21
c001ee51:	eb 13                	jmp    c001ee66 <int_common_stub>

c001ee53 <irq2>:
c001ee53:	fa                   	cli    
c001ee54:	6a 00                	push   0x0
c001ee56:	6a 22                	push   0x22
c001ee58:	eb 0c                	jmp    c001ee66 <int_common_stub>

c001ee5a <isr96>:
c001ee5a:	6a 00                	push   0x0
c001ee5c:	6a 60                	push   0x60
c001ee5e:	fb                   	sti    
c001ee5f:	eb 37                	jmp    c001ee98 <syscall_common_stub>

c001ee61 <irq0>:
c001ee61:	fa                   	cli    
c001ee62:	6a 00                	push   0x0
c001ee64:	6a 20                	push   0x20

c001ee66 <int_common_stub>:
c001ee66:	60                   	pusha  
c001ee67:	1e                   	push   ds
c001ee68:	06                   	push   es
c001ee69:	0f a0                	push   fs
c001ee6b:	0f a8                	push   gs
c001ee6d:	66 b8 10 00          	mov    ax,0x10
c001ee71:	66 8e d8             	mov    ds,ax
c001ee74:	66 8e c0             	mov    es,ax
c001ee77:	66 8e e0             	mov    fs,ax
c001ee7a:	66 8e e8             	mov    gs,ax
c001ee7d:	54                   	push   esp
c001ee7e:	fc                   	cld    
c001ee7f:	e8 4c dd fe ff       	call   c000cbd0 <int_handler>
c001ee84:	81 c4 04 00 00 00    	add    esp,0x4
c001ee8a:	0f a9                	pop    gs
c001ee8c:	0f a1                	pop    fs
c001ee8e:	07                   	pop    es
c001ee8f:	1f                   	pop    ds
c001ee90:	61                   	popa   
c001ee91:	81 c4 08 00 00 00    	add    esp,0x8
c001ee97:	cf                   	iret   

c001ee98 <syscall_common_stub>:
c001ee98:	60                   	pusha  
c001ee99:	1e                   	push   ds
c001ee9a:	06                   	push   es
c001ee9b:	0f a0                	push   fs
c001ee9d:	0f a8                	push   gs
c001ee9f:	66 b8 10 00          	mov    ax,0x10
c001eea3:	66 8e d8             	mov    ds,ax
c001eea6:	66 8e c0             	mov    es,ax
c001eea9:	66 8e e0             	mov    fs,ax
c001eeac:	66 8e e8             	mov    gs,ax
c001eeaf:	54                   	push   esp
c001eeb0:	fc                   	cld    
c001eeb1:	e8 1a dd fe ff       	call   c000cbd0 <int_handler>
c001eeb6:	81 c4 04 00 00 00    	add    esp,0x4
c001eebc:	0f a9                	pop    gs
c001eebe:	0f a1                	pop    fs
c001eec0:	07                   	pop    es
c001eec1:	1f                   	pop    ds
c001eec2:	e8 9f 2a ff ff       	call   c0011966 <KiCheckSignalZ>
c001eec7:	3d 00 00 00 00       	cmp    eax,0x0
c001eecc:	0f 84 c0 00 00 00    	je     c001ef92 <skipSignals>
c001eed2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001eed7:	61                   	popa   
c001eed8:	53                   	push   ebx
c001eed9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001eedf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001eee2:	5b                   	pop    ebx
c001eee3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001eee8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001eeeb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001eeee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eef1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001eef4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001eef7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001eefa:	81 c4 08 00 00 00    	add    esp,0x8
c001ef00:	5e                   	pop    esi
c001ef01:	5b                   	pop    ebx
c001ef02:	59                   	pop    ecx
c001ef03:	5a                   	pop    edx
c001ef04:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ef07:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ef0a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ef0d:	52                   	push   edx
c001ef0e:	51                   	push   ecx
c001ef0f:	53                   	push   ebx
c001ef10:	56                   	push   esi
c001ef11:	81 ec 08 00 00 00    	sub    esp,0x8
c001ef17:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ef1a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ef1d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ef20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ef26:	60                   	pusha  
c001ef27:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ef2d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ef30:	89 e3                	mov    ebx,esp
c001ef32:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ef35:	52                   	push   edx
c001ef36:	68 56 ef 01 c0       	push   0xc001ef56
c001ef3b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ef3e:	89 dc                	mov    esp,ebx
c001ef40:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ef43:	68 23 00 00 00       	push   0x23
c001ef48:	51                   	push   ecx
c001ef49:	68 02 02 00 00       	push   0x202
c001ef4e:	68 1b 00 00 00       	push   0x1b
c001ef53:	ff 36                	push   DWORD PTR [esi]
c001ef55:	cf                   	iret   

c001ef56 <finishSignal>:
c001ef56:	cd 0f                	int    0xf

c001ef58 <finishSignal2>:
c001ef58:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ef5e:	e8 80 2a ff ff       	call   c00119e3 <KiFinishSignalZ>
c001ef63:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ef69:	68 23 00 00 00       	push   0x23
c001ef6e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ef71:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ef74:	68 1b 00 00 00       	push   0x1b
c001ef79:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ef7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ef7f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ef82:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ef85:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ef88:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ef8b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ef8e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ef91:	cf                   	iret   

c001ef92 <skipSignals>:
c001ef92:	61                   	popa   
c001ef93:	81 c4 08 00 00 00    	add    esp,0x8
c001ef99:	cf                   	iret   
c001ef9a:	90                   	nop
c001ef9b:	90                   	nop

c001ef9c <irq16>:
c001ef9c:	fa                   	cli    
c001ef9d:	6a 00                	push   0x0
c001ef9f:	6a 30                	push   0x30
c001efa1:	e9 c0 fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efa6 <irq17>:
c001efa6:	fa                   	cli    
c001efa7:	6a 00                	push   0x0
c001efa9:	6a 31                	push   0x31
c001efab:	e9 b6 fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efb0 <irq18>:
c001efb0:	fa                   	cli    
c001efb1:	6a 00                	push   0x0
c001efb3:	6a 32                	push   0x32
c001efb5:	e9 ac fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efba <irq19>:
c001efba:	fa                   	cli    
c001efbb:	6a 00                	push   0x0
c001efbd:	6a 33                	push   0x33
c001efbf:	e9 a2 fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efc4 <irq20>:
c001efc4:	fa                   	cli    
c001efc5:	6a 00                	push   0x0
c001efc7:	6a 34                	push   0x34
c001efc9:	e9 98 fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efce <irq21>:
c001efce:	fa                   	cli    
c001efcf:	6a 00                	push   0x0
c001efd1:	6a 35                	push   0x35
c001efd3:	e9 8e fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efd8 <irq22>:
c001efd8:	fa                   	cli    
c001efd9:	6a 00                	push   0x0
c001efdb:	6a 36                	push   0x36
c001efdd:	e9 84 fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efe2 <irq23>:
c001efe2:	fa                   	cli    
c001efe3:	6a 00                	push   0x0
c001efe5:	6a 37                	push   0x37
c001efe7:	e9 7a fe ff ff       	jmp    c001ee66 <int_common_stub>
c001efec:	66 90                	xchg   ax,ax
c001efee:	66 90                	xchg   ax,ax

c001eff0 <i386GetRDRAND>:
c001eff0:	b9 64 00 00 00       	mov    ecx,0x64

c001eff5 <retry>:
c001eff5:	0f c7 f0             	rdrand eax
c001eff8:	72 05                	jb     c001efff <retry.done>
c001effa:	e2 f9                	loop   c001eff5 <retry>

c001effc <retry.fail>:
c001effc:	31 c0                	xor    eax,eax
c001effe:	c3                   	ret    

c001efff <retry.done>:
c001efff:	c3                   	ret    

c001f000 <absolutelyNoChanceInHell>:
c001f000:	b8 01 00 00 00       	mov    eax,0x1
c001f005:	0f a2                	cpuid  
c001f007:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f00d:	74 06                	je     c001f015 <sseDetect.noSSE>
c001f00f:	b8 01 00 00 00       	mov    eax,0x1
c001f014:	c3                   	ret    

c001f015 <sseDetect.noSSE>:
c001f015:	31 c0                	xor    eax,eax
c001f017:	c3                   	ret    

c001f018 <sseSave>:
c001f018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f01c:	0f ae 00             	fxsave [eax]
c001f01f:	c3                   	ret    

c001f020 <sseLoad>:
c001f020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f024:	0f ae 08             	fxrstor [eax]
c001f027:	c3                   	ret    

c001f028 <sseInit>:
c001f028:	e8 42 00 00 00       	call   c001f06f <x87Init>
c001f02d:	0f 20 e0             	mov    eax,cr4
c001f030:	66 0d 00 06          	or     ax,0x600
c001f034:	0f 22 e0             	mov    cr4,eax
c001f037:	c3                   	ret    

c001f038 <sseClose>:
c001f038:	c3                   	ret    
c001f039:	66 90                	xchg   ax,ax
c001f03b:	66 90                	xchg   ax,ax
c001f03d:	66 90                	xchg   ax,ax
c001f03f:	90                   	nop

c001f040 <value_37F>:
c001f040:	7f 03                	jg     c001f045 <value_37A+0x1>

c001f042 <value_37E>:
c001f042:	7e 03                	jle    c001f047 <x87Detect+0x1>

c001f044 <value_37A>:
c001f044:	7a 03                	jp     c001f049 <x87Detect+0x3>

c001f046 <x87Detect>:
c001f046:	b8 01 00 00 00       	mov    eax,0x1
c001f04b:	0f a2                	cpuid  
c001f04d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f053:	74 06                	je     c001f05b <x87Detect.nox87>
c001f055:	b8 01 00 00 00       	mov    eax,0x1
c001f05a:	c3                   	ret    

c001f05b <x87Detect.nox87>:
c001f05b:	b8 00 00 00 00       	mov    eax,0x0
c001f060:	c3                   	ret    

c001f061 <x87Save>:
c001f061:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f065:	dd 30                	fnsave [eax]
c001f067:	c3                   	ret    

c001f068 <x87Load>:
c001f068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f06c:	dd 20                	frstor [eax]
c001f06e:	c3                   	ret    

c001f06f <x87Init>:
c001f06f:	0f 20 c0             	mov    eax,cr0
c001f072:	66 25 fb ff          	and    ax,0xfffb
c001f076:	66 0d 22 00          	or     ax,0x22
c001f07a:	0f 22 c0             	mov    cr0,eax
c001f07d:	db e3                	fninit 
c001f07f:	0f 06                	clts   
c001f081:	d9 2d 44 f0 01 c0    	fldcw  WORD PTR ds:0xc001f044
c001f087:	c3                   	ret    

c001f088 <x87Close>:
c001f088:	c3                   	ret    
c001f089:	66 90                	xchg   ax,ax
c001f08b:	90                   	nop

c001f08c <__do_global_ctors_aux>:
c001f08c:	a1 40 00 02 c0       	mov    eax,ds:0xc0020040
c001f091:	83 f8 ff             	cmp    eax,0xffffffff
c001f094:	74 1a                	je     c001f0b0 <__do_global_ctors_aux+0x24>
c001f096:	55                   	push   ebp
c001f097:	89 e5                	mov    ebp,esp
c001f099:	53                   	push   ebx
c001f09a:	52                   	push   edx
c001f09b:	bb 40 00 02 c0       	mov    ebx,0xc0020040
c001f0a0:	ff d0                	call   eax
c001f0a2:	83 eb 04             	sub    ebx,0x4
c001f0a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f0a7:	83 f8 ff             	cmp    eax,0xffffffff
c001f0aa:	75 f4                	jne    c001f0a0 <__do_global_ctors_aux+0x14>
c001f0ac:	58                   	pop    eax
c001f0ad:	5b                   	pop    ebx
c001f0ae:	5d                   	pop    ebp
c001f0af:	c3                   	ret    
c001f0b0:	c3                   	ret    
c001f0b1:	66 90                	xchg   ax,ax
c001f0b3:	90                   	nop

c001f0b4 <__divdi3>:
c001f0b4:	55                   	push   ebp
c001f0b5:	57                   	push   edi
c001f0b6:	56                   	push   esi
c001f0b7:	53                   	push   ebx
c001f0b8:	83 ec 1c             	sub    esp,0x1c
c001f0bb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f0bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f0c3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f0c6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f0ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f0ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f0d2:	85 db                	test   ebx,ebx
c001f0d4:	0f 88 8e 00 00 00    	js     c001f168 <__divdi3+0xb4>
c001f0da:	89 dd                	mov    ebp,ebx
c001f0dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f0e4:	89 d3                	mov    ebx,edx
c001f0e6:	85 d2                	test   edx,edx
c001f0e8:	79 0d                	jns    c001f0f7 <__divdi3+0x43>
c001f0ea:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f0ee:	f7 d8                	neg    eax
c001f0f0:	83 d2 00             	adc    edx,0x0
c001f0f3:	f7 da                	neg    edx
c001f0f5:	89 d3                	mov    ebx,edx
c001f0f7:	89 c7                	mov    edi,eax
c001f0f9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f0fc:	85 db                	test   ebx,ebx
c001f0fe:	75 48                	jne    c001f148 <__divdi3+0x94>
c001f100:	39 ef                	cmp    edi,ebp
c001f102:	76 24                	jbe    c001f128 <__divdi3+0x74>
c001f104:	89 ea                	mov    edx,ebp
c001f106:	f7 f7                	div    edi
c001f108:	89 c1                	mov    ecx,eax
c001f10a:	31 f6                	xor    esi,esi
c001f10c:	89 c8                	mov    eax,ecx
c001f10e:	89 f2                	mov    edx,esi
c001f110:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f114:	85 c9                	test   ecx,ecx
c001f116:	74 07                	je     c001f11f <__divdi3+0x6b>
c001f118:	f7 d8                	neg    eax
c001f11a:	83 d2 00             	adc    edx,0x0
c001f11d:	f7 da                	neg    edx
c001f11f:	83 c4 1c             	add    esp,0x1c
c001f122:	5b                   	pop    ebx
c001f123:	5e                   	pop    esi
c001f124:	5f                   	pop    edi
c001f125:	5d                   	pop    ebp
c001f126:	c3                   	ret    
c001f127:	90                   	nop
c001f128:	85 ff                	test   edi,edi
c001f12a:	75 0b                	jne    c001f137 <__divdi3+0x83>
c001f12c:	b8 01 00 00 00       	mov    eax,0x1
c001f131:	31 d2                	xor    edx,edx
c001f133:	f7 f3                	div    ebx
c001f135:	89 c7                	mov    edi,eax
c001f137:	31 d2                	xor    edx,edx
c001f139:	89 e8                	mov    eax,ebp
c001f13b:	f7 f7                	div    edi
c001f13d:	89 c6                	mov    esi,eax
c001f13f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f142:	f7 f7                	div    edi
c001f144:	89 c1                	mov    ecx,eax
c001f146:	eb c4                	jmp    c001f10c <__divdi3+0x58>
c001f148:	39 eb                	cmp    ebx,ebp
c001f14a:	77 3c                	ja     c001f188 <__divdi3+0xd4>
c001f14c:	0f bd f3             	bsr    esi,ebx
c001f14f:	83 f6 1f             	xor    esi,0x1f
c001f152:	75 40                	jne    c001f194 <__divdi3+0xe0>
c001f154:	39 eb                	cmp    ebx,ebp
c001f156:	72 09                	jb     c001f161 <__divdi3+0xad>
c001f158:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f15b:	0f 87 97 00 00 00    	ja     c001f1f8 <__divdi3+0x144>
c001f161:	b9 01 00 00 00       	mov    ecx,0x1
c001f166:	eb a4                	jmp    c001f10c <__divdi3+0x58>
c001f168:	f7 d9                	neg    ecx
c001f16a:	83 d3 00             	adc    ebx,0x0
c001f16d:	f7 db                	neg    ebx
c001f16f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f172:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f176:	89 dd                	mov    ebp,ebx
c001f178:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f180:	e9 5f ff ff ff       	jmp    c001f0e4 <__divdi3+0x30>
c001f185:	8d 76 00             	lea    esi,[esi+0x0]
c001f188:	31 f6                	xor    esi,esi
c001f18a:	31 c9                	xor    ecx,ecx
c001f18c:	e9 7b ff ff ff       	jmp    c001f10c <__divdi3+0x58>
c001f191:	8d 76 00             	lea    esi,[esi+0x0]
c001f194:	b8 20 00 00 00       	mov    eax,0x20
c001f199:	29 f0                	sub    eax,esi
c001f19b:	89 f1                	mov    ecx,esi
c001f19d:	d3 e3                	shl    ebx,cl
c001f19f:	89 fa                	mov    edx,edi
c001f1a1:	88 c1                	mov    cl,al
c001f1a3:	d3 ea                	shr    edx,cl
c001f1a5:	09 da                	or     edx,ebx
c001f1a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f1ab:	89 f1                	mov    ecx,esi
c001f1ad:	d3 e7                	shl    edi,cl
c001f1af:	89 eb                	mov    ebx,ebp
c001f1b1:	88 c1                	mov    cl,al
c001f1b3:	d3 eb                	shr    ebx,cl
c001f1b5:	89 f1                	mov    ecx,esi
c001f1b7:	d3 e5                	shl    ebp,cl
c001f1b9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f1bc:	88 c1                	mov    cl,al
c001f1be:	d3 ea                	shr    edx,cl
c001f1c0:	09 d5                	or     ebp,edx
c001f1c2:	89 e8                	mov    eax,ebp
c001f1c4:	89 da                	mov    edx,ebx
c001f1c6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f1ca:	89 d3                	mov    ebx,edx
c001f1cc:	89 c5                	mov    ebp,eax
c001f1ce:	f7 e7                	mul    edi
c001f1d0:	39 d3                	cmp    ebx,edx
c001f1d2:	72 18                	jb     c001f1ec <__divdi3+0x138>
c001f1d4:	74 0a                	je     c001f1e0 <__divdi3+0x12c>
c001f1d6:	89 e9                	mov    ecx,ebp
c001f1d8:	31 f6                	xor    esi,esi
c001f1da:	e9 2d ff ff ff       	jmp    c001f10c <__divdi3+0x58>
c001f1df:	90                   	nop
c001f1e0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f1e3:	89 f1                	mov    ecx,esi
c001f1e5:	d3 e7                	shl    edi,cl
c001f1e7:	39 c7                	cmp    edi,eax
c001f1e9:	73 eb                	jae    c001f1d6 <__divdi3+0x122>
c001f1eb:	90                   	nop
c001f1ec:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f1ef:	31 f6                	xor    esi,esi
c001f1f1:	e9 16 ff ff ff       	jmp    c001f10c <__divdi3+0x58>
c001f1f6:	66 90                	xchg   ax,ax
c001f1f8:	31 c9                	xor    ecx,ecx
c001f1fa:	e9 0d ff ff ff       	jmp    c001f10c <__divdi3+0x58>
c001f1ff:	90                   	nop

c001f200 <__moddi3>:
c001f200:	55                   	push   ebp
c001f201:	57                   	push   edi
c001f202:	56                   	push   esi
c001f203:	53                   	push   ebx
c001f204:	83 ec 2c             	sub    esp,0x2c
c001f207:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f20b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f20f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f213:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f217:	85 db                	test   ebx,ebx
c001f219:	0f 88 85 00 00 00    	js     c001f2a4 <__moddi3+0xa4>
c001f21f:	89 de                	mov    esi,ebx
c001f221:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f229:	89 d7                	mov    edi,edx
c001f22b:	85 d2                	test   edx,edx
c001f22d:	79 09                	jns    c001f238 <__moddi3+0x38>
c001f22f:	f7 d8                	neg    eax
c001f231:	83 d2 00             	adc    edx,0x0
c001f234:	f7 da                	neg    edx
c001f236:	89 d7                	mov    edi,edx
c001f238:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f23c:	89 cd                	mov    ebp,ecx
c001f23e:	85 ff                	test   edi,edi
c001f240:	75 52                	jne    c001f294 <__moddi3+0x94>
c001f242:	89 c3                	mov    ebx,eax
c001f244:	39 f0                	cmp    eax,esi
c001f246:	76 24                	jbe    c001f26c <__moddi3+0x6c>
c001f248:	89 c8                	mov    eax,ecx
c001f24a:	89 f2                	mov    edx,esi
c001f24c:	f7 f3                	div    ebx
c001f24e:	89 d6                	mov    esi,edx
c001f250:	89 f0                	mov    eax,esi
c001f252:	31 d2                	xor    edx,edx
c001f254:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f258:	85 c9                	test   ecx,ecx
c001f25a:	74 07                	je     c001f263 <__moddi3+0x63>
c001f25c:	f7 d8                	neg    eax
c001f25e:	83 d2 00             	adc    edx,0x0
c001f261:	f7 da                	neg    edx
c001f263:	83 c4 2c             	add    esp,0x2c
c001f266:	5b                   	pop    ebx
c001f267:	5e                   	pop    esi
c001f268:	5f                   	pop    edi
c001f269:	5d                   	pop    ebp
c001f26a:	c3                   	ret    
c001f26b:	90                   	nop
c001f26c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f270:	85 db                	test   ebx,ebx
c001f272:	75 0d                	jne    c001f281 <__moddi3+0x81>
c001f274:	b8 01 00 00 00       	mov    eax,0x1
c001f279:	31 d2                	xor    edx,edx
c001f27b:	f7 f7                	div    edi
c001f27d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f281:	89 f0                	mov    eax,esi
c001f283:	31 d2                	xor    edx,edx
c001f285:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f289:	f7 f7                	div    edi
c001f28b:	89 e8                	mov    eax,ebp
c001f28d:	f7 f7                	div    edi
c001f28f:	89 d6                	mov    esi,edx
c001f291:	eb bd                	jmp    c001f250 <__moddi3+0x50>
c001f293:	90                   	nop
c001f294:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f298:	39 f7                	cmp    edi,esi
c001f29a:	76 20                	jbe    c001f2bc <__moddi3+0xbc>
c001f29c:	89 c8                	mov    eax,ecx
c001f29e:	89 f2                	mov    edx,esi
c001f2a0:	eb b2                	jmp    c001f254 <__moddi3+0x54>
c001f2a2:	66 90                	xchg   ax,ax
c001f2a4:	f7 d9                	neg    ecx
c001f2a6:	83 d3 00             	adc    ebx,0x0
c001f2a9:	f7 db                	neg    ebx
c001f2ab:	89 de                	mov    esi,ebx
c001f2ad:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f2b5:	e9 6f ff ff ff       	jmp    c001f229 <__moddi3+0x29>
c001f2ba:	66 90                	xchg   ax,ax
c001f2bc:	0f bd c7             	bsr    eax,edi
c001f2bf:	83 f0 1f             	xor    eax,0x1f
c001f2c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f2c6:	75 24                	jne    c001f2ec <__moddi3+0xec>
c001f2c8:	39 f7                	cmp    edi,esi
c001f2ca:	72 06                	jb     c001f2d2 <__moddi3+0xd2>
c001f2cc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f2d0:	77 0c                	ja     c001f2de <__moddi3+0xde>
c001f2d2:	89 e9                	mov    ecx,ebp
c001f2d4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f2d8:	19 fe                	sbb    esi,edi
c001f2da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f2de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f2e2:	89 f2                	mov    edx,esi
c001f2e4:	e9 6b ff ff ff       	jmp    c001f254 <__moddi3+0x54>
c001f2e9:	8d 76 00             	lea    esi,[esi+0x0]
c001f2ec:	b8 20 00 00 00       	mov    eax,0x20
c001f2f1:	89 c2                	mov    edx,eax
c001f2f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f2f7:	29 da                	sub    edx,ebx
c001f2f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f2fd:	88 d9                	mov    cl,bl
c001f2ff:	d3 e7                	shl    edi,cl
c001f301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f305:	88 d1                	mov    cl,dl
c001f307:	d3 e8                	shr    eax,cl
c001f309:	09 c7                	or     edi,eax
c001f30b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f30f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f313:	89 d8                	mov    eax,ebx
c001f315:	88 d9                	mov    cl,bl
c001f317:	d3 e7                	shl    edi,cl
c001f319:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f31d:	89 f3                	mov    ebx,esi
c001f31f:	88 d1                	mov    cl,dl
c001f321:	d3 eb                	shr    ebx,cl
c001f323:	89 c7                	mov    edi,eax
c001f325:	88 c1                	mov    cl,al
c001f327:	d3 e6                	shl    esi,cl
c001f329:	89 e8                	mov    eax,ebp
c001f32b:	88 d1                	mov    cl,dl
c001f32d:	d3 e8                	shr    eax,cl
c001f32f:	09 f0                	or     eax,esi
c001f331:	89 f9                	mov    ecx,edi
c001f333:	d3 e5                	shl    ebp,cl
c001f335:	89 da                	mov    edx,ebx
c001f337:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f33b:	89 d3                	mov    ebx,edx
c001f33d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f341:	89 c6                	mov    esi,eax
c001f343:	89 d1                	mov    ecx,edx
c001f345:	39 d3                	cmp    ebx,edx
c001f347:	72 27                	jb     c001f370 <__moddi3+0x170>
c001f349:	74 21                	je     c001f36c <__moddi3+0x16c>
c001f34b:	29 f5                	sub    ebp,esi
c001f34d:	19 cb                	sbb    ebx,ecx
c001f34f:	89 de                	mov    esi,ebx
c001f351:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f355:	d3 e6                	shl    esi,cl
c001f357:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f35b:	89 f9                	mov    ecx,edi
c001f35d:	d3 ed                	shr    ebp,cl
c001f35f:	09 ee                	or     esi,ebp
c001f361:	89 f0                	mov    eax,esi
c001f363:	d3 eb                	shr    ebx,cl
c001f365:	89 da                	mov    edx,ebx
c001f367:	e9 e8 fe ff ff       	jmp    c001f254 <__moddi3+0x54>
c001f36c:	39 c5                	cmp    ebp,eax
c001f36e:	73 db                	jae    c001f34b <__moddi3+0x14b>
c001f370:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f374:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f378:	89 d1                	mov    ecx,edx
c001f37a:	89 c6                	mov    esi,eax
c001f37c:	eb cd                	jmp    c001f34b <__moddi3+0x14b>
c001f37e:	66 90                	xchg   ax,ax

c001f380 <__udivdi3>:
c001f380:	55                   	push   ebp
c001f381:	57                   	push   edi
c001f382:	56                   	push   esi
c001f383:	53                   	push   ebx
c001f384:	83 ec 1c             	sub    esp,0x1c
c001f387:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f38b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f38f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f393:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f397:	85 d2                	test   edx,edx
c001f399:	75 41                	jne    c001f3dc <__udivdi3+0x5c>
c001f39b:	39 f7                	cmp    edi,esi
c001f39d:	76 15                	jbe    c001f3b4 <__udivdi3+0x34>
c001f39f:	89 e8                	mov    eax,ebp
c001f3a1:	89 f2                	mov    edx,esi
c001f3a3:	f7 f7                	div    edi
c001f3a5:	31 db                	xor    ebx,ebx
c001f3a7:	89 da                	mov    edx,ebx
c001f3a9:	83 c4 1c             	add    esp,0x1c
c001f3ac:	5b                   	pop    ebx
c001f3ad:	5e                   	pop    esi
c001f3ae:	5f                   	pop    edi
c001f3af:	5d                   	pop    ebp
c001f3b0:	c3                   	ret    
c001f3b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f3b4:	89 f9                	mov    ecx,edi
c001f3b6:	85 ff                	test   edi,edi
c001f3b8:	75 0b                	jne    c001f3c5 <__udivdi3+0x45>
c001f3ba:	b8 01 00 00 00       	mov    eax,0x1
c001f3bf:	31 d2                	xor    edx,edx
c001f3c1:	f7 f7                	div    edi
c001f3c3:	89 c1                	mov    ecx,eax
c001f3c5:	31 d2                	xor    edx,edx
c001f3c7:	89 f0                	mov    eax,esi
c001f3c9:	f7 f1                	div    ecx
c001f3cb:	89 c3                	mov    ebx,eax
c001f3cd:	89 e8                	mov    eax,ebp
c001f3cf:	f7 f1                	div    ecx
c001f3d1:	89 da                	mov    edx,ebx
c001f3d3:	83 c4 1c             	add    esp,0x1c
c001f3d6:	5b                   	pop    ebx
c001f3d7:	5e                   	pop    esi
c001f3d8:	5f                   	pop    edi
c001f3d9:	5d                   	pop    ebp
c001f3da:	c3                   	ret    
c001f3db:	90                   	nop
c001f3dc:	39 f2                	cmp    edx,esi
c001f3de:	77 1c                	ja     c001f3fc <__udivdi3+0x7c>
c001f3e0:	0f bd da             	bsr    ebx,edx
c001f3e3:	83 f3 1f             	xor    ebx,0x1f
c001f3e6:	75 24                	jne    c001f40c <__udivdi3+0x8c>
c001f3e8:	39 f2                	cmp    edx,esi
c001f3ea:	72 08                	jb     c001f3f4 <__udivdi3+0x74>
c001f3ec:	39 ef                	cmp    edi,ebp
c001f3ee:	0f 87 84 00 00 00    	ja     c001f478 <__udivdi3+0xf8>
c001f3f4:	b8 01 00 00 00       	mov    eax,0x1
c001f3f9:	eb ac                	jmp    c001f3a7 <__udivdi3+0x27>
c001f3fb:	90                   	nop
c001f3fc:	31 db                	xor    ebx,ebx
c001f3fe:	31 c0                	xor    eax,eax
c001f400:	89 da                	mov    edx,ebx
c001f402:	83 c4 1c             	add    esp,0x1c
c001f405:	5b                   	pop    ebx
c001f406:	5e                   	pop    esi
c001f407:	5f                   	pop    edi
c001f408:	5d                   	pop    ebp
c001f409:	c3                   	ret    
c001f40a:	66 90                	xchg   ax,ax
c001f40c:	b8 20 00 00 00       	mov    eax,0x20
c001f411:	29 d8                	sub    eax,ebx
c001f413:	88 d9                	mov    cl,bl
c001f415:	d3 e2                	shl    edx,cl
c001f417:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f41b:	89 fa                	mov    edx,edi
c001f41d:	88 c1                	mov    cl,al
c001f41f:	d3 ea                	shr    edx,cl
c001f421:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f425:	09 d1                	or     ecx,edx
c001f427:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f42b:	88 d9                	mov    cl,bl
c001f42d:	d3 e7                	shl    edi,cl
c001f42f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f433:	89 f7                	mov    edi,esi
c001f435:	88 c1                	mov    cl,al
c001f437:	d3 ef                	shr    edi,cl
c001f439:	88 d9                	mov    cl,bl
c001f43b:	d3 e6                	shl    esi,cl
c001f43d:	89 ea                	mov    edx,ebp
c001f43f:	88 c1                	mov    cl,al
c001f441:	d3 ea                	shr    edx,cl
c001f443:	09 d6                	or     esi,edx
c001f445:	89 f0                	mov    eax,esi
c001f447:	89 fa                	mov    edx,edi
c001f449:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f44d:	89 d7                	mov    edi,edx
c001f44f:	89 c6                	mov    esi,eax
c001f451:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f455:	39 d7                	cmp    edi,edx
c001f457:	72 13                	jb     c001f46c <__udivdi3+0xec>
c001f459:	74 09                	je     c001f464 <__udivdi3+0xe4>
c001f45b:	89 f0                	mov    eax,esi
c001f45d:	31 db                	xor    ebx,ebx
c001f45f:	e9 43 ff ff ff       	jmp    c001f3a7 <__udivdi3+0x27>
c001f464:	88 d9                	mov    cl,bl
c001f466:	d3 e5                	shl    ebp,cl
c001f468:	39 c5                	cmp    ebp,eax
c001f46a:	73 ef                	jae    c001f45b <__udivdi3+0xdb>
c001f46c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f46f:	31 db                	xor    ebx,ebx
c001f471:	e9 31 ff ff ff       	jmp    c001f3a7 <__udivdi3+0x27>
c001f476:	66 90                	xchg   ax,ax
c001f478:	31 c0                	xor    eax,eax
c001f47a:	e9 28 ff ff ff       	jmp    c001f3a7 <__udivdi3+0x27>
c001f47f:	90                   	nop

c001f480 <__umoddi3>:
c001f480:	55                   	push   ebp
c001f481:	57                   	push   edi
c001f482:	56                   	push   esi
c001f483:	53                   	push   ebx
c001f484:	83 ec 1c             	sub    esp,0x1c
c001f487:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f48b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f48f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f493:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f497:	89 da                	mov    edx,ebx
c001f499:	85 c0                	test   eax,eax
c001f49b:	75 37                	jne    c001f4d4 <__umoddi3+0x54>
c001f49d:	39 df                	cmp    edi,ebx
c001f49f:	76 13                	jbe    c001f4b4 <__umoddi3+0x34>
c001f4a1:	89 f0                	mov    eax,esi
c001f4a3:	f7 f7                	div    edi
c001f4a5:	89 d0                	mov    eax,edx
c001f4a7:	31 d2                	xor    edx,edx
c001f4a9:	83 c4 1c             	add    esp,0x1c
c001f4ac:	5b                   	pop    ebx
c001f4ad:	5e                   	pop    esi
c001f4ae:	5f                   	pop    edi
c001f4af:	5d                   	pop    ebp
c001f4b0:	c3                   	ret    
c001f4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f4b4:	89 fd                	mov    ebp,edi
c001f4b6:	85 ff                	test   edi,edi
c001f4b8:	75 0b                	jne    c001f4c5 <__umoddi3+0x45>
c001f4ba:	b8 01 00 00 00       	mov    eax,0x1
c001f4bf:	31 d2                	xor    edx,edx
c001f4c1:	f7 f7                	div    edi
c001f4c3:	89 c5                	mov    ebp,eax
c001f4c5:	89 d8                	mov    eax,ebx
c001f4c7:	31 d2                	xor    edx,edx
c001f4c9:	f7 f5                	div    ebp
c001f4cb:	89 f0                	mov    eax,esi
c001f4cd:	f7 f5                	div    ebp
c001f4cf:	89 d0                	mov    eax,edx
c001f4d1:	eb d4                	jmp    c001f4a7 <__umoddi3+0x27>
c001f4d3:	90                   	nop
c001f4d4:	89 f1                	mov    ecx,esi
c001f4d6:	39 d8                	cmp    eax,ebx
c001f4d8:	76 0a                	jbe    c001f4e4 <__umoddi3+0x64>
c001f4da:	89 f0                	mov    eax,esi
c001f4dc:	83 c4 1c             	add    esp,0x1c
c001f4df:	5b                   	pop    ebx
c001f4e0:	5e                   	pop    esi
c001f4e1:	5f                   	pop    edi
c001f4e2:	5d                   	pop    ebp
c001f4e3:	c3                   	ret    
c001f4e4:	0f bd e8             	bsr    ebp,eax
c001f4e7:	83 f5 1f             	xor    ebp,0x1f
c001f4ea:	75 1c                	jne    c001f508 <__umoddi3+0x88>
c001f4ec:	39 d8                	cmp    eax,ebx
c001f4ee:	72 04                	jb     c001f4f4 <__umoddi3+0x74>
c001f4f0:	39 f7                	cmp    edi,esi
c001f4f2:	77 08                	ja     c001f4fc <__umoddi3+0x7c>
c001f4f4:	89 da                	mov    edx,ebx
c001f4f6:	29 fe                	sub    esi,edi
c001f4f8:	19 c2                	sbb    edx,eax
c001f4fa:	89 f1                	mov    ecx,esi
c001f4fc:	89 c8                	mov    eax,ecx
c001f4fe:	83 c4 1c             	add    esp,0x1c
c001f501:	5b                   	pop    ebx
c001f502:	5e                   	pop    esi
c001f503:	5f                   	pop    edi
c001f504:	5d                   	pop    ebp
c001f505:	c3                   	ret    
c001f506:	66 90                	xchg   ax,ax
c001f508:	ba 20 00 00 00       	mov    edx,0x20
c001f50d:	29 ea                	sub    edx,ebp
c001f50f:	89 e9                	mov    ecx,ebp
c001f511:	d3 e0                	shl    eax,cl
c001f513:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f517:	89 f8                	mov    eax,edi
c001f519:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f51d:	88 d1                	mov    cl,dl
c001f51f:	d3 e8                	shr    eax,cl
c001f521:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f525:	09 c1                	or     ecx,eax
c001f527:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f52b:	89 e9                	mov    ecx,ebp
c001f52d:	d3 e7                	shl    edi,cl
c001f52f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f533:	89 d8                	mov    eax,ebx
c001f535:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f539:	88 d1                	mov    cl,dl
c001f53b:	d3 e8                	shr    eax,cl
c001f53d:	89 c7                	mov    edi,eax
c001f53f:	89 e9                	mov    ecx,ebp
c001f541:	d3 e3                	shl    ebx,cl
c001f543:	89 f0                	mov    eax,esi
c001f545:	88 d1                	mov    cl,dl
c001f547:	d3 e8                	shr    eax,cl
c001f549:	09 d8                	or     eax,ebx
c001f54b:	89 e9                	mov    ecx,ebp
c001f54d:	d3 e6                	shl    esi,cl
c001f54f:	89 f3                	mov    ebx,esi
c001f551:	89 fa                	mov    edx,edi
c001f553:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f557:	89 d1                	mov    ecx,edx
c001f559:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f55d:	89 c6                	mov    esi,eax
c001f55f:	89 d7                	mov    edi,edx
c001f561:	39 d1                	cmp    ecx,edx
c001f563:	72 27                	jb     c001f58c <__umoddi3+0x10c>
c001f565:	74 21                	je     c001f588 <__umoddi3+0x108>
c001f567:	89 ca                	mov    edx,ecx
c001f569:	29 f3                	sub    ebx,esi
c001f56b:	19 fa                	sbb    edx,edi
c001f56d:	89 d0                	mov    eax,edx
c001f56f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f573:	d3 e0                	shl    eax,cl
c001f575:	89 e9                	mov    ecx,ebp
c001f577:	d3 eb                	shr    ebx,cl
c001f579:	09 d8                	or     eax,ebx
c001f57b:	d3 ea                	shr    edx,cl
c001f57d:	83 c4 1c             	add    esp,0x1c
c001f580:	5b                   	pop    ebx
c001f581:	5e                   	pop    esi
c001f582:	5f                   	pop    edi
c001f583:	5d                   	pop    ebp
c001f584:	c3                   	ret    
c001f585:	8d 76 00             	lea    esi,[esi+0x0]
c001f588:	39 c3                	cmp    ebx,eax
c001f58a:	73 db                	jae    c001f567 <__umoddi3+0xe7>
c001f58c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f590:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f594:	89 d7                	mov    edi,edx
c001f596:	89 c6                	mov    esi,eax
c001f598:	eb cd                	jmp    c001f567 <__umoddi3+0xe7>

Disassembly of section .init:

c001f59a <_init>:
c001f59a:	55                   	push   ebp
c001f59b:	89 e5                	mov    ebp,esp
c001f59d:	e8 52 0b fe ff       	call   c00000f4 <frame_dummy>
c001f5a2:	e8 e5 fa ff ff       	call   c001f08c <__do_global_ctors_aux>
c001f5a7:	5d                   	pop    ebp
c001f5a8:	c3                   	ret    

Disassembly of section .fini:

c001f5a9 <_fini>:
c001f5a9:	55                   	push   ebp
c001f5aa:	89 e5                	mov    ebp,esp
c001f5ac:	e8 d3 0a fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f5b1:	5d                   	pop    ebp
c001f5b2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f5b4 <Computer::~Computer()>:
c001f5b4:	83 ec 0c             	sub    esp,0xc
c001f5b7:	ba d4 08 02 c0       	mov    edx,0xc00208d4
c001f5bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c0:	89 10                	mov    DWORD PTR [eax],edx
c001f5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c6:	83 ec 0c             	sub    esp,0xc
c001f5c9:	50                   	push   eax
c001f5ca:	e8 59 d0 fe ff       	call   c000c628 <Device::~Device()>
c001f5cf:	83 c4 10             	add    esp,0x10
c001f5d2:	90                   	nop
c001f5d3:	83 c4 0c             	add    esp,0xc
c001f5d6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f5d8 <Computer::~Computer()>:
c001f5d8:	83 ec 0c             	sub    esp,0xc
c001f5db:	83 ec 0c             	sub    esp,0xc
c001f5de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5e2:	e8 cd ff ff ff       	call   c001f5b4 <Computer::~Computer()>
c001f5e7:	83 c4 10             	add    esp,0x10
c001f5ea:	83 ec 08             	sub    esp,0x8
c001f5ed:	68 70 01 00 00       	push   0x170
c001f5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5f6:	e8 1d b2 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f5fb:	83 c4 10             	add    esp,0x10
c001f5fe:	83 c4 0c             	add    esp,0xc
c001f601:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f602 <idleCommon()>:
c001f602:	83 ec 0c             	sub    esp,0xc
c001f605:	fa                   	cli    
c001f606:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f60c:	e8 fb 66 ff ff       	call   c0015d0c <schedule()>
c001f611:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f616:	48                   	dec    eax
c001f617:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f61c:	75 01                	jne    c001f61f <idleCommon()+0x1d>
c001f61e:	fb                   	sti    
c001f61f:	83 c4 0c             	add    esp,0xc
c001f622:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f624 <LinkedList<UnixFile>::~LinkedList()>:
c001f624:	90                   	nop
c001f625:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f626 <LinkedList<UnixFile>::LinkedList()>:
c001f626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f62a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f634:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f63b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f63f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f64a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f654:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f65b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f65f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f666:	90                   	nop
c001f667:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f668 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f668:	83 ec 0c             	sub    esp,0xc
c001f66b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f670:	75 10                	jne    c001f682 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f672:	83 ec 0c             	sub    esp,0xc
c001f675:	68 e8 0a 02 c0       	push   0xc0020ae8
c001f67a:	e8 d2 1c ff ff       	call   c0011351 <KePanic(char const*)>
c001f67f:	83 c4 10             	add    esp,0x10
c001f682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f686:	8b 00                	mov    eax,DWORD PTR [eax]
c001f688:	85 c0                	test   eax,eax
c001f68a:	74 34                	je     c001f6c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f690:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f693:	85 c0                	test   eax,eax
c001f695:	74 29                	je     c001f6c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f69e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6be:	eb 65                	jmp    c001f725 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6c6:	85 c0                	test   eax,eax
c001f6c8:	75 4b                	jne    c001f715 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6d1:	85 c0                	test   eax,eax
c001f6d3:	75 40                	jne    c001f715 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f6d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6dd:	89 10                	mov    DWORD PTR [eax],edx
c001f6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6ff:	85 c0                	test   eax,eax
c001f701:	74 22                	je     c001f725 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f703:	83 ec 0c             	sub    esp,0xc
c001f706:	68 0a 0b 02 c0       	push   0xc0020b0a
c001f70b:	e8 41 1c ff ff       	call   c0011351 <KePanic(char const*)>
c001f710:	83 c4 10             	add    esp,0x10
c001f713:	eb 10                	jmp    c001f725 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f715:	83 ec 0c             	sub    esp,0xc
c001f718:	68 14 0b 02 c0       	push   0xc0020b14
c001f71d:	e8 2f 1c ff ff       	call   c0011351 <KePanic(char const*)>
c001f722:	83 c4 10             	add    esp,0x10
c001f725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f729:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f72c:	8d 50 01             	lea    edx,[eax+0x1]
c001f72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f736:	90                   	nop
c001f737:	83 c4 0c             	add    esp,0xc
c001f73a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f73c <LinkedList<UnixFile>::getFirstElement()>:
c001f73c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f740:	8b 00                	mov    eax,DWORD PTR [eax]
c001f742:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f744 <LinkedList<UnixFile>::removeFirst()>:
c001f744:	83 ec 0c             	sub    esp,0xc
c001f747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f74d:	85 c0                	test   eax,eax
c001f74f:	75 12                	jne    c001f763 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f751:	83 ec 0c             	sub    esp,0xc
c001f754:	68 20 0b 02 c0       	push   0xc0020b20
c001f759:	e8 f3 1b ff ff       	call   c0011351 <KePanic(char const*)>
c001f75e:	83 c4 10             	add    esp,0x10
c001f761:	eb 7e                	jmp    c001f7e1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f767:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f76a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f76d:	85 c0                	test   eax,eax
c001f76f:	74 10                	je     c001f781 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f771:	83 ec 0c             	sub    esp,0xc
c001f774:	68 6b 0b 02 c0       	push   0xc0020b6b
c001f779:	e8 d3 1b ff ff       	call   c0011351 <KePanic(char const*)>
c001f77e:	83 c4 10             	add    esp,0x10
c001f781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f785:	8b 00                	mov    eax,DWORD PTR [eax]
c001f787:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f78a:	85 c0                	test   eax,eax
c001f78c:	75 33                	jne    c001f7c1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f792:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7aa:	83 f8 01             	cmp    eax,0x1
c001f7ad:	74 21                	je     c001f7d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f7af:	83 ec 0c             	sub    esp,0xc
c001f7b2:	68 44 0b 02 c0       	push   0xc0020b44
c001f7b7:	e8 95 1b ff ff       	call   c0011351 <KePanic(char const*)>
c001f7bc:	83 c4 10             	add    esp,0x10
c001f7bf:	eb 0f                	jmp    c001f7d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7c7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ce:	89 10                	mov    DWORD PTR [eax],edx
c001f7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7d7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7e1:	83 c4 0c             	add    esp,0xc
c001f7e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f7e6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f7e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7ed:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f7ee <DriverlessDevice::~DriverlessDevice()>:
c001f7ee:	ba fc 16 02 c0       	mov    edx,0xc00216fc
c001f7f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f7:	89 10                	mov    DWORD PTR [eax],edx
c001f7f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7fd:	50                   	push   eax
c001f7fe:	e8 25 ce fe ff       	call   c000c628 <Device::~Device()>
c001f803:	83 c4 04             	add    esp,0x4
c001f806:	90                   	nop
c001f807:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f808 <DriverlessDevice::~DriverlessDevice()>:
c001f808:	83 ec 0c             	sub    esp,0xc
c001f80b:	83 ec 0c             	sub    esp,0xc
c001f80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f812:	e8 d7 ff ff ff       	call   c001f7ee <DriverlessDevice::~DriverlessDevice()>
c001f817:	83 c4 10             	add    esp,0x10
c001f81a:	83 ec 08             	sub    esp,0x8
c001f81d:	68 58 01 00 00       	push   0x158
c001f822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f826:	e8 ed af fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f82b:	83 c4 10             	add    esp,0x10
c001f82e:	83 c4 0c             	add    esp,0xc
c001f831:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f832 <LinkedList<Device>::addElement(Device*)>:
c001f832:	83 ec 0c             	sub    esp,0xc
c001f835:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f83a:	75 10                	jne    c001f84c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f83c:	83 ec 0c             	sub    esp,0xc
c001f83f:	68 e8 0a 02 c0       	push   0xc0020ae8
c001f844:	e8 08 1b ff ff       	call   c0011351 <KePanic(char const*)>
c001f849:	83 c4 10             	add    esp,0x10
c001f84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f850:	8b 00                	mov    eax,DWORD PTR [eax]
c001f852:	85 c0                	test   eax,eax
c001f854:	74 3a                	je     c001f890 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f85d:	85 c0                	test   eax,eax
c001f85f:	74 2f                	je     c001f890 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f865:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f868:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f86c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f876:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f87a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f881:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f884:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f88e:	eb 68                	jmp    c001f8f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f894:	8b 00                	mov    eax,DWORD PTR [eax]
c001f896:	85 c0                	test   eax,eax
c001f898:	75 4e                	jne    c001f8e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8a1:	85 c0                	test   eax,eax
c001f8a3:	75 43                	jne    c001f8e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8ad:	89 10                	mov    DWORD PTR [eax],edx
c001f8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8c1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8d2:	85 c0                	test   eax,eax
c001f8d4:	74 22                	je     c001f8f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f8d6:	83 ec 0c             	sub    esp,0xc
c001f8d9:	68 0a 0b 02 c0       	push   0xc0020b0a
c001f8de:	e8 6e 1a ff ff       	call   c0011351 <KePanic(char const*)>
c001f8e3:	83 c4 10             	add    esp,0x10
c001f8e6:	eb 10                	jmp    c001f8f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f8e8:	83 ec 0c             	sub    esp,0xc
c001f8eb:	68 14 0b 02 c0       	push   0xc0020b14
c001f8f0:	e8 5c 1a ff ff       	call   c0011351 <KePanic(char const*)>
c001f8f5:	83 c4 10             	add    esp,0x10
c001f8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8ff:	8d 50 01             	lea    edx,[eax+0x1]
c001f902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f906:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f909:	90                   	nop
c001f90a:	83 c4 0c             	add    esp,0xc
c001f90d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f90e <LinkedList<Device>::LinkedList()>:
c001f90e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f912:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f91c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f923:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f927:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f92e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f932:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f93c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f943:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f947:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f94e:	90                   	nop
c001f94f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f954:	8b 00                	mov    eax,DWORD PTR [eax]
c001f956:	85 c0                	test   eax,eax
c001f958:	75 0e                	jne    c001f968 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f95a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f95e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f961:	85 c0                	test   eax,eax
c001f963:	75 03                	jne    c001f968 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f965:	b0 01                	mov    al,0x1
c001f967:	c3                   	ret    
c001f968:	b0 00                	mov    al,0x0
c001f96a:	90                   	nop
c001f96b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f96c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f970:	8b 00                	mov    eax,DWORD PTR [eax]
c001f972:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f974:	83 ec 0c             	sub    esp,0xc
c001f977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f97d:	85 c0                	test   eax,eax
c001f97f:	75 17                	jne    c001f998 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f981:	83 ec 0c             	sub    esp,0xc
c001f984:	68 20 0b 02 c0       	push   0xc0020b20
c001f989:	e8 c3 19 ff ff       	call   c0011351 <KePanic(char const*)>
c001f98e:	83 c4 10             	add    esp,0x10
c001f991:	e9 96 00 00 00       	jmp    c001fa2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f996:	66 90                	xchg   ax,ax
c001f998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f99f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f9a2:	85 c0                	test   eax,eax
c001f9a4:	0f 95 c0             	setne  al
c001f9a7:	0f b6 c0             	movzx  eax,al
c001f9aa:	85 c0                	test   eax,eax
c001f9ac:	74 12                	je     c001f9c0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f9ae:	83 ec 0c             	sub    esp,0xc
c001f9b1:	68 6b 0b 02 c0       	push   0xc0020b6b
c001f9b6:	e8 96 19 ff ff       	call   c0011351 <KePanic(char const*)>
c001f9bb:	83 c4 10             	add    esp,0x10
c001f9be:	66 90                	xchg   ax,ax
c001f9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9c6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f9c9:	85 c0                	test   eax,eax
c001f9cb:	0f 94 c0             	sete   al
c001f9ce:	0f b6 c0             	movzx  eax,al
c001f9d1:	85 c0                	test   eax,eax
c001f9d3:	74 33                	je     c001fa08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9f1:	83 f8 01             	cmp    eax,0x1
c001f9f4:	74 22                	je     c001fa18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f9f6:	83 ec 0c             	sub    esp,0xc
c001f9f9:	68 44 0b 02 c0       	push   0xc0020b44
c001f9fe:	e8 4e 19 ff ff       	call   c0011351 <KePanic(char const*)>
c001fa03:	83 c4 10             	add    esp,0x10
c001fa06:	eb 10                	jmp    c001fa18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fa08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa0e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fa11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa15:	89 10                	mov    DWORD PTR [eax],edx
c001fa17:	90                   	nop
c001fa18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa1f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fa22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa26:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa29:	8d 76 00             	lea    esi,[esi+0x0]
c001fa2c:	83 c4 0c             	add    esp,0xc
c001fa2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fa30:	83 ec 0c             	sub    esp,0xc
c001fa33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa38:	75 12                	jne    c001fa4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fa3a:	83 ec 0c             	sub    esp,0xc
c001fa3d:	68 e8 0a 02 c0       	push   0xc0020ae8
c001fa42:	e8 0a 19 ff ff       	call   c0011351 <KePanic(char const*)>
c001fa47:	83 c4 10             	add    esp,0x10
c001fa4a:	66 90                	xchg   ax,ax
c001fa4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa50:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa52:	85 c0                	test   eax,eax
c001fa54:	74 36                	je     c001fa8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fa56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa5d:	85 c0                	test   eax,eax
c001fa5f:	74 2b                	je     c001fa8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fa61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa6c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa81:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa88:	eb 6a                	jmp    c001faf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa8a:	66 90                	xchg   ax,ax
c001fa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa92:	85 c0                	test   eax,eax
c001fa94:	75 4e                	jne    c001fae4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fa96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa9d:	85 c0                	test   eax,eax
c001fa9f:	75 43                	jne    c001fae4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001faa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faa9:	89 10                	mov    DWORD PTR [eax],edx
c001faab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fab3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fabd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001facb:	85 c0                	test   eax,eax
c001facd:	74 25                	je     c001faf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001facf:	83 ec 0c             	sub    esp,0xc
c001fad2:	68 0a 0b 02 c0       	push   0xc0020b0a
c001fad7:	e8 75 18 ff ff       	call   c0011351 <KePanic(char const*)>
c001fadc:	83 c4 10             	add    esp,0x10
c001fadf:	eb 13                	jmp    c001faf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fae1:	8d 76 00             	lea    esi,[esi+0x0]
c001fae4:	83 ec 0c             	sub    esp,0xc
c001fae7:	68 14 0b 02 c0       	push   0xc0020b14
c001faec:	e8 60 18 ff ff       	call   c0011351 <KePanic(char const*)>
c001faf1:	83 c4 10             	add    esp,0x10
c001faf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fafb:	8d 50 01             	lea    edx,[eax+0x1]
c001fafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb05:	90                   	nop
c001fb06:	83 c4 0c             	add    esp,0xc
c001fb09:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fb0c <ACPI::~ACPI()>:
c001fb0c:	83 ec 0c             	sub    esp,0xc
c001fb0f:	ba e4 1c 02 c0       	mov    edx,0xc0021ce4
c001fb14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb18:	89 10                	mov    DWORD PTR [eax],edx
c001fb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1e:	83 ec 0c             	sub    esp,0xc
c001fb21:	50                   	push   eax
c001fb22:	e8 01 cb fe ff       	call   c000c628 <Device::~Device()>
c001fb27:	83 c4 10             	add    esp,0x10
c001fb2a:	90                   	nop
c001fb2b:	83 c4 0c             	add    esp,0xc
c001fb2e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fb30 <ACPI::~ACPI()>:
c001fb30:	83 ec 0c             	sub    esp,0xc
c001fb33:	83 ec 0c             	sub    esp,0xc
c001fb36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb3a:	e8 cd ff ff ff       	call   c001fb0c <ACPI::~ACPI()>
c001fb3f:	83 c4 10             	add    esp,0x10
c001fb42:	83 ec 08             	sub    esp,0x8
c001fb45:	68 64 12 00 00       	push   0x1264
c001fb4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb4e:	e8 c5 ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb53:	83 c4 10             	add    esp,0x10
c001fb56:	83 c4 0c             	add    esp,0xc
c001fb59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fb5c <LinkedList<Device>::~LinkedList()>:
c001fb5c:	90                   	nop
c001fb5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fb60 <LinkedList<Device>::isEmpty()>:
c001fb60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb66:	85 c0                	test   eax,eax
c001fb68:	75 0e                	jne    c001fb78 <LinkedList<Device>::isEmpty()+0x18>
c001fb6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb71:	85 c0                	test   eax,eax
c001fb73:	75 03                	jne    c001fb78 <LinkedList<Device>::isEmpty()+0x18>
c001fb75:	b0 01                	mov    al,0x1
c001fb77:	c3                   	ret    
c001fb78:	b0 00                	mov    al,0x0
c001fb7a:	90                   	nop
c001fb7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fb7c <LinkedList<Device>::getFirstElement()>:
c001fb7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fb84 <LinkedList<Device>::removeFirst()>:
c001fb84:	83 ec 0c             	sub    esp,0xc
c001fb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb8d:	85 c0                	test   eax,eax
c001fb8f:	75 17                	jne    c001fba8 <LinkedList<Device>::removeFirst()+0x24>
c001fb91:	83 ec 0c             	sub    esp,0xc
c001fb94:	68 20 0b 02 c0       	push   0xc0020b20
c001fb99:	e8 b3 17 ff ff       	call   c0011351 <KePanic(char const*)>
c001fb9e:	83 c4 10             	add    esp,0x10
c001fba1:	e9 92 00 00 00       	jmp    c001fc38 <LinkedList<Device>::removeFirst()+0xb4>
c001fba6:	66 90                	xchg   ax,ax
c001fba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbaf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fbb5:	85 c0                	test   eax,eax
c001fbb7:	74 13                	je     c001fbcc <LinkedList<Device>::removeFirst()+0x48>
c001fbb9:	83 ec 0c             	sub    esp,0xc
c001fbbc:	68 6b 0b 02 c0       	push   0xc0020b6b
c001fbc1:	e8 8b 17 ff ff       	call   c0011351 <KePanic(char const*)>
c001fbc6:	83 c4 10             	add    esp,0x10
c001fbc9:	8d 76 00             	lea    esi,[esi+0x0]
c001fbcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fbd8:	85 c0                	test   eax,eax
c001fbda:	75 34                	jne    c001fc10 <LinkedList<Device>::removeFirst()+0x8c>
c001fbdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fbe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbf8:	83 f8 01             	cmp    eax,0x1
c001fbfb:	74 27                	je     c001fc24 <LinkedList<Device>::removeFirst()+0xa0>
c001fbfd:	83 ec 0c             	sub    esp,0xc
c001fc00:	68 44 0b 02 c0       	push   0xc0020b44
c001fc05:	e8 47 17 ff ff       	call   c0011351 <KePanic(char const*)>
c001fc0a:	83 c4 10             	add    esp,0x10
c001fc0d:	eb 15                	jmp    c001fc24 <LinkedList<Device>::removeFirst()+0xa0>
c001fc0f:	90                   	nop
c001fc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc16:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc20:	89 10                	mov    DWORD PTR [eax],edx
c001fc22:	66 90                	xchg   ax,ax
c001fc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc2b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc35:	8d 76 00             	lea    esi,[esi+0x0]
c001fc38:	83 c4 0c             	add    esp,0xc
c001fc3b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fc3c <CPU::~CPU()>:
c001fc3c:	83 ec 0c             	sub    esp,0xc
c001fc3f:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c001fc44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc48:	89 10                	mov    DWORD PTR [eax],edx
c001fc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4e:	83 ec 0c             	sub    esp,0xc
c001fc51:	50                   	push   eax
c001fc52:	e8 d1 c9 fe ff       	call   c000c628 <Device::~Device()>
c001fc57:	83 c4 10             	add    esp,0x10
c001fc5a:	90                   	nop
c001fc5b:	83 c4 0c             	add    esp,0xc
c001fc5e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fc60 <CPU::~CPU()>:
c001fc60:	83 ec 0c             	sub    esp,0xc
c001fc63:	83 ec 0c             	sub    esp,0xc
c001fc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc6a:	e8 cd ff ff ff       	call   c001fc3c <CPU::~CPU()>
c001fc6f:	83 c4 10             	add    esp,0x10
c001fc72:	83 ec 08             	sub    esp,0x8
c001fc75:	68 94 11 00 00       	push   0x1194
c001fc7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc7e:	e8 95 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc83:	83 c4 10             	add    esp,0x10
c001fc86:	83 c4 0c             	add    esp,0xc
c001fc89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fc8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fc8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fc94 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fc94:	90                   	nop
c001fc95:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fc98 <ThreadControlBlock::ThreadControlBlock()>:
c001fc98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc9c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fca7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fcae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fcb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcbd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fcc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fccf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fcd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcdb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fcdf:	90                   	nop
c001fce0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fce4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fcee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcf2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcfd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd24:	90                   	nop
c001fd25:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fd26 <PCI::~PCI()>:
c001fd26:	83 ec 0c             	sub    esp,0xc
c001fd29:	ba 6c 2d 02 c0       	mov    edx,0xc0022d6c
c001fd2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd32:	89 10                	mov    DWORD PTR [eax],edx
c001fd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd38:	83 ec 0c             	sub    esp,0xc
c001fd3b:	50                   	push   eax
c001fd3c:	e8 7f c3 fe ff       	call   c000c0c0 <Bus::~Bus()>
c001fd41:	83 c4 10             	add    esp,0x10
c001fd44:	90                   	nop
c001fd45:	83 c4 0c             	add    esp,0xc
c001fd48:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fd4a <PCI::~PCI()>:
c001fd4a:	83 ec 0c             	sub    esp,0xc
c001fd4d:	83 ec 0c             	sub    esp,0xc
c001fd50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd54:	e8 cd ff ff ff       	call   c001fd26 <PCI::~PCI()>
c001fd59:	83 c4 10             	add    esp,0x10
c001fd5c:	83 ec 08             	sub    esp,0x8
c001fd5f:	68 5c 01 00 00       	push   0x15c
c001fd64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd68:	e8 ab aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd6d:	83 c4 10             	add    esp,0x10
c001fd70:	83 c4 0c             	add    esp,0xc
c001fd73:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fd74 <IDE::~IDE()>:
c001fd74:	83 ec 0c             	sub    esp,0xc
c001fd77:	ba 20 2e 02 c0       	mov    edx,0xc0022e20
c001fd7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd80:	89 10                	mov    DWORD PTR [eax],edx
c001fd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	50                   	push   eax
c001fd8a:	e8 11 cd fe ff       	call   c000caa0 <HardDiskController::~HardDiskController()>
c001fd8f:	83 c4 10             	add    esp,0x10
c001fd92:	90                   	nop
c001fd93:	83 c4 0c             	add    esp,0xc
c001fd96:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fd98 <IDE::~IDE()>:
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	83 ec 0c             	sub    esp,0xc
c001fd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda2:	e8 cd ff ff ff       	call   c001fd74 <IDE::~IDE()>
c001fda7:	83 c4 10             	add    esp,0x10
c001fdaa:	83 ec 08             	sub    esp,0x8
c001fdad:	68 70 02 00 00       	push   0x270
c001fdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb6:	e8 5d aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fdbb:	83 c4 10             	add    esp,0x10
c001fdbe:	83 c4 0c             	add    esp,0xc
c001fdc1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fdc2 <SATABus::~SATABus()>:
c001fdc2:	83 ec 0c             	sub    esp,0xc
c001fdc5:	ba 70 2e 02 c0       	mov    edx,0xc0022e70
c001fdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdce:	89 10                	mov    DWORD PTR [eax],edx
c001fdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	50                   	push   eax
c001fdd8:	e8 c3 cc fe ff       	call   c000caa0 <HardDiskController::~HardDiskController()>
c001fddd:	83 c4 10             	add    esp,0x10
c001fde0:	90                   	nop
c001fde1:	83 c4 0c             	add    esp,0xc
c001fde4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fde6 <SATABus::~SATABus()>:
c001fde6:	83 ec 0c             	sub    esp,0xc
c001fde9:	83 ec 0c             	sub    esp,0xc
c001fdec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdf0:	e8 cd ff ff ff       	call   c001fdc2 <SATABus::~SATABus()>
c001fdf5:	83 c4 10             	add    esp,0x10
c001fdf8:	83 ec 08             	sub    esp,0x8
c001fdfb:	68 64 01 00 00       	push   0x164
c001fe00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe04:	e8 0f aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe09:	83 c4 10             	add    esp,0x10
c001fe0c:	83 c4 0c             	add    esp,0xc
c001fe0f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fe10 <ATA::~ATA()>:
c001fe10:	83 ec 0c             	sub    esp,0xc
c001fe13:	ba b0 2e 02 c0       	mov    edx,0xc0022eb0
c001fe18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1c:	89 10                	mov    DWORD PTR [eax],edx
c001fe1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe22:	83 ec 0c             	sub    esp,0xc
c001fe25:	50                   	push   eax
c001fe26:	e8 57 cd fe ff       	call   c000cb82 <PhysicalDisk::~PhysicalDisk()>
c001fe2b:	83 c4 10             	add    esp,0x10
c001fe2e:	90                   	nop
c001fe2f:	83 c4 0c             	add    esp,0xc
c001fe32:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fe34 <ATA::~ATA()>:
c001fe34:	83 ec 0c             	sub    esp,0xc
c001fe37:	83 ec 0c             	sub    esp,0xc
c001fe3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe3e:	e8 cd ff ff ff       	call   c001fe10 <ATA::~ATA()>
c001fe43:	83 c4 10             	add    esp,0x10
c001fe46:	83 ec 08             	sub    esp,0x8
c001fe49:	68 7c 01 00 00       	push   0x17c
c001fe4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe52:	e8 c1 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe57:	83 c4 10             	add    esp,0x10
c001fe5a:	83 c4 0c             	add    esp,0xc
c001fe5d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fe5e <ATAPI::~ATAPI()>:
c001fe5e:	83 ec 0c             	sub    esp,0xc
c001fe61:	ba f8 2e 02 c0       	mov    edx,0xc0022ef8
c001fe66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6a:	89 10                	mov    DWORD PTR [eax],edx
c001fe6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe70:	83 ec 0c             	sub    esp,0xc
c001fe73:	50                   	push   eax
c001fe74:	e8 09 cd fe ff       	call   c000cb82 <PhysicalDisk::~PhysicalDisk()>
c001fe79:	83 c4 10             	add    esp,0x10
c001fe7c:	90                   	nop
c001fe7d:	83 c4 0c             	add    esp,0xc
c001fe80:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fe82 <ATAPI::~ATAPI()>:
c001fe82:	83 ec 0c             	sub    esp,0xc
c001fe85:	83 ec 0c             	sub    esp,0xc
c001fe88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe8c:	e8 cd ff ff ff       	call   c001fe5e <ATAPI::~ATAPI()>
c001fe91:	83 c4 10             	add    esp,0x10
c001fe94:	83 ec 08             	sub    esp,0x8
c001fe97:	68 84 01 00 00       	push   0x184
c001fe9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fea0:	e8 73 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fea5:	83 c4 10             	add    esp,0x10
c001fea8:	83 c4 0c             	add    esp,0xc
c001feab:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001feac <SATA::~SATA()>:
c001feac:	83 ec 0c             	sub    esp,0xc
c001feaf:	ba ac 2f 02 c0       	mov    edx,0xc0022fac
c001feb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb8:	89 10                	mov    DWORD PTR [eax],edx
c001feba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febe:	83 ec 0c             	sub    esp,0xc
c001fec1:	50                   	push   eax
c001fec2:	e8 bb cc fe ff       	call   c000cb82 <PhysicalDisk::~PhysicalDisk()>
c001fec7:	83 c4 10             	add    esp,0x10
c001feca:	90                   	nop
c001fecb:	83 c4 0c             	add    esp,0xc
c001fece:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fed0 <SATA::~SATA()>:
c001fed0:	83 ec 0c             	sub    esp,0xc
c001fed3:	83 ec 0c             	sub    esp,0xc
c001fed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feda:	e8 cd ff ff ff       	call   c001feac <SATA::~SATA()>
c001fedf:	83 c4 10             	add    esp,0x10
c001fee2:	83 ec 08             	sub    esp,0x8
c001fee5:	68 7c 01 00 00       	push   0x17c
c001feea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feee:	e8 25 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fef3:	83 c4 10             	add    esp,0x10
c001fef6:	83 c4 0c             	add    esp,0xc
c001fef9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fefa <SATAPI::~SATAPI()>:
c001fefa:	83 ec 0c             	sub    esp,0xc
c001fefd:	ba d0 30 02 c0       	mov    edx,0xc00230d0
c001ff02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff06:	89 10                	mov    DWORD PTR [eax],edx
c001ff08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0c:	83 ec 0c             	sub    esp,0xc
c001ff0f:	50                   	push   eax
c001ff10:	e8 6d cc fe ff       	call   c000cb82 <PhysicalDisk::~PhysicalDisk()>
c001ff15:	83 c4 10             	add    esp,0x10
c001ff18:	90                   	nop
c001ff19:	83 c4 0c             	add    esp,0xc
c001ff1c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ff1e <SATAPI::~SATAPI()>:
c001ff1e:	83 ec 0c             	sub    esp,0xc
c001ff21:	83 ec 0c             	sub    esp,0xc
c001ff24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff28:	e8 cd ff ff ff       	call   c001fefa <SATAPI::~SATAPI()>
c001ff2d:	83 c4 10             	add    esp,0x10
c001ff30:	83 ec 08             	sub    esp,0x8
c001ff33:	68 84 01 00 00       	push   0x184
c001ff38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff3c:	e8 d7 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff41:	83 c4 10             	add    esp,0x10
c001ff44:	83 c4 0c             	add    esp,0xc
c001ff47:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ff48 <IOAPIC::~IOAPIC()>:
c001ff48:	83 ec 0c             	sub    esp,0xc
c001ff4b:	ba 10 31 02 c0       	mov    edx,0xc0023110
c001ff50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff54:	89 10                	mov    DWORD PTR [eax],edx
c001ff56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5a:	83 ec 0c             	sub    esp,0xc
c001ff5d:	50                   	push   eax
c001ff5e:	e8 c5 c6 fe ff       	call   c000c628 <Device::~Device()>
c001ff63:	83 c4 10             	add    esp,0x10
c001ff66:	90                   	nop
c001ff67:	83 c4 0c             	add    esp,0xc
c001ff6a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ff6c <IOAPIC::~IOAPIC()>:
c001ff6c:	83 ec 0c             	sub    esp,0xc
c001ff6f:	83 ec 0c             	sub    esp,0xc
c001ff72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff76:	e8 cd ff ff ff       	call   c001ff48 <IOAPIC::~IOAPIC()>
c001ff7b:	83 c4 10             	add    esp,0x10
c001ff7e:	83 ec 08             	sub    esp,0x8
c001ff81:	68 68 01 00 00       	push   0x168
c001ff86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff8a:	e8 89 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff8f:	83 c4 10             	add    esp,0x10
c001ff92:	83 c4 0c             	add    esp,0xc
c001ff95:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ff98 <APICTimer::~APICTimer()>:
c001ff98:	83 ec 0c             	sub    esp,0xc
c001ff9b:	ba 58 31 02 c0       	mov    edx,0xc0023158
c001ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa4:	89 10                	mov    DWORD PTR [eax],edx
c001ffa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffaa:	83 ec 0c             	sub    esp,0xc
c001ffad:	50                   	push   eax
c001ffae:	e8 41 e1 fe ff       	call   c000e0f4 <Timer::~Timer()>
c001ffb3:	83 c4 10             	add    esp,0x10
c001ffb6:	90                   	nop
c001ffb7:	83 c4 0c             	add    esp,0xc
c001ffba:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ffbc <APICTimer::~APICTimer()>:
c001ffbc:	83 ec 0c             	sub    esp,0xc
c001ffbf:	83 ec 0c             	sub    esp,0xc
c001ffc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc6:	e8 cd ff ff ff       	call   c001ff98 <APICTimer::~APICTimer()>
c001ffcb:	83 c4 10             	add    esp,0x10
c001ffce:	83 ec 08             	sub    esp,0x8
c001ffd1:	68 60 01 00 00       	push   0x160
c001ffd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffda:	e8 39 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ffdf:	83 c4 10             	add    esp,0x10
c001ffe2:	83 c4 0c             	add    esp,0xc
c001ffe5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ffe8 <PIT::~PIT()>:
c001ffe8:	83 ec 0c             	sub    esp,0xc
c001ffeb:	ba a8 31 02 c0       	mov    edx,0xc00231a8
c001fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff4:	89 10                	mov    DWORD PTR [eax],edx
c001fff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffa:	83 ec 0c             	sub    esp,0xc
c001fffd:	50                   	push   eax
c001fffe:	e8 f1 e0 fe ff       	call   c000e0f4 <Timer::~Timer()>
c0020003:	83 c4 10             	add    esp,0x10
c0020006:	90                   	nop
c0020007:	83 c4 0c             	add    esp,0xc
c002000a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002000c <PIT::~PIT()>:
c002000c:	83 ec 0c             	sub    esp,0xc
c002000f:	83 ec 0c             	sub    esp,0xc
c0020012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020016:	e8 cd ff ff ff       	call   c001ffe8 <PIT::~PIT()>
c002001b:	83 c4 10             	add    esp,0x10
c002001e:	83 ec 08             	sub    esp,0x8
c0020021:	68 5c 01 00 00       	push   0x15c
c0020026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002002a:	e8 e9 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002002f:	83 c4 10             	add    esp,0x10
c0020032:	83 c4 0c             	add    esp,0xc
c0020035:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be bd 1f 02 c0       	mov    esi,0xc0021fbd
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be d9 1f 02 c0       	mov    esi,0xc0021fd9
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
